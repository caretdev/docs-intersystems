"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[26693],{72955:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>l,default:()=>c,frontMatter:()=>t,toc:()=>i});var r=n(74848),a=n(28453);const t={pagination_prev:null,pagination_next:null},l="%SYS.ProcessQuery",i=[{value:"Parameters",id:"parameters",level:2},{value:"DEFAULTCONCURRENCY",id:"defaultconcurrency",level:3},{value:"DOMAIN",id:"domain",level:3},{value:"Properties",id:"properties",level:2},{value:"AppFrameInfo",id:"appframeinfo",level:3},{value:"CanBeExamined",id:"canbeexamined",level:3},{value:"CanBeSuspended",id:"canbesuspended",level:3},{value:"CanBeTerminated",id:"canbeterminated",level:3},{value:"CanReceiveBroadcast",id:"canreceivebroadcast",level:3},{value:"ClientExecutableName",id:"clientexecutablename",level:3},{value:"ClientIPAddress",id:"clientipaddress",level:3},{value:"ClientNodeName",id:"clientnodename",level:3},{value:"CommandsExecuted",id:"commandsexecuted",level:3},{value:"CSPSessionID",id:"cspsessionid",level:3},{value:"CurrentDevice",id:"currentdevice",level:3},{value:"CurrentLineAndRoutine",id:"currentlineandroutine",level:3},{value:"CurrentSrcLine",id:"currentsrcline",level:3},{value:"EscalatedRoles",id:"escalatedroles",level:3},{value:"GlobalReferences",id:"globalreferences",level:3},{value:"GlobalUpdates",id:"globalupdates",level:3},{value:"GlobalDiskReads",id:"globaldiskreads",level:3},{value:"GlobalBlocks",id:"globalblocks",level:3},{value:"DataBlockWrites",id:"datablockwrites",level:3},{value:"InTransaction",id:"intransaction",level:3},{value:"IsGhost",id:"isghost",level:3},{value:"JobNumber",id:"jobnumber",level:3},{value:"JobType",id:"jobtype",level:3},{value:"JournalEntries",id:"journalentries",level:3},{value:"LastGlobalReference",id:"lastglobalreference",level:3},{value:"LicenseUserId",id:"licenseuserid",level:3},{value:"LinesExecuted",id:"linesexecuted",level:3},{value:"Location",id:"location",level:3},{value:"LoginRoles",id:"loginroles",level:3},{value:"MemoryAllocated",id:"memoryallocated",level:3},{value:"MemoryUsed",id:"memoryused",level:3},{value:"MemoryPeak",id:"memorypeak",level:3},{value:"NameSpace",id:"namespace",level:3},{value:"OpenDevices",id:"opendevices",level:3},{value:"OSUserName",id:"osusername",level:3},{value:"CPUTime",id:"cputime",level:3},{value:"Pid",id:"pid",level:3},{value:"PrivateGlobalBlockCount",id:"privateglobalblockcount",level:3},{value:"PrivateGlobalReferences",id:"privateglobalreferences",level:3},{value:"PrivateGlobalUpdates",id:"privateglobalupdates",level:3},{value:"PidExternal",id:"pidexternal",level:3},{value:"PrincipalDevice",id:"principaldevice",level:3},{value:"Priority",id:"priority",level:3},{value:"Roles",id:"roles",level:3},{value:"Routine",id:"routine",level:3},{value:"StartupClientIPAddress",id:"startupclientipaddress",level:3},{value:"StartupClientNodeName",id:"startupclientnodename",level:3},{value:"State",id:"state",level:3},{value:"Switch10",id:"switch10",level:3},{value:"UserInfo",id:"userinfo",level:3},{value:"UserName",id:"username",level:3},{value:"Methods",id:"methods",level:2},{value:"ClientExecutableNameSet",id:"clientexecutablenameset",level:3},{value:"ClientIPAddressSet",id:"clientipaddressset",level:3},{value:"ClientNodeNameSet",id:"clientnodenameset",level:3},{value:"EscalatedRolesGet",id:"escalatedrolesget",level:3},{value:"UserInfoSet",id:"userinfoset",level:3},{value:"AllowToOpen",id:"allowtoopen",level:3},{value:"GetCurrentLineAndRoutine",id:"getcurrentlineandroutine",level:3},{value:"GetCurrentSrcLine",id:"getcurrentsrcline",level:3},{value:"GetLastGlobalReference",id:"getlastglobalreference",level:3},{value:"GetView",id:"getview",level:3},{value:"GetViewList",id:"getviewlist",level:3},{value:"GetLoginRoutine",id:"getloginroutine",level:3},{value:"GetCPUTime",id:"getcputime",level:3},{value:"GetOSUsername",id:"getosusername",level:3},{value:"GetAppFrameInfo",id:"getappframeinfo",level:3},{value:"KillAllPrivateGlobals",id:"killallprivateglobals",level:3},{value:"GetVariableList",id:"getvariablelist",level:3},{value:"VariableValue",id:"variablevalue",level:3},{value:"VariableDataFlags",id:"variabledataflags",level:3},{value:"VariableQuery",id:"variablequery",level:3},{value:"GetInternalStackLevel",id:"getinternalstacklevel",level:3},{value:"NextProcess",id:"nextprocess",level:3},{value:"Open",id:"open",level:3},{value:"StateLogicalToDisplay",id:"statelogicaltodisplay",level:3},{value:"DecodeState",id:"decodestate",level:3},{value:"%OnOpen",id:"onopen",level:3},{value:"%SQLAcquireLock",id:"sqlacquirelock",level:3},{value:"%SQLAcquireTableLock",id:"sqlacquiretablelock",level:3},{value:"%SQLReleaseLock",id:"sqlreleaselock",level:3},{value:"%SQLReleaseTableLock",id:"sqlreleasetablelock",level:3},{value:"CONTROLPANELExecute",id:"controlpanelexecute",level:3},{value:"CONTROLPANELFetch",id:"controlpanelfetch",level:3},{value:"CONTROLPANELClose",id:"controlpanelclose",level:3},{value:"JOBEXAMExecute",id:"jobexamexecute",level:3},{value:"JOBEXAMFetch",id:"jobexamfetch",level:3},{value:"JOBEXAMClose",id:"jobexamclose",level:3},{value:"ListPidsExecute",id:"listpidsexecute",level:3},{value:"ListPidsFetch",id:"listpidsfetch",level:3},{value:"ListPidsClose",id:"listpidsclose",level:3},{value:"SSExecute",id:"ssexecute",level:3},{value:"SSFetch",id:"ssfetch",level:3},{value:"SSClose",id:"ssclose",level:3},{value:"VariableByJobNumberExecute",id:"variablebyjobnumberexecute",level:3},{value:"VariableByJobNumberFetch",id:"variablebyjobnumberfetch",level:3},{value:"VariableByJobNumberClose",id:"variablebyjobnumberclose",level:3},{value:"VariableByPidExecute",id:"variablebypidexecute",level:3},{value:"VariableByPidFetch",id:"variablebypidfetch",level:3},{value:"VariableByPidClose",id:"variablebypidclose",level:3},{value:"VariableListExecute",id:"variablelistexecute",level:3},{value:"VariableListFetch",id:"variablelistfetch",level:3},{value:"VariableListClose",id:"variablelistclose",level:3},{value:"PPGExecute",id:"ppgexecute",level:3},{value:"PPGClose",id:"ppgclose",level:3},{value:"PPGFetch",id:"ppgfetch",level:3},{value:"PPGInfo",id:"ppginfo",level:3},{value:"TopExecute",id:"topexecute",level:3},{value:"TopFetch",id:"topfetch",level:3},{value:"TopClose",id:"topclose",level:3},{value:"TopGlobalExecute",id:"topglobalexecute",level:3},{value:"TopGlobalFetch",id:"topglobalfetch",level:3},{value:"TopGlobalClose",id:"topglobalclose",level:3},{value:"EnableJournalInt",id:"enablejournalint",level:3},{value:"DisableJournalInt",id:"disablejournalint",level:3},{value:"ExamStackByPid",id:"examstackbypid",level:3},{value:"GetOpenDevices",id:"getopendevices",level:3}];function o(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",undefined:"undefined",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"sysprocessquery",children:"%SYS.ProcessQuery"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Class %SYS.ProcessQuery Extends (%Persistent, %SYSTEM.Help) [ Inheritance = right, StorageStrategy = Process, System = 4 ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["This class allows manipulation and display of InterSystems IRIS processes running on the system.",(0,r.jsx)(s.br,{}),"\nAn instance of the class can be opened by passing the PID (O/S process id) to the %OpenId Method. The PID is in decimal form ($J) for all platforms."]}),"\n",(0,r.jsx)(s.p,{children:'NOTE: Previous versions of this class allowed you to call the %OpenId method and pass in either a PID preceded by the letter "P", or a job number preceded by the letter "J". This functionality has been removed from the %OpenId() method, and moved to the new Open() method which supports this syntax.'}),"\n",(0,r.jsx)(s.p,{children:"For example, the following open a process with a PID of 2078:"}),"\n",(0,r.jsxs)(s.p,{children:['s Process=##CLASS(%SYS.ProcessQuery).%OpenId("2078")',(0,r.jsx)(s.br,{}),'\ns Process=##CLASS(%SYS.ProcessQuery).Open("P2078")',(0,r.jsx)(s.br,{}),'\ns Process=##CLASS(%SYS.ProcessQuery).Open("2078")']}),"\n",(0,r.jsx)(s.p,{children:"The following will open Job number 23"}),"\n",(0,r.jsx)(s.p,{children:'s Process=##CLASS(%SYS.ProcessQuery).Open("J23")'}),"\n",(0,r.jsxs)(s.p,{children:["Performance considerations:",(0,r.jsx)(s.br,{}),"\nWhen you use %OpenId() to examine a process, several mailbox messages will get sent to the process to return ALL of the properties for the object. On systems with lots of processes running, and you are collecting data for a lot of processes, this can cause a lot of overhead. The call to each %OpenId() in this case may actually take several seconds to complete. Most of a processes properties can be retrieved without the overhead of a mailbox message. See the description of the individual properties below for which properties require a mailbox message to be sent.",(0,r.jsx)(s.br,{}),"\nIf you want to minimize overhead, you should use an SQL statement to select ONLY the data which you want returned. For example, here is some code which loops through all the processes on the system, and retrieves specific data for each process. Note that the properties which are returned in this example are ones which do not require a mailbox messages to be sent to the process being examined. Note that the %syPidtab.inc file needs to be included in your routine in order for the following code to compile cleanly."]}),"\n",(0,r.jsxs)(s.p,{children:["#include %syPidtab",(0,r.jsx)(s.br,{}),'\nSet Rset = ##class(%ResultSet).%New("%SYS.ProcessQuery:ListPids")',(0,r.jsx)(s.br,{}),"\nd Rset.Execute()",(0,r.jsx)(s.br,{}),"\nWhile Rset.Next() {",(0,r.jsx)(s.br,{}),"\n&sql(SELECT CommandsExecuted,GlobalReferences INTO :CommandsExecuted,:GlobalReferences",(0,r.jsx)(s.br,{}),"\nFROM %SYS.ProcessQuery",(0,r.jsx)(s.br,{}),"\nWHERE Pid = :Rset.GetData(1))",(0,r.jsx)(s.br,{}),'\ni SQLCODE\'=0 w !,"SQL Error "_SQLCODE continue ; 100 means process does not exist (halted)',(0,r.jsx)(s.br,{}),'\nw !,Rset.GetData(1)," ",CommandsExecuted," ",GlobalReferences',(0,r.jsx)(s.br,{}),"\n}",(0,r.jsx)(s.br,{}),"\nd Rset.Close()"]}),"\n",(0,r.jsxs)(s.p,{children:["Security considerations:",(0,r.jsx)(s.br,{}),"\nAny process can open an instance to their own process by passing the value of $J to the %OpenId() method:"]}),"\n",(0,r.jsx)(s.p,{children:"s Process=##CLASS(%SYS.ProcessQuery).%OpenId($j)"}),"\n",(0,r.jsxs)(s.p,{children:["If you wish to open another process, you must own the %Admin_Manage:Use resource, or have read or write access to the CACHESYS database. To minimize overhead in the %OpenId() method, having the %Admin_Manage:Use privilege is recommended.",(0,r.jsx)(s.br,{}),"\nThis class has an SQL table called %SYS.ProcessQuery where you can execute an SQL query to return process data. For example you could execute the following queries:"]}),"\n",(0,r.jsxs)(s.p,{children:["Select * from %SYS.ProcessQuery - Return all information about all processes",(0,r.jsx)(s.br,{}),"\nSelect * from %SYS.ProcessQuery where NameSpace = 'User\" - Return all information about all processes in the USER namespace.",(0,r.jsx)(s.br,{}),"\nNote that in order to run this from an unprivileged user, you may need to grant privileges to that user on the table as follows:"]}),"\n",(0,r.jsx)(s.p,{children:"GRANT SELECT ON %SYS.ProcessQuery TO _PUBLIC"}),"\n",(0,r.jsxs)(s.p,{children:["Notes:",(0,r.jsx)(s.br,{}),"\nReplace _PUBLIC to a specific user or role name if you don't want everyone to have the privilege.",(0,r.jsx)(s.br,{}),"\nThis is per-namespace. This needs to be executed in each namespace the table needs to be queried from."]}),"\n",(0,r.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(s.h3,{id:"defaultconcurrency",children:"DEFAULTCONCURRENCY"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter DEFAULTCONCURRENCY = 0;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"domain",children:"DOMAIN"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter DOMAIN = "%Utility";\n'})}),"\n",(0,r.jsx)(s.p,{children:"Set this to the correct domain."}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.h3,{id:"appframeinfo",children:"AppFrameInfo"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property AppFrameInfo As %List [ ReadOnly, SqlColumnNumber = 52 ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"The entire application metadata frame information."}),"\n",(0,r.jsx)(s.h3,{id:"canbeexamined",children:"CanBeExamined"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property CanBeExamined As %Boolean [ ReadOnly, SqlColumnNumber = 20 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Process can be examined.",(0,r.jsx)(s.br,{}),"\nFlag checked by JOBEXAM and Management Portal to see if a process can be examined in detail."]}),"\n",(0,r.jsx)(s.h3,{id:"canbesuspended",children:"CanBeSuspended"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property CanBeSuspended As %Boolean [ ReadOnly, SqlColumnNumber = 21 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Process can be suspended.",(0,r.jsx)(s.br,{}),"\nFlag checked by JOBEXAM and Management Portal to see if a process can be suspended."]}),"\n",(0,r.jsx)(s.h3,{id:"canbeterminated",children:"CanBeTerminated"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property CanBeTerminated As %Boolean [ ReadOnly, SqlColumnNumber = 22 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Process can be terminated.",(0,r.jsx)(s.br,{}),"\nFlag checked by JOBEXAM and Management Portal to see if a process can be terminated."]}),"\n",(0,r.jsx)(s.h3,{id:"canreceivebroadcast",children:"CanReceiveBroadcast"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property CanReceiveBroadcast As %Boolean [ ReadOnly, SqlColumnNumber = 23 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Process can receive broadcast.",(0,r.jsx)(s.br,{}),"\nFlag checked by JOBEXAM and Management Portal to see if a process can receive a broadcast. Usually this means they are attached to a terminal."]}),"\n",(0,r.jsx)(s.h3,{id:"clientexecutablename",children:"ClientExecutableName"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ClientExecutableName As %String [ SqlColumnNumber = 16 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Executable name of the process on the client.",(0,r.jsx)(s.br,{}),"\nThe name of the Executable or DLL on the client which initiated the connection. It is passed down to the process as part of the initial connection message. This property may be set by the end-user if they are managing their own connections."]}),"\n",(0,r.jsx)(s.h3,{id:"clientipaddress",children:"ClientIPAddress"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ClientIPAddress As %String [ SqlColumnNumber = 9 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["IP Address of client connected to the process.",(0,r.jsx)(s.br,{}),"\nIP address of the client which initiated the connection. It is passed down to the process as part of the initial connection message. This property may be set by the end-user if they are managing their own connections."]}),"\n",(0,r.jsx)(s.h3,{id:"clientnodename",children:"ClientNodeName"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ClientNodeName As %String [ SqlColumnNumber = 10 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Node Name of the client connected to the process.",(0,r.jsx)(s.br,{}),"\nNode name of the client which initiated the connection. It is passed down to the process as part of the initial connection message. This property may be set by the end-user if they are managing their own connections."]}),"\n",(0,r.jsx)(s.h3,{id:"commandsexecuted",children:"CommandsExecuted"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property CommandsExecuted As %BigInt [ ReadOnly, SqlColumnNumber = 38 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Number of Commands Executed.",(0,r.jsx)(s.br,{}),"\nTotal number of commands which the process has executed."]}),"\n",(0,r.jsx)(s.h3,{id:"cspsessionid",children:"CSPSessionID"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property CSPSessionID As %String [ ReadOnly, SqlColumnNumber = 24 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["CSP Session ID of client connected to process.",(0,r.jsx)(s.br,{}),"\nCSP session ID of the client which initiated the connection. It is passed down to the process as part of the initial connection message, and used to manager the CSP session."]}),"\n",(0,r.jsx)(s.h3,{id:"currentdevice",children:"CurrentDevice"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property CurrentDevice As %String [ ReadOnly, SqlColumnNumber = 11 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Current Device ($i).",(0,r.jsx)(s.br,{}),"\nCurrent device that the process has open and is USEing via the USE command."]}),"\n",(0,r.jsx)(s.h3,{id:"currentlineandroutine",children:"CurrentLineAndRoutine"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property CurrentLineAndRoutine As %String [ ReadOnly, SqlColumnNumber = 13 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Current Line and Routine.",(0,r.jsx)(s.br,{}),"\nCurrent line and routine that the process is executing. Returned in +number^routine format.",(0,r.jsx)(s.br,{}),"\nThis property requires a mailbox message to be sent to the process being examined."]}),"\n",(0,r.jsx)(s.h3,{id:"currentsrcline",children:"CurrentSrcLine"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Property CurrentSrcLine As %String(MAXLEN = "") [ ReadOnly, SqlColumnNumber = 14 ];\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Current Source Line being executed.",(0,r.jsx)(s.br,{}),'\nCurrent line of source code which is being executed by the process. If "", then the source code line is unavailable.',(0,r.jsx)(s.br,{}),"\nThis property requires a mailbox message to be sent to the process being examined. If the routine has been modified compared to the pcode being run then this will point to the current routine source rather than the actual source of the code being executed."]}),"\n",(0,r.jsx)(s.h3,{id:"escalatedroles",children:"EscalatedRoles"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property EscalatedRoles As %String [ Calculated, SqlColumnNumber = 47 ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"Additional roles granted to the set of login roles."}),"\n",(0,r.jsx)(s.h3,{id:"globalreferences",children:"GlobalReferences"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property GlobalReferences As %BigInt [ ReadOnly, SqlColumnNumber = 5 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Number of Global References.",(0,r.jsx)(s.br,{}),"\nTotal number of global references the process has made."]}),"\n",(0,r.jsx)(s.h3,{id:"globalupdates",children:"GlobalUpdates"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property GlobalUpdates As %Integer [ ReadOnly, SqlColumnNumber = 40 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Number of Global Updates.",(0,r.jsx)(s.br,{}),"\nTotal number of global updates (sets and kills) the process has made."]}),"\n",(0,r.jsx)(s.h3,{id:"globaldiskreads",children:"GlobalDiskReads"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property GlobalDiskReads As %Integer [ ReadOnly, SqlColumnNumber = 41 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Number of Physical Database Reads.",(0,r.jsx)(s.br,{}),"\nTotal number of times the process has fetched data from disk."]}),"\n",(0,r.jsx)(s.h3,{id:"globalblocks",children:"GlobalBlocks"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property GlobalBlocks As %Integer [ ReadOnly, SqlColumnNumber = 42 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Number of Database Block Allocations.",(0,r.jsx)(s.br,{}),"\nTotal number of new database blocks the process has allocated. An indication of database growth."]}),"\n",(0,r.jsx)(s.h3,{id:"datablockwrites",children:"DataBlockWrites"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property DataBlockWrites As %Integer [ ReadOnly, SqlColumnNumber = 48 ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"Total number of database blocks queued for writing by this process."}),"\n",(0,r.jsx)(s.h3,{id:"intransaction",children:"InTransaction"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property InTransaction As %Integer [ ReadOnly, SqlColumnNumber = 25 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["In a transaction.",(0,r.jsx)(s.br,{}),"\nIf 0, the process is not in a transaction.",(0,r.jsx)(s.br,{}),"\nIf >0, the process has executed a tstart command, is in a transaction, and the value is the offset in the journal file where the transaction has started."]}),"\n",(0,r.jsx)(s.h3,{id:"isghost",children:"IsGhost"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property IsGhost As %Boolean [ ReadOnly, SqlColumnNumber = 26 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Is a Ghost process.",(0,r.jsx)(s.br,{}),"\nThe process has been killed at the O/S level, and has not yet been cleaned up by the CLNDMN process. Until the process is cleaned, there may be outstanding locks or resources which may be unavailable to other processes.",(0,r.jsx)(s.br,{}),"\nThis property requires a mailbox message to be sent to the process being examined."]}),"\n",(0,r.jsx)(s.h3,{id:"jobnumber",children:"JobNumber"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property JobNumber As %Integer [ ReadOnly, SqlColumnNumber = 27 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Job number in process table.",(0,r.jsx)(s.br,{}),"\nUsed as an index into the job table. May be passed to the Open() method to open an object instance to that process."]}),"\n",(0,r.jsx)(s.h3,{id:"jobtype",children:"JobType"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property JobType As %Integer [ ReadOnly, SqlColumnNumber = 28 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Job type.",(0,r.jsx)(s.br,{}),"\nNumber which tells what type of process it is.",(0,r.jsx)(s.br,{}),"\nSee the %syPidtab.inc include file for a definition of macros for these fields. Only use the defined macros in %syPidtab when referencing these fields. For example:"]}),"\n",(0,r.jsx)(s.p,{children:'If Process.JobType=$$$WDTYPE w !,"Process is the write daemon"'}),"\n",(0,r.jsx)(s.h3,{id:"journalentries",children:"JournalEntries"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property JournalEntries As %Integer [ ReadOnly, SqlColumnNumber = 43 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Number of Journal Entries.",(0,r.jsx)(s.br,{}),"\nTotal number of journaled global updates the process has recorded. An indication of journal file growth."]}),"\n",(0,r.jsx)(s.h3,{id:"lastglobalreference",children:"LastGlobalReference"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Property LastGlobalReference As %String(MAXLEN = "") [ ReadOnly, SqlColumnNumber = 15 ];\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Last Global Reference.",(0,r.jsx)(s.br,{}),"\nLast global reference that the process made.",(0,r.jsx)(s.br,{}),"\nThis property requires a mailbox message to be sent to the process being examined."]}),"\n",(0,r.jsx)(s.h3,{id:"licenseuserid",children:"LicenseUserId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property LicenseUserId As %String [ ReadOnly, SqlColumnNumber = 29 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["User Id used for license.",(0,r.jsx)(s.br,{}),"\nThe User ID which took out the license for the process."]}),"\n",(0,r.jsx)(s.h3,{id:"linesexecuted",children:"LinesExecuted"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property LinesExecuted As %BigInt [ Deprecated, ReadOnly, SqlColumnNumber = 4 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Number of Lines Executed.",(0,r.jsx)(s.br,{}),"\nTotal number of lines which the process has executed. NOTE: This property is deprecated, line counts are no longer available and this actually returns the CommandsExecuted. It is left here for backwards compatibility, but should no longer be used."]}),"\n",(0,r.jsx)(s.h3,{id:"location",children:"Location"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Location As %String [ ReadOnly, SqlColumnNumber = 30 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Location.",(0,r.jsx)(s.br,{}),"\nIf a system process, will be the system processes name.",(0,r.jsx)(s.br,{}),'\nIf a user process, will be the value of $g(^%IS(0,Job.CurrentDevice),"")']}),"\n",(0,r.jsx)(s.h3,{id:"loginroles",children:"LoginRoles"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property LoginRoles As %String [ ReadOnly, SqlColumnNumber = 46 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Login roles.",(0,r.jsx)(s.br,{}),"\nRoles a process has when it initially logs in."]}),"\n",(0,r.jsx)(s.h3,{id:"memoryallocated",children:"MemoryAllocated"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property MemoryAllocated As %Integer [ ReadOnly, SqlColumnNumber = 17 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Maximum memory able to be used in KB ($ZS).",(0,r.jsx)(s.br,{}),"\nMaximum amount of memory in KB that the process is allowed to use.",(0,r.jsx)(s.br,{}),"\nThis property requires a mailbox message to be sent to the process being examined."]}),"\n",(0,r.jsx)(s.h3,{id:"memoryused",children:"MemoryUsed"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property MemoryUsed As %Integer [ ReadOnly, SqlColumnNumber = 18 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Memory used in KB (Current $s).",(0,r.jsx)(s.br,{}),"\nCurrent amount of memory the process has used in KB.",(0,r.jsx)(s.br,{}),"\nThis property requires a mailbox message to be sent to the process being examined."]}),"\n",(0,r.jsx)(s.h3,{id:"memorypeak",children:"MemoryPeak"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property MemoryPeak As %Integer [ ReadOnly, SqlColumnNumber = 44 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Peak memory allocated in KB.",(0,r.jsx)(s.br,{}),"\nThis property requires a mailbox message to be sent to the process being examined."]}),"\n",(0,r.jsx)(s.h3,{id:"namespace",children:"NameSpace"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property NameSpace As %String [ ReadOnly, SqlColumnNumber = 2 ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"Namespace process is executing in."}),"\n",(0,r.jsx)(s.h3,{id:"opendevices",children:"OpenDevices"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property OpenDevices As %String [ ReadOnly, SqlColumnNumber = 19 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["List of open devices.",(0,r.jsx)(s.br,{}),"\nList of devices which the process has opened. Returned as a comma separated string.",(0,r.jsx)(s.br,{}),'\nIf any device name in the list contained ",", users won\'t be able to parse the list. Users should use $LFS(OpenDevices,",",2) to convert the comma separated string to a $List() format string in order to get each device in the list.',(0,r.jsx)(s.br,{}),"\nThis property requires a mailbox message to be sent to the process being examined."]}),"\n",(0,r.jsx)(s.h3,{id:"osusername",children:"OSUserName"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property OSUserName As %String [ ReadOnly, SqlColumnNumber = 31 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Operating system username of process.",(0,r.jsx)(s.br,{}),"\nUsername given to the process by the operating system when the process is created. When displayed, it is truncated to 16 characters. Note that the real O/S username is only returned when connecting to UNIX or VMS systems; For Windows, it will return the O/S username for a console process, but for telnet it will return the $USERNAME of the process. For client connections, it contains the O/S username of the client. This field is truncated at 16 characters."]}),"\n",(0,r.jsx)(s.h3,{id:"cputime",children:"CPUTime"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property CPUTime As %BigInt [ ReadOnly, SqlColumnNumber = 51 ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"Sum of system and user CPU Time in ms for process (no mailbox message)"}),"\n",(0,r.jsx)(s.h3,{id:"pid",children:"Pid"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Pid As %Integer [ ReadOnly, SqlColumnNumber = 32 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Process ID.",(0,r.jsx)(s.br,{}),"\nProcess ID ($J) given to the process by the O/S, decimal form on all platforms."]}),"\n",(0,r.jsx)(s.h3,{id:"privateglobalblockcount",children:"PrivateGlobalBlockCount"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property PrivateGlobalBlockCount As %Integer [ ReadOnly, SqlColumnNumber = 37 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Number of private global database blocks.",(0,r.jsx)(s.br,{}),"\nThis property contains the # of database blocks currently allocated to store process private globals."]}),"\n",(0,r.jsx)(s.h3,{id:"privateglobalreferences",children:"PrivateGlobalReferences"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property PrivateGlobalReferences As %BigInt [ ReadOnly, SqlColumnNumber = 49 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Number of Process Private Global References.",(0,r.jsx)(s.br,{}),"\nTotal number of private global references the process has made."]}),"\n",(0,r.jsx)(s.h3,{id:"privateglobalupdates",children:"PrivateGlobalUpdates"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property PrivateGlobalUpdates As %BigInt [ ReadOnly, SqlColumnNumber = 50 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Number of Process Private Global Updates.",(0,r.jsx)(s.br,{}),"\nTotal number of private global updates (sets and kills) the process has made."]}),"\n",(0,r.jsx)(s.h3,{id:"pidexternal",children:"PidExternal"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property PidExternal As %String [ ReadOnly, SqlColumnNumber = 7 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Index on Pid field.",(0,r.jsx)(s.br,{}),"\nUses NextProcess(Pid) to retrieve next process id. External Process PID. Decimal value for Windows, Unix and Mac, hex for VMS."]}),"\n",(0,r.jsx)(s.h3,{id:"principaldevice",children:"PrincipalDevice"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property PrincipalDevice As %String [ ReadOnly, SqlColumnNumber = 39 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Principal Device ($P).",(0,r.jsx)(s.br,{}),"\nThis property requires a mailbox message to be sent to the process being examined."]}),"\n",(0,r.jsx)(s.h3,{id:"priority",children:"Priority"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Priority As %Integer [ ReadOnly, SqlColumnNumber = 33 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Priority.",(0,r.jsx)(s.br,{}),"\nPriority of the process at the O/S level."]}),"\n",(0,r.jsx)(s.h3,{id:"roles",children:"Roles"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Roles As %String [ ReadOnly, SqlColumnNumber = 45 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["$Roles.",(0,r.jsx)(s.br,{}),"\nRoles a process currently has."]}),"\n",(0,r.jsx)(s.h3,{id:"routine",children:"Routine"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Routine As %String [ ReadOnly, SqlColumnNumber = 3 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Routine currently executing.",(0,r.jsx)(s.br,{}),"\nName of the routine which the process is currently executing."]}),"\n",(0,r.jsx)(s.h3,{id:"startupclientipaddress",children:"StartupClientIPAddress"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property StartupClientIPAddress As %String [ ReadOnly, SqlColumnNumber = 34 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Startup IP Address of client.",(0,r.jsx)(s.br,{}),"\nIP address of the client as detected on the TCP channel by the server process."]}),"\n",(0,r.jsx)(s.h3,{id:"startupclientnodename",children:"StartupClientNodeName"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property StartupClientNodeName As %String [ ReadOnly, SqlColumnNumber = 35 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Startup Node Name of client.",(0,r.jsx)(s.br,{}),"\nIP Node name of the client as detected on the TCP channel by the server process."]}),"\n",(0,r.jsx)(s.h3,{id:"state",children:"State"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property State As %String [ ReadOnly, SqlColumnNumber = 6 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Current state of the process as determined by the processes state bits.",(0,r.jsx)(s.br,{}),"\nThe following are all the different states a process can be in. The process may also have a number of different flags within these states which are appended to the end of the state name:"]}),"\n",(0,r.jsxs)(s.p,{children:["LOCK - Executing a Lock command",(0,r.jsx)(s.br,{}),"\nOPEN - Opening a device",(0,r.jsx)(s.br,{}),"\nCLOS - Closing a device",(0,r.jsx)(s.br,{}),"\nUSE - Using a device",(0,r.jsx)(s.br,{}),"\nREAD - Read command",(0,r.jsx)(s.br,{}),"\nWRT - Write command",(0,r.jsx)(s.br,{}),"\nGET - Executing a $Get on a global",(0,r.jsx)(s.br,{}),"\nGSET - Setting a global",(0,r.jsx)(s.br,{}),"\nGKLL - Killing a global",(0,r.jsx)(s.br,{}),"\nGORD - $Order on a global",(0,r.jsx)(s.br,{}),"\nGQRY - $Query on a global",(0,r.jsx)(s.br,{}),"\nGDEF - $Data on a global",(0,r.jsx)(s.br,{}),"\nZF - Executing a $ZF command",(0,r.jsx)(s.br,{}),"\nHANG - Executing a Hang command",(0,r.jsx)(s.br,{}),"\nJOB - Executing a Job command",(0,r.jsx)(s.br,{}),"\nEXAM - Executing a variable exam",(0,r.jsx)(s.br,{}),"\nBRD - Executing a broadcast",(0,r.jsx)(s.br,{}),"\nSUSP - Process is suspended",(0,r.jsx)(s.br,{}),"\nINCR - Executing a $Increment",(0,r.jsx)(s.br,{}),"\nBSET - Global Set $Bit",(0,r.jsx)(s.br,{}),"\nBGET - Global $Bit",(0,r.jsx)(s.br,{}),"\nEVT - Waiting on event",(0,r.jsx)(s.br,{}),"\nSLCT - $System.Socket wait",(0,r.jsx)(s.br,{}),"\nSEM - $System.Semaphore wait",(0,r.jsx)(s.br,{}),"\nIPQ - Inter-process queue wait",(0,r.jsx)(s.br,{}),"\nDEQ - Dequeue wait (currently unusued)",(0,r.jsx)(s.br,{}),"\nVSET - Global Set vector element",(0,r.jsx)(s.br,{}),"\nVKLL - Global Kill vector element",(0,r.jsx)(s.br,{}),"\nRUN - Process is running in none of the aformentioned states"]}),"\n",(0,r.jsx)(s.p,{children:"The following flags can be appended to the state:"}),"\n",(0,r.jsxs)(s.p,{children:["NL - Net lock waiting",(0,r.jsx)(s.br,{}),"\nDT - The dead job has open transaction",(0,r.jsx)(s.br,{}),"\nS - Suspension requested",(0,r.jsx)(s.br,{}),"\nGW - Global Wait",(0,r.jsx)(s.br,{}),"\nNR - Net Read",(0,r.jsx)(s.br,{}),"\nD - Dead",(0,r.jsx)(s.br,{}),"\nH - Halting",(0,r.jsx)(s.br,{}),"\nNH - Netharden",(0,r.jsx)(s.br,{}),"\nN - Remote network",(0,r.jsx)(s.br,{}),"\nW - Hibernating"]}),"\n",(0,r.jsx)(s.h3,{id:"switch10",children:"Switch10"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Switch10 As %Boolean [ ReadOnly, SqlColumnNumber = 36 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Process Owns switch 10.",(0,r.jsx)(s.br,{}),"\nThis property is set to 1 if the process has set switch 10."]}),"\n",(0,r.jsx)(s.h3,{id:"userinfo",children:"UserInfo"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property UserInfo As %String(MAXLEN = 16) [ SqlColumnNumber = 12 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["User defined information.",(0,r.jsx)(s.br,{}),"\nThis is a user-defined property where the process can set any value into it up to 16 bytes long. The data in it is viewable in JOBEXAM. Note that the information can only be set into one's own process, not into another user's process."]}),"\n",(0,r.jsx)(s.h3,{id:"username",children:"UserName"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property UserName As %String(MAXLEN = 160) [ ReadOnly, SqlColumnNumber = 8 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["$Username of process.",(0,r.jsx)(s.br,{}),"\n$Username of the process as set by the processes authentication method."]}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"clientexecutablenameset",children:"ClientExecutableNameSet"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method ClientExecutableNameSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"clientipaddressset",children:"ClientIPAddressSet"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method ClientIPAddressSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"clientnodenameset",children:"ClientNodeNameSet"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method ClientNodeNameSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"escalatedrolesget",children:"EscalatedRolesGet"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method EscalatedRolesGet() [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"userinfoset",children:"UserInfoSet"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method UserInfoSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"allowtoopen",children:"AllowToOpen"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AllowToOpen(Pid) As %Status [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Check to see if permissions allow us to open the process.",(0,r.jsx)(s.br,{}),"\nThe %SYS.ProcessQuery class is available to all users in all namespaces. It is intended that any process can open an instance of this class and examine their own properties, but not any other process on the system, unless they own the %Admin_Manage:Use resource, or are in the %SYS namespace."]}),"\n",(0,r.jsx)(s.h3,{id:"getcurrentlineandroutine",children:"GetCurrentLineAndRoutine"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetCurrentLineAndRoutine(JobNumber) As %String [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Get the current line and routine for a process.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nJobNumber - Job number of the process",(0,r.jsx)(s.br,{}),"\nReturn Value:",(0,r.jsx)(s.br,{}),'\nOn success, the method will return the current line and routine of the selected process in +number^routine format. on failure, or if unavailable, it will return ""']}),"\n",(0,r.jsx)(s.h3,{id:"getcurrentsrcline",children:"GetCurrentSrcLine"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetCurrentSrcLine(JobNumber) As %String [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Get the current source line for the process.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nJobNumber - Job number of the process",(0,r.jsx)(s.br,{}),"\nReturn Value:",(0,r.jsx)(s.br,{}),"\nOn success, the method will return the current source line of the selected process.",(0,r.jsx)(s.br,{}),'\nOn failure, or if source unavailable, it will return ""']}),"\n",(0,r.jsx)(s.h3,{id:"getlastglobalreference",children:"GetLastGlobalReference"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetLastGlobalReference(JobNumber) As %String [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Get the last global reference for the process.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nJobNumber - Job number of the process",(0,r.jsx)(s.br,{}),"\nReturn Value:",(0,r.jsx)(s.br,{}),"\nOn success, the method will return the last global reference the selected process.",(0,r.jsx)(s.br,{}),'\nOn failure, it will return ""']}),"\n",(0,r.jsx)(s.h3,{id:"getview",children:"GetView"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetView(Pid) As %String [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Query the process for some properties.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nPid - Pid (decimal) of the process",(0,r.jsx)(s.br,{}),"\nReturn Value:",(0,r.jsx)(s.br,{}),"\nOn success, the method will return the values of $v(-1,Pid)",(0,r.jsx)(s.br,{}),"\nOn failure, or if source unavailable, it will return all fields as 0."]}),"\n",(0,r.jsx)(s.h3,{id:"getviewlist",children:"GetViewList"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetViewList(Pid) As %List [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Query the process for some properties.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nPid - Pid (decimal) of the process",(0,r.jsx)(s.br,{}),"\nReturn Value:",(0,r.jsx)(s.br,{}),"\nOn success, the method will return the $LIST from $v(-1,Pid,2)",(0,r.jsx)(s.br,{}),"\nOn failure, or if source unavailable, it will return all fields as 0."]}),"\n",(0,r.jsx)(s.h3,{id:"getloginroutine",children:"GetLoginRoutine"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetLoginRoutine(ByRef Label As %String, ByRef Routine As %String) As %Status\n"})}),"\n",(0,r.jsx)(s.p,{children:"Get routine and label specified in process login."}),"\n",(0,r.jsx)(s.p,{children:"Available only for the current process, you can not query another process. If a class method is passed on the command line then 'Label' will be the method name and 'Routine' will be the class name with a trailing '#' to identify it as a class."}),"\n",(0,r.jsx)(s.h3,{id:"getcputime",children:"GetCPUTime"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetCPUTime(pid As %Integer) As %String\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Get CPU time used for current process (without method arguments)",(0,r.jsx)(s.br,{}),"\nor CPU time for the process specified by pid (with method arguments)"]}),"\n",(0,r.jsxs)(s.p,{children:["Parameters:",(0,r.jsx)(s.br,{}),"\npid (optional) - JobNumber (integer +$J)",(0,r.jsx)(s.br,{}),"\nof the IRIS process you want to get information about"]}),"\n",(0,r.jsxs)(s.p,{children:["Return Value:",(0,r.jsx)(s.br,{}),'\nReturns two comma-delimited pieces, "system" CPU time and "user" CPU time Time is returned as milliseconds of CPU time.',(0,r.jsx)(s.br,{}),"\n0,0 is returned if the specified pid does not exist."]}),"\n",(0,r.jsx)(s.h3,{id:"getosusername",children:"GetOSUsername"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetOSUsername() As %String\n"})}),"\n",(0,r.jsx)(s.p,{children:"This method returns the OSUsername of the process as returned by the operating system. This method differs from the OSUsername property in that it is the actual username assigned to the process by the operating system."}),"\n",(0,r.jsx)(s.h3,{id:"getappframeinfo",children:"GetAppFrameInfo"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetAppFrameInfo(pid As %Integer) As %List\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Return the entire application metadata frame information for the current process or the specified process. Parameters:",(0,r.jsx)(s.br,{}),"\nPid - Pid (decimal) of the process",(0,r.jsx)(s.br,{}),"\nReturn Value:",(0,r.jsx)(s.br,{}),"\nThe application frame information in $LIST form."]}),"\n",(0,r.jsx)(s.h3,{id:"killallprivateglobals",children:"KillAllPrivateGlobals"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KillAllPrivateGlobals() As %Status\n"})}),"\n",(0,r.jsx)(s.p,{children:"Kill all process private globals for the calling process."}),"\n",(0,r.jsx)(s.h3,{id:"getvariablelist",children:"GetVariableList"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetVariableList(InternalStack As %Integer = 0, ByRef ListVar)\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Get a list of all variables defined at the specified internal execution stack level. If no stack level is given, the current stack level is the default.",(0,r.jsx)(s.br,{}),"\nThe list is returned as nodes of the listvar argument.",(0,r.jsx)(s.br,{}),"\nlistvar will be set to the number of sublists.",(0,r.jsx)(s.br,{}),"\nlistvar(1) will be set to the first sublist, listvar(2) to the second, etc.",(0,r.jsx)(s.br,{}),"\nEach sublist is a $List of variable entries.",(0,r.jsx)(s.br,{}),"\nEach variable entry is a $ListBuild(name,$Data(name)).",(0,r.jsx)(s.br,{}),"\nPrivate variables are identified with a tilde (~) as the first character in the name.",(0,r.jsx)(s.br,{}),"\nThe names are not sorted, except private variables follow the public variables.",(0,r.jsx)(s.br,{}),"\nThe return value of the method is the total number of variables in the sublists."]}),"\n",(0,r.jsx)(s.h3,{id:"variablevalue",children:"VariableValue"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod VariableValue(Variable As %String, InternalStack As %Integer = 0)\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Get the value of a variable at the specified internal execution stack level. If no stack level is given, the current stack level is the default.",(0,r.jsx)(s.br,{}),"\nThe variable reference may include subscripts.",(0,r.jsx)(s.br,{}),'\nTo get the value of a private variable, add a tilde in front of the name, as in "~info".',(0,r.jsx)(s.br,{}),"\nIf the variable is undefined an ",(0,r.jsx)(s.undefined,{children:" error will be thrown."})]}),"\n",(0,r.jsx)(s.h3,{id:"variabledataflags",children:"VariableDataFlags"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod VariableDataFlags(Variable As %String, InternalStack As %Integer = 0) As %Integer\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Get the $Data() value of a variable at the specified internal execution stack level. If no stack level is given, the current stack level is the default.",(0,r.jsx)(s.br,{}),"\nThe variable reference may include subscripts.",(0,r.jsx)(s.br,{}),'\nTo get the value for a private variable, add a tilde in front of the name, as in "~info".']}),"\n",(0,r.jsx)(s.h3,{id:"variablequery",children:"VariableQuery"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod VariableQuery(Variable As %String, InternalStack As %Integer = 0) As %String\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Perform a $Query() operation on a variable reference at the specified internal execution stack level. If no stack level is given, the current stack level is the default.",(0,r.jsx)(s.br,{}),"\nThe variable reference may include subscripts.",(0,r.jsx)(s.br,{}),'\nTo operate on a private variable, add a tilde in front of the name, as in "~info".']}),"\n",(0,r.jsx)(s.h3,{id:"getinternalstacklevel",children:"GetInternalStackLevel"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetInternalStackLevel(stack As %Integer = 0, ByRef newlevels) As %Integer\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Convert a $STACK value to the corresponding internal stack level that can be used for the VariableList query and Variable methods that have an InternalStack argument.",(0,r.jsx)(s.br,{}),"\nThe default for stack is the current $STACK value.",(0,r.jsx)(s.br,{}),"\nWhen there are NEW commands in a level, each NEW command creates a new internal stack level without increasing $STACK. This method returns the highest internal stack level for the given $STACK. If there are other internal levels created by NEW commands within the given $STACK, they are returned in the newlevels argument as a $LIST of values. There may be different variables defined at each of those levels and the same variable may have different values at each level."]}),"\n",(0,r.jsx)(s.h3,{id:"nextprocess",children:"NextProcess"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NextProcess(Pid As %String, Flag As %Integer = 0) As %String\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Returns the next process pid on the system.",(0,r.jsx)(s.br,{}),"\nThis is like a $order function on processes running on the system, similar to the way $ZJOB works. It differs from $zjob in one respect though. If the pid passed into the function has halted before this call, we will still return the next pid on the system. $zjob would return the first pid on the system in this case. Using $zjob in this way with lots of processes starting and halting could lead to inaccurate results. Flag=1 means pass in and return the internal decimal representation of a VMS pid ($zh(pid))"]}),"\n",(0,r.jsx)(s.h3,{id:"open",children:"Open"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Open(Id As %String, concurrency As %Integer = -1, ByRef sc As %Status = 1) As %ObjectHandle\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Open an instance to a process.",(0,r.jsx)(s.br,{}),'\nThis method will open an instance to a process by passing either a PID or Job number to the method. A Pid can either be directly passed in or prefaced with a "P". A Job number can be passed in prefaced by a "J".',(0,r.jsx)(s.br,{}),"\nThe following open an instance to a process with a pid = 2078:",(0,r.jsx)(s.br,{}),'\ns Process=##CLASS(%SYS.ProcessQuery).Open("P2078")',(0,r.jsx)(s.br,{}),'\ns Process=##CLASS(%SYS.ProcessQuery).Open("2078")']}),"\n",(0,r.jsx)(s.p,{children:"The following will open Job number 23"}),"\n",(0,r.jsx)(s.p,{children:'s Process=##CLASS(%SYS.ProcessQuery).Open("J23")'}),"\n",(0,r.jsxs)(s.p,{children:["Parameters:",(0,r.jsx)(s.br,{}),"\nId - Pid or Job number to open",(0,r.jsx)(s.br,{}),"\nConcurrency - Pass -1 or use default",(0,r.jsx)(s.br,{}),"\nsc (by ref)- Status of the Open",(0,r.jsx)(s.br,{}),"\nReturn values:",(0,r.jsx)(s.br,{}),"\nOn success, the method returns an object handle to the opened process.",(0,r.jsx)(s.br,{}),"\nOn failure, the method returns a null string, and an error in sc."]}),"\n",(0,r.jsx)(s.h3,{id:"statelogicaltodisplay",children:"StateLogicalToDisplay"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod StateLogicalToDisplay(State) As %String [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Translates an internal state flag to an external display.",(0,r.jsx)(s.br,{}),"\nSee the State property for what can be returned here."]}),"\n",(0,r.jsx)(s.h3,{id:"decodestate",children:"DecodeState"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DecodeState(Code As %String, DaemonCode As %String = "", ResNameList As %List = "") As %List [ Internal ]\n'})}),"\n",(0,r.jsx)(s.p,{children:"Takes an internal state code from $zu(61,4) and returns a $list with the following list elements."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"1 - the base process State without any letter flags appended"}),"\n",(0,r.jsx)(s.li,{children:"2 - the letter flags to append for State"}),"\n",(0,r.jsx)(s.li,{children:'3 - an internal "wait reason" when the process is blocked in the IRIS kernel'}),"\n",(0,r.jsx)(s.li,{children:"4 - an internal psuedo-trace of calls within the IRIS kernel"}),"\n",(0,r.jsx)(s.li,{children:'5 - boolean true/false if the process state is one that is expected to use CPU  The wait reason can take the following values, and is subject to change. Some but not all of these correspond to the "W" letter flag, and not all cases of the "W" have an internal reason reflected here. For example, waiting on a LOCK usually has a "W" but in not reflected here, as it is an expected application wait rather than a wait within the IRIS kernel.'}),"\n",(0,r.jsx)(s.li,{children:"diskio: waiting for database physical block read"}),"\n",(0,r.jsx)(s.li,{children:"inusebufwt: waiting due to block collision (^BLKCOL utility may help identify application cause)"}),"\n",(0,r.jsx)(s.li,{children:"expand: waiting for database expansion"}),"\n",(0,r.jsx)(s.li,{children:"ecpwait: waiting for an answer from the ECP server"}),"\n",(0,r.jsx)(s.li,{children:"jrniowait: no space in journal buffer, waiting for journal I/O"}),"\n",(0,r.jsx)(s.li,{children:"jrnsyncblk: waiting for journal data to be committed"}),"\n",(0,r.jsx)(s.li,{children:"jrnlckwait: waiting to access journal buffer"}),"\n",(0,r.jsx)(s.li,{children:"mirrorwait: waiting for active backup mirror member"}),"\n",(0,r.jsx)(s.li,{children:"mirrortrouble: blocked due to mirror trouble state"}),"\n",(0,r.jsx)(s.li,{children:"globwait: waiting because of an internal condition blocking global updates"}),"\n",(0,r.jsx)(s.li,{children:"aiowait: waiting for asynchronous disk I/O to complete"}),"\n",(0,r.jsxs)(s.li,{children:["wdqwait: waiting for a write cycle to complete",(0,r.jsx)(s.br,{}),"\nfreebuf: global buffers are completely exhausted and waiting for database writes gfownwait: access to database is blocked resenqXYZ: waiting on an internal resource XYZ"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"onopen",children:"%OnOpen"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnOpen() As %Status [ Internal, Private ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"This callback method is invoked by the %Open method to provide notification that the object specified by oid is being opened."}),"\n",(0,r.jsx)(s.p,{children:"If this method returns an error then the object will not be opened."}),"\n",(0,r.jsx)(s.h3,{id:"sqlacquirelock",children:"%SQLAcquireLock"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %SQLAcquireLock(%rowid As %String, s As %Boolean = 0, ByRef unlockref As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"sqlacquiretablelock",children:"%SQLAcquireTableLock"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %SQLAcquireTableLock(s As %Boolean = 0, ByRef SQLCODE As %Integer, to As %Integer = "") [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n'})}),"\n",(0,r.jsx)(s.h3,{id:"sqlreleaselock",children:"%SQLReleaseLock"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %SQLReleaseLock(%rowid As %String, s As %Boolean = 0, i As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"sqlreleasetablelock",children:"%SQLReleaseTableLock"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %SQLReleaseTableLock(s As %Boolean = 0, i As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"controlpanelexecute",children:"CONTROLPANELExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CONTROLPANELExecute(ByRef qHandle As %Binary, JobNumber As %Integer = 1, Filter As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Returns ALL properties for a process",(0,r.jsx)(s.br,{}),"\nThis query performs a Select * on %SYS.ProcessQuery SQL query. Note that this query uses a $v(-1,$j) mailbox message to query processes. This causes a lot of overhead, but is necessary in order to return all fields. Use the JOBEXAM, CONTROLPANEL, or SS query for less overhead. This query will change in future versions as field are added or removed. Returns fields for the Management Portal display",(0,r.jsx)(s.br,{}),"\nNote that this query does not use a $v(-1,$j) mailbox message to query processes. This avoids unnecessary overhead. This query may change in future versions.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nJobNumber - Job number of where to start the query, default = 1 (first job)",(0,r.jsx)(s.br,{}),'\nFilter - Display processes which contain this filter in the line, "" means display all. For example, if Filter="READ", this will only display processes which have the word "READ" in one of the columns.']}),"\n",(0,r.jsx)(s.h3,{id:"controlpanelfetch",children:"CONTROLPANELFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CONTROLPANELFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"controlpanelclose",children:"CONTROLPANELClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CONTROLPANELClose(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"jobexamexecute",children:"JOBEXAMExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod JOBEXAMExecute(ByRef qHandle As %Binary, JobNumber As %Integer = 1) As %Status [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Returns fields for the JOBEXAM display.",(0,r.jsx)(s.br,{}),"\nNote that this query does not use a $v(-1,$j) mailbox message to query processes. This avoids unnecessary overhead. This query may change in future versions.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nJobNumber - Job number of where to start the query, default = 1 (first job)"]}),"\n",(0,r.jsx)(s.h3,{id:"jobexamfetch",children:"JOBEXAMFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod JOBEXAMFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"jobexamclose",children:"JOBEXAMClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod JOBEXAMClose(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"listpidsexecute",children:"ListPidsExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListPidsExecute(ByRef qHandle As %Binary, JobNumber As %Integer = 1) As %Status [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Return PIDS for all processes running on the system.",(0,r.jsx)(s.br,{}),"\nThis query returns the internal pid for each process on the system. This pid can then be passed directly to the %OpenId() method, or as an argument to an embedded SQL query which does a SELECT based on the Pid. See the example above for SQL usage.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nJobNumber - Job number of where to start the query, default = 1 (first job)"]}),"\n",(0,r.jsx)(s.h3,{id:"listpidsfetch",children:"ListPidsFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListPidsFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"listpidsclose",children:"ListPidsClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListPidsClose(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"ssexecute",children:"SSExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SSExecute(ByRef qHandle As %Binary, JobNumber As %Integer = 1) As %Status [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Returns fields for the %SS display.",(0,r.jsx)(s.br,{}),"\nNote that this query does not use a $v(-1,$j) mailbox message to query processes. This avoids unnecessary overhead. This query may change in future versions.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nJobNumber - Job number of where to start the query, default = 1 (first job)"]}),"\n",(0,r.jsx)(s.h3,{id:"ssfetch",children:"SSFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SSFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ CodeMode = call, Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"ssclose",children:"SSClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SSClose(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"variablebyjobnumberexecute",children:"VariableByJobNumberExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod VariableByJobNumberExecute(ByRef qHandle As %Binary, JobNumber As %Integer = 1, Variable As %String = "", Format As %Integer = 0, MaxRows As %Integer = 9999999, Filter As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Returns the variables of a process.",(0,r.jsx)(s.br,{}),"\nPass VariableName as a null string to return all variables.",(0,r.jsx)(s.br,{}),"\nThis query requires the %Admin_Manage:Use permission to execute."]}),"\n",(0,r.jsxs)(s.p,{children:["Parameters:",(0,r.jsx)(s.br,{}),"\nJobNumber - Job number to query.",(0,r.jsx)(s.br,{}),"\nNOTE: You may not use this query to examine your own job.",(0,r.jsx)(s.br,{}),'\nVariableName - Variable to return, or ""=All',(0,r.jsx)(s.br,{}),"\nFormat - Bit string of how to format the variable data, default = 0 (no formatting)",(0,r.jsx)(s.br,{}),"\nBit 0 - Format the data with $c() and $lb() notation",(0,r.jsx)(s.br,{}),"\nBit 1 - Embed bolded cursor sequences around $c() and $lb() notation",(0,r.jsx)(s.br,{}),"\nMaxRows - Maximum number of rows to return",(0,r.jsx)(s.br,{}),'\nFilter - Filters the data returned (case insensitive). If the variable contains the filter, then return it. ""=no filter',(0,r.jsx)(s.br,{}),"\nThis query may change in future versions."]}),"\n",(0,r.jsx)(s.h3,{id:"variablebyjobnumberfetch",children:"VariableByJobNumberFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod VariableByJobNumberFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"variablebyjobnumberclose",children:"VariableByJobNumberClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod VariableByJobNumberClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = VariableByJobNumberExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"variablebypidexecute",children:"VariableByPidExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod VariableByPidExecute(ByRef qHandle As %Binary, Pid As %String, Variable As %String = "", Format As %Integer = 0, MaxRows As %Integer = 9999999, Filter As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Returns the variables of a process, PID is decimal value for all platforms.",(0,r.jsx)(s.br,{}),"\nPass VariableName as a null string to return all variables.",(0,r.jsx)(s.br,{}),"\nThis query requires the %Admin_Manage:Use permission to execute."]}),"\n",(0,r.jsxs)(s.p,{children:["Parameters:",(0,r.jsx)(s.br,{}),"\nPid - Pid of process to query",(0,r.jsx)(s.br,{}),'\nVariableName - Variable to return, or ""=All',(0,r.jsx)(s.br,{}),"\nFormat - Bit string of how to format the variable data, default = 0 (no formatting)",(0,r.jsx)(s.br,{}),"\nBit 0 - Format the data with $c() and $lb() notation",(0,r.jsx)(s.br,{}),"\nBit 1 - Embed bolded cursor sequences around $c() and $lb() notation",(0,r.jsx)(s.br,{}),"\nMaxRows - Maximum number of rows to return",(0,r.jsx)(s.br,{}),'\nFilter - Filters the data returned (case insensitive). If the variable contains the filter, then return it. ""=no filter',(0,r.jsx)(s.br,{}),"\nNote that the fields returned here may change or be removed in future versions."]}),"\n",(0,r.jsx)(s.h3,{id:"variablebypidfetch",children:"VariableByPidFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod VariableByPidFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"variablebypidclose",children:"VariableByPidClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod VariableByPidClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = VariableByPidExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"variablelistexecute",children:"VariableListExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod VariableListExecute(ByRef qHandle As %Binary, InternalStack As %Integer = 0, Type As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Returns the variables that are visible to the current process at the current or specified execution internal stack level. 'DataFlags' is the $DATA() value of the variable."}),"\n",(0,r.jsxs)(s.p,{children:["Parameters:",(0,r.jsx)(s.br,{}),"\n'InternalStack' is a value less than or equal to the current stack level, as reported by the %STACK utility. If no stack level is given, the current stack level is the default.",(0,r.jsx)(s.br,{}),"\n'Type' is the kind of query to run. The default is 0 which returns a sorted list of variables. Type 1 returns an unsorted list and may be quicker because it uses no global variables."]}),"\n",(0,r.jsx)(s.p,{children:"The query returns only plain variable names without subscripts. Private variables are distinguished from public variables by a tilde prefix. Thus the private variable 'info' will be presented as '~info'. All private variables are returned after all public variables."}),"\n",(0,r.jsx)(s.h3,{id:"variablelistfetch",children:"VariableListFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod VariableListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"variablelistclose",children:"VariableListClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod VariableListClose(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"ppgexecute",children:"PPGExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod PPGExecute(ByRef qHandle As %Binary, filter As %String = "*", pid As %Integer = -1, options As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,r.jsx)(s.p,{children:"Select information about Process Private Globals."}),"\n",(0,r.jsxs)(s.p,{children:["The 'filter' parameter can be a variable name definition and/or subscript definition, using * as wildcards. A filter name of '*' will return all PPG variables for that process id.",(0,r.jsx)(s.br,{}),'\nAs an example of using the wildcards, a filter specification of "CUST*(12*,*COOP*" would mean return all PPG variables whose name starts with CUST, that have 2 or more subscripts, the first subscript must start with 12, the second subscript must contain COOP.']}),"\n",(0,r.jsx)(s.p,{children:"pid can be any valid process id, or -1 for the caller's process."}),"\n",(0,r.jsxs)(s.p,{children:["options can be one or more of the following characters",(0,r.jsx)(s.br,{}),'\n"N" Do not return subscripts of a PPG, just return the root name',(0,r.jsx)(s.br,{}),'\n"B" Return the number of blocks used by the PPG (needs the "N" option)',(0,r.jsx)(s.br,{}),'\n"b" Returns the number of bytes used by the PPG (needs the "N" option)']}),"\n",(0,r.jsxs)(s.p,{children:["Example",(0,r.jsx)(s.br,{}),'\nset rs=##class(%ResultSet).%New("%SYS.ProcessQuery:PPG")',(0,r.jsx)(s.br,{}),'\ndo rs.Execute("*",$J,"NB")',(0,r.jsx)(s.br,{}),"\nfor {",(0,r.jsx)(s.br,{}),"\nq:'rs.Next()",(0,r.jsx)(s.br,{}),'\nw "PPG name "_rs.GetData(1)_" is using "_rs.GetData(3)_" disc blocks",!',(0,r.jsx)(s.br,{}),"\n}",(0,r.jsx)(s.br,{}),"\nThis query requires the %Admin_Manage:Use permission to execute."]}),"\n",(0,r.jsx)(s.h3,{id:"ppgclose",children:"PPGClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PPGClose(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"ppgfetch",children:"PPGFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PPGFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"ppginfo",children:"PPGInfo"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PPGInfo(pid As %Integer) As %String [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"topexecute",children:"TopExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TopExecute(ByRef qHandle As %Binary, Sort, Number) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Returns the top Processes as measured by the recent activity of either CommandsExecuted or GlobalReferences"}),"\n",(0,r.jsxs)(s.p,{children:["Parameters:",(0,r.jsx)(s.br,{}),'\nSort - sort by "COMMANDS" (default) or "GLOREFS"',(0,r.jsx)(s.br,{}),"\nNumber - number of processes to list. Default is 10 and max is 50"]}),"\n",(0,r.jsx)(s.p,{children:"Note that the evaluation of the actual 'top' process list is handled by the Application Monitor (%MONAPP) using the %Monitor.System.Dashboard2 class. This is 'on' by default and can be managed using the %MONAPPMGR utility. Also, the counts of CommandsExecuted and GlobalReferences returned are for the latest sample period and not the total for the life of the process."}),"\n",(0,r.jsx)(s.h3,{id:"topfetch",children:"TopFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TopFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"topclose",children:"TopClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TopClose(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"topglobalexecute",children:"TopGlobalExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TopGlobalExecute(ByRef qHandle As %Binary, Sort, Number, Seconds) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Returns the top Processes for certain types of database activity for the next 'n' seconds. The query can be sorted by one of the following properties: 'GlobalReferences', 'GlobalUpdates', 'GlobalDiskReads', 'GlobalBlocks', or 'PrivateGlobalBlockCount'."}),"\n",(0,r.jsxs)(s.p,{children:["Parameters:",(0,r.jsx)(s.br,{}),'\nSort - sort by "REFS", "UPDATES", "READS", "BLOCKS", "PPG". Default is "REFS".',(0,r.jsx)(s.br,{}),"\nNumber - number of processes to list. Default is 20.",(0,r.jsx)(s.br,{}),"\nSeconds - number of seconds to wait. Default is 5 seconds."]}),"\n",(0,r.jsx)(s.p,{children:"The query will fetch the values for all processes, wait for 'n' seconds, and then fetch the values again. It will return the list of the 'top' processes for the selected 'Sort' property, and the delta values for properties over that time period. Note that PrivateGlobalBlockCount is returned as the total number used, not a delta."}),"\n",(0,r.jsx)(s.h3,{id:"topglobalfetch",children:"TopGlobalFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TopGlobalFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"topglobalclose",children:"TopGlobalClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TopGlobalClose(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"enablejournalint",children:"EnableJournalInt"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod EnableJournalInt() As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Enable journaling within the process, with temporarily elevated role"}),"\n",(0,r.jsx)(s.h3,{id:"disablejournalint",children:"DisableJournalInt"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DisableJournalInt() As %Boolean [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Disable journaling within the process, with temporarily elevated role.",(0,r.jsx)(s.br,{}),"\nReturns 1 if journaling was active prior to this; 0 otherwise (i.e., no action taken)"]}),"\n",(0,r.jsx)(s.h3,{id:"examstackbypid",children:"ExamStackByPid"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ExamStackByPid(Pid As %String, GetVariables As %Boolean = 0, Timeout As %Integer = 10) As %Status\n"})}),"\n",(0,r.jsx)(s.p,{children:"Retrieve a snapshot of the execution stack and variables for a process in the same format as JOBEXAM."}),"\n",(0,r.jsx)(s.p,{children:"Parameters:"}),"\n",(0,r.jsx)(s.p,{children:"Pid - Process ID ($J) of the process to examine"}),"\n",(0,r.jsx)(s.p,{children:"GetVariables - Flag specifies variable and/or object info should be returned"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"0 - do not dump local variable or object info"}),"\n",(0,r.jsx)(s.li,{children:"1 - dump all local variable info"}),"\n",(0,r.jsx)(s.li,{children:"2 - dump all active oref info"}),"\n",(0,r.jsx)(s.li,{children:"3 - dump local variable and object info"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Timeout - How long to wait for the process to respond to the request"}),"\n",(0,r.jsxs)(s.p,{children:["Return Value:",(0,r.jsx)(s.br,{}),"\nOn success, the method will return an index of the ^mtemp global (greater than zero). If an error occurs a status code is returned."]}),"\n",(0,r.jsx)(s.p,{children:"Note that, like JOBEXAM, the request will time out if the process is not executing commands."}),"\n",(0,r.jsx)(s.p,{children:"The data in the ^mtemp node can be displayed by calling Show^%STACK(index). It is the responsibility of the caller to Kill ^mtemp(index) when finished with the data."}),"\n",(0,r.jsxs)(s.p,{children:["The data is returned in these nodes of the ^mtemp(index) global:",(0,r.jsx)(s.br,{}),'\n("*STACK") = the number of stack levels',(0,r.jsx)(s.br,{}),'\n("*STACK",0,"V",SpecialVar) = the values of special variables such as $S and $ZE',(0,r.jsx)(s.br,{}),'\n("*STACK",level,"L") = the text line for this level, as displayed by %STACK or JOBEXAM',(0,r.jsx)(s.br,{}),'\n("*STACK",level,"S") = the source line for this level, with a tilde inserted in front of the current command',(0,r.jsx)(s.br,{}),'\n("*STACK",level,"I") = the internal data for this level']}),"\n",(0,r.jsxs)(s.p,{children:["If variables are requested:",(0,r.jsx)(s.br,{}),"\n(\"*LEVEL\",level,variable) = the base level of a 'variable' that is visible at this 'level'",(0,r.jsx)(s.br,{}),'\n("*NAMES",variable,base,level) - this is the same information as *LEVEL in a different format',(0,r.jsx)(s.br,{}),"\n(\"*STACK\",base,\"V\",variable) - top of subtree containing information of 'variable' defined at 'base' level",(0,r.jsx)(s.br,{}),"\nThe function call $$VGetn^%STACK(index,l,v) returns information about the value of variable 'v' at stack level 'l'. If the variable is a private local variable then argument 'v' must be string starting with a tilde character, \"~\", followed by the variable identifier text. The variable 'v' can include a parenthesized list of subscript literals. Note that lookup of a subscripted local variable requires that the examined process and the examining process are using the same local collation. It returns \"\" if the variable 'v' is undefined at that stack level; otherwise it returns $LISTBUILD(flags,value) where 'value' is the value of the variable and 'flags' is a sequence of flag letters. If flags[\"O\" then the variable contains an oref and 'value' is the oref string representation."]}),"\n",(0,r.jsxs)(s.p,{children:["If objects are requested:",(0,r.jsx)(s.br,{}),"\n(\"*CLASS\",class) = number of active local objects in Class 'class'",(0,r.jsx)(s.br,{}),"\n(\"*CLASS\",class,oref) = \"\" is defined if 'oref' value is a local object of class 'class'. The function call $$OGetn^%STACK(index,oref,property) returns $LISTBUILD(flags,value) if the object 'oref' has a property name 'property' and it returns \"\" if either the oref or the property does not exist. If the property is multidimensional then the property name can include a parenthesized list of subscript literals. Note that lookup of a subscripted multidim property requires that the examined process and the examining process are using the same local collation. The 'value' of the returned $LIST is usually the value of the property (see 'flags'.) The 'flags' of the returned $LIST is a sequence of flag letters."]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"An empty flags string means 'value' is an ordinary ObjectScript value."}),"\n",(0,r.jsx)(s.li,{children:'The flag "U" means the property is not defined, which may indicate an internal error.'}),"\n",(0,r.jsx)(s.li,{children:"The flag \"J\" means the object is a %DynamicAbstractObject and 'value' contains the oref.%FromJSON() JSON string as the result of any attempt to access a property."}),"\n",(0,r.jsx)(s.li,{children:"The flag \"O\" means 'value' is the string representation of an object reference."}),"\n",(0,r.jsx)(s.li,{children:'The flags "G" or "C" mean the property has a propertyGet method or is Calculated. Evaluating such a property can cause unwanted side effects so the returned \'value\' is the internal value of the i%property name which might be undefined or might not contain useful information.'}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"getopendevices",children:"GetOpenDevices"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetOpenDevices(Pid As %Integer) As %List\n"})}),"\n",(0,r.jsx)(s.p,{children:"Get a $LIST of devices that a process has open."}),"\n",(0,r.jsxs)(s.p,{children:["Parameters:",(0,r.jsx)(s.br,{}),"\nPid - Process ID ($J) of the process to examine"]}),"\n",(0,r.jsxs)(s.p,{children:["Return Value:",(0,r.jsx)(s.br,{}),"\nOn success, the method will return a $LIST of devices that are currently open by the process. The principal device is the first item in the list. The current device has an asterisk appended to the name.",(0,r.jsx)(s.br,{}),"\nIf an error occurs an empty string is returned."]})]})}function c(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>i});var r=n(96540);const a={},t=r.createContext(a);function l(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);