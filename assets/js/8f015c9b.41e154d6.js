"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[92277],{5193:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>l,default:()=>o,frontMatter:()=>n,toc:()=>i});var a=t(74848),r=t(28453);const n={pagination_prev:null,pagination_next:null},l="SYS.History.SysData",i=[{value:"Properties",id:"properties",level:2},{value:"DateTime",id:"datetime",level:3},{value:"Length",id:"length",level:3},{value:"ZDATE",id:"zdate",level:3},{value:"ZTIME",id:"ztime",level:3},{value:"Sys",id:"sys",level:3},{value:"DB",id:"db",level:3},{value:"Methods",id:"methods",level:2},{value:"Sample",id:"sample",level:3},{value:"GetCPU",id:"getcpu",level:3},{value:"UnixCPU",id:"unixcpu",level:3},{value:"Purge",id:"purge",level:3},{value:"Summary",id:"summary",level:3},{value:"Demo",id:"demo",level:3},{value:"DemoSample",id:"demosample",level:3},{value:"Export",id:"export",level:3},{value:"ExportDB",id:"exportdb",level:3}];function c(e){const s={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"syshistorysysdata",children:"SYS.History.SysData"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Class SYS.History.SysData Extends (%Persistent, %XML.Adaptor) [ System = 4 ]\n"})}),"\n",(0,a.jsx)(s.p,{children:'Basic detail collection class of System Usage metrics for the Monitor History database. Properties represent metrics which get collected every few minutes by the %MONAPP Application Monitor process when the %Monitor.System.HistorySys class is "active".'}),"\n",(0,a.jsxs)(s.p,{children:["For details, see ",(0,a.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+SYS.History.SysData",children:"History Monitor"}),"."]}),"\n",(0,a.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(s.h3,{id:"datetime",children:"DateTime"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property DateTime As %TimeStamp [ SqlColumnNumber = 2 ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"Time of sample"}),"\n",(0,a.jsx)(s.h3,{id:"length",children:"Length"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property Length As %Integer;\n"})}),"\n",(0,a.jsx)(s.p,{children:"Length of sample in seconds"}),"\n",(0,a.jsx)(s.h3,{id:"zdate",children:"ZDATE"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property ZDATE As %Integer;\n"})}),"\n",(0,a.jsx)(s.p,{children:"UTC date key"}),"\n",(0,a.jsx)(s.h3,{id:"ztime",children:"ZTIME"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property ZTIME As %Integer;\n"})}),"\n",(0,a.jsx)(s.p,{children:"UTC time key"}),"\n",(0,a.jsx)(s.h3,{id:"sys",children:"Sys"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property Sys As SYS.History.SystemUsage;\n"})}),"\n",(0,a.jsx)(s.p,{children:"System usage metrics"}),"\n",(0,a.jsx)(s.h3,{id:"db",children:"DB"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property DB As array Of SYS.History.Database;\n"})}),"\n",(0,a.jsx)(s.p,{children:"Database metrics"}),"\n",(0,a.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(s.h3,{id:"sample",children:"Sample"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Sample() As SYS.History.SysData\n"})}),"\n",(0,a.jsx)(s.p,{children:"Instantiate the class and fetch current values for all metric properties."}),"\n",(0,a.jsx)(s.h3,{id:"getcpu",children:"GetCPU"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetCPU() As %String [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:'Fetch CPU usage "kernel,user,idle,iowait" as percentage for a 1 second sample'}),"\n",(0,a.jsx)(s.h3,{id:"unixcpu",children:"UnixCPU"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UnixCPU(debug) As %String [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Get Unix command for CPU usage for this platform We remember this in IRIS.Temp so we don't have to figure it out each time"}),"\n",(0,a.jsx)(s.h3,{id:"purge",children:"Purge"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Purge(Keep As %Integer = 0) As %Integer\n"})}),"\n",(0,a.jsx)(s.p,{children:"Purge SysData interval data, keeping the last 'Keep' days. This is typically called at the start of each day from the %Monitor.System.HistorySys class, using the current system default for 'Keep' (see the SetPurge() method). The 'Keep' argument allows you to over ride the system default (a value of \"0\" or \"\" uses the system default)"}),"\n",(0,a.jsx)(s.p,{children:"Returns the number of entries purged."}),"\n",(0,a.jsx)(s.h3,{id:"summary",children:"Summary"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Summary(Day As %Integer = 0) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Collect summaries of the SysData metrics for a day into the Hourly/Daily database. This is typically done automatically by %Monitor.System.HistorySys at the beginning of each day (for the previous day), but could be called manually if there's a problem."}),"\n",(0,a.jsx)(s.p,{children:'The \'Day\' argument sets the end date of the collection, with the default of "0" being the start of today (i.e. $H+Day), which would collect everything for yesterday. A "-1" would collect the day before yesterday; a "1" would collect today (as much as there is).'}),"\n",(0,a.jsx)(s.h3,{id:"demo",children:"Demo"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Demo(Days As %Integer = 30) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Build a demo database for the Sys metrics. 'Days' is the number of days of history to generate."}),"\n",(0,a.jsx)(s.h3,{id:"demosample",children:"DemoSample"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DemoSample(pct As %Integer, ByRef DB As %String) As SYS.History.SysData [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Instantiate the class and fetch values for all metric properties. This fills in semi-random values from a base value for each metric for a demo database. 'pct' is a percentage value used to modify (+ or -) the base values. 'dt' is date,time of sampel in $H format 'DB\" is array of database names/sizes"}),"\n",(0,a.jsx)(s.h3,{id:"export",children:"Export"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Export(FileName As %String, Start As %TimeStamp, End As %TimeStamp) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Export SystemUsage data for a time range in CSV format. The default is all of the data currently in the SysData class."}),"\n",(0,a.jsxs)(s.p,{children:["The default FileName is HistorySys_config_date_time.csv in the MGR directory.",(0,a.jsx)(s.br,{}),"\n'Start' and 'End' times (if necessary) are in YYYY-MM-DD HH:MM:SS format."]}),"\n",(0,a.jsx)(s.h3,{id:"exportdb",children:"ExportDB"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ExportDB(FileName As %String, Start As %TimeStamp, End As %TimeStamp, Database As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Export Database data for a time range in CSV format. The default is all of the data currently in the SysData class."}),"\n",(0,a.jsxs)(s.p,{children:["The default 'FileName' is HistoryDB_config_date_time.csv in the MGR directory.",(0,a.jsx)(s.br,{}),"\n'Start' and 'End' times (if necessary) are in YYYY-MM-DD HH:MM:SS format.",(0,a.jsx)(s.br,{}),"\nThe 'Database' argument can select (by name) a single database to export. Otherwise, data for all databases is exported and the database name is exported as a column."]})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>i});var a=t(96540);const r={},n=a.createContext(r);function l(e){const s=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(n.Provider,{value:s},e.children)}}}]);