"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[27781],{59716:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>l,default:()=>c,frontMatter:()=>a,toc:()=>i});var s=r(74848),n=r(28453);const a={pagination_prev:null,pagination_next:null},l="%SQL.ExImData",i=[{value:"Properties",id:"properties",level:2},{value:"FileName",id:"filename",level:3},{value:"Charset",id:"charset",level:3},{value:"ClassName",id:"classname",level:3},{value:"TableName",id:"tablename",level:3},{value:"IQN",id:"iqn",level:3},{value:"RoutineName",id:"routinename",level:3},{value:"HasHeaders",id:"hasheaders",level:3},{value:"Delimiter",id:"delimiter",level:3},{value:"DateFormat",id:"dateformat",level:3},{value:"TimeFormat",id:"timeformat",level:3},{value:"TimeStampFormat",id:"timestampformat",level:3},{value:"StringQuote",id:"stringquote",level:3},{value:"Terminator",id:"terminator",level:3},{value:"NoCheck",id:"nocheck",level:3},{value:"ColumnNames",id:"columnnames",level:3},{value:"ColumnTypes",id:"columntypes",level:3},{value:"ColumnWidths",id:"columnwidths",level:3},{value:"Methods",id:"methods",level:2},{value:"ResetExImData",id:"reseteximdata",level:3}];function o(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"sqleximdata",children:"%SQL.ExImData"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %SQL.ExImData [ Abstract, Not ProcedureBlock, System = 3 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Common data used by both SQL import and export classes."}),"\n",(0,s.jsx)(t.p,{children:"Example of using the import/export classes:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'If Wizard = "Export" { set mgr = ##class(%SQL.Export.Mgr).%New() } \tElse { Set mgr = ##class(%SQL.Import.Mgr).%New() } \tSet mobj = ##class(%SQL.Manager.API).%New() \tSet ok = mobj.CheckIdentifier(.SchemaName) \tSet ok = mobj.CheckIdentifier(.TableName) \tSet classname = mobj.FindClassName(SchemaName_"."_TableName) \tSet mgr.FileName = "c:\\export.txt" \tSet mgr.TableName = SchemaName_"."_TableName \tSet mgr.IQN=$$$BuildIQN(SchemaName,TableName)\t<-- $$$BuildIQN is defined in %msql.INC \tSet mgr.ClassName = classname \tSet mgr.Delimiter = $c(9)\t\t\t<-- tab \tSet mgr.StringQuote = ""\t\t\t<-- double quotes \tSet mgr.DateFormat = 1\t\t\t\t<-- MM/DD/{YY}YY \tSet mgr.TimeFormat = 1\t\t\t\t<-- hh:mm:ss \tSet mgr.TimeStampFormat = 1\t\t\t<-- ODBC format (Import only) \tSet mgr.NoCheck = 1\t\t\t\t<-- disable validation (Import only) \tSet mgr.HasHeaders = 1\t\t\t\t<-- import file contains column headers \tDo mgr.ColumnNames.Insert(colname)\t\t<-- insert a column name \tDo mgr.ColumnTypes.Insert(datatype)\t\t<-- insert a column datatype \n'})}),"\n",(0,s.jsx)(t.p,{children:"For Export:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'Set result = mgr.GenerateExportRoutine() \tIf result \'= 1 { Write !,"Error generating export routine: ",result Quit } \tSet sta = mgr.OpenExport() \tIf $$$ISERR(sta) { \t\tSet ErrMsg = "Unable to open export file" \t\t[...LogYourError here ] \t} Else { \t\tSet sta = mgr.GetExportSize(.size) \t\tIf size = 0 { \t\t\t[...LogYourError here "No data to export"] \t\t} Else { \t\t\tSet tSC = $$$OK \t\t\tDo { \t\t\t\tSet tSC = mgr.ExportRows(.rows,.done) \t\t\t\tSet total = total + rows \t\t\t\tIf $$$ISERR(tSC) [Do ..LogYourError here] Quit \t\t\t} While done = 0 \t\t\tIf $$$ISOK(tSC) { \t\t\t\tSet tmsg = "Completed at "_$zdt($h) \t\t\t} Else { \t\t\t\tSet tmsg ="Error occurred during export." \t\t\t} \t\t\tSet statusmsg = "Exported: "_total_" rows" \t\t\tWrite !,tmsg,!,statusmsg \t\t} \t\tDo mgr.CloseExport() \t} \tDo mgr.DeleteExportRoutine() \n'})}),"\n",(0,s.jsx)(t.p,{children:"For Import:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'Set mgr.DeferIndices = 1 \tSet result = mgr.GenerateImportRoutine() \tIf result \'= 1 { Write !,"Error generating import routine: ",result Quit } \tSet sta = mgr.OpenImport() \tIf $$$ISERR(sta) { \t\tSet ErrMsg = "Unable to open import file" \t\t[...LogYourError here ] \t} Else { \t\tIf mgr.HasHeaders = 1 { Set sta = mgr.ReadHeader(.header,.size) } \t\tSet tSC = $$$OK \t\tDo { \t\t\tSet tSC = mgr.ImportRows(.rows,.inserted,.bytes,.done,.numerr,total) \t\t\tSet total = total + rows \t\t\tSet totalinserted = totalinserted + inserted \t\t\tSet totalbytes = totalbytes + bytes \t\t\tIf $$$ISERR(tSC) [...LogYourError here ] Quit \t\t} While done = 0 \t\tDo mgr.BuildIndices() \t\tIf mgr.ErrorCount() > 0 { \t\t\t[...LogYourError here ] \t\t\t[number of error count is mgr.ErrorCount() \t\t} Else { \t\t\tIf $$$ISOK(tSC) { \t\t\t\tSet tmsg = "Completed at "_$zdt($h) \t\t\t} Else { \t\t\t\tSet tmsg ="Error occurred during import." \t\t\t} \t\t\tSet statusmsg = "Imported: "_totalinserted_" rows" \t\t\tWrite !,tmsg,!,statusmsg \t\t} \t\tDo mgr.CloseImport(0) \t} \tDo mgr.DeleteImportRoutine() \n'})}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"filename",children:"FileName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property FileName As %String(TRUNCATE = 1);\n"})}),"\n",(0,s.jsx)(t.p,{children:'File (on server) to use for import or export."'}),"\n",(0,s.jsx)(t.h3,{id:"charset",children:"Charset"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Charset As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:'Character Set to use for import or export. "" is Device Default.'}),"\n",(0,s.jsx)(t.h3,{id:"classname",children:"ClassName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property ClassName As %String(TRUNCATE = 1);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Class to use for import/export."}),"\n",(0,s.jsx)(t.h3,{id:"tablename",children:"TableName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property TableName As %String(TRUNCATE = 1);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Table to use for import/export."}),"\n",(0,s.jsx)(t.h3,{id:"iqn",children:"IQN"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property IQN As %String(TRUNCATE = 1);\n"})}),"\n",(0,s.jsx)(t.p,{children:'Internal Qualified Table Name. $$$BuildIQN(SchemaName,TableName) or SchemaName_"."_$Translate(Tablename,".",$c(2))'}),"\n",(0,s.jsx)(t.h3,{id:"routinename",children:"RoutineName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property RoutineName As %String(TRUNCATE = 1) [ Private ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Name of generated routine."}),"\n",(0,s.jsx)(t.h3,{id:"hasheaders",children:"HasHeaders"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property HasHeaders As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"If true, file has column headers in first row."}),"\n",(0,s.jsx)(t.h3,{id:"delimiter",children:"Delimiter"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Delimiter As %String(TRUNCATE = 1);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Delimiter character or NULL for fixed width fields."}),"\n",(0,s.jsx)(t.h3,{id:"dateformat",children:"DateFormat"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property DateFormat As %Integer;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Format for dates (passed to $ZDT)."}),"\n",(0,s.jsx)(t.h3,{id:"timeformat",children:"TimeFormat"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property TimeFormat As %Integer;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Format for time (passed to $ZTime)."}),"\n",(0,s.jsx)(t.h3,{id:"timestampformat",children:"TimeStampFormat"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property TimeStampFormat As %Integer;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Format for datetime values (ODBC or T-SQL)."}),"\n",(0,s.jsx)(t.h3,{id:"stringquote",children:"StringQuote"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property StringQuote As %String(TRUNCATE = 1);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Character used to quote strings or NULL for no quoting."}),"\n",(0,s.jsx)(t.h3,{id:"terminator",children:"Terminator"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Terminator As %String(TRUNCATE = 1);\n"})}),"\n",(0,s.jsx)(t.p,{children:"User defined record terminators (upto 8 charectors)."}),"\n",(0,s.jsx)(t.h3,{id:"nocheck",children:"NoCheck"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property NoCheck As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"If true, import will insert with %NOCHECK."}),"\n",(0,s.jsx)(t.h3,{id:"columnnames",children:"ColumnNames"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property ColumnNames As list Of %String(TRUNCATE = 1);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Names (SQL field names) of columns."}),"\n",(0,s.jsx)(t.h3,{id:"columntypes",children:"ColumnTypes"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property ColumnTypes As list Of %String(TRUNCATE = 1);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Data types of columns."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"D - Date"}),"\n",(0,s.jsx)(t.li,{children:"TS - TimeStamp"}),"\n",(0,s.jsx)(t.li,{children:"N - Numeric"}),"\n",(0,s.jsx)(t.li,{children:"S - String"}),"\n",(0,s.jsx)(t.li,{children:"T - Time"}),"\n",(0,s.jsx)(t.li,{children:"V - Vector or its sub class"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"columnwidths",children:"ColumnWidths"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property ColumnWidths As list Of %Integer;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Widths of columns for FixedWidth files."}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"reseteximdata",children:"ResetExImData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method ResetExImData()\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reset the export/import data."})]})}function c(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>l,x:()=>i});var s=r(96540);const n={},a=s.createContext(n);function l(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);