"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[92459],{87253:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>r,default:()=>o,frontMatter:()=>i,toc:()=>l});var n=t(74848),a=t(28453);const i={pagination_prev:null,pagination_next:null},r="Config.CommonMultipleMethods",l=[{value:"Parameters",id:"parameters",level:2},{value:"CAPITALNAME",id:"capitalname",level:3},{value:"CPFFlags",id:"cpfflags",level:3},{value:"SECTIONTYPE",id:"sectiontype",level:3},{value:"Methods",id:"methods",level:2},{value:"Create",id:"create",level:3},{value:"CreateCallBack",id:"createcallback",level:3},{value:"CreateOne",id:"createone",level:3},{value:"CreateCallBackOptions",id:"createcallbackoptions",level:3},{value:"Delete",id:"delete",level:3},{value:"DeleteOne",id:"deleteone",level:3},{value:"Exists",id:"exists",level:3},{value:"Get",id:"get",level:3},{value:"GetList",id:"getlist",level:3},{value:"GetClassPropertiesCallBackOptions",id:"getclasspropertiescallbackoptions",level:3},{value:"Modify",id:"modify",level:3},{value:"ModifyOne",id:"modifyone",level:3},{value:"ModifyCallBackOptions",id:"modifycallbackoptions",level:3},{value:"Open",id:"open",level:3},{value:"WriteSection",id:"writesection",level:3},{value:"%OnNew",id:"onnew",level:3}];function c(e){const s={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"configcommonmultiplemethods",children:"Config.CommonMultipleMethods"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class Config.CommonMultipleMethods Extends Config.CommonMethods [ Abstract, System = 4 ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This class contains methods which are inherited by other config classes."}),"\n",(0,n.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(s.h3,{id:"capitalname",children:"CAPITALNAME"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter CAPITALNAME = 0;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Determines if the Name specified in the index should be capitalized."}),"\n",(0,n.jsx)(s.h3,{id:"cpfflags",children:"CPFFlags"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter CPFFlags [ Internal ] = {1+2+4};\n"})}),"\n",(0,n.jsx)(s.p,{children:"{$$$CPFSave+$$$CPFWrite+$$$CPFActivate};"}),"\n",(0,n.jsx)(s.h3,{id:"sectiontype",children:"SECTIONTYPE"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter SECTIONTYPE = 1;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This parameter governs how the class creates audit records.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Value = 0"})," - Class contains a single entry (SQL, Net, etc.)",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Value = 1"})," - Class contains multiple entries (Databases, Namespaces, etc.)",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Value = 2"})," - Class deals with mappings (MapGlobals, MapRoutines, MapPackages.)"]}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"create",children:"Create"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Create(Name As %String, ByRef Properties As %String, CPFFile As %String = "", Flags As %Integer = {$$$CPFSave+$$$CPFWrite+$$$CPFActivate}) As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Create a section instance in a CPF file."}),"\n",(0,n.jsxs)(s.p,{children:["Parameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Name"})," - Name of the instance to create.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Properties (byref)"})," - List of the properties to add in Properties(Name)=Value format. Available properties depend on the ",(0,n.jsx)(s.a,{href:"#anchor%5Fsubclasses",children:"subclass"}),".",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file to use, Default=current active CPF file. The file must have a .CPF file extension if specified.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Flags"})," - (From %syConfig.inc) Bit string of options to perform.",(0,n.jsx)(s.br,{}),"\nBit $$$CPFSave - Save data to config database.",(0,n.jsx)(s.br,{}),"\nBit $$$CPFWrite - Write config database to CPF file.",(0,n.jsx)(s.br,{}),"\nBit $$$CPFActivate - Copy changes to ^CONFIG global, and make active on system.",(0,n.jsx)(s.br,{}),"\nBy default, all these bits are set, and you should normally not pass this parameter. If you are modifying a CPF file which is not the active CPF file, Bit $$$CPFActivate is ignored.",(0,n.jsx)(s.br,{}),"\nIf you have a batch of updates to do (like adding several devices, databases, or namespaces), then you should pass only Bit $$$CPFSave for each call. Then when creating the last one, don't pass any bits. This will cause all the previous additions to be written to the CPF file and activated all at once."]}),"\n",(0,n.jsxs)(s.p,{children:["Return values:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file the modification was made in."]}),"\n",(0,n.jsx)(s.h3,{id:"createcallback",children:"CreateCallBack"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateCallBack(Obj As %ObjectHandle, Data As %String) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Stub called during create, individual classes may override this."}),"\n",(0,n.jsx)(s.h3,{id:"createone",children:"CreateOne"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateOne(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"createcallbackoptions",children:"CreateCallBackOptions"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateCallBackOptions(Obj As %ObjectHandle, Data As %String) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Stub called during Create(). Called after object is populated, and before %Save(). Individual classes may override this."}),"\n",(0,n.jsx)(s.h3,{id:"delete",children:"Delete"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Delete(Name As %String, ByRef CPFFile As %String = "", Flags As %Integer = {$$$CPFSave+$$$CPFWrite+$$$CPFActivate}) As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Delete a section instance from a CPF file."}),"\n",(0,n.jsxs)(s.p,{children:["Parameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Name"})," - Name of the instance to delete.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file to use, Default=current active CPF file. The file must have a .CPF file extension if specified.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Flags"})," - Bit string of options to perform. See the Create method for values."]}),"\n",(0,n.jsxs)(s.p,{children:["Return values:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file the modification was made in."]}),"\n",(0,n.jsx)(s.h3,{id:"deleteone",children:"DeleteOne"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DeleteOne(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"exists",children:"Exists"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Exists(Name As %String, ByRef Obj As %ObjectHandle, ByRef Status As %Status, ByRef CPFFile As %String = "", Flags As %Integer = {$$$CPFSave+$$$CPFWrite+$$$CPFActivate}) As %Boolean\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Database exists.",(0,n.jsx)(s.br,{}),"\nThis method checks for the existence of a section instance in a CPF file."]}),"\n",(0,n.jsxs)(s.p,{children:["Parameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Name"})," - Name of the instance to check existence of.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file to use, Default=current active CPF file. The file must have a .CPF file extension if specified.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Flags"})," - Bit string of options to perform if the object is later saved with the %Save() method. See the Create method for values."]}),"\n",(0,n.jsxs)(s.p,{children:["Return values:",(0,n.jsx)(s.br,{}),"\nIf Value of the method = 0 (Instance does not exist, or some error occured)",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Obj"})," = Null",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Status"}),' = Instance "x" does not exist, or other error message']}),"\n",(0,n.jsxs)(s.p,{children:["If Value of the method = 1 (Instance exists)",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Obj"})," = Object handle to Instance",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file the modification was made in.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Status"}),' = Instance "x" already exists']}),"\n",(0,n.jsx)(s.h3,{id:"get",children:"Get"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Get(Name As %String, ByRef Properties As %String, ByRef CPFFile As %String = "", Flags As %Integer = {$$$CPFSave+$$$CPFWrite+$$$CPFActivate}) As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Get a section instances properties from a CPF file."}),"\n",(0,n.jsxs)(s.p,{children:["Parameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Name"})," - Name of the instance to get.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file to use, Default=current active CPF file. The file must have a .CPF file extension if specified."]}),"\n",(0,n.jsxs)(s.p,{children:["Return values:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Properties (byref)"})," - List of the properties in Properties(Name)=Value format. Available properties depend on the ",(0,n.jsx)(s.a,{href:"#anchor%5Fsubclasses",children:"subclass"}),".",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file the modification was made in."]}),"\n",(0,n.jsx)(s.h3,{id:"getlist",children:"GetList"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetList(Name As %String, ByRef CPFFile As %String = "", Flags As %Integer = {$$$CPFSave+$$$CPFWrite+$$$CPFActivate}) As %Status\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Returns the properties from a section instance in a CPF file by value in ",(0,n.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"})," format"]}),"\n",(0,n.jsxs)(s.p,{children:["Parameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Name"})," - Name of the instance to get.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file to use, Default=current active CPF file. The file must have a .CPF file extension if specified."]}),"\n",(0,n.jsxs)(s.p,{children:["Return value:",(0,n.jsx)(s.br,{}),"\n$lb(%Status,Result)",(0,n.jsx)(s.br,{}),"\nwhere Result=$LB($LB(property name,value),...) for each property in the instance of the section"]}),"\n",(0,n.jsx)(s.h3,{id:"getclasspropertiescallbackoptions",children:"GetClassPropertiesCallBackOptions"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetClassPropertiesCallBackOptions(ByRef Properties As %String) [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"modify",children:"Modify"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Modify(Name As %String, ByRef Properties As %String, ByRef CPFFile As %String = "", Flags As %Integer = {$$$CPFSave+$$$CPFWrite+$$$CPFActivate}) As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Modify a section instance in a CPF file."}),"\n",(0,n.jsxs)(s.p,{children:["Parameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Name"})," - Name of the instance to modify.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Properties (byref)"})," - List of the properties to modify in Properties(Name)=Value format. Available properties depend on the ",(0,n.jsx)(s.a,{href:"#anchor%5Fsubclasses",children:"subclass"}),". If a specific property is not passed in the properties array, the value is not modified.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file to use, Default=current active CPF file. The file must have a .CPF file extension if specified.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Flags"})," - Bit string of options to perform. See the Create method for values."]}),"\n",(0,n.jsxs)(s.p,{children:["Return values:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file the modification was made in."]}),"\n",(0,n.jsx)(s.h3,{id:"modifyone",children:"ModifyOne"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ModifyOne(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"modifycallbackoptions",children:"ModifyCallBackOptions"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ModifyCallBackOptions(Obj As %ObjectHandle, Data As %String) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Stub called during Modify(). Called after object is populated, and before %Save(). Individual classes may override this."}),"\n",(0,n.jsx)(s.h3,{id:"open",children:"Open"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Open(Name As %String, ByRef CPFFile As %String = "", concurrency As %Integer = -1, ByRef Status As %Status, Flags As %Integer = {$$$CPFSave+$$$CPFWrite+$$$CPFActivate}) As %ObjectHandle\n'})}),"\n",(0,n.jsx)(s.p,{children:"Open a section instance object in a CPF file."}),"\n",(0,n.jsxs)(s.p,{children:["Parameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Name"})," - Name of the instance to open",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file to use, Default=current active CPF file. The file must have a .CPF file extension if specified."]}),"\n",(0,n.jsxs)(s.p,{children:["Return Values:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file the modification was made in."]}),"\n",(0,n.jsx)(s.h3,{id:"writesection",children:"WriteSection"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod WriteSection(CPFFile As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Write a section to the CPF file from the Config database object.",(0,n.jsx)(s.br,{}),"\nThis method assumes that the CPF file has been opened, and USED."]}),"\n",(0,n.jsxs)(s.p,{children:["Parameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file to use, Default=current active CPF file. The file must have a .CPF file extension if specified."]}),"\n",(0,n.jsx)(s.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnNew(initvalue As %RawString) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Callback called when a new instance is instantiated to fill in the section header."})]})}function o(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>l});var n=t(96540);const a={},i=n.createContext(a);function r(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);