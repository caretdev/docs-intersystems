"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[76217],{87212:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>a,default:()=>o,frontMatter:()=>i,toc:()=>c});var t=n(74848),r=n(28453);const i={pagination_prev:null,pagination_next:null},a="%Library.Device",c=[{value:"Methods",id:"methods",level:2},{value:"Get",id:"get",level:3},{value:"GetCurrent",id:"getcurrent",level:3},{value:"GetFileFormat",id:"getfileformat",level:3},{value:"GetBackSpace",id:"getbackspace",level:3},{value:"GetClearScreen",id:"getclearscreen",level:3},{value:"GetMnemonicDirectory",id:"getmnemonicdirectory",level:3},{value:"GetMnemonicRoutine",id:"getmnemonicroutine",level:3},{value:"GetNullDevice",id:"getnulldevice",level:3},{value:"GetPrinters",id:"getprinters",level:3},{value:"GetReadTerminators",id:"getreadterminators",level:3},{value:"GetRightMargin",id:"getrightmargin",level:3},{value:"GetType",id:"gettype",level:3},{value:"VirtualTermCheck",id:"virtualtermcheck",level:3},{value:"Broadcast",id:"broadcast",level:3},{value:"SetFFBS",id:"setffbs",level:3},{value:"ReDirectIO",id:"redirectio",level:3},{value:"ChangePrincipal",id:"changeprincipal",level:3},{value:"InstalledPrinters",id:"installedprinters",level:3}];function l(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"librarydevice",children:"%Library.Device"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %Library.Device Extends %SYSTEM.Help [ Abstract, System = 4 ]\n"})}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"get",children:"Get"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Get(Prompt As %String, ByRef Value As %String, ByRef Help As %String, Flag As %Integer = 0, Timeout As %Integer = 0, IOFlag As %Integer = 1, ByRef IOSL As %String, ByRef IOM As %Integer, ByRef IOF As %String, ByRef IOBS As %String, ByRef IOPAR As %String, ByRef IOT As %String, ByRef IOST As %String, ByRef ANS As %String, ByRef RMSDF As %String, ByRef IODOC As %String, ByRef IODES As %String)\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Get and open an INPUT or OUTPUT device.",(0,t.jsx)(s.br,{}),"\nInput Parameters:",(0,t.jsx)(s.br,{}),"\nPrompt - Prompt to be displayed",(0,t.jsx)(s.br,{}),"\nValue - Default value",(0,t.jsx)(s.br,{}),"\nHelp - Array of help text",(0,t.jsx)(s.br,{}),"\nFlag - From %syPrompt.inc",(0,t.jsx)(s.br,{}),"\n- $$$DisableBackupCharMask - Disable entry of the backup character",(0,t.jsx)(s.br,{}),"\n- $$$TrapCtrlCMask - Trap CTRL/C and return CTRL/C status",(0,t.jsx)(s.br,{}),"\n- $$$EnableQuitCharMask - Enable quit and return Quit status",(0,t.jsx)(s.br,{}),"\n- $$$DisableHelpCharMask - Disable entry of the help character",(0,t.jsx)(s.br,{}),"\n- $$$TrapErrorMask - Trap errors and return error status",(0,t.jsx)(s.br,{}),"\nTimeOut - Timeout for prompt",(0,t.jsx)(s.br,{}),"\nIOFlag - Mask containing one of the following values",(0,t.jsx)(s.br,{}),"\n- 1= Get input or output device (Default)",(0,t.jsx)(s.br,{}),"\n- 2= Get input device",(0,t.jsx)(s.br,{}),"\n- 4= Get output device",(0,t.jsx)(s.br,{}),"\n- 8= Open passed in Value without prompting"]}),"\n",(0,t.jsxs)(s.p,{children:["Output parameters:",(0,t.jsx)(s.br,{}),"\nStatus - One of the following from %syPrompt:",(0,t.jsx)(s.br,{}),"\n$$$SuccessResponse - Successful entry, Value contains valid open device",(0,t.jsx)(s.br,{}),"\n$$$BackupResponse - Backup character entered",(0,t.jsx)(s.br,{}),"\n$$$QuitResponse - Quit character entered if $$$EnableQuitCharMask set",(0,t.jsx)(s.br,{}),"\n$$$CtrlCResponse - CTRL/C entered if $$$TrapCtrlCMask set",(0,t.jsx)(s.br,{}),"\n$$$ErrorResponse - Error during entry if $$$TrapErrorMask set",(0,t.jsx)(s.br,{}),"\n$$$HelpResponse - Help character entered if $$$DisableHelpCharMask set"]}),"\n",(0,t.jsxs)(s.p,{children:["Value - Open device name",(0,t.jsx)(s.br,{}),"\nIOSL - Number of lines per screen",(0,t.jsx)(s.br,{}),"\nIOM - Right margin",(0,t.jsx)(s.br,{}),"\nIOBS - Backspace character",(0,t.jsx)(s.br,{}),"\nIOPAR - IO parameters",(0,t.jsx)(s.br,{}),"\nIOT - Device type",(0,t.jsx)(s.br,{}),"\nIOST - Expanded device type",(0,t.jsx)(s.br,{}),"\nANS - Device typed in by user",(0,t.jsx)(s.br,{}),"\nRMSDF - Default RMS parameters",(0,t.jsx)(s.br,{}),"\nIODOC - Spool file name",(0,t.jsx)(s.br,{}),"\nIODES - Spool file description"]}),"\n",(0,t.jsxs)(s.p,{children:['Typical usage is as follows: s Status=##Class(%Library.Device).Get("Device:",.Value,,$$$TrapCtrlCMask+$$$EnableQuitCharMask,,IOFlag,.IOSL,.IOM)',(0,t.jsx)(s.br,{}),"\ni (Status=$$$CtrlCResponse)||(Status=$$$QuitResponse) q",(0,t.jsx)(s.br,{}),"\ni (Status=$$$BackupResponse) g PreviousPrompt",(0,t.jsx)(s.br,{}),"\nuse Value",(0,t.jsx)(s.br,{}),'\nw !,"Right margin is "_IOM',(0,t.jsx)(s.br,{}),'\nw !,"Lines per page is "_IOSL',(0,t.jsx)(s.br,{}),"\nclose Value"]}),"\n",(0,t.jsx)(s.h3,{id:"getcurrent",children:"GetCurrent"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetCurrent(ByRef IO As %String, ByRef SL As %String, ByRef RM As %String, ByRef FF As %String, ByRef BS As %String, ByRef SUB As %String, ByRef XY As %String)\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Get current device info from %IS global.",(0,t.jsx)(s.br,{}),"\nGet current device info from %IS global and set default FormFeed and Backspace strings for the process based on information in the %IS global.",(0,t.jsx)(s.br,{}),"\nReturn Values:",(0,t.jsx)(s.br,{}),"\nIO - Device name",(0,t.jsx)(s.br,{}),"\nSL - Number of screen lines of the device",(0,t.jsx)(s.br,{}),"\nRM - Right margin of the device",(0,t.jsx)(s.br,{}),"\nFF - Form feed character of the device",(0,t.jsx)(s.br,{}),"\nBS - Back space character of the device",(0,t.jsx)(s.br,{}),"\nSUB - Device subtype",(0,t.jsx)(s.br,{}),"\nXY - XY cursor positioning string",(0,t.jsx)(s.br,{}),"\nThis method replaces the CURRENT^%IS call."]}),"\n",(0,t.jsx)(s.h3,{id:"getfileformat",children:"GetFileFormat"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetFileFormat(File) As %String [ Internal, Private ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Try to return the internal format of the file.",(0,t.jsx)(s.br,{}),"\nThis method is only used by this class."]}),"\n",(0,t.jsx)(s.h3,{id:"getbackspace",children:"GetBackSpace"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetBackSpace() As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return the Back Space string for the process principal device."}),"\n",(0,t.jsx)(s.h3,{id:"getclearscreen",children:"GetClearScreen"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetClearScreen() As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return the Clear Screen (Form Feed) string for the process principal device."}),"\n",(0,t.jsx)(s.h3,{id:"getmnemonicdirectory",children:"GetMnemonicDirectory"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetMnemonicDirectory() As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return the write mnemonic space routine directory for the current device."}),"\n",(0,t.jsx)(s.h3,{id:"getmnemonicroutine",children:"GetMnemonicRoutine"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetMnemonicRoutine() As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return the write mnemonic space routine name for the current device."}),"\n",(0,t.jsx)(s.h3,{id:"getnulldevice",children:"GetNullDevice"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetNullDevice() As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return the name of the null device for the platform."}),"\n",(0,t.jsx)(s.h3,{id:"getprinters",children:"GetPrinters"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetPrinters() As %List\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return a list of printers that the system recognizes."}),"\n",(0,t.jsx)(s.p,{children:"This method is supported only for Windows platform, for non Windows platform it always returns a null string."}),"\n",(0,t.jsxs)(s.p,{children:["It returns a null string when there is no printer recognized by the system.",(0,t.jsx)(s.br,{}),'\nUse $LISTLENGTH function to get number of printers in the returned list. Use $LIST function to get each printer name in the list. Note that you need to add "|PRN|" at beginning of each printer name in order to use OPEN command to open the printer device.']}),"\n",(0,t.jsx)(s.h3,{id:"getreadterminators",children:"GetReadTerminators"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetReadTerminators() As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Return the read terminator string for the current device.",(0,t.jsx)(s.br,{}),"\nDoes not apply to some devices."]}),"\n",(0,t.jsx)(s.h3,{id:"getrightmargin",children:"GetRightMargin"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetRightMargin() As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Return the right margin setting for the current device.",(0,t.jsx)(s.br,{}),"\nThis only applies to terminals."]}),"\n",(0,t.jsx)(s.h3,{id:"gettype",children:"GetType"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetType() As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns an integer which specifies the type of device.",(0,t.jsx)(s.br,{}),"\n0 - sequential file",(0,t.jsx)(s.br,{}),"\n1 - terminal",(0,t.jsx)(s.br,{}),"\n2 - spool device (device #2)",(0,t.jsx)(s.br,{}),"\n3 - magnetic tape (device numbers 47-50)",(0,t.jsx)(s.br,{}),"\n4 - system operator's console (device 1)",(0,t.jsx)(s.br,{}),"\n5 - pseudo-device (device numbers 20-46)",(0,t.jsx)(s.br,{}),"\n6 - Null device",(0,t.jsx)(s.br,{}),"\n7 - spooled virtual console",(0,t.jsx)(s.br,{}),"\n8 - IJC device (devices 224-255)",(0,t.jsx)(s.br,{}),"\n9 - TCP device",(0,t.jsx)(s.br,{}),"\n11 - NetBIOS NTI device",(0,t.jsx)(s.br,{}),"\n12 - Named Pipe device",(0,t.jsx)(s.br,{}),"\n13 - Memory-mapped device",(0,t.jsx)(s.br,{}),"\n14 - XDEV extensible device"]}),"\n",(0,t.jsx)(s.p,{children:"-1 - Unknown or no default device"}),"\n",(0,t.jsx)(s.h3,{id:"virtualtermcheck",children:"VirtualTermCheck"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod VirtualTermCheck(ByRef Device As %String, ByRef DeviceData As %String) [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Return the Device name and its parameters if a terminal.",(0,t.jsx)(s.br,{}),"\nThis method is only used by this class."]}),"\n",(0,t.jsx)(s.h3,{id:"broadcast",children:"Broadcast"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Broadcast(terminal As %String, message As %String, level As %Integer = 0) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Description"}),"\n",(0,t.jsx)(s.p,{children:"The Broadcast class method has two syntactic forms. The first sends a message to the specified terminal, and can optionally time out. The second sends a message to the operator console (specified by the null string), and also logs the message."}),"\n",(0,t.jsx)(s.p,{children:"Broadcast(terminal,message) passes the message to the specified terminal. If you specify your own principal device, your message appears on your terminal screen."}),"\n",(0,t.jsxs)(s.p,{children:['Broadcast("",message) passes the message to the operator console, logging it in the console log file. By default, the console log file is messages.log, which can be accessed via the System Management Portal System Logs option. This default console log file location is configurable. Go to the Management Portal, select [Home] > [System Administration] > [Configuration] > [Additional Settings] > [Advanced Memory]. View and edit the current setting of ConsoleFile. By default this setting is blank, routing console messages to messages.log in the MGR directory. If you change this setting, you must restart the system for this change to take effect.',(0,t.jsx)(s.br,{}),"\nBroadcast does not add any carriage control to the message it sends. To include any carriage control (carriage returns or line feeds), you must include them in the message, using $CHAR(10) and $CHAR(13)."]}),"\n",(0,t.jsx)(s.p,{children:"Broadcast returns 1 if successful; 0 if not successful."}),"\n",(0,t.jsx)(s.p,{children:"Parameters"}),"\n",(0,t.jsxs)(s.p,{children:["terminal",(0,t.jsx)(s.br,{}),'\nThe device name of the terminal to which you want to send a message, specified as a quoted string. Specify the null string ("") to send the message to the system console.']}),"\n",(0,t.jsxs)(s.p,{children:["message",(0,t.jsx)(s.br,{}),"\nThe message to send, specified as a quoted string."]}),"\n",(0,t.jsxs)(s.p,{children:["level",(0,t.jsx)(s.br,{}),"\nOptional",(0,t.jsx)(s.br,{}),"\nwhen used with named terminal only ? A timeout in seconds. If Broadcast is not able to send the message during the period of the timeout, it ceases attempts to send the message after the timeout expires.",(0,t.jsx)(s.br,{}),"\nwhen used with operator console only ? The log level you want to assign to the message."]}),"\n",(0,t.jsxs)(s.p,{children:["You can use the following values:",(0,t.jsx)(s.br,{}),"\n0 = Send the message to the following locations: Operator console log file, InterSystems IRIS console.",(0,t.jsx)(s.br,{}),"\n1 = Send the message to the following locations: Operator console log file, InterSystems IRIS console, System-wide operator console facility."]}),"\n",(0,t.jsx)(s.h3,{id:"setffbs",children:"SetFFBS"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetFFBS(ff As %String, bs As %String) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"The SetFFBS class method specifies the form feed or backspace control code sequence used by printers."}),"\n",(0,t.jsxs)(s.p,{children:["Parameters",(0,t.jsx)(s.br,{}),"\nff : The new value for the form feed control code sequence. If omitted, the system default, as defined for Device 0, is used. May not be omitted if the bs parameter is present.",(0,t.jsx)(s.br,{}),"\nbs : The new value for the backspace control code sequence. If omitted, the system default, as defined for Device 0, is used."]}),"\n",(0,t.jsxs)(s.p,{children:["Description",(0,t.jsx)(s.br,{}),"\nThis function is used to change the form feed and backspace control code sequences.",(0,t.jsx)(s.br,{}),"\nSetFFBS(ff,bs) sets form feed control sequence to ff and backspace control sequence to bs.",(0,t.jsx)(s.br,{}),"\nSetFFBS(ff) sets form feed control sequence to ff and backspace control sequence to system default.",(0,t.jsx)(s.br,{}),"\nSetFFBS() sets the printer form feed and backspace control sequences to system default."]}),"\n",(0,t.jsx)(s.h3,{id:"redirectio",children:"ReDirectIO"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ReDirectIO(n As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsx)(s.p,{children:"The ReDirectIO() class method returns the status of the I/O redirection switch for the current device."}),"\n",(0,t.jsx)(s.p,{children:"The ReDirectIO(n) class method sets the I/O redirection switch for the current device according to the boolean value n. It returns the previous setting of this switch."}),"\n",(0,t.jsx)(s.h3,{id:"changeprincipal",children:"ChangePrincipal"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ChangePrincipal() As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"The ChangePrincipal() class method makes the current device (last device specified in a USE command) be the principal I/O device (referenceable by USE 0 or USE $PRINCIPAL.) This method makes the current device the principal I/O device, while leaving the former principal I/O device open, and thus capable of being used explicitly by name."}),"\n",(0,t.jsx)(s.p,{children:"ChangePrincipal() takes no arguments. It returns 1 on success, 0 on failure."}),"\n",(0,t.jsx)(s.h3,{id:"installedprinters",children:"InstalledPrinters"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod InstalledPrinters(n As %Integer) As %DataType\n"})}),"\n",(0,t.jsx)(s.p,{children:"The InstalledPrinters() class method returns the number of printers currently installed on your system, counting from 1."}),"\n",(0,t.jsx)(s.p,{children:"The InstalledPrinters(n) method, where 1 <= n <= InstalledPrinters(), returns the pathname of the printer currently installed on your system that corresponds to n. The system counts printers from 1, and assigns a sequential integer to each. If n is a number that does not correspond to a printer, the system issues a  error."})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>c});var t=n(96540);const r={},i=t.createContext(r);function a(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);