"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[27194],{67537:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>o,default:()=>c,frontMatter:()=>i,toc:()=>l});var a=s(74848),n=s(28453);const i={pagination_prev:null,pagination_next:null},o="%SYS.Namespace",l=[{value:"Methods",id:"methods",level:2},{value:"Enabled",id:"enabled",level:3},{value:"Exists",id:"exists",level:3},{value:"GetNSInfo",id:"getnsinfo",level:3},{value:"GetAllNSInfo",id:"getallnsinfo",level:3},{value:"GetGlobalDest",id:"getglobaldest",level:3},{value:"GetRoutineDest",id:"getroutinedest",level:3},{value:"GetPackageDest",id:"getpackagedest",level:3},{value:"ListAll",id:"listall",level:3},{value:"ListClose",id:"listclose",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"ListFetch",id:"listfetch",level:3}];function r(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"sysnamespace",children:"%SYS.Namespace"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Class %SYS.Namespace Extends %Persistent [ Abstract, System = 4 ]\n"})}),"\n",(0,a.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(t.h3,{id:"enabled",children:"Enabled"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Enabled(NamespaceName As %String) As %Boolean [ Internal ]\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Returns True if a namespace is enabled, that is, if its default directory is reachable.",(0,a.jsx)(t.br,{}),"\nThis method will implicitly mount a database which has not yet been accessed by the system. If the database has been explicitly dismounted, or is not mountable, then the method will return false."]}),"\n",(0,a.jsx)(t.h3,{id:"exists",children:"Exists"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Exists(NamespaceName As %String) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"getnsinfo",children:"GetNSInfo"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetNSInfo(Namespace As %String, ByRef Info As %String, DontConnect As %Boolean = 0)\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Return information about a namespaces default global database.",(0,a.jsx)(t.br,{}),"\nParameters:",(0,a.jsx)(t.br,{}),"\nNamespace - Namespace to obtain information about. Can be either a real namespace or an implied namespace. Real namespace must be in uppercase.",(0,a.jsx)(t.br,{}),"\nDontConnect - If the namespace's default database is a remote database mounted across ECP, then if set to 1, and the remote database is not mounted, we will not try to mount it (default = 0)."]}),"\n",(0,a.jsxs)(t.p,{children:["Return Values:",(0,a.jsx)(t.br,{}),"\nReturns an array of information about the default global database.",(0,a.jsx)(t.br,{}),'\nInfo("System") - name of system default global directory resides on.',(0,a.jsx)(t.br,{}),'\nInfo("Directory") - Name of default global directory.',(0,a.jsx)(t.br,{}),'\nInfo("Resource") - Name of resource attached to the directory.',(0,a.jsx)(t.br,{}),'\nInfo("ReadOnly") - 0/1 is the database mounted read only.',(0,a.jsx)(t.br,{}),'\nInfo("Mounted") - 0/1 is the database mounted.',(0,a.jsx)(t.br,{}),'\nInfo("Status") - 1 = Success, %Status if any kind of error.']}),"\n",(0,a.jsxs)(t.p,{children:['This also returns a second level of subscript with the same values, but subscripted by "GlobalDB" and "RoutineDB". This allows us to return info about the default Routine database for the namespace e.g.',(0,a.jsx)(t.br,{}),'\nInfo("GlobalDB","System")',(0,a.jsx)(t.br,{}),'\nInfo("RoutineDB","System")',(0,a.jsx)(t.br,{}),'\nIf an implied namespace is passed in, ^SERVER^DIR, and the SERVER is the local system, then the database is treated as a local database, and Info("System") will be returned as "".']}),"\n",(0,a.jsx)(t.h3,{id:"getallnsinfo",children:"GetAllNSInfo"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetAllNSInfo(Namespace As %String, ByRef Info As %String, DontConnect As %Boolean = 0)\n"})}),"\n",(0,a.jsx)(t.p,{children:"Return information about a namespaces default global and routine database On Input: Namespace - Namespace to obtain information about. Can be either a real namespace or an implied namespace DontConnect - If the namespace's default database is a remote database mounted across ECP, then if set to 1, and the remote database is not mounted, we will not try to mount it (default = 0)."}),"\n",(0,a.jsx)(t.p,{children:'Returns an array of information about the default global and routine databases. Info("GlobalDB","System") - name of system default global directory resides on. Info("GlobalDB","Directory") - Name of default global directory. Info("GlobalDB","Resource") - Name of resource attached to the directory. Info("GlobalDB","ReadOnly") - 0/1 is the database mounted read only. Info("GlobalDB","Mounted") - 0/1 is the database mounted. Info("GlobalDB","Status") - 1 = Success, %Status if any kind of error. Info("RoutineDB","System") - name of system default routine directory resides on. Info("RoutineDB","Directory") - Name of default routine directory. Info("RoutineDB","Resource") - Name of resource attached to the directory. Info("RoutineDB","ReadOnly") - 0/1 is the database mounted read only. Info("RoutineDB","Mounted") - 0/1 is the database mounted. Info("RoutineDB","Status") - 1 = Success, %Status if any kind of error.'}),"\n",(0,a.jsx)(t.h3,{id:"getglobaldest",children:"GetGlobalDest"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetGlobalDest(Namespace As %String = {$namespace}, Global As %String = "^", Subscript As %String = "") As %String\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Returns the system^directory where ^[Namespace]Global(Subscript) is mapped to. If Subscript is missing, it returns the location for ^[Namespace]Global. If Global is missing, it returns the default global location for Namespace.",(0,a.jsx)(t.br,{}),'\nThis API support multi-level subscripts mapping, for example, pass "abc",1,2 in Subscript will check the destination of Global("abc",1,2).',(0,a.jsx)(t.br,{}),'\nIf the system is the same as the local system, then system is set to "".']}),"\n",(0,a.jsx)(t.h3,{id:"getroutinedest",children:"GetRoutineDest"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetRoutineDest(Namespace As %String = {$namespace}, Routine As %String = "", Type As %String = "INT") As %String\n'})}),"\n",(0,a.jsx)(t.p,{children:'Returns the system^directory where Routine is mapped to in this Namespace. If Routine is missing, it returns the default routine location for Namespace. The allowed types are: INC, INT, MAC and OBJ. If the system is the same as the local system, then system is set to "".'}),"\n",(0,a.jsx)(t.h3,{id:"getpackagedest",children:"GetPackageDest"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetPackageDest(Namespace As %String = "", Package As %String = "") As %String\n'})}),"\n",(0,a.jsx)(t.p,{children:'Returns the system^directory where Package is mapped to in this Namespace. If Package is missing, it returns the default package location for Namespace. If the system is the same as the local system, then system is set to "".'}),"\n",(0,a.jsx)(t.h3,{id:"listall",children:"ListAll"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListAll(Output array, ConvertImplicit As %Boolean = 1) As %Status\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.strong,{children:"ListAll"})," method quickly returns a list of all the namespaces in the current process. The parameter ",(0,a.jsx)(t.strong,{children:"array"})," is a local array name passed by reference. On return from ",(0,a.jsx)(t.strong,{children:"ListAll"}),", the subscripts of the ",(0,a.jsx)(t.strong,{children:"array"})," parameter will be the namespace names of the current process. Each subscripted entry in ",(0,a.jsx)(t.strong,{children:"array"})," will contain the empty string. When ",(0,a.jsx)(t.strong,{children:"ConvertImplicit"})," is true, it will convert the '@' in implicit namespace to '^'. The default value of ",(0,a.jsx)(t.strong,{children:"ConvertImplicit"})," is true when it is not specified."]}),"\n",(0,a.jsx)(t.p,{children:"Each explicit namespace is returned using the local namespace name as the subscript string. Each implicit namespace is returned using a subscript string that contains a caret ^, followed by the system name, followed by another caret ^, followed by the name of directory containing the database file. If the implicit namespace is local then the system name is the empty string and the subscript string starts with two adjacent carets ^^."}),"\n",(0,a.jsx)(t.h3,{id:"listclose",children:"ListClose"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListExecute(ByRef qHandle As %Binary, Remote As %Boolean = 0, DontConnect As %Boolean = 0) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})})]})}function c(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(r,{...e})}):r(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>l});var a=s(96540);const n={},i=a.createContext(n);function o(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);