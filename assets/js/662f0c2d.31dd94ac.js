"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[45474],{80341:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>i,default:()=>c,frontMatter:()=>n,toc:()=>l});var s=r(74848),a=r(28453);const n={pagination_prev:null,pagination_next:null},i="%XML.PropertyParameters",l=[{value:"Parameters",id:"parameters",level:2},{value:"XMLNAME;",id:"xmlname",level:3},{value:"XMLPROJECTION",id:"xmlprojection",level:3},{value:"XMLREFERENCE",id:"xmlreference",level:3},{value:"XMLTYPECONSTRAINT",id:"xmltypeconstraint",level:3},{value:"XMLITEMNAME;",id:"xmlitemname",level:3},{value:"XMLKEYNAME;",id:"xmlkeyname",level:3},{value:"XMLCHOICELIST",id:"xmlchoicelist",level:3},{value:"XMLIO",id:"xmlio",level:3},{value:"XMLELEMENTREF",id:"xmlelementref",level:3},{value:"XMLREF",id:"xmlref",level:3},{value:"REFNAMESPACE",id:"refnamespace",level:3},{value:"REFELEMENTQUALIFIED",id:"refelementqualified",level:3},{value:"ELEMENTQUALIFIED",id:"elementqualified",level:3},{value:"XMLPATTERN",id:"xmlpattern",level:3},{value:"XMLSTREAMMODE",id:"xmlstreammode",level:3},{value:"XMLNIL",id:"xmlnil",level:3},{value:"XMLNILNOOBJECT",id:"xmlnilnoobject",level:3}];function o(e){const t={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",propname:"propname",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"xmlpropertyparameters",children:"%XML.PropertyParameters"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %XML.PropertyParameters [ System = 2 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"For details on using the property parameters shown here"}),", see ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+%25XML.Adaptor",children:"Projecting Objects to XML"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Property superclass used to hold information about property parameters for %XML.Adaptor."}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(t.h3,{id:"xmlname",children:"XMLNAME;"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter XMLNAME;\n"})}),"\n",(0,s.jsx)(t.p,{children:"This is the XML element or attribute name to be used for this property."}),"\n",(0,s.jsx)(t.h3,{id:"xmlprojection",children:"XMLPROJECTION"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter XMLPROJECTION As STRING [ Constraint = ",NONE,ANY,ATTRIBUTE,XMLATTRIBUTE,CONTENT,ELEMENT,ELEMENTREF,WRAPPED,COLLECTION,XATTRIBUTE,XELEMENT", Flags = ENUM ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"The type of XML projection for this property."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"NONE indicates that the property is not to be projected to XML. The XMLPROJECTION for private properties defaults to NONE. Private properties are not automatically projected but can be forced to project by specifying a value for this parameter."}),"\n",(0,s.jsx)(t.li,{children:"ATTRIBUTE indicates that this property is projected as an attribute."}),"\n",(0,s.jsx)(t.li,{children:"XMLATTRIBUTE indicates that this property is projected as an attribute from the default XML namespace using the xml: prefix."}),"\n",(0,s.jsx)(t.li,{children:"CONTENT indicates that this property is the only element for this class and its value is projected with no enclosing tag as the class' value."}),"\n",(0,s.jsx)(t.li,{children:"ELEMENT indicates that this property is projected as an XML element or, in the case of a collection, a list of element with no wrapping tag."}),"\n",(0,s.jsx)(t.li,{children:"WRAPPED indicates that this property is projected as an XML element with an addtional wrapping tag or, in the case of a collection, a list of elements wrapped in a tag for the collection.\nThe XML projection will default to WRAPPED for a list or array collection property and ELEMENT for other public properties."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"COLLECTION is now deprecated and replaced by its synonym WRAPPED. ELEMENTREF value is now deprecated and replaced by the use of the XMLREF parameter."}),"\n",(0,s.jsx)(t.h3,{id:"xmlreference",children:"XMLREFERENCE"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter XMLREFERENCE As STRING [ Constraint = ",SUMMARY,COMPLETE,ID,OID,GUID", Flags = ENUM ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"How to project references to XML."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"SUMMARY indicates that only the summary properies of the referenced class are used to represent the reference. SUMMARY is the default. Note that by default all properties are of the referenced class are in the summary.\nCOMPLETE indicates that all properties of the referenced class are used to represent the reference.  ID indicates that the id of a persistent or serial class is used to represent the reference.  OID indicates that the oid of a persistent or serial class is used to represent the reference. The form of the oid will be classname,id.  GUID indicates that the GUID of a persistent class is used to represent the reference."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"xmltypeconstraint",children:"XMLTYPECONSTRAINT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter XMLTYPECONSTRAINT As STRING [ Constraint = ",EXPLICIT,CHOICE,SUBSTITUTIONGROUP", Flags = ENUM ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"How to interpret the type of this property."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"EXPLICIT indicates that only this property's explicitly specified type in XML will be projected to XML.\nCHOICE indicates that the schema for this property uses the XML schema choice group to allow multiple XML types for this property. The classes for these types are specified by the XMLCHOICELIST parameter or are all subclasses of this property's type if no XMLCHOICELIST parameter.  SUBSTITUTIONGROUP indicates that the schema for this property uses the XML schema substituionGroup to allow multiple XML types for this property. The classes for these types are all subclasses of this property's type."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"xmlitemname",children:"XMLITEMNAME;"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter XMLITEMNAME;\n"})}),"\n",(0,s.jsx)(t.p,{children:"The XML name for a collection item."}),"\n",(0,s.jsx)(t.h3,{id:"xmlkeyname",children:"XMLKEYNAME;"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter XMLKEYNAME;\n"})}),"\n",(0,s.jsx)(t.p,{children:"The XML name for the array key of a collection item."}),"\n",(0,s.jsx)(t.h3,{id:"xmlchoicelist",children:"XMLCHOICELIST"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter XMLCHOICELIST As CLASSNAME [ Flags = LIST ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"A comma-separated list of class names for XMLPROJECTION = CHOICE, ELEMENT-CHOICE or WRAPPED-CHOICE."}),"\n",(0,s.jsx)(t.h3,{id:"xmlio",children:"XMLIO"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter XMLIO As STRING [ Constraint = ",INOUT,IN,OUT,CALC", Flags = ENUM ];\n'})}),"\n",(0,s.jsx)(t.p,{children:'Controls whether input and/or output XML projections are done for this property. Default is "INOUT". Other possible values are "IN", "OUT", "CALC" Calculated properties default to CALC which is like OUT except input is ignored instead of generating an error.'}),"\n",(0,s.jsx)(t.h3,{id:"xmlelementref",children:"XMLELEMENTREF"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter XMLELEMENTREF As BOOLEAN [ Deprecated ];\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Specified as true (1) if this property comes from an XML schema reference to a globally defined element.",(0,s.jsx)(t.br,{}),"\nThis parameter is deprecated and has been replaced by XMLREF."]}),"\n",(0,s.jsx)(t.h3,{id:"xmlref",children:"XMLREF"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter XMLREF As BOOLEAN;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Specified as true (1) if this property comes from an XML schema reference to a globally defined element or attribute.",(0,s.jsx)(t.br,{}),"\nThis parameter is ignored for direct use of XMLExport -- it is only available for use by %XML.Writer or SOAP support."]}),"\n",(0,s.jsx)(t.h3,{id:"refnamespace",children:"REFNAMESPACE"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter REFNAMESPACE As STRING;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If XMLREF is true, then REFNAMESPACE is the XML namespace that contains the global element or attribute. However, if the default XML namespace is to be used (the XML namespace of the containing class for primitive types and the actual XML namespaces for complex types), then this parameter may be omitted.",(0,s.jsx)(t.br,{}),"\nThis parameter is ignored for direct use of XMLExport -- it is only available for use by %XML.Writer or SOAP support."]}),"\n",(0,s.jsx)(t.h3,{id:"refelementqualified",children:"REFELEMENTQUALIFIED"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter REFELEMENTQUALIFIED As BOOLEAN;\n"})}),"\n",(0,s.jsx)(t.p,{children:'If XMLREF is true, then REFELEMENTQUALIFIED is true if the XML namespace that contains the global element has elementFormDefault as "qualified" in its schema. If not specified, this parameter defaults to the value of ELEMENTQUALIFIED for the class.'}),"\n",(0,s.jsx)(t.p,{children:"This parameter is ignored for direct use of XMLExport -- it is only available for use by %XML.Writer or SOAP support."}),"\n",(0,s.jsx)(t.h3,{id:"elementqualified",children:"ELEMENTQUALIFIED"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter ELEMENTQUALIFIED As BOOLEAN;\n"})}),"\n",(0,s.jsxs)(t.p,{children:['The property parameter ELEMENTQUALIFIED may be used to override the ELEMENTQUALFIED parameter of the class. The expected use of the ELEMENTQUALIFIED property parameter is to support the form="[un]qualified" schema construct which allows an indiviual elemnt to be qualified differently that other elements of the class.',(0,s.jsx)(t.br,{}),"\nELEMENTQUALIFIED will be ignored if XMLREF=1. REFELEMENTQUALIFIED should be used in that case."]}),"\n",(0,s.jsx)(t.h3,{id:"xmlpattern",children:"XMLPATTERN"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter XMLPATTERN As STRING;\n"})}),"\n",(0,s.jsx)(t.p,{children:"XMLPATTERN is a placeholder used to document the pattern facet of XML Schema types. No runtime behavior is currently implemented to support the pattern facet semantics. The XMLPATTERN is only used to include the pattern facet in schemas geenrated based on the class."}),"\n",(0,s.jsx)(t.h3,{id:"xmlstreammode",children:"XMLSTREAMMODE"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter XMLSTREAMMODE As STRING [ Constraint = ",BLOCK,LINE", Flags = ENUM ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"Controls the line ending behavior for a character stream property."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:'If XMLSTREAMMODE="block" (the default), the normalized XML data is copied unchanged to the stream.\nIf XMLSTREAMMODE="line", the XML data is broken into lines separated by the streams LineTerminator sequence.'}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"xmlnil",children:"XMLNIL"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter XMLNIL As STRING [ Constraint = ",0,1", Flags = ENUM ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"The XMLNIL property parameter controls the use for a property of the xsi:nil attribute by XMLExport and the nillable attribute by XMLSchema."}),"\n",(0,s.jsxs)(t.p,{children:['If XMLNIL=1, then properties of the class with value = "" (null) are XMLExported in the format ',(0,s.jsx)(t.propname,{"xsi:nil":"true",children:"."})]}),"\n",(0,s.jsxs)(t.p,{children:['The exception is that string properties with value = "" are always exported as ',(0,s.jsx)(t.propname,{children:" if the class parameter XMLIGNORENULL=1 even if XMLNIL=1."})]}),"\n",(0,s.jsx)(t.p,{children:"The XMLNIL property parameter overrides the XMLNIL class parameter for the property where it is specified."}),"\n",(0,s.jsx)(t.h3,{id:"xmlnilnoobject",children:"XMLNILNOOBJECT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter XMLNILNOOBJECT As STRING [ Constraint = ",0,1", Flags = ENUM ];\n'})}),"\n",(0,s.jsxs)(t.p,{children:['The XMLNILNOOBJECT parameter allows creation of an object to be skipped for elements with xsi:nil="true".',(0,s.jsx)(t.br,{}),'\nThe default of XMLNILNOOBJECT = 0 will always create an object for an element with xsi:nil="true".',(0,s.jsx)(t.br,{}),'\nIf XMLNILNOOBJECT = 1, then elements with xsi:nil="true" and no attributes specified will be skipped, i.e. the value of the property will remain "".',(0,s.jsx)(t.br,{}),"\nThe XMLNILNOOBJECT property parameter overrides the XMLNILNOOBJECT class parameter for the property where it is specified."]})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>l});var s=r(96540);const a={},n=s.createContext(a);function i(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);