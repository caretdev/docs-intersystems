"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[82858],{95788:(e,s,r)=>{r.r(s),r.d(s,{contentTitle:()=>c,default:()=>o,frontMatter:()=>i,toc:()=>a});var t=r(74848),n=r(28453);const i={pagination_prev:null,pagination_next:null},c="%DeepSee.Query.memberSpec",a=[{value:"Properties",id:"properties",level:2},{value:"spec",id:"spec",level:3},{value:"%member",id:"member",level:3},{value:"%resolvedSpec",id:"resolvedspec",level:3},{value:"%resolvedQuoted",id:"resolvedquoted",level:3},{value:"%memberKeys",id:"memberkeys",level:3},{value:"Methods",id:"methods",level:2},{value:"%ResolveValue",id:"resolvevalue",level:3},{value:"%ToString",id:"tostring",level:3},{value:"%GetType",id:"gettype",level:3},{value:"%GetMemberProvider",id:"getmemberprovider",level:3},{value:"%PreProcess",id:"preprocess",level:3},{value:"%ProcessAxes",id:"processaxes",level:3},{value:"%ProcessFilter",id:"processfilter",level:3},{value:"%SpecToMember",id:"spectomember",level:3},{value:"%ConstructMemberSpec",id:"constructmemberspec",level:3},{value:"%GetMemberDisplayValues",id:"getmemberdisplayvalues",level:3},{value:"%IsEnabled",id:"isenabled",level:3}];function l(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"deepseequerymemberspec",children:"%DeepSee.Query.memberSpec"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %DeepSee.Query.memberSpec Extends group [ System = 3 ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["This class defines a member specification within a DeepSee query.",(0,t.jsx)(s.br,{}),'\nA member specification defines a specific member from a dimension such as "[Product]", "[Product].[Name]", or "[Location}.[Boston]".',(0,t.jsx)(s.br,{}),"\nA set of members may be grouped within a single tuple or a single member may exist stand-alone.",(0,t.jsx)(s.br,{}),"\nEvery memberSpec has a corresponding member object that implements any operations needed to be run against the member, such as getting a list of dimension members for a given member."]}),"\n",(0,t.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(s.h3,{id:"spec",children:"spec"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property spec As %DeepSee.Datatype.string(MAXLEN = 32000, XMLPROJECTION = "attribute");\n'})}),"\n",(0,t.jsx)(s.p,{children:"Specification string for this member. This is text from the query."}),"\n",(0,t.jsx)(s.h3,{id:"member",children:"%member"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %member As %DeepSee.Query.member(XMLPROJECTION = "none");\n'})}),"\n",(0,t.jsx)(s.p,{children:"Member object that provides the member API for this member. This is created during the pre-processing phase."}),"\n",(0,t.jsx)(s.h3,{id:"resolvedspec",children:"%resolvedSpec"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %resolvedSpec As %String(XMLPROJECTION = "none") [ Internal, MultiDimensional ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"This array holds our member spec *after* it has been resolved."}),"\n",(0,t.jsx)(s.h3,{id:"resolvedquoted",children:"%resolvedQuoted"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %resolvedQuoted As %String(XMLPROJECTION = "none") [ Internal, MultiDimensional ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"This array holds a list of which items in the resolved list are quoted."}),"\n",(0,t.jsx)(s.h3,{id:"memberkeys",children:"%memberKeys"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %memberKeys As %String(XMLPROJECTION = "none") [ Internal, MultiDimensional ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"Resolved member keys, if any."}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"resolvevalue",children:"%ResolveValue"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ResolveValue() As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Break our spec into it constituent parts.",(0,t.jsx)(s.br,{}),"\nIf the spec contains named parameters, resolve them.",(0,t.jsx)(s.br,{}),"\nWe do this as soon as we are first asked for our value and then we hold onto the resolved value."]}),"\n",(0,t.jsx)(s.h3,{id:"tostring",children:"%ToString"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ToString(Output pSC As %Status) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Convert this node to its text representation."}),"\n",(0,t.jsx)(s.h3,{id:"gettype",children:"%GetType"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %GetType() As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return type of this node."}),"\n",(0,t.jsx)(s.h3,{id:"getmemberprovider",children:"%GetMemberProvider"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %GetMemberProvider() As %DeepSee.Query.member\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return the member provider object associated with this node."}),"\n",(0,t.jsx)(s.h3,{id:"preprocess",children:"%PreProcess"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %PreProcess(pIsSlicer As %Boolean = 0) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Execute the pre-processing logic for this node."}),"\n",(0,t.jsx)(s.h3,{id:"processaxes",children:"%ProcessAxes"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ProcessAxes(pCube As %String, pKey As %String, ByRef pNodeNo As %Integer, Output pNewNodeNo As %Integer, pParent As %Integer, pVisible As %Boolean = 1) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Execute and build the axes output for this tuple."}),"\n",(0,t.jsx)(s.h3,{id:"processfilter",children:"%ProcessFilter"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ProcessFilter(ByRef pFilterTree As %List, pCube As %String, ByRef pNodeNo As %Integer, Output pNewNodeNo As %Integer, pParent As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Process the filter output for this tuple"}),"\n",(0,t.jsx)(s.h3,{id:"spectomember",children:"%SpecToMember"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %SpecToMember(ByRef pSpec, ByRef pQuoted, ByRef pMemberKey, Output pMember As %DeepSee.Query.member) As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Parse the given member spec and create a member API object from it.",(0,t.jsx)(s.br,{}),'\nA member spec is of the form "A.B.C"; it is passed via the array pSpec: pSpec(1)=A, etc.',(0,t.jsx)(s.br,{}),"\nThe array pQuoted indicates whether a part of the spec is a quoted identifier (and thus cannot be a function).",(0,t.jsx)(s.br,{}),"\nThe array pMemberKey indicates whether a part of the spec is member key (e.g., &2007).",(0,t.jsx)(s.br,{}),"\nOn return pMember contains the member provider object that can be used to process the member.",(0,t.jsx)(s.br,{}),"\nWe assume that if the spec contained a function it was already removed before this point."]}),"\n",(0,t.jsx)(s.h3,{id:"constructmemberspec",children:"%ConstructMemberSpec"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ConstructMemberSpec(pSpec As %String, Output pMemberSpec As %DeepSee.Query.memberSpec) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Given a member spec, create a memberSpec object that can be used to access members."}),"\n",(0,t.jsx)(s.h3,{id:"getmemberdisplayvalues",children:"%GetMemberDisplayValues"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method %GetMemberDisplayValues(pCubeName As %String = "", Output pLevelName = "", Output pMemberName = "") As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"Retrieve the display names for the level and member of a memberSpec object. This is used for converting a logical node in a query object to values suitable for use in the user interface."}),"\n",(0,t.jsx)(s.h3,{id:"isenabled",children:"%IsEnabled"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method %IsEnabled(pCube As %String = "", Output pStatus As %Status = {$$$OK}, Output pReason As %String = "") As %Boolean\n'})}),"\n",(0,t.jsx)(s.p,{children:"Test this node to make sure all data referenced by the spec is enabled in this cube."})]})}function o(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>c,x:()=>a});var t=r(96540);const n={},i=t.createContext(n);function c(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);