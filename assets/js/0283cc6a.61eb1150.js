"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[98755],{41666:(e,n,s)=>{s.r(n),s.d(n,{contentTitle:()=>d,default:()=>o,frontMatter:()=>l,toc:()=>i});var t=s(74848),a=s(28453);const l={pagination_prev:null,pagination_next:null},d="%ZEN.Component.dynaTree",i=[{value:"Parameters",id:"parameters",level:2},{value:"IMAGEEXPANDED;",id:"imageexpanded",level:3},{value:"IMAGECONTRACTED;",id:"imagecontracted",level:3},{value:"IMAGEFOLDEROPEN",id:"imagefolderopen",level:3},{value:"IMAGEFOLDERCLOSED",id:"imagefolderclosed",level:3},{value:"IMAGENODE",id:"imagenode",level:3},{value:"Properties",id:"properties",level:2},{value:"selectedIndex",id:"selectedindex",level:3},{value:"childIndent",id:"childindent",level:3},{value:"imageExpanded",id:"imageexpanded-1",level:3},{value:"imageContracted",id:"imagecontracted-1",level:3},{value:"imageFolderOpen",id:"imagefolderopen-1",level:3},{value:"imageFolderClosed",id:"imagefolderclosed-1",level:3},{value:"imageNode",id:"imagenode-1",level:3},{value:"showLines",id:"showlines",level:3},{value:"showFolders",id:"showfolders",level:3},{value:"onclick",id:"onclick",level:3},{value:"ondblclick",id:"ondblclick",level:3},{value:"onchange",id:"onchange",level:3},{value:"text",id:"text",level:3},{value:"value",id:"value",level:3},{value:"parameters",id:"parameters-1",level:3},{value:"nodeCount",id:"nodecount",level:3},{value:"OnGetNodeInfo",id:"ongetnodeinfo",level:3},{value:"OnGetTreeInfo",id:"ongettreeinfo",level:3},{value:"dataGlobal",id:"dataglobal",level:3},{value:"XDatas",id:"xdatas",level:2},{value:"Style",id:"style",level:3},{value:"Methods",id:"methods",level:2},{value:"%GetImageDirectory",id:"getimagedirectory",level:3},{value:"%DrawHTML",id:"drawhtml",level:3},{value:"%BuildTreeData",id:"buildtreedata",level:3},{value:"%DrawTree",id:"drawtree",level:3},{value:"%DrawNode",id:"drawnode",level:3},{value:"dragStartHandler",id:"dragstarthandler",level:3},{value:"%TestCallback",id:"testcallback",level:3},{value:"%GetTreeInfo",id:"gettreeinfo",level:3},{value:"%GetNodeInfo",id:"getnodeinfo",level:3},{value:"%BuildTreeFromGlobal",id:"buildtreefromglobal",level:3},{value:"selectItem",id:"selectitem",level:3},{value:"itemClicked",id:"itemclicked",level:3},{value:"itemMouseDown",id:"itemmousedown",level:3},{value:"itemMouseUp",id:"itemmouseup",level:3},{value:"itemDblClicked",id:"itemdblclicked",level:3},{value:"itemKeyPress",id:"itemkeypress",level:3},{value:"toggleExpanded",id:"toggleexpanded",level:3},{value:"isNodeExpanded",id:"isnodeexpanded",level:3},{value:"reloadNode",id:"reloadnode",level:3},{value:"LoadSubTree",id:"loadsubtree",level:3},{value:"getExpandoImage",id:"getexpandoimage",level:3},{value:"expandAll",id:"expandall",level:3},{value:"setNodeText",id:"setnodetext",level:3},{value:"getNodeText",id:"getnodetext",level:3},{value:"getNodeParent",id:"getnodeparent",level:3},{value:"setNodeValue",id:"setnodevalue",level:3},{value:"getValue",id:"getvalue",level:3},{value:"getNodeValue",id:"getnodevalue",level:3},{value:"getSelectedIndex",id:"getselectedindex",level:3},{value:"setNodeStyle",id:"setnodestyle",level:3},{value:"setProperty",id:"setproperty",level:3}];function r(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"zencomponentdynatree",children:"%ZEN.Component.dynaTree"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Class %ZEN.Component.dynaTree Extends component [ Deprecated, System = 3 ]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This component draws an HTML tree control based on executing a user-provided callback method.",(0,t.jsx)(n.br,{}),"\nThere are several ways that you can provide data for the tree control:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Using the OnGetNodeInfo callback to get data for each node within the tree."}),"\n",(0,t.jsx)(n.li,{children:"Using the dataGlobal property to use data stored within a global to supply the contents of the tree."}),"\n",(0,t.jsx)(n.li,{children:"Using the OnGetTreeInfo callback to fill in a local array that supplies the contents of the tree."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(n.h3,{id:"imageexpanded",children:"IMAGEEXPANDED;"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter IMAGEEXPANDED;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Default url of image used for expanded tree node. This is only used when showLines is false."}),"\n",(0,t.jsx)(n.h3,{id:"imagecontracted",children:"IMAGECONTRACTED;"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter IMAGECONTRACTED;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Default url of image used for contracted tree node. This is only used when showLines is false."}),"\n",(0,t.jsx)(n.h3,{id:"imagefolderopen",children:"IMAGEFOLDEROPEN"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Parameter IMAGEFOLDEROPEN = "folderopen.gif";\n'})}),"\n",(0,t.jsx)(n.p,{children:"Default url of image used for open folder nodes."}),"\n",(0,t.jsx)(n.h3,{id:"imagefolderclosed",children:"IMAGEFOLDERCLOSED"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Parameter IMAGEFOLDERCLOSED = "folderclosed.gif";\n'})}),"\n",(0,t.jsx)(n.p,{children:"Default url of image used for closed folder nodes."}),"\n",(0,t.jsx)(n.h3,{id:"imagenode",children:"IMAGENODE"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Parameter IMAGENODE = "node.gif";\n'})}),"\n",(0,t.jsx)(n.p,{children:"Default url of image used for a leaf node in the tree."}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(n.h3,{id:"selectedindex",children:"selectedIndex"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property selectedIndex As %ZEN.Datatype.integer [ InitialExpression = -1 ];\n"})}),"\n",(0,t.jsx)(n.p,{children:"Index (0-based) of current selected tree node."}),"\n",(0,t.jsx)(n.h3,{id:"childindent",children:"childIndent"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property childIndent As %ZEN.Datatype.length [ InitialExpression = 20 ];\n"})}),"\n",(0,t.jsx)(n.p,{children:"Specifies amount child nodes should be indented. This value is only applied when showLines is false."}),"\n",(0,t.jsx)(n.h3,{id:"imageexpanded-1",children:"imageExpanded"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property imageExpanded As %ZEN.Datatype.uri;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["url of image used for expanded tree nodes (when showLines is false).",(0,t.jsx)(n.br,{}),"\nIf you set this, make sure you also set imageContracted."]}),"\n",(0,t.jsx)(n.h3,{id:"imagecontracted-1",children:"imageContracted"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property imageContracted As %ZEN.Datatype.uri;\n"})}),"\n",(0,t.jsx)(n.p,{children:"url of image used for contracted tree node (when showLines is false)."}),"\n",(0,t.jsx)(n.h3,{id:"imagefolderopen-1",children:"imageFolderOpen"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property imageFolderOpen As %ZEN.Datatype.uri;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["url of image used for an open folder node in the tree.",(0,t.jsx)(n.br,{}),"\nIf not specified, a default image is supplied."]}),"\n",(0,t.jsx)(n.h3,{id:"imagefolderclosed-1",children:"imageFolderClosed"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property imageFolderClosed As %ZEN.Datatype.uri;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["url of image used for a closed folder node in the tree.",(0,t.jsx)(n.br,{}),"\nIf not specified, a default image is supplied."]}),"\n",(0,t.jsx)(n.h3,{id:"imagenode-1",children:"imageNode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property imageNode As %ZEN.Datatype.uri;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["url of image used for a leaf node in the tree.",(0,t.jsx)(n.br,{}),"\nIf not specified, a default image is supplied."]}),"\n",(0,t.jsx)(n.h3,{id:"showlines",children:"showLines"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property showLines As %ZEN.Datatype.boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsx)(n.p,{children:"If true, show dashed lines (as a series of images) between the nodes of the tree."}),"\n",(0,t.jsx)(n.h3,{id:"showfolders",children:"showFolders"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property showFolders As %ZEN.Datatype.boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If true and showLines is false, display open and closed folder icons as well as icons for each node in the tree. The default is true.",(0,t.jsx)(n.br,{}),"\nIf showLines is true, this property is ignored."]}),"\n",(0,t.jsx)(n.h3,{id:"onclick",children:"onclick"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property onclick As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,t.jsx)(n.p,{children:"onclick event handler: If defined, this event is fired when the user clicks on an item"}),"\n",(0,t.jsx)(n.h3,{id:"ondblclick",children:"ondblclick"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property ondblclick As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,t.jsx)(n.p,{children:"ondblclick event handler: If defined, this event is fired when the user double-clicks on an item"}),"\n",(0,t.jsx)(n.h3,{id:"onchange",children:"onchange"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property onchange As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,t.jsx)(n.p,{children:"onchange event handler: If defined, this event is fired when the user changes the value of this component."}),"\n",(0,t.jsx)(n.h3,{id:"text",children:"text"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Property text As %ZEN.Datatype.string(XMLPROJECTION = "none");\n'})}),"\n",(0,t.jsx)(n.p,{children:"Text (display) value of current item within the view. Do not access this directly; use getProperty('text') instead."}),"\n",(0,t.jsx)(n.h3,{id:"value",children:"value"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Property value As %ZEN.Datatype.string(XMLPROJECTION = "none");\n'})}),"\n",(0,t.jsx)(n.p,{children:"Logical value of current item within the view. Do not access this directly; use getProperty('value') instead."}),"\n",(0,t.jsx)(n.h3,{id:"parameters-1",children:"parameters"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Property parameters As array Of %ZEN.Auxiliary.parameter(XMLKEYNAME = "paramName", XMLNAME = "parameter", XMLPROJECTION = "ELEMENT");\n'})}),"\n",(0,t.jsx)(n.p,{children:"User-defined set of parameters. These values are passed on to the user callback function that provides the contents of this view. Typically this is used to hold search parameters."}),"\n",(0,t.jsx)(n.h3,{id:"nodecount",children:"nodeCount"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Property nodeCount As %ZEN.Datatype.integer(XMLPROJECTION = "none", ZENSETTING = 0) [ InitialExpression = 0 ];\n'})}),"\n",(0,t.jsx)(n.p,{children:"This is used to keep track of how many nodes are in this tree."}),"\n",(0,t.jsx)(n.h3,{id:"ongetnodeinfo",children:"OnGetNodeInfo"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Property OnGetNodeInfo As %ZEN.Datatype.delegator(FORMALSPEC = "*tSC:%Status,&tParameters:%String,pLevel:%Integer,&pHandle:%String,pNodeInfo:%ZEN.Auxiliary.NodeInfo", RETURNTYPE = "%Boolean");\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Name of Server-side callback method to call to get information for each node of this tree.",(0,t.jsx)(n.br,{}),"\nThis must be the name of a server-only method in the page class that contains this component."]}),"\n",(0,t.jsx)(n.h3,{id:"ongettreeinfo",children:"OnGetTreeInfo"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Property OnGetTreeInfo As %ZEN.Datatype.delegator(FORMALSPEC = "pRoot:%String,*pTree:%List,&tParameters:%String", RETURNTYPE = "%Status");\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Name of Server-side callback method to call to get information for the entire contents of the tree.",(0,t.jsx)(n.br,{}),"\nThis is a lower-level callback than the OnGetNodeInfo callback. It lets you define the contents of the entire tree using a multi-dimensional array.",(0,t.jsx)(n.br,{}),"\nIf this is defined then the OnGetNodeInfo callback is not used.",(0,t.jsx)(n.br,{}),"\nThis must be the name of a server-only method in the page class that contains this component.",(0,t.jsx)(n.br,{}),"\nThe callback method should be similar to this: ",(0,t.jsx)(n.code,{children:'ClassMethod GetTreeInfo(pRoot As %String, Output pTree, ByRef pParms) As %Status { #; top-most nodes are children of 0 Set pTree(0,"ch",1) = "" Set pTree(0,"ch",2) = "" Set pTree(0,"ch",3) = "" #; each node supplies: $LB(caption, value, hasChildren, link, expanded, icon, tooltip, style) Set pTree(1) = $LB("Animal",1,1,"",1) Set pTree(2) = $LB("Mineral",2,1,"",1) Set pTree(3) = $LB("Vegetable",3,1,"",1) #; child nodes are placed under "ch" Set pTree(1,"ch",4) = "" Set pTree(4) = $LB("Cow",4,0,"",1) Quit $$$OK }'})]}),"\n",(0,t.jsx)(n.h3,{id:"dataglobal",children:"dataGlobal"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property dataGlobal As %ZEN.Datatype.glvn;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If defined, and there is no user-defined OnGetNodeInfo callback method, then this is the name of a global that is used to provide the contents of this tree.",(0,t.jsx)(n.br,{}),"\nThe global takes the form:",(0,t.jsx)(n.br,{}),'\n^glvn("A","B") = URL',(0,t.jsx)(n.br,{}),"\nThe global subscripts define the node names; The URL value is a link that is used when the user clicks on the node."]}),"\n",(0,t.jsx)(n.h2,{id:"xdatas",children:"XDatas"}),"\n",(0,t.jsx)(n.h3,{id:"style",children:"Style"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"XData Style\n"})}),"\n",(0,t.jsx)(n.p,{children:"defines style sheet used by this component."}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"getimagedirectory",children:"%GetImageDirectory"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod %GetImageDirectory() As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Return the directory from which built-in images are supplied."}),"\n",(0,t.jsx)(n.h3,{id:"drawhtml",children:"%DrawHTML"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method %DrawHTML()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Draw HTML for this component."}),"\n",(0,t.jsx)(n.h3,{id:"buildtreedata",children:"%BuildTreeData"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method %BuildTreeData(ByRef pTree) As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Construct an array that describes the contents of the tree. This is a graph of the form:",(0,t.jsx)(n.br,{}),"\npTree(n) = $LB(text,value,haschildren,link,expanded,icon,tooltip,style)",(0,t.jsx)(n.br,{}),'\npTree(n,"ch",childn) = ""',(0,t.jsx)(n.br,{}),"\nTop-most nodes are in:",(0,t.jsx)(n.br,{}),'\npTree(0,"ch",topchildn) = ""']}),"\n",(0,t.jsx)(n.h3,{id:"drawtree",children:"%DrawTree"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Method %DrawTree(ByRef pTree, pLevel As %Integer = 1, pParentNode As %Integer = 0, pStateList As %String = "") [ Internal ]\n'})}),"\n",(0,t.jsx)(n.p,{children:"Draw HTML to display the given tree graph."}),"\n",(0,t.jsx)(n.h3,{id:"drawnode",children:"%DrawNode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method %DrawNode(ByRef pTree, pNode As %Integer, pOffset As %Integer, pLevel As %Integer, ByRef pState, pParentNode As %Integer) [ Internal ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Draw HTML to display a given node in the tree graph. pState contains state info for each level of the tree: 0 no siblings; 1 prev sibling only; 2 both siblings; 3 next sibling only."}),"\n",(0,t.jsx)(n.h3,{id:"dragstarthandler",children:"dragStartHandler"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod dragStartHandler(dragData) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Built-in drag handler for tree component. Let the user drag the selected node."}),"\n",(0,t.jsx)(n.h3,{id:"testcallback",children:"%TestCallback"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod %TestCallback(pClass As %String, pMethod As %String) [ Internal ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is a test method that is used to test the dynaTree component."}),"\n",(0,t.jsx)(n.h3,{id:"gettreeinfo",children:"%GetTreeInfo"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method %GetTreeInfo(pRoot As %String, Output pTree, ByRef pParms) As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This callback gets information used to get the contents of the entire tree.",(0,t.jsx)(n.br,{}),"\nThis should return a graph of the form:",(0,t.jsx)(n.br,{}),"\npTree(n) = $LB(text,value,link,expanded,icon)",(0,t.jsx)(n.br,{}),'\npTree(n,"ch",childno) = ""',(0,t.jsx)(n.br,{}),"\nTop-most nodes are in:",(0,t.jsx)(n.br,{}),'\npTree(0,"ch",topchildno) = ""',(0,t.jsx)(n.br,{}),"\nThe default implementation is to call the page method specified by the OnGetTreeInfo property."]}),"\n",(0,t.jsx)(n.h3,{id:"getnodeinfo",children:"%GetNodeInfo"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method %GetNodeInfo(Output tSC As %Status, pLevel As %Integer, ByRef pHandle As %String, pNodeInfo As %ZEN.Auxiliary.NodeInfo, ByRef pParms) As %Boolean [ Internal ]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This callback gets information used to draw the next node within the dynamic tree control.",(0,t.jsx)(n.br,{}),"\nThe default implementation is to call the page method specified by the OnGetNodeInfo property.",(0,t.jsx)(n.br,{}),"\nReturns true if there is a node at the current location/level else false."]}),"\n",(0,t.jsx)(n.h3,{id:"buildtreefromglobal",children:"%BuildTreeFromGlobal"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method %BuildTreeFromGlobal(Output tSC As %Status, ByRef pParams As %String, pLevel As %Integer, ByRef pHandle As %String, pNodeInfo As %ZEN.Auxiliary.NodeInfo) As %Boolean [ Internal, Private ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This method is used to provide contents of a tree from a user defined data global."}),"\n",(0,t.jsx)(n.h3,{id:"selectitem",children:"selectItem"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod selectItem(idx) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Select the given node within the tree. idx is index of node (0 based)."}),"\n",(0,t.jsx)(n.h3,{id:"itemclicked",children:"itemClicked"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod itemClicked(idx, level) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"User clicked on an item. idx is index of node (0 based). level is indentation level of node (0 based); this is passed on to the callback."}),"\n",(0,t.jsx)(n.h3,{id:"itemmousedown",children:"itemMouseDown"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod itemMouseDown(evt, idx) [ Internal, Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Mouse down handler for nodes."}),"\n",(0,t.jsx)(n.h3,{id:"itemmouseup",children:"itemMouseUp"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod itemMouseUp(evt) [ Internal, Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Mouse up handler for nodes."}),"\n",(0,t.jsx)(n.h3,{id:"itemdblclicked",children:"itemDblClicked"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod itemDblClicked(idx, level) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"User double-clicked on an item."}),"\n",(0,t.jsx)(n.h3,{id:"itemkeypress",children:"itemKeyPress"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod itemKeyPress(evt, idx, canExpand) [ Internal, Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"User pressed key within a node"}),"\n",(0,t.jsx)(n.h3,{id:"toggleexpanded",children:"toggleExpanded"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod toggleExpanded(nodeNo) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Toggle the current expanded state of a given node within the tree. nodeNo is the index number of the node (0-based)."}),"\n",(0,t.jsx)(n.h3,{id:"isnodeexpanded",children:"isNodeExpanded"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod isNodeExpanded(nodeNo) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This method returns the expanded state of a given nodeNo. true = expanded."}),"\n",(0,t.jsx)(n.h3,{id:"reloadnode",children:"reloadNode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod reloadNode(nodeNo) [ Language = javascript ]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Reload the child nodes of the given node. nodeNo is the index number of the node (0-based).",(0,t.jsx)(n.br,{}),"\nThis method does nothing if it called for a leaf node (a node without children).",(0,t.jsx)(n.br,{}),"\nThis method only works when the OnGetTreeInfo callback is used to supply the contents of the tree."]}),"\n",(0,t.jsx)(n.h3,{id:"loadsubtree",children:"LoadSubTree"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method LoadSubTree(pNodeNo As %Integer, pLevel As %Integer, pValue As %String, pState As %String) [ Internal, ZenMethod ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Internal method that is used to load a portion of the tree from the server."}),"\n",(0,t.jsx)(n.h3,{id:"getexpandoimage",children:"getExpandoImage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod getExpandoImage(src, expanded) [ Internal, Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Convert the given image url to either a expanded or contracted image."}),"\n",(0,t.jsx)(n.h3,{id:"expandall",children:"expandAll"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod expandAll(flag) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Expand (if flag is true) or contract (if flag is false) all nodes within the true; Does not invoke any callback methods."}),"\n",(0,t.jsx)(n.h3,{id:"setnodetext",children:"setNodeText"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod setNodeText(nodeNo, text) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Set the display value of a given node. nodeNo is the index number of the node (0-based)."}),"\n",(0,t.jsx)(n.h3,{id:"getnodetext",children:"getNodeText"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod getNodeText(nodeNo) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Get the display value of a given node. nodeNo is the index number of the node (0-based). If nodeNo is not provided use the current selected noded."}),"\n",(0,t.jsx)(n.h3,{id:"getnodeparent",children:"getNodeParent"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod getNodeParent(nodeNo) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Return the index number (0-based) of the parent of the specified node. nodeNo is the index number of the node (0-based)."}),"\n",(0,t.jsx)(n.h3,{id:"setnodevalue",children:"setNodeValue"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod setNodeValue(nodeNo, value) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Set the logical value of a given node. nodeNo is the index number of the node (0-based)."}),"\n",(0,t.jsx)(n.h3,{id:"getvalue",children:"getValue"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod getValue() [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Get the logical value of the current selected node."}),"\n",(0,t.jsx)(n.h3,{id:"getnodevalue",children:"getNodeValue"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod getNodeValue(nodeNo) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Get the logical value of a given node. nodeNo is the index number of the node (0-based). If nodeNo is not provided use the current selected noded."}),"\n",(0,t.jsx)(n.h3,{id:"getselectedindex",children:"getSelectedIndex"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod getSelectedIndex() [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Return the index number (0-based) of the current node. Return -1 if no node is selected."}),"\n",(0,t.jsx)(n.h3,{id:"setnodestyle",children:"setNodeStyle"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod setNodeStyle(nodeNo, style) [ Language = javascript ]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Set the css style for of a given node. style should contain css style declarations (e.g., 'color: red;')",(0,t.jsx)(n.br,{}),"\nnodeNo is the index number of the node (0-based)."]}),"\n",(0,t.jsx)(n.h3,{id:"setproperty",children:"setProperty"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod setProperty(property, value, value2) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Set the value of a named property."})]})}function o(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>i});var t=s(96540);const a={},l=t.createContext(a);function d(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);