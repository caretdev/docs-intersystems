"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[7032],{45936:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>i,default:()=>d,frontMatter:()=>r,toc:()=>a});var t=n(74848),o=n(28453);const r={pagination_prev:null,pagination_next:null},i="%MFT.Dropbox",a=[{value:"Methods",id:"methods",level:2},{value:"GetRequestId",id:"getrequestid",level:3},{value:"GetFolderInfo",id:"getfolderinfo",level:3},{value:"GetItemInfo",id:"getiteminfo",level:3},{value:"CreateItemInfo",id:"createiteminfo",level:3},{value:"GetUsername",id:"getusername",level:3},{value:"DeleteFolder",id:"deletefolder",level:3},{value:"CreateFolder",id:"createfolder",level:3},{value:"GetFolderContents",id:"getfoldercontents",level:3},{value:"GetFileInfo",id:"getfileinfo",level:3},{value:"DeleteFile",id:"deletefile",level:3},{value:"UploadFile",id:"uploadfile",level:3},{value:"UploadStream",id:"uploadstream",level:3},{value:"DownloadFile",id:"downloadfile",level:3},{value:"DownloadStream",id:"downloadstream",level:3},{value:"ShareFolder",id:"sharefolder",level:3},{value:"UnshareFolder",id:"unsharefolder",level:3},{value:"UnshareFolderAll",id:"unsharefolderall",level:3},{value:"MountFolder",id:"mountfolder",level:3},{value:"UnmountFolder",id:"unmountfolder",level:3},{value:"GetMountableFolder",id:"getmountablefolder",level:3},{value:"GetSharedFolderId",id:"getsharedfolderid",level:3},{value:"UnshareFileAll",id:"unsharefileall",level:3},{value:"CreateUser",id:"createuser",level:3},{value:"DeleteUserById",id:"deleteuserbyid",level:3},{value:"DeleteUser",id:"deleteuser",level:3},{value:"DeleteUserCommon",id:"deleteusercommon",level:3},{value:"GetUserById",id:"getuserbyid",level:3},{value:"GetUser",id:"getuser",level:3},{value:"GetUserInfo",id:"getuserinfo",level:3},{value:"GetUserList",id:"getuserlist",level:3},{value:"CreateUserInfo",id:"createuserinfo",level:3}];function l(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"mftdropbox",children:"%MFT.Dropbox"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %MFT.Dropbox Extends %MFT.API [ System = 4 ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The %MFT.Dropbox class is the subclass of %MFT.API which implements the APIs using Dropbox.",(0,t.jsx)(s.br,{}),"\nNOTE: Two different kinds of Dropbox applications (and hence two different %SYS.MFT.Connection.Dropbox objects) are needed in order to use the full API in this class. A connection based on a Dropbox User application with Full Dropbox permission is needed to manage files and folders. A connection based on a Dropbox Business application with Team Memeber Management permission is needed to manage users."]}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"getrequestid",children:"GetRequestId"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetRequestId(connection As %SYS.MFT.Connection.Dropbox, itemInfo As %MFT.ItemInfo) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:'Get the form of id for a file or folder that is most efficient for subsequent calls. GetRequestId will return either an id of the form "id:" or a full path depending on which is more efficient. This method is included to allow the id for future requests to be saved in the most efficient form.'}),"\n",(0,t.jsx)(s.h3,{id:"getfolderinfo",children:"GetFolderInfo"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetFolderInfo(connection As %SYS.MFT.Connection.Dropbox, path As %String, Output itemInfo As %MFT.ItemInfo) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:['Return the item info object which describes the specified folder. path may be a folder path. path may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object. "" May be used as the path to specify the current folder. If a folder does not exist at the specified path, then $$$OK is returned as status and itemInfo is returned as "".',(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"getiteminfo",children:"GetItemInfo"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetItemInfo(connection As %SYS.MFT.Connection.Dropbox, itemPath As %String, Output itemInfo As %MFT.ItemInfo) As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:['Return the item info object which describes the specified file or folder. "" May be used as the itemPath to specify the current folder.',(0,t.jsx)(s.br,{}),'\nIf an item does not exist at the specified path, then $$$OK is returned as status and itemInfo is returned as "".',(0,t.jsx)(s.br,{}),"\n%MFT.Dropbox only supports the file's owner getting information about a file.",(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"createiteminfo",children:"CreateItemInfo"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateItemInfo(response As %DynamicObject) As %MFT.ItemInfo [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Create an ItemInfo object from a Dropbox response"}),"\n",(0,t.jsx)(s.h3,{id:"getusername",children:"GetUsername"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetUsername(connection As %SYS.MFT.Connection.Dropbox, internalId As %String, Output username As %String) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Get the external username that corresponds to the specified internal user id. This call only works for files, since Dropbox does not return id of the last user that modified.",(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"deletefolder",children:"DeleteFolder"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DeleteFolder(connection As %SYS.MFT.Connection.Dropbox, path As %String, permanent As %Boolean = 0) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:['Delete the remote folder. path may be a folder path. path may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object.',(0,t.jsx)(s.br,{}),"\nIf permanent is true, then the folder will be permanently deleted. Otherwise the folder will be moved to trash.",(0,t.jsx)(s.br,{}),"\nThe permanent argument is not yet implemented for Dropbox because using the permanently_delete API call requires a different type of connection than that used for files, folders or users. Dropbox support indicates that permanently_delete may be supported in the future for file API.",(0,t.jsx)(s.br,{}),"\nIf the remote folder does not exist at the specified path, then $$$OK is returned as status.",(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"createfolder",children:"CreateFolder"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateFolder(connection As %SYS.MFT.Connection.Dropbox, folderPath As %String, Output itemInfo As %MFT.ItemInfo) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Creates the remote folder at the specified folderPath. Each level of the folder path should be created separately if it does not already exist. An %MFT.ItemInfo object is returned for the new folder.",(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"getfoldercontents",children:"GetFolderContents"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetFolderContents(connection As %SYS.MFT.Connection.Dropbox, folderPath As %String, recursive As %Boolean = 0, Output folderContents As %MFT.FolderContents) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:['Return the folder contents object for the specified folder. folderPath may be a folder path. folderPath may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object. "" May be used as the folderPath to specify the current folder. The FolderContents object will include a list of %MFT.ItemInfo objects which contain a file or folder name and some additional simple information.',(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"getfileinfo",children:"GetFileInfo"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetFileInfo(connection As %SYS.MFT.Connection.Dropbox, path As %String, Output itemInfo As %MFT.ItemInfo) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:['Return the item info object which describes the specified file. path may be a file path. path may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object. If a file does not exist at the specified path, then $$$OK is returned as status and itemInfo is returned as "".',(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"deletefile",children:"DeleteFile"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DeleteFile(connection As %SYS.MFT.Connection.Dropbox, path As %String, permanent As %Boolean = 0) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:['Delete the remote file. path may be a file path. path may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object.',(0,t.jsx)(s.br,{}),"\nIf permanent is true, then the file will be permanently deleted. Otherwise the file will be moved to trash.",(0,t.jsx)(s.br,{}),"\nThe permanent argument is not yet implemented for Dropbox because using the permanently_delete API call requires a different type of connection than that used for files, folders or users. Dropbox support indicates that permanently_delete may be supported in the future for file API.",(0,t.jsx)(s.br,{}),"\nIf the remote file does not exist at the specified path, then $$$OK is returned as status.",(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"uploadfile",children:"UploadFile"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UploadFile(connection As %SYS.MFT.Connection.Dropbox, localFilePath As %String, filePath As %String, replace As %Boolean = 0, Output itemInfo As %MFT.ItemInfo) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Update the specified remote file with the contents of the specified local file. filePath must be a file path. An id may not be specified. If replace is true, then an existing file of the same name will be replaced. The default is to return an error if a replacement is attempted.",(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"uploadstream",children:"UploadStream"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UploadStream(connection As %SYS.MFT.Connection.Dropbox, stream As %BinaryStream, filePath As %String, replace As %Boolean = 0, Output itemInfo As %MFT.ItemInfo) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Update the specified remote file with the contents of the specified stream. filePath must be a file path. An id may not be specified. If replace is true, then an existing file of the same name will be replaced. The default is to return an error if a replacement is attempted.",(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"downloadfile",children:"DownloadFile"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DownloadFile(connection As %SYS.MFT.Connection.Dropbox, filePath As %String, localFilePath As %String) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:['Download the specified remote file and store at the location given by localFilePath. filePath may be a file path. filePath may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object.',(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"downloadstream",children:"DownloadStream"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DownloadStream(connection As %SYS.MFT.Connection.Dropbox, filePath As %String, ByRef stream As %BinaryStream) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:['Download the specified remote file and store in the specified stream which must be a %FileBinaryStream or a %GlobalBinaryStream. If stream is not specified, then a %GlobalBinaryStream will be created. filePath may be a file path. filePath may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object.',(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"sharefolder",children:"ShareFolder"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ShareFolder(connection As %SYS.MFT.Connection.Dropbox, path As %String, accessLevel As %String = "viewer", users As %List) As %Status\n'})}),"\n",(0,t.jsxs)(s.p,{children:['Share a folder with a list of users pass as a $list. path may be a folder path. path may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object. The "editor" and "viewer" access levels are supported for all vendors. Any additional Dropbox access levels are also supported. A Dropbox user is specified as the email address associated with the account.',(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"unsharefolder",children:"UnshareFolder"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UnshareFolder(connection As %SYS.MFT.Connection.Dropbox, path As %String, User As %String) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:['Unshare a folder from a specified user. path may be a folder path. path may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object. A Dropbox user is specified as the email address associated with the account.',(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"unsharefolderall",children:"UnshareFolderAll"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod UnshareFolderAll(connection As %SYS.MFT.Connection.Dropbox, path As %String, itemInfo As %MFT.ItemInfo = "") As %Status\n'})}),"\n",(0,t.jsxs)(s.p,{children:['Unshare a folder from all users. path may be a folder path. path may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object. Passing intemInfo is for iternal use only.',(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"mountfolder",children:"MountFolder"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod MountFolder(connection As %SYS.MFT.Connection.Dropbox, folderName As %String) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["MountFolder is a Dropbox specific method to mount a shared folder that was shared by a different user. MountFolder is needed since folders are not available to a user until he does the mount. Since Dropbox will always share folders at the root of the receiving user, only a folder name is needed. MountFolder must be executed using the connection for the user being shared with, not the owner's connection.",(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"unmountfolder",children:"UnmountFolder"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UnmountFolder(connection As %SYS.MFT.Connection.Dropbox, folderName As %String) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["UnmountFolder is a Dropbox specific method to unmount a shared folder that was shared by a different user. UnmountFolder is needed since folders need to be mounted before a user different than the owner may access them even if they are shared. Since Dropbox will always share folders at the root of the receiving user, only a folder name is needed. UnmountFolder must be executed using the connection for the user being shared with, not the owner's connection.",(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"getmountablefolder",children:"GetMountableFolder"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetMountableFolder(connection As %SYS.MFT.Connection.Dropbox, folderName As %String, Output folderId As %String, Output isMounted As %Boolean) As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["GetMountableFolder is an internal method to get the shared_folder_id for the specified mountable folder. GetMountableFolder sets isMounted to true if the folder is already mounted.",(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission."]}),"\n",(0,t.jsx)(s.h3,{id:"getsharedfolderid",children:"GetSharedFolderId"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetSharedFolderId(itemInfo As %MFT.ItemInfo) As %String [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Get the internal shared folder id"}),"\n",(0,t.jsx)(s.h3,{id:"unsharefileall",children:"UnshareFileAll"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod UnshareFileAll(connection As %SYS.MFT.Connection.Dropbox, ByRef itemInfo As %MFT.ItemInfo = "") As %Status [ Internal ]\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Unshare a file from all users.",(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox User application with Full Dropbox permission.",(0,t.jsx)(s.br,{}),"\nFor internal use only."]}),"\n",(0,t.jsx)(s.h3,{id:"createuser",children:"CreateUser"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateUser(connection As %SYS.MFT.Connection.Dropbox, userInfo As %MFT.UserInfo) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Create a new user. The Userid and Detail properties are filled in by CreateUser if it is successful.",(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox Business application with Team Memeber Management permission."]}),"\n",(0,t.jsx)(s.h3,{id:"deleteuserbyid",children:"DeleteUserById"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DeleteUserById(connection As %SYS.MFT.Connection.Dropbox, userid As %String) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Delete the user that is specified by the id. For Dropbox the user will remain a Dropbox user, but be removed from the team.",(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox Business application with Team Memeber Management permission."]}),"\n",(0,t.jsx)(s.h3,{id:"deleteuser",children:"DeleteUser"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DeleteUser(connection As %SYS.MFT.Connection.Dropbox, username As %String) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Delete the user that is specified by the email address (i.e. username). For Dropbox the user will remain a Dropbox user, but be removed from the team.",(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox Business application with Team Memeber Management permission."]}),"\n",(0,t.jsx)(s.h3,{id:"deleteusercommon",children:"DeleteUserCommon"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DeleteUserCommon(connection As %SYS.MFT.Connection.Dropbox, user As %DynamicObject) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Common code to get the user information response"}),"\n",(0,t.jsx)(s.h3,{id:"getuserbyid",children:"GetUserById"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetUserById(connection As %SYS.MFT.Connection.Dropbox, userid As %String, Output userInfo As %MFT.UserInfo) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:['Retrieve the %MFT.UserInfo specified by the service defined Userid. If the user does not exist, then $$$OK is returned as status and userInfo is returned as "".',(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox Business application with Team Memeber Management permission."]}),"\n",(0,t.jsx)(s.h3,{id:"getuser",children:"GetUser"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetUser(connection As %SYS.MFT.Connection.Dropbox, username As %String, Output userInfo As %MFT.UserInfo) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:['Retrieve the %MFT.UserInfo specified by the username which is the email address for all currently supported services. GetUser is potentially less efficient than GetUserById. If the user does not exist, then $$$OK is returned as status and userInfo is returned as "".',(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox Business application with Team Memeber Management permission."]}),"\n",(0,t.jsx)(s.h3,{id:"getuserinfo",children:"GetUserInfo"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetUserInfo(connection As %SYS.MFT.Connection.Dropbox, member As %DynamicObject, Output userInfo As %MFT.UserInfo) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Common code to get the user information response"}),"\n",(0,t.jsx)(s.h3,{id:"getuserlist",children:"GetUserList"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetUserList(connection As %SYS.MFT.Connection.Dropbox, Output userList As %MFT.UserList) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Return the list of all currently defined users for this team or enterprise.",(0,t.jsx)(s.br,{}),"\nThis method requires a connection based on a Dropbox Business application with Team Memeber Management permission."]}),"\n",(0,t.jsx)(s.h3,{id:"createuserinfo",children:"CreateUserInfo"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateUserInfo(response As %DynamicObject) As %MFT.UserInfo [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Create an UserInfo object from a Dropbox response"})]})}function d(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>a});var t=n(96540);const o={},r=t.createContext(o);function i(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);