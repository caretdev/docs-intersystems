"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[37481],{89800:(e,r,s)=>{s.r(r),s.d(r,{contentTitle:()=>a,default:()=>c,frontMatter:()=>i,toc:()=>o});var t=s(74848),n=s(28453);const i={pagination_prev:null,pagination_next:null},a="Config.MapMirrors",o=[{value:"Parameters",id:"parameters",level:2},{value:"CAPITALNAME",id:"capitalname",level:3},{value:"EMSSERVICE",id:"emsservice",level:3},{value:"Properties",id:"properties",level:2},{value:"Name",id:"name",level:3},{value:"AgentAddress",id:"agentaddress",level:3},{value:"AgentPort",id:"agentport",level:3},{value:"AsyncMemberType",id:"asyncmembertype",level:3},{value:"ConnectsTo",id:"connectsto",level:3},{value:"DejournalFilter",id:"dejournalfilter",level:3},{value:"ECPAddress",id:"ecpaddress",level:3},{value:"GUID",id:"guid",level:3},{value:"InstanceDirectory",id:"instancedirectory",level:3},{value:"MemberType",id:"membertype",level:3},{value:"MirrorAddress",id:"mirroraddress",level:3},{value:"MirrorSSPort",id:"mirrorssport",level:3},{value:"PreferredArbiter",id:"preferredarbiter",level:3},{value:"SSLComputerName",id:"sslcomputername",level:3},{value:"EncryptCommunication",id:"encryptcommunication",level:3},{value:"Methods",id:"methods",level:2},{value:"NameSet",id:"nameset",level:3},{value:"%OnBeforeSaveCallBack",id:"onbeforesavecallback",level:3},{value:"CreateCallBack",id:"createcallback",level:3},{value:"WriteSection",id:"writesection",level:3},{value:"%OnValidateObject",id:"onvalidateobject",level:3},{value:"%OnDeleteCallBack",id:"ondeletecallback",level:3},{value:"Load",id:"load",level:3},{value:"Count",id:"count",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"ListFetch",id:"listfetch",level:3},{value:"ListClose",id:"listclose",level:3},{value:"List1Execute",id:"list1execute",level:3},{value:"List1Fetch",id:"list1fetch",level:3},{value:"List1Close",id:"list1close",level:3}];function l(e){const r={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mirror:"mirror",p:"p",pre:"pre",reserved:"reserved",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"configmapmirrors",children:"Config.MapMirrors"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Class Config.MapMirrors Extends (%Persistent, Config.GenericMapMethods, Config.GenericMapProperties, %SYSTEM.Help) [ Final, Inheritance = right, LegacyInstanceContext, System = 4 ]\n"})}),"\n",(0,t.jsxs)(r.p,{children:["This class allows you to activate and view Mirror definitions in the [MapMirrors.",(0,t.jsx)(r.mirror,{name:"",children:"] section of the CPF file through programatic APIs. The properties in this section are managed via the Enterprise Management system as the information needs to be kept in sync across all of the instances which share the mirror definition. The ^MIRROR utility or the System Management Portal may be used to withdraw from a mirror in which case it will delete one of these sections."})]}),"\n",(0,t.jsxs)(r.p,{children:["In all of the Config methods, the CPFFile parameter defaults to the currently active CPF file. If you wish to query a different CPF file the file must be specifyied in the method call.",(0,t.jsx)(r.br,{}),"\nThe Flags parameter is normally omitted; the defaults are usually sufficient for most cases."]}),"\n",(0,t.jsx)(r.p,{children:"You can use either the Get API to retrieve an array containing all of the parameters from the object or you can open an instance using the Object syntax to craete a reference variable."}),"\n",(0,t.jsx)(r.p,{children:"EXAMPLE:"}),"\n",(0,t.jsx)(r.p,{children:'; Use class methods to retrieve properties %SYS>s MirName="TEST" %SYS>s Member="TESTSERVER/DATA1" %SYS>s Status=##Class(Config.MapMirrors).Get(MirName,Member,.Properties) %SYS>i \'Status w !,"Error="_$SYSTEM.Status.GetErrorText(Status) %SYS>zw Properties Properties("AgentAddress")="testserver" Properties("AgentPort")=2188 Properties("AsyncMemberType")=0 Properties("ConnectsTo")="" Properties("DejournalFilter")="" Properties("ECPAddress")="testserver"  ;This is the Super Server address in the documentation Properties("EncryptCommunication")=0 Properties("GUID")="F23D0A92-5961-4E2A-BFE9-EF91880323F0" Properties("InstanceDirectory")="c:\\intersystems\\data1" Properties("MemberType")=0 Properties("MirrorAddress")="testserver"  ;This is also called the mirror private address Properties("MirrorSSPort")=1972 Properties("PreferredArbiter")="" Properties("SSLComputerName")=""'}),"\n",(0,t.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(r.h3,{id:"capitalname",children:"CAPITALNAME"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Parameter CAPITALNAME = 1;\n"})}),"\n",(0,t.jsx)(r.p,{children:"The Mirror System Name is always uppercase"}),"\n",(0,t.jsx)(r.h3,{id:"emsservice",children:"EMSSERVICE"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:'Parameter EMSSERVICE [ Internal ] = "Mirror";\n'})}),"\n",(0,t.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(r.h3,{id:"name",children:"Name"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Property Name As %String(MAXLEN = 32) [ Required ];\n"})}),"\n",(0,t.jsx)(r.p,{children:"This is the name of this instance in the mirror. Mirror system names must be unique (enforced by Enterprise Manager) across all of the mirrors which the EM manages, as an instance has a single mirror system name which may appear in multiple mirror sets (eg. a reporting member may connect to multiple mirrors). For the most part the GUID  is used to identify a mirror member, the Name is used for display purposes."}),"\n",(0,t.jsx)(r.p,{children:"The name must not contain a colon (':') and is converted to uppercase before saving."}),"\n",(0,t.jsx)(r.h3,{id:"agentaddress",children:"AgentAddress"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Property AgentAddress As Config.Host;\n"})}),"\n",(0,t.jsx)(r.p,{children:"Network address (IP address preferred to avoid DNS issues) mirror members which connect to the primary should use to contact the Agent on this failover member. This is omitted reporting members as the agent is not used for mirroring on those systems. This is required on failover members. This field does not need to be specified on DR members although it will need to be filled in before promotion of the DR to a Failover member. It is best to configure the agent and the address information earlier rather than later."}),"\n",(0,t.jsx)(r.p,{children:"The agent can transfer journal data so a private address may be desirable here to avoid network congestion."}),"\n",(0,t.jsx)(r.h3,{id:"agentport",children:"AgentPort"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Property AgentPort As %Integer;\n"})}),"\n",(0,t.jsx)(r.p,{children:"Port # which the agent on this system is configured to listen on. ##class(SYS.Agent).GetApplicationPort() will return the current value if the local agent is active."}),"\n",(0,t.jsx)(r.h3,{id:"asyncmembertype",children:"AsyncMemberType"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Property AsyncMemberType As %Integer(MAXVAL = 2, MINVAL = 0) [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsxs)(r.p,{children:["AsyncMemberType indicates the async member is a disaster recovery (DR), read-only reporting or read-write reporting async member.",(0,t.jsx)(r.br,{}),"\n0 - Disaster Recovery (DR). This is a disaster recovery async member, all its mirrored databases are read-only mirrored databases.",(0,t.jsx)(r.br,{}),"\n1 - Read-Only Reporting. This is a reporting async member, all its mirrored databases could be read-only or read-write databases, the default is read-only when the database is created.",(0,t.jsx)(r.br,{}),"\n2 - Read-Write Reporting. This is a reporting async member, all its mirrored databases could be read-only or read-write databases, the default is read-write when the database is created."]}),"\n",(0,t.jsx)(r.h3,{id:"connectsto",children:"ConnectsTo"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Property ConnectsTo As %String;\n"})}),"\n",(0,t.jsx)(r.p,{children:"Reserved for future use."}),"\n",(0,t.jsx)(r.h3,{id:"dejournalfilter",children:"DejournalFilter"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Property DejournalFilter As %String;\n"})}),"\n",(0,t.jsxs)(r.p,{children:["The name of the filter class for mirror dejournaling, null string means the dejournal filter is disabled.",(0,t.jsx)(r.br,{}),"\nThis property is meaningful only for Reporting Async members."]}),"\n",(0,t.jsx)(r.h3,{id:"ecpaddress",children:"ECPAddress"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Property ECPAddress As Config.Host;\n"})}),"\n",(0,t.jsx)(r.p,{children:"This is the Super Server address referenced in the documentation for this instance. External mirror-aware systems can connect to the primary using this address. Currently the only such external systems are ECP application servers connecting to failover members. This is distributed to the ECP clients, along with the address for the other failover member (if there is one) when an ECP client builds a connection to a mirror."}),"\n",(0,t.jsx)(r.p,{children:"Other mirror members may also make connections to a member's Super Server address for certain control and monitoring purposes. When a member is primary, async members attempt to establish their data channel to the member using this address if the mirror private address is not accessible, which means that journal data may travel over the network via this address."}),"\n",(0,t.jsx)(r.p,{children:"This a required field on failover members, optional on others."}),"\n",(0,t.jsx)(r.h3,{id:"guid",children:"GUID"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Property GUID As %String [ Required ];\n"})}),"\n",(0,t.jsx)(r.p,{children:"Uniquely identifies this node in the mirror. Apart from identifying the nodes, primary used to identify the instance that owns a particular copy of a mirrored database."}),"\n",(0,t.jsx)(r.h3,{id:"instancedirectory",children:"InstanceDirectory"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Property InstanceDirectory As %SysPath [ Required ];\n"})}),"\n",(0,t.jsx)(r.p,{children:"The installation directory of the instance (the parent of the mgr directory). Used primarily on failover members to identify the instance to the agent"}),"\n",(0,t.jsx)(r.h3,{id:"membertype",children:"MemberType"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Property MemberType As %Integer [ InitialExpression = 0, Required ];\n"})}),"\n",(0,t.jsx)(r.p,{children:"Numeric value indicating the type of mirror member."}),"\n",(0,t.jsxs)(r.p,{children:["0 - Failover member",(0,t.jsx)(r.br,{}),"\n1 - ",(0,t.jsxs)(r.reserved,{htmlFor:"",future:"",use:"",children:[(0,t.jsx)(r.br,{}),"\n2 - Async member (doesn't accept client connections)",(0,t.jsx)(r.br,{}),"\n(defined in %syMirror.inc as FailoverMemberType, AsyncMemberType)"]})]}),"\n",(0,t.jsx)(r.h3,{id:"mirroraddress",children:"MirrorAddress"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Property MirrorAddress As Config.Host [ Required ];\n"})}),"\n",(0,t.jsx)(r.p,{children:"Address (IP preferred to avoid DNS troubles) the other mirror members should use to contact the Super Server on this instance. When a InterSystems IRIS instance is running as the primary failover member, each of the other mirror members uses the mirror private address to establish its mirror data channel, the channel over which it receives journal data from the primary and the most heavily used mirror communication channel."}),"\n",(0,t.jsx)(r.p,{children:"Failover members are restricted in that they can only use this address for establishing the connection to receive live updates. Async members attempt to use this address to connect to the primary but fall back to the Super Server address (ECPAddress property) if necessary."}),"\n",(0,t.jsx)(r.p,{children:"This documentation refers to ths property as the Mirror Private Address."}),"\n",(0,t.jsx)(r.h3,{id:"mirrorssport",children:"MirrorSSPort"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Property MirrorSSPort As %Integer [ Required ];\n"})}),"\n",(0,t.jsx)(r.p,{children:"Super Server port for this instance. Used in conjunction with both the MirrorAddress and the ECPAddress by clients establishing connections to this instance."}),"\n",(0,t.jsx)(r.h3,{id:"preferredarbiter",children:"PreferredArbiter"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Property PreferredArbiter As %String [ Internal ];\n"})}),"\n",(0,t.jsx)(r.p,{children:'If we decide to support configurations with multiple arbiters, this is the arbiter number of the preferred arbiter for when this member is the primary. If this arbiter is not available when this member becomes the primary, it will try to use ("any of the configured arbiters" or "the other configured arbiter"). This can be left blank if there is no preference.'}),"\n",(0,t.jsx)(r.h3,{id:"sslcomputername",children:"SSLComputerName"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Property SSLComputerName As %String(MAXLEN = 1024);\n"})}),"\n",(0,t.jsx)(r.p,{children:"Value of the DN field in the SSL certificate which is part of the %Mirror SSL configuration on this instance. When SSL is enabled an instance sends this value as part of establishing a TCP connection. Both sides of the connection verify that the other side's DN value matches a value stored in the configuration. It is best for every mirror member to have a unique DN value as otherwise it may be possible for a system that was removed from the mirror to still connect if it's DN value matches the DN stored with another system of the same type (eg. async v. failover)."}),"\n",(0,t.jsx)(r.h3,{id:"encryptcommunication",children:"EncryptCommunication"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Property EncryptCommunication As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsx)(r.p,{children:"When SSL is not required by Config.Mirrors.UseSSL mirror wide setting, this property controls whether this member uses SSL for its outgoing connections and/or whether it requires SSL for its incoming connections. Whenever SSL is used to encrypt a connection, the endpoints also perform authorization and verify that the DN name in the SSL configuration matches the listed SSLComputerName for that system in the Mirror configuration."}),"\n",(0,t.jsx)(r.p,{children:"Values are:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"0 - Encryption is not required. Outgoing connections may still be encrypted if the member we connect to requires SSL for incoming connections."}),"\n",(0,t.jsx)(r.li,{children:"1 - SSL is used to encrypt outgoing connections. the server must have an SSL Mirror configuration or the connection will fail"}),"\n",(0,t.jsx)(r.li,{children:"2 - Encryption is required for incoming connections. The clients which connect must have an SSL Mirror configuration or the connection will fail"}),"\n",(0,t.jsx)(r.li,{children:"3 - Both 1+2: Outgoing connections are encrypted, encryption is required for incoming connections"}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(r.h3,{id:"nameset",children:"NameSet"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Method NameSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(r.p,{children:"Force the name to be uppercase."}),"\n",(0,t.jsx)(r.h3,{id:"onbeforesavecallback",children:"%OnBeforeSaveCallBack"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod %OnBeforeSaveCallBack(insert As %Integer, Obj As %ObjectHandle) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(r.h3,{id:"createcallback",children:"CreateCallBack"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod CreateCallBack(Obj As %ObjectHandle, Data As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(r.p,{children:"Called by the Create method during import from a CPF file."}),"\n",(0,t.jsx)(r.h3,{id:"writesection",children:"WriteSection"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod WriteSection(CPFFile As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(r.h3,{id:"onvalidateobject",children:"%OnValidateObject"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Method %OnValidateObject() As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(r.p,{children:["This is called from %Save().",(0,t.jsx)(r.br,{}),"\nAny error returned from this will cause the object to not be saved.",(0,t.jsx)(r.br,{}),"\nIn addition to validating some data types (eg. for length, allowed characters), some of the fields are required for Failover members but optional (meaningless) for others so here if we're saving a Failover member, we verify that the various required fields have been specified."]}),"\n",(0,t.jsx)(r.h3,{id:"ondeletecallback",children:"%OnDeleteCallBack"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod %OnDeleteCallBack(Obj As %ObjectHandle) As %Status\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Called from %Delete().",(0,t.jsx)(r.br,{}),"\nAny error returned here will keep the object from being deleted."]}),"\n",(0,t.jsx)(r.h3,{id:"load",children:"Load"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod Load(Obj As %ObjectHandle = "", Flags As %Integer = 1) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(r.p,{children:"Load the mirror parameters into memory and activate the changes as needed. The [Mirrors] section should have already been loaded so that the mirror definitions are available (the mirror configuration has to hang off an existing definition)"}),"\n",(0,t.jsxs)(r.p,{children:["Parameters:",(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"Obj"}),' = Handle to the object which caused the load. If "", then load everything (called from STU).',(0,t.jsx)(r.br,{}),"\nIf a delete operation, then Obj is contains the name of the item which was deleted since the object itself has already been deleted. Note that Obj can either be a Config.Mirrors object or a Config.MapMirror.* object.",(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"Flags"})," = Type of modification.",(0,t.jsx)(r.br,{}),"\n0 - Modify",(0,t.jsx)(r.br,{}),"\n1 - Create/Insert",(0,t.jsx)(r.br,{}),"\n2 - Delete"]}),"\n",(0,t.jsx)(r.h3,{id:"count",children:"Count"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod Count(mirrorname As %String, othersonly As %Boolean = 0, ByRef CPFFile As %String = "") As %Integer\n'})}),"\n",(0,t.jsx)(r.p,{children:"Returns the number of mirror set members defined in a configuration. If othersonly is set we exclude ourselves (if we're listed) from the total."}),"\n",(0,t.jsx)(r.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod ListExecute(ByRef qHandle As %Binary, ID As %String, Names As %String = "*", CPFFile As %String = "", Flags As %Integer = 0, Format As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(r.p,{children:"List MapMirrors section in a CPF file."}),"\n",(0,t.jsxs)(r.p,{children:["Parameters:",(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"Names"})," - Comma separated list of MapMirror names",(0,t.jsx)(r.br,{}),'\n"*" - All records match',(0,t.jsx)(r.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,t.jsx)(r.br,{}),'\n"String*" - Any record starting with "String"',(0,t.jsx)(r.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"CPFFile"})," - Name of the CPF file to use. A null string means use the active CPF file.",(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"Flags"})," - Currently ignored.",(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"Format"}),(0,t.jsx)(r.br,{}),"\n0 - Standard report list format",(0,t.jsx)(r.br,{}),"\n1 - ^CONFIG global format",(0,t.jsx)(r.br,{}),"\n2 - CPF file format format",(0,t.jsx)(r.br,{}),"\nNote: This query may change in future versions"]}),"\n",(0,t.jsx)(r.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,t.jsx)(r.h3,{id:"listclose",children:"ListClose"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,t.jsx)(r.h3,{id:"list1execute",children:"List1Execute"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod List1Execute(ByRef %qHandle As %Binary, ID As %String, Names As %String = "*", CPFFile As %String = "", Flags As %Integer = 0, Format As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(r.p,{children:"List MapMirrors section in a CPF file."}),"\n",(0,t.jsxs)(r.p,{children:["Parameters:",(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"Names"})," - Comma separated list of MapMirror names",(0,t.jsx)(r.br,{}),'\n"*" - All records match',(0,t.jsx)(r.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,t.jsx)(r.br,{}),'\n"String*" - Any record starting with "String"',(0,t.jsx)(r.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"CPFFile"})," - Name of the CPF file to use. A null string means use the active CPF file.",(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"Flags"})," - Currently ignored.",(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"Format"}),(0,t.jsx)(r.br,{}),"\n0 - Standard report list format",(0,t.jsx)(r.br,{}),"\n1 - ^CONFIG global format",(0,t.jsx)(r.br,{}),"\n2 - CPF file format format",(0,t.jsx)(r.br,{}),"\nNote: This query may change in future versions"]}),"\n",(0,t.jsx)(r.h3,{id:"list1fetch",children:"List1Fetch"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod List1Fetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = List1Execute ]\n"})}),"\n",(0,t.jsx)(r.h3,{id:"list1close",children:"List1Close"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod List1Close(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = List1Execute ]\n"})})]})}function c(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>a,x:()=>o});var t=s(96540);const n={},i=t.createContext(n);function a(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);