"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[8651],{39355:(e,n,l)=>{l.r(n),l.d(n,{contentTitle:()=>t,default:()=>i,frontMatter:()=>o,toc:()=>c});var r=l(74848),s=l(28453);const o={pagination_prev:null,pagination_next:null},t="SYS.Stats.ECPAppSvr",c=[{value:"Properties",id:"properties",level:2},{value:"MaxConn",id:"maxconn",level:3},{value:"ActConn",id:"actconn",level:3},{value:"GloRef",id:"gloref",level:3},{value:"ByteSent",id:"bytesent",level:3},{value:"ByteRcvd",id:"bytercvd",level:3},{value:"BlockAdd",id:"blockadd",level:3},{value:"BlockBuffPurge",id:"blockbuffpurge",level:3},{value:"BlockSvrPurge",id:"blocksvrpurge",level:3},{value:"GloRefLocal",id:"gloreflocal",level:3},{value:"GloRefRemote",id:"glorefremote",level:3},{value:"GloUpdateLocal",id:"gloupdatelocal",level:3},{value:"GloUpdateRemote",id:"gloupdateremote",level:3},{value:"RoutineCallLocal",id:"routinecalllocal",level:3},{value:"RoutineCallRemote",id:"routinecallremote",level:3},{value:"RoutineBuffLocal",id:"routinebufflocal",level:3},{value:"RoutineBuffRemote",id:"routinebuffremote",level:3},{value:"ResponseTime",id:"responsetime",level:3},{value:"ResponseConn",id:"responseconn",level:3},{value:"Methods",id:"methods",level:2},{value:"Sample",id:"sample",level:3}];function a(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"sysstatsecpappsvr",children:"SYS.Stats.ECPAppSvr"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Class SYS.Stats.ECPAppSvr Extends SYS.WSMon.wsResource [ System = 4 ]\n"})}),"\n",(0,r.jsx)(n.p,{children:"This class represents system metrics captured for ECP Application Server activity. Each property is a different metric. A class may be instantiated by calling the class method 'Sample', and then the current value of each property can be accessed."}),"\n",(0,r.jsxs)(n.p,{children:["For example: ",(0,r.jsx)(n.code,{children:"s ref=##class(SYS.Stats.ECPAppSvr).Sample() w ref.GloRef ; display number of remote Global References requested by this Application Server"}),(0,r.jsx)(n.br,{}),"\nSystem stats for an ECP Application Server"]}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(n.h3,{id:"maxconn",children:"MaxConn"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property MaxConn As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The maximum possible number of ECP connections from this Application Server."}),"\n",(0,r.jsx)(n.h3,{id:"actconn",children:"ActConn"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property ActConn As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The number of current active ECP connections from this Application Server."}),"\n",(0,r.jsx)(n.h3,{id:"gloref",children:"GloRef"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property GloRef As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:'The number of remote Global "read" type references which were not found in the global cache. This number can be compared to the total number of remote read-only references (i.e. GloRefRemote - GloUpdateRemote) to measure the efficiency of the global caching.'}),"\n",(0,r.jsx)(n.h3,{id:"bytesent",children:"ByteSent"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property ByteSent As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The number of Bytes sent. Note that this is currently only a 32 bit integer and may overflow quickly on a busy system."}),"\n",(0,r.jsx)(n.h3,{id:"bytercvd",children:"ByteRcvd"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property ByteRcvd As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The number of Bytes received. Note that this is currently only a 32 bit integer and may overflow quickly on a busy system."}),"\n",(0,r.jsx)(n.h3,{id:"blockadd",children:"BlockAdd"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property BlockAdd As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The number of Blocks added to local cache."}),"\n",(0,r.jsx)(n.h3,{id:"blockbuffpurge",children:"BlockBuffPurge"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property BlockBuffPurge As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The number of Blocks purged by buffer allocation."}),"\n",(0,r.jsx)(n.h3,{id:"blocksvrpurge",children:"BlockSvrPurge"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property BlockSvrPurge As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The number of Blocks purged as requested by a Data Server."}),"\n",(0,r.jsx)(n.h3,{id:"gloreflocal",children:"GloRefLocal"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property GloRefLocal As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The total number of Local global references."}),"\n",(0,r.jsx)(n.h3,{id:"glorefremote",children:"GloRefRemote"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property GloRefRemote As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The total number of Remote global references."}),"\n",(0,r.jsx)(n.h3,{id:"gloupdatelocal",children:"GloUpdateLocal"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property GloUpdateLocal As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The number of Local global updates (Set, Kill, etc)."}),"\n",(0,r.jsx)(n.h3,{id:"gloupdateremote",children:"GloUpdateRemote"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property GloUpdateRemote As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The number of Remote global updates (Set, Kill, etc)."}),"\n",(0,r.jsx)(n.h3,{id:"routinecalllocal",children:"RoutineCallLocal"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property RoutineCallLocal As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The number of Local routine calls."}),"\n",(0,r.jsx)(n.h3,{id:"routinecallremote",children:"RoutineCallRemote"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property RoutineCallRemote As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The number of Remote routine calls."}),"\n",(0,r.jsx)(n.h3,{id:"routinebufflocal",children:"RoutineBuffLocal"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property RoutineBuffLocal As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The number of Local routine buffer loads and saves."}),"\n",(0,r.jsx)(n.h3,{id:"routinebuffremote",children:"RoutineBuffRemote"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property RoutineBuffRemote As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The number of Remote routine buffer loads and saves."}),"\n",(0,r.jsx)(n.h3,{id:"responsetime",children:"ResponseTime"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property ResponseTime As %Numeric;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The response time of the currently connected ECP Data Server(s), measured as a decimal number in seconds."}),"\n",(0,r.jsx)(n.p,{children:"If there are multiple connections, this number represents an overall response time for all Data Server connections. Running the Sample() method will attempt to 'sync' to all Data Servers, and returns the time after the last one has answered."}),"\n",(0,r.jsx)(n.p,{children:"A return of zero ('0') indicates there were no active connections which were able to respond to the 'sync' request."}),"\n",(0,r.jsx)(n.h3,{id:"responseconn",children:"ResponseConn"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property ResponseConn As %Integer;\n"})}),"\n",(0,r.jsx)(n.p,{children:"The number of Data Server connections that responded for the ResponseTime."}),"\n",(0,r.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.h3,{id:"sample",children:"Sample"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Sample() As SYS.Stats.ECPAppSvr\n"})})]})}function i(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,n,l)=>{l.d(n,{R:()=>t,x:()=>c});var r=l(96540);const s={},o=r.createContext(s);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);