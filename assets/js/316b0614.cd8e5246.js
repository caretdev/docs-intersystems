"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[68658],{67583:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>i,default:()=>l,frontMatter:()=>a,toc:()=>c});var r=t(74848),n=t(28453);const a={pagination_prev:null,pagination_next:null},i="Config.DeviceSubTypes",c=[{value:"Properties",id:"properties",level:2},{value:"Backspace",id:"backspace",level:3},{value:"CursorControl",id:"cursorcontrol",level:3},{value:"EraseEOF",id:"eraseeof",level:3},{value:"EraseEOL",id:"eraseeol",level:3},{value:"FormFeed",id:"formfeed",level:3},{value:"RightMargin",id:"rightmargin",level:3},{value:"ScreenLength",id:"screenlength",level:3},{value:"ZU22Backspace",id:"zu22backspace",level:3},{value:"ZU22FormFeed",id:"zu22formfeed",level:3},{value:"Methods",id:"methods",level:2},{value:"CreateCallBack",id:"createcallback",level:3},{value:"Default",id:"default",level:3},{value:"Load",id:"load",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"ListFetch",id:"listfetch",level:3},{value:"ListClose",id:"listclose",level:3}];function o(e){const s={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"configdevicesubtypes",children:"Config.DeviceSubTypes"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Class Config.DeviceSubTypes Extends (%Persistent, Config.CommonMultipleMethods, Config.CommonProperties, %SYSTEM.Help) [ Final, Inheritance = right, System = 4 ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["This class allows you to modify and view the [DeviceSubTypes] section of the CPF file through programatic APIs. While properties are usually modified through the System Management portal, there may be some occasion where modifying them through the API's is best for your system. In all the Config methods, if you do not specify the CPFFile parameter, the currently active CPF file is used. If you wish to modify a CPF file which is not the currently active one, then specify the CPFFile you wish to modify in the method call.",(0,r.jsx)(s.br,{}),"\nThe Flags parameter does not normally need to be specified; the defaults are usually sufficient for most cases.",(0,r.jsx)(s.br,{}),"\nYou can use either the provided API's (Create/Get/Modify/Delete) to modify the properties by passing in the correct parameters, or use Object syntax to open and directly manipulate the config objects (Open() and Exists()). Most objects created here need only to specify the Name of the object, and 1 or 2 properties since the the defaults are what are commonly used for most cases."]}),"\n",(0,r.jsx)(s.p,{children:"EXAMPLE:"}),"\n",(0,r.jsxs)(s.p,{children:['; Use class methods to create an instance %SYS>s Name="P-NEW" %SYS>s Properties("Backspace")="$C(8)" %SYS>s Properties("FormFeed")="#" %SYS>s Properties("RightMargin")=132 %SYS>s Properties("ScreenLength")=66 %SYS>s Status=##Class(Config.DeviceSubTypes).Create(Name,.Properties) %SYS>i \'Status w !,"Error="',(0,r.jsx)(s.em,{children:'$SYSTEM.Status.GetErrorText(Status) ; Use class methods to modify properties %SYS>s Status=##Class(Config.DeviceSubTypes).Get(Name,.Properties) %SYS>i \'Status w !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status) %SYS>zw Properties("FormFeed") Properties("FormFeed")="#" %SYS>s Properties("FormFeed")="#,#" %SYS>s Status=##Class(Config.DeviceSubTypes).Modify(Name,.Properties) %SYS>i \'Status w !,"Error="',(0,r.jsx)(s.em,{children:'$SYSTEM.Status.GetErrorText(Status) ; Now use Objects to modify properties %SYS>s Obj=##Class(Config.DeviceSubTypes).Open(Name) ; We could have used i ##Class(Config.DeviceSubTypes).Exists(Name,.Obj) instead of Open() %SYS>w Obj.FormFeed #,# %SYS>s Obj.FormFeed="#" %SYS>s Status=Obj.%Save() %SYS>i \'Status w !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status) ; Now delete the object we just created %SYS>s Status=##Class(Config.DeviceSubTypes).Delete(Name) %SYS>i \'Status w !,"Error="_$SYSTEM.Status.GetErrorText(Status)']}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.h3,{id:"backspace",children:"Backspace"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Backspace As %String(MAXLEN = 128, MINLEN = 0);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Enter the ASCII code that represents the backspace character on the selected",(0,r.jsx)(s.br,{}),"\ndevice in this form: $C(code1). Default depends on the device type."]}),"\n",(0,r.jsx)(s.h3,{id:"cursorcontrol",children:"CursorControl"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property CursorControl As %String(MAXLEN = 128, MINLEN = 0);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Enter the cursor control keys for the selected device.",(0,r.jsx)(s.br,{}),"\nDefault depends on the device type."]}),"\n",(0,r.jsx)(s.h3,{id:"eraseeof",children:"EraseEOF"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property EraseEOF As %String(MAXLEN = 128, MINLEN = 0);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Enter the ASCII code that represents erasing to the end of file on the",(0,r.jsx)(s.br,{}),"\nselected device in this form: $C(code1,code2...).",(0,r.jsx)(s.br,{}),"\nDefault depends on the device type."]}),"\n",(0,r.jsx)(s.h3,{id:"eraseeol",children:"EraseEOL"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property EraseEOL As %String(MAXLEN = 128, MINLEN = 0);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Enter the ASCII code that represents erasing to the end of line on this device",(0,r.jsx)(s.br,{}),"\nin the form $C(code1,code2).",(0,r.jsx)(s.br,{}),"\nDefault depends on the device type."]}),"\n",(0,r.jsx)(s.h3,{id:"formfeed",children:"FormFeed"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property FormFeed As %String(MAXLEN = 128, MINLEN = 0);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Enter the ASCII code that represents a form feed on the selected device in this form:",(0,r.jsx)(s.br,{}),"\n#,$C(code1,code2...).",(0,r.jsx)(s.br,{}),"\nDefault depends on the device type."]}),"\n",(0,r.jsx)(s.h3,{id:"rightmargin",children:"RightMargin"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property RightMargin As %Integer(MAXVAL = 256, MINVAL = 0) [ InitialExpression = 80 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Enter the number that represents the location of the right margin.",(0,r.jsx)(s.br,{}),"\nDevice output will wrap at that number of characters.",(0,r.jsx)(s.br,{}),"\nDefault depends on the device type."]}),"\n",(0,r.jsx)(s.h3,{id:"screenlength",children:"ScreenLength"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ScreenLength As %Integer [ InitialExpression = 0, Required ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"Enter the number of lines that comprise one screen or page for the device."}),"\n",(0,r.jsx)(s.h3,{id:"zu22backspace",children:"ZU22Backspace"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ZU22Backspace As %String(MAXLEN = 128, MINLEN = 0);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Enter the ASCII code that represents a backspace on the selected device in the form $C(code).",(0,r.jsx)(s.br,{}),"\nDefault depends on the device type."]}),"\n",(0,r.jsx)(s.h3,{id:"zu22formfeed",children:"ZU22FormFeed"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ZU22FormFeed As %String(MAXLEN = 128, MINLEN = 0);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Enter the ASCII code that represents a form feed on the selected device in the form $C(code1,code2).",(0,r.jsx)(s.br,{}),"\nDefault depends on the device type."]}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"createcallback",children:"CreateCallBack"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateCallBack(Obj As %ObjectHandle, Data As %String) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Called by the Create method during import from a CPF file."}),"\n",(0,r.jsx)(s.h3,{id:"default",children:"Default"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Default(CPFFile As %String, Platform As %String) As %Status [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Write a default DeviceSubTypes section in a CPF file.",(0,r.jsx)(s.br,{}),"\nThis method assumes that a CPF file has been opened, and that a U CPFFile command has been executed before this is called."]}),"\n",(0,r.jsx)(s.h3,{id:"load",children:"Load"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Load(Obj As %ObjectHandle = "", Flags As %Integer = 1) As %Status [ Internal ]\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Load the parameters into memory and activate.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"Obj"}),' = Handle to the object which caused the load. If "", then load everything, only called from STU.',(0,r.jsx)(s.br,{}),"\nIf a delete operation, then Obj is the NAME of the item which was deleted since the oject itself has already been deleted.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"Flags"})," = Type of modification.",(0,r.jsx)(s.br,{}),"\n0 - Modify",(0,r.jsx)(s.br,{}),"\n1 - Create/Insert",(0,r.jsx)(s.br,{}),"\n2 - Delete"]}),"\n",(0,r.jsx)(s.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListExecute(ByRef %qHandle As %Binary, Names As %String = "*", CPFFile As %String = "", Flags As %Integer = 0, Format As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,r.jsx)(s.p,{children:"List DeviceSubTypes in a CPF file."}),"\n",(0,r.jsxs)(s.p,{children:["Parameters:",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"Names"})," - Comma separated list of DeviceSubType names",(0,r.jsx)(s.br,{}),'\n"*" - All records match',(0,r.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,r.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,r.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"CPFFile"})," - Name of the CPF file to use. A null string means use the active CPF file.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"Flags"})," - Currently ignored.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"Format"}),(0,r.jsx)(s.br,{}),"\n0 - Standard report list format",(0,r.jsx)(s.br,{}),"\n1 - ^CONFIG global format",(0,r.jsx)(s.br,{}),"\n2 - CPF file format format",(0,r.jsx)(s.br,{}),"\nNote: This query may change in future versions"]}),"\n",(0,r.jsx)(s.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"listclose",children:"ListClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})})]})}function l(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>c});var r=t(96540);const n={},a=r.createContext(n);function i(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);