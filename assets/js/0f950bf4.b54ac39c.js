"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[91307],{95779:(e,s,r)=>{r.r(s),r.d(s,{contentTitle:()=>l,default:()=>c,frontMatter:()=>n,toc:()=>o});var a=r(74848),t=r(28453);const n={pagination_prev:null,pagination_next:null},l="Journal.Restore",o=[{value:"Parameters",id:"parameters",level:2},{value:"TYPE",id:"type",level:3},{value:"Properties",id:"properties",level:2},{value:"StartTime",id:"starttime",level:3},{value:"JournalLog",id:"journallog",level:3},{value:"JournalLocation",id:"journallocation",level:3},{value:"StartPosition",id:"startposition",level:3},{value:"FirstFile",id:"firstfile",level:3},{value:"LastFile",id:"lastfile",level:3},{value:"SelectedFiles",id:"selectedfiles",level:3},{value:"zsvalsav",id:"zsvalsav",level:3},{value:"SourceDatabases",id:"sourcedatabases",level:3},{value:"DatabaseRedirection",id:"databaseredirection",level:3},{value:"SelectedUpdates",id:"selectedupdates",level:3},{value:"AbortOnJournalError",id:"abortonjournalerror",level:3},{value:"AbortOnDatabaseError",id:"abortondatabaseerror",level:3},{value:"Filter",id:"filter",level:3},{value:"MarkerTrigger",id:"markertrigger",level:3},{value:"DisableJournaling",id:"disablejournaling",level:3},{value:"SwitchOnCurrentJournal",id:"switchoncurrentjournal",level:3},{value:"RollBack",id:"rollback",level:3},{value:"Dismount",id:"dismount",level:3},{value:"Methods",id:"methods",level:2},{value:"UseJournalLocation",id:"usejournallocation",level:3},{value:"SelectFiles",id:"selectfiles",level:3},{value:"%OnClose",id:"onclose",level:3},{value:"%OnNew",id:"onnew",level:3},{value:"CheckJournalIntegrity",id:"checkjournalintegrity",level:3},{value:"RedirectDatabase",id:"redirectdatabase",level:3},{value:"SelectUpdates",id:"selectupdates",level:3},{value:"Run",id:"run",level:3},{value:"Monitor",id:"monitor",level:3}];function i(e){const s={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"journalrestore",children:"Journal.Restore"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Class Journal.Restore Extends %RegisteredObject [ System = 4 ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Example 1 (Restore everything in selected journal files of current InterSystems IRIS instance): ",(0,a.jsx)(s.code,{children:'s RestOref=##class(Journal.Restore).%New() s RestOref.FirstFile="20100107.001" s RestOref.LastFile="20100107.002" s Status=RestOref.Run()'})," Example 2 (Restore selected globals in selected databases from foreign journal files): ",(0,a.jsx)(s.code,{children:'s RestOref=##class(Journal.Restore).%New() s RestOref.FirstFile="/another_system/20100107.001" ;copied from another InterSystems IRIS instance s RestOref.LastFile="/another_system/20100107.002" ;copied from another InterSystems IRIS instance s RestOref.JournalLog="/another_system/journal.log" ;copied from another InterSystems IRIS instance d RestOref.UseJournalLocation("/another_system") ;and so on (where to locate journal files) s Status=RestOref.CheckJournalIntegrity(1) ;to populate property \'SourceDatabases\' with database paths collected from the journal files to be restored s key="" for { s SourceDatabase=RestOref.SourceDatabases.GetNext(.key) q:key="" w !,SourceDatabase," => " r TargetDatabase s Status=RestOref.RedirectDatabase(SourceDatabase,TargetDatabase) s Status=RestOref.SelectUpdates(SourceDatabase,GlobalName1) s Status=RestOref.SelectUpdates(SourceDatabase,GlobalName2) ;and so on } s Status=RestOref.Run()'})]}),"\n",(0,a.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(s.h3,{id:"type",children:"TYPE"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter TYPE = 0;\n"})}),"\n",(0,a.jsxs)(s.p,{children:["This corresponds to the fromrest parameter in journal restore utility.",(0,a.jsx)(s.br,{}),"\nfromrest is set by the caller of journal restore utility to indicate the type of journal restore (or the type of the caller). For example, ^JCONVERT sets fromrest=8 to instructs journal restore to write out the updates to a file instead of applying them to databases. Some types of restore have their own parameters (e.g., the path of an output file for fromrest=8), so a subclass for each type seems logical.",(0,a.jsx)(s.br,{}),"\n^JRNRESTO sets fromrest=0, which is the default here."]}),"\n",(0,a.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(s.h3,{id:"starttime",children:"StartTime"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property StartTime As %TimeStamp [ Private ];\n"})}),"\n",(0,a.jsx)(s.h3,{id:"journallog",children:"JournalLog"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property JournalLog As %String;\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Path of a journal history log where the selected journal files are listed",(0,a.jsx)(s.br,{}),"\nDefault: the journal history log of local InterSystems IRIS instance.",(0,a.jsx)(s.br,{}),"\nSet JournalLog=-1 to override the default without specifying a journal log."]}),"\n",(0,a.jsx)(s.h3,{id:"journallocation",children:"JournalLocation"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property JournalLocation As list Of %String;\n"})}),"\n",(0,a.jsxs)(s.p,{children:["A list of directories where the selected journal files are located",(0,a.jsx)(s.br,{}),"\nRequired if JournalLog has a non-default value."]}),"\n",(0,a.jsx)(s.h3,{id:"startposition",children:"StartPosition"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property StartPosition As %String;\n"})}),"\n",(0,a.jsx)(s.p,{children:"The position of the first journal file to begin processing at"}),"\n",(0,a.jsx)(s.h3,{id:"firstfile",children:"FirstFile"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property FirstFile As %String [ Required ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"The first journal file to process"}),"\n",(0,a.jsx)(s.h3,{id:"lastfile",children:"LastFile"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property LastFile As %String;\n"})}),"\n",(0,a.jsxs)(s.p,{children:["The last journal file to process",(0,a.jsx)(s.br,{}),"\nDefault: the last journal file listed in the journal history log given by JournalLog"]}),"\n",(0,a.jsx)(s.h3,{id:"selectedfiles",children:"SelectedFiles"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property SelectedFiles As %String [ MultiDimensional, Private ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["A list of selected journal files in their ",(0,a.jsx)(s.em,{children:"current"})," location"]}),"\n",(0,a.jsx)(s.h3,{id:"zsvalsav",children:"zsvalsav"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property zsvalsav As %Integer [ InitialExpression = 0, Private ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"Original value of $ZSTORAGE to be restored upon close"}),"\n",(0,a.jsx)(s.h3,{id:"sourcedatabases",children:"SourceDatabases"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property SourceDatabases As list Of %String;\n"})}),"\n",(0,a.jsx)(s.p,{children:"A list of database directories stored in the selected journal files for verifying the source database directories given in the DatabaseRedirection property if specified"}),"\n",(0,a.jsx)(s.h3,{id:"databaseredirection",children:"DatabaseRedirection"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property DatabaseRedirection As %String [ MultiDimensional, Private ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["An array of SourceDatabase -> TargetDatabase for database redirection",(0,a.jsx)(s.br,{}),"\nIf none specified, apply updates to the original databases ",(0,a.jsx)(s.code,{children:"s JrnRestOref=##class(Journal.Restore).%New() s Status=JrnRestOref.RedirectDatabase(SourceDatabase,TargetDatabase)"})]}),"\n",(0,a.jsx)(s.h3,{id:"selectedupdates",children:"SelectedUpdates"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property SelectedUpdates As %String [ MultiDimensional, Private ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["A table of (SourceDatabase,GlobalName) selected to be restored",(0,a.jsx)(s.br,{}),"\nIf none specified, restore everything from the selected journal files ",(0,a.jsx)(s.code,{children:"s JrnRestOref=##class(Journal.Restore).%New() s Status=JrnRestOref.SelectUpdates(SourceDatabase,GlobalName)"})]}),"\n",(0,a.jsx)(s.h3,{id:"abortonjournalerror",children:"AbortOnJournalError"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property AbortOnJournalError As %Boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"whether to abort journal restore if an update would have to be skipped due to a journal-related problem (e.g., journal corruption, missing journal files, etc.)"}),"\n",(0,a.jsx)(s.h3,{id:"abortondatabaseerror",children:"AbortOnDatabaseError"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property AbortOnDatabaseError As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Whether to abort journal restore if an update would have to be skipped due to a database-related problem (e.g., a target database cannot be mounted, error applying an update, etc.).",(0,a.jsx)(s.br,{}),"\nIf journal restore is aborted, databases will be left in a self-consistent state as of the record that caused the restore to be aborted. Parallel dejournaling will be disabled with this setting; otherwise, affected database(s) may not be self-consistent and will need to be recovered separately."]}),"\n",(0,a.jsx)(s.h3,{id:"filter",children:"Filter"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property Filter As %String;\n"})}),"\n",(0,a.jsx)(s.p,{children:'Specify a filter routine such as "^ZJRNFILT" to apply to every selected updates during journal restore'}),"\n",(0,a.jsx)(s.h3,{id:"markertrigger",children:"MarkerTrigger"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property MarkerTrigger As %String;\n"})}),"\n",(0,a.jsx)(s.p,{children:'Specify a routine (or tag) such as "MARKER^ZJRNFILT" to be invoked on journal markers during journal restore'}),"\n",(0,a.jsx)(s.h3,{id:"disablejournaling",children:"DisableJournaling"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property DisableJournaling As %Boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"Whether to disable journaling of the applied updates (for performance purpose)"}),"\n",(0,a.jsx)(s.h3,{id:"switchoncurrentjournal",children:"SwitchOnCurrentJournal"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property SwitchOnCurrentJournal As %Integer [ InitialExpression = 1 ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["If current journal file is among the journal files selected to be processed, the user has an option to switch journal file or stop journaling system wide.",(0,a.jsx)(s.br,{}),"\nThis is necessary if DisableJournaling is NO, as otherwise the applied updates will be journaled in the file that will be dejournaled, resulting in data integrity issues.",(0,a.jsx)(s.br,{}),"\nEven if DisableJournaling is YES, it is still a good practice to switch journal file so that new updates will go into the new file."]}),"\n",(0,a.jsx)(s.h3,{id:"rollback",children:"RollBack"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property RollBack As %Boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"To roll back incomplete transactions at the end of journal restore"}),"\n",(0,a.jsx)(s.h3,{id:"dismount",children:"Dismount"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property Dismount As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"To dismount databases whose updates were skipped due to errors"}),"\n",(0,a.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(s.h3,{id:"usejournallocation",children:"UseJournalLocation"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method UseJournalLocation(JournalDirectory As %SysPath) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Set up JournalLocation"}),"\n",(0,a.jsx)(s.h3,{id:"selectfiles",children:"SelectFiles"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method SelectFiles(ByRef SelectedFiles As %String) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Get a list of selected journal files using FirstFile, LastFile, JournalLog and JournalLocation"}),"\n",(0,a.jsx)(s.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnNew() As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"checkjournalintegrity",children:"CheckJournalIntegrity"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method CheckJournalIntegrity(Scan As %Integer = 0) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["To check the selected journal files for problems (missing files, corruptions, etc.)",(0,a.jsx)(s.br,{}),"\nScan"]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"0: look for missing files and inconsistent journal end offsets;"}),"\n",(0,a.jsx)(s.li,{children:"1: also collect a list of database directories in the selected journal files and store them in SourceDatabases;"}),"\n",(0,a.jsx)(s.li,{children:"2: also perform a more thorough (and more time-consuming) check by going through every record in the selected journal files, which could detect corruptions in the middle of a journal file that would otherwise go unnoticed until the read restore."}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"redirectdatabase",children:"RedirectDatabase"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method RedirectDatabase(SourceDatabase As %String, TargetDatabase As %String) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Set up journal restore to apply updates of SourceDatabase to TargetDatabase instead of SourceDatabase itself.",(0,a.jsx)(s.br,{}),"\nNote that for database redirection to take effect, you must also call SelectUpdates() for ",(0,a.jsx)(s.em,{children:"each"})," database to be restored, even if you intend to have ",(0,a.jsx)(s.em,{children:"all"})," databases restored.",(0,a.jsx)(s.br,{}),"\nThis method can be called before or after the SelectUpdates() calls.",(0,a.jsx)(s.br,{}),"\nSee SelectUpdates on how to ensure the SourceDatabase argument is in a proper form."]}),"\n",(0,a.jsx)(s.h3,{id:"selectupdates",children:"SelectUpdates"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'Method SelectUpdates(SourceDatabase As %String, GlobalName As %String = "") As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["To select a database or a global in a database to restore",(0,a.jsx)(s.br,{}),"\nIf GlobalName is not specified, all globals in SourceDatabase will be restored, unless you also call SelectUpdates(SourceDatabase,GlobalName) (before or after the call without GlobalName), in which case only the specified global(s) are restored.",(0,a.jsx)(s.br,{}),'\nGlobalName must begin with an alpha, "%", "*" or "?", followed by alphanumerics and "*?."s ("." for dot syntax).',(0,a.jsx)(s.br,{}),"\nYou must make sure the 'SourceDatabase' argument is in the canonical form acceptable to journal restore. One way to ensure that is illustrated in Example 2 at the beginning of the class document, that is, by calling CheckJournalIntegrity with 1 to have SourceDatabases populated with database paths collected from the journal files to be restored."]}),"\n",(0,a.jsx)(s.h3,{id:"run",children:"Run"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method Run() As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"To run journal restore"}),"\n",(0,a.jsx)(s.h3,{id:"monitor",children:"Monitor"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Monitor(StartTime As %TimeStamp, Interval As %Integer = 10) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"To monitor the progress of journal restore"})]})}function c(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>l,x:()=>o});var a=r(96540);const t={},n=a.createContext(t);function l(e){const s=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),a.createElement(n.Provider,{value:s},e.children)}}}]);