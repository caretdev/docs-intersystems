"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[25404],{66637:(e,n,s)=>{s.r(n),s.d(n,{contentTitle:()=>c,default:()=>o,frontMatter:()=>r,toc:()=>a});var t=s(74848),i=s(28453);const r={pagination_prev:null,pagination_next:null},c="%DeepSee.Query.Engine2",a=[{value:"Methods",id:"methods",level:2},{value:"%ExecuteForBucket",id:"executeforbucket",level:3},{value:"%SetFactIntoSpec",id:"setfactintospec",level:3},{value:"%CombineSpecs",id:"combinespecs",level:3},{value:"%ApplySlicerMask",id:"applyslicermask",level:3},{value:"%GetAxisInfo",id:"getaxisinfo",level:3},{value:"%CanonizeAddr",id:"canonizeaddr",level:3},{value:"%CanonizeRelationKey",id:"canonizerelationkey",level:3},{value:"PrintBits",id:"printbits",level:3}];function l(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"deepseequeryengine2",children:"%DeepSee.Query.Engine2"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Class %DeepSee.Query.Engine2 Extends %RegisteredObject [ System = 3 ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Contains additional logic for calculating the results of a DeepSee query."}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"executeforbucket",children:"%ExecuteForBucket"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod %ExecuteForBucket(pCube As %String, pKey As %String, pBucketNo As %Integer, pSlotNo As %Integer, ByRef pSections As %List, pTrace As %Boolean = 0, ByRef pStats) As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Compute the values of cells within the result cube.",(0,t.jsx)(n.br,{}),"\npCube is the name of the cube.",(0,t.jsx)(n.br,{}),"\npKey is the query key.",(0,t.jsx)(n.br,{}),"\npBucketNo is the logical bucket number to execute.",(0,t.jsx)(n.br,{}),"\npSlotNo is the physical bucket slot number containing the results.",(0,t.jsx)(n.br,{}),"\npSection, if defined, specifies, by axis, which sections of the result to calculate:",(0,t.jsx)(n.br,{}),"\npSection(axis) = $LB(startNode,endNode)",(0,t.jsx)(n.br,{}),"\npTrace is a debugging flag.",(0,t.jsx)(n.br,{}),"\npStats is an array of statistics."]}),"\n",(0,t.jsx)(n.h3,{id:"setfactintospec",children:"%SetFactIntoSpec"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod %SetFactIntoSpec(pFactCount As %Integer, pSpec As %List, pFact As %Integer, pKey As %String, pForce As %Boolean = 0) As %List [ Internal ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Insert the given fact/key into the given cell spec."}),"\n",(0,t.jsx)(n.h3,{id:"combinespecs",children:"%CombineSpecs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod %CombineSpecs(pFactCount As %Integer, pSpec1 As %List, pSpec2 As %List, pRelationsOnly = 0) As %List [ Internal ]\n"})}),"\n",(0,t.jsxs)(n.p,{children:['Combine 2 cell "specs" and return the resulting spec.',(0,t.jsx)(n.br,{}),"\nOptionally set the pRelationsOnly flag to combine only the relation components of the spec."]}),"\n",(0,t.jsx)(n.h3,{id:"applyslicermask",children:"%ApplySlicerMask"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod %ApplySlicerMask(pCube As %String, pSlicerKey As %String = "", ByRef pExtent, pHasRelations As %Boolean = 0, ByRef pRelation) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(n.p,{children:"Apply the slicer mask to a given query and bucket number."}),"\n",(0,t.jsx)(n.h3,{id:"getaxisinfo",children:"%GetAxisInfo"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod %GetAxisInfo(pCubeName As %String, pKey As %String, Output pAxisType As %String, Output pAxisKey As %String, Output pAxisSize As %Integer, Output pSlicerAxis As %Boolean) As %Integer\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For a given cube and query (key) return the number of axes (including the slicer).",(0,t.jsx)(n.br,{}),'\npAxisType is an array containing the type of each axis: "axis" or "slicer".',(0,t.jsx)(n.br,{}),"\npAxisNode is an array containing the top node number for each axis.",(0,t.jsx)(n.br,{}),"\npAxisSize is an array containing the number of leaf nodes for each axis.",(0,t.jsx)(n.br,{}),"\npSlicerAxis indicates whether there is a slicer axis. If there is this will contain the axis number for the slicer otherwise 0."]}),"\n",(0,t.jsx)(n.h3,{id:"canonizeaddr",children:"%CanonizeAddr"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod %CanonizeAddr(pAddr As %String) As %String [ Internal ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Take a cell address and return its canonic form."}),"\n",(0,t.jsx)(n.h3,{id:"canonizerelationkey",children:"%CanonizeRelationKey"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod %CanonizeRelationKey(pKeyCode As %String) As %String [ Internal ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Take a relationship key code and return its canonic form (put all pieces in alpha-order)."}),"\n",(0,t.jsx)(n.h3,{id:"printbits",children:"PrintBits"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod PrintBits(pMsg, pBits) [ Internal ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Diagnostic."})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var t=s(96540);const i={},r=t.createContext(i);function c(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);