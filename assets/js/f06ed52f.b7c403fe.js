"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[28335],{96435:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>i,default:()=>o,frontMatter:()=>a,toc:()=>l});var r=t(74848),n=t(28453);const a={pagination_prev:null,pagination_next:null},i="Config.LicenseServers",l=[{value:"Parameters",id:"parameters",level:2},{value:"CAPITALNAME",id:"capitalname",level:3},{value:"EMSSERVICE",id:"emsservice",level:3},{value:"Properties",id:"properties",level:2},{value:"Address",id:"address",level:3},{value:"Port",id:"port",level:3},{value:"KeyDirectory",id:"keydirectory",level:3},{value:"Methods",id:"methods",level:2},{value:"NameSet",id:"nameset",level:3},{value:"CreateCallBack",id:"createcallback",level:3},{value:"%OnBeforeSaveCallBack",id:"onbeforesavecallback",level:3},{value:"Default",id:"default",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"ListFetch",id:"listfetch",level:3},{value:"ListClose",id:"listclose",level:3}];function c(e){const s={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"configlicenseservers",children:"Config.LicenseServers"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Class Config.LicenseServers Extends (%Persistent, Config.CommonMultipleMethods, Config.CommonProperties, %SYSTEM.Help) [ Final, Inheritance = right, System = 4 ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["This class allows you to modify and view the [LicenseServers] section of the CPF file through programatic APIs. While properties are usually modified through the System Management portal, there may be some occasion where modifying them through the API's is best for your system. In all the Config methods, if you do not specify the CPFFile parameter, the currently active CPF file is used. If you wish to modify a CPF file which is not the currently active one, then specify the CPFFile you wish to modify in the method call.",(0,r.jsx)(s.br,{}),"\nThe Flags parameter does not normally need to be specified; the defaults are usually sufficient for most cases.",(0,r.jsx)(s.br,{}),"\nYou can use either the provided API's (Create/Get/Modify/Delete) to modify the properties by passing in the correct parameters, or use Object syntax to open and directly manipulate the config objects (Open() and Exists()). Most objects created here need only to specify the Name of the object, and 1 or 2 properties since the the defaults are what are commonly used for most cases."]}),"\n",(0,r.jsx)(s.p,{children:"EXAMPLE:"}),"\n",(0,r.jsxs)(s.p,{children:['; Use class methods to create an instance %SYS>s Name="LOCAL1" %SYS>s Properties("Address")="127.0.0.1" %SYS>s Status=##Class(Config.LicenseServers).Create(Name,.Properties) %SYS>i Status w !,"Error="',(0,r.jsx)(s.em,{children:'$SYSTEM.Status.GetErrorText(Status) ; Use class methods to modify properties %SYS>s Status=##Class(Config.LicenseServers).Get(Name,.Properties) %SYS>i Status w !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status) %SYS>zw Properties Properties("Address")="127.0.0.1" Properties("Port")=4002 %SYS>s Properties("Port")=4003 %SYS>s Status=##Class(Config.LicenseServers).Modify(Name,.Properties) %SYS>i Status w !,"Error="',(0,r.jsx)(s.em,{children:'$SYSTEM.Status.GetErrorText(Status) ; Now use Objects to modify properties %SYS>s Obj=##Class(Config.LicenseServers).Open(Name) ; We could have used i ##Class(Config.LicenseServers).Exists(Name,.Obj) instead of Open() %SYS>w Obj.Port 4002 %SYS>s Obj.Port=4003 %SYS>s Status=Obj.%Save() %SYS>i Status w !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status) ; Now delete the object we just created %SYS>s Status=##Class(Config.LicenseServers).Delete(Name) %SYS>i Status w !,"Error="_$SYSTEM.Status.GetErrorText(Status)']}),"\n",(0,r.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(s.h3,{id:"capitalname",children:"CAPITALNAME"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter CAPITALNAME = 1;\n"})}),"\n",(0,r.jsx)(s.p,{children:"License server names are all caps."}),"\n",(0,r.jsx)(s.h3,{id:"emsservice",children:"EMSSERVICE"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter EMSSERVICE [ Internal ] = "License";\n'})}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.h3,{id:"address",children:"Address"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Property Address As Config.Host(MAXLEN = 256, MINLEN = 0) [ InitialExpression = "127.0.0.1", Required ];\n'})}),"\n",(0,r.jsx)(s.p,{children:"IP Address of the license server."}),"\n",(0,r.jsx)(s.h3,{id:"port",children:"Port"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Port As %Integer [ InitialExpression = 4002, Required ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"IP Port of the license server."}),"\n",(0,r.jsx)(s.h3,{id:"keydirectory",children:"KeyDirectory"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property KeyDirectory As %String(MAXLEN = 256);\n"})}),"\n",(0,r.jsx)(s.p,{children:"Directory used to load license keys for distribution. At startup of a local License Server, the system will attempt to load license keys from all *.key files in this directory. These keys can then be requested by other Instances using this License Server."}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"nameset",children:"NameSet"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method NameSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Force the Server name to be uppercase."}),"\n",(0,r.jsx)(s.h3,{id:"createcallback",children:"CreateCallBack"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateCallBack(Obj As %ObjectHandle, Data As %String) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Called by the Create method during import from a CPF file."}),"\n",(0,r.jsx)(s.h3,{id:"onbeforesavecallback",children:"%OnBeforeSaveCallBack"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %OnBeforeSaveCallBack(insert As %Integer, Obj As %ObjectHandle) As %Status [ Internal, Private ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Stub method, may be overwritten by the individual class."}),"\n",(0,r.jsx)(s.h3,{id:"default",children:"Default"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Default(CPFFile As %String, Platform As %String) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Write a default LicenseServers section in a CPF file."}),"\n",(0,r.jsx)(s.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListExecute(ByRef %qHandle As %Binary, Names As %String = "*", CPFFile As %String = "", Flags As %Integer = 0, Format As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,r.jsx)(s.p,{children:"List LicenseServers in a CPF file."}),"\n",(0,r.jsxs)(s.p,{children:["Parameters:",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"Names"})," - Comma separated list of LicenseServer names",(0,r.jsx)(s.br,{}),'\n"*" - All records match',(0,r.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,r.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,r.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"CPFFile"})," - Name of the CPF file to use. A null string means use the active CPF file.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"Flags"})," - Currently ignored.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"Format"}),(0,r.jsx)(s.br,{}),"\n0 - Standard report list format",(0,r.jsx)(s.br,{}),"\n1 - ^CONFIG global format",(0,r.jsx)(s.br,{}),"\n2 - CPF file format format",(0,r.jsx)(s.br,{}),"\nNote: This query may change in future versions"]}),"\n",(0,r.jsx)(s.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"listclose",children:"ListClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})})]})}function o(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>l});var r=t(96540);const n={},a=r.createContext(n);function i(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);