"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[25122],{60863:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>c,frontMatter:()=>d,toc:()=>i});var s=t(74848),r=t(28453);const d={pagination_prev:null,pagination_next:null},a="%SQL.StatementMetadata",i=[{value:"Properties",id:"properties",level:2},{value:"statementType",id:"statementtype",level:3},{value:"interface",id:"interface",level:3},{value:"columnCount",id:"columncount",level:3},{value:"columns",id:"columns",level:3},{value:"columnIndex",id:"columnindex",level:3},{value:"formalParameters",id:"formalparameters",level:3},{value:"parameterCount",id:"parametercount",level:3},{value:"parameters",id:"parameters",level:3},{value:"objects",id:"objects",level:3},{value:"Methods",id:"methods",level:2},{value:"%GenerateMetadata",id:"generatemetadata",level:3},{value:"%OnNew",id:"onnew",level:3},{value:"getParameterMetadata",id:"getparametermetadata",level:3},{value:"%Display",id:"display",level:3},{value:"printMetadata",id:"printmetadata",level:3},{value:"GenerateRowType",id:"generaterowtype",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"sqlstatementmetadata",children:"%SQL.StatementMetadata"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Class %SQL.StatementMetadata Extends %RegisteredObject [ System = 4 ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"For details on using this class"}),", see ",(0,s.jsx)(n.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+%25SQL.StatementMetadata",children:"SQL Metadata"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Metadata describes the statement interface. The statement metadata contains the type of statement, the number of columns defined by the statement and the metadata for each column. Statement columns are of three primary types: result columns, parameters, and the return value. There is also a distinction between the metadata available for a prepared statement and for a statement that has been executed since not all statement results are known at prepare time. For all statement types except CALL, the statement metadata is all available at prepare time. CALL statement metadata that is available at prepare time includes the metadata from the statement itself and that metadata is not to be confused with the metadata defined by the SQL routine that is called. Each routine defines a formal interface that consists of an optional return value and option input, input-output and output parameters. An SQL routine might also return a single preplanned result set. That metadata is available at prepare time and it consists of some number of columns of type SQLRESULTCOL. An SQL routine might also declare that it returns some dynamic result sets, the metadata for which is not available until after the statement is executed and the result sets bound dynamic cursors."}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(n.h3,{id:"statementtype",children:"statementType"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property statementType As %Integer;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Integer value indicating the type of statement."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"1"}),(0,s.jsx)(n.th,{children:"SELECT"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"INSERT (also 'INSERT OR UPDATE')"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"UPDATE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"DELETE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"5"}),(0,s.jsx)(n.td,{children:"COMMIT"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"6"}),(0,s.jsx)(n.td,{children:"ROLLBACK"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"7"}),(0,s.jsx)(n.td,{children:"GRANT"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"8"}),(0,s.jsx)(n.td,{children:"REVOKE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"9"}),(0,s.jsx)(n.td,{children:"CREATE TABLE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"10"}),(0,s.jsx)(n.td,{children:"ALTER TABLE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"11"}),(0,s.jsx)(n.td,{children:"DROP TABLE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"12"}),(0,s.jsx)(n.td,{children:"CREATE VIEW"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"13"}),(0,s.jsx)(n.td,{children:"ALTER VIEW"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"14"}),(0,s.jsx)(n.td,{children:"DROP VIEW"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"15"}),(0,s.jsx)(n.td,{children:"CREATE INDEX"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"16"}),(0,s.jsx)(n.td,{children:"ALTER INDEX (Not supported)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"17"}),(0,s.jsx)(n.td,{children:"DROP INDEX"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"18"}),(0,s.jsx)(n.td,{children:"CREATE ROLE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"19"}),(0,s.jsx)(n.td,{children:"DROP ROLE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"20"}),(0,s.jsx)(n.td,{children:"SET TRANSACTION"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"21"}),(0,s.jsx)(n.td,{children:"START TRANSACTION"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"22"}),(0,s.jsx)(n.td,{children:"%INTRANSACTION"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"23"}),(0,s.jsx)(n.td,{children:"%BEGTRANS (Alias for START TRANSACTION)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"24"}),(0,s.jsx)(n.td,{children:"%INTRANS (Alias for %INTRANSACTION)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"25"}),(0,s.jsx)(n.td,{children:"GET (Not supported)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"26"}),(0,s.jsx)(n.td,{children:"SET OPTION"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"27"}),(0,s.jsx)(n.td,{children:"STATISTICS (UPDATE STATISTICS, not supported))"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"28"}),(0,s.jsx)(n.td,{children:"%CHECKPRIV"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"29"}),(0,s.jsx)(n.td,{children:"CREATE USER"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"30"}),(0,s.jsx)(n.td,{children:"ALTER USER"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"31"}),(0,s.jsx)(n.td,{children:"DROP USER"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"32"}),(0,s.jsx)(n.td,{children:"%CHECKPRIV (SQL Admin Privilege)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"33"}),(0,s.jsx)(n.td,{children:"GRANT (SQL Admin Privilege)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"34"}),(0,s.jsx)(n.td,{children:"REVOKE (SQL Admin Privilege)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"35"}),(0,s.jsx)(n.td,{children:"CREATE FUNCTION"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"36"}),(0,s.jsx)(n.td,{children:"CREATE METHOD"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"37"}),(0,s.jsx)(n.td,{children:"CREATE PROCEDURE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"38"}),(0,s.jsx)(n.td,{children:"CREATE QUERY"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"39"}),(0,s.jsx)(n.td,{children:"DROP FUNCTION"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"40"}),(0,s.jsx)(n.td,{children:"DROP METHOD"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"41"}),(0,s.jsx)(n.td,{children:"DROP PROCEDURE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"42"}),(0,s.jsx)(n.td,{children:"DROP QUERY"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"43"}),(0,s.jsx)(n.td,{children:"CREATE TRIGGER"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"44"}),(0,s.jsx)(n.td,{children:"DROP TRIGGER"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"45"}),(0,s.jsx)(n.td,{children:"CALL"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"46"}),(0,s.jsx)(n.td,{children:"SAVEPOINT"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"47"}),(0,s.jsx)(n.td,{children:"LOCK TABLE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"48"}),(0,s.jsx)(n.td,{children:"UNLOCK TABLE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"49"}),(0,s.jsx)(n.td,{children:"CREATE DATABASE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"50"}),(0,s.jsx)(n.td,{children:"DROP DATABASE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"51"}),(0,s.jsx)(n.td,{children:"USE DATABASE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"52"}),(0,s.jsx)(n.td,{children:"TUNE TABLE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"53"}),(0,s.jsx)(n.td,{children:"DECLARE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"54"}),(0,s.jsx)(n.td,{children:"CREATE MODEL"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"55"}),(0,s.jsx)(n.td,{children:"DROP MODEL"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"56"}),(0,s.jsx)(n.td,{children:"TRAIN MODEL"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"57"}),(0,s.jsx)(n.td,{children:"ALTER MODEL"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"58"}),(0,s.jsx)(n.td,{children:"VALIDATE MODEL"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"59"}),(0,s.jsx)(n.td,{children:"SET ML CONFIGURATION"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"60"}),(0,s.jsx)(n.td,{children:"CREATE ML CONFIGURATION"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"61"}),(0,s.jsx)(n.td,{children:"ALTER ML CONFIGURATION"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"62"}),(0,s.jsx)(n.td,{children:"DROP ML CONFIGURATION"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"63"}),(0,s.jsx)(n.td,{children:"FREEZE PLANS"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"64"}),(0,s.jsx)(n.td,{children:"UNFREEZE PLANS"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"65"}),(0,s.jsx)(n.td,{children:"PURGE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"66"}),(0,s.jsx)(n.td,{children:"BUILD INDEX"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"67"}),(0,s.jsx)(n.td,{children:"CREATE AGGREGATE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"68"}),(0,s.jsx)(n.td,{children:"DROP AGGREGATE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"69"}),(0,s.jsx)(n.td,{children:"LOAD"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"70"}),(0,s.jsx)(n.td,{children:"CREATE SCHEMA"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"71"}),(0,s.jsx)(n.td,{children:"DROP SCHEMA"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"72"}),(0,s.jsx)(n.td,{children:"CREATE SERVER"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"73"}),(0,s.jsx)(n.td,{children:"ALTER SERVER"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"74"}),(0,s.jsx)(n.td,{children:"DROP SERVER"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"75"}),(0,s.jsx)(n.td,{children:"CREATE FOREIGN TABLE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"76"}),(0,s.jsx)(n.td,{children:"ALTER FOREIGN TABLE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"77"}),(0,s.jsx)(n.td,{children:"DROP FOREIGN TABLE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"78"}),(0,s.jsx)(n.td,{children:"CANCEL QUERY"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"79"}),(0,s.jsx)(n.td,{children:"EXPLAIN"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"80"}),(0,s.jsx)(n.td,{children:"THROUGH"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"99"}),(0,s.jsx)(n.td,{children:"Anything not list above"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"interface",children:"interface"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property interface As %Integer;\n"})}),"\n",(0,s.jsx)(n.p,{children:'interface is an integer value indicating the routine interface: -2 - Return value, dynamic cursors returned (zero, one or more) -1 - No return value, dynamic cursors returned (RETURNRESULTSETS, zero one or more) 0 - No return value, no dynamic cursors (NOT RETURNRESULTSETS, aka "function" procedure although a function should return a value (interface = 2)) 1 - No return value, one pre-planned result set (AKA "query" procedure) 2 - Return value, no dynamic cursors (NOT RETURNRESULTSETS)'}),"\n",(0,s.jsx)(n.h3,{id:"columncount",children:"columnCount"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property columnCount As %Integer;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The number of columns defined as SQLRESULTCOL that are returned by executing this statement. This is the same as columns.Count()."}),"\n",(0,s.jsx)(n.h3,{id:"columns",children:"columns"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property columns As list Of %SQL.StatementColumn;\n"})}),"\n",(0,s.jsx)(n.p,{children:"columns is a collection of StatementColumn objects. Each StatementColumn object contains the metadata a column defined by the statement as an SQLRESULTCOL column type."}),"\n",(0,s.jsx)(n.h3,{id:"columnindex",children:"columnIndex"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Property columnIndex As %String(MAXLEN = "") [ MultiDimensional ];\n'})}),"\n",(0,s.jsx)(n.p,{children:"Index on column names and column number."}),"\n",(0,s.jsx)(n.h3,{id:"formalparameters",children:"formalParameters"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property formalParameters As list Of %SQL.StatementParameter;\n"})}),"\n",(0,s.jsx)(n.p,{children:"formalParameters is a collection of '?' parameters found in the prepared statement. It may differ from the parameters collection if literal replacement occurred. This property is mainly for internal use and metadata reporting. It is not meant to be used for the statement descriptor."}),"\n",(0,s.jsx)(n.h3,{id:"parametercount",children:"parameterCount"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property parameterCount As %Integer;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The number of parameters defined in this statement. This is the same as parameters.Count()."}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"parameters"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property parameters As list Of %SQL.StatementParameter;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The parameters collection contains the metadata for each actual parameter contained in the source statement. ..parameters.Count() is equivalent to the number of '?' parameters found in the source statement and the list position corresponds to the ordinal position of the '?' in the source statement."}),"\n",(0,s.jsx)(n.h3,{id:"objects",children:"objects"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property objects As list Of %SQL.StatementObject;\n"})}),"\n",(0,s.jsx)(n.p,{children:"A collection of StatementObject objects representing the columns that are object values."}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"generatemetadata",children:"%GenerateMetadata"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod %GenerateMetadata(ByRef pInfo As %Binary, pStatementType As %Integer = 0, ByRef pMetadata As %Binary, ByRef pParameters As %Binary = "", ByRef pObjects As %Binary, ByRef pActual As %List = "", ByRef pDynamic As %List = "") As %Status\n'})}),"\n",(0,s.jsx)(n.p,{children:"GenerateMetadata constructs the serialized metadata from the query processor's info array. IF %protocol 41 and higher: metadata = $lb() 1 - # of SELECT columns 2 - i:  1) Name 2) ODBC Type 3) Precision 4) Scale 5) NULLABLE (integer) 6) Column Label (same as Name) 7) Column Table Name 8) Column Schema Name 9) Column Qualifier Name - NULL 10) $Char(1)/$Char(0) string / $Extract position: 1) isAutoIncrement 2) isCaseSensitive 3) isCurrency 4) IsReadOnly 5) IsRowVersion 6) IsUnique 7) IsAliased 8) IsExpression 9) IsHidden 10) IsIdentity 11) IsKeyColumn 12) IsRowid 13) IsList j - # of Parameters j+1 - k:  1) ODBC Type 2) Precision 3) Scale 4) NULLABLE 5) colName 6) colType IF %protocol less than 41: metadata = $lb() 1 - # of SELECT columns 2 - i:  1) Name 2) ODBC Type 3) Precision 4) Scale 5) NULLABLE 6) Column Label (same as Name) 7) Column Table Name 8) Column Schema Name 9) Column Qualifier Name - NULL j - # of Parameters j+1 - k:  1) ODBC Type 2) Precision 3) Scale 4) NULLABLE"}),"\n",(0,s.jsx)(n.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Method %OnNew(pStatementType As %Integer = 0, ByRef pMetadata As %Binary = "", pParameters As %Binary = "", pObjects As %Binary = "", pArguments As %Binary = "", pActualBinding As %List = "", pDynamic As %List = "") As %Status [ Private, ProcedureBlock = 1, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"This callback method is invoked by the %New method to provide notification that a new instance of an object is being created."}),"\n",(0,s.jsx)(n.p,{children:"If this method returns an error then the object will not be created."}),"\n",(0,s.jsx)(n.p,{children:"It is passed the arguments provided in the %New call. When customizing this method, override the arguments with whatever variables and types you expect to receive from %New(). For example, if you're going to call %New, passing 2 arguments, %OnNew's signature could be:"}),"\n",(0,s.jsx)(n.p,{children:'Method %OnNew(dob as %Date = "", name as %Name = "") as %Status %SQL.StatementMetadata is a metadata class for dynamic statement metadata. The initial value is the metadata from a StatementCache object. or it is the result set object itself. pMetadata describes only the ROWTYPE metadata for a result set. Additional metadata is contained in pParameters and pObjects. The non-ROWTYPE metadata is a single node for non-result columns (in pParameters) and a single node for object metadata (in pObjects).'}),"\n",(0,s.jsx)(n.h3,{id:"getparametermetadata",children:"getParameterMetadata"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Method getParameterMetadata() As %List [ Internal ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"This method serializes the parameter collection as a metadata string in xDBC format."}),"\n",(0,s.jsx)(n.h3,{id:"display",children:"%Display"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Method %Display() As %Status\n"})}),"\n",(0,s.jsx)(n.p,{children:"Display metadata on the current device."}),"\n",(0,s.jsx)(n.h3,{id:"printmetadata",children:"printMetadata"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Method printMetadata(pMetadata As %RawString) As %Status\n"})}),"\n",(0,s.jsx)(n.h3,{id:"generaterowtype",children:"GenerateRowType"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Method GenerateRowType() As %Library.String(MAXLEN="") [ Internal, ServerOnly = 1 ]\n'})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(96540);const r={},d=s.createContext(r);function a(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);