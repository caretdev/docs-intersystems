"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[2507],{75360:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>c,frontMatter:()=>i,toc:()=>l});var s=n(74848),a=n(28453);const i={pagination_prev:null,pagination_next:null},r="%XML.Node",l=[{value:"Properties",id:"properties",level:2},{value:"Document",id:"document",level:3},{value:"DocId",id:"docid",level:3},{value:"NodeId",id:"nodeid",level:3},{value:"Childlist",id:"childlist",level:3},{value:"Descriptor",id:"descriptor",level:3},{value:"AttributeList",id:"attributelist",level:3},{value:"NodeType",id:"nodetype",level:3},{value:"NodeData",id:"nodedata",level:3},{value:"LocalName",id:"localname",level:3},{value:"QName",id:"qname",level:3},{value:"Namespace",id:"namespace",level:3},{value:"NamespaceIndex",id:"namespaceindex",level:3},{value:"Nil",id:"nil",level:3},{value:"SkipFlag",id:"skipflag",level:3},{value:"Methods",id:"methods",level:2},{value:"DocumentSet",id:"documentset",level:3},{value:"NodeIdSet",id:"nodeidset",level:3},{value:"NodeTypeGet",id:"nodetypeget",level:3},{value:"NodeTypeSet",id:"nodetypeset",level:3},{value:"NodeDataGet",id:"nodedataget",level:3},{value:"NodeDataSet",id:"nodedataset",level:3},{value:"GetText",id:"gettext",level:3},{value:"LocalNameGet",id:"localnameget",level:3},{value:"LocalNameSet",id:"localnameset",level:3},{value:"QNameGet",id:"qnameget",level:3},{value:"QNameSet",id:"qnameset",level:3},{value:"NamespaceGet",id:"namespaceget",level:3},{value:"NamespaceSet",id:"namespaceset",level:3},{value:"NamespaceIndexGet",id:"namespaceindexget",level:3},{value:"NamespaceIndexSet",id:"namespaceindexset",level:3},{value:"NilGet",id:"nilget",level:3},{value:"NilSet",id:"nilset",level:3},{value:"SkipFlagGet",id:"skipflagget",level:3},{value:"SkipFlagSet",id:"skipflagset",level:3},{value:"MoveToParent",id:"movetoparent",level:3},{value:"MoveToParentElement",id:"movetoparentelement",level:3},{value:"HasChildNodes",id:"haschildnodes",level:3},{value:"MoveToFirstChild",id:"movetofirstchild",level:3},{value:"MoveToLastChild",id:"movetolastchild",level:3},{value:"MoveToNextSibling",id:"movetonextsibling",level:3},{value:"MoveToPreviousSibling",id:"movetoprevioussibling",level:3},{value:"IsDescendant",id:"isdescendant",level:3},{value:"CopyAttributes",id:"copyattributes",level:3},{value:"AppendElement",id:"appendelement",level:3},{value:"AppendCharacter",id:"appendcharacter",level:3},{value:"AppendNode",id:"appendnode",level:3},{value:"AppendTree",id:"appendtree",level:3},{value:"InsertElement",id:"insertelement",level:3},{value:"InsertCharacter",id:"insertcharacter",level:3},{value:"InsertNode",id:"insertnode",level:3},{value:"InsertTree",id:"inserttree",level:3},{value:"ReplaceElement",id:"replaceelement",level:3},{value:"ReplaceCharacter",id:"replacecharacter",level:3},{value:"ReplaceNode",id:"replacenode",level:3},{value:"ReplaceTree",id:"replacetree",level:3},{value:"Remove",id:"remove",level:3},{value:"GetAttributeList",id:"getattributelist",level:3},{value:"GetNumberAttributes",id:"getnumberattributes",level:3},{value:"AttributeDefined",id:"attributedefined",level:3},{value:"FirstAttributeName",id:"firstattributename",level:3},{value:"LastAttributeName",id:"lastattributename",level:3},{value:"NextAttributeName",id:"nextattributename",level:3},{value:"PreviousAttributeName",id:"previousattributename",level:3},{value:"GetAttribute",id:"getattribute",level:3},{value:"GetAttributeNS",id:"getattributens",level:3},{value:"GetAttributeNamespace",id:"getattributenamespace",level:3},{value:"GetAttributeValue",id:"getattributevalue",level:3},{value:"GetAttributeValueNS",id:"getattributevaluens",level:3},{value:"GetAttributeQName",id:"getattributeqname",level:3},{value:"GetAttributeQNameNS",id:"getattributeqnamens",level:3},{value:"GetAttributeValueNamespace",id:"getattributevaluenamespace",level:3},{value:"GetAttributeValueNamespaceNS",id:"getattributevaluenamespacens",level:3},{value:"SetAttribute",id:"setattribute",level:3},{value:"RemoveAttribute",id:"removeattribute",level:3},{value:"RemoveAttributeNS",id:"removeattributens",level:3},{value:"IsAncestor",id:"isancestor",level:3},{value:"Serialize",id:"serialize",level:3},{value:"GetClassName",id:"getclassname",level:3}];function d(e){const t={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"xmlnode",children:"%XML.Node"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %XML.Node Extends %RegisteredObject [ System = 2 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"For details on using this class"}),", see ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+%25XML.Document",children:"Representing an XML Document as a DOM"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"%XML.Node may be used to navigate the an XML document which is represented as an Document Object Model (DOM) using the %XML.Document. The %XML.Document may be created either"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"from an XML document by accessing the Document property of %XML.Reader after calling an Openxxx method of %XML.Reader."}),"\n",(0,s.jsx)(t.li,{children:"as a new DOM by calling the CreateDocument of this class."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The %XML.Node instance that is used to navigate the DOM is created using the GetDocumentElement of %XML.Document."}),"\n",(0,s.jsx)(t.p,{children:"%XML.Node navigates through the nodes of the DOM rather than representing a fixed node in a DOM tree. The MoveToxxx methods are used to move through the DOM. The properties and methods of %XML.Node are then used to retrieve and modify the node contents."}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"document",children:"Document"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Document As %XML.Document;\n"})}),"\n",(0,s.jsx)(t.p,{children:"The DOM that this %XML.Node instance is navigating. The Document property may be set to change which DOM is being navigated. When the Document is set, %XML.Node is positioned at the document node, i.e. the parent of the root element."}),"\n",(0,s.jsx)(t.h3,{id:"docid",children:"DocId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property DocId As %String [ Internal ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Contains document id in DOM global."}),"\n",(0,s.jsx)(t.h3,{id:"nodeid",children:"NodeId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property NodeId As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"The id of the current node. The NodeId property may be set in order to move the specified node."}),"\n",(0,s.jsx)(t.h3,{id:"childlist",children:"Childlist"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Childlist As %String [ Internal ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Childlist associated with NodeId"}),"\n",(0,s.jsx)(t.h3,{id:"descriptor",children:"Descriptor"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Descriptor As %String [ Internal ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Descriptor associated with NodeId"}),"\n",(0,s.jsx)(t.h3,{id:"attributelist",children:"AttributeList"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property AttributeList As %String [ Internal, MultiDimensional ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"List of attributes"}),"\n",(0,s.jsx)(t.h3,{id:"nodetype",children:"NodeType"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property NodeType As %String [ Calculated ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Type of node: $$$xmlELEMENTNODE, $$$xmlTEXTNODE, $$$xmlWHITESPACENODE."}),"\n",(0,s.jsx)(t.h3,{id:"nodedata",children:"NodeData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property NodeData As %String [ Calculated ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Value of a character node."}),"\n",(0,s.jsx)(t.h3,{id:"localname",children:"LocalName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property LocalName As %String [ Calculated ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Local name for element node."}),"\n",(0,s.jsx)(t.h3,{id:"qname",children:"QName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property QName As %String [ Calculated ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Qname for element node. Only used for output as XML when the prefix is valid for the document."}),"\n",(0,s.jsx)(t.h3,{id:"namespace",children:"Namespace"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Namespace As %String [ Calculated ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"XML namespace for element node."}),"\n",(0,s.jsx)(t.h3,{id:"namespaceindex",children:"NamespaceIndex"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property NamespaceIndex As %String [ Calculated ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Index into XML namespace table for element node."}),"\n",(0,s.jsx)(t.h3,{id:"nil",children:"Nil"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Nil As %Boolean [ Calculated ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"True if xsi:nil or xsi:null specified as true or 1 for this element node."}),"\n",(0,s.jsx)(t.h3,{id:"skipflag",children:"SkipFlag"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property SkipFlag As %Boolean [ Calculated, Internal ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"True if node is to be skipped during canonicalization."}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"documentset",children:"DocumentSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method DocumentSet(document As %XML.Document) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"nodeidset",children:"NodeIdSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method NodeIdSet(id As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"When setting NodeId, the descriptor part must be recomputed in case the tree has been updated."}),"\n",(0,s.jsx)(t.h3,{id:"nodetypeget",children:"NodeTypeGet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method NodeTypeGet() As %String [ CodeMode = expression, Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"nodetypeset",children:"NodeTypeSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method NodeTypeSet(type As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"nodedataget",children:"NodeDataGet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method NodeDataGet() As %String [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"nodedataset",children:"NodeDataSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method NodeDataSet(val As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"gettext",children:"GetText"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetText(ByRef text, mixed As %Boolean = 0) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Get the text contents of an element node. GetText returns false if an error is encountered in evaluating the node. GetText returns true if text is found. The text which is found may be the empty string. The found text is appended to the text argument. The text argument is created if it is not already defined. If the mixed argument is = 1, then the mixed character and element content in the current node is returned in the text argument."}),"\n",(0,s.jsx)(t.h3,{id:"localnameget",children:"LocalNameGet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method LocalNameGet() As %String [ CodeMode = expression, Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"localnameset",children:"LocalNameSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method LocalNameSet(name As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"qnameget",children:"QNameGet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method QNameGet() As %String [ CodeMode = expression, Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"qnameset",children:"QNameSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method QNameSet(name As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"namespaceget",children:"NamespaceGet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method NamespaceGet() As %String [ CodeMode = expression, Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"namespaceset",children:"NamespaceSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method NamespaceSet(namespace As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"namespaceindexget",children:"NamespaceIndexGet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method NamespaceIndexGet() As %String [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"namespaceindexset",children:"NamespaceIndexSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method NamespaceIndexSet(nsIndex As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"nilget",children:"NilGet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method NilGet() As %Boolean [ CodeMode = expression, Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"nilset",children:"NilSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method NilSet(value As %Boolean) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"skipflagget",children:"SkipFlagGet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method SkipFlagGet() As %Boolean [ CodeMode = expression, Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"skipflagset",children:"SkipFlagSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method SkipFlagSet(value As %Boolean) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"movetoparent",children:"MoveToParent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method MoveToParent(restrictDocumentNode As %Boolean = 0) As %Boolean\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Move node to current node's parent.",(0,s.jsx)(t.br,{}),"\nIf restrictDocumentNode is true, then MoveTopParent will not move to document node."]}),"\n",(0,s.jsx)(t.h3,{id:"movetoparentelement",children:"MoveToParentElement"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method MoveToParentElement(localName As %String) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Move node to current node's ancestor which has the specified local name."}),"\n",(0,s.jsx)(t.h3,{id:"haschildnodes",children:"HasChildNodes"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method HasChildNodes(skipWhitespace As %Boolean = 0) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return non-zero (true) if this node has any child nodes."}),"\n",(0,s.jsx)(t.h3,{id:"movetofirstchild",children:"MoveToFirstChild"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method MoveToFirstChild(skipWhitespace As %Boolean = 0) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Move node to current node's first child node. Optionally skip whitespace nodes."}),"\n",(0,s.jsx)(t.h3,{id:"movetolastchild",children:"MoveToLastChild"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method MoveToLastChild(skipWhitespace As %Boolean = 0) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Move node to current node's last child node. Optionally skip whitespace nodes."}),"\n",(0,s.jsx)(t.h3,{id:"movetonextsibling",children:"MoveToNextSibling"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method MoveToNextSibling(skipWhitespace As %Boolean = 0) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Move node to current node's next sibling. Optionally skip whitespace nodes."}),"\n",(0,s.jsx)(t.h3,{id:"movetoprevioussibling",children:"MoveToPreviousSibling"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method MoveToPreviousSibling(skipWhitespace As %Boolean = 0) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Move node to current node's previous sibling. Optionally skip whitespace nodes."}),"\n",(0,s.jsx)(t.h3,{id:"isdescendant",children:"IsDescendant"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method IsDescendant(sourceNode As %XML.Node) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Check is a this node is the descendant of specified node"}),"\n",(0,s.jsx)(t.h3,{id:"copyattributes",children:"CopyAttributes"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method CopyAttributes(sourceNode As %XML.Node) [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Copy the attributes of the source node to this node."}),"\n",(0,s.jsx)(t.h3,{id:"appendelement",children:"AppendElement"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method AppendElement(localName As %String, namespace As %String = "", text As %String, qname As %String = "")\n'})}),"\n",(0,s.jsx)(t.p,{children:"Append new element node to the list of children of this node. If the text argument is specified, then character data is added as the child of the new element. The current node pointer does not change. This node is still the parent of the appended child."}),"\n",(0,s.jsx)(t.h3,{id:"appendcharacter",children:"AppendCharacter"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method AppendCharacter(text As %String, raw As %Boolean, parent As %String)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Append new character data node to the list of children of this element node. The current node pointer does not change. This node is still the parent of the appended child.",(0,s.jsx)(t.br,{}),"\nIf raw is true, the node is marked as $$$xmlRAWTEXTNODE",(0,s.jsx)(t.br,{}),"\nparent is for internal use only."]}),"\n",(0,s.jsx)(t.h3,{id:"appendnode",children:"AppendNode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method AppendNode(sourceNode As %XML.Node) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Append a copy of the specified node to the list of children of this node. The node to copy may be from any document. The current node pointer does not change. This node is still the parent of the appended child."}),"\n",(0,s.jsx)(t.h3,{id:"appendtree",children:"AppendTree"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method AppendTree(sourceNode As %XML.Node) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Append a copy of the specified node, including all its children, to the list of children of this node. The tree to copy may be from any document, but this node may not be a descendant of the source node. The current node pointer does not change. This node is still the parent of the appended child."}),"\n",(0,s.jsx)(t.h3,{id:"insertelement",children:"InsertElement"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method InsertElement(localName As %String, namespace As %String = "", ByRef child As %String, text As %String, qname As %String = "") As %String\n'})}),"\n",(0,s.jsx)(t.p,{children:"Insert a new element node to the list of children of this node. The new element is inserted just before the specified child node. The child node is specified by passing its NodeId. The child node is passed by reference so that it may be updated with a new NodeId after the insert. The nodeId of the inserted element is returned. If the text argument is specified, then character data is added as the child of the new element. The current node pointer does not change. This node is still the parent of the appended child."}),"\n",(0,s.jsx)(t.h3,{id:"insertcharacter",children:"InsertCharacter"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method InsertCharacter(text As %String, ByRef child As %String) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Insert a new character data node to the list of children of this element node. The new character data is inserted just before the specified child node. The child node is specified by passing its NodeId. The child node is passed by reference so that it may be updated with a new NodeId after the insert. The nodeId of the inserted character data node is returned. The current node pointer does not change. This node is still the parent of the appended child."}),"\n",(0,s.jsx)(t.h3,{id:"insertnode",children:"InsertNode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method InsertNode(sourceNode As %XML.Node, ByRef child As %String, Output sc As %Status) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Insert a copy of the specified node to the list of children of this node. The node to copy may be from any document. The new node is inserted just before the specified child node. The child node is specified by passing its NodeId. The child node is passed by reference so that it may be updated with a new NodeId after the insert. The nodeId of the inserted node is returned. The current node pointer does not change."}),"\n",(0,s.jsx)(t.h3,{id:"inserttree",children:"InsertTree"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method InsertTree(sourceNode As %XML.Node, ByRef child As %String, Output sc As %Status) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Insert a copy of the specified node, including its children, to the list of children of this node. The tree to copy may be from any document, but this node may not be a descendant of the source node. The new node is inserted just before the specified child node. The child node is specified by passing its NodeId. The child node is passed by reference so that it may be updated with a new NodeId after the insert. The nodeId of the inserted node is returned. The current node pointer does not change."}),"\n",(0,s.jsx)(t.h3,{id:"replaceelement",children:"ReplaceElement"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method ReplaceElement(localName As %String, namespace As %String = "", text As %String, qname As %String = "")\n'})}),"\n",(0,s.jsx)(t.p,{children:"Replace this node with an element node."}),"\n",(0,s.jsx)(t.h3,{id:"replacecharacter",children:"ReplaceCharacter"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method ReplaceCharacter(text As %String)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Replace this node with a character node."}),"\n",(0,s.jsx)(t.h3,{id:"replacenode",children:"ReplaceNode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method ReplaceNode(sourceNode As %XML.Node) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Replace this node with a copy of the specified node. The node to copy may be from any document. The current node pointer does not change."}),"\n",(0,s.jsx)(t.h3,{id:"replacetree",children:"ReplaceTree"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method ReplaceTree(sourceNode As %XML.Node) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Replace this node with a copy of the specified node including all its children. The tree to copy may be from any document, but this node may not be a descendant of the source node. The current node pointer does not change."}),"\n",(0,s.jsx)(t.h3,{id:"remove",children:"Remove"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Remove()\n"})}),"\n",(0,s.jsx)(t.p,{children:"Remove the current node and make its parent the current node."}),"\n",(0,s.jsx)(t.h3,{id:"getattributelist",children:"GetAttributeList"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetAttributeList() [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Get array of attributes: ..AttributeList(name)=attribute"}),"\n",(0,s.jsx)(t.h3,{id:"getnumberattributes",children:"GetNumberAttributes"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetNumberAttributes() As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return number of attributes for this element."}),"\n",(0,s.jsx)(t.h3,{id:"attributedefined",children:"AttributeDefined"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method AttributeDefined(attributeName As %String) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return non-zero (true) if attribute named attributeName exists for this element."}),"\n",(0,s.jsx)(t.h3,{id:"firstattributename",children:"FirstAttributeName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method FirstAttributeName() As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return attribute name for first attribute for this element."}),"\n",(0,s.jsx)(t.h3,{id:"lastattributename",children:"LastAttributeName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method LastAttributeName() As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return attribute name for last attribute for this element."}),"\n",(0,s.jsx)(t.h3,{id:"nextattributename",children:"NextAttributeName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method NextAttributeName(attributeName As %String) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return attribute name for next attribute for this element."}),"\n",(0,s.jsx)(t.h3,{id:"previousattributename",children:"PreviousAttributeName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method PreviousAttributeName(attributeName As %String) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return attribute name for previous attribute for this element."}),"\n",(0,s.jsx)(t.h3,{id:"getattribute",children:"GetAttribute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetAttribute(attributeName As %String, ByRef namespace As %String, ByRef value As %String, ByRef valueNamespace As %String)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return attribute data of attribute named attributeName for this element."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"namespace is the namespace URI from QName of attribute named attributeName for this element."}),"\n",(0,s.jsx)(t.li,{children:"value is the attribute value."}),"\n",(0,s.jsx)(t.li,{children:'valueNamespace is the namespace URI corresponding to the prefix when the attribute value is of the form "prefix:value".'}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"getattributens",children:"GetAttributeNS"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetAttributeNS(attributeName As %String, namespace As %String, ByRef value As %String, ByRef valueNamespace As %String)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return attribute data of attribute named attributeName in namespace for this element."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"value is the attribute value."}),"\n",(0,s.jsx)(t.li,{children:'valueNamespace is the namespace URI corresponding to the prefix when the attribute value is of the form "prefix:value".'}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"getattributenamespace",children:"GetAttributeNamespace"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetAttributeNamespace(attributeName As %String) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return namespace URI from QName of attribute named attributeName for this element."}),"\n",(0,s.jsx)(t.h3,{id:"getattributevalue",children:"GetAttributeValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetAttributeValue(attributeName As %String) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return value of attribute named attributeName for this element."}),"\n",(0,s.jsx)(t.h3,{id:"getattributevaluens",children:"GetAttributeValueNS"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetAttributeValueNS(attributeName As %String, namespace As %String) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return value of attribute named attributeName in namespace for this element."}),"\n",(0,s.jsx)(t.h3,{id:"getattributeqname",children:"GetAttributeQName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetAttributeQName(attributeName As %String) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return QName of attribute named attributeName for this element."}),"\n",(0,s.jsx)(t.h3,{id:"getattributeqnamens",children:"GetAttributeQNameNS"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetAttributeQNameNS(attributeName As %String, namespace As %String) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return QName of attribute named attributeName in namespace for this element."}),"\n",(0,s.jsx)(t.h3,{id:"getattributevaluenamespace",children:"GetAttributeValueNamespace"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetAttributeValueNamespace(attributeName As %String) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return namespace of value of attribute named attributeName for this element."}),"\n",(0,s.jsx)(t.h3,{id:"getattributevaluenamespacens",children:"GetAttributeValueNamespaceNS"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetAttributeValueNamespaceNS(attributeName As %String, namespace As %String) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return namespace value of attribute named attributeName in namespace for this element."}),"\n",(0,s.jsx)(t.h3,{id:"setattribute",children:"SetAttribute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method SetAttribute(attributeName As %String, namespace As %String = "", value As %String = "", valueNamespace As %String = "")\n'})}),"\n",(0,s.jsx)(t.p,{children:"Set attribute data of attribute named attributeName for this element."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"namespace is the namespace URI from QName of attribute named attributeName for this element."}),"\n",(0,s.jsx)(t.li,{children:"value is the attribute value."}),"\n",(0,s.jsx)(t.li,{children:'valueNamespace is the namespace URI corresponding to the prefix when the attribute value is of the form "prefix:value".'}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"removeattribute",children:"RemoveAttribute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method RemoveAttribute(attributeName As %String)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Remove attribute named attributeName for this element."}),"\n",(0,s.jsx)(t.h3,{id:"removeattributens",children:"RemoveAttributeNS"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method RemoveAttributeNS(attributeName As %String, namespace As %String)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Remove attribute named attributeName in namespace for this element."}),"\n",(0,s.jsx)(t.h3,{id:"isancestor",children:"IsAncestor"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method IsAncestor(nodeId As %String) As %Boolean [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Verify if this node is an ancestor of the specified node. Check if the referenced element contains the element specified by node id."}),"\n",(0,s.jsx)(t.h3,{id:"serialize",children:"Serialize"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Serialize(Output endElementText) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Serialize this node as element"}),"\n",(0,s.jsx)(t.h3,{id:"getclassname",children:"GetClassName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetClassName(BaseClassName As %String) As %String [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:'Get the class name the corresponds to this element. Return "" if not found.'})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var s=n(96540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);