"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[88405],{38024:(e,s,r)=>{r.r(s),r.d(s,{contentTitle:()=>l,default:()=>a,frontMatter:()=>i,toc:()=>t});var n=r(74848),o=r(28453);const i={pagination_prev:null,pagination_next:null},l="%SYSTEM.SQL.xDBC",t=[{value:"Methods",id:"methods",level:2},{value:"DisplayServerLogs",id:"displayserverlogs",level:3},{value:"PurgeServerLogs",id:"purgeserverlogs",level:3},{value:"SetServerLog",id:"setserverlog",level:3}];function c(e){const s={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"systemsqlxdbc",children:"%SYSTEM.SQL.xDBC"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class %SYSTEM.SQL.xDBC Extends %SYSTEM.Help [ Abstract, Not ProcedureBlock, System = 4 ]\n"})}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"displayserverlogs",children:"DisplayServerLogs"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DisplayServerLogs(pid As %Library.String = "") As %Status [ Internal, ProcedureBlock = 1 ]\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Display server-side ODBC/JDBC logs that were enabled by $SYSTEM.SQL.xDBC.SetServerLog()",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Parameter:"})]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"pid"})," Process id of the log to display. If not specified, the user will be given a list of PIDs that have logs defined to choose from. Examples:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Do $SYSTEM.SQL.xDBC.DisplayServerLogs() // Displays a list of PIDs with server logs the user can choose from to display"}),"\n",(0,n.jsx)(s.li,{children:"Do $SYSTEM.SQL.xDBC.PurgeServerLogs(3245) // Displays server log for process id 3245 in this namespace"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"purgeserverlogs",children:"PurgeServerLogs"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod PurgeServerLogs(pid As %Library.String = "*") As %Status [ Internal, ProcedureBlock = 1 ]\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Delete server-side ODBC/JDBC logs that were enabled by $SYSTEM.SQL.xDBC.SetServerLog()",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Parameter:"})]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"pid"}),' Process id of the log global to purge. "*" is the default, which means purge all logs for this namespace Examples:']}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Do $SYSTEM.SQL.xDBC.PurgeServerLogs() // Purges all server logs in this namespace"}),"\n",(0,n.jsx)(s.li,{children:'Do $SYSTEM.SQL.xDBC.PurgeServerLogs("*") // Purges all server logs in this namespace'}),"\n",(0,n.jsx)(s.li,{children:"Do $SYSTEM.SQL.xDBC.PurgeServerLogs(3245) // Purges server log for process id 3245 in this namespace"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"setserverlog",children:"SetServerLog"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SetServerLog(condition As %Library.String = "", systemWide As %Boolean = 0) As %Status [ Internal, ProcedureBlock = 1 ]\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Define the condition that determines if IRIS performs xDBC server-side logging.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Parameter:"})]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"condition"})," An ObjectScript expresion that determines if an ODBC/JDBC server process performs server-side logging. This should only be used at the direction of InterSystems Support personell for debugging purposes. Call with ",(0,n.jsx)(s.em,{children:'condition=""'})," or ",(0,n.jsx)(s.em,{children:"undefined"})," to turn logging off. ",(0,n.jsx)(s.em,{children:"systemWide"})," 1/0 flag that determines if the logging condition specified in ",(0,n.jsx)(s.em,{children:"condition"})," applies to just this namespace, or system wide. The default is 0, the condition applies to just this namespace. Examples:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'Do $SYSTEM.SQL.xDBC.SetServerLog("1") // Turns logging on for all xDBC connections to this namespace'}),"\n",(0,n.jsx)(s.li,{children:'Do $SYSTEM.SQL.xDBC.SetServerLog("$username=""BOBW""",1) // Turns logging on for all connections on this system when the username is BOBW.'}),"\n",(0,n.jsx)(s.li,{children:'Do $SYSTEM.SQL.xDBC.SetServerLog("$Get(^log)=1,0) // Turns logging on for all connections to this namespace if the ^log=1.'}),"\n",(0,n.jsx)(s.li,{children:'Do $SYSTEM.SQL.xDBC.SetServerLog("",0) // Turns logging off for all connections to this namespace.'}),"\n",(0,n.jsx)(s.li,{children:'Do $SYSTEM.SQL.xDBC.SetServerLog("",1) // Turns logging off for all connections to this server.'}),"\n"]})]})}function a(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>l,x:()=>t});var n=r(96540);const o={},i=n.createContext(o);function l(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);