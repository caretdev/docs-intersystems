"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[41727],{29883:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>i,default:()=>c,frontMatter:()=>a,toc:()=>o});var r=t(74848),n=t(28453);const a={pagination_prev:null,pagination_next:null},i="%UnitTest.TestCase",o=[{value:"Parameters",id:"parameters",level:2},{value:"AutoUserNames",id:"autousernames",level:3},{value:"AutoUserRoles",id:"autouserroles",level:3},{value:"AutoUserResources",id:"autouserresources",level:3},{value:"AutoGiveUsersNSAccess",id:"autogiveusersnsaccess",level:3},{value:"Properties",id:"properties",level:2},{value:"Manager",id:"manager",level:3},{value:"Debug",id:"debug",level:3},{value:"SkipTest",id:"skiptest",level:3},{value:"AutoPassword",id:"autopassword",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"OnBeforeAllTests",id:"onbeforealltests",level:3},{value:"OnAfterAllTests",id:"onafteralltests",level:3},{value:"OnBeforeOneTest",id:"onbeforeonetest",level:3},{value:"OnAfterOneTest",id:"onafteronetest",level:3},{value:"AssertEqualsViaMacro",id:"assertequalsviamacro",level:3},{value:"AssertNotEqualsViaMacro",id:"assertnotequalsviamacro",level:3},{value:"AssertTrueViaMacro",id:"asserttrueviamacro",level:3},{value:"AssertFailureViaMacro",id:"assertfailureviamacro",level:3},{value:"AssertSuccessViaMacro",id:"assertsuccessviamacro",level:3},{value:"AssertSkippedViaMacro",id:"assertskippedviamacro",level:3},{value:"AssertNotTrueViaMacro",id:"assertnottrueviamacro",level:3},{value:"AssertStatusOKViaMacro",id:"assertstatusokviamacro",level:3},{value:"AssertStatusNotOKViaMacro",id:"assertstatusnotokviamacro",level:3},{value:"AssertStatusEqualsViaMacro",id:"assertstatusequalsviamacro",level:3},{value:"AssertFilesSameViaMacro",id:"assertfilessameviamacro",level:3},{value:"AssertFilesSQLUnorderedSameViaMacro",id:"assertfilessqlunorderedsameviamacro",level:3},{value:"Checkout",id:"checkout",level:3},{value:"IsFileOrderSame",id:"isfileordersame",level:3},{value:"fileLines",id:"filelines",level:3},{value:"parseSQLFile",id:"parsesqlfile",level:3},{value:"IsFileSame",id:"isfilesame",level:3},{value:"getline",id:"getline",level:3},{value:"LogMessage",id:"logmessage",level:3},{value:"GetSourceLocation",id:"getsourcelocation",level:3},{value:"ParseAutoQuoted",id:"parseautoquoted",level:3}];function l(e){const s={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"unittesttestcase",children:"%UnitTest.TestCase"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Class %UnitTest.TestCase Extends %RegisteredObject [ System = 3 ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Extend this class to create new test case classes. In the test case class, for each test that you want to run, create a method whose name begins with ",(0,r.jsx)(s.strong,{children:"Test"}),". You'll use ",(0,r.jsx)(s.strong,{children:"%UnitTest.Manager.RunTest"})," to run all tests in a specified directory."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"TestCase"})," provides ",(0,r.jsx)(s.strong,{children:"$$$Assert*"})," macros that can be used to test conditions (located in the file ",(0,r.jsx)(s.strong,{children:"%outUnitTest.INC"}),"). The ",(0,r.jsx)(s.strong,{children:"$$$Assert*"})," macros call their associated methods automatically. A test fails if one or more of the macros fails, otherwise the test passes."]}),"\n",(0,r.jsx)(s.p,{children:"Click a method to go to the description of its macro:"}),"\n",(0,r.jsxs)(s.p,{children:["AssertTrueViaMacro",(0,r.jsx)(s.br,{}),"\nAssertNotTrueViaMacro",(0,r.jsx)(s.br,{}),"\nAssertEqualsViaMacro",(0,r.jsx)(s.br,{}),"\nAssertNotEqualsViaMacro",(0,r.jsx)(s.br,{}),"\nAssertStatusOKViaMacro",(0,r.jsx)(s.br,{}),"\nAssertStatusNotOKViaMacro",(0,r.jsx)(s.br,{}),"\nAssertFilesSameViaMacro",(0,r.jsx)(s.br,{}),"\nAssertFilesSQLUnorderedSameViaMacro",(0,r.jsx)(s.br,{}),"\nAssertSuccessViaMacro",(0,r.jsx)(s.br,{}),"\nAssertFailureViaMacro",(0,r.jsx)(s.br,{}),"\nAssertSkippedViaMacro"]}),"\n",(0,r.jsxs)(s.p,{children:["Use the ",(0,r.jsx)(s.strong,{children:"OnBefore*"})," methods to perform tasks before all test cases or before each test case.",(0,r.jsx)(s.br,{}),"\nUse the ",(0,r.jsx)(s.strong,{children:"OnAfter*"})," methods to perform tasks after all test cases or after each test case."]}),"\n",(0,r.jsxs)(s.p,{children:["You might use ",(0,r.jsx)(s.strong,{children:"OnBefore*"})," and ",(0,r.jsx)(s.strong,{children:"OnAfter*"})," to, for example, set environment variables before tests and unset them after tests or load files before tests and delete files after tests."]}),"\n",(0,r.jsx)(s.p,{children:"Click a method to go to the description:"}),"\n",(0,r.jsxs)(s.p,{children:["OnBeforeAllTests",(0,r.jsx)(s.br,{}),"\nOnBeforeOneTest",(0,r.jsx)(s.br,{}),"\nOnAfterAllTests",(0,r.jsx)(s.br,{}),"\nOnAfterOneTest"]}),"\n",(0,r.jsxs)(s.p,{children:["Note: In your test class, do not use property names that begin with ",(0,r.jsx)(s.strong,{children:"Test"}),", as the auto-generated Get and Set methods corresponding to the properties would also begin with ",(0,r.jsx)(s.strong,{children:"Test"}),", and, thus, be treated as test methods."]}),"\n",(0,r.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(s.h3,{id:"autousernames",children:"AutoUserNames"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter AutoUserNames As STRING;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["String of test users. If this parameter is set, then ",(0,r.jsx)(s.strong,{children:"%UnitTest.Manager"}),' will create these users before running any test methods. Users will be cleaned up after the test completes. Privileges for each user can be specified in AutoUserResources and AutoUserRoles. If AutoUserNames is left unspecified, the %UnitTest.Manager framework won\'t autocreate any test users. Separate usernames with ";" marks. White spaces are stripped out and ignored.']}),"\n",(0,r.jsx)(s.h3,{id:"autouserroles",children:"AutoUserRoles"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter AutoUserRoles As STRING;\n"})}),"\n",(0,r.jsx)(s.p,{children:'Optional: specifies roles for each test user in AutoUserNames. Separate lists of roles for different users with ";" marks. Separate different roles for the same user with "," marks. White spaces are stripped out and ignored.'}),"\n",(0,r.jsx)(s.h3,{id:"autouserresources",children:"AutoUserResources"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter AutoUserResources As STRING;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Optional: specifies resources for each test user in AutoUserNames. If a list of resources is specified for a user, the ",(0,r.jsx)(s.strong,{children:"%UnitTest.Manager"}),' will create a test role for that user that has the listed resources. Separate lists of roles for different users with ";" marks. Separate different roles for the same user with "," marks. Make sure to specify the permissions with the resource. For example: "%DB_%DEFAULT:RW". White spaces are stripped out and ignored.']}),"\n",(0,r.jsx)(s.h3,{id:"autogiveusersnsaccess",children:"AutoGiveUsersNSAccess"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter AutoGiveUsersNSAccess As BOOLEAN = 0;\n"})}),"\n",(0,r.jsx)(s.p,{children:"If 1, guarantees that all users listed in AutoUserNames have read-write access in the namespace the unit test is starting from. If 0, access is governed by the assigned roles and resources. Default is 0."}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.h3,{id:"manager",children:"Manager"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Manager As %UnitTest.Manager [ Private ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"Pointer to the %UnitTest.Manager object"}),"\n",(0,r.jsx)(s.h3,{id:"debug",children:"Debug"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Debug As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Use the ",(0,r.jsx)(s.strong,{children:"/debug"})," flag with ",(0,r.jsx)(s.strong,{children:"%UnitTest.Manager.RunTest"})," to break into debug mode on the first failure."]}),"\n",(0,r.jsx)(s.h3,{id:"skiptest",children:"SkipTest"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property SkipTest As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["The SkipTest property gets set when a test is being skipped. It will be handled by the ",(0,r.jsx)(s.strong,{children:"%UnitTest.Manager"})," to handle skipping tests from OnBeforeOneTest. ",(0,r.jsx)(s.strong,{children:"NOTE:"})," OnBeforeAllTests does not currently support skipping tests."]}),"\n",(0,r.jsx)(s.h3,{id:"autopassword",children:"AutoPassword"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property AutoPassword As %String;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["If ",(0,r.jsx)(s.strong,{children:"%UnitTest.Manager"})," creates test users specified by AutoUserNames, it will generate a random-string password for them to share and store it in this property. This password is generated anew each time the unit test is run."]}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnNew(initvalue) As %Status\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Run by the ",(0,r.jsx)(s.strong,{children:"%New"})," method to provide notification that a new instance of an object is being created. Passes initialization information to a new instance of the object."]}),"\n",(0,r.jsxs)(s.p,{children:["If this method returns an error then the object is not created.",(0,r.jsx)(s.br,{}),"\nIt is passed the arguments provided in the ",(0,r.jsx)(s.strong,{children:"%New"})," call. There may be up to ten of these arguments, ",(0,r.jsx)(s.em,{children:"p1...p10"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"onbeforealltests",children:"OnBeforeAllTests"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method OnBeforeAllTests() As %Status\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Run by ",(0,r.jsx)(s.strong,{children:"RunTest"})," once ",(0,r.jsx)(s.a,{href:"#OnBeforeAll",children:"before any test methods"})," in the test class are run. Can be used to set up a test environment that will be later cleaned up by ",(0,r.jsx)(s.strong,{children:"OnAfterAllTests"}),".",(0,r.jsx)(s.br,{}),"\nNOTE: OnBeforeAllTests does not currently support skipping tests. Calls to $$$AssertSkipped in OnBeforeAllTests may result in tests appearing to pass rather than being skipped."]}),"\n",(0,r.jsx)(s.p,{children:"Example: Setup and Cleanup of an environment:"}),"\n",(0,r.jsx)(s.p,{children:'Method OnBeforeAllTests() As %Status { \t//do setup stuff here  \tset ^inputMessage = "input message" \tquit $$$OK } Method OnAfterAllTests() As %Status { \t//do clean up stuff here \tkill ^inputMessage \tquit $$$OK }'}),"\n",(0,r.jsx)(s.h3,{id:"onafteralltests",children:"OnAfterAllTests"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method OnAfterAllTests() As %Status\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Run by ",(0,r.jsx)(s.strong,{children:"RunTest"})," once after all test methods in the test class are run. Can be used to tear down a test environment that was set up by ",(0,r.jsx)(s.strong,{children:"OnBeforeAllTests"})," See example in ",(0,r.jsx)(s.strong,{children:"OnBeforeAllTests"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"onbeforeonetest",children:"OnBeforeOneTest"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method OnBeforeOneTest(testname As %String) As %Status\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Run by ",(0,r.jsx)(s.strong,{children:"RunTest"})," immediately before each test method in the test class is run."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"testname"})," Name of the test to be run. Required."]}),"\n",(0,r.jsx)(s.h3,{id:"onafteronetest",children:"OnAfterOneTest"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method OnAfterOneTest(testname As %String) As %Status\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Run by ",(0,r.jsx)(s.strong,{children:"RunTest"})," immediately after each test method in the test class is run."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"testname"})," Name of the test to be run. Required."]}),"\n",(0,r.jsx)(s.h3,{id:"assertequalsviamacro",children:"AssertEqualsViaMacro"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method AssertEqualsViaMacro(autoquoted, value1, value2, description) As %Boolean\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Returns true if two values are equal. Invoke with the ",(0,r.jsx)(s.strong,{children:"$$$AssertEquals"})," macro, in the form"]}),"\n",(0,r.jsxs)(s.p,{children:["$$$AssertEquals(",(0,r.jsx)(s.em,{children:'value1,value2,"description"'}),")"]}),"\n",(0,r.jsx)(s.p,{children:"where:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"value1"}),",",(0,r.jsx)(s.em,{children:"value2"})," Values to be compared.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.em,{children:"description"})," Optional comment shown on the results page. If you don't include a description, the expression is used by default.  Example:"]}),"\n",(0,r.jsx)(s.p,{children:'do $$$AssertEquals(x,y,"x equals y")'}),"\n",(0,r.jsx)(s.h3,{id:"assertnotequalsviamacro",children:"AssertNotEqualsViaMacro"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method AssertNotEqualsViaMacro(autoquoted, value1, value2, description) As %Boolean\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Returns true if expressions are not equal. Invoke with the ",(0,r.jsx)(s.strong,{children:"$$$AssertNotEquals"})," macro in the form."]}),"\n",(0,r.jsxs)(s.p,{children:["$$$AssertNotEquals(",(0,r.jsx)(s.em,{children:'value1,value2,"description"'}),")"]}),"\n",(0,r.jsx)(s.p,{children:"where:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"value1"}),",",(0,r.jsx)(s.em,{children:"value2"})," Values to be compared.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.em,{children:"description"})," Optional comment shown on the results page. If you don't include a description, the expression is used by default.  Example:"]}),"\n",(0,r.jsx)(s.p,{children:'do $$$AssertNotEquals(x,y,"x is not equal to y")'}),"\n",(0,r.jsx)(s.h3,{id:"asserttrueviamacro",children:"AssertTrueViaMacro"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method AssertTrueViaMacro(autoquoted, value, description) As %Boolean\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Returns true if expression is true. Invoke with the ",(0,r.jsx)(s.strong,{children:"$$$AssertTrue"})," macro in the form."]}),"\n",(0,r.jsxs)(s.p,{children:["$$$AssertTrue(",(0,r.jsx)(s.em,{children:'value, "description"'}),")"]}),"\n",(0,r.jsx)(s.p,{children:"where:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"value"})," Expression to be evaluated.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.em,{children:"description"})," Optional comment shown on the results page. If you don't include a description, the expression is used by default.  Example:"]}),"\n",(0,r.jsx)(s.p,{children:'do $$$AssertTrue(x=y,"Expression x=y is true")'}),"\n",(0,r.jsx)(s.h3,{id:"assertfailureviamacro",children:"AssertFailureViaMacro"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method AssertFailureViaMacro(message) As %Boolean\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Unconditionally log a failure. Invoke with the ",(0,r.jsx)(s.strong,{children:"$$$AssertFailure"})," macro in the form."]}),"\n",(0,r.jsxs)(s.p,{children:["$$$AssertFailure(",(0,r.jsx)(s.em,{children:'"message"'}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["This assertion is intended to replace the convention of passing 0 to ",(0,r.jsx)(s.strong,{children:"$$$AssertTrue"}),". It's useful when the condition is implicit (e.g., in a try block after an exception should have been thrown), and when you don't want to pollute the log with many successful assertions (e.g., in a loop)."]}),"\n",(0,r.jsx)(s.h3,{id:"assertsuccessviamacro",children:"AssertSuccessViaMacro"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method AssertSuccessViaMacro(message) As %Boolean\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Unconditionally log success. Invoke with the ",(0,r.jsx)(s.strong,{children:"$$$AssertSuccess"})," macro in the form."]}),"\n",(0,r.jsxs)(s.p,{children:["$$$AssertSuccess(",(0,r.jsx)(s.em,{children:'"message"'}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["This assertion is intended to replace the convention of passing 1 to ",(0,r.jsx)(s.strong,{children:"$$$AssertTrue"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"assertskippedviamacro",children:"AssertSkippedViaMacro"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method AssertSkippedViaMacro(message) As %Boolean\n"})}),"\n",(0,r.jsxs)(s.p,{children:["An assertion to state that the test has been skipped for the reason described in the assertion's message This would typically be used if the preconditions for the test have not been met. After calling this assertion, you would typically would want to quit from the test method.",(0,r.jsx)(s.br,{}),"\nNOTE: OnBeforeAllTests does not currently support skipping tests. Calls to $$$AssertSkipped in OnBeforeAllTests may result in tests appearing to pass rather than being skipped."]}),"\n",(0,r.jsx)(s.h3,{id:"assertnottrueviamacro",children:"AssertNotTrueViaMacro"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method AssertNotTrueViaMacro(autoquoted, value, description) As %Boolean\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Returns true if the expression is not true. Invoke with the ",(0,r.jsx)(s.strong,{children:"$$$AssertNotTrue"})," macro in the form."]}),"\n",(0,r.jsxs)(s.p,{children:["$$$AssertNotTrue(",(0,r.jsx)(s.em,{children:'value, "description"'}),")"]}),"\n",(0,r.jsx)(s.p,{children:"where:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"value"})," Expression to be evaluated.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.em,{children:"description"})," Optional comment shown on the results page. If you don't include a description, the expression is used by default.  Example:"]}),"\n",(0,r.jsx)(s.p,{children:'do $$$AssertNotTrue(x=y,"Expression x=y is not true")'}),"\n",(0,r.jsx)(s.h3,{id:"assertstatusokviamacro",children:"AssertStatusOKViaMacro"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method AssertStatusOKViaMacro(autoquoted, status, description) As %Boolean\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Returns true if the status code is $$$OK. Invoke with the ",(0,r.jsx)(s.strong,{children:"$$$AssertStatusOK"})," macro in the form."]}),"\n",(0,r.jsxs)(s.p,{children:["$$$AssertStatusOK(",(0,r.jsx)(s.em,{children:'value, "description"'}),")"]}),"\n",(0,r.jsx)(s.p,{children:"where:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"value"})," Expression that returns a status code.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.em,{children:"description"})," Optional comment shown on the results page. If you don't include a description, the expression is used by default.  Example:"]}),"\n",(0,r.jsx)(s.p,{children:'set sc=##class(%Integer).IsValid("5") do $$$AssertStatusOK(sc,"Status is OK")'}),"\n",(0,r.jsx)(s.h3,{id:"assertstatusnotokviamacro",children:"AssertStatusNotOKViaMacro"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method AssertStatusNotOKViaMacro(autoquoted, status, description) As %Boolean\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Returns true if the status code is not a successful status code. Invoke with the ",(0,r.jsx)(s.strong,{children:"$$$AssertStatusNotOK"})," macro in the form."]}),"\n",(0,r.jsxs)(s.p,{children:["$$$AssertStatusNotOK(",(0,r.jsx)(s.em,{children:'value, "description"'}),")"]}),"\n",(0,r.jsx)(s.p,{children:"where:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"value"})," Expression that returns a status code.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.em,{children:"description"})," Optional comment shown on the results page. If you don't include a description, the expression is used by default.  Example:"]}),"\n",(0,r.jsx)(s.p,{children:'set sc=##class(%Integer).IsValid("$") do $$$AssertStatusNotOK(sc,"Status is NotOK")'}),"\n",(0,r.jsx)(s.h3,{id:"assertstatusequalsviamacro",children:"AssertStatusEqualsViaMacro"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method AssertStatusEqualsViaMacro(autoquoted, value1, value2, description) As %Boolean\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Returns true if two statuses are equal. Invoke with the ",(0,r.jsx)(s.strong,{children:"$$$AssertStatusEquals"})," macro in the form."]}),"\n",(0,r.jsxs)(s.p,{children:["$$$AssertStatusEquals(",(0,r.jsx)(s.em,{children:'value1,value2,"description"'}),")"]}),"\n",(0,r.jsx)(s.p,{children:"where:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"value1,value2"})," Expressions that return status codes.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.em,{children:"description"})," Optional comment shown on the results page. If you don't include a description, the expression is used by default.  Example: This is extremely useful to verify an expected failure."]}),"\n",(0,r.jsx)(s.p,{children:'s x=##class(Sample.Person).%New() s sc=x.%Save() s sc2=$system.Status.Error(5659,"Name") d $$$AssertStatusEquals(sc,sc2,"Verify Name property requirement at %Save")'}),"\n",(0,r.jsx)(s.h3,{id:"assertfilessameviamacro",children:"AssertFilesSameViaMacro"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method AssertFilesSameViaMacro(autoquoted, file1, file2, description) As %Boolean\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Returns true if two files are identical. Invoke with the ",(0,r.jsx)(s.strong,{children:"$$$AssertFilesSame"})," macro in the form."]}),"\n",(0,r.jsxs)(s.p,{children:["$$$AssertFilesSame(",(0,r.jsx)(s.em,{children:'file1,file2,"description"'}),")"]}),"\n",(0,r.jsx)(s.p,{children:"where:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"file1,file2"})," Files to compare. If no directory path is specified, the current UnitTest directory is used.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.em,{children:"description"})," Optional comment shown on the results page. If you don't include a description, the expression is used by default.  Example:"]}),"\n",(0,r.jsx)(s.p,{children:'do $$$AssertFilesSame(output.log,reference.log,"Comparing output.log to reference.log")'}),"\n",(0,r.jsx)(s.h3,{id:"assertfilessqlunorderedsameviamacro",children:"AssertFilesSQLUnorderedSameViaMacro"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Method AssertFilesSQLUnorderedSameViaMacro(autoquoted, file1, file2, description, ignoreOrderBy = 0, skipPlan = "", noheader = 0) As %Boolean\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Returns true if two files containing SQL query results contain the same unordered results. Invoke with the ",(0,r.jsx)(s.strong,{children:"$$$AssertFilesSQLUnorderedSame"})," macro in the form."]}),"\n",(0,r.jsxs)(s.p,{children:["$$$AssertFilesSQLUnorderedSame(",(0,r.jsx)(s.em,{children:'file1,file2,"description"'}),")"]}),"\n",(0,r.jsx)(s.p,{children:"where:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"file1,file2"})," Files to compare. If no directory path is specified, the current UnitTest directory is used.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.em,{children:"description"})," Optional comment shown on the results page. If you don't include a description, the expression is used by default. ",(0,r.jsx)(s.em,{children:"ignoreOrderBy"}),' Optional boolean stating to ignore "order by" when determining whether results are ordered ',(0,r.jsx)(s.em,{children:"skipPlan"}),' Optional boolean stating to not include output from ShowPlan in diff. This feature will be enabled by default if ^%SYS("HINT","%PARALLEL")=1 but off in any other cases ',(0,r.jsx)(s.em,{children:"noheader"})," Optional boolean stating that there is no header in the SQL reference file  Example:"]}),"\n",(0,r.jsx)(s.p,{children:'do $$$AssertFilesSQLUnorderedSame(output.log,reference.log,"Comparing output.log to reference.log")'}),"\n",(0,r.jsx)(s.h3,{id:"checkout",children:"Checkout"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method Checkout(file1, file2, forceref = 0)\n"})}),"\n",(0,r.jsx)(s.p,{children:"Helper method that will check out the one file in Perforce and copy the output to the reference file so we can diff the output and see if the change is expected or not to help when things like ShowPlan changes are made which can alter a lot of output"}),"\n",(0,r.jsx)(s.h3,{id:"isfileordersame",children:"IsFileOrderSame"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsFileOrderSame(file1, file2, diff, ignoreOrderBy, skipPlan, noheader) As %Boolean [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"filelines",children:"fileLines"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod fileLines(file) [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"parsesqlfile",children:"parseSQLFile"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod parseSQLFile(file, ByRef parsed, ignoreOrderBy, noheader) [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"isfilesame",children:"IsFileSame"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsFileSame(file1, file2, diff) As %Boolean [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"getline",children:"getline"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod getline(file, line, eof) [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"logmessage",children:"LogMessage"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method LogMessage(message)\n"})}),"\n",(0,r.jsxs)(s.p,{children:['Enter a message in quotes, such as "Start of test". Message is entered in the log (',(0,r.jsx)(s.strong,{children:"^UnitTest.Result"}),") when a test is run."]}),"\n",(0,r.jsx)(s.h3,{id:"getsourcelocation",children:"GetSourceLocation"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Method GetSourceLocation(pStack As %String = "") As %String [ Internal, Private ]\n'})}),"\n",(0,r.jsxs)(s.p,{children:['Return the source code location of the caller\'s stack frame in label[+offset]^[|"ns"|]doc.ext format. Returns ',(0,r.jsx)(s.strong,{children:"pStack"})," if it can't be mapped."]}),"\n",(0,r.jsx)(s.h3,{id:"parseautoquoted",children:"ParseAutoQuoted"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ParseAutoQuoted(argline As %String, type As %String) As %String [ Private ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"This method returns a useful description based on arguments used in the Assert macros."})]})}function c(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>o});var r=t(96540);const n={},a=r.createContext(n);function i(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);