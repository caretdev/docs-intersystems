"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[59854],{72988:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>l,default:()=>o,frontMatter:()=>a,toc:()=>r});var n=s(74848),i=s(28453);const a={pagination_prev:null,pagination_next:null},l="%DeepSee.CubeDefinition",r=[{value:"Parameters",id:"parameters",level:2},{value:"TRANSFORMXSL",id:"transformxsl",level:3},{value:"TRANSFORMERCLASS",id:"transformerclass",level:3},{value:"USECUBEVERSIONS",id:"usecubeversions",level:3},{value:"XDatas",id:"xdatas",level:2},{value:"Cube",id:"cube",level:3},{value:"Methods",id:"methods",level:2},{value:"%GetModel",id:"getmodel",level:3},{value:"%UpdateSharesIndex",id:"updatesharesindex",level:3},{value:"%GetSourceInfo",id:"getsourceinfo",level:3},{value:"%GetCountName",id:"getcountname",level:3},{value:"%GetCountCaption",id:"getcountcaption",level:3},{value:"%GetListingCaption",id:"getlistingcaption",level:3},{value:"%GetListingDescription",id:"getlistingdescription",level:3},{value:"%GetListingFieldCaption",id:"getlistingfieldcaption",level:3},{value:"%GetListingFieldDescription",id:"getlistingfielddescription",level:3},{value:"%GetLevelMemberCaption",id:"getlevelmembercaption",level:3},{value:"%GetMemberCaption",id:"getmembercaption",level:3},{value:"%GetMemberDescription",id:"getmemberdescription",level:3},{value:"%GetCellCachePreLoads",id:"getcellcachepreloads",level:3},{value:"%BuildFactTable",id:"buildfacttable",level:3},{value:"%UpdateFacts",id:"updatefacts",level:3},{value:"%UpdateFactsList",id:"updatefactslist",level:3},{value:"%DeleteFact",id:"deletefact",level:3},{value:"%CheckSourceId",id:"checksourceid",level:3},{value:"%GetSourceIds",id:"getsourceids",level:3},{value:"%OnGetSourceIds",id:"ongetsourceids",level:3},{value:"%KillCache",id:"killcache",level:3},{value:"%KillCellCache",id:"killcellcache",level:3},{value:"%KillResultsCache",id:"killresultscache",level:3},{value:"%KillFacts",id:"killfacts",level:3},{value:"%OnKillFacts",id:"onkillfacts",level:3},{value:"%OnBuildCube",id:"onbuildcube",level:3},{value:"%OnAfterBuildCube",id:"onafterbuildcube",level:3},{value:"%OnProcessFact",id:"onprocessfact",level:3},{value:"%OnAfterProcessFact",id:"onafterprocessfact",level:3},{value:"%GetFactCount",id:"getfactcount",level:3},{value:"%GetFactClass",id:"getfactclass",level:3},{value:"%GetFactIdRange",id:"getfactidrange",level:3},{value:"%GetCubeName",id:"getcubename",level:3},{value:"%IsAbstract",id:"isabstract",level:3},{value:"%IsCompound",id:"iscompound",level:3},{value:"%GetCubeCaption",id:"getcubecaption",level:3},{value:"%GetPrecomputeLevel",id:"getprecomputelevel",level:3},{value:"%CanDrillThrough",id:"candrillthrough",level:3},{value:"%GetRelationshipId",id:"getrelationshipid",level:3},{value:"%OnExecuteListing",id:"onexecutelisting",level:3},{value:"%GetFilterSpec",id:"getfilterspec",level:3},{value:"%OnGetFilterSpec",id:"ongetfilterspec",level:3},{value:"%GetDefaultListing",id:"getdefaultlisting",level:3},{value:"%OnGetDefaultListing",id:"ongetdefaultlisting",level:3},{value:"%GetActionList",id:"getactionlist",level:3},{value:"%InjectFact",id:"injectfact",level:3},{value:"%OnGetModel",id:"ongetmodel",level:3},{value:"%OnApplyOverrides",id:"onapplyoverrides",level:3},{value:"%Lookup",id:"lookup",level:3},{value:"%Rule",id:"rule",level:3},{value:"%OnGetComputedMembers",id:"ongetcomputedmembers",level:3}];function c(e){const t={br:"br",code:"code",cube:"cube",h1:"h1",h2:"h2",h3:"h3",header:"header",member:"member",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"deepseecubedefinition",children:"%DeepSee.CubeDefinition"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %DeepSee.CubeDefinition Extends %RegisteredObject [ Abstract, CompileAfter = (%DeepSee.Model.cube, %DeepSee.Generator), System = 4 ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:['Subclasses of this class are used to define "cubes" that can be queried by the DeepSee engine.',(0,n.jsx)(t.br,{}),"\nThe Cube XDATA block defines the contents of a DeepSee cube (dimensions and measures) as an XML document. When a subclass of this class is compiled, it generates the indexed fact table that holds the data for this cube.",(0,n.jsx)(t.br,{}),"\nThis class also provides the APIs needs to explore a cube's metadata that are used by the DeepSee utilities."]}),"\n",(0,n.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(t.h3,{id:"transformxsl",children:"TRANSFORMXSL"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter TRANSFORMXSL As STRING;\n"})}),"\n",(0,n.jsx)(t.p,{children:"This parameter is used to transform original cube definition. If it is defined in subclass then the cube definition is piped through XSLT transformation. XSL is taken from XData block named in this parameter."}),"\n",(0,n.jsx)(t.h3,{id:"transformerclass",children:"TRANSFORMERCLASS"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter TRANSFORMERCLASS As STRING;\n"})}),"\n",(0,n.jsx)(t.p,{children:"This parameter is used to transform original cube definition. If it is defined in a subclass then the cube definition is piped through the transformation defined in the class named by this parameter."}),"\n",(0,n.jsx)(t.h3,{id:"usecubeversions",children:"USECUBEVERSIONS"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter USECUBEVERSIONS = 0;\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This parameter controls whether the compile of this class will utilize the cube versioning mechanism. If set to 1, the current class definition will act as a generator for a distinct version of the cube.",(0,n.jsx)(t.br,{}),"\nThe version attribute of the ",(0,n.jsx)(t.cube,{children:" tag must be set if this is set to 1."})]}),"\n",(0,n.jsx)(t.h2,{id:"xdatas",children:"XDatas"}),"\n",(0,n.jsx)(t.h3,{id:"cube",children:"Cube"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'XData Cube [ XMLNamespace = "http://www.intersystems.com/deepsee" ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"This projection is used to keep track of when Cubes are compiled or deleted. This XData section provides the definition of the cube."}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"getmodel",children:"%GetModel"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetModel() As %DeepSee.Model.cube [ CodeMode = objectgenerator, Final, GenerateAfter = (%OnProcessFact, %OnApplyOverrides), Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return an instance of the %DeepSee.Model.cube meta-data object that describes this cube."}),"\n",(0,n.jsx)(t.h3,{id:"updatesharesindex",children:"%UpdateSharesIndex"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %UpdateSharesIndex(pCubeName As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:'Update the "sharesIndex" for the given cube.'}),"\n",(0,n.jsx)(t.h3,{id:"getsourceinfo",children:"%GetSourceInfo"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetSourceInfo(Output pInfo) As %Status [ CodeMode = objectgenerator, Final, GenerateAfter = %GetModel, Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return information on the source data for this cube."}),"\n",(0,n.jsx)(t.h3,{id:"getcountname",children:"%GetCountName"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetCountName() As %String [ CodeMode = objectgenerator, Final, GenerateAfter = %GetModel, Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the logical name for the %COUNT measure used by this cube."}),"\n",(0,n.jsx)(t.h3,{id:"getcountcaption",children:"%GetCountCaption"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetCountCaption() As %String [ CodeMode = objectgenerator, Final, GenerateAfter = %GetModel, Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:'Return the (localized) caption for the %COUNT measure used by this cube. Returns "" if this has not been overridden by the cube.'}),"\n",(0,n.jsx)(t.h3,{id:"getlistingcaption",children:"%GetListingCaption"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetListingCaption(pListing As %String) As %String [ CodeMode = objectgenerator, Final, GenerateAfter = %GetModel, Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the (localized) caption for a given listing within this cube."}),"\n",(0,n.jsx)(t.h3,{id:"getlistingdescription",children:"%GetListingDescription"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetListingDescription(pListing As %String) As %String [ CodeMode = objectgenerator, Final, GenerateAfter = %GetModel, Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the (localized) description for a given listing within this cube."}),"\n",(0,n.jsx)(t.h3,{id:"getlistingfieldcaption",children:"%GetListingFieldCaption"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetListingFieldCaption(pField As %String) As %String [ CodeMode = objectgenerator, Final, GenerateAfter = %GetModel, Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the (localized) caption for a given listing field within this cube."}),"\n",(0,n.jsx)(t.h3,{id:"getlistingfielddescription",children:"%GetListingFieldDescription"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetListingFieldDescription(pField As %String) As %String [ CodeMode = objectgenerator, Final, GenerateAfter = %GetModel, Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the (localized) description for a given listing field within this cube."}),"\n",(0,n.jsx)(t.h3,{id:"getlevelmembercaption",children:"%GetLevelMemberCaption"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetLevelMemberCaption(pDimNo As %Integer, pHierNo As %Integer, pLevelNo As %Integer, pName As %String) As %String [ CodeMode = objectgenerator, Final, GenerateAfter = %GetModel, Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"For a pre-defined member within a given level in this cube, return its (localized) caption (display name)."}),"\n",(0,n.jsx)(t.h3,{id:"getmembercaption",children:"%GetMemberCaption"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %GetMemberCaption(pDimName As %String, pHierName As %String = "", pLevelName As %String = "", pPropName As %String = "") As %String [ CodeMode = objectgenerator, Final, GenerateAfter = %GetModel, Internal ]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["For a given dimension, hierarchy, and level return its localized caption. The pPropName may be used to reference either a property or a pre-defined ",(0,n.jsx)(t.member,{children:" element."})]}),"\n",(0,n.jsx)(t.h3,{id:"getmemberdescription",children:"%GetMemberDescription"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %GetMemberDescription(pDimName As %String, pHierName As %String = "", pLevelName As %String = "", pPropName As %String = "") As %String [ CodeMode = objectgenerator, Final, GenerateAfter = %GetModel, Internal ]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["For a given dimension, hierarchy, and level return its localized description. The pPropName may be used to reference either a property or a pre-defined ",(0,n.jsx)(t.member,{children:" element."})]}),"\n",(0,n.jsx)(t.h3,{id:"getcellcachepreloads",children:"%GetCellCachePreLoads"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetCellCachePreLoads(Output pList) As %Status [ CodeMode = objectgenerator, Final, GenerateAfter = %GetModel, Internal ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Return the list of cell-cache values that should be pre-loaded. On return pList will contain an array of the form:",(0,n.jsx)(t.br,{}),"\npList(n,spec) = factNo"]}),"\n",(0,n.jsx)(t.h3,{id:"buildfacttable",children:"%BuildFactTable"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %BuildFactTable(pVerbose As %Boolean = 0, pFactList As %String = "") As %Status [ CodeMode = objectgenerator, GenerateAfter = (%GetModel, %OnProcessFact), Internal ]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Build the entire fact table with data from the source table.",(0,n.jsx)(t.br,{}),"\nIf pVerbose is true, then status information is written to the console.",(0,n.jsx)(t.br,{}),"\nUsers should not call this method; they should used the %BuildCube method in the %DeepSee.Utils class."]}),"\n",(0,n.jsx)(t.h3,{id:"updatefacts",children:"%UpdateFacts"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %UpdateFacts(pStartId As %String, pEndId As %String = "", pBatchMode As %Boolean = 0, pVerbose As %Boolean = 0, pTaskGroup As %String = "", Output pUpdates As %Integer, pRefProp As %String = "", pRefID As %String = "", ByRef pDimTables) As %Status [ CodeMode = objectgenerator, GenerateAfter = (%GetModel, %OnProcessFact) ]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Update Fact indices with data from the source table.",(0,n.jsx)(t.br,{}),"\nRead all rows from the source table between pStartId and pEndId.",(0,n.jsx)(t.br,{}),'\nIf pEndId is missing (""), then update one fact with source id pStartId',(0,n.jsx)(t.br,{}),"\n. If pVerbose is true, then write status information to the console.",(0,n.jsx)(t.br,{}),"\npTaskGroup is used when this method is called by the DeepSee TaskMaster.",(0,n.jsx)(t.br,{}),"\nIf pBatchMode is true, then perform the update in batch mode."]}),"\n",(0,n.jsx)(t.h3,{id:"updatefactslist",children:"%UpdateFactsList"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %UpdateFactsList(pFactList As %String = "", pStartId As %String, pEndId As %String = "", pBatchMode As %Boolean = 0, pVerbose As %Boolean = 0, pTaskGroup As %String = "", Output pUpdates As %Integer, pRefProp As %String = "", pRefID As %String = "", ByRef pDimTables) As %Status [ CodeMode = objectgenerator, GenerateAfter = (%GetModel, %OnProcessFact) ]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Update Fact indices with data from selected columns in the source table.",(0,n.jsx)(t.br,{}),"\nThe fact list is limited using the pFactList parameter, which can be either a comma-delimited list or a $LB. Read all rows from the source table between pStartId and pEndId.",(0,n.jsx)(t.br,{}),'\nIf pEndId is missing (""), then update one fact with source id pStartId',(0,n.jsx)(t.br,{}),"\n. If pVerbose is true, then write status information to the console.",(0,n.jsx)(t.br,{}),"\npTaskGroup is used when this method is called by the DeepSee TaskMaster.",(0,n.jsx)(t.br,{}),"\nIf pBatchMode is true, then perform the update in batch mode."]}),"\n",(0,n.jsx)(t.h3,{id:"deletefact",children:"%DeleteFact"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %DeleteFact(pSourceId As %String) As %Status [ CodeMode = objectgenerator, GenerateAfter = (%GetModel, %OnProcessFact) ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Delete facts from this cube that correspond to rows in the source table with source id pSourceId",(0,n.jsx)(t.br,{}),"\n. If pVerbose is true, then write status information to the console."]}),"\n",(0,n.jsx)(t.h3,{id:"checksourceid",children:"%CheckSourceId"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %CheckSourceId(pSourceId As %String, pVerbose As %Boolean = 0, pStatus As %Status) As %Boolean [ CodeMode = objectgenerator, GenerateAfter = (%GetModel, %OnProcessFact) ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Check to make sure a given ID exists in the source table."}),"\n",(0,n.jsx)(t.h3,{id:"getsourceids",children:"%GetSourceIds"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetSourceIds(Output pStartId As %String, Output pEndId As %String) As %Status [ CodeMode = objectgenerator, GenerateAfter = (%GetModel, %OnGetSourceIds), Internal ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Find the starting and ending id values for this cube's source data class.",(0,n.jsx)(t.br,{}),"\nThis is used when populating an entire cube."]}),"\n",(0,n.jsx)(t.h3,{id:"ongetsourceids",children:"%OnGetSourceIds"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnGetSourceIds(Output pStartId As %String, Output pEndId As %String) As %Status [ Abstract ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["If implemented, this method is called when a cube is being completely rebuilt *and* the rebuild is not using parallel processing.",(0,n.jsx)(t.br,{}),"\nOn return pStartId and pEndId must contain the first and last row id values for this cube's source data table, such that a query of the form:",(0,n.jsx)(t.br,{}),"\nSELECT ... FROM SOURCE WHERE %ID BETWEEN pStartId AND pEndId",(0,n.jsx)(t.br,{}),"\nwill return all the rows of the source table.",(0,n.jsx)(t.br,{}),"\nThis gives the developer the opportunity to bypass the built-in query that fetchs these values."]}),"\n",(0,n.jsx)(t.h3,{id:"killcache",children:"%KillCache"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %KillCache() As %Status [ Final ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Delete all cached values for this cube."}),"\n",(0,n.jsx)(t.h3,{id:"killcellcache",children:"%KillCellCache"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %KillCellCache() As %Status [ Final ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Delete the cell cache for this cube."}),"\n",(0,n.jsx)(t.h3,{id:"killresultscache",children:"%KillResultsCache"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %KillResultsCache() As %Status [ Final ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Delete the results cache for this cube."}),"\n",(0,n.jsx)(t.h3,{id:"killfacts",children:"%KillFacts"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %KillFacts() As %Status [ CodeMode = objectgenerator, GenerateAfter = %GetModel ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Delete all Facts as well as cached results from the cube."}),"\n",(0,n.jsx)(t.h3,{id:"onkillfacts",children:"%OnKillFacts"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnKillFacts() As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Notification that all facts have been deleted.",(0,n.jsx)(t.br,{}),"\nIf implemented, this is called when the %KillFacts is called."]}),"\n",(0,n.jsx)(t.h3,{id:"onbuildcube",children:"%OnBuildCube"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnBuildCube(pFactList As %List) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Notification that this cube is about to be built.",(0,n.jsx)(t.br,{}),"\nIf the build is invoked using a selected pFactList, this list will be passed to the callback in a $LB format."]}),"\n",(0,n.jsx)(t.h3,{id:"onafterbuildcube",children:"%OnAfterBuildCube"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnAfterBuildCube(pBuildStatus As %Status, pBuildErrors As %Boolean = 0) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Notification that this cube has completed its build.",(0,n.jsx)(t.br,{}),"\nThe status of the overall build is contained in pBuildStatus. If the build is otherwise successful, the value of pBuildStatus can be changed within the callback to become the new status returned by %BuildCube. If there were any build errors in the individual facts the count of these errors is reported in pBuildErrors"]}),"\n",(0,n.jsx)(t.h3,{id:"onprocessfact",children:"%OnProcessFact"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnProcessFact(pID As %String, ByRef pFacts As %String, Output pSkip As %Boolean, pInsert As %Boolean) As %Status [ Abstract ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Notification that a fact within the cube is to be processed (inserted or updated).",(0,n.jsx)(t.br,{}),"\npID is the id of the row in the source data being processed.",(0,n.jsx)(t.br,{}),"\npFacts is an array containing the values that will be used for the row, subscripted by fact name.",(0,n.jsx)(t.br,{}),"\npSkip is a boolean value returned by reference; If true then the record is not processed.",(0,n.jsx)(t.br,{}),"\npInsert is true if the current fact will be inserted into the cube's fact table."]}),"\n",(0,n.jsx)(t.h3,{id:"onafterprocessfact",children:"%OnAfterProcessFact"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnAfterProcessFact(pID As %String, ByRef pFactArray As %String, pUpdateStatus As %Status) As %Status [ Abstract ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Notification that a fact within the cube has been processed (inserted or updated). This method does not allow for any intervention of the processing of the fact, but rather provides an opportunity to react to success or failure in processing. The return status is ignored by the caller.",(0,n.jsx)(t.br,{}),"\npID is the id of the row in the source data being processed.",(0,n.jsx)(t.br,{}),"\npFacts is an array containing the values that will be used for the row, subscripted by fact name.",(0,n.jsx)(t.br,{}),"\npUpdateStatus is the status about to be returned by %ProcessFact. If an error is passed in, this error will already be logged in the DeepSee logs and the ^DeepSee.BuildErrors global."]}),"\n",(0,n.jsx)(t.h3,{id:"getfactcount",children:"%GetFactCount"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetFactCount() As %Integer\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return number of facts in this cube's fact table."}),"\n",(0,n.jsx)(t.h3,{id:"getfactclass",children:"%GetFactClass"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetFactClass() As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return name of the fact class used by this cube."}),"\n",(0,n.jsx)(t.h3,{id:"getfactidrange",children:"%GetFactIdRange"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetFactIdRange(Output pStartId As %Integer, Output pEndId As %Integer) As %Status [ Final ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the approximate starting and ending id values for this cubes fact table."}),"\n",(0,n.jsx)(t.h3,{id:"getcubename",children:"%GetCubeName"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeName() As %String [ CodeMode = objectgenerator, GenerateAfter = %GetModel ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the logical name of the cube defined by this class (in its original case)."}),"\n",(0,n.jsx)(t.h3,{id:"isabstract",children:"%IsAbstract"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %IsAbstract() As %Boolean [ CodeMode = objectgenerator, GenerateAfter = %GetModel ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Test whether this cube is abstract or not."}),"\n",(0,n.jsx)(t.h3,{id:"iscompound",children:"%IsCompound"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %IsCompound(Output pJoinList As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Test whether this cube is compound or not."}),"\n",(0,n.jsx)(t.h3,{id:"getcubecaption",children:"%GetCubeCaption"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeCaption() As %String [ CodeMode = objectgenerator, GenerateAfter = %GetModel ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the caption of the cube defined by this class. If not defined, the cube name is returned."}),"\n",(0,n.jsx)(t.h3,{id:"getprecomputelevel",children:"%GetPrecomputeLevel"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetPrecomputeLevel() As %Integer [ CodeMode = objectgenerator, GenerateAfter = %GetModel ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the precompute level of the cube defined by this class."}),"\n",(0,n.jsx)(t.h3,{id:"candrillthrough",children:"%CanDrillThrough"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %CanDrillThrough() As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Test if this cube supports drill through (listing) queries."}),"\n",(0,n.jsx)(t.h3,{id:"getrelationshipid",children:"%GetRelationshipId"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetRelationshipId(pRelationName As %String, pKey As %String, Output pID As %Integer) As %Status [ CodeMode = objectgenerator, GenerateAfter = %GetModel ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Take cube relationship with name pRelationName and transform the original key value pKey into the id of the corresponding fact in the fact table and return it via pID."}),"\n",(0,n.jsx)(t.h3,{id:"onexecutelisting",children:"%OnExecuteListing"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnExecuteListing(pSQL As %String) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Notification that a listing (drillthrough) query is about to be executed.",(0,n.jsx)(t.br,{}),"\nThis is called immediately before a listing query is executed. This is useful for cases where additional setup work is required before a listing query can run.",(0,n.jsx)(t.br,{}),"\npSQL is the listing query that will be executed."]}),"\n",(0,n.jsx)(t.h3,{id:"getfilterspec",children:"%GetFilterSpec"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetFilterSpec() As %String [ Final ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the filter spec for this cube, if any."}),"\n",(0,n.jsx)(t.h3,{id:"ongetfilterspec",children:"%OnGetFilterSpec"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnGetFilterSpec(pFilterSpec As %String) As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"This callback gives a Cube a chance to programmatically define a filter spec."}),"\n",(0,n.jsx)(t.h3,{id:"getdefaultlisting",children:"%GetDefaultListing"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetDefaultListing() As %String [ Final ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the name of the default listing for this cube, if any."}),"\n",(0,n.jsx)(t.h3,{id:"ongetdefaultlisting",children:"%OnGetDefaultListing"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnGetDefaultListing() As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:'This callback gives a cube a chance to programmatically return the name of the listing to use as its default listing. This must be the name of a defined listing within the cube. Return "" to use the pre-defined default listing.'}),"\n",(0,n.jsx)(t.h3,{id:"getactionlist",children:"%GetActionList"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetActionList(ByRef pActions As %List) As %Status [ Final, Internal ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Return list of possible actions for this Cube. This list is supplied from the KPI class specified by the cube's actionClass property, if defined. This drives the list of action selections for widget connected to this cube. This takes the form:",(0,n.jsx)(t.br,{}),"\npActions(n)=$LB(name,caption)"]}),"\n",(0,n.jsx)(t.h3,{id:"injectfact",children:"%InjectFact"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %InjectFact(ByRef pFactId As %String, ByRef pValues As %String, pDimensionsOnly As %Boolean = 0, pFactList As %String = "") As %Status [ CodeMode = objectgenerator, GenerateAfter = (%GetModel, %OnProcessFact) ]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Inject a fact into the fact table for this cube that is not associated with the source data table.",(0,n.jsx)(t.br,{}),'\npFactId is the id of the fact in the fact table. Set this to "" for an insert. On return it will contain the id used for the fact.',(0,n.jsx)(t.br,{}),"\npValues is an array of fact values subscripted by sourceProperty name (case must match ",(0,n.jsx)(t.strong,{children:"exactly"}),". If pDimensionsOnly is true, then only the dimension tables for the cube are affected; no facts are inserted."]}),"\n",(0,n.jsx)(t.h3,{id:"ongetmodel",children:"%OnGetModel"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnGetModel(pXSL As %String, tSource As %Stream.TmpCharacter, Output tOutput As %BinaryStream) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Callback used for XSL transforms."}),"\n",(0,n.jsx)(t.h3,{id:"onapplyoverrides",children:"%OnApplyOverrides"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnApplyOverrides() As %Status [ CodeMode = objectgenerator ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"If implemented, this is called before the cube model is processed. It gives the class a change to modify the ^DeepSee.Overrides global."}),"\n",(0,n.jsx)(t.h3,{id:"lookup",children:"%Lookup"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %Lookup(pTermList As %String = "", pKey As %String = "", pDefault As %String, pField As %String = "VALUE") As %String\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Lookup a single value with the given key and DeepSee term list name. This can be invoked by source expressions within this cube.",(0,n.jsx)(t.br,{}),"\npTermList is the name (with no extension) of the termlist.",(0,n.jsx)(t.br,{}),"\npKey is the key to lookup within the termlist.",(0,n.jsx)(t.br,{}),"\npDefault is an optional default value to return if the key is not found within the termlist.",(0,n.jsx)(t.br,{}),'\npField is an optional field to lookup within the termlist. By default, this is the "value" field.']}),"\n",(0,n.jsx)(t.h3,{id:"rule",children:"%Rule"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %Rule(pRuleName As %String = "") As %String\n'})}),"\n",(0,n.jsx)(t.p,{children:"Invoke a Business Rule on the current record within the source class. pID should contain the object id of the record within the source class. This can be invoked by source expressions within this cube."}),"\n",(0,n.jsx)(t.h3,{id:"ongetcomputedmembers",children:"%OnGetComputedMembers"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %OnGetComputedMembers(pDimName As %String, pHierName As %String, pLevelName As %String, ByRef pMemberList, pRollupKey As %String = "", ByRef pRange As %String = "") As %Status\n'})}),"\n",(0,n.jsxs)(t.p,{children:["This callback gives a Cube a chance to programmatically provide a set of members for a computed dimension.",(0,n.jsx)(t.br,{}),"\nFind the set of members for this computed dimension object satisfying pRollupKey and pRange (if applicable for this implementation).",(0,n.jsx)(t.br,{}),"\nThis is passed and returns:",(0,n.jsx)(t.br,{}),"\npMemberList($I(pMemberList)) = $LB(id (expression for MDX computed dimension),caption,key,[format])"]})]})}function o(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>r});var n=s(96540);const i={},a=n.createContext(i);function l(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);