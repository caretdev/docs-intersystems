"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[40297],{94141:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>l,default:()=>c,frontMatter:()=>r,toc:()=>i});var a=t(74848),n=t(28453);const r={pagination_prev:null,pagination_next:null},l="Config.Gateways",i=[{value:"Properties",id:"properties",level:2},{value:"AllowedIPAddresses",id:"allowedipaddresses",level:3},{value:"ConnectionTimeout",id:"connectiontimeout",level:3},{value:"Field1",id:"field1",level:3},{value:"Field2",id:"field2",level:3},{value:"Field3",id:"field3",level:3},{value:"InitializationTimeout",id:"initializationtimeout",level:3},{value:"LogFile",id:"logfile",level:3},{value:"Name",id:"name",level:3},{value:"Port",id:"port",level:3},{value:"Resource",id:"resource",level:3},{value:"Type",id:"type",level:3},{value:"passphraseList",id:"passphraselist",level:3},{value:"UseSharedMemory",id:"usesharedmemory",level:3},{value:"SSLConfigurationServer",id:"sslconfigurationserver",level:3},{value:"SSLConfigurationClient",id:"sslconfigurationclient",level:3},{value:"VerifySSLHostName",id:"verifysslhostname",level:3},{value:"ClassPath",id:"classpath",level:3},{value:"JavaHome",id:"javahome",level:3},{value:"JVMArgs",id:"jvmargs",level:3},{value:"DotNetVersion",id:"dotnetversion",level:3},{value:"FilePath",id:"filepath",level:3},{value:"Exec32",id:"exec32",level:3},{value:"PythonOptions",id:"pythonoptions",level:3},{value:"PythonPath",id:"pythonpath",level:3},{value:"Address",id:"address",level:3},{value:"Methods",id:"methods",level:2},{value:"TypeSet",id:"typeset",level:3},{value:"ClassPathSet",id:"classpathset",level:3},{value:"JavaHomeSet",id:"javahomeset",level:3},{value:"JVMArgsSet",id:"jvmargsset",level:3},{value:"DotNetVersionSet",id:"dotnetversionset",level:3},{value:"FilePathSet",id:"filepathset",level:3},{value:"Exec32Set",id:"exec32set",level:3},{value:"PythonOptionsSet",id:"pythonoptionsset",level:3},{value:"PythonPathSet",id:"pythonpathset",level:3},{value:"AddressSet",id:"addressset",level:3},{value:"CreateCallBack",id:"createcallback",level:3},{value:"CreateCallBackOptions",id:"createcallbackoptions",level:3},{value:"Default",id:"default",level:3},{value:"GetClassPropertiesCallBackOptions",id:"getclasspropertiescallbackoptions",level:3},{value:"Load",id:"load",level:3},{value:"%OnValidateObject",id:"onvalidateobject",level:3},{value:"%OnBeforeSaveCallBack",id:"onbeforesavecallback",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"ListFetch",id:"listfetch",level:3},{value:"ListClose",id:"listclose",level:3},{value:"ListShortExecute",id:"listshortexecute",level:3},{value:"ListShortFetch",id:"listshortfetch",level:3},{value:"ListShortClose",id:"listshortclose",level:3},{value:"Delete",id:"delete",level:3}];function o(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"configgateways",children:"Config.Gateways"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Class Config.Gateways Extends (%Persistent, Config.CommonMultipleMethods, Config.CommonProperties, %SYSTEM.Help) [ Final, Inheritance = right, System = 4 ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["This class allows you to modify and view the [Gateways] section of the CPF file through programatic APIs. While properties are usually modified through the System Management portal, there may be some occasion where modifying them through the API's is best for your system. In all the Config methods, if you do not specify the CPFFile parameter, the currently active CPF file is used. If you wish to modify a CPF file which is not the currently active one, then specify the CPFFile you wish to modify in the method call.",(0,a.jsx)(s.br,{}),"\nThe Flags parameter does not normally need to be specified; the defaults are usually sufficient for most cases.",(0,a.jsx)(s.br,{}),"\nYou can use either the provided API's (Create/Get/Modify/Delete) to modify the properties by passing in the correct parameters, or use Object syntax to open and directly manipulate the config objects (Open() and Exists()). Most objects created here need only to specify the Name of the object, and 1 or 2 properties since the the defaults are what are commonly used for most cases."]}),"\n",(0,a.jsx)(s.p,{children:"EXAMPLE:"}),"\n",(0,a.jsx)(s.p,{children:'; Use class methods to create an instance %SYS>s Name="NewGateway" %SYS>s Properties("Type")="Java" %SYS>s Properties("Server")="127.0.0.1" %SYS>s Properties("Port")=53273 %SYS>s Status=##Class(Config.Gateways).Create(Name,.Properties) %SYS>i \'Status w !,"Error="_$SYSTEM.Status.GetErrorText(Status)'}),"\n",(0,a.jsx)(s.p,{children:"IMPORTANT: If you are going to use Objects to manipulate the properties, you must set the Type of the object before you set any of the other properties."}),"\n",(0,a.jsx)(s.p,{children:'s Obj=##Class(Config.Gateways).%New() s Obj.Name="NewGateway" s Obj.Type="Java" ; Set other properties here after Type s Obj.Server="127.0.0.1" s Obj.Port=53274 s Status=Obj.%Save()'}),"\n",(0,a.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(s.h3,{id:"allowedipaddresses",children:"AllowedIPAddresses"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'Property AllowedIPAddresses As %String(MAXLEN = 32000) [ InitialExpression = "127.0.0.1" ];\n'})}),"\n",(0,a.jsx)(s.p,{children:"Which IP address, among the several IP addresses that the machine has, that allows incoming connections. The default is 127.0.0.1. Specify 0.0.0.0 to listen on all IP addresses local to the machine (127.0.0.1, VPN address, etc.). You can also specify a single existing local IP address to restrict the listener to that IP address."}),"\n",(0,a.jsx)(s.h3,{id:"connectiontimeout",children:"ConnectionTimeout"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property ConnectionTimeout As %Integer(MAXVAL = 300, MINVAL = 2) [ InitialExpression = 5 ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"Number of seconds to wait for a connection to be established with the Gateway Server."}),"\n",(0,a.jsx)(s.h3,{id:"field1",children:"Field1"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property Field1 As %String(MAXLEN = 32000) [ Internal ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"Field 1-n provide storage for specific connection types. They are aliased by the various fields."}),"\n",(0,a.jsx)(s.h3,{id:"field2",children:"Field2"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property Field2 As %String(MAXLEN = 32000) [ Internal ];\n"})}),"\n",(0,a.jsx)(s.h3,{id:"field3",children:"Field3"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property Field3 As %String(MAXLEN = 32000) [ Internal ];\n"})}),"\n",(0,a.jsx)(s.h3,{id:"initializationtimeout",children:"InitializationTimeout"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property InitializationTimeout As %Integer(MAXVAL = 300, MINVAL = 2) [ InitialExpression = 5 ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"Number of seconds to wait for a response during initialization of the Gateway Server."}),"\n",(0,a.jsx)(s.h3,{id:"logfile",children:"LogFile"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property LogFile As %String(MAXLEN = 1023);\n"})}),"\n",(0,a.jsx)(s.p,{children:"Fully qualified name of a file to log all communication between InterSystems IRIS and the Gateway Server. Usually this setting should be left blank, and used only for trouble-shooting."}),"\n",(0,a.jsx)(s.h3,{id:"name",children:"Name"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property Name As %String [ Required ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"Name of the Gateway"}),"\n",(0,a.jsx)(s.h3,{id:"port",children:"Port"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property Port As %Integer(MAXVAL = 65535, MINVAL = 1) [ Required ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"TCP port number for communication between the Gateway Server and the proxy classes in InterSystems IRIS."}),"\n",(0,a.jsx)(s.h3,{id:"resource",children:"Resource"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property Resource As %String(MAXLEN = 64, MINLEN = 0) [ InitialExpression = {$$$GatewayObjectResourceName} ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["The Resource name that controls access to this gateway.",(0,a.jsx)(s.br,{}),"\nIf no resource is defined, then it is a public gateway which anyone can use."]}),"\n",(0,a.jsx)(s.h3,{id:"type",children:"Type"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property Type As %String [ Required ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Type of the Object Gateway. It can have one of the following values:",(0,a.jsx)(s.br,{}),'\nType = "Remote" for remote connections',(0,a.jsx)(s.br,{}),'\nType = "Java" for Gateway for Java',(0,a.jsx)(s.br,{}),'\nType = "XSLT" for Gateway for XSLT',(0,a.jsx)(s.br,{}),'\nType = "JDBC" for Gateway for JDBC',(0,a.jsx)(s.br,{}),'\nType = "ODBC" for Gateway for ODBC',(0,a.jsx)(s.br,{}),'\nType = "ML" for Gateway for Integrated ML',(0,a.jsx)(s.br,{}),'\nType = ".NET" for Gateway for .NET',(0,a.jsx)(s.br,{}),'\nType = "Python" for Gateway for Python',(0,a.jsx)(s.br,{}),'\nType = "R" for Gateway for R',(0,a.jsx)(s.br,{}),"\nNote: JDBC, Java, IntegratedML, XSLT, and R gateways are all Java-based."]}),"\n",(0,a.jsx)(s.h3,{id:"passphraselist",children:"passphraseList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property passphraseList As %String [ Transient ];\n"})}),"\n",(0,a.jsx)(s.h3,{id:"usesharedmemory",children:"UseSharedMemory"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property UseSharedMemory As %Boolean [ InitialExpression = 1, Required ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"Use shared memory for connection if available."}),"\n",(0,a.jsx)(s.h3,{id:"sslconfigurationserver",children:"SSLConfigurationServer"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property SSLConfigurationServer As %String(MAXLEN = 64);\n"})}),"\n",(0,a.jsx)(s.p,{children:"Name of entry in Security.SSLConfigs class to be used for Server TLS/SSL"}),"\n",(0,a.jsx)(s.h3,{id:"sslconfigurationclient",children:"SSLConfigurationClient"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property SSLConfigurationClient As %String(MAXLEN = 64);\n"})}),"\n",(0,a.jsx)(s.p,{children:"Name of entry in Security.SSLConfigs class to be used for Client TLS/SSL"}),"\n",(0,a.jsx)(s.h3,{id:"verifysslhostname",children:"VerifySSLHostName"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property VerifySSLHostName As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"Should TLS/SSL client do Host Name Verification"}),"\n",(0,a.jsx)(s.h3,{id:"classpath",children:"ClassPath"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property ClassPath As %String(MAXLEN = 32000) [ Calculated, SqlComputeCode = { s {*} = {Field1} }, SqlComputed ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["CLASSPATH containing the files required to be passed as an argument when starting the JVM. The user should typically provide here the files containing the classes used via the Java-based Gateway. There is no need to include InterSystems' .jar files used by the Java-based Gateway. We assume that the user has properly quoted the classpath and supplied the correct separators for the platform in case of multiple files.",(0,a.jsx)(s.br,{}),"\n(This property applies only to Java-based Gateways.)"]}),"\n",(0,a.jsx)(s.h3,{id:"javahome",children:"JavaHome"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property JavaHome As %String(MAXLEN = 1023) [ Calculated, SqlComputeCode = { s {*} = {Field2} }, SqlComputed ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Location of the JVM (similar to the JAVA_HOME environment variable). It is used to find the target JVM and assemble the command to start the Gateway.",(0,a.jsx)(s.br,{}),"\nNote: If there is a default JVM on the machine that is usable without the need to specify its location, this setting may be left blank.",(0,a.jsx)(s.br,{}),"\n(This property applies only to Java-based Gateways.)"]}),"\n",(0,a.jsx)(s.h3,{id:"jvmargs",children:"JVMArgs"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property JVMArgs As %String(MAXLEN = 32000) [ Calculated, SqlComputeCode = { s {*} = {Field3} }, SqlComputed ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Optional arguments to be passed to the Java Virtual Machine (JVM) to include when assembling the command to start the Gateway.",(0,a.jsx)(s.br,{}),"\nFor example, you can specify system properties: ",(0,a.jsx)(s.strong,{children:"Dsystemvar=value"}),(0,a.jsx)(s.br,{}),"\nor set the maximum heap size: ",(0,a.jsx)(s.strong,{children:"Xmx256mb"}),(0,a.jsx)(s.br,{}),"\nand so on, as needed.",(0,a.jsx)(s.br,{}),"\n(This property applies only to Java-based Gateways.)"]}),"\n",(0,a.jsx)(s.h3,{id:"dotnetversion",children:"DotNetVersion"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property DotNetVersion As %String(MAXLEN = 32) [ Calculated, SqlComputeCode = { s {*} = {Field1} }, SqlComputed ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"Specified the .NET version to be used. Possible values are N6.0, N5.0, F4.6.2, F3.5. The default is N6.0."}),"\n",(0,a.jsx)(s.h3,{id:"filepath",children:"FilePath"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property FilePath As %String(MAXLEN = 1023) [ Calculated, SqlComputeCode = { s {*} = {Field2} }, SqlComputed ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Location of the Gateway Server executable. It is used to find the target executable and assemble the command to start the Gateway on a local machine.",(0,a.jsx)(s.br,{}),"\nIf this setting is not specified, the default directory used is ...\\dev\\dotnet\\bin\\ under the instance's installation directory, with the appropriate subdirectory selected according to the DotNetVersion setting.",(0,a.jsx)(s.br,{}),"\n(This property applies only to .NET Gateways.)"]}),"\n",(0,a.jsx)(s.h3,{id:"exec32",children:"Exec32"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property Exec32 As %Boolean [ Calculated, SqlComputeCode = { s {*} = {Field3} }, SqlComputed ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["On 64-bit platforms, indicates if the Object Gateway server is to be executed as 32-bit (default) or 64-bit.",(0,a.jsx)(s.br,{}),"\n(This property applies only to .NET Gateways and to 64-bit platforms.)"]}),"\n",(0,a.jsx)(s.h3,{id:"pythonoptions",children:"PythonOptions"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property PythonOptions As %String(MAXLEN = 32000) [ Calculated, SqlComputeCode = { s {*} = {Field1} }, SqlComputed ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"Optional Python options to be passed to the Python interpreter to include when assembling the command to start the Gateway."}),"\n",(0,a.jsx)(s.p,{children:"(This property applies only to Python Gateways.)"}),"\n",(0,a.jsx)(s.h3,{id:"pythonpath",children:"PythonPath"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property PythonPath As %String(MAXLEN = 1023) [ Calculated, SqlComputeCode = { s {*} = {Field2} }, SqlComputed ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Location of the Python Executable Path. It is used to find the target Python interpreter and get the command to start the Gateway.",(0,a.jsx)(s.br,{}),"\nNote: If there is a default Python interpreter on the machine that is usable without the need to specify its location, this setting may be left blank.",(0,a.jsx)(s.br,{}),"\n(This property applies only to Python Gateways.)"]}),"\n",(0,a.jsx)(s.h3,{id:"address",children:"Address"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property Address As %String(MAXLEN = 1023) [ Calculated, SqlComputeCode = { s {*} = {Field1} }, SqlComputed ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Server Address",(0,a.jsx)(s.br,{}),"\n(This property applies only to Remote Gateways.)"]}),"\n",(0,a.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(s.h3,{id:"typeset",children:"TypeSet"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method TypeSet(value As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"classpathset",children:"ClassPathSet"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method ClassPathSet(value As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"javahomeset",children:"JavaHomeSet"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method JavaHomeSet(value As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"jvmargsset",children:"JVMArgsSet"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method JVMArgsSet(value As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"dotnetversionset",children:"DotNetVersionSet"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method DotNetVersionSet(value As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"filepathset",children:"FilePathSet"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method FilePathSet(value As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"exec32set",children:"Exec32Set"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method Exec32Set(value As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"pythonoptionsset",children:"PythonOptionsSet"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method PythonOptionsSet(value As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"pythonpathset",children:"PythonPathSet"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method PythonPathSet(value As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"addressset",children:"AddressSet"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method AddressSet(value As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"createcallback",children:"CreateCallBack"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateCallBack(Obj As %ObjectHandle, Data As %String) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Called by the Create method during import from a CPF file."}),"\n",(0,a.jsx)(s.h3,{id:"createcallbackoptions",children:"CreateCallBackOptions"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateCallBackOptions(Obj As %ObjectHandle, Data As %String) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Callback from Create() after Obj is populated. Allows us to set the data into Field1-Field3 based on Type."}),"\n",(0,a.jsx)(s.h3,{id:"default",children:"Default"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Default(CPFFile As %String) As %Status [ Internal ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Callback from Create() after Obj is populates. Allows us to set the data into Field1-Field3 based on Type. Write a default Gateways section in a CPF file.",(0,a.jsx)(s.br,{}),"\nThis method assumes that a CPF file has been opened, and that a U CPFFile command has been executed before this is called."]}),"\n",(0,a.jsx)(s.h3,{id:"getclasspropertiescallbackoptions",children:"GetClassPropertiesCallBackOptions"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetClassPropertiesCallBackOptions(ByRef Properties As %String) [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Only return properties for the specific Type."}),"\n",(0,a.jsx)(s.h3,{id:"load",children:"Load"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Load(Obj As %ObjectHandle = "", Flags As %Integer = 1) As %Status [ Internal ]\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Load the parameters into memory and activate.",(0,a.jsx)(s.br,{}),"\nParameters:",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Obj"}),' = Handle to the object which caused the load. If "", then load everything, only called from STU.',(0,a.jsx)(s.br,{}),"\nIf a delete operation, then Obj is the NAME of the item which was deleted since the oject itself has already been deleted.",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Flags"})," = Type of modification.",(0,a.jsx)(s.br,{}),"\n0 - Modify",(0,a.jsx)(s.br,{}),"\n1 - Create/Insert",(0,a.jsx)(s.br,{}),"\n2 - Delete"]}),"\n",(0,a.jsx)(s.h3,{id:"onvalidateobject",children:"%OnValidateObject"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnValidateObject() As %Status [ Internal, Private, ServerOnly = 1 ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"This callback method is invoked by the %ValidateObject method to provide notification that the current object is being validated."}),"\n",(0,a.jsx)(s.p,{children:"If this method returns an error then %ValidateObject will fail."}),"\n",(0,a.jsx)(s.h3,{id:"onbeforesavecallback",children:"%OnBeforeSaveCallBack"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %OnBeforeSaveCallBack(insert As %Boolean, Obj As %ObjectHandle) As %Status [ Internal, Private ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListExecute(ByRef %qHandle As %Binary, Names As %String = "*", CPFFile As %String = "", Flags As %Integer = 0, Format As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"List Gateways in a CPF file."}),"\n",(0,a.jsxs)(s.p,{children:["Parameters:",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Names"})," - Comma separated list of Gateway names",(0,a.jsx)(s.br,{}),'\n"*" - All records match',(0,a.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,a.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,a.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"CPFFile"})," - Name of the CPF file to use. A null string means use the active CPF file.",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Flags"})," - Currently ignored.",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Format"}),(0,a.jsx)(s.br,{}),"\n0 - Standard report list format",(0,a.jsx)(s.br,{}),"\n1 - ^CONFIG global format",(0,a.jsx)(s.br,{}),"\n2 - CPF file format format",(0,a.jsx)(s.br,{}),"\nNote: This query may change in future versions"]}),"\n",(0,a.jsx)(s.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"listclose",children:"ListClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"listshortexecute",children:"ListShortExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListShortExecute(ByRef qHandle As %Binary, Filter As %String = "", CPFFile As %String = "", Flags As %Integer = 0, Format As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"List Gateways in a CPF file."}),"\n",(0,a.jsxs)(s.p,{children:["Parameters:",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Names"})," - Comma separated list of Gateway names",(0,a.jsx)(s.br,{}),'\n"*" - All records match',(0,a.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,a.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,a.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"CPFFile"})," - Name of the CPF file to use. A null string means use the active CPF file.",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Flags"})," - Currently ignored.",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Format"}),(0,a.jsx)(s.br,{}),"\n0 - Standard report list format",(0,a.jsx)(s.br,{}),"\n1 - ^CONFIG global format",(0,a.jsx)(s.br,{}),"\n2 - CPF file format format",(0,a.jsx)(s.br,{}),"\nNote: This query may change in future versions"]}),"\n",(0,a.jsx)(s.h3,{id:"listshortfetch",children:"ListShortFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListShortFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListShortExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"listshortclose",children:"ListShortClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListShortClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListShortExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"delete",children:"Delete"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Delete(name As %String) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Delete an External Language Server definition",(0,a.jsx)(s.br,{}),"\nParameters:",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Name"})," - Name of the ELS to delete."]}),"\n",(0,a.jsxs)(s.p,{children:["Return values:",(0,a.jsx)(s.br,{}),"\n%Status"]})]})}function c(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>i});var a=t(96540);const n={},r=a.createContext(n);function l(e){const s=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),a.createElement(r.Provider,{value:s},e.children)}}}]);