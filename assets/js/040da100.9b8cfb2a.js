"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[52669],{23749:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>l,default:()=>o,frontMatter:()=>i,toc:()=>a});var n=s(74848),r=s(28453);const i={pagination_prev:null,pagination_next:null},l="%DeepSee.ResultSet",a=[{value:"Properties",id:"properties",level:2},{value:"%Trace",id:"trace",level:3},{value:"%Query",id:"query",level:3},{value:"%Cube",id:"cube",level:3},{value:"%CubeKey",id:"cubekey",level:3},{value:"%QueryKey",id:"querykey",level:3},{value:"%Statistics",id:"statistics",level:3},{value:"%UseCache",id:"usecache",level:3},{value:"%Recompute",id:"recompute",level:3},{value:"%AxisCount",id:"axiscount",level:3},{value:"%NamedParameters",id:"namedparameters",level:3},{value:"%ListingSQL",id:"listingsql",level:3},{value:"%ListingResult",id:"listingresult",level:3},{value:"%ListingFields",id:"listingfields",level:3},{value:"%IsPlugIn",id:"isplugin",level:3},{value:"%PlugInListingKey",id:"pluginlistingkey",level:3},{value:"%PlugInContextName",id:"plugincontextname",level:3},{value:"%PlugInContextProp",id:"plugincontextprop",level:3},{value:"%PlugInFilters",id:"pluginfilters",level:3},{value:"%PlugInArguments",id:"pluginarguments",level:3},{value:"listing",id:"listing",level:3},{value:"listingRows",id:"listingrows",level:3},{value:"listingPageSize",id:"listingpagesize",level:3},{value:"listingPage",id:"listingpage",level:3},{value:"listingFormatList",id:"listingformatlist",level:3},{value:"%LockKeys",id:"lockkeys",level:3},{value:"%AncestorLockKeys",id:"ancestorlockkeys",level:3},{value:"%LockMode",id:"lockmode",level:3},{value:"%LocksEngaged",id:"locksengaged",level:3},{value:"%UseLocal",id:"uselocal",level:3},{value:"%ResultCacheLocation",id:"resultcachelocation",level:3},{value:"%AxisCacheLocation",id:"axiscachelocation",level:3},{value:"%SessionKey",id:"sessionkey",level:3},{value:"%SubqueryResultSets",id:"subqueryresultsets",level:3},{value:"%KeepLocalResults",id:"keeplocalresults",level:3},{value:"Methods",id:"methods",level:2},{value:"%ExecuteDirect",id:"executedirect",level:3},{value:"%PrepareMDX",id:"preparemdx",level:3},{value:"%PrepareObject",id:"prepareobject",level:3},{value:"%PrepareKey",id:"preparekey",level:3},{value:"%SetListing",id:"setlisting",level:3},{value:"%SetParameterContext",id:"setparametercontext",level:3},{value:"%GetQuery",id:"getquery",level:3},{value:"%GetQueryKey",id:"getquerykey",level:3},{value:"%GetCubeName",id:"getcubename",level:3},{value:"%GetLastDataUpdate",id:"getlastdataupdate",level:3},{value:"%GetLastSchemaUpdate",id:"getlastschemaupdate",level:3},{value:"%GetListingResultSet",id:"getlistingresultset",level:3},{value:"%GetListingSQL",id:"getlistingsql",level:3},{value:"%IsDrillThrough",id:"isdrillthrough",level:3},{value:"%GetQueryText",id:"getquerytext",level:3},{value:"%GetQueryStatus",id:"getquerystatus",level:3},{value:"%GetCellCount",id:"getcellcount",level:3},{value:"%CancelQuery",id:"cancelquery",level:3},{value:"%GetStatus",id:"getstatus",level:3},{value:"%GetParameterInfo",id:"getparameterinfo",level:3},{value:"%Execute",id:"execute",level:3},{value:"%ExecuteAsynch",id:"executeasynch",level:3},{value:"%ExecuteParameters",id:"executeparameters",level:3},{value:"%ExecuteAxes",id:"executeaxes",level:3},{value:"%ExecuteCells",id:"executecells",level:3},{value:"%ExecuteListing",id:"executelisting",level:3},{value:"RewriteQueryTag",id:"rewritequerytag",level:3},{value:"%ExecuteSessionCommand",id:"executesessioncommand",level:3},{value:"%GetAxisSize",id:"getaxissize",level:3},{value:"%GetColumnCount",id:"getcolumncount",level:3},{value:"%GetRowCount",id:"getrowcount",level:3},{value:"%GetAxisCount",id:"getaxiscount",level:3},{value:"%HasCellFormatOverride",id:"hascellformatoverride",level:3},{value:"%GetCellFormatOverride",id:"getcellformatoverride",level:3},{value:"%GetOrdinalValue",id:"getordinalvalue",level:3},{value:"%GetValue",id:"getvalue",level:3},{value:"%GetOrdinalLabel",id:"getordinallabel",level:3},{value:"%GetOrdinalLabelNodes",id:"getordinallabelnodes",level:3},{value:"%GetOrdinalKey",id:"getordinalkey",level:3},{value:"%GetRowTotal",id:"getrowtotal",level:3},{value:"%GetColumnTotal",id:"getcolumntotal",level:3},{value:"%GetGrandTotal",id:"getgrandtotal",level:3},{value:"%GetPlan",id:"getplan",level:3},{value:"%GetPlanForQuery",id:"getplanforquery",level:3},{value:"%ShowPlan",id:"showplan",level:3},{value:"%ShowPlanForQuery",id:"showplanforquery",level:3},{value:"%Print",id:"print",level:3},{value:"%PrintListing",id:"printlisting",level:3},{value:"%ParseMDX",id:"parsemdx",level:3},{value:"%GetAxisMembers",id:"getaxismembers",level:3},{value:"%ClearStatistics",id:"clearstatistics",level:3},{value:"%GetStatistic",id:"getstatistic",level:3},{value:"%PrintStatistics",id:"printstatistics",level:3},{value:"%FormatNumber",id:"formatnumber",level:3},{value:"%CopyDataFromModel",id:"copydatafrommodel",level:3},{value:"%GetModelInfo",id:"getmodelinfo",level:3},{value:"%GetSlicerForCellRange",id:"getslicerforcellrange",level:3},{value:"%TestFilters",id:"testfilters",level:3},{value:"%GetFiltersForCellRange",id:"getfiltersforcellrange",level:3},{value:"%GetCellMetric",id:"getcellmetric",level:3},{value:"%OutputXMLA",id:"outputxmla",level:3},{value:"%GetDefaultFormat",id:"getdefaultformat",level:3},{value:"%OutputJSON",id:"outputjson",level:3},{value:"%UpdatePendingResults",id:"updatependingresults",level:3},{value:"%RunQueryAuditCode",id:"runqueryauditcode",level:3},{value:"%CreateTable",id:"createtable",level:3},{value:"%SetSubqueryResultset",id:"setsubqueryresultset",level:3},{value:"%InitializeResultSet",id:"initializeresultset",level:3},{value:"%SetLockKeys",id:"setlockkeys",level:3},{value:"%SetAncestorLockKeys",id:"setancestorlockkeys",level:3},{value:"%ClearLockKeys",id:"clearlockkeys",level:3},{value:"%CopyLockKeysToQuery",id:"copylockkeystoquery",level:3},{value:"%AcquireLocks",id:"acquirelocks",level:3},{value:"%ReleaseLocks",id:"releaselocks",level:3},{value:"%SetLockMode",id:"setlockmode",level:3},{value:"%SwitchToLocalCache",id:"switchtolocalcache",level:3},{value:"%SwitchToCommonCache",id:"switchtocommoncache",level:3},{value:"%SetLocationLocal",id:"setlocationlocal",level:3},{value:"%SetLocationCommon",id:"setlocationcommon",level:3},{value:"%CopyResultToLocal",id:"copyresulttolocal",level:3},{value:"%ClearLocalResult",id:"clearlocalresult",level:3},{value:"%OnClose",id:"onclose",level:3}];function c(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"deepseeresultset",children:"%DeepSee.ResultSet"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %DeepSee.ResultSet Extends %ZEN.DataModel.DataModel [ System = 4 ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This class provides an API for executing queries against DeepSee cubes and viewing the results.",(0,n.jsx)(t.br,{}),"\nThis class extends Zen data model so that it can efficiently work within the Zen MVC framework."]}),"\n",(0,n.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(t.h3,{id:"trace",children:"%Trace"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %Trace As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Debugging flag. If true write out tracing information to the console."}),"\n",(0,n.jsx)(t.h3,{id:"query",children:"%Query"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %Query As %DeepSee.Query.query [ Internal ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Run-time query object that will serve as the source for this result set."}),"\n",(0,n.jsx)(t.h3,{id:"cube",children:"%Cube"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %Cube As %DeepSee.Datatype.string [ Internal ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Name of the cube this query is based on."}),"\n",(0,n.jsx)(t.h3,{id:"cubekey",children:"%CubeKey"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %CubeKey As %DeepSee.Datatype.string [ Internal ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Canonic (index) name of the cube this query is based on."}),"\n",(0,n.jsx)(t.h3,{id:"querykey",children:"%QueryKey"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %QueryKey As %DeepSee.Datatype.string [ Internal ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Query key for the current query."}),"\n",(0,n.jsx)(t.h3,{id:"statistics",children:"%Statistics"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %Statistics As %DeepSee.Datatype.string [ MultiDimensional ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Array of timing and performance statistics for the current query."}),"\n",(0,n.jsx)(t.h3,{id:"usecache",children:"%UseCache"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %UseCache As %Boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"If true, then use results caching for this query."}),"\n",(0,n.jsx)(t.h3,{id:"recompute",children:"%Recompute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %Recompute As %Boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"If true recompute previously run queries whose data has been updated otherwise return old values."}),"\n",(0,n.jsx)(t.h3,{id:"axiscount",children:"%AxisCount"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %AxisCount As %Integer [ Internal ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Holds the number of axes in the current query."}),"\n",(0,n.jsx)(t.h3,{id:"namedparameters",children:"%NamedParameters"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %NamedParameters As %Integer [ Internal, MultiDimensional ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Array of named parameters with current values. These are set by the %SetParameterContext method."}),"\n",(0,n.jsx)(t.h3,{id:"listingsql",children:"%ListingSQL"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %ListingSQL As %String(MAXLEN = 32000) [ Private ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"This holds the SQL query generated by a DRILLTHROUGH query. Use the %GetListingSQL to get this."}),"\n",(0,n.jsx)(t.h3,{id:"listingresult",children:"%ListingResult"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %ListingResult As %SQL.StatementResult [ Private ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"This holds the SQL StatementResult object created by a DRILLTHROUGH query. Use the %GetListingResult to get this."}),"\n",(0,n.jsx)(t.h3,{id:"listingfields",children:"%ListingFields"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %ListingFields As %List [ Private ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"List of fields to display for a DRILLTHROUGH query. Use the %GetListingResult to get this."}),"\n",(0,n.jsx)(t.h3,{id:"isplugin",children:"%IsPlugIn"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %IsPlugIn As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Indicates this is being run within the context of a plugin calculation."}),"\n",(0,n.jsx)(t.h3,{id:"pluginlistingkey",children:"%PlugInListingKey"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %PlugInListingKey As %String;\n"})}),"\n",(0,n.jsx)(t.p,{children:"Used in plugin concurrency protection"}),"\n",(0,n.jsx)(t.h3,{id:"plugincontextname",children:"%PlugInContextName"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %PlugInContextName As %String;\n"})}),"\n",(0,n.jsx)(t.p,{children:"Used in plugin concurrency protection"}),"\n",(0,n.jsx)(t.h3,{id:"plugincontextprop",children:"%PlugInContextProp"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %PlugInContextProp As %String;\n"})}),"\n",(0,n.jsx)(t.p,{children:"Used in plugin concurrency protection"}),"\n",(0,n.jsx)(t.h3,{id:"pluginfilters",children:"%PlugInFilters"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Property %PlugInFilters As %ZEN.Datatype.string(XMLPROJECTION = "NONE") [ MultiDimensional, Transient ];\n'})}),"\n",(0,n.jsx)(t.p,{children:"Used in plugin concurrency protection"}),"\n",(0,n.jsx)(t.h3,{id:"pluginarguments",children:"%PlugInArguments"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Property %PlugInArguments As %ZEN.Datatype.string(XMLPROJECTION = "NONE") [ MultiDimensional, Transient ];\n'})}),"\n",(0,n.jsx)(t.p,{children:"Used in plugin concurrency protection"}),"\n",(0,n.jsx)(t.h3,{id:"listing",children:"listing"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property listing As %String(MAXLEN = 255);\n"})}),"\n",(0,n.jsx)(t.p,{children:"If set, this is the name of a listing within the current cube to use for detail listings."}),"\n",(0,n.jsx)(t.h3,{id:"listingrows",children:"listingRows"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property listingRows As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Number of rows in the current listing query."}),"\n",(0,n.jsx)(t.h3,{id:"listingpagesize",children:"listingPageSize"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property listingPageSize As %Integer [ InitialExpression = 1000 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:'Number of rows within a listing query "page".'}),"\n",(0,n.jsx)(t.h3,{id:"listingpage",children:"listingPage"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property listingPage As %Integer [ InitialExpression = 1 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:'Current "page" of listing query.'}),"\n",(0,n.jsx)(t.h3,{id:"listingformatlist",children:"listingFormatList"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property listingFormatList As %String(MAXLEN = 5000);\n"})}),"\n",(0,n.jsx)(t.p,{children:"Formatting string to apply to listing results."}),"\n",(0,n.jsx)(t.h3,{id:"lockkeys",children:"%LockKeys"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %LockKeys As %String [ MultiDimensional ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Store the keys of any locks taken out by this query."}),"\n",(0,n.jsx)(t.h3,{id:"ancestorlockkeys",children:"%AncestorLockKeys"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %AncestorLockKeys As %String [ MultiDimensional ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Store the keys of any locks taken out by ancestors of this query in a lookup index. The presence of locks in this index will mean the locks are already protected at the time of execution for this ResultSet."}),"\n",(0,n.jsx)(t.h3,{id:"lockmode",children:"%LockMode"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Property %LockMode As %String [ InitialExpression = "exclusive" ];\n'})}),"\n",(0,n.jsx)(t.p,{children:"Lock mode determines whether this resultset is operating in read or write mode. Do not change this property directly - use %SetLockMode."}),"\n",(0,n.jsx)(t.h3,{id:"locksengaged",children:"%LocksEngaged"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %LocksEngaged As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Current state of the resultset locks."}),"\n",(0,n.jsx)(t.h3,{id:"uselocal",children:"%UseLocal"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %UseLocal As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"If true, a private copy of the resultset is available."}),"\n",(0,n.jsx)(t.h3,{id:"resultcachelocation",children:"%ResultCacheLocation"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %ResultCacheLocation As %String [ InitialExpression = {$Name($$$DeepSeeResultsGLVN)} ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"This points to the global location that has the results portion of the resultset."}),"\n",(0,n.jsx)(t.h3,{id:"axiscachelocation",children:"%AxisCacheLocation"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %AxisCacheLocation As %String [ InitialExpression = {$Name($$$DeepSeeAxisGLVN)} ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"This points to the global location that has the axis portion of the resultset."}),"\n",(0,n.jsx)(t.h3,{id:"sessionkey",children:"%SessionKey"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Property %SessionKey As %String [ InitialExpression = {$I($$$DeepSeeLocalResultsGLVN("session"))} ];\n'})}),"\n",(0,n.jsx)(t.p,{children:"A unique session key for the current resultset."}),"\n",(0,n.jsx)(t.h3,{id:"subqueryresultsets",children:"%SubqueryResultSets"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %SubqueryResultSets As %DeepSee.ResultSet [ MultiDimensional ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Container for the subquery resultsets of this execution."}),"\n",(0,n.jsx)(t.h3,{id:"keeplocalresults",children:"%KeepLocalResults"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property %KeepLocalResults As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"If true, the private copy of the resultset will not be deleted after the resultset is closed"}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"executedirect",children:"%ExecuteDirect"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %ExecuteDirect(pMDX As %String, ByRef pParms, Output pSC As %Status, pAsync = 0, pWait = 1) As %DeepSee.ResultSet\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Convenience method.",(0,n.jsx)(t.br,{}),"\nCreates a result set, prepares the query pMDX, and executes it.",(0,n.jsx)(t.br,{}),"\nReturns an instance of the result set."]}),"\n",(0,n.jsx)(t.h3,{id:"preparemdx",children:"%PrepareMDX"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %PrepareMDX(pMDX As %String = "", ByRef pVariables, Output pResolvedMDX) As %Status\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Given the text of a DeepSee MDX query, pMDX, parse it, convert it to a DeepSee run-time query object, and prepare it so that it can then be executed.",(0,n.jsx)(t.br,{}),"\npVariables is an optional list of pivot variable names and their current values. These are substituted for any pivot variable references within the query before it is parsed.",(0,n.jsx)(t.br,{}),"\npResolvedMDX is the query text after any pivot variable references have been resolved."]}),"\n",(0,n.jsx)(t.h3,{id:"prepareobject",children:"%PrepareObject"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %PrepareObject(pQuery As %DeepSee.Query.query, ByRef pVariables) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Given a DeepSee run-time query, pQuery, prepare it so that it can then be executed."}),"\n",(0,n.jsx)(t.h3,{id:"preparekey",children:"%PrepareKey"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %PrepareKey(pCubeName As %String = "", pQueryKey As %String = "", ByRef pParms, pOriginalMDX As %String = "") As %Status\n'})}),"\n",(0,n.jsx)(t.p,{children:"Given a DeepSee query key, pQueryKey, (returned by a previous query prepare), restore the state of the query so that it can be executed."}),"\n",(0,n.jsx)(t.h3,{id:"setlisting",children:"%SetListing"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetListing(pListing As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Specify which listing to use for detail listings."}),"\n",(0,n.jsx)(t.h3,{id:"setparametercontext",children:"%SetParameterContext"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetParameterContext(ByRef pContext) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Take a pre-defined set of named parameters and apply them to MDX queries executed against this result set.",(0,n.jsx)(t.br,{}),"\nThis makes it possible to add defined parameters to a query without adding them to the query text. This is different than supplying run-time values for parameters when executing the query.",(0,n.jsx)(t.br,{}),'\nThe named parameter context is an array subscripted by UPPER CASE parameter name and parameter attribute (which can be "VALUE","TYPE",or "CAPTION").',(0,n.jsx)(t.br,{}),"\nFor example:",(0,n.jsx)(t.br,{}),'\npContext("CITY","VALUE") = "New York"',(0,n.jsx)(t.br,{}),"\nCall this before preparing a query."]}),"\n",(0,n.jsx)(t.h3,{id:"getquery",children:"%GetQuery"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetQuery() As %DeepSee.Query.query\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the DeepSee run-time query object currently in use as the source for this result set."}),"\n",(0,n.jsx)(t.h3,{id:"getquerykey",children:"%GetQueryKey"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetQueryKey() As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the current Query Key for this Result Set. The result set must be prepared before calling this."}),"\n",(0,n.jsx)(t.h3,{id:"getcubename",children:"%GetCubeName"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetCubeName() As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the name of the cube this ResultSet is executing against. The result set must be prepared before calling this."}),"\n",(0,n.jsx)(t.h3,{id:"getlastdataupdate",children:"%GetLastDataUpdate"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetLastDataUpdate() As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Output the cube last data update date in the XMLA format"}),"\n",(0,n.jsx)(t.h3,{id:"getlastschemaupdate",children:"%GetLastSchemaUpdate"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetLastSchemaUpdate() As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Output the cube last schema update date in the XMLA format"}),"\n",(0,n.jsx)(t.h3,{id:"getlistingresultset",children:"%GetListingResultSet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetListingResultSet(Output pRS As %SQL.StatementResult, Output pFieldList As %List) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Prepare and execute the listing query for the current MDX statement. Return an SQL ResultSet that can be used to iterate over the listing. If pFieldList is not empty, then it is a $List of fields that should be selected and displayed from the result set."}),"\n",(0,n.jsx)(t.h3,{id:"getlistingsql",children:"%GetListingSQL"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetListingSQL() As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the SQL statement needed to drill into the source table for a DRILLTHROUGH statement. This may return the name of the DataConnector class if that is how the listing is defined."}),"\n",(0,n.jsx)(t.h3,{id:"isdrillthrough",children:"%IsDrillThrough"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %IsDrillThrough() As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Test if this is a DRILLTHROUGH statement."}),"\n",(0,n.jsx)(t.h3,{id:"getquerytext",children:"%GetQueryText"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetQueryText() As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the text of the query currently associated with this result set. This text is generated from the query parse tree and represents the canonic form of the query."}),"\n",(0,n.jsx)(t.h3,{id:"getquerystatus",children:"%GetQueryStatus"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetQueryStatus(pCubeName As %String, pQueryKey As %String, Output pPercentComplete As %Double, Output pSC As %Status, Output pPendingResults As %Boolean) As %Integer\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Given a cube name and a query key (as returned by the %ExecuteAsync) return the current status of the query.",(0,n.jsx)(t.br,{}),"\n0 indicates that nothing has been done; 100 indicates that query execution is complete and that results are ready; a value in between means that work is ongoing."]}),"\n",(0,n.jsx)(t.h3,{id:"getcellcount",children:"%GetCellCount"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetCellCount(pCubeName As %String, pQueryKey As %String, Output pSC As %Status) As %Integer\n"})}),"\n",(0,n.jsx)(t.p,{children:"Given a cube name and a query key (as returned by the %ExecuteAsync) return the number of result cells that are returned by the query."}),"\n",(0,n.jsx)(t.h3,{id:"cancelquery",children:"%CancelQuery"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %CancelQuery(pCubeName As %String, pQueryKey As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Cancel the query, if running, specified by the cube name and query key."}),"\n",(0,n.jsx)(t.h3,{id:"getstatus",children:"%GetStatus"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetStatus(Output pPercentComplete As %Double, Output pSC As %Status, Output pPendingResults As %Boolean) As %Integer\n"})}),"\n",(0,n.jsx)(t.p,{children:"Instance method version of %GetQueryStatus."}),"\n",(0,n.jsx)(t.h3,{id:"getparameterinfo",children:"%GetParameterInfo"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetParameterInfo(Output pParms) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the set of named parameters values defined by the query."}),"\n",(0,n.jsx)(t.h3,{id:"execute",children:"%Execute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Execute(ByRef pParms) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Execute the current prepared query for this ResultSet.",(0,n.jsx)(t.br,{}),"\nIf defined, pParms is an array of parameter values subscripted by parameter name (case-insensitive). These are supplied to the query and override the default values for any parameters defined by the query."]}),"\n",(0,n.jsx)(t.h3,{id:"executeasynch",children:"%ExecuteAsynch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %ExecuteAsynch(Output pQueryKey As %String, ByRef pParms, pWait As %Boolean = 0, pAxesOnly As %Boolean = 0, pAxesQuery As %String = "") As %Status\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Perform a complete execution of the ResultSet using background agents.",(0,n.jsx)(t.br,{}),"\nThe query must be prepared before calling this method.",(0,n.jsx)(t.br,{}),"\nIf defined, pParms is an array of parameter values subscripted by parameter name (case-insensitive). These are supplied to the query and override the default values for any parameters defined by the query.",(0,n.jsx)(t.br,{}),"\nIf pWait is true, wait for the query to complete execution before returning.",(0,n.jsx)(t.br,{}),"\nIf pAxesOnly is true, then only execute the axes for the query."]}),"\n",(0,n.jsx)(t.h3,{id:"executeparameters",children:"%ExecuteParameters"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ExecuteParameters(ByRef pParms) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Apply the array of parameter values to the currently prepared query."}),"\n",(0,n.jsx)(t.h3,{id:"executeaxes",children:"%ExecuteAxes"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ExecuteAxes() As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Materialize the initial (pre-null-filtered) axes for this ResultSet."}),"\n",(0,n.jsx)(t.h3,{id:"executecells",children:"%ExecuteCells"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ExecuteCells() As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Calculate the contents of the result cells for this Result Set."}),"\n",(0,n.jsx)(t.h3,{id:"executelisting",children:"%ExecuteListing"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ExecuteListing(pStoreFactBits As %Boolean = 0) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"For a DRILLTHROUGH query, find the set of source ids that make up the *first* cell in the results and compute the SQL statement needed to fetch the request fields from the source table (either as specified in the query's RETURN clause or the default listing for the cube)."}),"\n",(0,n.jsx)(t.h3,{id:"rewritequerytag",children:"RewriteQueryTag"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod RewriteQueryTag(ByRef pSQL As %String, pTagName As %String, pRewrite As %String, pDefaultParams As %List = "", pDefaultAlias As %String = "", pAliasPrefix As %String = "", pStatic As %Boolean = 0) As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:'Replaces a "tag" in a listing query pSQL (fieldList or straight SQL), using the string in pRewrite. The tag (such as $$$IKSUMMARY) can have zero or more parameters in square brackets, which will be used to replace $$$1, $$$2, etc markers in pRewrite, defaulting to the corresponding positions in pDefaultParams if no value is supplied with the tag. pRewrite is supposed to contain appropriate quotes, as surrounding single and double quotes in the tag itself will be removed. If pDefaultAlias is non-null, it will be appended as the column alias for the rewrite expression. This alias can also contain $$$1, $$$2, etc markers. If pAliasPrefix is set, it will be prepended to any existing (or default) alias. If pStatic=1, the rewrite code is considered to be COS code and run once, with its result then replacing the tag in the query.'}),"\n",(0,n.jsx)(t.h3,{id:"executesessioncommand",children:"%ExecuteSessionCommand"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ExecuteSessionCommand() As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Perform the work of a CREATE or DROP statement."}),"\n",(0,n.jsx)(t.h3,{id:"getaxissize",children:"%GetAxisSize"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetAxisSize(pAxis As %Integer) As %Integer\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return number of visible nodes within the given axis (1-based)."}),"\n",(0,n.jsx)(t.h3,{id:"getcolumncount",children:"%GetColumnCount"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetColumnCount() As %Integer\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the count of columns in results table."}),"\n",(0,n.jsx)(t.h3,{id:"getrowcount",children:"%GetRowCount"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetRowCount() As %Integer\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the count of rows in results table."}),"\n",(0,n.jsx)(t.h3,{id:"getaxiscount",children:"%GetAxisCount"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetAxisCount(Output pInfo As %Integer) As %Integer\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Return number of axes within the result set (not including the slicer). Returns 0 if the query has not been prepared and had its axes executed.",(0,n.jsx)(t.br,{}),"\nOn return, pInfo will contain array of axis number (1-based) to axis top node number."]}),"\n",(0,n.jsx)(t.h3,{id:"hascellformatoverride",children:"%HasCellFormatOverride"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %HasCellFormatOverride() As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return true if the current query has to be tested for cell format overrides."}),"\n",(0,n.jsx)(t.h3,{id:"getcellformatoverride",children:"%GetCellFormatOverride"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetCellFormatOverride(pCell...) As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Determine if the format for the given cell has been overridden (such as by currentMember substitution) and return it. pCell... contains the ordinal address of the cell."}),"\n",(0,n.jsx)(t.h3,{id:"getordinalvalue",children:"%GetOrdinalValue"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetOrdinalValue(pCell...) As %String\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Get the value of the cell specified by the ordinal cell numbers pCell1, pCell2...",(0,n.jsx)(t.br,{}),"\nA cell number is the ordinal number of a cell along its axis.",(0,n.jsx)(t.br,{}),"\nThe column axis is axis number 1, the row axis is axis number 2 and so on.",(0,n.jsx)(t.br,{}),"\nIf the result has more dimensions than are provided, or if values are omitted, then the first cell along each additional dimension is used."]}),"\n",(0,n.jsx)(t.h3,{id:"getvalue",children:"%GetValue"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetValue(pNode...) As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Get the value of the cell specified by the node numbers pNode1, pNode2..."}),"\n",(0,n.jsx)(t.h3,{id:"getordinallabel",children:"%GetOrdinalLabel"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetOrdinalLabel(Output pLabel As %String, pAxis As %Integer, pPosition As %Integer, Output pFormat As %String, Output pSolveOrder As %Integer, Output pStyle As %String, Output pHeaderStyle As %String, Output pClasses As %String, Output pTimeFormat As %String) As %Integer\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Find the axis label(s) for the item with ordinal position pPosition within axis pAxis (1 = cols, 2 = rows).",(0,n.jsx)(t.br,{}),"\nReturns, via pLabel an array of labels associated with the item from the most specific to the most general.",(0,n.jsx)(t.br,{}),"\nThe return value is the number of labels returned.",(0,n.jsx)(t.br,{}),"\nAlso returns, by reference the format and solve order for the label (higher solve order takes precedence over lower and is used to determine which axis should supply the format for a cell). pClasses an array of classes associated with the item"]}),"\n",(0,n.jsx)(t.h3,{id:"getordinallabelnodes",children:"%GetOrdinalLabelNodes"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetOrdinalLabelNodes(pAxis As %Integer, pPosition As %Integer, ByRef pNodeArray) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Examine the axis nodes(s) for the item with ordinal position pPosition within axis pAxis, and build an array of nodes contributing to the label at this ordinal position along the axis. The collection of nodes is returned in the format",(0,n.jsx)(t.br,{}),"\npNodeArray(nodeNumber) = $LB(nodeInfo)."]}),"\n",(0,n.jsx)(t.h3,{id:"getordinalkey",children:"%GetOrdinalKey"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetOrdinalKey(Output pKey As %String, pAxis As %Integer, pPosition As %Integer, Output pSpec) As %Integer\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Find the axis key(s) for the item with ordinal position pPosition within axis pAxis (1 = cols, 2 = rows).",(0,n.jsx)(t.br,{}),"\nReturns, via pKey an array of labels associated with the item from the most specific to the most general.",(0,n.jsx)(t.br,{}),'\nIf the item on the axis has no key (for example, measures), a placeholder "" is inserted into the pKey array to preserve the same structure as returned by %GetOrdinalLabel.',(0,n.jsx)(t.br,{}),"\nThe return value is the number of keys returned."]}),"\n",(0,n.jsx)(t.h3,{id:"getrowtotal",children:"%GetRowTotal"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %GetRowTotal(pRow As %Integer, pAgg As %String = "sum") As %String\n'})}),"\n",(0,n.jsx)(t.p,{children:"Get the total associated with the given row (1-based)."}),"\n",(0,n.jsx)(t.h3,{id:"getcolumntotal",children:"%GetColumnTotal"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %GetColumnTotal(pColumn As %Integer, pAgg As %String = "sum") As %String\n'})}),"\n",(0,n.jsx)(t.p,{children:"Get the total associated with the given column (1-based)."}),"\n",(0,n.jsx)(t.h3,{id:"getgrandtotal",children:"%GetGrandTotal"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %GetGrandTotal(pAgg As %String = "sum") As %String\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Get the grand total for the current query.",(0,n.jsx)(t.br,{}),'\nThis is a simple sum of all cells and not an "aggregate".']}),"\n",(0,n.jsx)(t.h3,{id:"getplan",children:"%GetPlan"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetPlan(Output pPlan) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Utility method.",(0,n.jsx)(t.br,{}),"\nAssemble the query plan for this query. The query must have been successfully executed."]}),"\n",(0,n.jsx)(t.h3,{id:"getplanforquery",children:"%GetPlanForQuery"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetPlanForQuery(ByRef pPlan, pCubeName As %String, pQueryKey As %String, pLevel As %Integer = 0) [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Show plan details for the given query. Do not call this directly."}),"\n",(0,n.jsx)(t.h3,{id:"showplan",children:"%ShowPlan"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ShowPlan()\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Utility method.",(0,n.jsx)(t.br,{}),"\nPrint out the plan for this query to the console. The query must have been successfully executed."]}),"\n",(0,n.jsx)(t.h3,{id:"showplanforquery",children:"%ShowPlanForQuery"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ShowPlanForQuery(pCubeName As %String, pQueryKey As %String, pLevel As %Integer = 0) [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Show plan details for the given query."}),"\n",(0,n.jsx)(t.h3,{id:"print",children:"%Print"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Print(Output pStats, pShowNodeNo As %Boolean = 0, pMaxRows As %Integer = 0) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Utility method. Print the results of the current query to the console.",(0,n.jsx)(t.br,{}),"\nIf pShowNodeNo is true, show the internal node numbers.",(0,n.jsx)(t.br,{}),"\nIf pMaxRows is defined, limit the number of rows displayed."]}),"\n",(0,n.jsx)(t.h3,{id:"printlisting",children:"%PrintListing"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %PrintListing()\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Utility method.",(0,n.jsx)(t.br,{}),"\nFor a DRILLTHROUGH query, print out the listing."]}),"\n",(0,n.jsx)(t.h3,{id:"parsemdx",children:"%ParseMDX"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ParseMDX(pMDX As %String, pQuery As %DeepSee.Query.query) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Lower-level function that, given the text of a DeepSee MDX query, pMDX, parses it and converts it to a DeepSee run-time query object without changing the state of this Result Set."}),"\n",(0,n.jsx)(t.h3,{id:"getaxismembers",children:"%GetAxisMembers"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %GetAxisMembers(pAxis As %Integer, Output pKey, pItemNo As %Integer = "") As %Status\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Get information on the members of a specific axis within the current query.",(0,n.jsx)(t.br,{}),"\npAxis is the axis number (1 = cols, 2 = rows, etc.), 0 indicates that information for the slicer axis is to be returned.",(0,n.jsx)(t.br,{}),"\nBecause it is impossible to pre-determine the size of a specific axis, the process private global, ",(0,n.jsx)(t.strong,{children:"^||DeepSee.AxisMembers"})," is used to hold the results. The caller is responsible for killing this global.",(0,n.jsx)(t.br,{}),"\nOn return, pKey contains the top-level subscript for the process private global under which the member information is stored.",(0,n.jsx)(t.br,{}),"\nThe member information takes the form:",(0,n.jsx)(t.br,{}),"\n^||DeepSee.AxisMembers(pKey,pAxis,j,k) = $LB(nodeno,text,dimName,hierName,levelName,memberKey,dimNo,hierNo,levelNo,[aggregate])",(0,n.jsx)(t.br,{}),"\npKey is the key returned by this method.",(0,n.jsx)(t.br,{}),"\npAxis is the axis number.",(0,n.jsx)(t.br,{}),"\nj is the ordinal position of the tuple within the axis.",(0,n.jsx)(t.br,{}),"\nk is the ordinal position of the member within the tuple. k is 0 for members that form a stand-alone tuple. Otherwise k starts at 0 and increase towards the end of the tuple.",(0,n.jsx)(t.br,{}),"\nnodeno is the internal node number corresponding to the member within its axis.",(0,n.jsx)(t.br,{}),"\ntext is the axis caption for the member.",(0,n.jsx)(t.br,{}),"\nNames are not enclosed within [ ] delimiters.",(0,n.jsx)(t.br,{}),"\nA fully-qualified name (UNAME) can be constructed by combining the names with the key:",(0,n.jsx)(t.br,{}),'\nSet tUName = "["_tDimName_"].["_tHierName_"].["_tLevelName_"].&["_tMemberKey_"]"',(0,n.jsx)(t.br,{}),"\nIf pItemNo is provided, then it is the ordinal number of a single member within the axis and only information about this member is returned."]}),"\n",(0,n.jsx)(t.h3,{id:"clearstatistics",children:"%ClearStatistics"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ClearStatistics()\n"})}),"\n",(0,n.jsx)(t.p,{children:"Clear out current statistics for this result set."}),"\n",(0,n.jsx)(t.h3,{id:"getstatistic",children:"%GetStatistic"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetStatistic(pStat As %String) As %String\n"})}),"\n",(0,n.jsxs)(t.p,{children:['Get the value of a specific query statistic. e.g. "ParseMDX".',(0,n.jsx)(t.br,{}),'\nFor "query" stats, add "query." to the stat name: e.g. ""query.Slices".']}),"\n",(0,n.jsx)(t.h3,{id:"printstatistics",children:"%PrintStatistics"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %PrintStatistics()\n"})}),"\n",(0,n.jsx)(t.p,{children:"Write out current statistics for this result set."}),"\n",(0,n.jsx)(t.h3,{id:"formatnumber",children:"%FormatNumber"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %FormatNumber(pValue As %Decimal, pFormat As %String, Output pType As %String, Output pStyle As %String) As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Apply MDX FORMAT_STRING pFormat to numeric value pValue."}),"\n",(0,n.jsx)(t.h3,{id:"copydatafrommodel",children:"%CopyDataFromModel"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %CopyDataFromModel(Output pData, Output pTypes, pSeries As %Integer = "") As %Status [ Internal ]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Internal method.",(0,n.jsx)(t.br,{}),"\nLocal implementation of DataModel API."]}),"\n",(0,n.jsx)(t.h3,{id:"getmodelinfo",children:"%GetModelInfo"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetModelInfo(Output pPropNames As %String, Output pPropTypes As %Integer, Output pPropLabels As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Internal method.",(0,n.jsx)(t.br,{}),"\nCalled by controller to get meta data for the current query. Each metadata value is a csv list."]}),"\n",(0,n.jsx)(t.h3,{id:"getslicerforcellrange",children:"%GetSlicerForCellRange"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetSlicerForCellRange(Output pSlicer As %String, pStartRow As %Integer, pStartCol As %Integer, pEndRow As %Integer, pEndCol As %Integer, Output pMeasure As %String) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Find and return an MDX slicer statement that will return the specified range of cells in the current query as a one-cell result.",(0,n.jsx)(t.br,{}),"\nFor convenience, return the measure in play, if possible to determine."]}),"\n",(0,n.jsx)(t.h3,{id:"testfilters",children:"%TestFilters"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %TestFilters(pMDX As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Test for %GetFiltersForCellRange."}),"\n",(0,n.jsx)(t.h3,{id:"getfiltersforcellrange",children:"%GetFiltersForCellRange"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %GetFiltersForCellRange(Output pFilters As %String, pStartRow As %Integer, pStartCol As %Integer, pEndRow As %Integer, pEndCol As %Integer, Output pMeasure As %String, pAllRows As %Boolean = 0, pAllCols As %Boolean = 0, pSortCol As %Integer = 0, pSortDir As %String = "ASC", ByRef pPluginInfo As %String) As %Status\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Find and return a an array of MDX %FILTER statements that will return the specified range of cells in the current query as a one-cell result.",(0,n.jsx)(t.br,{}),"\nOn return, pFilters will contain the filter statement corresponding to each axis (1,2, etc) and the slicer (0).",(0,n.jsx)(t.br,{}),"\nFor convenience, return the measure in play, if possible to determine. For cell ranges with multiple measures, the measure applied to the cell pStartRow, pStartCol is returned."]}),"\n",(0,n.jsx)(t.h3,{id:"getcellmetric",children:"%GetCellMetric"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetCellMetric(pRow As %Integer = 1, pCol As %Integer = 1, pSC As %Status = {$$$OK}) As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Provided a (row,col) cell address within this resultset, determine which measure is being applied."}),"\n",(0,n.jsx)(t.h3,{id:"outputxmla",children:"%OutputXMLA"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OutputXMLA() As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Output the result of the current query in XML/A format to the current device. The query should be prepared and executed first.",(0,n.jsx)(t.br,{}),"\nIf there is an error, it is assumed that the caller will transform the status value into a SOAP fault."]}),"\n",(0,n.jsx)(t.h3,{id:"getdefaultformat",children:"%GetDefaultFormat"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetDefaultFormat(Output pCaption As %String) As %String [ Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the default format string for this result. Also returns the default label (measure name)."}),"\n",(0,n.jsx)(t.h3,{id:"outputjson",children:"%OutputJSON"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %OutputJSON(pPageSize As %Integer, pCurrPage As %Integer, pRowLabels As %List = "", pMaxRows As %Integer = "") As %Status [ Internal ]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Output the result of the current query in XML/A format to the current device. The query should be prepared and executed first.",(0,n.jsx)(t.br,{}),"\nIf there is an error, it is assumed that the caller will transform the status value into a SOAP fault."]}),"\n",(0,n.jsx)(t.h3,{id:"updatependingresults",children:"%UpdatePendingResults"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %UpdatePendingResults(Output pPending As %Boolean) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"If the given query has pending results (such as from plug-ins), update them. Return if there are any additional pending results."}),"\n",(0,n.jsx)(t.h3,{id:"runqueryauditcode",children:"%RunQueryAuditCode"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %RunQueryAuditCode(pQuery As %DeepSee.Query.query) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Run the query audit code. (Test version).",(0,n.jsx)(t.br,{}),"\nThis gives customer applications a chance to audit the queries run by DeepSee. This is called whenever a query is executed by %DeepSee.ResultSet.",(0,n.jsx)(t.br,{}),"\nThe query audit code is a valid ObjectScript expression stored in the ^DeepSee.AuditQueryCode global. Audit query code should not write any output to the current device nor should this code kill any % variables required by Zen or DeepSee.",(0,n.jsx)(t.br,{}),"\nThe variable, %dsQuery, will contain the text of the query."]}),"\n",(0,n.jsx)(t.h3,{id:"createtable",children:"%CreateTable"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %CreateTable(pCubeName As %String = "", pNewTableName As %String = "", pContext As %String = "", pListingFields As %String = "", pListingName As %String = "") As %Status\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Create an SQL table from DeepSee cube context. Arguments:",(0,n.jsx)(t.br,{}),"\npCubeName (Required) - The name of the cube the new table should be generated from.",(0,n.jsx)(t.br,{}),"\npNewTableName (Required) - The name of the table or class definition where the new result is to be stored. This must be a valid Schema.Table or Package.Class name, and the current user must have permission to create this class in the database to which it is mapped.",(0,n.jsx)(t.br,{}),"\npContext (Optional) - An MDX restriction term which limits the results in the cube. While not required, this is strongly recommended since its ommission will result in the entire cube source being transferred to a table.",(0,n.jsx)(t.br,{}),"\npListingFields (Optional) - A comma-delimited list of field names to be included in the new table. The field names must exist in the cube's source.",(0,n.jsx)(t.br,{}),"\npListingName (Optional) - A named listing that is defined for use in the cube. This may be a native listing or a listing defined in a listing group. This will not be used if pListingFields is defined."]}),"\n",(0,n.jsxs)(t.p,{children:["Most commonly this would be called from a KPI Action class. For example, an %OnDashboardAction callback might look like: ",(0,n.jsx)(t.code,{children:'ClassMethod %OnDashboardAction(pAction As %String, pContext As %ZEN.proxyObject) As %Status { Set tSC = $$$OK Try { Set tFilter = $P(pContext.currFilterSpec," ",2,*) Set tNewTableName = "Test.CreateResultTable" Set tListingFields = "" Set tListingName = "Listing" Set tSC = ##class(%DeepSee.ResultSet).%CreateTable(pContext.cubeName, tNewTableName, tFilter, tListingFields, tListingName) } Catch ex { Set tSC = ex.AsStatus() } Quit tSC }'})," For simplicity this example hard codes the name of the new class definition, but this is not recommended in practice. The API will not replace any existing class, returning an error message instead. In order to allow the user to create their own class name, as well as provide the option to set values for tListingFields or tListingName, it is recommended the KPI action launch a popup dialog which manages the user's interaction with these settings and then calls the %CreateTable API."]}),"\n",(0,n.jsx)(t.h3,{id:"setsubqueryresultset",children:"%SetSubqueryResultset"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetSubqueryResultset(pRS As %DeepSee.ResultSet = {$$$NULLOREF}, pStatus As %Status) As %Integer\n"})}),"\n",(0,n.jsx)(t.p,{children:"Add a subquery resultset to the list of objects needed to complete this query. Returns zero if there was a failure to set the resultset into the list. Returns the index of the resutlset in the array when successful."}),"\n",(0,n.jsx)(t.h3,{id:"initializeresultset",children:"%InitializeResultSet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %InitializeResultSet() As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Initialize this resultset to ready it for executing a new query. This may be called on a newly instantiated ResultSet or on a ResultSet that has already been used to execute a different MDX query."}),"\n",(0,n.jsx)(t.h3,{id:"setlockkeys",children:"%SetLockKeys"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetLockKeys(pRefreshKeys = 0, pWait = 0) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:['Fill the %LockKeys array for the current query. This will only succeed if the query has been prepared. Keys will be prepended with either "results" or "axis" to indicate whether the particular key applies to the Results cache or the Axis cache, respectively. This does not do the actual work of acquiring locks.',(0,n.jsx)(t.br,{}),"\nOnce the locks are determined they are immediately copied to the current %Query object using %CopyLockKeysToQuery. The value of the pWait flag is passed through to this method to maintain proper tracking of the lock hierarchy."]}),"\n",(0,n.jsx)(t.h3,{id:"setancestorlockkeys",children:"%SetAncestorLockKeys"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetAncestorLockKeys(ByRef pAncestorLocks) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Fill the %AncestorLockKeys array for the current ResultSet using the named lock keys defined in pAncestorLocks. This method will support a key set supplied as a comma-delimited string, a $LB, or a COS array.",(0,n.jsx)(t.br,{}),"\nWhen taking out locks in %AcquireLocks it will be assumed any locks present in this array are held by a waiting parent process and so these particular locks will be exempted."]}),"\n",(0,n.jsx)(t.h3,{id:"clearlockkeys",children:"%ClearLockKeys"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %ClearLockKeys(pLockMode As %String = "") As %Status\n'})}),"\n",(0,n.jsx)(t.p,{children:"Clear up the locks held by the process and reset the local state variables. If pLockMode is supplied, use it to set the ResultSet's %LockMode."}),"\n",(0,n.jsx)(t.h3,{id:"copylockkeystoquery",children:"%CopyLockKeysToQuery"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %CopyLockKeysToQuery(pWait = 0) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"This method copies the current ResultSet's lock keys into the active query to make the references available for subqeries and tasks. If pWait is set, this communicates the current ResultSet intends to wait for results and will maintain a hold on the locks securing the current resources."}),"\n",(0,n.jsx)(t.h3,{id:"acquirelocks",children:"%AcquireLocks"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %AcquireLocks(pStatus As %Status = {$$$OK}, pLockMode As %String = {..%LockMode}, pTimeout = -1) As %Boolean\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Acquire locks needed to secure access to the shared result and axes caches for this query. The parameter pLockMode controls which type of locks (exclusive/shared) should be attempted, by default this will be the ResultSet's current %LockMode setting. This method returns either",(0,n.jsx)(t.br,{}),"\n0 - The method was unable to acquire all of the locks associated with this query",(0,n.jsx)(t.br,{}),"\n1 - The method has successfully acquired all locks needed to safely interact with the shared cache",(0,n.jsx)(t.br,{}),'\nIn the event a "0" is returned, any and all locks acquired by this process are released.',(0,n.jsx)(t.br,{}),"\nOptionally the pTimeout parameter may be supplied to instruct this method to wait for a successful lock on the group of lock keys as a whole. The method will return 1 if all locks are obtained before the requested timeout and 0 otherwise. Optional values for this parameter are:",(0,n.jsx)(t.br,{}),"\n-1 [default] - Make one attempt at obtaining the group of locks and return the result.",(0,n.jsx)(t.br,{}),"\n0 - Wait indefinitely for all locks in the %LockKeys group to be successfully obtained.",(0,n.jsx)(t.br,{}),"\n(positive number) - Wait up to the specified amount of time and return the success status for the %LockKeys group."]}),"\n",(0,n.jsx)(t.h3,{id:"releaselocks",children:"%ReleaseLocks"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ReleaseLocks(pLockMode As %String = {..%LockMode}) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Release all locks of the type pLockMode held by this ResultSet."}),"\n",(0,n.jsx)(t.h3,{id:"setlockmode",children:"%SetLockMode"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %SetLockMode(pType = "exclusive") As %Status\n'})}),"\n",(0,n.jsx)(t.p,{children:"Accessor method for changing the %LockMode of this ResultSet. This is protected from changing the mode when locks are engaged."}),"\n",(0,n.jsx)(t.h3,{id:"switchtolocalcache",children:"%SwitchToLocalCache"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SwitchToLocalCache() As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Create a local copy of the shared Results and Axis caches and reconfigure the location pointers to the private cache data."}),"\n",(0,n.jsx)(t.h3,{id:"switchtocommoncache",children:"%SwitchToCommonCache"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SwitchToCommonCache() As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"This method returns the pointers to uing the common cache."}),"\n",(0,n.jsx)(t.h3,{id:"setlocationlocal",children:"%SetLocationLocal"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetLocationLocal() As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Look at local cache for reading data"}),"\n",(0,n.jsx)(t.h3,{id:"setlocationcommon",children:"%SetLocationCommon"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetLocationCommon() As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Look at common cache for reading data"}),"\n",(0,n.jsx)(t.h3,{id:"copyresulttolocal",children:"%CopyResultToLocal"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %CopyResultToLocal() As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"This does the actual work of copying results from the shared caches to a local copy unique to this ResultSet's %SessionKey. This operation can only be performed if the ResultSet has locks engaged."}),"\n",(0,n.jsx)(t.h3,{id:"clearlocalresult",children:"%ClearLocalResult"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ClearLocalResult() As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Perform the actual work of deleting the local copies of the Results and Axis caches."}),"\n",(0,n.jsx)(t.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"This callback method is invoked by the %Close method to provide notification that the current object is being closed."}),"\n",(0,n.jsx)(t.p,{children:"The return value of this method is ignored."})]})}function o(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>a});var n=s(96540);const r={},i=n.createContext(r);function l(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);