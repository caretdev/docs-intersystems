"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[95118],{58973:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>l,frontMatter:()=>s,toc:()=>o});var r=n(74848),a=n(28453);const s={pagination_prev:null,pagination_next:null},i="%Library.FileBinaryStream",o=[];function c(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"libraryfilebinarystream",children:"%Library.FileBinaryStream"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Library.FileBinaryStream Extends (%BinaryStream, %FileStreamAdaptor) [ Deprecated, Inheritance = right, MemberSuper = %Compiler.Type.StreamLegacy, Not ProcedureBlock, StorageStrategy = Custom, System = 2 ]\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Stream class that stores binary data in external files. This class is deprecated in favor of %Stream.FileBinary. For example the following code opens a file binary stream, points it at a particular file on the filesystem and then reads it in chunks of 32,000 bytes: ",(0,r.jsx)(t.code,{children:'Set stream=##class(%FileBinaryStream).%New() Set stream.Filename="c:\\myfile.txt" While \'stream.AtEnd { Set line=stream.Read() ; Process the chunk here }'})]})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(96540);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);