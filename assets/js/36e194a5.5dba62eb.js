"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[27003],{8330:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>d,frontMatter:()=>o,toc:()=>i});var s=t(74848),a=t(28453);const o={pagination_prev:null,pagination_next:null},l="SYS.LogDmn",i=[{value:"Methods",id:"methods",level:2},{value:"Enable",id:"enable",level:3},{value:"Disable",id:"disable",level:3},{value:"Start",id:"start",level:3},{value:"Stop",id:"stop",level:3},{value:"Restart",id:"restart",level:3},{value:"Status",id:"status",level:3}];function r(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"syslogdmn",children:"SYS.LogDmn"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Class SYS.LogDmn Extends %SYSTEM.Help\n"})}),"\n",(0,s.jsx)(n.p,{children:"API for managing the log daemon. See Config.Logging for changing the log daemon's configuration values, by using the inherited Config.Logging::Get and Config.Logging::Modify methods. All the methods that modify the state of the log daemon require USE permission for the %Admin_Manage resource."}),"\n",(0,s.jsx)(n.p,{children:"The log daemon is the LOGDMN routine. At predetermined intervals it scans various sources of logs (currently only mgr/messages.log, and the DB in %SYS.Audit.cls), rewrites the messages in a specified format (name-value pairs (NVP) or JSON) and sends them through a pipe to be consumed by an external program. The command to launch the external program is found in Config.Logging::ChildProcessLaunchCommand For more info on configuring the log daemon, view the class documentation in Config.Logging"}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"enable",children:"Enable"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Enable() As %Status\n"})}),"\n",(0,s.jsx)(n.p,{children:"Enable the log daemon If the log daemon is enabled, then the the daemon will be launched automatically every time the instance starts up. IMPORTANT: If the daemon is stopped and this method (##class(SYS.LogDmn).Enable()) is called, then the daemon will start up automatically."}),"\n",(0,s.jsx)(n.h3,{id:"disable",children:"Disable"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Disable() As %Status\n"})}),"\n",(0,s.jsx)(n.p,{children:"Disable the log daemon If the log daemon is disabled, the daemon will NOT be launched on instance startup and any attempts to start the daemon via ##class(SYS.LogDmn).Start() will fail with an error that instructs the caller to call ##class(SYS.LogDmn).Enable(). IMPORTANT: If the daemon is running and this method (##class(SYS.LogDmn).Disable()) is called, then the daemon will stop automatically."}),"\n",(0,s.jsx)(n.h3,{id:"start",children:"Start"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Start(ByRef pid As %Integer, timeout As %Double = 5) As %Status\n"})}),"\n",(0,s.jsx)(n.p,{children:"Start the log daemon The log daemon must be enabled be this method can be called. You can enable the log daemon by calling ##class(SYS.LogDmn).Enable() Parameters: pid - Deprecated and optional parameter, it is recommended you do not pass it in. If passed by reference, the pid variable will be set to the PID of the log daemon process, otherwise it will be some non positive number. See the ##class(SYS.LogDmn).Status() explaining how to interpret and non positive value for pid. timeout - The number of seconds we wait for the daemon process to start before we declare it to be unnresponsive."}),"\n",(0,s.jsx)(n.h3,{id:"stop",children:"Stop"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Stop() As %Status\n"})}),"\n",(0,s.jsx)(n.p,{children:"Stop the log daemon"}),"\n",(0,s.jsx)(n.h3,{id:"restart",children:"Restart"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Restart(ByRef pid As %Integer) As %Status\n"})}),"\n",(0,s.jsx)(n.p,{children:"Restart the log daemon Parameters: pid - Deprecated and optional parameter, it is recommended you do not pass it in. If passed by reference, the pid variable will be set to the PID of the log daemon process, otherwise it will be some non positive number. See the ##class(SYS.LogDmn).Status() explaining how to interpret and non positive value for pid."}),"\n",(0,s.jsx)(n.h3,{id:"status",children:"Status"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Status() As %Integer\n"})}),"\n",(0,s.jsx)(n.p,{children:"Returns status of the log daemon"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(PID) - running"}),"\n",(0,s.jsx)(n.li,{children:"0 - not running"}),"\n",(0,s.jsx)(n.li,{children:"-1 - died"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var s=t(96540);const a={},o=s.createContext(a);function l(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);