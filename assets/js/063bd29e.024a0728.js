"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[75842],{27940:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>o,default:()=>c,frontMatter:()=>i,toc:()=>a});var s=r(74848),n=r(28453);const i={pagination_prev:null,pagination_next:null},o="%UnitTest.TestProduction",a=[{value:"Parameters",id:"parameters",level:2},{value:"PRODUCTION;",id:"production",level:3},{value:"MAXWAIT",id:"maxwait",level:3},{value:"MINRUN",id:"minrun",level:3},{value:"IGNOREPRODUCTIONERRORS",id:"ignoreproductionerrors",level:3},{value:"Properties",id:"properties",level:2},{value:"MainDir",id:"maindir",level:3},{value:"HL7InputDir",id:"hl7inputdir",level:3},{value:"HL7OutputDir",id:"hl7outputdir",level:3},{value:"HL7WorkDir",id:"hl7workdir",level:3},{value:"HL7ArchiveDir",id:"hl7archivedir",level:3},{value:"MachineName",id:"machinename",level:3},{value:"InstanceName",id:"instancename",level:3},{value:"DSNToSamples",id:"dsntosamples",level:3},{value:"DSNToUser",id:"dsntouser",level:3},{value:"BaseLogId",id:"baselogid",level:3},{value:"LastLogId",id:"lastlogid",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"OnBeforeProductionStart",id:"onbeforeproductionstart",level:3},{value:"OnAfterProductionStart",id:"onafterproductionstart",level:3},{value:"OnBeforeProductionStop",id:"onbeforeproductionstop",level:3},{value:"OnAfterProductionStop",id:"onafterproductionstop",level:3},{value:"CheckResults",id:"checkresults",level:3},{value:"CheckErrors",id:"checkerrors",level:3},{value:"GetSetting",id:"getsetting",level:3},{value:"ChangeSetting",id:"changesetting",level:3},{value:"ChangeOrGetSetting",id:"changeorgetsetting",level:3},{value:"CreateCredentials",id:"createcredentials",level:3},{value:"SendRequest",id:"sendrequest",level:3},{value:"Error",id:"error",level:3},{value:"LogErrors",id:"logerrors",level:3},{value:"GetEventLog",id:"geteventlog",level:3},{value:"SelectToString",id:"selecttostring",level:3},{value:"Run",id:"run",level:3},{value:"Debug",id:"debug",level:3},{value:"Export",id:"export",level:3},{value:"ListSettings",id:"listsettings",level:3},{value:"SubMainDir",id:"submaindir",level:3},{value:"CreateMainDirTree",id:"createmaindirtree",level:3},{value:"CleanUpDirectory",id:"cleanupdirectory",level:3},{value:"CopyFile",id:"copyfile",level:3},{value:"CompareFiles",id:"comparefiles",level:3},{value:"GetFullName",id:"getfullname",level:3},{value:"CheckEnvironment",id:"checkenvironment",level:3},{value:"CheckParameterPRODUCTION",id:"checkparameterproduction",level:3},{value:"GetMacros",id:"getmacros",level:3},{value:"CheckNamespace",id:"checknamespace",level:3},{value:"StartProduction",id:"startproduction",level:3},{value:"StopProduction",id:"stopproduction",level:3},{value:"WaitForState",id:"waitforstate",level:3},{value:"TestControl",id:"testcontrol",level:3}];function l(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"unittesttestproduction",children:"%UnitTest.TestProduction"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %UnitTest.TestProduction Extends %UnitTest.TestCase [ System = 3 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Unit test base class specialized for testing productions.",(0,s.jsx)(t.br,{}),"\nUnit tests created based on this class are associated with one production. When the unit test is run, it automatically starts the production, allows it to run for a parameterized time, puts new event log entries in an array and passes control to a method for custom verifications, then stops the production and checks for errors.",(0,s.jsx)(t.br,{}),"\nThe programmer can adjust some parameters, add code to verify results, and use callback methods to handle events before/after start/stop production."]}),"\n",(0,s.jsx)(t.p,{children:"How to use this class:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Create a subclass of this base class, one per production. Typically there will be one directory per production, and one unit test class per directory/production, called for example Test.xml. In case one wants to run the same production with various settings there may be additional unit test classes such as Test2.xml, Test3.xml, etc."}),"\n",(0,s.jsx)(t.li,{children:"Override parameter PRODUCTION to contain the production class name."}),"\n",(0,s.jsx)(t.li,{children:"Override parameters MAXWAIT, MINRUN and IGNOREPRODUCTIONERRORS if the defaults are not adequate to the production case."}),"\n",(0,s.jsx)(t.li,{children:"Override method CheckResults to include your code with custom verification of the intended production results."}),"\n",(0,s.jsx)(t.li,{children:"Override method CheckErrors if you set IGNOREPRODUCTIONERRORS = 1 and want to check the errors yourself."}),"\n",(0,s.jsx)(t.li,{children:"Override methods OnBeforeProductionStart and OnAfterProductionStart with code to run before or after the production is started, for example to put files in place (before start), or to call a method that fires the test by instantiating a business service and sending a message (after start)."}),"\n",(0,s.jsxs)(t.li,{children:["Override methods OnBeforeProductionStop and OnAfterProductionStop with code to run right before or after the production is stopped, if needed.",(0,s.jsx)(t.br,{}),"\nNote: Initialization and cleanup code may go as usual into ",(0,s.jsx)(t.strong,{children:"OnBeforeOneTest()"}),", ",(0,s.jsx)(t.strong,{children:"OnAfterOneTest()"}),", etc., inherited from %UnitTest.TestCase."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"There are methods to facilitate usage, such as change settings, retrieve additional records from the Interoperability event log, compare files, etc. More details are given below and in the description for each method."}),"\n",(0,s.jsx)(t.p,{children:"General utility/helper methods available to be used in the test code:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"GetSetting: Get the current value of a setting for a production item."}),"\n",(0,s.jsx)(t.li,{children:"ChangeSetting: Change the value of settings for production items."}),"\n",(0,s.jsx)(t.li,{children:"CreateCredentials: Define credentials."}),"\n",(0,s.jsx)(t.li,{children:"SendRequest: Call Interoperability testing service to send a request."}),"\n",(0,s.jsx)(t.li,{children:"CopyFile: Copy a file from a directory to another directory."}),"\n",(0,s.jsx)(t.li,{children:"CompareFiles: Compare the contents of two files."}),"\n",(0,s.jsx)(t.li,{children:"Error: Compose a general error message as %Status with the text message provided."}),"\n",(0,s.jsx)(t.li,{children:"LogErrors: Generate log messages with all errors contained in a status variable."}),"\n",(0,s.jsx)(t.li,{children:"GetEventLog: Retrieve records from the Interoperability event log."}),"\n",(0,s.jsx)(t.li,{children:"SelectToString: Return a string containing select information from the Event Log."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"File management utility/helper methods available to be used in the test code (all with normalized names):"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"CreateMainDirTree: Initialize test directories, with subdirectories for HL7 use."}),"\n",(0,s.jsx)(t.li,{children:"CopyFile: Copy a file from a directory to another directory."}),"\n",(0,s.jsx)(t.li,{children:"CompareFiles: Compare the contents of two files."}),"\n",(0,s.jsx)(t.li,{children:"CleanUpDirectory: Remove all files from a directory or tree."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The following properties are available:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"MainDir"}),"\n",(0,s.jsx)(t.li,{children:"HL7InputDir"}),"\n",(0,s.jsx)(t.li,{children:"HL7OutputDir"}),"\n",(0,s.jsx)(t.li,{children:"HL7ArchiveDir"}),"\n",(0,s.jsx)(t.li,{children:"HL7WorkDir"}),"\n",(0,s.jsx)(t.li,{children:"MachineName"}),"\n",(0,s.jsx)(t.li,{children:"InstanceName"}),"\n",(0,s.jsx)(t.li,{children:"DSNToSamples"}),"\n",(0,s.jsx)(t.li,{children:"DSNToUser"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Utility/helper methods to be used during test development or debugging:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Run: Run without loading/deleting any classes."}),"\n",(0,s.jsx)(t.li,{children:"Debug: Run in debug mode, without loading/deleting any classes."}),"\n",(0,s.jsx)(t.li,{children:"Export: Export all classes in a package to a directory."}),"\n",(0,s.jsx)(t.li,{children:"ListSettings: List to the terminal all current settings for a given production and config item."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(t.h3,{id:"production",children:"PRODUCTION;"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter PRODUCTION;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Class name of the production. It must contain the production class name."}),"\n",(0,s.jsx)(t.h3,{id:"maxwait",children:"MAXWAIT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter MAXWAIT = 10;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Maximum time in seconds to wait for the production to completely start or stop. The default is 10 seconds, override if necessary."}),"\n",(0,s.jsx)(t.h3,{id:"minrun",children:"MINRUN"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter MINRUN = 10;\n"})}),"\n",(0,s.jsx)(t.p,{children:'Minimum time to let production run before collecting event log entries of type "infouser" and check for results. The default is 10 seconds, override if necessary. This varies with the production; some productions only need to run for a little time, and some require more time.'}),"\n",(0,s.jsx)(t.h3,{id:"ignoreproductionerrors",children:"IGNOREPRODUCTIONERRORS"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter IGNOREPRODUCTIONERRORS = 0;\n"})}),"\n",(0,s.jsx)(t.p,{children:"If any errors appear in the Event Log during execution of the production, the test will fail. In many cases, errors are expected to happen. In this case, override this parameter. You may also want to check them manually by overriding the method CheckErrors."}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"maindir",children:"MainDir"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property MainDir As %String;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Normalized root test directory name, which by default is directory ",(0,s.jsx)(t.strong,{children:"TestAutoNNN"})," on the same level as the InterSystems IRIS or HealthShare instance, and where ",(0,s.jsx)(t.strong,{children:"NNN"})," is the build number. To initialize the directory tree see method CreateMainDirTree."]}),"\n",(0,s.jsx)(t.h3,{id:"hl7inputdir",children:"HL7InputDir"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property HL7InputDir As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Normalized directory name for HL7 input"}),"\n",(0,s.jsx)(t.h3,{id:"hl7outputdir",children:"HL7OutputDir"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property HL7OutputDir As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Normalized directory name for HL7 output"}),"\n",(0,s.jsx)(t.h3,{id:"hl7workdir",children:"HL7WorkDir"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property HL7WorkDir As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Normalized directory name for HL7 work"}),"\n",(0,s.jsx)(t.h3,{id:"hl7archivedir",children:"HL7ArchiveDir"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property HL7ArchiveDir As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Normalized directory name for HL7 archive"}),"\n",(0,s.jsx)(t.h3,{id:"machinename",children:"MachineName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property MachineName As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Machine name"}),"\n",(0,s.jsx)(t.h3,{id:"instancename",children:"InstanceName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property InstanceName As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Instance name"}),"\n",(0,s.jsx)(t.h3,{id:"dsntosamples",children:"DSNToSamples"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property DSNToSamples As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"DSN name pointing to namespace SAMPLES"}),"\n",(0,s.jsx)(t.h3,{id:"dsntouser",children:"DSNToUser"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property DSNToUser As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"DSN name pointing to namespace USER"}),"\n",(0,s.jsx)(t.h3,{id:"baselogid",children:"BaseLogId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property BaseLogId As %Integer;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Production's first event log ID"}),"\n",(0,s.jsx)(t.h3,{id:"lastlogid",children:"LastLogId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property LastLogId As %Integer;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Last event log ID retrieved for this production execution"}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnNew(initvalue) As %Status [ Internal ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Initialize properties.",(0,s.jsx)(t.br,{}),"\nNote: Do not edit this method. If you want to change the property values, set them directly in your code."]}),"\n",(0,s.jsx)(t.h3,{id:"onbeforeproductionstart",children:"OnBeforeProductionStart"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnBeforeProductionStart() As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Code to run right before the production is started. This is useful to:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Adjust settings - see method ChangeSetting."}),"\n",(0,s.jsx)(t.li,{children:"Create directories - see method CreateMainDirTree."}),"\n",(0,s.jsx)(t.li,{children:"Copy files - see method CopyFile."}),"\n",(0,s.jsx)(t.li,{children:"Create credentials required by the production - see method CreateCredentials."}),"\n",(0,s.jsx)(t.li,{children:'etc.\nIf an error status is returned, the test will be aborted and failed. So if a non fatal error occurs, you may invoke ..LogErrors(status,"OnBeforeProductionStart()") and return $$$OK.'}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"onafterproductionstart",children:"OnAfterProductionStart"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnAfterProductionStart() As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:'Code to run right after the production is started. Used, for example, to call a method that initiates the test. If an error status is returned, the test will be aborted and failed and the production will be stopped. So if a non fatal error occurs, you may invoke ..LogErrors(status,"OnAfterProductionStart()") and return $$$OK.'}),"\n",(0,s.jsx)(t.h3,{id:"onbeforeproductionstop",children:"OnBeforeProductionStop"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnBeforeProductionStop() As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:'Code to run right before the production is stopped. If an error status is returned, the test will be failed and aborted, the production will be stopped. If a non fatal error occurs, you may invoke ..LogErrors(status,"OnBeforeProductionStop()") and return $$$OK.'}),"\n",(0,s.jsx)(t.h3,{id:"onafterproductionstop",children:"OnAfterProductionStop"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnAfterProductionStop() As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:'Code to run right after the production is stopped. If an error status is returned, the test is failed. If a non fatal error occurs, you may invoke ..LogErrors(status,"OnAfterProductionStop()") and return $$$OK.'}),"\n",(0,s.jsx)(t.h3,{id:"checkresults",children:"CheckResults"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method CheckResults(ByRef Log As %String, New As %String) As %Status\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Fill in with code to check the results for the production execution.",(0,s.jsx)(t.br,{}),'\nThis method is initialized with a local array containing user created entries of type "Info" from the Event Log, not including the start production/components entries, with the following contents:',(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.strong,{children:"Log"})," = last existing seq for array ",(0,s.jsx)(t.strong,{children:"Log()"}),(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.strong,{children:"Log(seq, fieldname)"})," = fieldvalue",(0,s.jsx)(t.br,{}),"\nTo get other entries from the Event Log, or for more information about the array contents, see method GetEventLog.",(0,s.jsx)(t.br,{}),"\nReturn $$$OK in most cases, or an error status if you want to indicate that there was a failure. Remember that failures are automatic when unit test macros are used."]}),"\n",(0,s.jsx)(t.h3,{id:"checkerrors",children:"CheckErrors"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method CheckErrors() As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Override this method if you are going to check errors with custom code. It's automatically invoked when parameter IGNOREPRODUCTIONERRORS = 1."}),"\n",(0,s.jsx)(t.h3,{id:"getsetting",children:"GetSetting"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetSetting(production As %String = "", configName As %String = "", setting As %String = "", Output value As %String) As %Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Get the current value of a setting for a production item. ",(0,s.jsx)(t.strong,{children:"Value"})," must be passed by reference. Examples:",(0,s.jsx)(t.br,{}),"\nSet s = ..GetSetting([Production], ConfigName, Setting, .Value)",(0,s.jsx)(t.br,{}),"\nSet s = ##class(%UnitTest.TestProduction).GetSetting(Production, ConfigName, Setting, .Value)"]}),"\n",(0,s.jsx)(t.h3,{id:"changesetting",children:"ChangeSetting"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ChangeSetting(production As %String = "", configName As %String = "", setting As %String = "", value As %String = "", saveToProduction As %Boolean = 0) As %Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Change the value of a setting for a production item, optionally updating the production class too. Examples:",(0,s.jsx)(t.br,{}),"\nSet s = ..ChangeSetting([Production], ConfigName, Setting, Value)",(0,s.jsx)(t.br,{}),"\nSet s = ##class(%UnitTest.TestProduction).ChangeSetting(Production, ConfigName, Setting, Value, 1)",(0,s.jsx)(t.br,{}),"\nThe values are validated. Check the return for errors."]}),"\n",(0,s.jsx)(t.h3,{id:"changeorgetsetting",children:"ChangeOrGetSetting"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ChangeOrGetSetting(operation As %String = "Get", production As %String = "", configName As %String = "", setting As %String = "", ByRef value As %String = "") As %Status [ Internal, Private ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Internal method called by GetSetting and ChangeSetting."}),"\n",(0,s.jsx)(t.h3,{id:"createcredentials",children:"CreateCredentials"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod CreateCredentials(CredId As %String = "", User As %String = "", Pw As %String = "") As %Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Define credentials. If one already exists with the same Id, it's overwritten. Examples:",(0,s.jsx)(t.br,{}),"\nSet s = ..CreateCredentials(Id, UserName, Password)",(0,s.jsx)(t.br,{}),"\nSet s = ##class(%UnitTest.TestProduction).CreateCredentials(Id, UserName, Password)"]}),"\n",(0,s.jsx)(t.h3,{id:"sendrequest",children:"SendRequest"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod SendRequest(Name As %String = "", Req As %RegisteredObject, ByRef Resp As %RegisteredObject, GetReply As %Boolean = 0, Time As %Integer = 30) As %Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Call Interoperability testing service to send a request to a business process or business operation. This is a way to invoke them directly without creating a dummy business service. The production needs to be enabled for testing.",(0,s.jsx)(t.br,{}),"\nIf no request object type is passed, then type Ens.Request is assumed.",(0,s.jsx)(t.br,{}),"\nExample:",(0,s.jsx)(t.br,{}),'\nSet s = ..SendRequest("MyBPName", MyRequestObject, .Response, [GetReply], [Time])',(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.strong,{children:"GetReply=1"})," indicates a response is expected (default is 0).",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.strong,{children:"Time"})," indicates how long to wait for a response in case GetReply=1. Default is 30 secs."]}),"\n",(0,s.jsx)(t.h3,{id:"error",children:"Error"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod Error(msg As %String = "", s As %Status = "") As %Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Compose a general error message as %Status with the text message provided. If message is the null string, this method returns $$$OK instead.",(0,s.jsx)(t.br,{}),"\nTo append text to an existing error text, pass the status as a second argument.",(0,s.jsx)(t.br,{}),"\nExamples:",(0,s.jsx)(t.br,{}),"\nSet status=..Error(message, [oldstatus])",(0,s.jsx)(t.br,{}),"\nSet status=##class(%UnitTest.TestProduction).Error(message, [oldstatus])"]}),"\n",(0,s.jsx)(t.h3,{id:"logerrors",children:"LogErrors"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method LogErrors(s As %Status = 1, where As %String = "")\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Generate log messages with all errors contained in status variable ",(0,s.jsx)(t.strong,{children:"s"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"geteventlog",children:"GetEventLog"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method GetEventLog(type As %String = "all", name As %String = "", baseId As %Integer, ByRef v As %String, Output New As %Integer) As %Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Retrieve records from the Interoperability event log, returning them in an array.",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.strong,{children:"type"}),' = "info" or "error" or "trace" or "warning" or "alert" or "assert" or "infouser" or "startstop" or "other" ',(0,s.jsx)(t.strong,{children:"name"})," = config name to filter entries (only fetch entries associated with this config name)",(0,s.jsx)(t.br,{}),"\nExamples:",(0,s.jsx)(t.br,{}),'\nTo get new user entries of type "Info":',(0,s.jsx)(t.br,{}),'\nSet s = ..GetEventLog("infouser", "", "", .Log, .New)',(0,s.jsx)(t.br,{}),'\nTo get new entries of type "Trace":',(0,s.jsx)(t.br,{}),'\nSet s = ..GetEventLog("trace", "MyBP", "", .Log, .New)',(0,s.jsx)(t.br,{}),"\nwhere ",(0,s.jsx)(t.strong,{children:"New"})," indicates how many new entries were found.",(0,s.jsx)(t.br,{}),"\nSample format for the returned array:",(0,s.jsx)(t.br,{}),'\nLog(1,"ConfigName")="Ens.ScheduleHandler"',(0,s.jsx)(t.br,{}),'\nLog(1,"ID")="114"',(0,s.jsx)(t.br,{}),'\nLog(1,"Job")="4768"',(0,s.jsx)(t.br,{}),'\nLog(1,"SessionId")="8"',(0,s.jsx)(t.br,{}),'\nLog(1,"SourceClass")="Ens.Director"',(0,s.jsx)(t.br,{}),'\nLog(1,"SourceMethod")="UpdateProduction"',(0,s.jsx)(t.br,{}),'\nLog(1,"Stack")=""',(0,s.jsx)(t.br,{}),'\nLog(1,"Text")="Production \'QDENS.HL7.HL7Routing.Production\' is up-to-date."',(0,s.jsx)(t.br,{}),'\nLog(1,"TimeLogged")="2006-12-05 17:41:06.421"',(0,s.jsx)(t.br,{}),'\nLog(1,"Type")="Info"']}),"\n",(0,s.jsx)(t.h3,{id:"selecttostring",children:"SelectToString"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod SelectToString(ByRef Log As %String, Prop As %String = "", Value As %String = "", Del As %String = "^") As %String\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Extract select text information from the event log returned results, and return a delimited string containing the count followed by selected values, filtering by property/index ",(0,s.jsx)(t.strong,{children:"Prop"})," equals to ",(0,s.jsx)(t.strong,{children:"Value"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"run",children:"Run"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Run() As %Status\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Run itself without loading/deleting any classes. Example:",(0,s.jsx)(t.br,{}),"\nDo ##class(MyTestClass).Run()",(0,s.jsx)(t.br,{}),"\nSee also method Debug."]}),"\n",(0,s.jsx)(t.h3,{id:"debug",children:"Debug"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Debug() As %Status\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Run itself in debug mode, without loading/deleting any classes. If an assertion fails or if an error is encountered, execution will pause. Example:",(0,s.jsx)(t.br,{}),"\nDo ##class(MyTestClass).Debug()",(0,s.jsx)(t.br,{}),"\nSee also method Run."]}),"\n",(0,s.jsx)(t.h3,{id:"export",children:"Export"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod Export(dir As %String = "", suite As %String = "")\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Export all classes in the same package to a directory as a set of individual files.",(0,s.jsx)(t.br,{}),"\nIf the directory is not specified, then ^UnitTestRoot will be used as a base and the last piece of the package name will be used as the subdirectory name.",(0,s.jsx)(t.br,{}),"\nIf the suite name is not specified, then the last piece of the package name of the current class will be used.",(0,s.jsx)(t.br,{}),"\nNote that parameter suite is ignored when a directory is specified.",(0,s.jsx)(t.br,{}),"\nExamples:",(0,s.jsx)(t.br,{}),"\nDo ##class(MyTestClass).Export()",(0,s.jsx)(t.br,{}),'\nDo ##class(MyTestClass).Export("D:\\Test\\MyProductionTests\\TempDir")',(0,s.jsx)(t.br,{}),'\nDo ##class(MyTestClass).Export(,"MySuite")',(0,s.jsx)(t.br,{}),"\nTo do: In production-enabled namespaces, all rules and VDoc schemas whose names start with the package should also be exported.",(0,s.jsx)(t.br,{}),"\nTo do: Think about other kinds of files such as CSP pages."]}),"\n",(0,s.jsx)(t.h3,{id:"listsettings",children:"ListSettings"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ListSettings(production As %String = "", configName As %String = "")\n'})}),"\n",(0,s.jsxs)(t.p,{children:["List all existing settings and their values for a given production and config item name. If a config name is provided, all settings for this config name are listed. Otherwise all config names are listed. Examples:",(0,s.jsx)(t.br,{}),"\nDo ##class(MyTestClass).ListSettings(, [configname])",(0,s.jsx)(t.br,{}),"\nDo ##class(%UnitTest.TestProduction).ListSettings(production, [configname])"]}),"\n",(0,s.jsx)(t.h3,{id:"submaindir",children:"SubMainDir"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method SubMainDir(AddDirs = "") As %String\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Helper method to return the normalized directory name for the full directory path composed of the default test directory plus the additional directories, eg. ",(0,s.jsx)(t.strong,{children:"sub1/sub2"}),". The argument containing the additional directories must use slashes ( ",(0,s.jsx)(t.strong,{children:"/"})," ) as the directory delimiter, on all platforms."]}),"\n",(0,s.jsx)(t.h3,{id:"createmaindirtree",children:"CreateMainDirTree"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method CreateMainDirTree() As %Status\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Create a test directory tree that is suitable for generic testing and for HL7 testing. The default root test directory is defined by property MainDir.",(0,s.jsx)(t.br,{}),"\nThis method does not erase any files or directories if they are already present. To do a cleanup, see method CleanUpDirectory.",(0,s.jsx)(t.br,{}),"\nThis method may be invoked in OnBeforeAllTests() or OnBeforeProductionStart() to initialize the test directory tree."]}),"\n",(0,s.jsx)(t.h3,{id:"cleanupdirectory",children:"CleanUpDirectory"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method CleanUpDirectory(Dir As %String = "", Recurse As %Boolean = 0) As %Status [ Internal ]\n'})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Delete"})," all files in a directory. If ",(0,s.jsx)(t.strong,{children:"Recurse"})," is true, also delete all subdirectories recursively, and delete the original directory selected, that is, the entire directory vanishes."]}),"\n",(0,s.jsx)(t.h3,{id:"copyfile",children:"CopyFile"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method CopyFile(FileName As %String = "", SourceDir As %String = "", TargetDir As %String = "") As %Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Copy a file from a directory to another directory. This allows for example to place files in input directories. The default origin directory ",(0,s.jsx)(t.strong,{children:"SourceDir"})," is the unit test directory. The default destination directory ",(0,s.jsx)(t.strong,{children:"TargetDir"})," is the directory name specified by HL7InputDir."]}),"\n",(0,s.jsx)(t.h3,{id:"comparefiles",children:"CompareFiles"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method CompareFiles(FileName1 As %String = "", FileName2 As %String = "", Dir1 As %String = "", Dir2 As %String = "") As %Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Compare the contents of two files and return $$$OK if they are equal, or a status code otherwise.",(0,s.jsx)(t.br,{}),"\nThe default for ",(0,s.jsx)(t.strong,{children:"FileName2"})," is the same name as ",(0,s.jsx)(t.strong,{children:"FileName1"})," concatenated with ",(0,s.jsx)(t.strong,{children:"_reference"})," before the last file extension.",(0,s.jsx)(t.br,{}),"\nExamples:",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.strong,{children:"FileName1"})," = MyFile.txt, default ",(0,s.jsx)(t.strong,{children:"FileName2"})," = MyFile_Reference.txt",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.strong,{children:"FileName1"})," = HL7Message_ADTA01, default ",(0,s.jsx)(t.strong,{children:"FileName2"})," = HL7Message_ADTA01_Reference",(0,s.jsx)(t.br,{}),"\nThe default for ",(0,s.jsx)(t.strong,{children:"Dir1"})," is the directory name specified by HL7OutputDir.",(0,s.jsx)(t.br,{}),"\nThe default for ",(0,s.jsx)(t.strong,{children:"Dir2"})," is the unit test directory."]}),"\n",(0,s.jsx)(t.h3,{id:"getfullname",children:"GetFullName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetFullName(Dir As %String = "", FileName As %String = "") As %String\n'})}),"\n",(0,s.jsx)(t.p,{children:"Given a directory and a file name, return a normalized full file name."}),"\n",(0,s.jsx)(t.h3,{id:"checkenvironment",children:"CheckEnvironment"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method CheckEnvironment() As %Status [ CodeMode = objectgenerator, Internal, Private ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"checkparameterproduction",children:"CheckParameterPRODUCTION"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method CheckParameterPRODUCTION() As %Status [ CodeMode = objectgenerator, Internal, Private ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Enforce mandatory parameter PRODUCTION to be filled in."}),"\n",(0,s.jsx)(t.h3,{id:"getmacros",children:"GetMacros"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetMacros(Output MacroVars As %String) [ CodeMode = objectgenerator, Internal, Private ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Define an array with the macros used in this class from the definitions in the production when available."}),"\n",(0,s.jsx)(t.h3,{id:"checknamespace",children:"CheckNamespace"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CheckNamespace() As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Check if namespace is Interoperability or HealthShare enabled."}),"\n",(0,s.jsx)(t.h3,{id:"startproduction",children:"StartProduction"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method StartProduction() As %Boolean [ Internal, Private ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"stopproduction",children:"StopProduction"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method StopProduction() As %Boolean [ Internal, Private ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"waitforstate",children:"WaitForState"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method WaitForState(pState As %String) As %Status [ Internal, Private ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"testcontrol",children:"TestControl"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method TestControl() As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Main execution flow control."})]})}function c(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>a});var s=r(96540);const n={},i=s.createContext(n);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);