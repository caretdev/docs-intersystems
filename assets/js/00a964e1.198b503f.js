"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[49049],{98678:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>r,default:()=>c,frontMatter:()=>l,toc:()=>i});var n=t(74848),a=t(28453);const l={pagination_prev:null,pagination_next:null},r="%xsd.float",i=[{value:"Parameters",id:"parameters",level:2},{value:"XSDTYPE",id:"xsdtype",level:3},{value:"JSONTYPE",id:"jsontype",level:3},{value:"Methods",id:"methods",level:2},{value:"XSDToLogical",id:"xsdtological",level:3},{value:"IsValid",id:"isvalid",level:3}];function o(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"xsdfloat",children:"%xsd.float"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class %xsd.float Extends %Float [ Not ProcedureBlock, System = 2 ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This data type represents a floating point number. Internally, it is stored as a floating point value."}),"\n",(0,n.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(s.h3,{id:"xsdtype",children:"XSDTYPE"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter XSDTYPE = "float";\n'})}),"\n",(0,n.jsx)(s.p,{children:"Declares the XSD type used when projecting XML schemas."}),"\n",(0,n.jsx)(s.h3,{id:"jsontype",children:"JSONTYPE"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter JSONTYPE = "double";\n'})}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"xsdtological",children:"XSDToLogical"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod XSDToLogical(%val As %String) As %Float [ CodeMode = generator ]\n"})}),"\n",(0,n.jsx)(s.p,{children:'Converts the SOAP encoded input decimal value into a logical value. Also supports the XML values of -0, INF, -INF and NaN which are stored as strings. Returns "" for error.'}),"\n",(0,n.jsx)(s.h3,{id:"isvalid",children:"IsValid"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsValid(%val As %RawString) As %Status [ CodeMode = generator, GenerateAfter = IsValidDT ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Tests if the logical value %val, which is a floating point value, is valid. The validation is based on the class parameter settings used for the class attribute this data type is associated with. In this case, ",(0,n.jsx)(s.a,{href:"#MAXVAL",children:"MAXVAL"})," and ",(0,n.jsx)(s.a,{href:"#MINVAL",children:"MINVAL"}),"."]})]})}function c(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>i});var n=t(96540);const a={},l=n.createContext(a);function r(e){const s=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(l.Provider,{value:s},e.children)}}}]);