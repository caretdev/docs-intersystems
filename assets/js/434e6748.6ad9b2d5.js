"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[26724],{75423:(e,s,a)=>{a.r(s),a.d(s,{contentTitle:()=>r,default:()=>o,frontMatter:()=>l,toc:()=>i});var t=a(74848),n=a(28453);const l={pagination_prev:null,pagination_next:null},r="%SYS.GlobalQuery",i=[{value:"Parameters",id:"parameters",level:2},{value:"DEFAULTCONCURRENCY",id:"defaultconcurrency",level:3},{value:"DOMAIN",id:"domain",level:3},{value:"Methods",id:"methods",level:2},{value:"DecodeReplication",id:"decodereplication",level:3},{value:"Lock",id:"lock",level:3},{value:"UnLock",id:"unlock",level:3},{value:"DisplayToLogical",id:"displaytological",level:3},{value:"Generate",id:"generate",level:3},{value:"LogicalToDisplay",id:"logicaltodisplay",level:3},{value:"Matches",id:"matches",level:3},{value:"Parse",id:"parse",level:3},{value:"Wildcards",id:"wildcards",level:3},{value:"DirectoryListExecute",id:"directorylistexecute",level:3},{value:"DirectoryListFetch",id:"directorylistfetch",level:3},{value:"DirectoryListClose",id:"directorylistclose",level:3},{value:"NameSpaceListExecute",id:"namespacelistexecute",level:3},{value:"NameSpaceListFetch",id:"namespacelistfetch",level:3},{value:"NameSpaceListClose",id:"namespacelistclose",level:3},{value:"NameSpaceListChuiExecute",id:"namespacelistchuiexecute",level:3},{value:"NameSpaceListChuiFetch",id:"namespacelistchuifetch",level:3},{value:"NameSpaceListChuiClose",id:"namespacelistchuiclose",level:3},{value:"SizeExecute",id:"sizeexecute",level:3},{value:"SizeFetch",id:"sizefetch",level:3},{value:"SizeClose",id:"sizeclose",level:3},{value:"NameSpaceSizeExecute",id:"namespacesizeexecute",level:3},{value:"NameSpaceSizeFetch",id:"namespacesizefetch",level:3},{value:"NameSpaceSizeClose",id:"namespacesizeclose",level:3},{value:"GetGlobalMappings",id:"getglobalmappings",level:3}];function c(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"sysglobalquery",children:"%SYS.GlobalQuery"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %SYS.GlobalQuery Extends %SYSTEM.Help [ Abstract, System = 3 ]\n"})}),"\n",(0,t.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(s.h3,{id:"defaultconcurrency",children:"DEFAULTCONCURRENCY"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter DEFAULTCONCURRENCY [ Internal ] = 0;\n"})}),"\n",(0,t.jsx)(s.h3,{id:"domain",children:"DOMAIN"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter DOMAIN = "%Utility";\n'})}),"\n",(0,t.jsx)(s.p,{children:"Default Localization Domain"}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"decodereplication",children:"DecodeReplication"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DecodeReplication(Index As %Integer) As %String [ Internal, Private ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"lock",children:"Lock"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Lock(Global, Subscript, Name, Timeout = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"unlock",children:"UnLock"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UnLock(Global, Subscript, IModeLock = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"displaytological",children:"DisplayToLogical"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DisplayToLogical(%val As %String) As %Library.Boolean [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"generate",children:"Generate"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Generate(Mask As %String, ByRef Begin As %String, ByRef End As %String, ByRef Pattern As %String, Flag As %Integer) [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Passed a pattern match this returns an COS style pattern and a start and stop point."}),"\n",(0,t.jsx)(s.h3,{id:"logicaltodisplay",children:"LogicalToDisplay"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToDisplay(%val As %Library.Boolean) As %String [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"matches",children:"Matches"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Matches(Name As %String, ByRef Patterns As %String) As %Boolean [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns whether the passed name matches the Pattern array"}),"\n",(0,t.jsx)(s.h3,{id:"parse",children:"Parse"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Parse(Masks As %String, ByRef Patterns As %String) [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Parses a passed mask into a series of patterns in an array.",(0,t.jsx)(s.br,{}),"\nThe resulting array can be passed to the $SYSTEM.Library.Pattern.Matches function along with a Name to determine if the name matches the mask."]}),"\n",(0,t.jsxs)(s.p,{children:["The passed in mask may be a series of masks, each separated by a comma. Valid masks are as follows:",(0,t.jsx)(s.br,{}),"\nABC* - All strings starting with ABC",(0,t.jsx)(s.br,{}),"\nA:D - All strings between A and D",(0,t.jsx)(s.br,{}),"\nA:D,Y* - All strings between A and D, and all strings starting with Y",(0,t.jsx)(s.br,{}),"\nA:D,'C* - All strings between A and D, except those starting with C"]}),"\n",(0,t.jsx)(s.h3,{id:"wildcards",children:"Wildcards"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Wildcards(Mask As %String = "*") As %Boolean [ Internal ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"Check whether the input mask has wildcards specified. Return TRUE if there is wildcard otherwise return FALSE."}),"\n",(0,t.jsx)(s.h3,{id:"directorylistexecute",children:"DirectoryListExecute"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DirectoryListExecute(ByRef qHandle As %Binary, Directory As %String, System As %String = "", Mask As %String = "*", SystemGlobals As %Boolean = 0, Index As %Integer = 0, IgnoreHasData As %Boolean = 0) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"Returns a list of the Globals in a database"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),(0,t.jsx)(s.br,{}),"\nDirectory - the directory file-spec for a database file.",(0,t.jsx)(s.br,{}),"\nSystem - ECP database server logical name, as defined in the Application Server list.",(0,t.jsx)(s.br,{}),'\nMask - a mask, or comma-separated list of masks, to select globals. Default is "*" for all.',(0,t.jsx)(s.br,{}),'\nSystemGlobals - boolean flag to include system globals in the results. Default is "0".',(0,t.jsx)(s.br,{}),"\nIndex - Internal use only.",(0,t.jsx)(s.br,{}),"\nIgnoreHasData - For faster list of Globals set this to 1 and the HasData column will always be FALSE."]}),"\n",(0,t.jsxs)(s.p,{children:["Valid masks are as follows:",(0,t.jsx)(s.br,{}),"\nABC* - All strings starting with ABC",(0,t.jsx)(s.br,{}),"\nA:D - All strings between A and D",(0,t.jsx)(s.br,{}),"\nA:D,Y* - All strings between A and D, and all strings starting with Y",(0,t.jsx)(s.br,{}),"\nA:D,'C* - All strings between A and D, except those starting with C"]}),"\n",(0,t.jsx)(s.h3,{id:"directorylistfetch",children:"DirectoryListFetch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DirectoryListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"directorylistclose",children:"DirectoryListClose"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DirectoryListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = DirectoryListExecute ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"namespacelistexecute",children:"NameSpaceListExecute"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod NameSpaceListExecute(ByRef qHandle As %Binary, NameSpace As %String = {$namespace}, Mask As %String = "*", SystemGlobals As %Boolean = 0, ByRef UnavailableDatabases As %String, Index As %Integer = 0, IgnoreHasData As %Boolean = 0, Mapped As %Boolean = 1) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"Returns a list of the Globals in a namespace (used for GUI display)"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),(0,t.jsx)(s.br,{}),"\nNameSpace - a namespace. Default is current namespace.",(0,t.jsx)(s.br,{}),'\nMask - a mask, or comma-separated list of masks, to select globals. Default is "*" for all.',(0,t.jsx)(s.br,{}),'\nSystemGlobals - boolean flag to include system globals in the results. Default is "0".',(0,t.jsx)(s.br,{}),"\nUnavailableDatabases - a returned local array of any databases not currently accessible, i.e. array(name)=status.",(0,t.jsx)(s.br,{}),"\nIndex - Internal use only.",(0,t.jsx)(s.br,{}),"\nIgnoreHasData - For faster list of Globals set this to 1 and the HasData column will always be FALSE.",(0,t.jsx)(s.br,{}),"\nMapped - Return all mapped global nodes when set to 1, the default value of this parameter is 1.",(0,t.jsx)(s.br,{}),"\nValid masks are as follows:",(0,t.jsx)(s.br,{}),"\nABC* - All strings starting with ABC",(0,t.jsx)(s.br,{}),"\nA:D - All strings between A and D",(0,t.jsx)(s.br,{}),"\nA:D,Y* - All strings between A and D, and all strings starting with Y",(0,t.jsx)(s.br,{}),"\nA:D,'C* - All strings between A and D, except those starting with C"]}),"\n",(0,t.jsx)(s.h3,{id:"namespacelistfetch",children:"NameSpaceListFetch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NameSpaceListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"namespacelistclose",children:"NameSpaceListClose"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NameSpaceListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = NameSpaceListExecute ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"namespacelistchuiexecute",children:"NameSpaceListChuiExecute"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod NameSpaceListChuiExecute(ByRef qHandle As %Binary, NameSpace As %String = {$namespace}, Mask As %String = "*", SystemGlobals As %Boolean = 0, ByRef UnavailableDatabases As %String, Index As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"Returns a list of Globals in a namespace (used for terminal display)"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),(0,t.jsx)(s.br,{}),"\nNameSpace - a namespace. Default is current namespace.",(0,t.jsx)(s.br,{}),'\nMask - a mask, or comma-separated list of masks, to select globals. Default is "*" for all.',(0,t.jsx)(s.br,{}),'\nSystemGlobals - boolean flag to include system globals in the results. Default is "0".',(0,t.jsx)(s.br,{}),"\nUnavailableDatabases - a returned local array of any databases not currently accessible, i.e. array(name)=status.",(0,t.jsx)(s.br,{}),"\nIndex - Internal use only."]}),"\n",(0,t.jsxs)(s.p,{children:["Valid masks are as follows:",(0,t.jsx)(s.br,{}),"\nABC* - All strings starting with ABC",(0,t.jsx)(s.br,{}),"\nA:D - All strings between A and D",(0,t.jsx)(s.br,{}),"\nA:D,Y* - All strings between A and D, and all strings starting with Y",(0,t.jsx)(s.br,{}),"\nA:D,'C* - All strings between A and D, except those starting with C"]}),"\n",(0,t.jsx)(s.h3,{id:"namespacelistchuifetch",children:"NameSpaceListChuiFetch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NameSpaceListChuiFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"namespacelistchuiclose",children:"NameSpaceListChuiClose"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NameSpaceListChuiClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = NameSpaceListExecute ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"sizeexecute",children:"SizeExecute"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SizeExecute(ByRef qHandle As %Binary, Directory As %String, System As %String = "", Mask As %String = "*", SystemGlobals As %Boolean = 0, Index As %Integer = 0, FastFlag As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"Returns the size of Globals in a database"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),(0,t.jsx)(s.br,{}),"\nDirectory - the directory file-spec for a database file.",(0,t.jsx)(s.br,{}),"\nSystem - Currently ignored, pass as a null string. Getting the size of a global in an ECP mounted database is not currently supported. You can get the size for these globals directly on the ECP server itself.",(0,t.jsx)(s.br,{}),'\nMask - a mask, or comma-separated list of masks, to select globals. Default is "*" for all.',(0,t.jsx)(s.br,{}),'\nSystemGlobals - boolean flag to include system globals in the results. Default is "0".',(0,t.jsx)(s.br,{}),"\nIndex - Internal use only.",(0,t.jsx)(s.br,{}),"\nFastFlag - If 1, don't return 'Used' count, only the precise 'Allocated' count. If 2, return estimates for 'Allocated' and 'Used' (fastest option for huge globals)."]}),"\n",(0,t.jsxs)(s.p,{children:["Valid masks are as follows:",(0,t.jsx)(s.br,{}),"\nABC* - All strings starting with ABC",(0,t.jsx)(s.br,{}),"\nA:D - All strings between A and D",(0,t.jsx)(s.br,{}),"\nA:D,Y* - All strings between A and D, and all strings starting with Y",(0,t.jsx)(s.br,{}),"\nA:D,'C* - All strings between A and D, except those starting with C"]}),"\n",(0,t.jsx)(s.h3,{id:"sizefetch",children:"SizeFetch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SizeFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"sizeclose",children:"SizeClose"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SizeClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = SizeExecute ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"namespacesizeexecute",children:"NameSpaceSizeExecute"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NameSpaceSizeExecute(ByRef qHandle As %Binary, Global As %String, FastFlag As %Boolean = 0, SilentSkip As %Boolean = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Measures the size of a given global or subnode in the current namespace, iterating over the mappings and measuring data in each. Each row returns the subscript range that was measured, the corresponding database, and either allocated or estimated size in megabytes (MB)."}),"\n",(0,t.jsx)(s.p,{children:"For root globals, this query measures size by each subscript mapping. The sum will equal the total size (or estimate) of the global from the namespace's perspecive."}),"\n",(0,t.jsx)(s.p,{children:"For subnodes, this query measures the entire subnode once in each mapped database. In typical scenarios, this will still sum to the subnode's overall size from the namespace's perspective."}),"\n",(0,t.jsx)(s.p,{children:"Note that in certain configurations, a database may contain global data that the namespace doesn't see. This can happen if different namespaces map different parts of the same global to the same database. Subnode queries may measure unseen data and return inflated results in these cases."}),"\n",(0,t.jsx)(s.p,{children:"Measurements in remote or dismounted databases are unsupported. They either return errors or are quietly skipped if SilentSkip=1."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Parameters:"}),(0,t.jsx)(s.br,{}),'\nGlobal - the name of the global or subnode to measure (for example, "testglobal" or "testglobal(1)"), with or without a prepended carat.',(0,t.jsx)(s.br,{}),"\nFastFlag - flag to run fast stochastic estimation. If set, fills Estimated column. Otherwise, fills Allocated column. Default is 0 (not set). 1 is recommended for huge globals.",(0,t.jsx)(s.br,{}),"\nSilentSkip - flag to silently skip unavailable databases and exclude them from results. If 0 (not set), stops and returns an error instead of skipping. Default is 0.",(0,t.jsx)(s.br,{}),"\nExecutes all relevant subscript range measurements and assembles them in a temp global for Fetch."]}),"\n",(0,t.jsx)(s.h3,{id:"namespacesizefetch",children:"NameSpaceSizeFetch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NameSpaceSizeFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Iterates over results in the temp global assembled by NameSpaceSizeExecute. Results should already be in the $list format expected for rows."}),"\n",(0,t.jsx)(s.h3,{id:"namespacesizeclose",children:"NameSpaceSizeClose"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NameSpaceSizeClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = NameSpaceSizeExecute ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Cleans up the temp global data from NameSpaceSizeExecute."}),"\n",(0,t.jsx)(s.h3,{id:"getglobalmappings",children:"GetGlobalMappings"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetGlobalMappings(Namespace As %String, Global As %String, ByRef mapArray, SilentSkip As %Boolean = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Internal helper for the NameSpaceSize class query. Amasses a validated array of subscript mappings and their corresponding databases for a given global (or subnode) in a given namespace. Takes as input a global name (no carat), the empty array to fill (passed by reference), and the SilentSkip flag. By default, returns status OK if all databases are local and available and an error status if a database is remote, dismounted, or missing. If SilentSkip is set, it skips over unavailable databases and assembles an array of the local, available ones without complaint."})]})}function o(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,s,a)=>{a.d(s,{R:()=>r,x:()=>i});var t=a(96540);const n={},l=t.createContext(n);function r(e){const s=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),t.createElement(l.Provider,{value:s},e.children)}}}]);