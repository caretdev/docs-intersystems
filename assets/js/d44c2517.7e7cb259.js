"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[47095],{89236:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>i,default:()=>c,frontMatter:()=>r,toc:()=>o});var a=s(74848),n=s(28453);const r={pagination_prev:null,pagination_next:null},i="SYS.DataCheck.Destination",o=[{value:"Properties",id:"properties",level:2},{value:"Configuration",id:"configuration",level:3},{value:"GUID",id:"guid",level:3},{value:"RunParameters",id:"runparameters",level:3},{value:"Stats",id:"stats",level:3},{value:"Workflow",id:"workflow",level:3},{value:"Phase",id:"phase",level:3},{value:"PhaseNumber",id:"phasenumber",level:3},{value:"LastConnectedAddress",id:"lastconnectedaddress",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"%OnDelete",id:"ondelete",level:3},{value:"Start",id:"start",level:3},{value:"Stop",id:"stop",level:3},{value:"StopRequested",id:"stoprequested",level:3},{value:"CheckMirror",id:"checkmirror",level:3},{value:"Connect",id:"connect",level:3},{value:"Manager",id:"manager",level:3},{value:"ManagerSub",id:"managersub",level:3},{value:"WorkflowTimeoutRemaining",id:"workflowtimeoutremaining",level:3},{value:"ManagerWorkflow",id:"managerworkflow",level:3},{value:"ManagerFindGlobals",id:"managerfindglobals",level:3},{value:"ManagerDeleteQueries",id:"managerdeletequeries",level:3},{value:"ManagerRequeueActiveQueries",id:"managerrequeueactivequeries",level:3},{value:"ManagerCompletedQuery",id:"managercompletedquery",level:3},{value:"ManagerFindQueries",id:"managerfindqueries",level:3},{value:"ManagerLoadQueries",id:"managerloadqueries",level:3},{value:"ManagerRunQuery",id:"managerrunquery",level:3},{value:"ManagerSplitQuery",id:"managersplitquery",level:3},{value:"ManagerSave",id:"managersave",level:3},{value:"Receiver",id:"receiver",level:3},{value:"GetSourceWorkerMetrics",id:"getsourceworkermetrics",level:3},{value:"SourceDatabasesExecute",id:"sourcedatabasesexecute",level:3},{value:"SourceDatabasesClose",id:"sourcedatabasesclose",level:3},{value:"SourceDatabasesFetch",id:"sourcedatabasesfetch",level:3},{value:"DatabasesToCheckExecute",id:"databasestocheckexecute",level:3},{value:"DatabasesToCheckClose",id:"databasestocheckclose",level:3},{value:"DatabasesToCheckFetch",id:"databasestocheckfetch",level:3}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"sysdatacheckdestination",children:"SYS.DataCheck.Destination"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Class SYS.DataCheck.Destination Extends SYS.DataCheck.System\n"})}),"\n",(0,a.jsx)(t.p,{children:"The destination system directs the datacheck protocol. This class provides control methods for starting and stopping the system. See System for overview."}),"\n",(0,a.jsx)(t.p,{children:"To create a new DataCheck system:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Create a new DataCheck Destination object on the destination system, passing the appropriate parameters to the %New constructor (see %OnNew). Its related objects will be created automatically."}),"\n",(0,a.jsx)(t.li,{children:"Set up information about the source system in the Configuration object, referenced by the Configuration property."}),"\n",(0,a.jsx)(t.li,{children:"Modify the RunParameters object, referenced by the RunParameters property. It defines performance characteristics and what globals should be checked, with conservative but usable defaults."}),"\n",(0,a.jsx)(t.li,{children:"If needed, modify the Workflow object, referenced by the Workflow property. It defines the strategy for performing the check and has defaults that are often suitable."}),"\n",(0,a.jsx)(t.li,{children:"Call %Save on the destination object to save it and, implicitly, its referenced objects."}),"\n",(0,a.jsx)(t.li,{children:"Ensure that the source system has %Service_DataCheck enabled"}),"\n",(0,a.jsx)(t.li,{children:"Use Start to start the check."}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Important:"})," Once created, the destination object is modified by the DataCheck daemons on a running system only, and should be treated as read-only for all other purposes. Users should call %Save on this object only once as part of creating the DataCheck destination system."]}),"\n",(0,a.jsx)(t.p,{children:"To modify an existing DataCheck system, modify the Configuration, RunParameters, or Workflow objects as needed, adhering to the following guidelines:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"All of the referenced objects (as well as the Destination object itself) have, as their ID, the name of the Destination object. Each object can be opened with %OpenId(name) directly or referenced through the namesake property of the destination object."}),"\n",(0,a.jsx)(t.li,{children:"Call the %Save method of the referenced object that has been modified only. Do not call %Save on the destination object."}),"\n",(0,a.jsx)(t.li,{children:"The RunParameters and Workflow objects can be saved while the system is running to change it's behavior dynamically. The system must be stopped to save changes to the Configuration object.\nThe referenced objects should not be deleted or recreated, only modified. To delete a Datacheck system, call %DeleteId(name). All related objects and DataCheck results are deleted automatically."}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(t.h3,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Property Configuration As Configuration;\n"})}),"\n",(0,a.jsx)(t.p,{children:"Configuration object for this system"}),"\n",(0,a.jsx)(t.h3,{id:"guid",children:"GUID"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Property GUID As %String;\n"})}),"\n",(0,a.jsx)(t.p,{children:"Used on the Source to compute a unique name for this connection"}),"\n",(0,a.jsx)(t.h3,{id:"runparameters",children:"RunParameters"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Property RunParameters As RunParameters;\n"})}),"\n",(0,a.jsx)(t.p,{children:"Running Parameters object for this system"}),"\n",(0,a.jsx)(t.h3,{id:"stats",children:"Stats"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Property Stats As Statistics [ Internal ];\n"})}),"\n",(0,a.jsx)(t.p,{children:"Statistics object for this system"}),"\n",(0,a.jsx)(t.h3,{id:"workflow",children:"Workflow"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Property Workflow As Workflow;\n"})}),"\n",(0,a.jsx)(t.p,{children:"Workflow object for this system"}),"\n",(0,a.jsx)(t.h3,{id:"phase",children:"Phase"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Property Phase As Phase(CLASSNAME = 1);\n"})}),"\n",(0,a.jsx)(t.p,{children:"Current phase of workflow. This property is modified by the DataCheck daemons on a running system only, and should be treated as read-only for all other purposes."}),"\n",(0,a.jsx)(t.h3,{id:"phasenumber",children:"PhaseNumber"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Property PhaseNumber As %Integer;\n"})}),"\n",(0,a.jsx)(t.p,{children:"Current phase number. This property is modified by the DataCheck daemons on a running system only, and should be treated as read-only for all other purposes."}),"\n",(0,a.jsx)(t.h3,{id:"lastconnectedaddress",children:"LastConnectedAddress"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Property LastConnectedAddress As %String [ Internal ];\n"})}),"\n",(0,a.jsx)(t.p,{children:"Last address used to connect to the source. Used internally to govern the starting address when deciding which mirror member address to use first."}),"\n",(0,a.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(t.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Method %OnNew(name As %String, mirrorname = "") As %Status\n'})}),"\n",(0,a.jsx)(t.p,{children:"Constructor for creating a new DataCheck destination system. Specify a unique name for this DataCheck system as the first parameter. If this DataCheck system is to be based on a mirror configuration, pass the mirror name as the second parameter."}),"\n",(0,a.jsx)(t.h3,{id:"ondelete",children:"%OnDelete"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnDelete(oid As %ObjectIdentity) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"start",children:"Start"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method Start(restartworkflow As %Boolean) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Starts the system if not already started. Returns %Status. If the 'restartworkflow' parameter is set to true, the workflow will be set to restart at phase #1 rather than resume where it left off."}),"\n",(0,a.jsx)(t.p,{children:"Any changes to the destination object or related objects must be saved before calling this method."}),"\n",(0,a.jsx)(t.p,{children:"Note: A return of $$$OK return here does not indicate the system started successfully See the GetState() method to check the running state"}),"\n",(0,a.jsx)(t.h3,{id:"stop",children:"Stop"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method Stop() As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Requests the system to stop if running. Upon restart, the system will resume processing the queries that it was last running."}),"\n",(0,a.jsx)(t.p,{children:"Note: The system is not necessarily stopped upon returning from this method See the GetState() method to check the running state"}),"\n",(0,a.jsx)(t.h3,{id:"stoprequested",children:"StopRequested"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method StopRequested(Output reason As StateReason) As %Boolean [ Internal, Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns true if the system has been requested to stop. On returning true, 'reason' will be set to the reason code."}),"\n",(0,a.jsx)(t.h3,{id:"checkmirror",children:"CheckMirror"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method CheckMirror(message As %String, Output reason As StateReason, Output wait As %Boolean) As %Boolean [ Internal, Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Given a message of type $$$MsgTypeMirrorInfo, checks the state of the mirror with the configured DataCheck options. Returns true if the system is okay to continue operating, false otherwise. On returning false, the output parameter 'reason' stores the reason and 'wait' is true if the system should wait for the mirror to be ready."}),"\n",(0,a.jsx)(t.h3,{id:"connect",children:"Connect"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method Connect(jobtype As %String, timeout As %Integer, Output message As %String) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Initiate connection to Source and handle the initial handshake."}),"\n",(0,a.jsx)(t.p,{children:"On success, this method returns $$$OK, the current device is the TCP socket, and the 'message' output parameter contains the $$$MsgTypeVersion message sent from the Source system."}),"\n",(0,a.jsx)(t.p,{children:"If the OPEN to the source timed out, the status code returned will be $$$DCConnectTimeout, and the caller may decide to retry indefinitely. Other status codes are $$$DCAccessDenied, if access is denied by the Source, and $$$DCFeatureNotSupportedByPeer. There is typically no reason to retry on such an error. Timeouts are only approximate and may be adjusted to account for trying the various addresses available in a mirrored connection."}),"\n",(0,a.jsx)(t.p,{children:"Any other exceptions are thrown to the caller's exception handler so that they can be handled just as the caller will handle exceptions for the duration of the communication. This includes the disconnect SystemException codes  and  and the timeout StatusException code $$$DCPeerTimeout (timeout after the connection is established). Though all these exceptions are retyable, it must be done carefully, as this could indicate a problem on the Source."}),"\n",(0,a.jsx)(t.p,{children:"The TCP socket is closed on exception or error status return ."}),"\n",(0,a.jsx)(t.p,{children:"Warning: the implementation doesn't support multiple simultaneous connections from a singe process"}),"\n",(0,a.jsx)(t.h3,{id:"manager",children:"Manager"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method Manager() [ Internal ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"The Destination Query Manager manages startup and shutdown of the connection, dispatches queries to the Source Query Manager and Destination Workers, and accumulates the results into the RangeList."}),"\n",(0,a.jsx)(t.p,{children:"This is the main loop for the Destination Query Manager. This method handles startup, shutdown and reconnection attempts. The connection initiation and bulk of the work happens in ManagerSub()"}),"\n",(0,a.jsx)(t.h3,{id:"managersub",children:"ManagerSub"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method ManagerSub(Output reason As StateReason) [ Internal, Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"This method implements the main connection mechanism and work loop for the Destination Query Manager. It first initiates a connection to the Source Manager, and starts the Destination Receiver and Destination Worker processes. Once the connection is initiated, it reloads any formerly active queries from disk, and sends them out for answers, then enters its work loop."}),"\n",(0,a.jsx)(t.p,{children:"In the work loop, the Destination manager waits for query answers and control messages on the main message queue. Local answers will be queued there by workers and remote answers will be queued there by the Destination receiver. The manager takes the system through the defined workflow, and periodically checks for updates to the workflow and queries submitted by the user. This method returns if a stop is requested, the connection is lost, or an error occurs. If the connection should be retried, it will return true otherwise it returns false. The reason for returning is returned by reference in the 'reason' parameter."}),"\n",(0,a.jsx)(t.h3,{id:"workflowtimeoutremaining",children:"WorkflowTimeoutRemaining"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method WorkflowTimeoutRemaining() As %Integer [ Internal ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns the amount of time (in s) remaining before the workflow timeout expires. Returns -1 if the workflow timeout does not apply. Returns 0 if the workflow timeout has expired."}),"\n",(0,a.jsx)(t.h3,{id:"managerworkflow",children:"ManagerWorkflow"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method ManagerWorkflow(firsttime As %Boolean) [ Internal, Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Important: ManagerSave() must be called before calling this method"}),"\n",(0,a.jsx)(t.h3,{id:"managerfindglobals",children:"ManagerFindGlobals"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method ManagerFindGlobals(usesystemselection As %Boolean = 1) [ Internal ]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"managerdeletequeries",children:"ManagerDeleteQueries"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method ManagerDeleteQueries() As %Integer [ Internal, Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Releases all query and rangelist orefs and deletes all queries from the database Returns the number deleted"}),"\n",(0,a.jsx)(t.h3,{id:"managerrequeueactivequeries",children:"ManagerRequeueActiveQueries"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method ManagerRequeueActiveQueries() As %Integer [ Internal, Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Releases all query and rangelist orefs and clears the Active flag for all queries"}),"\n",(0,a.jsx)(t.h3,{id:"managercompletedquery",children:"ManagerCompletedQuery"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method ManagerCompletedQuery(query As Query) [ Internal, Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Called by the manager when we have received both local and remote answer to a query. Compares the answers, updates the rangelist and submits the next queries if we haven't reached the end of the target range"}),"\n",(0,a.jsx)(t.h3,{id:"managerfindqueries",children:"ManagerFindQueries"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method ManagerFindQueries(queue As %String) [ Internal, Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Execute the SQL statement to find the queries for the specified queue."}),"\n",(0,a.jsx)(t.h3,{id:"managerloadqueries",children:"ManagerLoadQueries"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Method ManagerLoadQueries(queue As %String, replacequery As Query = "") [ Internal, Private ]\n'})}),"\n",(0,a.jsx)(t.p,{children:"Manager subroutine to load queries of the specified queue, put them into %querycache and submit them for answers."}),"\n",(0,a.jsx)(t.p,{children:"Input Parameters:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"queue: queue to load from (always $$$QueryQueueNormal right now)"}),"\n",(0,a.jsx)(t.li,{children:"replacequery: a query object that is completed and whose slot in the querycache is being replaced by a new query."}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"managerrunquery",children:"ManagerRunQuery"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method ManagerRunQuery(query As Query) [ Internal, Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Manager subroutine to submit a query for answers. It sends the query to the peer and if there are no workers or if the query is very small, this method will compute the local answer directly. Otherwise it will send it to a worker job."}),"\n",(0,a.jsx)(t.h3,{id:"managersplitquery",children:"ManagerSplitQuery"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method ManagerSplitQuery(query As Query) As Query [ Internal, Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Manager subroutine to split a query into two for greater parallelism. Adds the new query to the querycache array and runs it."}),"\n",(0,a.jsx)(t.h3,{id:"managersave",children:"ManagerSave"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method ManagerSave() [ Internal, Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Called periodically by the manager to save queries, save rangelists and delete queries that have been processed already."}),"\n",(0,a.jsx)(t.h3,{id:"receiver",children:"Receiver"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method Receiver() [ Internal ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"The Destination Receiver receives query answers from the Source Sender and passes the messages to the Destination Query Manager"}),"\n",(0,a.jsx)(t.h3,{id:"getsourceworkermetrics",children:"GetSourceWorkerMetrics"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetSourceWorkerMetrics(keepopen As %Boolean, Output device As %String) [ Internal ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Get worker metrics from the source."}),"\n",(0,a.jsx)(t.h3,{id:"sourcedatabasesexecute",children:"SourceDatabasesExecute"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SourceDatabasesExecute(ByRef qHandle As %Binary, systemname As %String) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"sourcedatabasesclose",children:"SourceDatabasesClose"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SourceDatabasesClose(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"sourcedatabasesfetch",children:"SourceDatabasesFetch"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SourceDatabasesFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"databasestocheckexecute",children:"DatabasesToCheckExecute"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DatabasesToCheckExecute(ByRef qHandle As %Binary, systemname As %String) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns a row for every database that appears in the specified DataCheck configuration. Databases returned include all databases that: have a database mapping if the DataCheck configuration is not based on mirroring; are in the mirror if the DataCheck configuration is based on mirroring; have a global selection mask defined if the configuration is set to use global selection masks; have subscript ranges to include/exclude defined if the configuration is set to use subscript ranges."}),"\n",(0,a.jsx)(t.p,{children:"A database may be returned because it has global selection criteria defined even though it is not currently available, and thus will not be checked by the DataCheck system. Databases that are not available will have a null in the 'Directory' column. Databases may be unavailable because they do not have a mapping configured (non-mirror), or because they are not in the list of mirrored databases (for mirror-based DataCheck)."}),"\n",(0,a.jsx)(t.p,{children:"Columns:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Database: LocalDatabase datatype for database, a database path for non-mirror, or Mirror database name"}),"\n",(0,a.jsx)(t.li,{children:"Directory: directory of the database, or null indicating that the database is not currently available."}),"\n",(0,a.jsx)(t.li,{children:"Mask: global selection mask that will be used for this database (based on current configuration)"}),"\n",(0,a.jsx)(t.li,{children:"HasMaskDefined: true if this database has a defined mask (and the system is set to use masks); false if it is using default\nHasSubscriptRanges: true if this database has subscript ranges defined (and the system is set to use them); false otherwise"}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"databasestocheckclose",children:"DatabasesToCheckClose"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DatabasesToCheckClose(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"databasestocheckfetch",children:"DatabasesToCheckFetch"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DatabasesToCheckFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})})]})}function c(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>o});var a=s(96540);const n={},r=a.createContext(n);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);