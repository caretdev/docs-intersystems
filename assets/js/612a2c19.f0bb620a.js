"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[69816],{19407:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>n,default:()=>o,frontMatter:()=>i,toc:()=>d});var a=s(74848),l=s(28453);const i={pagination_prev:null,pagination_next:null},n="%iKnow.Queries.MetadataAPI",d=[{value:"Parameters",id:"parameters",level:2},{value:"GetFieldsRT",id:"getfieldsrt",level:3},{value:"RemoveFieldEXP",id:"removefieldexp",level:3},{value:"RemoveFieldByIdEXP",id:"removefieldbyidexp",level:3},{value:"UpdateFieldEXP",id:"updatefieldexp",level:3},{value:"UpdateFieldByIdEXP",id:"updatefieldbyidexp",level:3},{value:"GetValuesRT",id:"getvaluesrt",level:3},{value:"GetValuesByIdRT",id:"getvaluesbyidrt",level:3},{value:"SetValueEXP",id:"setvalueexp",level:3},{value:"SetValueByIdEXP",id:"setvaluebyidexp",level:3},{value:"AddLovValueEXP",id:"addlovvalueexp",level:3},{value:"GetLovValuesRT",id:"getlovvaluesrt",level:3},{value:"GetFieldValuesRT",id:"getfieldvaluesrt",level:3},{value:"GetFieldValuesByIdRT",id:"getfieldvaluesbyidrt",level:3},{value:"GetLovsRT",id:"getlovsrt",level:3},{value:"GetUniqueValuesRT",id:"getuniquevaluesrt",level:3},{value:"GetUniqueValuesByIdRT",id:"getuniquevaluesbyidrt",level:3},{value:"Methods",id:"methods",level:2},{value:"GetFields",id:"getfields",level:3},{value:"GetFieldId",id:"getfieldid",level:3},{value:"AddField",id:"addfield",level:3},{value:"RemoveField",id:"removefield",level:3},{value:"RemoveFieldById",id:"removefieldbyid",level:3},{value:"UpdateField",id:"updatefield",level:3},{value:"UpdateFieldById",id:"updatefieldbyid",level:3},{value:"GetValue",id:"getvalue",level:3},{value:"GetValueById",id:"getvaluebyid",level:3},{value:"GetValues",id:"getvalues",level:3},{value:"GetValuesById",id:"getvaluesbyid",level:3},{value:"SetValue",id:"setvalue",level:3},{value:"SetValueById",id:"setvaluebyid",level:3},{value:"SetValueByIdInternal",id:"setvaluebyidinternal",level:3},{value:"StartBatch",id:"startbatch",level:3},{value:"EndBatch",id:"endbatch",level:3},{value:"AddListOfValues",id:"addlistofvalues",level:3},{value:"AddLovValue",id:"addlovvalue",level:3},{value:"GetLovValues",id:"getlovvalues",level:3},{value:"GetFieldValues",id:"getfieldvalues",level:3},{value:"GetFieldValuesById",id:"getfieldvaluesbyid",level:3},{value:"DeNormalizeValue",id:"denormalizevalue",level:3},{value:"NormalizeValue",id:"normalizevalue",level:3},{value:"GetLovs",id:"getlovs",level:3},{value:"SortByField",id:"sortbyfield",level:3},{value:"GetUniValue",id:"getunivalue",level:3},{value:"GetUniValueId",id:"getunivalueid",level:3},{value:"GetUniqueValues",id:"getuniquevalues",level:3},{value:"GetUniqueValuesById",id:"getuniquevaluesbyid",level:3},{value:"GetUniqueValueCount",id:"getuniquevaluecount",level:3},{value:"GetUniqueValueCountById",id:"getuniquevaluecountbyid",level:3},{value:"GetMetaSpreadByEntities",id:"getmetaspreadbyentities",level:3},{value:"GetMetaSpreadByEntityIds",id:"getmetaspreadbyentityids",level:3},{value:"GetMetaSpreadInternal",id:"getmetaspreadinternal",level:3},{value:"CreateFilter",id:"createfilter",level:3},{value:"GetFieldInfo",id:"getfieldinfo",level:3},{value:"GetFieldInfoById",id:"getfieldinfobyid",level:3},{value:"PopulateFromSQL",id:"populatefromsql",level:3}];function r(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"iknowqueriesmetadataapi",children:"%iKnow.Queries.MetadataAPI"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Class %iKnow.Queries.MetadataAPI Extends (%iKnow.Queries.MetadataI, %iKnow.Queries.AbstractAPI) [ Deprecated, System = 4 ]\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The InterSystems IRIS NLP iKnow technology is now deprecated. Please see the ",(0,a.jsx)(t.a,{href:"https://docs.intersystems.com/irislatest/csp/docbook/DocBook.UI.Page.cls?KEY=GIKNOW",children:"product documentation"})," for more detail."]}),"\n",(0,a.jsx)(t.p,{children:"This is the default implementation for the %iKnow.Queries.MetadataI interface and the central place to manage and query metadata fields and values."}),"\n",(0,a.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(t.h3,{id:"getfieldsrt",children:"GetFieldsRT"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetFieldsRT = "mdFieldId:%String,fieldName:%String,supportedOperators:%List,dataType:%String,storage:%Integer,caseSensitive:%Boolean,lovId:%Integer,validateLov:%Boolean,hidden:%Boolean";\n'})}),"\n",(0,a.jsx)(t.h3,{id:"removefieldexp",children:"RemoveFieldEXP"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter RemoveFieldEXP [ Internal ] = 1;\n"})}),"\n",(0,a.jsx)(t.h3,{id:"removefieldbyidexp",children:"RemoveFieldByIdEXP"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter RemoveFieldByIdEXP [ Internal ] = 1;\n"})}),"\n",(0,a.jsx)(t.h3,{id:"updatefieldexp",children:"UpdateFieldEXP"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter UpdateFieldEXP [ Internal ] = 1;\n"})}),"\n",(0,a.jsx)(t.h3,{id:"updatefieldbyidexp",children:"UpdateFieldByIdEXP"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter UpdateFieldByIdEXP [ Internal ] = 1;\n"})}),"\n",(0,a.jsx)(t.h3,{id:"getvaluesrt",children:"GetValuesRT"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetValuesRT = "mdFieldId:%Integer,fieldName:%String,value:%String";\n'})}),"\n",(0,a.jsx)(t.h3,{id:"getvaluesbyidrt",children:"GetValuesByIdRT"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetValuesByIdRT = "mdFieldId:%Integer,fieldName:%String,value:%String";\n'})}),"\n",(0,a.jsx)(t.h3,{id:"setvalueexp",children:"SetValueEXP"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter SetValueEXP [ Internal ] = 1;\n"})}),"\n",(0,a.jsx)(t.h3,{id:"setvaluebyidexp",children:"SetValueByIdEXP"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter SetValueByIdEXP [ Internal ] = 1;\n"})}),"\n",(0,a.jsx)(t.h3,{id:"addlovvalueexp",children:"AddLovValueEXP"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter AddLovValueEXP [ Internal ] = 1;\n"})}),"\n",(0,a.jsx)(t.h3,{id:"getlovvaluesrt",children:"GetLovValuesRT"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetLovValuesRT = "value:%String";\n'})}),"\n",(0,a.jsx)(t.h3,{id:"getfieldvaluesrt",children:"GetFieldValuesRT"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetFieldValuesRT = "value:%String";\n'})}),"\n",(0,a.jsx)(t.h3,{id:"getfieldvaluesbyidrt",children:"GetFieldValuesByIdRT"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetFieldValuesByIdRT = "value:%String";\n'})}),"\n",(0,a.jsx)(t.h3,{id:"getlovsrt",children:"GetLovsRT"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetLovsRT [ Deprecated ] = "lovId:%Integer,name:%String,autoExtend:%Boolean";\n'})}),"\n",(0,a.jsx)(t.h3,{id:"getuniquevaluesrt",children:"GetUniqueValuesRT"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetUniqueValuesRT = "value:%String,frequency:%Integer";\n'})}),"\n",(0,a.jsx)(t.h3,{id:"getuniquevaluesbyidrt",children:"GetUniqueValuesByIdRT"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetUniqueValuesByIdRT = "value:%String,frequency:%Integer";\n'})}),"\n",(0,a.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(t.h3,{id:"getfields",children:"GetFields"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFields(ByRef result As %Integer, domainId As %Integer, includeHidden As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns all field definitions (including their properties) for the given domain."}),"\n",(0,a.jsx)(t.p,{children:"Setting includeHidden to true will also return any metadata fields marked as 'hidden'."}),"\n",(0,a.jsx)(t.h3,{id:"getfieldid",children:"GetFieldId"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFieldId(domainId As %Integer, fieldName As %String, Output sc As %Status) As %Integer\n"})}),"\n",(0,a.jsx)(t.p,{children:'Returns the metadata field ID corresponding to the supplied name, or "" if none exists in this domain.'}),"\n",(0,a.jsx)(t.h3,{id:"addfield",children:"AddField"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod AddField(domainId As %Integer, fieldName As %String, supportedOperators As %List = {$lb($$$MDOPEQUAL)}, dataType As %String = {$$$MDDTSTRING}, storage As %Integer = {$$$MDSTNORMAL}, caseSensitive As %Boolean = 0, lovId As %Integer = -1, validateLov As %Boolean = 1, hidden As %Boolean = 0, Output sc As %Status = {$$$OK}) As %Integer\n"})}),"\n",(0,a.jsx)(t.p,{children:"Adds a field definition with the given name and properties."}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"The supportedOperators parameter specifies which operations (such as $$$MDOPEQUAL) will be available for filtering criteria"}),"\n",(0,a.jsx)(t.li,{children:"For dataType, choose either $$$MDDTSTRING, $$$MDDTNUMBER or $$$MDDTDATE ($horolog format)"}),"\n",(0,a.jsx)(t.li,{children:"Use storage to control how values are stored: $$$MDSTNORMAL for cases where you would use a normal index, $$$MDSTBITMAP where you would use a bitmap index (few different metadata values compared to total # of records)"}),"\n",(0,a.jsx)(t.li,{children:"If dataType is $$$MDDTSTRING, caseSensitive controls whether or not string values should be treated as case-sensitive."}),"\n",(0,a.jsx)(t.li,{children:"The lovId and validateLov parameters define whether a List Of Values is available for this metadata field and whether input values should be verified against this list. See also AddListOfValues."}),"\n",(0,a.jsx)(t.li,{children:"If hidden is set to true, the field will by default not appear in metadata field and value lists."}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"removefield",children:"RemoveField"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod RemoveField(domainId As %Integer, fieldName As %String) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Removes a metadata field (by name) from the domain, including all references by existing sources."}),"\n",(0,a.jsx)(t.h3,{id:"removefieldbyid",children:"RemoveFieldById"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod RemoveFieldById(domainId As %Integer, fieldId As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Removes a metadata field (by ID) from the domain, including all references by existing sources."}),"\n",(0,a.jsx)(t.h3,{id:"updatefield",children:"UpdateField"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod UpdateField(domainId As %Integer, fieldName As %String, supportedOperators As %List = "", storage As %Integer = -1, hidden As %Integer = -1, lovId As %Integer = -2, validateLov As %Integer = -1) As %Status\n'})}),"\n",(0,a.jsx)(t.p,{children:"Updates the properties for a given metadata field (by name). See also AddField."}),"\n",(0,a.jsx)(t.p,{children:'Specifying a "" for the supportedOperators will leave the current value for that property. Similarly, specifying -1 for storage, hidden and validateLov or -2 for lovId will leave their respective values unmodified. Setting lovId to -1 will unset the LOV for this field.'}),"\n",(0,a.jsx)(t.h3,{id:"updatefieldbyid",children:"UpdateFieldById"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod UpdateFieldById(domainId As %Integer, fieldId As %Integer, supportedOperators As %List = "", storage As %Integer = -1, hidden As %Integer = -1, lovId As %Integer = -2, validateLov As %Integer = -1) As %Status\n'})}),"\n",(0,a.jsx)(t.p,{children:"Updates the properties for a given metadata field (by ID). See also AddField."}),"\n",(0,a.jsx)(t.p,{children:'Specifying a "" for the supportedOperators will leave the current value for that property. Similarly, specifying -1 for storage, hidden and validateLov or -2 for lovId will leave their respective values unmodified. Setting lovId to -1 will unset the LOV for this field.'}),"\n",(0,a.jsx)(t.h3,{id:"getvalue",children:"GetValue"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetValue(domainId As %Integer, fieldName As %String, externalId As %String, Output sc As %Status) As %String\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns the actual value for a given metadata field (by name) and source (by External ID)."}),"\n",(0,a.jsx)(t.h3,{id:"getvaluebyid",children:"GetValueById"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetValueById(domainId As %Integer, fieldId As %Integer, srcId As %Integer, Output sc As %Status) As %String\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns the actual value for a given metadata field (by ID) and source (by Source ID)."}),"\n",(0,a.jsx)(t.h3,{id:"getvalues",children:"GetValues"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetValues(ByRef result As %Integer, domainId As %Integer, externalId As %String, includeHidden As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns the actual metadata values for the given source (by External ID)."}),"\n",(0,a.jsx)(t.p,{children:"Setting includeHidden to true will also return the values for hidden metadata fields."}),"\n",(0,a.jsx)(t.h3,{id:"getvaluesbyid",children:"GetValuesById"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetValuesById(ByRef result As %Integer, domainId As %Integer, srcId As %Integer, includeHidden As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns the actual metadata values for the given source (by Source ID)."}),"\n",(0,a.jsx)(t.p,{children:"Setting includeHidden to true will also return the values for hidden metadata fields."}),"\n",(0,a.jsx)(t.h3,{id:"setvalue",children:"SetValue"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetValue(domainId As %Integer, fieldName As %String, externalId As %String, value As %String) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Sets (or replaces if it exists) the value for a given metadata field (by name) for a given source (by External ID)."}),"\n",(0,a.jsx)(t.p,{children:"Values for fields of type $$$MDDTSTRING are normalized and stripped of whitespace and control characters at the beginning and end of the string."}),"\n",(0,a.jsx)(t.h3,{id:"setvaluebyid",children:"SetValueById"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetValueById(domainId As %Integer, fieldId As %Integer, srcId As %Integer, value As %String) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:'Sets (or replaces if it exists) the value for a given metadata field (by ID) for a given source (by Source ID). Explicitly setting a value to "" (null/empty string) will erase the current value.'}),"\n",(0,a.jsx)(t.p,{children:"Values for fields of type $$$MDDTSTRING are normalized and stripped of whitespace and control characters at the beginning and end of the string."}),"\n",(0,a.jsx)(t.h3,{id:"setvaluebyidinternal",children:"SetValueByIdInternal"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetValueByIdInternal(domainId As %Integer, fieldId As %Integer, srcId As %Integer, value As %String, skipExistingValueCheck As %Boolean = 0) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Internal method to set a metadata value directly, without performing any existence checks."}),"\n",(0,a.jsx)(t.h3,{id:"startbatch",children:"StartBatch"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod StartBatch(domainId As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Starts a 'batch' during which metadata values can be set. Some setting operations and index recalculations are optimized for batch processing."}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"NOTE:"})," It is currently up to the user to make sure no metadata values are read during the batch and no values exist already (as replacing a value involves reading it). Reading metadata field values during a batch is not guaranteed to return correct results."]}),"\n",(0,a.jsx)(t.h3,{id:"endbatch",children:"EndBatch"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod EndBatch(domainId As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Ends a metadata batch. See StartBatch for more details."}),"\n",(0,a.jsx)(t.h3,{id:"addlistofvalues",children:"AddListOfValues"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod AddListOfValues(domainId As %Integer, lovName As %String, autoExtend As %Boolean = 1, Output sc As %Status) As %Integer [ Deprecated ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Adds a List Of Values to the domain, which can then be used as a list of allowable values for one or more metadata fields."}),"\n",(0,a.jsx)(t.h3,{id:"addlovvalue",children:"AddLovValue"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod AddLovValue(domainId As %Integer, lovId As %Integer, value As %String, ByRef rank As %Integer = -1) As %Status [ Deprecated ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Adds a new value to an existing List Of Values"}),"\n",(0,a.jsx)(t.h3,{id:"getlovvalues",children:"GetLovValues"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetLovValues(ByRef result As %Integer, domainId As %Integer, lovId As %Integer) As %Status [ Deprecated ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns all the allowed values for a given metadata LOV."}),"\n",(0,a.jsx)(t.h3,{id:"getfieldvalues",children:"GetFieldValues"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFieldValues(ByRef result, domainId As %Integer, fieldName As %String, page As %Integer = 1, pageSize As %Integer = 10) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns all the distinct values currently in use for a given metadata field (by name). See also GetUniqueValues for a version returning the number of sources with this metadata value and sorting options."}),"\n",(0,a.jsx)(t.h3,{id:"getfieldvaluesbyid",children:"GetFieldValuesById"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFieldValuesById(ByRef result, domainId As %Integer, mdFieldId As %Integer, page As %Integer = 1, pageSize As %Integer = 10) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns all the distinct values currently in use for a given metadata field (by ID)."}),"\n",(0,a.jsx)(t.h3,{id:"denormalizevalue",children:"DeNormalizeValue"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DeNormalizeValue(value As %String, mdfData As %List) As %String [ Internal ]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"normalizevalue",children:"NormalizeValue"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod NormalizeValue(value As %String, mdfData As %List, Output isTruncated As %Boolean) As %String [ Internal ]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"getlovs",children:"GetLovs"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetLovs(ByRef result, domainId As %Integer, page As %Integer = 1, pageSize As %Integer = 10) As %Status [ Deprecated ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns all LOVs (List of Values) registered for this domain."}),"\n",(0,a.jsx)(t.h3,{id:"sortbyfield",children:"SortByField"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SortByField(ByRef pResult, pDomainId As %Integer, ByRef pSources, pSort As %String, pPage As %Integer = 1, pPageSize As %Integer = 10) As %Status [ Internal ]\n"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Note"}),": This implementation offers slight performance improvements over the default implementation in %iKnow.Queries.MetadataI and uses the datatype-aware normalized form of the metadata field value for sorting purposes."]}),"\n",(0,a.jsx)(t.p,{children:'Allows the results of %iKnow.Queries.SourceAPI queries to be re-sorted along a particular metadata field. pSort is expected to contain the name of the metadata field to sort by, optionally followed by a space and "ASC" (default) or "DESC". The string "ExternalId" is also accepted as a valid sort field and should be resolved through the GetExternalId method in %iKnow.Queries.SourceAPI, unless there is a metadata field carrying the same name.'}),"\n",(0,a.jsx)(t.p,{children:"pSources is expected to be an array containing all (unsorted) query results with the source ID as the first row element, while pResult will be populated with the sorted results like a usual iKnow API query."}),"\n",(0,a.jsx)(t.p,{children:'pSort can optionally be suffixed with a space and the string "ADDCOL", in which case, a column containing the actual metadata value is appended to the results. Use this feature with caution as it might impact SQL/WS clients, because the extra column is not declared in the original query specs.'}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Note"}),": sources for which the requested metadata field is not populated or where its value is longer than $$$IKHASHSIZE (150 characters) will be left out of the results."]}),"\n",(0,a.jsx)(t.h3,{id:"getunivalue",children:"GetUniValue"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetUniValue(pDomainId As %Integer, pUniValueId As %Integer) As %String\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns the unique metadata value corresponding to the supplied pUniValueId."}),"\n",(0,a.jsx)(t.h3,{id:"getunivalueid",children:"GetUniValueId"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetUniValueId(pDomainId As %Integer, pValue As %String, Output pSC As %Status = {$$$OK}) As %Integer [ Internal ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns the id of a unique metadata value (for use in compressed storage) or creates it if it didn't exist yet."}),"\n",(0,a.jsx)(t.p,{children:"Note: This method is intended for internal use only."}),"\n",(0,a.jsx)(t.h3,{id:"getuniquevalues",children:"GetUniqueValues"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetUniqueValues(ByRef pResult, pDomainId As %Integer, pFieldName As %String, pPage As %Integer = 1, pPageSize As %Integer = 10, pFilter As %iKnow.Filters.Filter = "", pSortType As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(t.p,{children:'Returns all the unique metadata values for field pFieldName in sources satisfying the supplied filter, optionally sorted by value (pSortType = "VALUE") or frequency (pSortType = "FREQUENCY"). The returned frequency represents the number of sources with this metadata value (satisfying the filter).'}),"\n",(0,a.jsx)(t.p,{children:"NOTE: sorting by value is only precise up to the 150 first characters"}),"\n",(0,a.jsx)(t.h3,{id:"getuniquevaluesbyid",children:"GetUniqueValuesById"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetUniqueValuesById(ByRef pResult, pDomainId As %Integer, pFieldId As %Integer, pPage As %Integer = 1, pPageSize As %Integer = 10, pFilter As %iKnow.Filters.Filter = "", pSortType As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(t.p,{children:'Returns all the unique metadata values for field pFieldId in sources satisfying the supplied filter, optionally sorted by value (pSortType = "VALUE") or frequency (pSortType = "FREQUENCY"). The returned frequency represents the number of sources with this metadata value (satisfying the filter).'}),"\n",(0,a.jsx)(t.p,{children:"NOTE: sorting by value is only precise up to the 150 first characters"}),"\n",(0,a.jsx)(t.h3,{id:"getuniquevaluecount",children:"GetUniqueValueCount"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetUniqueValueCount(pDomainId As %Integer, pFieldName As %String, pFilter As %iKnow.Filters.Filter = "", Output pSC = {$$$OK}) As %Integer\n'})}),"\n",(0,a.jsx)(t.p,{children:"Returns the number of unique metadata values for a given field pFieldName in the sources satisfying the supplied filter, after normalization based on the field specifications such as case sensitivity and data type."}),"\n",(0,a.jsx)(t.h3,{id:"getuniquevaluecountbyid",children:"GetUniqueValueCountById"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetUniqueValueCountById(pDomainId As %Integer, pFieldId As %Integer, pFilter As %iKnow.Filters.Filter = "", Output pSC As %Status = {$$$OK}) As %Status\n'})}),"\n",(0,a.jsx)(t.p,{children:"Returns the number of unique metadata values for a given field pFieldId in the sources satisfying the supplied filter, after normalization based on the field specifications such as case sensitivity and data type."}),"\n",(0,a.jsx)(t.h3,{id:"getmetaspreadbyentities",children:"GetMetaSpreadByEntities"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetMetaSpreadByEntities(pDomainId As %Integer, pFieldName As %String, pEntityList As %List, pFilter As %iKnow.Filters.Filter = "", pSetOp As %Integer = {$$$UNION}, Output pSC As %Status = {$$$OK}) As %Integer\n'})}),"\n",(0,a.jsx)(t.p,{children:'Returns the "spread" of metadata values (number of distinct values) for field pFieldName for the entities in pEntityList, in the sources satisfying pFilter. When specifying multiple entities, sources (and their metadata values) are included based on the value of pSetOp: if pSetOp = $$$UNION, only one entity has to be present (default), if pSetOp = $$$INTERSECT, all of them need to be present.'}),"\n",(0,a.jsx)(t.h3,{id:"getmetaspreadbyentityids",children:"GetMetaSpreadByEntityIds"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetMetaSpreadByEntityIds(pDomainId As %Integer, pFieldName As %String, pEntityIdList As %List, pFilter As %iKnow.Filters.Filter = "", pSetOp As %Integer = {$$$UNION}, Output pSC As %Status = {$$$OK}) As %Integer\n'})}),"\n",(0,a.jsx)(t.p,{children:'Returns the "spread" of metadata values (number of distinct values) for field pFieldName for the entities in pEntityIdList, in the sources satisfying pFilter. When specifying multiple entities, sources (and their metadata values) are included based on the value of pSetOp: if pSetOp = $$$UNION, only one entity has to be present (default), if pSetOp = $$$INTERSECT, all of them need to be present.'}),"\n",(0,a.jsx)(t.h3,{id:"getmetaspreadinternal",children:"GetMetaSpreadInternal"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetMetaSpreadInternal(pDomainId As %Integer, pFieldId As %Integer, pType As %String = "ENTITY", ByRef pIds, pFilter As %iKnow.Filters.Filter = "", pSetOp As %Integer = {$$$UNION}, Output pSC As %Status = {$$$OK}) As %Integer\n'})}),"\n",(0,a.jsx)(t.h3,{id:"createfilter",children:"CreateFilter"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CreateFilter(pDomainId As %Integer, pFieldName As %String, pOperator As %String, pValue As %String, Output pSC As %Status = {$$$OK}) As %iKnow.Filters.Filter\n"})}),"\n",(0,a.jsx)(t.p,{children:"Create a %iKnow.Filters.Filter instance that filters sources according to the given criteria, using the filter class compatible with this %iKnow.Queries.MetadataI implementation."}),"\n",(0,a.jsx)(t.p,{children:"For the default MetadataAPI, this is a %iKnow.Filters.SimpleMetadataFilter instance."}),"\n",(0,a.jsx)(t.h3,{id:"getfieldinfo",children:"GetFieldInfo"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFieldInfo(pDomainId As %Integer, pFieldName As %String, Output pInfo) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns some basic facts about metadata field pFieldName"}),"\n",(0,a.jsx)(t.h3,{id:"getfieldinfobyid",children:"GetFieldInfoById"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFieldInfoById(pDomainId As %Integer, pFieldId As %String, Output pInfo) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns some basic facts about metadata field with ID pFieldId"}),"\n",(0,a.jsx)(t.h3,{id:"populatefromsql",children:"PopulateFromSQL"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod PopulateFromSQL(pDomainId As %Integer, pSQL As %String, pIgnoreErrors As %Boolean = 1) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:'Populates any number of metadata fields with the values retrieved based on the values retrieved by a query pSQL. The query should at least return a column named "SourceId" containing iKnow Source IDs or a column named "ExternalId" containing the full External IDs of the sources whose metadata fields are to be updated. All other columns with names matching existing metadata fields for this domain will be used to update or set the fields\' values for each record. Columns whose name does not correspond to an existing metadata field will be ignored.'}),"\n",(0,a.jsx)(t.p,{children:"Sample query:"}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"SELECT ':SQL:' || YEAR(EventDate) || ':' || EventId As ExternalId, InjuriesHighest, YEAR(EventDate) \"Year\" FROM Aviation.Event"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"This will update the InjuriesHighest and Year fields (if they exist)."})]})}function o(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(r,{...e})}):r(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>n,x:()=>d});var a=s(96540);const l={},i=a.createContext(l);function n(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:n(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);