"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[24983],{83661:(e,a,n)=>{n.r(a),n.d(a,{contentTitle:()=>i,default:()=>d,frontMatter:()=>l,toc:()=>r});var t=n(74848),s=n(28453);const l={pagination_prev:null,pagination_next:null},i="%ZEN.ComponentEx.colorWheel",r=[{value:"Parameters",id:"parameters",level:2},{value:"INCLUDEFILES",id:"includefiles",level:3},{value:"Properties",id:"properties",level:2},{value:"value",id:"value",level:3},{value:"showRGBPanel",id:"showrgbpanel",level:3},{value:"showPreview",id:"showpreview",level:3},{value:"XDatas",id:"xdatas",level:2},{value:"Style",id:"style",level:3},{value:"Methods",id:"methods",level:2},{value:"%DrawHTML",id:"drawhtml",level:3},{value:"findParts",id:"findparts",level:3},{value:"initializeDOM",id:"initializedom",level:3},{value:"onloadHandler",id:"onloadhandler",level:3},{value:"onRefreshContents",id:"onrefreshcontents",level:3},{value:"startDrag",id:"startdrag",level:3},{value:"constrainDragY",id:"constraindragy",level:3},{value:"constrainDragX",id:"constraindragx",level:3},{value:"endDrag",id:"enddrag",level:3},{value:"positionHandle",id:"positionhandle",level:3},{value:"setSliderValue",id:"setslidervalue",level:3},{value:"setProperty",id:"setproperty",level:3},{value:"verifyHex",id:"verifyhex",level:3},{value:"cleanUpUserColorGunEntry",id:"cleanupusercolorgunentry",level:3},{value:"cleanUpUserEntry",id:"cleanupuserentry",level:3},{value:"cleanUpMainUserEntry",id:"cleanupmainuserentry",level:3},{value:"moveCrosshair",id:"movecrosshair",level:3},{value:"mixGuns",id:"mixguns",level:3},{value:"positionCrosshair",id:"positioncrosshair",level:3},{value:"updatePreview",id:"updatepreview",level:3},{value:"updateMask",id:"updatemask",level:3},{value:"updateVisibleAreas",id:"updatevisibleareas",level:3},{value:"setValueHex",id:"setvaluehex",level:3},{value:"setValueRGB",id:"setvaluergb",level:3},{value:"getX",id:"getx",level:3},{value:"getY",id:"gety",level:3},{value:"getRadius",id:"getradius",level:3},{value:"getAngle",id:"getangle",level:3},{value:"getShadeBlue",id:"getshadeblue",level:3},{value:"getShadeRed",id:"getshadered",level:3},{value:"getShadeGreen",id:"getshadegreen",level:3},{value:"getShade",id:"getshade",level:3}];function c(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"zencomponentexcolorwheel",children:"%ZEN.ComponentEx.colorWheel"})}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Class %ZEN.ComponentEx.colorWheel Extends %ZEN.Component.control [ Deprecated, System = 3 ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"The colorWheel widget is an interactive color picker that models a 24-bit RGB color space using cylindrical coordinates. Visually, this projects as a circle (a cross section of the cylinder when looking down the Z-axis) with the true blue baseline at zero degrees, true red at 120 degrees, and true green at 240 degrees. A slider beneath the circle determines which cross section of the color cylinder is shown; at zero the base plane is presented and the very center of the circle (the orgin of the color coordinate system) is black (#000000). As the value of the slider increases, equal amounts of red green and blue are added to the color space until, at the max value, the entire disk is saturated with white (#ffffff)  The value of the widget may be selected by adjusting the white saturation via the slider and clicking on the wheel itself, or by manipulating the RGB contributions directly via the three sliders provided in the RGB control panel beneath the main color wheel. The nominal value of the widget is a string of the form \"#xxxxxx\" where 'x' is a hexadecimal digit. The hex values, in order, represent 8 bit contributions of red, green and blue color guns needed to produce the indicated color in HTML documents"}),"\n",(0,t.jsx)(a.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(a.h3,{id:"includefiles",children:"INCLUDEFILES"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'Parameter INCLUDEFILES = "zenCSLM.js";\n'})}),"\n",(0,t.jsx)(a.p,{children:"Default image for close group button."}),"\n",(0,t.jsx)(a.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(a.h3,{id:"value",children:"value"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'Property value As %ZEN.Datatype.value(ZENEXPRESSION = 1) [ InitialExpression = "#7f7f7f" ];\n'})}),"\n",(0,t.jsx)(a.h3,{id:"showrgbpanel",children:"showRGBPanel"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property showRGBPanel As %ZEN.Datatype.integer [ InitialExpression = 1 ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Show the three slider panel that allows micromanagement of the RGB color guns"}),"\n",(0,t.jsx)(a.h3,{id:"showpreview",children:"showPreview"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property showPreview As %ZEN.Datatype.integer [ InitialExpression = 1 ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Show the preview box at the bottom of the widget that is filled with the currently selected color and stamped with the HTML Hex color specification"}),"\n",(0,t.jsx)(a.h2,{id:"xdatas",children:"XDatas"}),"\n",(0,t.jsx)(a.h3,{id:"style",children:"Style"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"XData Style\n"})}),"\n",(0,t.jsx)(a.p,{children:"This Style block contains component-specific CSS style definitions."}),"\n",(0,t.jsx)(a.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(a.h3,{id:"drawhtml",children:"%DrawHTML"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method %DrawHTML()\n"})}),"\n",(0,t.jsx)(a.p,{children:"The %DrawHTML method draws the initial HTML for this component."}),"\n",(0,t.jsx)(a.h3,{id:"findparts",children:"findParts"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod findParts() [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Build an internal map of oointers to key DOM nodes to speed processing during drag operations."}),"\n",(0,t.jsx)(a.h3,{id:"initializedom",children:"initializeDOM"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod initializeDOM() [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Perform client-side initialization of elements that have no server side projection"}),"\n",(0,t.jsx)(a.h3,{id:"onloadhandler",children:"onloadHandler"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod onloadHandler() [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"onrefreshcontents",children:"onRefreshContents"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod onRefreshContents() [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"startdrag",children:"startDrag"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod startDrag(mgr, wrapper) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Initialize drag operations for the embedded sliders"}),"\n",(0,t.jsx)(a.h3,{id:"constraindragy",children:"constrainDragY"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod constrainDragY(mgr, wrapper, newY) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Force drag operations in embedded sliders to be purely horizontal"}),"\n",(0,t.jsx)(a.h3,{id:"constraindragx",children:"constrainDragX"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod constrainDragX(mgr, wrapper, newX) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Prorate slider values based on slider activity."}),"\n",(0,t.jsx)(a.h3,{id:"enddrag",children:"endDrag"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod endDrag(mgr, wrapper) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Wrap up drag activity on embedded sliders"}),"\n",(0,t.jsx)(a.h3,{id:"positionhandle",children:"positionHandle"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod positionHandle(who) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Ensure that the handle of embedded sliders accurately reflects the internal value thereof."}),"\n",(0,t.jsx)(a.h3,{id:"setslidervalue",children:"setSliderValue"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod setSliderValue(who, value) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Initialized or reset the internal value associated with a slider and update its avatar accordingly."}),"\n",(0,t.jsx)(a.h3,{id:"setproperty",children:"setProperty"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod setProperty(property, value, value2) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Set the value of a named property."}),"\n",(0,t.jsx)(a.h3,{id:"verifyhex",children:"verifyHex"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod verifyHex(event, gun) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Limit the input of hex boxes to hex digits"}),"\n",(0,t.jsx)(a.h3,{id:"cleanupusercolorgunentry",children:"cleanUpUserColorGunEntry"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod cleanUpUserColorGunEntry(gun) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"User entered values for color guns should always be exactly two hex digits Sanitize and truncate as needed."}),"\n",(0,t.jsx)(a.h3,{id:"cleanupuserentry",children:"cleanUpUserEntry"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod cleanUpUserEntry() [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"In the event that the user has entered specific hex values, verify that all of the inputs, previews and controls are in sync with the latest data and that that data represents a valid Web color spec"}),"\n",(0,t.jsx)(a.h3,{id:"cleanupmainuserentry",children:"cleanUpMainUserEntry"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod cleanUpMainUserEntry() [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"In the event that the user has entered specific hex color value in the main value box, verify that all of the inputs, previews and controls are in sync with the latest data and that that data represents a valid Web color spec"}),"\n",(0,t.jsx)(a.h3,{id:"movecrosshair",children:"moveCrosshair"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod moveCrosshair(e) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Position the crosshair on the color wheel in response to a user action"}),"\n",(0,t.jsx)(a.h3,{id:"mixguns",children:"mixGuns"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod mixGuns() [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Reset the value of the widget based on user interaction with the RGB sliders"}),"\n",(0,t.jsx)(a.h3,{id:"positioncrosshair",children:"positionCrosshair"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod positionCrosshair(r, theta) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Position the crosshair indicator based on the latest Rho, Theta values in the color space."}),"\n",(0,t.jsx)(a.h3,{id:"updatepreview",children:"updatePreview"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod updatePreview(r, theta, z) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Update the rendering of the widget to reflect the current value"}),"\n",(0,t.jsx)(a.h3,{id:"updatemask",children:"updateMask"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod updateMask() [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Adjust the white saturation of the color wheel based on the current settings of the slider control"}),"\n",(0,t.jsx)(a.h3,{id:"updatevisibleareas",children:"updateVisibleAreas"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod updateVisibleAreas() [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Hide or show optional parts of the widget"}),"\n",(0,t.jsx)(a.h3,{id:"setvaluehex",children:"setValueHex"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod setValueHex(hexStr) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Given an HTML color specification in Hex notation, break it up into explicit RGB values and call setValueRGB to update the value and appearance of this widget."}),"\n",(0,t.jsx)(a.h3,{id:"setvaluergb",children:"setValueRGB"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod setValueRGB(r, g, b) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Given discrete RGB color gun settings, update the value and appearance of this widget."}),"\n",(0,t.jsx)(a.h3,{id:"getx",children:"getX"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod getX(r, theta) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Convert polar color coordinates to X pixel value"}),"\n",(0,t.jsx)(a.h3,{id:"gety",children:"getY"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod getY(r, theta) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Convert polar color coordinates to Y pixel value"}),"\n",(0,t.jsx)(a.h3,{id:"getradius",children:"getRadius"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod getRadius(x, y) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Given an XY location on the rendering of the color wheel calculate the Rho value of the color space"}),"\n",(0,t.jsx)(a.h3,{id:"getangle",children:"getAngle"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod getAngle(x, y) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Given the XY location on the rendering of the color wheel calculate the Theta (in degrees) value of the color space"}),"\n",(0,t.jsx)(a.h3,{id:"getshadeblue",children:"getShadeBlue"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod getShadeBlue(r, theta) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Given Rho, Theta values in the color space, calculate the associate Blue color gun contribution"}),"\n",(0,t.jsx)(a.h3,{id:"getshadered",children:"getShadeRed"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod getShadeRed(r, theta) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Given Rho, Theta values in the color space, calculate the associate Red color gun contribution"}),"\n",(0,t.jsx)(a.h3,{id:"getshadegreen",children:"getShadeGreen"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod getShadeGreen(r, theta) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Given Rho, Theta values in the color space, calculate the associate Green color gun contribution"}),"\n",(0,t.jsx)(a.h3,{id:"getshade",children:"getShade"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod getShade(r, theta, z) [ Language = javascript ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Given a point in the abstract color space (rho, theta, zed), calculate the resulting color and return its HTML hex color specification."})]})}function d(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>r});var t=n(96540);const s={},l=t.createContext(s);function i(e){const a=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(l.Provider,{value:a},e.children)}}}]);