"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[12890],{37337:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>c,frontMatter:()=>r,toc:()=>a});var s=n(74848),i=n(28453);const r={pagination_prev:null,pagination_next:null},l="%SQL.Shell",a=[{value:"Properties",id:"properties",level:2},{value:"Statement",id:"statement",level:3},{value:"StatementNbr",id:"statementnbr",level:3},{value:"ColAlign",id:"colalign",level:3},{value:"StatementText",id:"statementtext",level:3},{value:"CommandPrefix",id:"commandprefix",level:3},{value:"Dialect",id:"dialect",level:3},{value:"DisplayMode",id:"displaymode",level:3},{value:"DisplayDelimiter",id:"displaydelimiter",level:3},{value:"DisplayPath",id:"displaypath",level:3},{value:"DisplayFile",id:"displayfile",level:3},{value:"DisplayTranslateTable",id:"displaytranslatetable",level:3},{value:"EchoMode",id:"echomode",level:3},{value:"EscapeCondition",id:"escapecondition",level:3},{value:"EscapeAllowed",id:"escapeallowed",level:3},{value:"ExecuteMode",id:"executemode",level:3},{value:"executeStartTime",id:"executestarttime",level:3},{value:"executeStats",id:"executestats",level:3},{value:"Log",id:"log",level:3},{value:"LogMode",id:"logmode",level:3},{value:"MessageMode",id:"messagemode",level:3},{value:"Path",id:"path",level:3},{value:"prepareTime",id:"preparetime",level:3},{value:"prepareStats",id:"preparestats",level:3},{value:"SelectMode",id:"selectmode",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"DialectSet",id:"dialectset",level:3},{value:"%Go",id:"go",level:3},{value:"dispatcher",id:"dispatcher",level:3},{value:"processCache",id:"processcache",level:3},{value:"cmdObjectScript",id:"cmdobjectscript",level:3},{value:"cmdGo",id:"cmdgo",level:3},{value:"cmdMetadata",id:"cmdmetadata",level:3},{value:"cmdOpen",id:"cmdopen",level:3},{value:"cmdProcessStatement",id:"cmdprocessstatement",level:3},{value:"cmdSaveGlobal",id:"cmdsaveglobal",level:3},{value:"cmdSet",id:"cmdset",level:3},{value:"cmdShow",id:"cmdshow",level:3},{value:"execute",id:"execute",level:3},{value:"cmdLoad",id:"cmdload",level:3},{value:"cmdSave",id:"cmdsave",level:3},{value:"EnterStatement",id:"enterstatement",level:3},{value:"parseSet",id:"parseset",level:3},{value:"displayStatement",id:"displaystatement",level:3},{value:"Help",id:"help",level:3},{value:"HelpStatementMode",id:"helpstatementmode",level:3},{value:"cmdRun",id:"cmdrun",level:3},{value:"displayResult",id:"displayresult",level:3},{value:"getPrompt",id:"getprompt",level:3},{value:"display",id:"display",level:3}];function d(e){const t={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"sqlshell",children:"%SQL.Shell"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %SQL.Shell Extends %Library.RegisteredObject [ System = 4 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"For details on using this class"}),", see ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+%25SQL.Shell",children:"Using the SQL Shell"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"%SQL.Shell - Interactive SQL shell"}),"\n",(0,s.jsx)(t.p,{children:"The interactive SQL shell allows the user to execute SQL statements dynamically. There are two execution modes - immediate and deferred. The execution mode can be set by executing a set executemode command with immediate or deferred as the executemode value. If the execution mode is immediate, then SQL statements are prepared and executed immediately. If execute mode is deferred, then a statement is only prepared and not executed until either a # or go command is entered. The result of executing the statement is displayed on the current device after the statement is executed."}),"\n",(0,s.jsx)(t.p,{children:"If displaymode is currentdevice and messages is on then the time taken to prepare the current statement and the time taken to execute the current statement are displayed after the result is displayed. Execute time includes the time to instantiate the result object and the time to display the statement."}),"\n",(0,s.jsx)(t.p,{children:"SQL statements can span multiple lines. To enter a multiline statement, simply press the enter key to enter multiline mode. When the statement is complete enter go to exit multiline mode. If execution mode is immediate the multiline statement will be executed at that point, otherwise and additional # or go will cause the statement to execute."}),"\n",(0,s.jsx)(t.p,{children:"The user is prompted to supply a value for each parameter defined in the statement each time the statement is executed. If the value entered begins with a colon then the user is prompted to enter if the value is a literal or not. If the value is a literal the user must answer with Y or y. The default is N and if that is the desired response simply press Enter and the value entered is assumed to be a ObjectScript expression or host variable. Host variables are assumed to be public variables. Public variables can be set using the ! set var = value command. Other expressions can be entered, including function calls and class methods that return a value. The statement can be executed again by entering 'go' resulting in prompts for new statement values. The expression used to execute the statement is displayed just prior to executing the statement. If the statement does not contain any parameters then execution will proceed without any prompting."}),"\n",(0,s.jsxs)(t.p,{children:["The Shell supports statement recall. Any statement that is prepared may be recalled from the statement buffer by entering **#**nbr where nbr is the statement number in the buffer. Just entering ",(0,s.jsx)(t.strong,{children:"#"})," will list the statements currently in the buffer. Entering ",(0,s.jsx)(t.strong,{children:"#clear"})," will clear the statement buffer on confirmation. Entering ",(0,s.jsx)(t.strong,{children:"#0"})," will recall the most recently prepared statement from the buffer. If executemode is set to immediate then the recalled statement will also be executed."]}),"\n",(0,s.jsxs)(t.p,{children:["Statements can also be saved in a statement pool. To save the current statement enter ",(0,s.jsx)(t.strong,{children:"save"})," name. That statement is saved in the pool and can be later recalled by entering ",(0,s.jsx)(t.strong,{children:"open"})," name."]}),"\n",(0,s.jsxs)(t.p,{children:["Statements can be deleted from the statement pool by entering ",(0,s.jsx)(t.strong,{children:"clear"})," name. If no name is specified then all statements are removed from the pool on confirmation."]}),"\n",(0,s.jsxs)(t.p,{children:["Shell commands are entered in the first column and do not often conflict with executable statements. In some cases, such as set, a command and an SQL statement can be ambiguous. This occurs most often in complex statements such as CREATE PROCEDURE. To eliminate confusion, the SQL Shell supports a command prefix that can be set to any value. The command prefix allows the user to specify that all commands begin with a special character or character sequence. To set the command prefix simply set ",(0,s.jsx)(t.strong,{children:"commandprefix"})," option using the ",(0,s.jsx)(t.strong,{children:"set"})," command:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"\tUSER>>set commandprefix = . \n"})}),"\n",(0,s.jsxs)(t.p,{children:["Once the command prefix is set, all commands must be prefixed by the value of the commandprefix setting. There are three exceptions - ",(0,s.jsx)(t.strong,{children:"?"}),", ",(0,s.jsx)(t.strong,{children:"#"})," and ",(0,s.jsx)(t.strong,{children:"GO"})," do not have to be prefixed."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"commandprefix"})," option is saved by the ",(0,s.jsx)(t.strong,{children:"set save"})," command and, if saved, will be restored automatically the next time the user starts the shell. By default there is no ",(0,s.jsx)(t.strong,{children:"commandprefix"}),". To reset the command prefix back to the default once it has been set to something else, enter:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'\tUSER>>set commandprefix = "" \n'})}),"\n",(0,s.jsxs)(t.p,{children:["Shell context settings are set by the ",(0,s.jsx)(t.strong,{children:"set"})," command. Context settings can be retained and used by future instances of the shell by entering ",(0,s.jsx)(t.strong,{children:"set save"})," and cleared by entering ",(0,s.jsx)(t.strong,{children:"set clear"}),". Entering ",(0,s.jsx)(t.strong,{children:"set"})," without any additional qualifiers will display the current shell context settings."]}),"\n",(0,s.jsx)(t.p,{children:"To execute an SQL statement, type it in and press ENTER."}),"\n",(0,s.jsx)(t.p,{children:"To execute a multiline SQL statement, press ENTER to enter multiline mode, type in the statement, and enter go."}),"\n",(0,s.jsx)(t.p,{children:"Available commands:"}),"\n",(0,s.jsx)(t.p,{children:"Press ENTER"}),"\n",(0,s.jsx)(t.p,{children:"Enter multiline statement mode. While in multiline statement mode, some basic commands are supported."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"c[lear]"}),(0,s.jsx)(t.th,{children:"Clear all statement lines entered."})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"c[lear] line nbr"}),(0,s.jsx)(t.td,{children:"Clear line line nbr."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"g[o]"}),(0,s.jsx)(t.td,{children:"Exit multiline statement mode. If EXECUTEMODE is immediate then execute the statement. The result is displayed after execution."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"l[ist]"}),(0,s.jsx)(t.td,{children:"List the statement lines entered."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"q[uit]"}),(0,s.jsx)(t.td,{children:"Exit multiline statement mode and discard any statement lines."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"? help"}),(0,s.jsx)(t.td,{children:"Display statement mode help."})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"SQL Statement"}),"\n",(0,s.jsx)(t.p,{children:"Prepare the statement. If EXECUTEMODE is immediate then execute the statement. The result is displayed after execution."}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"?"})})})}),(0,s.jsx)(t.tbody,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"help"})})})})]}),"\n",(0,s.jsx)(t.p,{children:"Display help."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"#"})}),"\n",(0,s.jsx)(t.p,{children:"List statements currently in the history buffer."}),"\n",(0,s.jsx)(t.p,{children:"**#**nbr"}),"\n",(0,s.jsx)(t.p,{children:"Recall statement nbr from the statement history buffer. If nbr is zero then recall the most recent statement. Recalled statements are executed if EXECUTEMODE is set to 'immediate'. If EXECUTEMODE is set to 'deferred' then it is necessary to enter GO to execute the recalled statement."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"#?"})}),"\n",(0,s.jsx)(t.p,{children:"List statements currently in the history buffer."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"#clear"})}),"\n",(0,s.jsx)(t.p,{children:"Clear the statement history buffer."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"c[lear]"})," name"]}),"\n",(0,s.jsx)(t.p,{children:"Clear (delete) the statement identified by name from the statement pool."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"!"})," objectscript_command"]}),"\n",(0,s.jsx)(t.p,{children:"Execute objectscript_command."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"g[o]"})}),"\n",(0,s.jsx)(t.p,{children:"Run the most recently executed or loaded statement."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"l[ist]"})}),"\n",(0,s.jsx)(t.p,{children:"List statements in the statement pool."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"load"})," filename"]}),"\n",(0,s.jsx)(t.p,{children:"Load a statement from filename."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"m[etadata]"})}),"\n",(0,s.jsx)(t.p,{children:"Displays the metadata for the current statement."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"obj[ectscript]"})," objectscript_command"]}),"\n",(0,s.jsx)(t.p,{children:"Execute objectscript_command."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"o[pen]"})," name"]}),"\n",(0,s.jsx)(t.p,{children:"Open the statement name name from the statement pool. The retrieved statement is prepared and executed (depending on the EXECUTEMODE setting)."}),"\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"q[uit]"})})})}),(0,s.jsx)(t.tbody,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"e[xit]"})})})})]}),"\n",(0,s.jsx)(t.p,{children:"Exit the shell."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"run"})," [filename]"]}),"\n",(0,s.jsx)(t.p,{children:"Run an SQL script. If  is not specified then the user will be prompted for the file name."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"saveglobal"}),"|",(0,s.jsx)(t.strong,{children:"sg"})," name"]}),"\n",(0,s.jsx)(t.p,{children:"Save the currently prepared statement in the statement global using the given name."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"s[ave]"})," filename"]}),"\n",(0,s.jsx)(t.p,{children:"Save the currently prepared statement to filename."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"set"})}),"\n",(0,s.jsx)(t.p,{children:"Display the current context settings."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"set clear"})}),"\n",(0,s.jsx)(t.p,{children:"Clear the saved Shell settings for this user."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"set colalign"})," [=] delim[iter] | header | data"]}),"\n",(0,s.jsx)(t.p,{children:"Set column alignment for the SQL Resultset. The context setting colalign can be set to one of the following values:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["delim[iter] - The SQL Resultset header/data columns will be aligned based on the standard delimiter (tab). [",(0,s.jsx)(t.strong,{children:"Default"}),"]"]}),"\n",(0,s.jsx)(t.li,{children:"header - The SQL Resultset header/data columns will be aligned based on the length of the column header and the standard delimiter (tab)."}),"\n",(0,s.jsx)(t.li,{children:"data - The SQL Resultset header/data columns will be aligned based on the precision/length of the column data property and the standard delimiter (tab)."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"set commandprefix"})," [=] string value"]}),"\n",(0,s.jsx)(t.p,{children:'Sets the command prefix to string value. To set the command prefix to nothing, enter "" as the string value.'}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"set dialect"})," [=] sybase | mssql | IRIS"]}),"\n",(0,s.jsx)(t.p,{children:"Sets the dialect to the desired SQL dialect. If schemalist is empty then IRIS SQL is assumed. The dialect setting determines which dialect mode is used when preparing a statement."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"set displayfile"})," [=] file"]}),"\n",(0,s.jsx)(t.p,{children:'Set the name of the file to be used for displaying the results of executing SQL statements. If no file name is specified then a random file name will be generated for each statement execution. Additionally, a messages file may be produced. The name of the file containing messages is either the file concatenated with "Messages" or it is a random file name if file is set to nothing. To set the file setting to nothing after it was previously set, enter "".'}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"set displaymode"})," [=] displaymode"]}),"\n",(0,s.jsxs)(t.p,{children:["Set the DISPLAYMODE. If displaymode is not specified, the current DISPLAYMODE setting is displayed on the current device. displaymode values can be ",(0,s.jsx)(t.strong,{children:"cur[rentdevice]"}),",",(0,s.jsx)(t.strong,{children:"xml"}),",",(0,s.jsx)(t.strong,{children:"html"}),",",(0,s.jsx)(t.strong,{children:"pdf"}),", or ",(0,s.jsx)(t.strong,{children:"txt"}),". When DISPLAYMODE is set to CURRENTDEVICE, statement results are displayed on the current device. When XML, HTML, PDF or TXT are specified then statement results are written to a temporary file using a ZEN Report that is generated from the statement metadata."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"set displaypath"})," [=] path"]}),"\n",(0,s.jsx)(t.p,{children:"Set the path where files used to save statement results will be placed."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"set displaytranslate[table]"})," [=] translatetable"]}),"\n",(0,s.jsx)(t.p,{children:"Set the translate table used for displayfile when writing output in 'csv' and 'txt' formats. For example, \"UTF8\". Values are case sensitive."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"set executemode"})," [=] executemode"]}),"\n",(0,s.jsxs)(t.p,{children:["Set EXECUTEMODE to executemode. Valid values are ",(0,s.jsx)(t.strong,{children:"immediate"})," and ",(0,s.jsx)(t.strong,{children:"deferred"}),". If immediate then SQL statements are executed immediately. If deferred then the current statement is executed by entering a 'go' command. If executemode is not specified then the current EXECUTEMODE setting is displayed."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"set log"})," [=] on | off | file"]}),"\n",(0,s.jsx)(t.p,{children:"Turn logging on or off. If a file is specified, logging is turned on and the log is written to the file specified. The default file for logging is used if logging is simply turned 'on'."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"set messages"})," [=] on | off"]}),"\n",(0,s.jsx)(t.p,{children:"Turn messages on or off. If messages is off then results are displayed without any additional information. Times are not displayed."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"set path"})," [=] schemalist"]}),"\n",(0,s.jsx)(t.p,{children:'Sets the current schema search path. If schemalist is empty then the current path is displayed. To set PATH to the default schema then specify schemalist as """".'}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"set save"})}),"\n",(0,s.jsx)(t.p,{children:"Save the current Shell settings for this user. The settings are restored when the current user starts another Shell session."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"set selectmode"})," [=] selectmode"]}),"\n",(0,s.jsxs)(t.p,{children:["Sets the current SELECTMODE to ",(0,s.jsx)(t.strong,{children:"odbc"}),", ",(0,s.jsx)(t.strong,{children:"logical"}),", or ",(0,s.jsx)(t.strong,{children:"display"}),". If selectmode is NULL the current setting is displayed."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"show [pl[an]] [v[erbose]]"})}),"\n",(0,s.jsxs)(t.p,{children:["Show the execution plan for the current statement.",(0,s.jsx)(t.br,{}),"\nIf the ",(0,s.jsx)(t.strong,{children:"verbose"})," qualifier is used, show all the module details for the current statement's execution plan; Otherwise, display only the top-level module details by default."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"show planalt [v[erbose]]"})}),"\n",(0,s.jsxs)(t.p,{children:["Run the ShowPlanAlt() method on the the current statement which allows user to browse alternate execution plans.",(0,s.jsx)(t.br,{}),"\nIf the ",(0,s.jsx)(t.strong,{children:"verbose"})," qualifier is used, show all the module details for the current statement's execution plan and all alternate plans; Otherwise, display only the top-level module details by default."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"show st[atement]"})}),"\n",(0,s.jsx)(t.p,{children:"Show the current statement text and other details such as the implementation class."}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"statement",children:"Statement"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Statement As %SQL.Statement;\n"})}),"\n",(0,s.jsx)(t.h3,{id:"statementnbr",children:"StatementNbr"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property StatementNbr As %Integer;\n"})}),"\n",(0,s.jsx)(t.h3,{id:"colalign",children:"ColAlign"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property ColAlign As %Integer(DISPLAYLIST = ",delimiter,header,data", VALUELIST = ",0,1,2") [ InitialExpression = 0 ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"ColAlign represents the column alignment for the SQL Resultset, and can be set to one of the following values:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["delim[iter] - The SQL Resultset header/data columns will be aligned based on the standard delimiter (tab). [",(0,s.jsx)(t.strong,{children:"Default"}),"]"]}),"\n",(0,s.jsx)(t.li,{children:"header - The SQL Resultset header/data columns will be aligned based on the length of the column header and the standard delimiter (tab)."}),"\n",(0,s.jsx)(t.li,{children:"data - The SQL Resultset header/data columns will be aligned based on the precision/length of the column data property and the standard delimiter (tab)."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"USER>>set colalign [=] delim[iter] USER>>set colalign [=] header USER>>set colalign [=] data"}),"\n",(0,s.jsx)(t.h3,{id:"statementtext",children:"StatementText"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property StatementText As %Library.String(MAXLEN = "") [ MultiDimensional ];\n'})}),"\n",(0,s.jsx)(t.h3,{id:"commandprefix",children:"CommandPrefix"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property CommandPrefix As %String(MAXLEN = 10);\n"})}),"\n",(0,s.jsx)(t.p,{children:"CommandPrefix is the string value used to indicate that a command is being entered. The default value is null, meaning that no command prefix is in use. If CommandPrefix is set to a non-empty value then that prefix must be entered as a prefix to most commands. There are three commands that do not require a prefix: ?, # and GO."}),"\n",(0,s.jsx)(t.p,{children:"USER>>set commandprefix = / USER>>/set save USER>>/quit"}),"\n",(0,s.jsx)(t.h3,{id:"dialect",children:"Dialect"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Dialect As %Library.String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Dialect is the dialect of SQL to be used when preparing a statement. Supported dialects are IRIS (default), Sybase and MS SQL Server."}),"\n",(0,s.jsx)(t.h3,{id:"displaymode",children:"DisplayMode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property DisplayMode As %Integer(DISPLAYLIST = ",currentdevice,xml,html,pdf,txt,csv", VALUELIST = ",-1,0,1,2,99,100") [ InitialExpression = -1 ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"DisplayMode is the format in which results are displayed."}),"\n",(0,s.jsx)(t.h3,{id:"displaydelimiter",children:"DisplayDelimiter"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property DisplayDelimiter As %String;\n"})}),"\n",(0,s.jsx)(t.h3,{id:"displaypath",children:"DisplayPath"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property DisplayPath As %Library.String(MAXLEN = "");\n'})}),"\n",(0,s.jsx)(t.h3,{id:"displayfile",children:"DisplayFile"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property DisplayFile As %Library.String(MAXLEN = "");\n'})}),"\n",(0,s.jsx)(t.h3,{id:"displaytranslatetable",children:"DisplayTranslateTable"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property DisplayTranslateTable As %Library.String(MAXLEN = "");\n'})}),"\n",(0,s.jsx)(t.h3,{id:"echomode",children:"EchoMode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property EchoMode As %Integer(DISPLAYLIST = ",off,on", VALUELIST = ",0,1") [ InitialExpression = 1 ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"EchoMode is either on (not zero) or off (zero). If on, statements and results are echoed to the current device. This setting does not impact logging."}),"\n",(0,s.jsx)(t.h3,{id:"escapecondition",children:"EscapeCondition"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property EscapeCondition As %String(MAXLEN = "");\n'})}),"\n",(0,s.jsx)(t.p,{children:"EscapeCondition is the argument to an ObjectScript IF condition which must evaluate to TRUE in order to execute ObjectScript commands from the shell The process running the SQL Shell must also be in programmer mode, not application mode. When IF  evaluation results in an error, executing ObjectScript commands will not be allowed."}),"\n",(0,s.jsx)(t.h3,{id:"escapeallowed",children:"EscapeAllowed"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property EscapeAllowed As %Boolean [ Internal, Private ];\n"})}),"\n",(0,s.jsx)(t.h3,{id:"executemode",children:"ExecuteMode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property ExecuteMode As %Integer(DISPLAYLIST = ",deferred,immediate", VALUELIST = ",0,1") [ InitialExpression = 1 ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"ExecuteMode defines when the current statement will be executed. If ExecuteMode is 'immediate' then each statement is executed as so as it is prepared. If ExecuteMode is 'deferred' then the statement is prepared but not executed until a 'GO' command is entered."}),"\n",(0,s.jsx)(t.h3,{id:"executestarttime",children:"executeStartTime"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property executeStartTime As %Time;\n"})}),"\n",(0,s.jsx)(t.p,{children:"executeStartTime is the time the statement execute started. This is reset during execute() after parameter values are entered. The execute time is computed after %Display() is complete and displayed after the rowcount and SQLCODE."}),"\n",(0,s.jsx)(t.h3,{id:"executestats",children:"executeStats"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property executeStats As %List;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Used to compute how many lines this query executes, global reads and disk latency"}),"\n",(0,s.jsx)(t.h3,{id:"log",children:"Log"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Log As %XSQL.Log;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Log instance. This is an oref that references a log object to be used when logging statements, messages, and results."}),"\n",(0,s.jsx)(t.h3,{id:"logmode",children:"LogMode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property LogMode As %Integer(DISPLAYLIST = ",off,on", VALUELIST = ",0,1") [ InitialExpression = 0 ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"Either on or off. If on then statements, messages and results will be logged using the current Log value."}),"\n",(0,s.jsx)(t.h3,{id:"messagemode",children:"MessageMode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property MessageMode As %Integer(DISPLAYLIST = ",off,on", VALUELIST = ",0,1") [ InitialExpression = 1 ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"MessageMode is either on (not zero) or off (zero). If on, messages will be displayed on the current device. This does not impact the LogMode setting."}),"\n",(0,s.jsx)(t.h3,{id:"path",children:"Path"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property Path As %String(MAXLEN = "");\n'})}),"\n",(0,s.jsx)(t.p,{children:"Path is the schema search path used when resolving unqualified names."}),"\n",(0,s.jsx)(t.h3,{id:"preparetime",children:"prepareTime"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property prepareTime As %Time;\n"})}),"\n",(0,s.jsx)(t.p,{children:"prepareTime is the time is took to prepare the most recent statement."}),"\n",(0,s.jsx)(t.h3,{id:"preparestats",children:"prepareStats"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property prepareStats As %List;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Used to compute how many lines this query executes, global reads and disk latency"}),"\n",(0,s.jsx)(t.h3,{id:"selectmode",children:"SelectMode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property SelectMode As %Integer(DISPLAYLIST = ",logical,odbc,display", VALUELIST = ",0,1,2") [ InitialExpression = 0 ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"SelectMode defines the format of literals and column values when executing an SQL statement."}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnNew(initvalue As %RawString) As %Status [ Internal, Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %New method to provide notification that a new instance of an object is being created."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then the object will not be created."}),"\n",(0,s.jsx)(t.p,{children:"It is passed the arguments provided in the %New call. When customizing this method, override the arguments with whatever variables and types you expect to receive from %New(). For example, if you're going to call %New, passing 2 arguments, %OnNew's signature could be:"}),"\n",(0,s.jsx)(t.p,{children:'Method %OnNew(dob as %Date = "", name as %Name = "") as %Status'}),"\n",(0,s.jsx)(t.h3,{id:"dialectset",children:"DialectSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method DialectSet(pValue As %String = "") As %Status\n'})}),"\n",(0,s.jsx)(t.h3,{id:"go",children:"%Go"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %Go(pDialect As %String) [ PublicList = SQLCODE ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%Go() - instantiate the shell and prompt for commands."}),"\n",(0,s.jsx)(t.h3,{id:"dispatcher",children:"dispatcher"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method dispatcher(ByRef pInput As %Library.String = "") [ PublicList = SQLCODE ]\n'})}),"\n",(0,s.jsx)(t.h3,{id:"processcache",children:"processCache"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method processCache(ByRef pInput As %Library.String = "", pCommand As %Library.String(MAXLEN="") = "")\n'})}),"\n",(0,s.jsx)(t.h3,{id:"cmdobjectscript",children:"cmdObjectScript"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method cmdObjectScript(ByRef pInput As %Library.String(MAXLEN="") = "")\n'})}),"\n",(0,s.jsx)(t.p,{children:"cmdObjectScript will execute a object script command"}),"\n",(0,s.jsx)(t.h3,{id:"cmdgo",children:"cmdGo"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method cmdGo()\n"})}),"\n",(0,s.jsx)(t.h3,{id:"cmdmetadata",children:"cmdMetadata"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method cmdMetadata(ByRef pInputLC As %Library.String(MAXLEN="") = "")\n'})}),"\n",(0,s.jsx)(t.p,{children:"Display the current statement's metadata."}),"\n",(0,s.jsx)(t.h3,{id:"cmdopen",children:"cmdOpen"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method cmdOpen(ByRef pInput As %Library.String(MAXLEN="") = "")\n'})}),"\n",(0,s.jsx)(t.p,{children:"Open (retrieve) a statement from the SQL statement pool."}),"\n",(0,s.jsx)(t.h3,{id:"cmdprocessstatement",children:"cmdProcessStatement"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method cmdProcessStatement(ByRef pInput As %Library.String(MAXLEN="") = "")\n'})}),"\n",(0,s.jsx)(t.h3,{id:"cmdsaveglobal",children:"cmdSaveGlobal"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method cmdSaveGlobal(ByRef pInput As %Library.String(MAXLEN="") = "")\n'})}),"\n",(0,s.jsx)(t.h3,{id:"cmdset",children:"cmdSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method cmdSet(ByRef pInputLC As %Library.String(MAXLEN="") = "", pInput As %Library.String(MAXLEN=""))\n'})}),"\n",(0,s.jsx)(t.h3,{id:"cmdshow",children:"cmdShow"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method cmdShow(ByRef pInputLC As %Library.String(MAXLEN="") = "", pCommand As %Library.String = "")\n'})}),"\n",(0,s.jsx)(t.h3,{id:"execute",children:"execute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method execute(pStatement As %SQL.Statement) As %SQL.StatementResult\n"})}),"\n",(0,s.jsx)(t.h3,{id:"cmdload",children:"cmdLoad"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod cmdLoad(pInput As %String(MAXLEN=""), ByRef pStatement As %String(MAXLEN=""))\n'})}),"\n",(0,s.jsx)(t.h3,{id:"cmdsave",children:"cmdSave"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method cmdSave(pInput As %String(MAXLEN=""))\n'})}),"\n",(0,s.jsx)(t.h3,{id:"enterstatement",children:"EnterStatement"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method EnterStatement(ByRef pInput As %Library.String(MAXLEN="") = "")\n'})}),"\n",(0,s.jsx)(t.p,{children:"EnterStatement - multi-line statement entry"}),"\n",(0,s.jsx)(t.h3,{id:"parseset",children:"parseSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod parseSet(pCommand As %String(MAXLEN="") = "", ByRef pOption As %String(MAXLEN="") = "", ByRef pValue As %String(MAXLEN="") = "") As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(t.h3,{id:"displaystatement",children:"displayStatement"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod displayStatement(ByRef pStatement As %Library.String(MAXLEN=""), pIndentFirst As %Library.String = {$Char(9)}, pIndent As %Library.String = {$Char(9)})\n'})}),"\n",(0,s.jsx)(t.h3,{id:"help",children:"Help"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Help()\n"})}),"\n",(0,s.jsx)(t.h3,{id:"helpstatementmode",children:"HelpStatementMode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod HelpStatementMode()\n"})}),"\n",(0,s.jsx)(t.h3,{id:"cmdrun",children:"cmdRun"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method cmdRun(ByRef pInput As %Library.String(MAXLEN="") = "")\n'})}),"\n",(0,s.jsx)(t.p,{children:"cmdRun will run a SQL script file - Currently only Sybase is supported."}),"\n",(0,s.jsx)(t.h3,{id:"displayresult",children:"displayResult"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method displayResult(pResult As %SQL.StatementResult = "")\n'})}),"\n",(0,s.jsx)(t.p,{children:"This method displays the result produced by executing the current statement. DISPLAYMODE determines how the statement is displayed and ECHOMODE suppresses the results display on the current device."}),"\n",(0,s.jsx)(t.h3,{id:"getprompt",children:"getPrompt"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod getPrompt(lasttime As %Library.String = "0.0")\n'})}),"\n",(0,s.jsx)(t.p,{children:"getPrompt() returs the string to use for the prompt based on the configured Terminal Prompt settings"}),"\n",(0,s.jsx)(t.h3,{id:"display",children:"display"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod display(str As %String, lmargin As %Integer = 25, rmargin As %Integer = 80)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Given a string, display the string on this, and as many lines needed, between the given margins."})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var s=n(96540);const i={},r=s.createContext(i);function l(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);