"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[37387],{60607:(e,n,s)=>{s.r(n),s.d(n,{contentTitle:()=>a,default:()=>c,frontMatter:()=>i,toc:()=>l});var r=s(74848),t=s(28453);const i={pagination_prev:null,pagination_next:null},a="%SQL.Migration.Import",l=[{value:"Methods",id:"methods",level:2},{value:"Connect",id:"connect",level:3},{value:"CopyData",id:"copydata",level:3},{value:"CopyDataJ",id:"copydataj",level:3},{value:"CopyTableFKeys",id:"copytablefkeys",level:3},{value:"CopyTableFKeysJ",id:"copytablefkeysj",level:3},{value:"CopyTableStruct",id:"copytablestruct",level:3},{value:"CpTableIndex",id:"cptableindex",level:3},{value:"CpTableIndexJ",id:"cptableindexj",level:3},{value:"CpTableSchema",id:"cptableschema",level:3},{value:"CpTableSchemaJ",id:"cptableschemaj",level:3},{value:"CopyViewJ",id:"copyviewj",level:3},{value:"CopyViewRecursiveJ",id:"copyviewrecursivej",level:3},{value:"CopyView",id:"copyview",level:3},{value:"CopyViewRecursive",id:"copyviewrecursive",level:3},{value:"Datatypes",id:"datatypes",level:3},{value:"Disconnect",id:"disconnect",level:3},{value:"ErrorCount",id:"errorcount",level:3},{value:"Gethdbc",id:"gethdbc",level:3}];function o(e){const n={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"sqlmigrationimport",children:"%SQL.Migration.Import"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Class %SQL.Migration.Import Extends (%RegisteredObject, Util) [ Not ProcedureBlock, System = 3 ]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Imports Objects from Relational Databases"}),"\n",(0,r.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.h3,{id:"connect",children:"Connect"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:'Method Connect(dsn As %String, localuser As %String = "", isJDBC As %Boolean = 0) As %Status\n'})}),"\n",(0,r.jsx)(n.p,{children:"Connect to the client system via an SQL Gateway Connection (ODBC or JDBC), and initializes some structures"}),"\n",(0,r.jsx)(n.p,{children:"Arguments:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"dsn"})," - is the name of the SQL Gateway Connection to connect to"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"localuser"})," - obsolete"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"isJDBC"})," - 1/0 flag. If this SQL Gateway connection is via JDBC use 1, otherwise use 0. 0 (ODBC) is the default parameter value"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"copydata",children:"CopyData"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method CopyData(TbOwner As %String, TbName As %String, ScrubRoutine As %String) As %Status\n"})}),"\n",(0,r.jsx)(n.p,{children:"CopyData (for ODBC connection) - Copies the data from the source system to this system"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"1 - get list of fields on source table (through gateway)"}),"\n",(0,r.jsx)(n.li,{children:"2 - construct select list for source"}),"\n",(0,r.jsx)(n.li,{children:"3 - construct update list for dest"}),"\n",(0,r.jsxs)(n.li,{children:["4 - select loop on source",(0,r.jsx)(n.br,{}),"\n* for each, insert into destination",(0,r.jsx)(n.br,{}),"\n* for each Blob on source:",(0,r.jsx)(n.br,{}),"\n* while whole blob not fetched",(0,r.jsx)(n.br,{}),"\n* fetch blob block from source",(0,r.jsx)(n.br,{}),"\n* add blob to destination blob"]}),"\n",(0,r.jsx)(n.li,{children:"5 - create indices, ....or anything"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Arguments:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbOwner"})," - Name of the owner/schema of the target table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbName"})," - Name of the target table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"ScrubRoutine"})," - Name of a routine to call to scrub/modify the incoming data"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["DATA SCRUBBING:",(0,r.jsx)(n.br,{}),"\nFor each data import process, a Routine can be speficied to modify field values prior to inserting them into InterSystems IRIS. This also allows to skip specific rows of data, preventing their insertion into InterSystems IRIS. The user-written Data scrubbing routine must provide 2 entry points."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Metadata(TbOwner,TbName,colNums,colSqlTypes,colStreamTypes)"}),"\n",(0,r.jsx)(n.li,{children:"Data(colData)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Metadata"})," is called once for each table to copy, to pass information about the TableOwner, TableName, ColumnNames and Datatypes. It is a good place to perform the processing that needs to be done once per table.",(0,r.jsx)(n.br,{}),"\nArguments:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbOwner"})," - The SQL Schema in the origin datasource"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbName"})," - The SQL Table name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"colNums"}),'- An array 1..N. One element per column in the table. colNum(i)="Column_Name"',(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"colSqlTypes"})," - An array 1..N One element per column in the table. The value is the SQL Datatype in the source Database. Values are ODBC Values as defined in %SQLMigration.inc:",(0,r.jsx)(n.br,{}),"\n#define SQLCHAR 1",(0,r.jsx)(n.br,{}),"\n#define SQLBIGINT -5",(0,r.jsx)(n.br,{}),"\n#define SQLBINARY -2",(0,r.jsx)(n.br,{}),"\n#define SQLBIT -7",(0,r.jsx)(n.br,{}),"\n#define SQLDATE 9",(0,r.jsx)(n.br,{}),"\n#define SQLDECIMAL 3",(0,r.jsx)(n.br,{}),"\n#define SQLDOUBLE 8",(0,r.jsx)(n.br,{}),"\n#define SQLFLOAT 6",(0,r.jsx)(n.br,{}),"\n#define SQLGUID -11",(0,r.jsx)(n.br,{}),"\n#define SQLINTEGER 4",(0,r.jsx)(n.br,{}),"\n#define SQLLONGVARCHAR -1",(0,r.jsx)(n.br,{}),"\n#define SQLLONGVARBINARY -4",(0,r.jsx)(n.br,{}),"\n#define SQLNUMERIC 2",(0,r.jsx)(n.br,{}),"\n#define SQLREAL 7",(0,r.jsx)(n.br,{}),"\n#define SQLSMALLINT 5",(0,r.jsx)(n.br,{}),"\n#define SQLTINYINT -6",(0,r.jsx)(n.br,{}),"\n#define SQLTIME 10",(0,r.jsx)(n.br,{}),"\n#define SQLTIMESTAMP 11",(0,r.jsx)(n.br,{}),"\n#define SQLVARBINARY -3",(0,r.jsx)(n.br,{}),"\n#define SQLVARCHAR 12 ",(0,r.jsx)(n.em,{children:"colStreamTypes"})," - An array 1..N. One element per column in the table. The value is  0: if the column data is not a stream",(0,r.jsx)(n.br,{}),"\n1: if the column data is contained in a %CharacterStream",(0,r.jsx)(n.br,{}),"\n2: if the column data is contained in a %BinaryStream",(0,r.jsx)(n.br,{}),"\nReturn value: none (Quit with no argument)"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Data"})," is called once for each row fetched from the origin datasource. This function must return 1 to insert this Row, and 0 if the Row should not be inserted into InterSystems IRIS.",(0,r.jsx)(n.br,{}),"\nArguments:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"colData()"})," - Is an array 1..N of values. colData(i) is the column Data in ODBC format if the column is not a Stream (a Date is represented in the YYYY-MM-DD Format. An empty String is represented by a $c(0) character, and a NULL value is represented as \"\"). For BLOB columns, represented in InterSystems IRIS as Streams, it is an ID to an Open %CharacterStream or %BinaryStream as specified in the colStreamTypes array that was passed to the Metadata function. To change the value of a column 'i', the Data function can simply modify the value in colData(i). To change the value of a Blob column, the Data function can modify the Stream, or modify the Stream reference. It must return in colData(i) a $zobjint() of an oref to a Stream."]}),"\n",(0,r.jsx)(n.h3,{id:"copydataj",children:"CopyDataJ"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method CopyDataJ(TbOwner As %String, TbName As %String, ScrubRoutine As %String) As %Status [ ProcedureBlock = 1, PublicList = comperr ]\n"})}),"\n",(0,r.jsx)(n.p,{children:"CopyDataJ (for JDBC connection) - Copies the data from the source system to this system"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"1 - get list of fields on source table (through gateway)"}),"\n",(0,r.jsx)(n.li,{children:"2 - construct select list for source"}),"\n",(0,r.jsx)(n.li,{children:"3 - construct update list for dest"}),"\n",(0,r.jsxs)(n.li,{children:["4 - select loop on source",(0,r.jsx)(n.br,{}),"\n* for each, insert into destination",(0,r.jsx)(n.br,{}),"\n* for each Blob on source:",(0,r.jsx)(n.br,{}),"\n* while whole blob not fetched",(0,r.jsx)(n.br,{}),"\n* fetch blob block from source",(0,r.jsx)(n.br,{}),"\n* add blob to destination blob"]}),"\n",(0,r.jsx)(n.li,{children:"5 - create indices, ....or anything"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Arguments:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbOwner"})," - Name of the owner/schema of the target table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbName"})," - Name of the target table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"ScrubRoutine"})," - Name of a routine to call to scrub/modify the incoming data"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["DATA SCRUBBING:",(0,r.jsx)(n.br,{}),"\nFor each data import process, a Routine can be speficied to modify field values prior to inserting them into InterSystems IRIS. This also allows to skip specific rows of data, preventing their insertion into InterSystems IRIS. The user-written Data scrubbing routine must provide 2 entry points."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Metadata(TbOwner,TbName,colNums,colSqlTypes,colStreamTypes)"}),"\n",(0,r.jsx)(n.li,{children:"Data(colData)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Metadata"})," is called once for each table to copy, to pass information about the TableOwner, TableName, ColumnNames and Datatypes. It is a good place to perform the processing that needs to be done once per table.",(0,r.jsx)(n.br,{}),"\nArguments:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbOwner"})," - The SQL Schema in the origin datasource"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbName"})," - The SQL Table name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"colNums"}),'- An array 1..N. One element per column in the table. colNum(i)="Column_Name"',(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"colSqlTypes"})," - An array 1..N One element per column in the table. The value is the SQL Datatype in the source Database. Values are ODBC Values as defined in %SQLMigration.inc:",(0,r.jsx)(n.br,{}),"\n#define SQLCHAR 1",(0,r.jsx)(n.br,{}),"\n#define SQLBIGINT -5",(0,r.jsx)(n.br,{}),"\n#define SQLBINARY -2",(0,r.jsx)(n.br,{}),"\n#define SQLBIT -7",(0,r.jsx)(n.br,{}),"\n#define SQLDATE 9",(0,r.jsx)(n.br,{}),"\n#define SQLDECIMAL 3",(0,r.jsx)(n.br,{}),"\n#define SQLDOUBLE 8",(0,r.jsx)(n.br,{}),"\n#define SQLFLOAT 6",(0,r.jsx)(n.br,{}),"\n#define SQLGUID -11",(0,r.jsx)(n.br,{}),"\n#define SQLINTEGER 4",(0,r.jsx)(n.br,{}),"\n#define SQLLONGVARCHAR -1",(0,r.jsx)(n.br,{}),"\n#define SQLLONGVARBINARY -4",(0,r.jsx)(n.br,{}),"\n#define SQLNUMERIC 2",(0,r.jsx)(n.br,{}),"\n#define SQLREAL 7",(0,r.jsx)(n.br,{}),"\n#define SQLSMALLINT 5",(0,r.jsx)(n.br,{}),"\n#define SQLTINYINT -6",(0,r.jsx)(n.br,{}),"\n#define SQLTIME 10",(0,r.jsx)(n.br,{}),"\n#define SQLTIMESTAMP 11",(0,r.jsx)(n.br,{}),"\n#define SQLVARBINARY -3",(0,r.jsx)(n.br,{}),"\n#define SQLVARCHAR 12 ",(0,r.jsx)(n.em,{children:"colStreamTypes"})," - An array 1..N. One element per column in the table. The value is  0: if the column data is not a stream",(0,r.jsx)(n.br,{}),"\n1: if the column data is contained in a %CharacterStream",(0,r.jsx)(n.br,{}),"\n2: if the column data is contained in a %BinaryStream",(0,r.jsx)(n.br,{}),"\nReturn value: none (Quit with no argument)"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Data"})," is called once for each row fetched from the origin datasource. This function must return 1 to insert this Row, and 0 if the Row should not be inserted into InterSystems IRIS.",(0,r.jsx)(n.br,{}),"\nArguments:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"colData()"})," - Is an array 1..N of values. colData(i) is the column Data in ODBC format if the column is not a Stream (a Date is represented in the YYYY-MM-DD Format. An empty String is represented by a $c(0) character, and a NULL value is represented as \"\"). For BLOB columns, represented in InterSystems IRIS as Streams, it is an ID to an Open %CharacterStream or %BinaryStream as specified in the colStreamTypes array that was passed to the Metadata function. To change the value of a column 'i', the Data function can simply modify the value in colData(i). To change the value of a Blob column, the Data function can modify the Stream, or modify the Stream reference. It must return in colData(i) a $zobjint() of an oref to a Stream."]}),"\n",(0,r.jsx)(n.h3,{id:"copytablefkeys",children:"CopyTableFKeys"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method CopyTableFKeys(FkTbOwner As %Library.String, FkTbName As %Library.String) As %Status\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Copy Foreign Keys from remote DB via ODBC to InterSystems IRIS for the given FK Table.",(0,r.jsx)(n.br,{}),"\nArguments:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"FkTbOwner"})," - Name of the owner/schema of the foreign key table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"FkTbName"})," - Name of the target table to get Foreign Keys from"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"copytablefkeysj",children:"CopyTableFKeysJ"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method CopyTableFKeysJ(FkTbOwner As %Library.String, FkTbName As %Library.String, verbose As %Library.Boolean = 0) As %Status [ ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Copy Foreign Keys from remote DB via JDBC to InterSystems IRIS for the given FK Table.",(0,r.jsx)(n.br,{}),"\nArguments:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"FkTbOwner"})," - Name of the owner/schema of the foreign key table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"FkTbName"})," - Name of the target table to get Foreign Keys from"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"copytablestruct",children:"CopyTableStruct"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method CopyTableStruct(TbOwner As %String, TbName As %String, verbose As %Boolean = 0) As %Status [ ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Cleanup previous version of table (Table,Index,Foreign Keys), re-create table with Fields, Unique and Primary Key constraints, and Index Definitions",(0,r.jsx)(n.br,{}),"\nArguments:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbOwner"})," - Name of the owner/schema of the table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbName"})," - Name of the target table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"verbose"})," - 1/0 flag. If 1 display output to screen. Default os 0."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"cptableindex",children:"CpTableIndex"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method CpTableIndex(TbOwner As %Library.String, TbName As %Library.String) As %Status [ Private ]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Copied Indices from remote DB via ODBC to InterSystems IRIS for the specified table. Note: currently, all Indices, be they user or system defined, are copied as normal indices. Oracle Bitmap Indices and Sql Server Clustered Indices are copied as normal Indices. Indices on Primary Keys are not created, as those are automatically generated.",(0,r.jsx)(n.br,{}),"\nArguments:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbOwner"})," - Name of the owner/schema of the table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbName"})," - Name of the target table"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"cptableindexj",children:"CpTableIndexJ"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method CpTableIndexJ(TbOwner As %Library.String, TbName As %Library.String, ByRef pkColumns As %String, verbose As %Boolean = 0) As %Status [ Private, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Copied Indices from remote DB via JDBC to InterSystems IRIS for the specified table. Note: currently, all Indices, be they user or system defined, are copied as normal indices. Oracle Bitmap Indices and Sql Server Clustered Indices are copied as normal Indices. Indices on Primary Keys are not created, as those are automatically generated.",(0,r.jsx)(n.br,{}),"\nArguments:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbOwner"})," - Name of the owner/schema of the table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbName"})," - Name of the target table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"pkColumns"})," - Passed by Reference. returns primary key columns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"verbose"})," - 1/0 flag. If 1 display output to screen. Default os 0."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"cptableschema",children:"CpTableSchema"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method CpTableSchema(TbOwner As %Library.String, TbName As %Library.String) As %Status [ Private ]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Copy the table definition via ODBC to InterSystems IRIS: Fields, Datatypes, Not Null Columns, Defaults columns, and table Primary Key.",(0,r.jsx)(n.br,{}),"\nNot copied by this function are: Foreign Key constraints, Check Constraints, table Triggers, Autoincrements.",(0,r.jsx)(n.br,{}),"\nArguments:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbOwner"})," - Name of the owner/schema of the table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbName"})," - Name of the target table"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"cptableschemaj",children:"CpTableSchemaJ"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method CpTableSchemaJ(TbOwner As %Library.String, TbName As %Library.String, ByRef pkColumns As %String) As %Status [ Private, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Copy the table definition via JDBC to InterSystems IRIS: Fields, Datatypes, Not Null Columns, Defaults columns, and table Primary Key.",(0,r.jsx)(n.br,{}),"\nNot copied by this function are: Foreign Key constraints, Check Constraints, table Triggers, Autoincrements.",(0,r.jsx)(n.br,{}),"\nArguments:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbOwner"})," - Name of the owner/schema of the table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"TbName"})," - Name of the target table"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"pkColumns"})," - Passed by Reference. returns primary key columns"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"copyviewj",children:"CopyViewJ"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method CopyViewJ(VOwner As %String, VName As %String) As %Status\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Copy One View and its dependencies via JDBC",(0,r.jsx)(n.br,{}),"\nArguments:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"VOwner"})," - Name of the owner/schema of the view"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"VName"})," - Name of the target view"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"copyviewrecursivej",children:"CopyViewRecursiveJ"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method CopyViewRecursiveJ(VOwner As %String, VName As %String) [ ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Find dependencies. Copy each dependency View via JDBC",(0,r.jsx)(n.br,{}),"\nArguments:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"VOwner"})," - Name of the owner/schema of the view"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"VName"})," - Name of the target view"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"copyview",children:"CopyView"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method CopyView(VOwner As %String, VName As %String) As %Status\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Copy One View and its dependencies via ODBC",(0,r.jsx)(n.br,{}),"\nArguments:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"VOwner"})," - Name of the owner/schema of the view"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"VName"})," - Name of the target view"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"copyviewrecursive",children:"CopyViewRecursive"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method CopyViewRecursive(VOwner As %String, VName As %String, hstmt As %String)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Find dependencies. Copy each dependency View via ODBC",(0,r.jsx)(n.br,{}),"\nArguments:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"VOwner"})," - Name of the owner/schema of the view"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"VName"})," - Name of the target view"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"datatypes",children:"Datatypes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method Datatypes() As %Status [ Private ]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Build Array of Datatypes for source Database"}),"\n",(0,r.jsx)(n.h3,{id:"disconnect",children:"Disconnect"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method Disconnect() As %Status\n"})}),"\n",(0,r.jsx)(n.p,{children:"Disconnect from the SQL Gateway (ODBC)"}),"\n",(0,r.jsx)(n.h3,{id:"errorcount",children:"ErrorCount"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method ErrorCount() As %Integer\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the current number of import errors."}),"\n",(0,r.jsx)(n.h3,{id:"gethdbc",children:"Gethdbc"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method Gethdbc() As %String\n"})}),"\n",(0,r.jsx)(n.p,{children:'Returns Database handle for current connection ("" or 0 if not connected)'})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var r=s(96540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);