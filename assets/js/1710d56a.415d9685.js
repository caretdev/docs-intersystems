"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[12838],{89280:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>l,default:()=>o,frontMatter:()=>i,toc:()=>r});var a=s(74848),n=s(28453);const i={pagination_prev:null,pagination_next:null},l="%iKnow.Queries.MetadataI",r=[{value:"Parameters",id:"parameters",level:2},{value:"GetFieldsRT",id:"getfieldsrt",level:3},{value:"Methods",id:"methods",level:2},{value:"GetFieldId",id:"getfieldid",level:3},{value:"AddField",id:"addfield",level:3},{value:"SetValue",id:"setvalue",level:3},{value:"SetValueById",id:"setvaluebyid",level:3},{value:"StartBatch",id:"startbatch",level:3},{value:"EndBatch",id:"endbatch",level:3},{value:"SetValueByIdInternal",id:"setvaluebyidinternal",level:3},{value:"GetValue",id:"getvalue",level:3},{value:"GetValueById",id:"getvaluebyid",level:3},{value:"SortByField",id:"sortbyfield",level:3},{value:"CreateFilter",id:"createfilter",level:3},{value:"GetFields",id:"getfields",level:3},{value:"GetFieldInfo",id:"getfieldinfo",level:3},{value:"GetFieldInfoById",id:"getfieldinfobyid",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"iknowqueriesmetadatai",children:"%iKnow.Queries.MetadataI"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Class %iKnow.Queries.MetadataI Extends %RegisteredObject [ Abstract, Deprecated, System = 4 ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"This is the interface to interact with metadata as expected by other parts of the iKnow libraries. A simple but flexible implementation is provided through %iKnow.Queries.MetadataAPI, but customers can choose to develop their own or wire to an existing metadata infrastructure by implementing the interface specified in this class."}),"\n",(0,a.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(t.h3,{id:"getfieldsrt",children:"GetFieldsRT"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetFieldsRT = "mdFieldId:%String,fieldName:%String,supportedOperators:%List,dataType:%String,storage:%Integer,caseSensitive:%Boolean,lovId:%Integer,validateLov:%Boolean,hidden:%Boolean";\n'})}),"\n",(0,a.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(t.h3,{id:"getfieldid",children:"GetFieldId"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFieldId(domainId As %Integer, fieldName As %String) As %Integer\n"})}),"\n",(0,a.jsx)(t.p,{children:'Returns the metadata field ID corresponding to the supplied name, or "" if none exists in this domain.'}),"\n",(0,a.jsx)(t.h3,{id:"addfield",children:"AddField"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod AddField(domainId As %Integer, fieldName As %String, supportedOperators As %List, dataType As %String = {$$$MDDTSTRING}, storage As %Integer = {$$$MDSTNORMAL}, caseSensitive As %Boolean = 0, lovId As %Integer = -1, validateLov As %Boolean = 1, hidden As %Boolean = 0) As %Integer\n"})}),"\n",(0,a.jsx)(t.p,{children:"Adds a field definition with the given name and properties."}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"The supportedOperators parameter specifies which operations (such as $$$MDOPEQUAL) will be available for filtering criteria"}),"\n",(0,a.jsx)(t.li,{children:"For dataType, choose either $$$MDDTSTRING, $$$MDDTNUMBER or $$$MDDTDATE ($horolog format)"}),"\n",(0,a.jsx)(t.li,{children:"Use storage to control the way how values are stored: $$$MDSTNORMAL for cases where you would use a normal index, $$$MDSTBITMAP where you would use a bitmap index (few different metadata values compared to total # of records)"}),"\n",(0,a.jsx)(t.li,{children:"If dataType is $$$MDDTSTRING, caseSensitive controls whether or not string values should be treated as case-sensitive."}),"\n",(0,a.jsx)(t.li,{children:"The lovId and validateLov parameters define wheter a List Of Values is available for this metadata field and whether input values should be verified against this list. See also AddListOfValues."}),"\n",(0,a.jsx)(t.li,{children:"If hidden is set to true, the field will by default not appear in metadata field and value lists."}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"setvalue",children:"SetValue"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetValue(domainId As %Integer, fieldName As %String, externalId As %String, value As %String) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Sets (or replaces if it exists) the value for a given metadata field (by name) for a given source (by External ID)."}),"\n",(0,a.jsx)(t.p,{children:"Values for fields of type $$$MDDTSTRING are normalized and stripped of whitespace and control characters at the beginning and end of the string."}),"\n",(0,a.jsx)(t.h3,{id:"setvaluebyid",children:"SetValueById"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetValueById(domainId As %Integer, fieldId As %Integer, srcId As %Integer, value As %String) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Sets (or replaces if it exists) the value for a given metadata field (by ID) for a given source (by Source ID)."}),"\n",(0,a.jsx)(t.p,{children:"Values for fields of type $$$MDDTSTRING are normalized and stripped of whitespace and control characters at the beginning and end of the string."}),"\n",(0,a.jsx)(t.h3,{id:"startbatch",children:"StartBatch"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod StartBatch(domainId As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Starts a 'batch' during which metadata values can be set. Some setting operations and index recalculations are optimized for batch processing."}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"NOTE:"})," It is currently up to the user to make sure no metadata values are read during the batch and no values exist already (as replacing a value involves reading it). Reading metadata field values during a batch is not guaranteed to return correct results."]}),"\n",(0,a.jsx)(t.h3,{id:"endbatch",children:"EndBatch"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod EndBatch(domainId As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Ends a metadata batch. See StartBatch for more details."}),"\n",(0,a.jsx)(t.h3,{id:"setvaluebyidinternal",children:"SetValueByIdInternal"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetValueByIdInternal(domainId As %Integer, fieldId As %Integer, srcId As %Integer, value As %String, skipExistingValueCheck As %Boolean = 0) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Internal method to set a metadata value directly, without performing any existence checks. If not implemented, defaults to SetValueById, ignoring skipExistingValueCheck"}),"\n",(0,a.jsx)(t.h3,{id:"getvalue",children:"GetValue"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetValue(domainId As %Integer, fieldName As %String, externalId As %String, Output sc As %Status) As %String\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns the actual value for a given metadata field (by name) and source (by External ID)."}),"\n",(0,a.jsx)(t.h3,{id:"getvaluebyid",children:"GetValueById"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetValueById(domainId As %Integer, fieldId As %Integer, srcId As %Integer, Output sc As %Status) As %String\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns the actual value for a given metadata field (by ID) and source (by Source ID)."}),"\n",(0,a.jsx)(t.h3,{id:"sortbyfield",children:"SortByField"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SortByField(ByRef pResult, pDomainId As %Integer, ByRef pSources, pSort As %String, pPage As %Integer = 1, pPageSize As %Integer = 10) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(t.p,{children:'Allows the results of %iKnow.Queries.SourceAPI queries to be re-sorted along a particular metadata field. pSort is expected to contain the name of the metadata field to sort by, optionally followed by a space and "ASC" (default) or "DESC". The string "ExternalId" is also accepted as a valid sort field and should be resolved through the GetExternalId method in %iKnow.Queries.SourceAPI, unless there is a metadata field carrying the same name.'}),"\n",(0,a.jsx)(t.p,{children:"pSources is expected to be an array containing all (unsorted) query results with the source ID as the first row element, while pResult will be populated with the sorted results like a usual iKnow API query."}),"\n",(0,a.jsx)(t.p,{children:'pSort can optionally be suffixed with a space and the string "ADDCOL", in which case, a column containing the actual metadata value is appended to the results. Use this feature with caution as it might impact SQL/WS clients, because the extra column is not declared in the original query specs.'}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Note"}),": sources for which the requested metadata field is not populated or where its value is longer than $$$IKHASHSIZE (150 characters) will be left out of the results."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Note"}),": This is a default implementation using other %iKnow.Queries.MetadataI methods. Subclasses may override this method using dedicated methods for improved performance"]}),"\n",(0,a.jsx)(t.h3,{id:"createfilter",children:"CreateFilter"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CreateFilter(pDomainId As %Integer, pFieldName As %String, pOperator As %String, pValue As %String, Output pSC As %Status = {$$$OK}) As %iKnow.Filters.Filter [ Abstract ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Create a %iKnow.Filters.Filter instance that filters sources according to the given criteria, using the filter class compatible with this %iKnow.Queries.MetadataI implementation."}),"\n",(0,a.jsx)(t.h3,{id:"getfields",children:"GetFields"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFields(ByRef result As %Integer, domainId As %Integer, includeHidden As %Boolean = 0) As %Status [ Abstract ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Returns all field definitions (including their properties) for the given domain."}),"\n",(0,a.jsx)(t.h3,{id:"getfieldinfo",children:"GetFieldInfo"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFieldInfo(pDomainId As %Integer, pFieldName As %String, Output pInfo) As %Status [ Abstract ]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"getfieldinfobyid",children:"GetFieldInfoById"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFieldInfoById(pDomainId As %Integer, pFieldId As %String, Output pInfo) As %Status [ Abstract ]\n"})})]})}function o(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>r});var a=s(96540);const n={},i=a.createContext(n);function l(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);