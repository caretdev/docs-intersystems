"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[27921],{92073:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>a,default:()=>o,frontMatter:()=>s,toc:()=>l});var n=r(74848),i=r(28453);const s={pagination_prev:null,pagination_next:null},a="%Api.InteropMetrics",l=[{value:"XDatas",id:"xdatas",level:2},{value:"UrlMap",id:"urlmap",level:3},{value:"Methods",id:"methods",level:2},{value:"interfaces",id:"interfaces",level:3},{value:"interfacesByTime",id:"interfacesbytime",level:3},{value:"interfacesByInterval",id:"interfacesbyinterval",level:3},{value:"interfacesByMonth",id:"interfacesbymonth",level:3},{value:"interfacesByYear",id:"interfacesbyyear",level:3},{value:"interfacesByDay",id:"interfacesbyday",level:3}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"apiinteropmetrics",children:"%Api.InteropMetrics"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Api.InteropMetrics Extends %CSP.REST [ Deprecated ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Provide Interoperability Interface metrics in Prometheus format"}),"\n",(0,n.jsx)(t.h2,{id:"xdatas",children:"XDatas"}),"\n",(0,n.jsx)(t.h3,{id:"urlmap",children:"UrlMap"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'XData UrlMap [ XMLNamespace = "http://www.intersystems.com/urlmap" ]\n'})}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"interfaces",children:"interfaces"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod interfaces(pNamespace As %String = "") As %Status\n'})}),"\n",(0,n.jsx)(t.p,{children:"Collect the Interoperability Interface metrics and send them to the client in Prometheus Exposition Format. Optionally filter results to only include those in pNamespace"}),"\n",(0,n.jsx)(t.h3,{id:"interfacesbytime",children:"interfacesByTime"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod interfacesByTime(pStart As %String = "", pEnd As %String = "") As %Status\n'})}),"\n",(0,n.jsx)(t.p,{children:'Collect the Interoperability Interface metrics in the specified time range - using UTC - and send them to the client in Prometheus Exposition Format. pStart is required and must be a valid date and optionally time in ODBC format [YY]YY-MM-DD. Time, if specified uses the 24-hour clock and is separated from the date with either single space or a capital "T". If no time is specified, the beginning of the day is used. pStart is to be specified in UTC, and must not be after the current time. pEnd is optional. If specified, it must be a valid date and optionally time in ODBC format [YY]YY-MM-DD. Time, if specified uses the 24-hour clock and is separated from the date with either single space or a capital "T". If no date or time is specified, the present time is used. If a date is specified, but time is not specified, the end of the day is used. pEnd is to be specified in UTC. If a time after the current time is specified, the current time will be used.'}),"\n",(0,n.jsx)(t.h3,{id:"interfacesbyinterval",children:"interfacesByInterval"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod interfacesByInterval(pInterval As %String = "", pNumber As %Integer = 0) As %Status\n'})}),"\n",(0,n.jsx)(t.p,{children:"Collect the Interoperability Interface metrics for the specified interval and send them to the client in Prometheus Exposition Format. pInterval may be 'year', 'month', or 'day'. pNumber must be a non-negative integer. A value of 0 means the returned results will represent any interfaces run within the current time period. For example, if pInterval is 'year', this will return results for the current calendar year. If pNumber is a positive value, then the results will represent any interfaces run in the interval pNumber prior to the current one. For example, if pInterval is 'year' and pNumber is 1, this will return results for the previous calendar year, if pNumber is 2, this will return results for the calendar year before the previous one. UTC is used in determining the boundary between intervals."}),"\n",(0,n.jsx)(t.h3,{id:"interfacesbymonth",children:"interfacesByMonth"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod interfacesByMonth(pMonth As %Integer = 0) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Collect the Interoperability Interface metrics for the specified month and send them to the client in Prometheus Exposition Format. pNumber must be a non-negative integer. A value of 0 means the returned results will represent any interfaces run within the current calendar month. If pNumber is a positive value, then the results will represent any interfaces run in the month pNumber prior to the current one. For example, if is 1, this will return results for the previous calendar month and if pNumber is 2, this will return results for the calendar month before the previous one. /// UTC is used in determining the boundary between months."}),"\n",(0,n.jsx)(t.h3,{id:"interfacesbyyear",children:"interfacesByYear"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod interfacesByYear(pYear As %Integer = 0) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Collect the Interoperability Interface metrics for the specified year and send them to the client in Prometheus Exposition Format. pNumber must be a non-negative integer. A value of 0 means the returned results will represent any interfaces run within the current calendar year. If pNumber is a positive value, then the results will represent any interfaces run in the year pNumber prior to the current one. For example, if is 1, this will return results for the previous calendar year and if pNumber is 2, this will return results for the calendar year before the previous one. /// UTC is used in determining the boundary between years."}),"\n",(0,n.jsx)(t.h3,{id:"interfacesbyday",children:"interfacesByDay"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod interfacesByDay(pDay As %Integer = 0) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Collect the Interoperability Interface metrics for the specified day and send them to the client in Prometheus Exposition Format. pNumber must be a non-negative integer. A value of 0 means the returned results will represent any interfaces run within the current calendar day. If pNumber is a positive value, then the results will represent any interfaces run in the day pNumber prior to the current one. For example, if is 1, this will return results for the previous calendar day and if pNumber is 2, this will return results for the calendar day before the previous one. /// UTC is used in determining the boundary between days."})]})}function o(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>l});var n=r(96540);const i={},s=n.createContext(i);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);