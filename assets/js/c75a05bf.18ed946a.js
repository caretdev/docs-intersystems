"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[3066],{63676:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>l,default:()=>o,frontMatter:()=>i,toc:()=>a});var n=t(74848),r=t(28453);const i={pagination_prev:null,pagination_next:null},l="%UnitTest.Manager",a=[{value:"Example:",id:"example",level:3},{value:"Properties",id:"properties",level:2},{value:"LogIndex",id:"logindex",level:3},{value:"Debug;",id:"debug",level:3},{value:"Display;",id:"display",level:3},{value:"ReportVariableLeaks;",id:"reportvariableleaks",level:3},{value:"LoadXML;",id:"loadxml",level:3},{value:"LoadUDL;",id:"loadudl",level:3},{value:"CurrentDir;",id:"currentdir",level:3},{value:"UserParam",id:"userparam",level:3},{value:"UserFields",id:"userfields",level:3},{value:"TheStack",id:"thestack",level:3},{value:"NSInfo",id:"nsinfo",level:3},{value:"Environment",id:"environment",level:3},{value:"Parallel",id:"parallel",level:3},{value:"ResultId",id:"resultid",level:3},{value:"OriginNS",id:"originns",level:3},{value:"Methods",id:"methods",level:2},{value:"RunTest",id:"runtest",level:3},{value:"Examples:",id:"examples",level:3},{value:"DebugLoadTestSuite",id:"debugloadtestsuite",level:3},{value:"DebugRunTestCase",id:"debugruntestcase",level:3},{value:"PurgeLog",id:"purgelog",level:3},{value:"PurgeResult",id:"purgeresult",level:3},{value:"WipeNamespace",id:"wipenamespace",level:3},{value:"RunTestSuites",id:"runtestsuites",level:3},{value:"realRunTestSuites",id:"realruntestsuites",level:3},{value:"AddSubDirectoryNames",id:"addsubdirectorynames",level:3},{value:"LastSubDirectoryName",id:"lastsubdirectoryname",level:3},{value:"GetSubDirectories",id:"getsubdirectories",level:3},{value:"RunOneTestSuite",id:"runonetestsuite",level:3},{value:"getLoadedClass",id:"getloadedclass",level:3},{value:"Example:",id:"example-1",level:3},{value:"deleteLoadedClasses",id:"deleteloadedclasses",level:3},{value:"RunOneTestCase",id:"runonetestcase",level:3},{value:"getTestMethods",id:"gettestmethods",level:3},{value:"GetCurrentPublicVariableSet",id:"getcurrentpublicvariableset",level:3},{value:"SubtractVariableSet",id:"subtractvariableset",level:3},{value:"ValidateVariables",id:"validatevariables",level:3},{value:"ReturnAllowedPublicVariables",id:"returnallowedpublicvariables",level:3},{value:"Record",id:"record",level:3},{value:"RecordProcVals",id:"recordprocvals",level:3},{value:"Cleanup",id:"cleanup",level:3},{value:"CleanupAllProcVals",id:"cleanupallprocvals",level:3},{value:"CleanupGeneralProcVals",id:"cleanupgeneralprocvals",level:3},{value:"CleanupSpecificProcVals",id:"cleanupspecificprocvals",level:3},{value:"SaveResult",id:"saveresult",level:3},{value:"LogStateBegin",id:"logstatebegin",level:3},{value:"LogStateEnd",id:"logstateend",level:3},{value:"GetTestState",id:"getteststate",level:3},{value:"LogStateStatus",id:"logstatestatus",level:3},{value:"LogAssert",id:"logassert",level:3},{value:"LogMessage",id:"logmessage",level:3},{value:"PrintLine",id:"printline",level:3},{value:"PrintErrorLine",id:"printerrorline",level:3},{value:"PrintURL",id:"printurl",level:3},{value:"IsSuccess",id:"issuccess",level:3},{value:"GetTestStatus",id:"getteststatus",level:3},{value:"%OnNew",id:"onnew",level:3},{value:"AcquireSentryLock",id:"acquiresentrylock",level:3},{value:"ReleaseSentryLock",id:"releasesentrylock",level:3},{value:"DoesHoldSentryLock",id:"doesholdsentrylock",level:3},{value:"%OnClose",id:"onclose",level:3},{value:"Root",id:"root",level:3},{value:"AutoLoad",id:"autoload",level:3},{value:"ConvertLogData",id:"convertlogdata",level:3},{value:"ConvertStatus",id:"convertstatus",level:3},{value:"setRecursiveStatus",id:"setrecursivestatus",level:3},{value:"CheckNameStructure",id:"checknamestructure",level:3},{value:"RecordNamespace",id:"recordnamespace",level:3},{value:"CleanNamespace",id:"cleannamespace",level:3},{value:"RunTestsFromFileList",id:"runtestsfromfilelist",level:3},{value:"Example:",id:"example-2",level:3},{value:"addToExcludeGlobal",id:"addtoexcludeglobal",level:3},{value:"OnAfterSaveResult",id:"onaftersaveresult",level:3},{value:"OnBeforeAllTests",id:"onbeforealltests",level:3},{value:"OnAfterAllTests",id:"onafteralltests",level:3},{value:"OnBeforeAutoLoad",id:"onbeforeautoload",level:3},{value:"OnBeforeTestSuite",id:"onbeforetestsuite",level:3},{value:"OnAfterTestSuite",id:"onaftertestsuite",level:3},{value:"OnBeforeTestCase",id:"onbeforetestcase",level:3},{value:"OnAfterTestCase",id:"onaftertestcase",level:3},{value:"OnBeforeOneTest",id:"onbeforeonetest",level:3},{value:"OnAfterOneTest",id:"onafteronetest",level:3},{value:"BeforeRunTest",id:"beforeruntest",level:3},{value:"AfterRunTest",id:"afterruntest",level:3},{value:"UpdateOptions",id:"updateoptions",level:3},{value:"RestoreOptions",id:"restoreoptions",level:3},{value:"ReserveResultId",id:"reserveresultid",level:3},{value:"IsParallel",id:"isparallel",level:3},{value:"IsParallelWorker",id:"isparallelworker",level:3},{value:"QueueSuiteForParallel",id:"queuesuiteforparallel",level:3},{value:"WaitForAllSuitesForParallel",id:"waitforallsuitesforparallel",level:3},{value:"CreateSwarmReviewSSL",id:"createswarmreviewssl",level:3},{value:"PostSwarmReviewComment",id:"postswarmreviewcomment",level:3},{value:"DeleteSwarmReviewSSL",id:"deleteswarmreviewssl",level:3}];function c(e){const s={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",qualifier:"qualifier",section:"section",strong:"strong",table:"table",tbody:"tbody",td:"td",testspec:"testspec",testsuite:"testsuite",th:"th",thead:"thead",tr:"tr",ul:"ul",value:"value",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"unittestmanager",children:"%UnitTest.Manager"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class %UnitTest.Manager Extends %RegisteredObject [ System = 3 ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The InterSystems IRIS UnitTest framework is composed of several classes that have the package name (prefix) ",(0,n.jsx)(s.strong,{children:"%UnitTest"}),". Of these classes, the %UnitTest.Manager class is the superclass of the UnitTest infrastructure, and is primarily responsible for the following tasks:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Individual UnitTest Invocations"}),"\n",(0,n.jsx)(s.li,{children:"Pre/Post Test Processing"}),"\n",(0,n.jsx)(s.li,{children:"Runtime Processing & Reporting"}),"\n",(0,n.jsx)(s.li,{children:"Test/Error Processing & Analysis"}),"\n",(0,n.jsx)(s.li,{children:"Statistics Collection & Aggregation"}),"\n",(0,n.jsxs)(s.li,{children:["etc.\nDevelopers familiar with the ",(0,n.jsx)(s.em,{children:"xUnit"})," framework should notice a passing resemblance, as these two frameworks share a common testing philosophy.  Prior to invoking any of the methods within this class, you must first perform the following setup instructions:"]}),"\n",(0,n.jsxs)(s.li,{children:["Set the global ",(0,n.jsx)(s.strong,{children:"^UnitTestRoot"})," to a valid root directory that contains all of the UnitTest classes from which all UnitTests will be invoked"]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"example",children:"Example:"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:'set ^UnitTestRoot="C:\\MyUnitTests" ; Adding a final slash is optional'}),"\nOnce the setup has been completed, launching a UnitTest is as simple as invoking one the following methods:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["RunTest - Run all tests specified by the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"testspec"})})," parameter and delete all associated test classes after invocation (Unless otherwise specified).\nDebugRunTestCase - Run all tests specified by the ",(0,n.jsx)(s.em,{children:"testspec"})," parameter without deleting the corresponding test classes after invocation.  This method requires that all test classes must first be loaded before the first invocation, which can be accomplished by initially invoking the DebugLoadTestSuite method.  The RunTest(",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"testspec"})}),", ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"spec"})}),", ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"userparam"})}),") method, more specifically, performs the following tasks:\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{children:["Evaluate all of the qualifiers specified by the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"qspec"})})," parameter\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["If this parameter contains the qualifiers ",(0,n.jsx)(s.strong,{children:"/cleanup/run/delete"}),", without the ",(0,n.jsx)(s.strong,{children:"/debug"})," qualifier, then all globals, classes, and routines within the current namespace will be recorded before each invocation of the RunOneTestSuite method. After each invocation of this method, the namespace will be purged of all globals, classes and routines, other than those previously recorded"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["Evaluate all of the user parameters specified by the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"userparam"})})," parameter\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["If this parameter contains the value ",(0,n.jsx)(s.strong,{children:"/log"}),", then all processing information will be logged to the ",(0,n.jsx)(s.strong,{children:"UNITTEST.LOG"})," file which is located in the ",(0,n.jsx)(s.strong,{children:"mgr"})," directory of the IRIS Instance (e.g. $ZU(12))"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.li,{children:"Invoke the following method before any UnitTests are run: OnBeforeAllTests"}),"\n",(0,n.jsxs)(s.li,{children:["Collect all UnitTest ",(0,n.jsx)(s.em,{children:"testsuites"})," (directories) specified by the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"testspec"})})," parameter, and recursively all associated ",(0,n.jsx)(s.em,{children:"sub-testsuites"})," (sub-directories) (assuming that the ",(0,n.jsx)(s.strong,{children:"/recursive"})," qualifier is on (the default)), whilst skipping all sub-directories whose names begins with an underscore  See the notes within the RunTest method for additional details"]}),"\n",(0,n.jsxs)(s.li,{children:["For each UnitTest's ",(0,n.jsx)(s.em,{children:"testsuites"})," collected in the previous step, invoke the RunOneTestSuite method which performs the following tasks:\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{children:["Collect all UnitTest classes specified by the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"dir"})})," parameter, along with each class's corresponding test methods when the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"testspec"})})," parameter is defined with the following nomenclature:  [-]",(0,n.jsx)(s.em,{children:"testsuite [ :[testcase] [ :testmethod ] [ ;[testcase] [ :testmethod ] ]* ]"})]}),"\n",(0,n.jsxs)(s.li,{children:["Record the start of the testing process based on the specified ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"suite"})})," parameter  See item (3) in the ",(0,n.jsx)(s.em,{children:"Important Notes"})," section below for addition details"]}),"\n",(0,n.jsxs)(s.li,{children:["Load and compile all relevant files in the directory specified by the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"dir"})})," parameter",(0,n.jsx)(s.br,{}),"\n* If the ",(0,n.jsx)(s.strong,{children:"/loadxml"})," qualifier is true (the default), then all XML files (",(0,n.jsx)(s.strong,{children:"*.xml, *.XML"}),") will be loaded",(0,n.jsx)(s.br,{}),"\n* If the ",(0,n.jsx)(s.strong,{children:"/loadudl"})," qualifier is true (the default), then all UDL files (",(0,n.jsx)(s.strong,{children:"*.cls, *.mac, *.int, *.inc, *.CLS, *.MAC, *.INT, *.INC"}),") will be loaded",(0,n.jsx)(s.br,{}),"\nTo see the current qualifier values, invoke the following method: ",(0,n.jsx)(s.em,{children:"do $SYSTEM.OBJ.ShowQualifiers()"})]}),"\n",(0,n.jsxs)(s.li,{children:["For each UnitTest class collected in step (5A) above, invoke the RunOneTestCase method which performs the following tasks:\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{children:["Record the start of the testing process based on the specified ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"suite"})})," and ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"class"})})," parameters  See item (3) in the ",(0,n.jsx)(s.em,{children:"Important Notes"})," section below for addition details"]}),"\n",(0,n.jsxs)(s.li,{children:["Instantiate the UnitTest class specified by the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"class"})})," parameter"]}),"\n",(0,n.jsx)(s.li,{children:"Record the current Process Values"}),"\n",(0,n.jsx)(s.li,{children:"Invoke the following method: OnBeforeTestCase"}),"\n",(0,n.jsx)(s.li,{children:"Invoke the following method: class.OnBeforeAllTests"}),"\n",(0,n.jsxs)(s.li,{children:["Collect all UnitTest methods from the specified ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"class"})})," parameter, which have the following nomenclature: Test* (e.g. Test1 or TestSQL)"]}),"\n",(0,n.jsxs)(s.li,{children:["For each method collected in the previous step, perform the following steps:",(0,n.jsx)(s.br,{}),"\n1. Record the start of the testing process based on the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"suite"})}),", ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"class"})})," and ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"method"})})," parameters  See item (3) in the ",(0,n.jsx)(s.em,{children:"Important Notes"})," section below for addition details",(0,n.jsx)(s.br,{}),"\n2. Invoke the following method: OnBeforeOneTest",(0,n.jsx)(s.br,{}),"\n3. Invoke the following method: class.OnBeforeOneTest",(0,n.jsx)(s.br,{}),"\n4. Invoke the specified UnitTest method (e.g. Test1 or TestSQL)",(0,n.jsx)(s.br,{}),"\n5. Invoke the following method: class.OnAfterOneTest",(0,n.jsx)(s.br,{}),"\n6. Invoke the following method: OnAfterOneTest",(0,n.jsx)(s.br,{}),"\n7. Record the end of the testing process based on the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"suite"})}),", ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"class"})})," and ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"method"})})," parameters  See item (3) in the ",(0,n.jsx)(s.em,{children:"Important Notes"})," section below for addition details"]}),"\n",(0,n.jsx)(s.li,{children:"Repeat the previous steps (a) through (g) for all of the methods collected in step (VI) above"}),"\n",(0,n.jsx)(s.li,{children:"Invoke the following method: class.OnAfterAllTests"}),"\n",(0,n.jsx)(s.li,{children:"Invoke the following method: OnAfterAllTests"}),"\n",(0,n.jsx)(s.li,{children:"Cleanup and Restore any modified Process Values"}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.li,{children:"Repeat the previous steps (I) through (XI) for all of the classes collected in (5A) above"}),"\n",(0,n.jsx)(s.li,{children:"Delete all the classes loaded in step (5C) above"}),"\n",(0,n.jsxs)(s.li,{children:["Record the end of the testing process based on the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"suite"})})," parameter  See item (3) in the ",(0,n.jsx)(s.em,{children:"Important Notes"})," section below for addition details"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["Repeat the previous steps (A) through (G) for all ",(0,n.jsx)(s.em,{children:"testsuites"})," (directories) and all ",(0,n.jsx)(s.em,{children:"sub-testsuites"})," (sub-directories) collected in step (4) above\n",(0,n.jsx)(s.strong,{children:"IMPORTANT NOTES"})]}),"\n",(0,n.jsxs)(s.li,{children:["Throughout this class, the terms ",(0,n.jsx)(s.strong,{children:"qspec"})," and ",(0,n.jsx)(s.strong,{children:"qualifier"})," will be used interchangeably, as many methods in this class use the ",(0,n.jsx)(s.strong,{children:"qspec"})," parameter, which is a concatenated list of supported system flags and qualifiers documented on the following page: ",(0,n.jsx)(s.a,{href:"https://docs.intersystems.com/irislatest/csp/docbook/Doc.Results.cls?docs%5Bquery%5D=qspec",children:"System Flags and Qualifiers"}),"  The ",(0,n.jsx)(s.strong,{children:"qspec"})," parameter can specify qualifiers in the following format: ",(0,n.jsxs)(s.em,{children:["/[no]",(0,n.jsxs)(s.qualifier,{children:["[=",(0,n.jsxs)(s.value,{children:["][/[no]",(0,n.jsxs)(s.qualifier,{children:["[=",(0,n.jsx)(s.value,{children:"]]*"})]})]})]})]})]}),"\n",(0,n.jsxs)(s.li,{children:["The loading, running and deletion tasks can each be skipped by specifying the following qualifiers respectively: ",(0,n.jsx)(s.strong,{children:"/noload"}),", ",(0,n.jsx)(s.strong,{children:"/norun"})," and ",(0,n.jsx)(s.strong,{children:"/nodelete"})]}),"\n",(0,n.jsxs)(s.li,{children:["UnitTest results are saved to the following globals. The first global is used by the ",(0,n.jsx)(s.em,{children:"UnitTest Results CSP Pages"}),", while the second global is used for status processing and debugging:\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"^|ns|UnitTest.Result(id,suite[,class[,method]])=$LIST(...) of Runtime Information"})," ",(0,n.jsx)(s.strong,{children:"ns"}),' - The Namespace in which the UnitTest is being invoked (e.g. "USER") ',(0,n.jsx)(s.strong,{children:"id"})," - The value of the Name/Value pair ",(0,n.jsx)(s.em,{children:"Index"})," within the result URL"]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"^IRIS.Temp.UnitState=$LB(suit[,class[,method]])"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(s.h3,{id:"logindex",children:"LogIndex"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property LogIndex [ Deprecated ];\n"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"DEPRECATED"}),". Use the ResultId property."]}),"\n",(0,n.jsx)(s.h3,{id:"debug",children:"Debug;"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Debug;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["A Boolean flag that is set to true (1) if the ",(0,n.jsx)(s.strong,{children:"/debug"})," qualifier is enabled (1)."]}),"\n",(0,n.jsx)(s.h3,{id:"display",children:"Display;"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Display;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["A Boolean flag that is set to true (1) if the ",(0,n.jsx)(s.strong,{children:"/display=all"})," qualifier is enabled (1)."]}),"\n",(0,n.jsx)(s.h3,{id:"reportvariableleaks",children:"ReportVariableLeaks;"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property ReportVariableLeaks;\n"})}),"\n",(0,n.jsx)(s.p,{children:"A Boolean flag that is set to true (1) if unexpected public variables should trigger an error."}),"\n",(0,n.jsx)(s.h3,{id:"loadxml",children:"LoadXML;"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property LoadXML;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["A Boolean flag that is set to true (1) if the ",(0,n.jsx)(s.strong,{children:"/loadxml"})," qualifier is enabled (1)."]}),"\n",(0,n.jsx)(s.h3,{id:"loadudl",children:"LoadUDL;"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property LoadUDL;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["A Boolean flag that is set to true (1) if the ",(0,n.jsx)(s.strong,{children:"/loadudl"})," qualifier is enabled (1).  UDL files: *.cls, *.mac, *.int, *.inc, *.CLS, *.MAC, *.INT, *.INC"]}),"\n",(0,n.jsx)(s.h3,{id:"currentdir",children:"CurrentDir;"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property CurrentDir;\n"})}),"\n",(0,n.jsx)(s.p,{children:"The directory that contains the current UnitTest."}),"\n",(0,n.jsx)(s.h3,{id:"userparam",children:"UserParam"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property UserParam As %String;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Set to the RunTest method's third parameter ",(0,n.jsx)(s.strong,{children:"userparam"}),", if specified as a string."]}),"\n",(0,n.jsx)(s.h3,{id:"userfields",children:"UserFields"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property UserFields As array Of %String;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Set to the RunTest method's third parameter ",(0,n.jsx)(s.strong,{children:"userparam"}),", if specified as an array. This array is populated from the first level subscripts of the ",(0,n.jsx)(s.strong,{children:"userparam"})," parameter.  Allow users to store additional information, like platform, product version, etc. for each UnitTest. This information can be later cross-referenced in the result."]}),"\n",(0,n.jsx)(s.h3,{id:"thestack",children:"TheStack"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property TheStack [ MultiDimensional, Private ];\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Private property for ",(0,n.jsx)(s.strong,{children:"InterSystems INTERNAL USE ONLY!"})]}),"\n",(0,n.jsx)(s.h3,{id:"nsinfo",children:"NSInfo"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property NSInfo [ Internal, MultiDimensional, Private ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"Private property to hold information about the UnitTest's Namespace."}),"\n",(0,n.jsx)(s.h3,{id:"environment",children:"Environment"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Environment [ Internal, MultiDimensional, Private ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"Private property set primarily in the %OnNew method to hold information about the environment's Process Values. These original values can be restored if changed during the invocation of the UnitTest."}),"\n",(0,n.jsx)(s.h3,{id:"parallel",children:"Parallel"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Parallel As %UnitTest.Parallel [ Internal, Private ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"Private property to hold parallel harness when in use."}),"\n",(0,n.jsx)(s.h3,{id:"resultid",children:"ResultId"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property ResultId As %Integer;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Property to hold the Result ID (instance slot) in the ",(0,n.jsx)(s.strong,{children:"^UnitTest.Manager"})," global."]}),"\n",(0,n.jsx)(s.h3,{id:"originns",children:"OriginNS"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property OriginNS As %String [ Internal ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"Internal property to hold the Namespace in which the UnitTest was run."}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"runtest",children:"RunTest"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RunTest(ByRef testspec As %String, qspec As %String, ByRef userparam) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method invokes all of the UnitTest methods contained within the classes specified by the ",(0,n.jsx)(s.em,{children:"testspec"})," parameter. During the invocation of these methods, a running log is maintained within the following global so that it can be inspected by other processes: ",(0,n.jsx)(s.strong,{children:"^UnitTest.Result"})]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"testspec"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:(0,n.jsx)(s.testspec,{list:""})})," used to invoke UnitTests; passed in as one of the following formats:"]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"String"}),": testspec=",(0,n.jsx)(s.em,{children:(0,n.jsx)(s.testspec,{list:""})}),(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Array"}),": testspec(",(0,n.jsx)(s.em,{children:(0,n.jsx)(s.testspec,{list:""})}),'*)="" ',(0,n.jsx)(s.em,{children:(0,n.jsx)(s.strong,{children:"OR"})})," testspec(#*)=",(0,n.jsx)(s.em,{children:(0,n.jsx)(s.testspec,{list:""})}),(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Global"}),': testspec="^global" (e.g. ^global(',(0,n.jsx)(s.em,{children:(0,n.jsx)(s.testspec,{list:""})}),'*)="" ',(0,n.jsx)(s.em,{children:(0,n.jsx)(s.strong,{children:"OR"})})," ^global(#*)=",(0,n.jsx)(s.em,{children:(0,n.jsx)(s.testspec,{list:""})}),") ",(0,n.jsx)(s.strong,{children:"Syntax"})]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:(0,n.jsx)(s.testspec,{data:""})})," ::= [-]",(0,n.jsx)(s.em,{children:"testsuite [ :[testcase] [ :testmethod ] [ ;[testcase] [ :testmethod ] ]* ]"})]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:(0,n.jsx)(s.testspec,{list:""})}),' ::= "',(0,n.jsx)(s.em,{children:(0,n.jsx)(s.testspec,{data:""})})," [ ,",(0,n.jsx)(s.em,{children:(0,n.jsx)(s.testspec,{data:""})}),' ]*"']}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:(0,n.jsx)(s.testsuite,{root:""})})," ::= // The first instance of the ",(0,n.jsx)(s.em,{children:"testsuite"})," value within the ",(0,n.jsx)(s.em,{children:(0,n.jsx)(s.testspec,{list:""})})," ",(0,n.jsx)(s.em,{children:"testsuite"}),"  A directory (and possibly all of its sub-directories) that's a child of the directory referenced in the ",(0,n.jsx)(s.strong,{children:"^UnitTestRoot"})," global. This directory contains all of the UnitTest classes from which all UnitTests will be invoked. NOTE-1",(0,n.jsx)(s.br,{}),"\nThe ",(0,n.jsx)(s.strong,{children:"^UnitTestRoot"})," global must specify a valid directory whose existence is checked during the invocation of the ",(0,n.jsx)(s.strong,{children:"RunTest(...)"})," method. NOTE-2",(0,n.jsx)(s.br,{}),"\nBy default, the ",(0,n.jsx)(s.strong,{children:"RunTest(...)"})," method will recursively process all sub-directories unless the ",(0,n.jsx)(s.strong,{children:"/norecursive"})," qualifier is passed to the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"qspec"})})," parameter. NOTE-3",(0,n.jsx)(s.br,{}),"\nIf a negative-sign (-) precedes the ",(0,n.jsx)(s.em,{children:"testsuite"}),", then this directory (and all of its sub-directories) will be excluded from UnitTest invocations.",(0,n.jsx)(s.br,{}),"\nA ",(0,n.jsx)(s.em,{children:(0,n.jsx)(s.testsuite,{root:""})})," (without a negative-sign) must first be included before a -",(0,n.jsx)(s.em,{children:"testsuite"})," can be excluded, as in the following example:"]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:(0,n.jsx)(s.testspec,{list:""})}),' = "SQL,-SQL\\Embedded"']}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"testcase"})," (Optional)"]}),"\n",(0,n.jsxs)(s.p,{children:["A class, specified in the following format, which extends one of the testing classes (e.g. ",(0,n.jsx)(s.strong,{children:"%UnitTest.TestCase"}),") and contains testing methods: ",(0,n.jsx)(s.em,{children:"package.class"})," (e.g. Sample.Person)"]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"testmethod"})," (Optional)  A testing method name in the following format: ",(0,n.jsx)(s.em,{children:"Test*"})," (e.g. Test1 or TestFirst) ",(0,n.jsx)(s.strong,{children:"NOTE"}),(0,n.jsx)(s.br,{}),"\nIf no value is specified for the ",(0,n.jsx)(s.em,{children:"testspec"})," parameter, then the directory referenced in the ",(0,n.jsx)(s.strong,{children:"^UnitTestRoot"})," global will be used for the ",(0,n.jsx)(s.em,{children:"testsuite"})," value.",(0,n.jsx)(s.br,{}),"\nAny subdirectory whose name begins with an underscore ( _ ) will be skipped."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"qspec"})}),"\n",(0,n.jsxs)(s.p,{children:["This parameter has a name/term that is used interchangeably with the term ",(0,n.jsx)(s.strong,{children:"qualifier"}),", and a value that is a concatenated list of supported system flags and qualifiers documented on the following page: ",(0,n.jsx)(s.a,{href:"https://docs.intersystems.com/irislatest/csp/docbook/Doc.Results.cls?docs%5Bquery%5D=qspec",children:"System Flags and Qualifiers"}),"  This parameter allows the specification of qualifiers in the following format: ",(0,n.jsxs)(s.em,{children:["/[no]",(0,n.jsxs)(s.qualifier,{children:["[=",(0,n.jsxs)(s.value,{children:["][/[no]",(0,n.jsxs)(s.qualifier,{children:["[=",(0,n.jsx)(s.value,{children:"]]*"})]})]})]})]}),"  Example: ",(0,n.jsx)(s.strong,{children:"/noload/norecursive"}),"  The first four qualifiers below (",(0,n.jsx)(s.strong,{children:"debug"}),", ",(0,n.jsx)(s.strong,{children:"load"}),", ",(0,n.jsx)(s.strong,{children:"run"}),", and ",(0,n.jsx)(s.strong,{children:"recursive"}),") are negatable Booleans, which can be enabled by explicitly specifying the qualifier name (e.g. ",(0,n.jsx)(s.strong,{children:"/debug"}),") or disabled by either adding the prefix ",(0,n.jsx)(s.strong,{children:"no"}),", or by adding the value zero ",(0,n.jsx)(s.strong,{children:"=0"}),", as in the following respective examples: ",(0,n.jsx)(s.strong,{children:"/nodebug"})," OR ",(0,n.jsx)(s.strong,{children:"/debug=0"})," ",(0,n.jsx)(s.strong,{children:"/debug"}),": Run in debug mode, which causes an execution ",(0,n.jsx)(s.em,{children:"BREAK"})," if a UnitTest fails. Default is ",(0,n.jsx)(s.strong,{children:"/nodebug"}),". ",(0,n.jsx)(s.strong,{children:"/load"}),": Load the corresponding UnitTest classes for the specified ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"testspec"})})," parameter. Default is ",(0,n.jsx)(s.strong,{children:"/load"}),". If both the ",(0,n.jsx)(s.strong,{children:"/load"})," and ",(0,n.jsx)(s.strong,{children:"/run"})," qualifiers are enabled (true), then all loaded classes, routines, and CSP files will be deleted after all UnitTests have finished running. To prevent the post-deletion task, invoke the DebugLoadTestSuite method to first load all appropriate UnitTest classes and then invoke the ",(0,n.jsx)(s.strong,{children:"DebugRunTestCase"})," method to actually run the corresponding UnitTests. ",(0,n.jsx)(s.strong,{children:"/run"}),": Run all UnitTests specified by the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"testsuite"})})," parameter. Use the ",(0,n.jsx)(s.strong,{children:"/norun"})," qualifier if you only want to load, but not run, all corresponding UnitTest classes specified by the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"testsuite"})})," parameter. Default is ",(0,n.jsx)(s.strong,{children:"/run"}),". ",(0,n.jsx)(s.strong,{children:"/recursive"}),": Recurse the specified directory when loading UnitTest classes. Default is ",(0,n.jsx)(s.strong,{children:"/recursive"}),". ",(0,n.jsx)(s.strong,{children:"/display=all"}),": Display extended information when loading and running UnitTest classes and tests. ",(0,n.jsx)(s.strong,{children:"/display=none"})," displays limited information. Default is ",(0,n.jsx)(s.strong,{children:"/display=all"}),". ",(0,n.jsx)(s.strong,{children:"/autoload"}),": Automatically load sub-directories with the given name when loading test classes. Default is ",(0,n.jsx)(s.strong,{children:"/autoload=_autoload"}),". When this qualifier is specified, classes are loaded from the given sub-directory of the current directory and its ancestors. This makes it possible to use a class in multiple test suites without copying it to each of their descendant directories. ",(0,n.jsx)(s.strong,{children:"/nodelete"}),": Do not delete loaded classes when the UnitTest has finished running."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"userparam"})}),"\n",(0,n.jsx)(s.p,{children:"An arbitrary argument passed in by the caller, which allows for the storage of additional information, like platform, product version, etc.  If this parameter is passed a string, then it becomes the value for the UserParam property.  If this parameter is passed an array, then the first level subscripts and their values are used to populate the UserFields array property.  This information can be later cross-referenced in the result."}),"\n",(0,n.jsx)(s.h3,{id:"examples",children:"Examples:"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:'// --- RunTest(...) Examples --- // --- Setup --- set ^UnitTestRoot="C:\\UnitTests\\" // --- UnitTest Directories --- // C:\\UnitTests\\SQL\\Embedded // C:\\UnitTests\\SQL\\Dynamic // C:\\UnitTests\\SQL\\ODBC // C:\\UnitTests\\SQL\\JDBC // --- Passing \'testspec\' as a String --- set tSC=##class(%UnitTest.Manager).RunTest("SQL\\Embedded,SQL\\Dynamic") // --- Passing \'testspec\' as an Array --- set utSpecs("SQL\\Embedded")="" // Alternatively: set utSpecs(1)="SQL\\Embedded" set utSpecs("SQL\\Dynamic")="" // set utSpecs(2)="SQL\\Dynamic" set tSC=##class(%UnitTest.Manager).RunTest(.utSpecs) // --- Passing \'testspec\' as a Global --- set ^utSpecs("SQL\\Embedded")="" // Alternatively: set ^utSpecs(1)="SQL\\Embedded" set ^utSpecs("SQL\\Dynamic")="" // set ^utSpecs(2)="SQL\\Dynamic" set tSC=##class(%UnitTest.Manager).RunTest("^utSpecs") // --- Passing \'testspec\' as an Array (Complex Example) --- set utSpecs("SQL\\Embedded:SQL.Embedded:Test1;:Test2")="" set utSpecs("SQL\\Dynamic::Test1;:Test2")="" set tSC=##class(%UnitTest.Manager).RunTest(.utSpecs,"/recursive=0") // --- Passing \'testspec\' as a String (With Exclusions) --- set tSC=##class(%UnitTest.Manager).RunTest("SQL,-SQL\\ODBC,-SQL\\JDBC")'})," ",(0,n.jsx)(s.strong,{children:"NOTE"}),(0,n.jsx)(s.br,{}),"\nIf any of your code needs to run in the ",(0,n.jsx)(s.strong,{children:"%SYS"})," namespace, change to the ",(0,n.jsx)(s.strong,{children:"%SYS"}),' namespace to run that specific code (e.g. ZN "%SYS"), then return to the original namespace for continued code processing.']}),"\n",(0,n.jsx)(s.h3,{id:"debugloadtestsuite",children:"DebugLoadTestSuite"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DebugLoadTestSuite(testsuite As %String = "", qspec As %String = "") As %Status\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This method is used to load, but not run, all corresponding UnitTest classes specified by the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"testsuite"})})," parameter.  Once the UnitTest classes are loaded by this method, the DebugRunTestCase method can be invoked to run all of the corresponding UnitTests over and over again, without having to reload the UnitTest classes.  Developers should use the DebugLoadTestSuite method in conjunction with the DebugRunTestCase method to load all UnitTest classes once, and then run all corresponding UnitTests as often as necessary during the development, debugging and testing process."]}),"\n",(0,n.jsx)(s.h3,{id:"debugruntestcase",children:"DebugRunTestCase"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DebugRunTestCase(testsuite As %String = "", testcase As %String = "", qspec As %String = "", testmethod As %String = "", ByRef userparam) As %Status\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This method is used to run all UnitTests that were previously loaded by the DebugLoadTestSuite method.  Both the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"testsuite"})})," and ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"testcase"})})," parameters are required.  The ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"testcase"})})," parameter is in the form ",(0,n.jsx)(s.em,{children:"package.class"})," and the ",(0,n.jsx)(s.em,{children:"testmethod"})," parameter is a method within the UnitTest class.  Developers should refer to the DebugLoadTestSuite method to see how these two methods are used in conjunction during the development, debugging and testing process."]}),"\n",(0,n.jsx)(s.h3,{id:"purgelog",children:"PurgeLog"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PurgeLog() As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"purgeresult",children:"PurgeResult"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PurgeResult() As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"wipenamespace",children:"WipeNamespace"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod WipeNamespace()\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method will wipe all data from this Namespace in addition to all PPG information. This method is useful in cleaning a Namespace before running all UnitTests.  This should ",(0,n.jsx)(s.strong,{children:"never"})," be invoked on a production system!"]}),"\n",(0,n.jsx)(s.h3,{id:"runtestsuites",children:"RunTestSuites"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RunTestSuites(%testspec As %String, %qspec, ByRef %userparam) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:'This is a private and internal method that is invoked via the RunTest method, but requires a value for each of its three parameters, be it the empty-string ("") or otherwise.'}),"\n",(0,n.jsx)(s.h3,{id:"realruntestsuites",children:"realRunTestSuites"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod realRunTestSuites(ByRef testspec As %String, qspec, ByRef userparam) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This is a private and internal method that is invoked via the RunTestSuites method in order to push an extra frame on the stack so that variables can be _new_ed before performing the bulk of the tasks associated with the RunTest method."}),"\n",(0,n.jsx)(s.h3,{id:"addsubdirectorynames",children:"AddSubDirectoryNames"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AddSubDirectoryNames(root As %String, testsuite As %String) As %String [ Private ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"lastsubdirectoryname",children:"LastSubDirectoryName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LastSubDirectoryName(dir As %String) As %String [ Private ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"getsubdirectories",children:"GetSubDirectories"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetSubDirectories(root, topdir As %String, level As %Integer, suite As %String, ByRef subdirs As %String, qspec As %String, ByRef testskip As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"runonetestsuite",children:"RunOneTestSuite"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method RunOneTestSuite(dir As %String, suite As %String, testspec As %String, qstruct)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"getloadedclass",children:"getLoadedClass"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod getLoadedClass(ByRef classes, ByRef skipClasses) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method will return all of classes that are loaded in the current namespace into the ",(0,n.jsx)(s.em,{children:"classes()"})," array..."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Invocation:"}),"  This method can be invoked in the following ways:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"ObjectScript: ##class(%UnitTest.Manager).getLoadedClass(...)"}),"\n",(0,n.jsx)(s.li,{children:"SQL: N/A"}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"classes"})}),"\n",(0,n.jsx)(s.p,{children:"A Pass By Reference array of classes that are loaded in the current namespace. This array will be populated with classes in the following format:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:'classes=# of classes    classes(<class-name>.cls)=""     NOTE: The <class-name> and suffix (.cls) are case-sensitive         \n'})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"skipClasses"})}),"\n",(0,n.jsx)(s.p,{children:"A Pass By Reference array of classes that should not be added to the 'classes()' array if found loaded in the current namespace. This array has the following format:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:'skipClasses(<class-name>.cls)=""     NOTE: The <class-name> and suffix (.cls) are case-sensitive         \n'})}),"\n",(0,n.jsx)(s.h3,{id:"example-1",children:"Example:"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.code,{children:'set skipClasses("Sample.Person.cls")="" set skipClasses("MRP.Test.cls")=""'})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Return Value:"}),"  The status from the invocation of this method"]}),"\n",(0,n.jsx)(s.h3,{id:"deleteloadedclasses",children:"deleteLoadedClasses"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method deleteLoadedClasses(ByRef classLoaded, ByRef autoloadArray, ByRef utLoadedArray) As %Status [ PublicList = SQLCODE ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method deletes all of the classes provided in the following parameter arrays:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"classLoaded()"}),"\n",(0,n.jsx)(s.li,{children:"autoloadArray()"}),"\n",(0,n.jsx)(s.li,{children:"utLoadedArray()"}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Invocation:"}),"  This method can be invoked in the following ways:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"ObjectScript: ..deleteLoadedClasses(...)"}),"\n",(0,n.jsx)(s.li,{children:"SQL: N/A"}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"classLoaded"})}),"\n",(0,n.jsx)(s.p,{children:"A Pass By Reference array of classes that have been loaded into the namespace by the invocation of a given UnitTest"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"autoloadArray"})}),"\n",(0,n.jsx)(s.p,{children:"A Pass By Reference array of classes that have been auto-loaded into the namespace by the invocation of a given UnitTest"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"utLoadedArray"})}),"\n",(0,n.jsx)(s.p,{children:"A Pass By Reference array of classes that have been loaded into the namespace by the UnitTest during its invocation"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Return Value:"}),"  The status from the invocation of this method"]}),"\n",(0,n.jsx)(s.h3,{id:"runonetestcase",children:"RunOneTestCase"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Method RunOneTestCase(suite As %String, class As %String, ByRef test As %String = "")\n'})}),"\n",(0,n.jsx)(s.h3,{id:"gettestmethods",children:"getTestMethods"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod getTestMethods(class As %String, ByRef methods) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This internal method spins through all of the methods defined for the given ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"class"})})," parameter, which start with the prefix ",(0,n.jsx)(s.strong,{children:"Test"}),", and records/returns this information in the Pass By Reference (PBR) parameter ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"methods"})})," as an array sorted/collated in Canonical Order:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"methods=# of Methods    methods(1..n)=Method Name \n"})}),"\n",(0,n.jsx)(s.h3,{id:"getcurrentpublicvariableset",children:"GetCurrentPublicVariableSet"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetCurrentPublicVariableSet(ByRef GetCurrentPublicVariableSetset) [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"subtractvariableset",children:"SubtractVariableSet"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SubtractVariableSet(ByRef c, ByRef a, ByRef b) [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"validatevariables",children:"ValidateVariables"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method ValidateVariables(ByRef preTestVars, ByRef postTestVars) [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"returnallowedpublicvariables",children:"ReturnAllowedPublicVariables"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ReturnAllowedPublicVariables(ByRef prefix As %String) As %List [ Internal, Private ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This internal method returns a $LIST(...) of allowable public variables, in addition to the Pass By Reference (PBR) parameter ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"prefix"})})," as an as array."]}),"\n",(0,n.jsx)(s.h3,{id:"record",children:"Record"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Record(ByRef procVals As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This ",(0,n.jsx)(s.em,{children:"original"})," internal method is retained for backward compatibility..."]}),"\n",(0,n.jsx)(s.h3,{id:"recordprocvals",children:"RecordProcVals"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method RecordProcVals(ByRef procVals As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method records all of the current Process Values within the Pass By Reference (PBR) array parameter ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"procVals"})}),"..."]}),"\n",(0,n.jsx)(s.h3,{id:"cleanup",children:"Cleanup"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Cleanup(ByRef procVals As %String, kill = 0) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This ",(0,n.jsx)(s.em,{children:"original"})," internal method is retained for backward compatibility..."]}),"\n",(0,n.jsx)(s.h3,{id:"cleanupallprocvals",children:"CleanupAllProcVals"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method CleanupAllProcVals(ByRef procVals As %String, kill = 0) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This internal method will cleanup all General & Specific Process Values that have changed during the invocation of methods within this class, report any differences, and restore those Process Values that have changed to their original value..."}),"\n",(0,n.jsx)(s.h3,{id:"cleanupgeneralprocvals",children:"CleanupGeneralProcVals"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method CleanupGeneralProcVals(checkLocks = 1) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This internal method will cleanup all General Process Values that have changed during the invocation of methods within this class, report any differences, and restore those Process Values that have changed to their original value..."}),"\n",(0,n.jsx)(s.h3,{id:"cleanupspecificprocvals",children:"CleanupSpecificProcVals"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method CleanupSpecificProcVals(ByRef procVals As %String, kill = 0) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This internal method will cleanup all Specific Process Values that have changed after the invocation of each UnitTest, which is handled within the RunOneTestCase method, via the following steps:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Before any UnitTest invocations, Record/Collect the Process Values at the beginning of the RunOneTestCase method by calling the RecordProcVals method"}),"\n",(0,n.jsx)(s.li,{children:"Compare all Process Values recorded/collected within the array passed to the RecordProcVals method with their current Process Values\nFor each recorded value that differs from its current value, perform the following steps: Create an $$$ERROR($$$GeneralError,) of the Process Value differences"}),"\n",(0,n.jsx)(s.li,{children:"Restore the Process Value to its originally recorded value"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"saveresult",children:"SaveResult"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method SaveResult(duration, ByRef userparam)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"logstatebegin",children:"LogStateBegin"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method LogStateBegin(testsuite, testcase, testmethod)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"logstateend",children:"LogStateEnd"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method LogStateEnd(duration) As %Integer\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method records the end of a UnitTest and returns the status of its invocation."}),"\n",(0,n.jsx)(s.h3,{id:"getteststate",children:"GetTestState"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetTestState(level) As %String\n"})}),"\n",(0,n.jsx)(s.h3,{id:"logstatestatus",children:"LogStateStatus"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method LogStateStatus(status, action)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"logassert",children:"LogAssert"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method LogAssert(success, action, description, extra, location)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"logmessage",children:"LogMessage"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method LogMessage(message, location)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"printline",children:"PrintLine"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method PrintLine(text, level = 0)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"printerrorline",children:"PrintErrorLine"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method PrintErrorLine(text, extra)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"printurl",children:"PrintURL"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method PrintURL()\n"})}),"\n",(0,n.jsx)(s.h3,{id:"issuccess",children:"IsSuccess"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method IsSuccess(suite, case, method, action) As %Boolean\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method is ",(0,n.jsx)(s.strong,{children:"obsolete"}),"; Use the GetTestStatus method instead!"]}),"\n",(0,n.jsx)(s.h3,{id:"getteststatus",children:"GetTestStatus"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetTestStatus(suite, case, method, action) As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method returns result for a given ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"suite"})}),", ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"case"})}),", ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"method"})}),", and ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"action"})}),"."]}),"\n",(0,n.jsx)(s.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnNew(initvalue As %RawString) As %Status [ Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"acquiresentrylock",children:"AcquireSentryLock"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method AcquireSentryLock() [ Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"releasesentrylock",children:"ReleaseSentryLock"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method ReleaseSentryLock() [ Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"doesholdsentrylock",children:"DoesHoldSentryLock"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method DoesHoldSentryLock() As %Boolean [ Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status [ Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"root",children:"Root"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Root() As %String\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method returns the root directory of the UnitTest hierarchy, which is typically the value stored in the following global: ",(0,n.jsx)(s.strong,{children:"^UnitTestRoot"})]}),"\n",(0,n.jsx)(s.h3,{id:"autoload",children:"AutoLoad"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AutoLoad(dir As %String, sub As %String, ByRef classArray As %String, qstruct As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method imports the contents of each sub-directory ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"sub"})})," for each directory specified by the Root method down to the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"dir"})})," parameter, and return all of the corresponding classes in the Pass By Reference (PBR) array parameter ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"classArray"})}),".  This method is part of the implementation for the ",(0,n.jsx)(s.strong,{children:"/autoload"})," qualifier."]}),"\n",(0,n.jsx)(s.h3,{id:"convertlogdata",children:"ConvertLogData"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ConvertLogData(pLogIndex, pResultNamespace = "", pMachine = "", pConfiguration = "", pVersion = "", pUserParam = "", pKillLog = 0) As %Status\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This method converts old format data in the ",(0,n.jsx)(s.strong,{children:"^UnitTestLog"})," global to the new format stored in the ",(0,n.jsx)(s.strong,{children:"^UnitTest.Result"})," global."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"pLogIndex"})}),"\n",(0,n.jsxs)(s.p,{children:["This is the test instance index in the ",(0,n.jsx)(s.strong,{children:"^UnitTestLog"})," global."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"pResultNamespace"})}),"\n",(0,n.jsxs)(s.p,{children:["This is the namespace for the ",(0,n.jsx)(s.strong,{children:"^UnitTest.Result"})," global."]}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"pMachine"}),", ",(0,n.jsx)(s.em,{children:"pConfiguration"}),", ",(0,n.jsx)(s.em,{children:"pVersion"}),", ",(0,n.jsx)(s.em,{children:"pUserParam"})]}),"\n",(0,n.jsxs)(s.p,{children:["The new information collected in the ",(0,n.jsx)(s.strong,{children:"^UnitTest.Result"})," global, but no longer in the ",(0,n.jsx)(s.strong,{children:"^UnitTestLog"})," global."]}),"\n",(0,n.jsxs)(s.p,{children:["This information can be provided manually when doing the conversion.",(0,n.jsx)(s.br,{}),"\nThe ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"pUserParam"})})," parameter is used the same way as the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"userparam"})})," parameter of the RunTest method.  The top node of the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"pUserParam"})})," parameter becomes the value of the UserParam property, and the first level subscripts, along with their values, are used to populate the UserFields array property."]}),"\n",(0,n.jsx)(s.h3,{id:"convertstatus",children:"ConvertStatus"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ConvertStatus(pIndex, pNamespace) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method updates the status at each level recursively based on the status of the children.  If the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"pIndex"})}),' parameter is omitted or passed the empty-string (""), then all of the nodes within the ',(0,n.jsx)(s.strong,{children:"^|pNamespace|UnitTest.Result(...)"})," global will be converted."]}),"\n",(0,n.jsx)(s.h3,{id:"setrecursivestatus",children:"setRecursiveStatus"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod setRecursiveStatus(pNamespace, pIndex, pSuite, pCase, pMethod) As %Integer\n"})}),"\n",(0,n.jsx)(s.h3,{id:"checknamestructure",children:"CheckNameStructure"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method CheckNameStructure(dir As %String) [ Internal, Private ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"InterSystems INTERNAL USE ONLY!"}),"  This method checks UnitTest file names against internal source control requirements.  You should not make direct use of this method within your applications.  There is no guarantee made about either the behavior or future operation of this method!"]}),"\n",(0,n.jsx)(s.h3,{id:"recordnamespace",children:"RecordNamespace"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method RecordNamespace() As %Status [ Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This is a private and internal method that collects and records all of the globals and routines in the current namespace so that a cleanup can be performed after the UnitTest finished running."}),"\n",(0,n.jsx)(s.h3,{id:"cleannamespace",children:"CleanNamespace"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method CleanNamespace() As %Status [ Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This is a private and internal method that cleans the current namespace after the UnitTest finished running.  This method will not remove any globals or routines that were recorded during the invocation of the RecordNamespace method."}),"\n",(0,n.jsx)(s.h3,{id:"runtestsfromfilelist",children:"RunTestsFromFileList"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod RunTestsFromFileList(globalName As %String = "", fileName As %String = "", qspec As %String, ByRef userparam, sections As %String = "") As %Status\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This method runs the UnitTests that are listed within the specified ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"fileName"})})," parameter. The tests within this file have the following format:"]}),"\n",(0,n.jsx)(s.p,{children:"[# | //] | ["}),(0,n.jsxs)(s.section,{children:["#] | [-]utPath",(0,n.jsx)(s.p,{}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"# | //"}),(0,n.jsxs)(s.th,{children:[(0,n.jsx)(s.em,{children:"Optional"})," - Specifies a comment line"]})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:["[",(0,n.jsx)(s.section,{children:"#]"})]}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.em,{children:"Optional"})," - Specifies the beginning of a section of tests. For example [1] or [15]"]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"-"}),(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.em,{children:"Optional"})," - Specifies that the utPath will be excluded from running"]})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"utPath"}),(0,n.jsx)(s.td,{children:"The directory path of the UnitTest to run, or a path prefix (e.g. SQL\\SQLStats) to run all UnitTests within this directory and all sub-directories"})]})]})]}),"\n",(0,n.jsx)(s.h3,{id:"example-2",children:"Example:"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.code,{children:'utFile_with_exclusions.txt // This file contains the following two lists: // 1) A list of UnitTests to exclude from running // 2) A list of UnitTests to run // List all of the excluded UnitTest Paths (utPath) first: // NOTE: The negative-sign (-utPath) is the exclusion indicator! -SQL\\dynamicSQL\\DocBookTests -SQL\\dynamicSQL\\privilege -Classes\\Atelier -Classes\\Debugger // List all of the UnitTest Paths (utPath) to run last: SQL\\dynamicSQL Classes Invocation USER>set tSC=##class(%UnitTest.Manager).RunTestsFromFileList(,"C:\\ut\\SQLStats_with_exceptions.txt")'})}),"\n",(0,n.jsx)(s.p,{children:"globalName"}),"\n",(0,n.jsxs)(s.p,{children:["A optional global name, when specified, will be populated with each utPath from the given ",(0,n.jsx)(s.em,{children:"fileName"}),", which is then passed as the first parameter to the RunTest(",(0,n.jsx)(s.em,{children:"testspec"}),",...) method for execution. If specified, the value passed to the ",(0,n.jsx)(s.em,{children:"globalName"})," parameters must have the following format:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:'  INPUT:   "^utGlobal"           // Where _^utGlobal_ is a valid IRIS Global Name      OUTPUT:  ^utGlobal(utPath)=""  // e.g.  ^utGlobal("SQL\\dynamicSQL")=""                                              ^utGlobal("Classes")=""   \n'})}),"\n",(0,n.jsx)(s.p,{children:"fileName"}),"\n",(0,n.jsx)(s.p,{children:"A file path and name, which contains lines of tests in the following format, as specified above: [# | //][-]utPath"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"qspec"})}),"\n",(0,n.jsxs)(s.p,{children:["This parameter has a name/term that is used interchangeably with the term ",(0,n.jsx)(s.strong,{children:"qualifier"}),", and a value that is a concatenated list of supported system flags and qualifiers documented on the following page: ",(0,n.jsx)(s.a,{href:"https://docs.intersystems.com/irislatest/csp/docbook/Doc.Results.cls?docs%5Bquery%5D=qspec",children:"System Flags and Qualifiers"}),"  This parameter allows the specification of qualifiers in the following format: ",(0,n.jsxs)(s.em,{children:["/[no]",(0,n.jsxs)(s.qualifier,{children:["[=",(0,n.jsxs)(s.value,{children:["][/[no]",(0,n.jsxs)(s.qualifier,{children:["[=",(0,n.jsx)(s.value,{children:"]]*"})]})]})]})]}),"  Example: ",(0,n.jsx)(s.strong,{children:"/noload/norecursive"}),"  The first four qualifiers below (",(0,n.jsx)(s.strong,{children:"debug"}),", ",(0,n.jsx)(s.strong,{children:"load"}),", ",(0,n.jsx)(s.strong,{children:"run"}),", and ",(0,n.jsx)(s.strong,{children:"recursive"}),") are negatable Booleans, which can be enabled by explicitly specifying the qualifier name (e.g. ",(0,n.jsx)(s.strong,{children:"/debug"}),") or disabled by either adding the prefix ",(0,n.jsx)(s.strong,{children:"no"}),", or by adding the value zero ",(0,n.jsx)(s.strong,{children:"=0"}),", as in the following respective examples: ",(0,n.jsx)(s.strong,{children:"/nodebug"})," OR ",(0,n.jsx)(s.strong,{children:"/debug=0"})," ",(0,n.jsx)(s.strong,{children:"/debug"}),": Run in debug mode, which causes an execution ",(0,n.jsx)(s.em,{children:"BREAK"})," if a UnitTest fails. Default is ",(0,n.jsx)(s.strong,{children:"/nodebug"}),". ",(0,n.jsx)(s.strong,{children:"/load"}),": Load the corresponding UnitTest classes for the specified ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"testspec"})})," parameter. Default is ",(0,n.jsx)(s.strong,{children:"/load"}),". If both the ",(0,n.jsx)(s.strong,{children:"/load"})," and ",(0,n.jsx)(s.strong,{children:"/run"})," qualifiers are enabled (true), then all loaded classes, routines, and CSP files will be deleted after all UnitTests have finished running. To prevent the post-deletion task, invoke the DebugLoadTestSuite method to first load all appropriate UnitTest classes and then invoke the ",(0,n.jsx)(s.strong,{children:"DebugRunTestCase"})," method to actually run the corresponding UnitTests. ",(0,n.jsx)(s.strong,{children:"/run"}),": Run all UnitTests specified by the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"testsuite"})})," parameter. Use the ",(0,n.jsx)(s.strong,{children:"/norun"})," qualifier if you only want to load, but not run, all corresponding UnitTest classes specified by the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"testsuite"})})," parameter. Default is ",(0,n.jsx)(s.strong,{children:"/run"}),". ",(0,n.jsx)(s.strong,{children:"/recursive"}),": Recurse the specified directory when loading UnitTest classes. Default is ",(0,n.jsx)(s.strong,{children:"/recursive"}),". ",(0,n.jsx)(s.strong,{children:"/display=all"}),": Display extended information when loading and running UnitTest classes and tests. ",(0,n.jsx)(s.strong,{children:"/display=none"})," displays limited information. Default is ",(0,n.jsx)(s.strong,{children:"/display=all"}),". ",(0,n.jsx)(s.strong,{children:"/autoload"}),": Automatically load sub-directories with the given name when loading test classes. Default is ",(0,n.jsx)(s.strong,{children:"/autoload=_autoload"}),". When this qualifier is specified, classes are loaded from the given sub-directory of the current directory and its ancestors. This makes it possible to use a class in multiple test suites without copying it to each of their descendant directories. ",(0,n.jsx)(s.strong,{children:"/nodelete"}),": Do not delete loaded classes when the UnitTest has finished running."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"userparam"})}),"\n",(0,n.jsx)(s.p,{children:"An arbitrary argument passed in by the caller, which allows for the storage of additional information, like platform, product version, etc.  If this parameter is passed a string, then it becomes the value for the UserParam property.  If this parameter is passed an array, then the first level subscripts and their values are used to populate the UserFields array property.  This information can be later cross-referenced in the result."}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"sections"})}),"\n",(0,n.jsx)(s.p,{children:'An options, comma-delimited list of file sections this call should test. This will not run all the tests listed in the file, but only the tests within the specified [section#] within the file. For example, suppose you file has sections [1], [2], [3], [4], [5], and [6]. If sections="2,4,6" only tests within sections [2], [4], and [6] will be run.'}),"\n",(0,n.jsx)(s.h3,{id:"addtoexcludeglobal",children:"addToExcludeGlobal"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod addToExcludeGlobal(excludeUTPath As %String = "") As %Status\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This method adds the given ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"excludeUTPath"})})," to the exclusion global:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:'^||UnitTest.exclude(0,...)                        // Master Map    ^||UnitTest.exclude("x",$$$UPPER(excludeUTPath))  // Index Map \n'})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Invocation:"}),"  This method can be invoked in the following ways:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"ObjectScript: ##class(%UnitTest.Manager).addToExcludeGlobal(...)"}),"\n",(0,n.jsx)(s.li,{children:"SQL: N/A"}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"excludeUTPath"})}),"\n",(0,n.jsx)(s.p,{children:"The directory path of the UnitTest to exclude from running, or a path prefix (e.g. SQL\\SQLStats) to exclude all UnitTests within this directory and all sub-directories from running"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Return Value:"}),"  The status of this method's invocation;  Otherwise, return an error message if an error occurred"]}),"\n",(0,n.jsx)(s.h3,{id:"onaftersaveresult",children:"OnAfterSaveResult"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method OnAfterSaveResult(ByRef userparam)\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method is called after the invocation of the SaveResult method to perform any result aggregation tasks required by subtasks."}),"\n",(0,n.jsx)(s.h3,{id:"onbeforealltests",children:"OnBeforeAllTests"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OnBeforeAllTests(manager As %UnitTest.Manager, dir As %String, ByRef qstruct, ByRef userparam) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method is called before any UnitTests are run. If an error status is returned, then no UnitTests are run."}),"\n",(0,n.jsx)(s.h3,{id:"onafteralltests",children:"OnAfterAllTests"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OnAfterAllTests(manager As %UnitTest.Manager, dir As %String, ByRef qstruct, ByRef userparam) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method is called after all UnitTests are run. If an error status is returned, then it is logged."}),"\n",(0,n.jsx)(s.h3,{id:"onbeforeautoload",children:"OnBeforeAutoLoad"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method OnBeforeAutoLoad(dir As %String, suite As %String, testspec As %String, ByRef qstruct) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method is called before autoload, which occurs before each test suite is run. If an error status is returned, then it is logged and the test suite is not run."}),"\n",(0,n.jsx)(s.h3,{id:"onbeforetestsuite",children:"OnBeforeTestSuite"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method OnBeforeTestSuite(dir As %String, suite As %String, testspec As %String, ByRef qstruct) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method is called before a test suite is run. If an error status is returned, it is logged and the test suite is not run. This is called after autoload."}),"\n",(0,n.jsx)(s.h3,{id:"onaftertestsuite",children:"OnAfterTestSuite"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method OnAfterTestSuite(dir As %String, suite As %String, testspec As %String, ByRef qstruct) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method is called after a test suite is run. If an error status is returned, it is logged."}),"\n",(0,n.jsx)(s.h3,{id:"onbeforetestcase",children:"OnBeforeTestCase"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method OnBeforeTestCase(suite As %String, class As %String, ByRef testcase As %UnitTest.TestCase) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method is called before a test case (class extending %UnitTest.TestCase) is run. If an error status is returned, it is logged and the test case is not run."}),"\n",(0,n.jsx)(s.h3,{id:"onaftertestcase",children:"OnAfterTestCase"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method OnAfterTestCase(suite As %String, class As %String, ByRef testcase As %UnitTest.TestCase) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method is called after a test case (class extending %UnitTest.TestCase) is run. If an error status is returned, it is logged."}),"\n",(0,n.jsx)(s.h3,{id:"onbeforeonetest",children:"OnBeforeOneTest"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method OnBeforeOneTest(suite As %String, class As %String, method As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:'This method is called before a test (method starting with "Test" in a class extending %UnitTest.TestCase) is run. If an error status is returned, it is logged and the test is not run.'}),"\n",(0,n.jsx)(s.h3,{id:"onafteronetest",children:"OnAfterOneTest"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method OnAfterOneTest(suite As %String, class As %String, method As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:'This method is called after a test (method starting with "Test" in a class extending %UnitTest.TestCase) is run. If an error status is returned, it is logged.'}),"\n",(0,n.jsx)(s.h3,{id:"beforeruntest",children:"BeforeRunTest"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod BeforeRunTest(Test As %String) [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"afterruntest",children:"AfterRunTest"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AfterRunTest(Test As %String) [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"updateoptions",children:"UpdateOptions"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UpdateOptions() [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"restoreoptions",children:"RestoreOptions"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RestoreOptions() [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"reserveresultid",children:"ReserveResultId"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method ReserveResultId() [ Internal, Private ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This is a private and internal method which reserves the UnitTest.Result ID from the ",(0,n.jsx)(s.strong,{children:"^|$NAMESPACE|UnitTest.Result"})," global. Test suites run under the /parallel option use this value to directly write back their results."]}),"\n",(0,n.jsx)(s.h3,{id:"isparallel",children:"IsParallel"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method IsParallel() As %Boolean [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This is a private and internal method that returns a Boolean value {0|1} which indicates if this %UnitTest.Manager is configured to run suites in parallel?"}),"\n",(0,n.jsx)(s.h3,{id:"isparallelworker",children:"IsParallelWorker"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method IsParallelWorker() As %Boolean [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This is a private and internal method that returns a Boolean value {0|1} which indicates if this %UnitTest.Manager is inside a worker job running suites in parallel?"}),"\n",(0,n.jsx)(s.h3,{id:"queuesuiteforparallel",children:"QueueSuiteForParallel"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method QueueSuiteForParallel(suite, qspec, userparam) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This is a private and internal method that queues ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"suite"})})," for parallel execution. The parameters ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"qspec"})})," and ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"userparam"})})," are similar to those in the RunTestSuites method, except that the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"userparam"})})," parameter will not be Passed By Refence (PBR) into the worker job."]}),"\n",(0,n.jsx)(s.h3,{id:"waitforallsuitesforparallel",children:"WaitForAllSuitesForParallel"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method WaitForAllSuitesForParallel(ByRef status) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This is a private and internal method that waits for all suites queued by QueueSuiteForParallel method to complete. The %UnitTest.Manager expects failed suites to be collected in the Pass By Reference (PBR) array parameter ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"status"})})," after the suites have finished running. The ",(0,n.jsx)(s.strong,{children:"^UnitTest.Result"})," global is scanned for failed suites, which are added as subscripts to the ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.em,{children:"status"})})," parameter."]}),"\n",(0,n.jsx)(s.h3,{id:"createswarmreviewssl",children:"CreateSwarmReviewSSL"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method CreateSwarmReviewSSL() As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"postswarmreviewcomment",children:"PostSwarmReviewComment"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method PostSwarmReviewComment(comment As %String, ignoreCounter As %Boolean = 0) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"deleteswarmreviewssl",children:"DeleteSwarmReviewSSL"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method DeleteSwarmReviewSSL() As %Status [ Internal, Private ]\n"})}),"\n"]})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>a});var n=t(96540);const r={},i=n.createContext(r);function l(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);