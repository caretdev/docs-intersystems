"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[23734],{52251:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>c,frontMatter:()=>i,toc:()=>a});var s=n(74848),r=n(28453);const i={pagination_prev:null,pagination_next:null},l="%SQL.StatementResult",a=[{value:"Parameters",id:"parameters",level:2},{value:"%statementmetadata;",id:"statementmetadata",level:3},{value:"%statementmetadataext;",id:"statementmetadataext",level:3},{value:"%statementobjects;",id:"statementobjects",level:3},{value:"%statementparameters;",id:"statementparameters",level:3},{value:"%statementactual;",id:"statementactual",level:3},{value:"Properties",id:"properties",level:2},{value:"%StatementType",id:"statementtype",level:3},{value:"%StatementTypeName",id:"statementtypename",level:3},{value:"%Message",id:"message",level:3},{value:"%ROWCOUNT",id:"rowcount",level:3},{value:"%ROWID",id:"rowid",level:3},{value:"%SQLCODE",id:"sqlcode",level:3},{value:"%CurrentResult",id:"currentresult",level:3},{value:"%OutputColumnCount",id:"outputcolumncount",level:3},{value:"%OutputValues",id:"outputvalues",level:3},{value:"%ResultColumnCount",id:"resultcolumncount",level:3},{value:"%routine",id:"routine",level:3},{value:"%ProcCursor",id:"proccursor",level:3},{value:"Methods",id:"methods",level:2},{value:"%MoreResults",id:"moreresults",level:3},{value:"%Next",id:"next",level:3},{value:"%GetRow",id:"getrow",level:3},{value:"%GetRows",id:"getrows",level:3},{value:"%NextOutputValue",id:"nextoutputvalue",level:3},{value:"%NextResult",id:"nextresult",level:3},{value:"%Get",id:"get",level:3},{value:"%GetData",id:"getdata",level:3},{value:"%GetMetadata",id:"getmetadata",level:3},{value:"%DispatchGetProperty",id:"dispatchgetproperty",level:3},{value:"%DispatchMethod",id:"dispatchmethod",level:3},{value:"%DispatchSetProperty",id:"dispatchsetproperty",level:3},{value:"%DisplayFormatted",id:"displayformatted",level:3},{value:"%Print",id:"print",level:3},{value:"%Display",id:"display",level:3},{value:"%AddToSaveSet",id:"addtosaveset",level:3},{value:"%ConstructClone",id:"constructclone",level:3},{value:"%NormalizeObject",id:"normalizeobject",level:3},{value:"%RemoveFromSaveSet",id:"removefromsaveset",level:3},{value:"%SerializeObject",id:"serializeobject",level:3},{value:"%ValidateObject",id:"validateobject",level:3}];function d(e){const t={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"sqlstatementresult",children:"%SQL.StatementResult"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %SQL.StatementResult Extends %Library.RegisteredObject [ System = 2 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"For details on using this class"}),", see ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+%25SQL.Statement",children:"Using Dynamic SQL"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"%SQL.StatementResult is the result descriptor class, returned by the %Execute() and %ExecDirect() methods of %SQL.Statement. Use this class to examine the results of the query."}),"\n",(0,s.jsx)(t.p,{children:"The content of a statement result object varies depending on the statement type and whether or not the statement was successfully executed. The interface to the result object is the same for all statement types but the content of the result object varies."}),"\n",(0,s.jsx)(t.p,{children:"When retrieving results, first check for successful execution by examining %SQLCODE. If %SQLCODE is greater than or equal to zero, then the statement was successfully executed. Otherwise, the value of %SQLCODE contains the error code and the %Message property might contain more information about the error. See %SQLCODE for additional comments."}),"\n",(0,s.jsx)(t.p,{children:"Many statements affect some number of rows. The number of rows affected by the statement execution is contained in the %ROWCOUNT property. For a SELECT statement, if the cursor is positioned after the last row, the value of %ROWCOUNT indicates the number of rows contained in the result set. At any other time, %ROWCOUNT contains the number of rows retrieved thus far. %ROWID is set to the RowID of the last record modified by the most recent INSERT, UPDATE, INSERT OR UPDATE, DELETE, or TRUNCATE TABLE operation. After an INSERT statement, the %ROWID property contains the system-assigned value of the RowID (Object ID) assigned to the new record."}),"\n",(0,s.jsx)(t.p,{children:"A successfully executed SELECT statement returns a single result set. The number of columns in the result set is contained in %ResultColumnCount. A cursor (iterator) is available to retrieve rows from the result set. To advance the cursor to the next row, call %Next. The initial position of the cursor is before the first row. %Next() returns 1 to indicate that it is positioned on a row or 0 to indicate that it is positioned after the last row (at the end of the result set). If the cursor is positioned after the last row, the value of %ROWCOUNT indicates the number of rows contained in the result set. At any other time, %ROWCOUNT contains the number of rows retrieved thus far. For more information on the result set interface refer to the %SQL.IResultSet class."}),"\n",(0,s.jsx)(t.p,{children:"A CALL statement result might contain output values, including a return value and any parameters defined as INPUT-OUTPUT or OUTPUT, as well as a collection of dynamic result sets. The %OutputColumnCount property indicates the number of output values. You can retrieve individual output values by using the output value iterator - %NextOutputValue."}),"\n",(0,s.jsx)(t.p,{children:"The following is an example of retrieving all of the output values returned by a procedure:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:'if result.%OutputColumnCount > 0 { set tPosition = "" set tValue = result.%NextOutputValue(.tPosition) while tPosition \'= "" { write !,tPosition," = ",tValue set tValue = result.%NextOutputValue(.tPosition) } } else { write !,"No output values returned." }'})}),"\n",(0,s.jsx)(t.p,{children:"In the above example, the value of tPosition is the position of the formal parameter whose value is returned in tValue. If the procedure declares a return value then the return value is always at position 0 (zero). Input parameters are not contained in the output values but the presence of an input parameter is reflected as a gap in the output value position."}),"\n",(0,s.jsxs)(t.p,{children:["A CALL statement can also return dynamic result sets as a collection referred to as a ",(0,s.jsx)(t.em,{children:"result set sequence"}),". There are two mechanisms for accessing result sets - serial binding and parallel binding. Serial binding is automatically used whenever any part of its interface is invoked. The serial binding interface consists of the %ResultColumnCount property, a private property %ProcCursor, and the methods %Next, %GetRow, %GetRows, %MoreResults, %GetMetadata, %Get, %GetData, %Print and several internal methods. The first reference to any of the serial binding interface members triggers the first result set from the result set sequence to be bound to the %ProcCursor property and also to the %CurrentResult property. Subsequent references to the serial binding interface operate on that result set. When the currently bound result set is completely processed, you can invoke %MoreResults to retrieve the next result set from the result set sequence by calling %NextResult and then binding that result to %ProcCursor."]}),"\n",(0,s.jsx)(t.p,{children:'The parallel binding interface is implemented as the %NextResult method and the %CurrentResult property. Each call to %NextResult returns an OREF to the next result set in the collection of dynamic resultsets returned by the procedure. When all result sets have been returned then %NextResult returns NULL (value = "" in COS). The result returned by %NextResult is also bound to the %CurrentResult property.'}),"\n",(0,s.jsx)(t.p,{children:"%CurrentResult always references the most recently bound result set and it can be used for direct access to that result set, bypassing the serial binding interface. The user must be careful since both parallel binding (%NextResult) and serial binding (automatic and %MoreResults) affects the value of %CurrentResult."}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(t.h3,{id:"statementmetadata",children:"%statementmetadata;"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter %statementmetadata;\n"})}),"\n",(0,s.jsx)(t.h3,{id:"statementmetadataext",children:"%statementmetadataext;"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter %statementmetadataext;\n"})}),"\n",(0,s.jsx)(t.h3,{id:"statementobjects",children:"%statementobjects;"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter %statementobjects;\n"})}),"\n",(0,s.jsx)(t.h3,{id:"statementparameters",children:"%statementparameters;"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter %statementparameters;\n"})}),"\n",(0,s.jsx)(t.h3,{id:"statementactual",children:"%statementactual;"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter %statementactual;\n"})}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"statementtype",children:"%StatementType"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %StatementType As %Library.Integer;\n"})}),"\n",(0,s.jsx)(t.p,{children:"The dynamic statement type number as assigned by SQL. See %StatementTypeName for statement type values."}),"\n",(0,s.jsx)(t.h3,{id:"statementtypename",children:"%StatementTypeName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %StatementTypeName As %Library.String [ Calculated, SqlComputeCode = { set {*}=$$GetTypen^%SYS.SQLSRV({%StatementType}) }, SqlComputed ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"The statement type name, one of the following:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"1"}),(0,s.jsx)(t.th,{children:"SELECT"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"INSERT (also 'INSERT OR UPDATE')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"UPDATE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"DELETE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"COMMIT"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"6"}),(0,s.jsx)(t.td,{children:"ROLLBACK"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"7"}),(0,s.jsx)(t.td,{children:"GRANT"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"8"}),(0,s.jsx)(t.td,{children:"REVOKE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"9"}),(0,s.jsx)(t.td,{children:"CREATE TABLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"10"}),(0,s.jsx)(t.td,{children:"ALTER TABLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"11"}),(0,s.jsx)(t.td,{children:"DROP TABLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"12"}),(0,s.jsx)(t.td,{children:"CREATE VIEW"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13"}),(0,s.jsx)(t.td,{children:"ALTER VIEW"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"14"}),(0,s.jsx)(t.td,{children:"DROP VIEW"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"15"}),(0,s.jsx)(t.td,{children:"CREATE INDEX"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"16"}),(0,s.jsx)(t.td,{children:"ALTER INDEX (Not supported)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"17"}),(0,s.jsx)(t.td,{children:"DROP INDEX"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"18"}),(0,s.jsx)(t.td,{children:"CREATE ROLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"19"}),(0,s.jsx)(t.td,{children:"DROP ROLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"20"}),(0,s.jsx)(t.td,{children:"SET TRANSACTION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"21"}),(0,s.jsx)(t.td,{children:"START TRANSACTION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"22"}),(0,s.jsx)(t.td,{children:"%INTRANSACTION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"23"}),(0,s.jsx)(t.td,{children:"%BEGTRANS (Alias for START TRANSACTION)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"24"}),(0,s.jsx)(t.td,{children:"%INTRANS (Alias for %INTRANSACTION)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"25"}),(0,s.jsx)(t.td,{children:"GET (Not supported)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"26"}),(0,s.jsx)(t.td,{children:"SET OPTION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"27"}),(0,s.jsx)(t.td,{children:"STATISTICS (UPDATE STATISTICS, not supported))"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"28"}),(0,s.jsx)(t.td,{children:"%CHECKPRIV"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"29"}),(0,s.jsx)(t.td,{children:"CREATE USER"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"30"}),(0,s.jsx)(t.td,{children:"ALTER USER"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"31"}),(0,s.jsx)(t.td,{children:"DROP USER"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"32"}),(0,s.jsx)(t.td,{children:"%CHECKPRIV (SQL Admin Privilege)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"33"}),(0,s.jsx)(t.td,{children:"GRANT (SQL Admin Privilege)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"34"}),(0,s.jsx)(t.td,{children:"REVOKE (SQL Admin Privilege)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"35"}),(0,s.jsx)(t.td,{children:"CREATE FUNCTION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"36"}),(0,s.jsx)(t.td,{children:"CREATE METHOD"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"37"}),(0,s.jsx)(t.td,{children:"CREATE PROCEDURE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"38"}),(0,s.jsx)(t.td,{children:"CREATE QUERY"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"39"}),(0,s.jsx)(t.td,{children:"DROP FUNCTION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"40"}),(0,s.jsx)(t.td,{children:"DROP METHOD"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"41"}),(0,s.jsx)(t.td,{children:"DROP PROCEDURE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"42"}),(0,s.jsx)(t.td,{children:"DROP QUERY"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"43"}),(0,s.jsx)(t.td,{children:"CREATE TRIGGER"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"44"}),(0,s.jsx)(t.td,{children:"DROP TRIGGER"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"45"}),(0,s.jsx)(t.td,{children:"CALL"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"46"}),(0,s.jsx)(t.td,{children:"SAVEPOINT"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"47"}),(0,s.jsx)(t.td,{children:"LOCK TABLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"48"}),(0,s.jsx)(t.td,{children:"UNLOCK TABLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"49"}),(0,s.jsx)(t.td,{children:"CREATE DATABASE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"50"}),(0,s.jsx)(t.td,{children:"DROP DATABASE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"51"}),(0,s.jsx)(t.td,{children:"USE DATABASE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"52"}),(0,s.jsx)(t.td,{children:"TUNE TABLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"53"}),(0,s.jsx)(t.td,{children:"DECLARE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"54"}),(0,s.jsx)(t.td,{children:"CREATE MODEL"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"55"}),(0,s.jsx)(t.td,{children:"DROP MODEL"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"56"}),(0,s.jsx)(t.td,{children:"TRAIN MODEL"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"57"}),(0,s.jsx)(t.td,{children:"ALTER MODEL"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"58"}),(0,s.jsx)(t.td,{children:"VALIDATE MODEL"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"59"}),(0,s.jsx)(t.td,{children:"SET ML CONFIGURATION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"60"}),(0,s.jsx)(t.td,{children:"CREATE ML CONFIGURATION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"61"}),(0,s.jsx)(t.td,{children:"ALTER ML CONFIGURATION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"62"}),(0,s.jsx)(t.td,{children:"DROP ML CONFIGURATION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"63"}),(0,s.jsx)(t.td,{children:"FREEZE PLANS"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"64"}),(0,s.jsx)(t.td,{children:"UNFREEZE PLANS"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"65"}),(0,s.jsx)(t.td,{children:"PURGE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"66"}),(0,s.jsx)(t.td,{children:"BUILD INDEX"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"67"}),(0,s.jsx)(t.td,{children:"CREATE AGGREGATE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"68"}),(0,s.jsx)(t.td,{children:"DROP AGGREGATE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"69"}),(0,s.jsx)(t.td,{children:"LOAD"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"70"}),(0,s.jsx)(t.td,{children:"CREATE SCHEMA"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"71"}),(0,s.jsx)(t.td,{children:"DROP SCHEMA"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"72"}),(0,s.jsx)(t.td,{children:"CREATE SERVER"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"73"}),(0,s.jsx)(t.td,{children:"ALTER SERVER"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"74"}),(0,s.jsx)(t.td,{children:"DROP SERVER"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"75"}),(0,s.jsx)(t.td,{children:"CREATE FOREIGN TABLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"76"}),(0,s.jsx)(t.td,{children:"ALTER FOREIGN TABLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"77"}),(0,s.jsx)(t.td,{children:"DROP FOREIGN TABLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"78"}),(0,s.jsx)(t.td,{children:"CANCEL QUERY"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"79"}),(0,s.jsx)(t.td,{children:"EXPLAIN"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"80"}),(0,s.jsx)(t.td,{children:"THROUGH"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:'""'}),(0,s.jsx)(t.td,{children:"Anything not listed above"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"message",children:"%Message"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %Message As %Library.String(MAXLEN = 256);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Contains additional information about an error reported as a negative value in %SQLCODE. Additional information is not always available."}),"\n",(0,s.jsx)(t.h3,{id:"rowcount",children:"%ROWCOUNT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %ROWCOUNT As %Library.Integer;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Contains the number of rows affected by executing the statement. It is the responsibility of the stored procedure author to explicitly set %ROWCOUNT."}),"\n",(0,s.jsxs)(t.p,{children:["For example: ",(0,s.jsx)(t.code,{children:'&sql(UPDATE Person Set Name="Mo" WHERE Age > :number) Set result.%SQLCODE=SQLCODE Set result.%ROWCOUNT=%ROWCOUNT'})]}),"\n",(0,s.jsx)(t.h3,{id:"rowid",children:"%ROWID"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property %ROWID As %Library.String(MAXLEN = "");\n'})}),"\n",(0,s.jsx)(t.p,{children:"The value of the %ROWID. This may or may not be relevant. It is primarily used when a dynamic INSERT statement has been executed. In that case, %ROWID contains the rowid of the last row inserted into the database by executing the statement."}),"\n",(0,s.jsx)(t.h3,{id:"sqlcode",children:"%SQLCODE"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %SQLCODE As %Library.Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Indicates whether or not the statement was executed successfully. If %SQLCODE is not negative, then the statement was successfully executed. Specifically, the successful completion values are 0 (successful completion) and 100 (the operation has either found no data or reached the end of the data). Otherwise, the value of %SQLCODE contains the error code (a negative number) and the %Message property might contain more information about the error."}),"\n",(0,s.jsxs)(t.p,{children:["Note that, in successful cases, the methods %Execute and %ExecDirect set the %SQLCODE property to 0, but there is no information yet to indicate the number of rows (which could be 0). To know how many rows there are, it is necessary to call %Next to examine the results. If your application needs to test for the case where the query has no results, be sure to call %Next at least once, even if you don't otherwise need to iterate through the results; ",(0,s.jsx)(t.strong,{children:"then"})," check to see whether %SQLCODE is 100."]}),"\n",(0,s.jsx)(t.h3,{id:"currentresult",children:"%CurrentResult"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %CurrentResult As %RawString;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Holds the OREF of the most recently bound result set. This property is set automatically by %NextResult. Note that %NextResult is also invoked by %MoreResults. Users should not ever set this property. This property is public for backward compatibility reasons."}),"\n",(0,s.jsx)(t.h3,{id:"outputcolumncount",children:"%OutputColumnCount"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %OutputColumnCount As %Library.Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"The number of columns defined as RETURNVALUE, INPUT-OUTPUT or OUTPUT (method return value, byref and output parameters) by an SQL invoked routine. This value is always zero unless the DYNAMIC_FUNCTION is CALL (%StatementType = 45)."}),"\n",(0,s.jsx)(t.h3,{id:"outputvalues",children:"%OutputValues"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %OutputValues As %RawString [ Internal, MultiDimensional ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"A multidimensional property that contains the most recent values returned by a procedure call. This property is not meant to be a replacement for the standard procedure formal argument interface but handles situations where the return values are not conveniently returned to the caller using the various argument binding algorithms (positional and by name). The values are placed in the %OutputValues array subscripted by the argument position as defined by the SQL invoked routine. If the statement does not allocate a parameter to be bound to the arguments defined by the SQL invoked routine then there is no value present in %OutputValues. The output value iterator only returns values defined."}),"\n",(0,s.jsx)(t.h3,{id:"resultcolumncount",children:"%ResultColumnCount"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %ResultColumnCount As %Library.Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"The number of columns in the result set. This value is always zero unless the current result is a RESULTSET object (instance of %SQL.IResultSet) or a procedure context object (instance of %Library.IProcedureContext). For a CALL statement result, this value represents the column count of the result set currently bound using serial binding."}),"\n",(0,s.jsx)(t.h3,{id:"routine",children:"%routine"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property %routine As %Library.String(MAXLEN = "") [ Internal ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"This is the link to the SQL-Invoked-Routine that produced this result. This property is for internal use only and its use or continued presence is not guaranteed and cannot be assumed. The %routine value is the ID of the SIR that produced this result and it is useful for retrieving metadata, specifically the statement metadata that describes a virtual result set of the output directed parameters defined by the routine."}),"\n",(0,s.jsx)(t.h3,{id:"proccursor",children:"%ProcCursor"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %ProcCursor As %SQL.IResultSet [ Private ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"The cursor that is bound to a result set from the result set sequence (RSS) returned by a dynamic CALL statement. For all statement types other than CALL, this value is always the null OREF. This property is set automatically on first access and by calling %MoreResults and %NextResult."}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"moreresults",children:"%MoreResults"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %MoreResults() As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Invokes %NextResult to return the next result object from a statement result object (aka 'context object') and updates %ProcCursor with that value. This is called \"serial binding\". %ResultColumnCount is updated to reflect the number of columns contained in the newly bound result. If a %ProcCursor was previously set to a result object then the reference to that result object was removed. Under normal circumstances the previously bound result set is destructed."}),"\n",(0,s.jsx)(t.p,{children:"If the new value of %ProcCursor is a valid result object, then this method returns 1; otherwise it returns 0 to indicate that no more results are available."}),"\n",(0,s.jsx)(t.h3,{id:"next",children:"%Next"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Next(ByRef sc As %Library.Status = {$$$OK}) As %Library.Integer [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Advances to the next row in the result referenced by %ProcCursor. Returns 0 if the cursor is at the end of the result set. An optional argument contains a %Library.Status value on return. This %Status value indicates success or failure of the %Next call. %SQLCODE is also set by %Next. This implementation is overridden by classes that implement the result set interface."}),"\n",(0,s.jsx)(t.h3,{id:"getrow",children:"%GetRow"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetRow(ByRef Row As %Library.List, ByRef sc As %Library.Status = {$$$OK}) As %Library.Integer [ CodeMode = expression ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Advances to the next row in the result referenced by %ProcCursor. Returns 0 if the cursor is at the end of the result set. An optional argument contains a %Library.Status value on return. This %Status value indicates success or failure of the %GetRow call. %SQLCODE is also set by %GetRow. The row is returned in ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$List"}),' format by reference in the Row argument. If %SQLCODE\'=0, Row will be null (""). This implementation is overridden by classes that implement the result set interface.']}),"\n",(0,s.jsx)(t.h3,{id:"getrows",children:"%GetRows"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetRows(Cnt As %Library.Integer, ByRef Rows As %Library.List, ByRef sc As %Library.Status = {$$$OK}) As %Library.Integer [ CodeMode = expression ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Advances the next Cnt rows in the result referenced by %ProcCursor. Returns 0 if the cursor is at the end of the result set. Note, when 0 is returned, it is likely there are rows returned in the Rows array. An optional argument contains a %Library.Status value on return. This %Status value indicates success or failure of the %GetRows call. %SQLCODE is also set by %GetRows. The rows are returned in an array of ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$List"})," values in the Row array argument. If %SQLCODE'=0 for a row, that will be the end of the results."]}),"\n",(0,s.jsxs)(t.p,{children:["For example, suppose rset.%GetRows(10,.tenrows,.sc) is called:",(0,s.jsx)(t.br,{}),"\n- If there are more then 10 rows remaining to be fetched from the result set, tenrows=10, tenrows(1)=$lb(first row's contents), ..., tenrows(10)=$lb(tenth row's contents), and %GetRows will return 1.",(0,s.jsx)(t.br,{}),"\n- If there are 5 rows remaining to be fetched from the result set, tenrows=5, tenrows(1)=$lb(first row's contents), ..., tenrows(5)=$lb(fifth row's contents), and %GetRows will return 0.",(0,s.jsx)(t.br,{}),"\n- If there are 0 rows remaining to be fetched from the result set, tenrows=0 and %GetRows will return 0."]}),"\n",(0,s.jsx)(t.p,{children:"This implementation is overridden by classes that implement the result set interface."}),"\n",(0,s.jsx)(t.h3,{id:"nextoutputvalue",children:"%NextOutputValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %NextOutputValue(ByRef pPosition As %Integer = "") As %RawString\n'})}),"\n",(0,s.jsx)(t.p,{children:"Returns the output value from the position following pPosition. If the caller passed pPosition by reference then it will contain the position corresponding to the output value returned. If the pPosition argument is NULL, then no values exist beyond the value passed by the caller and the value returned is also NULL."}),"\n",(0,s.jsx)(t.p,{children:"The output value at position 0 is always the called routine's return value."}),"\n",(0,s.jsx)(t.h3,{id:"nextresult",children:"%NextResult"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %NextResult() As %Library.RegisteredObject\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the next result object from a statement descriptor (aka 'context object'). Typically, multiple results are only returned from an SQL invoked procedure. Such results are dynamic result sets whose metadata is not available until retrieval time. %NextResult() for non-CALL statements simply returns NULL, indicating that no more results are available. For an SQL invoked procedure that returns a single preplanned result set and for SELECT statements (which return a single result set when successfully executed) this method returns the current result set object when called for the first time. Subsequent calls return a null OREF."}),"\n",(0,s.jsx)(t.h3,{id:"get",children:"%Get"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %Get(colname As %String = "") As %Library.String [ Abstract ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Returns the value of the column with the name colname in the current row of the result set."}),"\n",(0,s.jsx)(t.p,{children:"If colname is not a valid column name, this method throws a  error."}),"\n",(0,s.jsx)(t.h3,{id:"getdata",children:"%GetData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetData(colnbr As %Integer = 0) As %Library.String [ Abstract ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the value of column colnbr in the current row of the result set."}),"\n",(0,s.jsx)(t.h3,{id:"getmetadata",children:"%GetMetadata"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetMetadata() As %SQL.StatementMetadata\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the result set metadata as a %SQL.StatementMetadata instance."}),"\n",(0,s.jsx)(t.h3,{id:"dispatchgetproperty",children:"%DispatchGetProperty"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %DispatchGetProperty(pProperty As %Library.String(MAXLEN=255)) [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Dynamic property Get method dispatcher. This method is invoked whenever a property cannot be resolved from the class descriptor."}),"\n",(0,s.jsx)(t.h3,{id:"dispatchmethod",children:"%DispatchMethod"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %DispatchMethod(pMethod As %String, Args...)\n"})}),"\n",(0,s.jsx)(t.h3,{id:"dispatchsetproperty",children:"%DispatchSetProperty"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %DispatchSetProperty(pProperty As %Library.String, pValue As %Library.String) [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Property dispatch method to catch references to virtual properties."}),"\n",(0,s.jsx)(t.p,{children:"This should not be called directly."}),"\n",(0,s.jsx)(t.h3,{id:"displayformatted",children:"%DisplayFormatted"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %DisplayFormatted(pFormat As %String = -1, pFileName As %String(MAXLEN="") = "", ByRef pMessages As %SQL.Manager.Messages = "", ByRef pFilesUsed As %String(MAXLEN="") = 0, pTranslateTable As %String(MAXLEN="") = "", pDelimiter As %String = {$c(9)})\n'})}),"\n",(0,s.jsx)(t.p,{children:"Displays the contents of the result object. If formatted display is available, then this method formats the results using the requested format and, if appropriate, opens the formatted results using the host OS. The output is directed to one or more files and messages are placed in a result set object. All file names used are returned in an array. The arguments are as follows:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["pFormat - The format applied to the result content. This parameter is also used to determine the file name extension. The supported formats are:\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"-1 = %Display() format"}),"\n",(0,s.jsx)(t.li,{children:"0 = XML"}),"\n",(0,s.jsx)(t.li,{children:"1 = HTML"}),"\n",(0,s.jsx)(t.li,{children:"2 = PDF (requires a renderer such as FOP)"}),"\n",(0,s.jsx)(t.li,{children:"99 = TXT"}),"\n",(0,s.jsxs)(t.li,{children:["100 = CSV (actually TAB-separated)",(0,s.jsx)(t.br,{}),"\nIf pFormat is specified as any number not listed above then it will default to TXT.",(0,s.jsx)(t.br,{}),"\npFormat can also be specified as XML, HTML, PDF, TXT or CSV.",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.em,{children:"NOTE: pFormat of CSV/100 is not a true comma-separated value, but instead uses TAB separated values."})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:"pFileName - The base file name to be used to generate actual file names used for output. If no value is specified then a file name will be generated, using the TEMP folder defined for the InterSystems IRIS instance. This value is not expected to include an extension. An extension is added to this value to form the actual file used. Also, if nested results exist then a number is appended to the file name specified to produce a unique name for each result."}),"\n",(0,s.jsx)(t.li,{children:"pMessages - Instance of a system result set class. If no value is passed then the system message result class is instantiated. This parameter is passed by reference. It is up to the caller to process the result set OREF that is returned. pMessages.Count() returns the number of messages contained in the result set. pMessages.%Display() will display the messages on the current device. pMessages.%DisplayFormatted() is also implemented and can be used to display the messages using the selected format."}),"\n",(0,s.jsx)(t.li,{children:"pFilesUsed - This pass-by-reference parameter will contain the number of files used to display the result content and the name of each file. pFilesUsed is the number of files and pFilesUsed(file_number) is the name of the file. The sequence of the files is the same sequence as the results are processed. For simple result objects, there is a single file. For context objects that can contain result set sequences, the results are output in the order they are returned and the files used are present in pFilesUsed in that same order."}),"\n",(0,s.jsx)(t.li,{children:"pTranslateTable - This is the translate table used for the output files when the format is CSV or TXT. This parameter is optional."}),"\n",(0,s.jsx)(t.li,{children:"pDelimiter - The delimiter to use between columns in the export file. This parameter is optional and defaults to tab character if not specified."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"print",children:"%Print"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %Print(pDelimiter As %String = " ") As %Status [ Abstract ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"This is an abstract method. Refer to %SQL.IResultSet for the concrete method implemented for result set results."}),"\n",(0,s.jsx)(t.h3,{id:"display",children:"%Display"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Display(pDelimiter As %String = {$Char(9)})\n"})}),"\n",(0,s.jsx)(t.p,{children:"Displays the contents of this object on the current device."}),"\n",(0,s.jsx)(t.h3,{id:"addtosaveset",children:"%AddToSaveSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %AddToSaveSet(depth As %Integer = 3, refresh As %Integer = 0, norecurseon As %String = "") As %Status [ CodeMode = expression, Internal, ProcedureBlock = 1, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(t.h3,{id:"constructclone",children:"%ConstructClone"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ConstructClone(deep As %Boolean = 0, ByRef cloned As %String, location As %String) As %RegisteredObject [ CodeMode = expression, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"normalizeobject",children:"%NormalizeObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %NormalizeObject() As %Status [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"removefromsaveset",children:"%RemoveFromSaveSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %RemoveFromSaveSet() As %Status [ CodeMode = expression, Internal, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"serializeobject",children:"%SerializeObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SerializeObject(ByRef serial As %Binary, partial As %Integer = 0) As %Status [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"validateobject",children:"%ValidateObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ValidateObject(force As %Integer = 0) As %Status [ CodeMode = expression ]\n"})})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var s=n(96540);const r={},i=s.createContext(r);function l(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);