"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[21002],{80798:(e,s,r)=>{r.r(s),r.d(s,{contentTitle:()=>i,default:()=>c,frontMatter:()=>a,toc:()=>o});var t=r(74848),n=r(28453);const a={pagination_prev:null,pagination_next:null},i="%JSON.PropertyParameters",o=[{value:"Parameters",id:"parameters",level:2},{value:"%JSONFIELDNAME",id:"jsonfieldname",level:3},{value:"%JSONINCLUDE",id:"jsoninclude",level:3},{value:"%JSONNULL",id:"jsonnull",level:3},{value:"%JSONIGNORENULL",id:"jsonignorenull",level:3},{value:"%JSONREFERENCE",id:"jsonreference",level:3}];function l(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"jsonpropertyparameters",children:"%JSON.PropertyParameters"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %JSON.PropertyParameters [ System = 2 ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Property superclass used to hold information about property parameters for %JSON.Adaptor."}),"\n",(0,t.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(s.h3,{id:"jsonfieldname",children:"%JSONFIELDNAME"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter %JSONFIELDNAME As STRING;\n"})}),"\n",(0,t.jsx)(s.p,{children:"The %JSONFIELDNAME parameter specifies the field name that this property is mapped to in JSON. The default %JSONFIELDNAME is the property name."}),"\n",(0,t.jsx)(s.h3,{id:"jsoninclude",children:"%JSONINCLUDE"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter %JSONINCLUDE As STRING [ Constraint = "INOUT,INPUTONLY,OUTPUTONLY,NONE", Flags = ENUM ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"The %JSONINCLUDE parameter controls if this property will be included in the JSON output or input. Possible values are INOUT, INPUTONLY, OUTPUTONLY and NONE. The default is INOUT."}),"\n",(0,t.jsx)(s.h3,{id:"jsonnull",children:"%JSONNULL"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter %JSONNULL As BOOLEAN;\n"})}),"\n",(0,t.jsx)(s.p,{children:"If %JSONNULL is true (=1), then unspecified properties are exported as the null value. Otherwise the field corresponding to the property is just skipped during export."}),"\n",(0,t.jsx)(s.h3,{id:"jsonignorenull",children:"%JSONIGNORENULL"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter %JSONIGNORENULL As BOOLEAN;\n"})}),"\n",(0,t.jsxs)(s.p,{children:['%JSONIGNORENULL allows the programmer to override the default handling of empty strings for string properties. This parameter applies to only true strings which is determined by XSDTYPE = "string" as well as JSONTYPE="string" By default (%JSONIGNORENULL = 0), empty strings in the JSON input are stored as $c(0) and $c(0) is written to JSON as the string "". A missing field in the JSON input is always stored as "" and "" is always output to JSON according to the %JSONNULL parameter.',(0,t.jsx)(s.br,{}),'\nIf %JSONIGNORENULL is set = 1, then both missing fields in the JSON and empty strings are input as "", and both "" and $c(0) are output as field values of "".']}),"\n",(0,t.jsx)(s.h3,{id:"jsonreference",children:"%JSONREFERENCE"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter %JSONREFERENCE As STRING [ Constraint = "OBJECT,ID,OID,GUID", Flags = ENUM ];\n'})}),"\n",(0,t.jsxs)(s.p,{children:['%JSONREFERENCE specifies the default value of the %JSONREFERENCE property parameter that specifies how to project references to JSON. %JSONREFERENCE may be specified for any property to override this default value. Possible values of %JSONREFERENCE are "OBJECT", "ID", "OID", "GUID".',(0,t.jsx)(s.br,{}),'\n="OBJECT" is the default and indicates that the properties of the referenced class are used to represent the referenced object.',(0,t.jsx)(s.br,{}),'\n="ID" indicates that the id of a persistent or serial class is used to represent the reference.',(0,t.jsx)(s.br,{}),'\n="OID" indicates that the oid of a persistent or serial class is used to represent the reference. The form of the oid as projected to JSON will be classname,id.',(0,t.jsx)(s.br,{}),'\n="GUID" indicates the GUID of a persistent class is used to represent the reference.']})]})}function c(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>o});var t=r(96540);const n={},a=t.createContext(n);function i(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);