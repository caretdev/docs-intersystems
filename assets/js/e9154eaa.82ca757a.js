"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[28204],{50917:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>c,frontMatter:()=>l,toc:()=>s});var r=t(74848),o=t(28453);const l={pagination_prev:null,pagination_next:null},a="%ZEN.Component.dataView",s=[{value:"Properties",id:"properties",level:2},{value:"controllerId",id:"controllerid",level:3},{value:"controller",id:"controller",level:3},{value:"onnotifyView",id:"onnotifyview",level:3},{value:"%controller",id:"controller-1",level:3},{value:"ongetcontroller",id:"ongetcontroller",level:3},{value:"Methods",id:"methods",level:2},{value:"%AcquireDataFromController",id:"acquiredatafromcontroller",level:3},{value:"getController",id:"getcontroller",level:3},{value:"sendEventToController",id:"sendeventtocontroller",level:3},{value:"setControllerId",id:"setcontrollerid",level:3},{value:"connectToController",id:"connecttocontroller",level:3},{value:"disconnectFromController",id:"disconnectfromcontroller",level:3},{value:"notifyView",id:"notifyview",level:3}];function i(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"zencomponentdataview",children:"%ZEN.Component.dataView"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Class %ZEN.Component.dataView [ Abstract, Deprecated, System = 3 ]\n"})}),"\n",(0,r.jsx)(n.p,{children:"This abstract class defines the common interface needed by dataView components (the View part of the Model-View-Controller architecture)."}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(n.h3,{id:"controllerid",children:"controllerId"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:'Property controllerId As %ZEN.Datatype.id(COMPONENTTYPE = "dataController");\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Optional. The id of the %ZEN.Auxiliary.dataController object that provides data for this dataView component.",(0,r.jsx)(n.br,{}),"\nIf provided, this must be the valid id of a %ZEN.Auxiliary.dataController object."]}),"\n",(0,r.jsx)(n.h3,{id:"controller",children:"controller"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:'Property controller As %ZEN.Datatype.string(XMLPROJECTION = "none", ZENSETTING = 0);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Internal property.",(0,r.jsx)(n.br,{}),"\nUsed by client to hold a reference to the associated %ZEN.Auxiliary.dataController object."]}),"\n",(0,r.jsx)(n.h3,{id:"onnotifyview",children:"onnotifyView"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property onnotifyView As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,r.jsx)(n.p,{children:"onnotifyView event handler: This event is fired when a dataController connected to this dataView raises an event."}),"\n",(0,r.jsx)(n.h3,{id:"controller-1",children:"%controller"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:'Property %controller As %ZEN.Auxiliary.dataController(XMLPROJECTION = "none");\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Internal property.",(0,r.jsx)(n.br,{}),"\nUsed by server to hold a reference to the associated dataController object."]}),"\n",(0,r.jsx)(n.h3,{id:"ongetcontroller",children:"ongetcontroller"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property ongetcontroller As %ZEN.Datatype.eventHandler [ Internal ];\n"})}),"\n",(0,r.jsxs)(n.p,{children:["ongetcontroller event handler:",(0,r.jsx)(n.br,{}),"\nIf defined, this provides a way to supply a custom data controller. This event handler should return an object that implements the controller API. This is an internal setting.",(0,r.jsx)(n.br,{}),"\nThe main API methods that need to be implemented are getDimSize, getLabel, getData, getPropertyName, and notifyController."]}),"\n",(0,r.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.h3,{id:"acquiredatafromcontroller",children:"%AcquireDataFromController"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method %AcquireDataFromController() As %Status [ Private ]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Server-side method used by dataView implementation classes to get values from the associated dataController, if present. This is typically called by components on the server before they are initially rendered in order to get initial data values."}),"\n",(0,r.jsx)(n.h3,{id:"getcontroller",children:"getController"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod getController() [ Language = javascript ]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get the dataController component associated with this dataView, if present. Returns null if no there is no controller. This is used by dataView implementation classes."}),"\n",(0,r.jsx)(n.h3,{id:"sendeventtocontroller",children:"sendEventToController"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod sendEventToController(reason, data1, data2, data3) [ Language = javascript ]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If connected, send an event to a dataController. This is used by dataView implementation classes. Possible values of reason include:",(0,r.jsx)(n.br,{}),"\n'propertyChange' - data1 is property name,data2 is the new value,data3 is the series number (if applicable)."]}),"\n",(0,r.jsx)(n.h3,{id:"setcontrollerid",children:"setControllerId"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod setControllerId(id) [ Language = javascript ]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Set the controller id for this dataView and establish a connection to the new controller. This is used by dataView implementation classes."}),"\n",(0,r.jsx)(n.h3,{id:"connecttocontroller",children:"connectToController"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod connectToController() [ Internal, Language = javascript ]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Internal method. Establish a connection between this dataView and its associated dataController."}),"\n",(0,r.jsx)(n.h3,{id:"disconnectfromcontroller",children:"disconnectFromController"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod disconnectFromController() [ Internal, Language = javascript ]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Internal method. Break the connection between this dataView and its associated dataController."}),"\n",(0,r.jsx)(n.h3,{id:"notifyview",children:"notifyView"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod notifyView(reason, data1, data2, data3) [ Internal, Language = javascript ]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Internal method. This is called by the dataController associated with this dataView when it sends an event to this dataView.",(0,r.jsx)(n.br,{}),"\nIt passes selected events on to an notifyViewHandler method implemented by the actual dataView class. Known events:",(0,r.jsx)(n.br,{}),"\n'modelChange': Meta-data for model has changed.",(0,r.jsx)(n.br,{}),"\n'dataChange': Data for model has changed. data1 is the name of the changed property or null if all properties have changed.",(0,r.jsx)(n.br,{}),"\n'seriesChange': the default series for the controller has changed."]})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(96540);const o={},l=r.createContext(o);function a(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);