"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[71928],{16342:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>o,default:()=>d,frontMatter:()=>a,toc:()=>l});var n=s(74848),i=s(28453);const a={pagination_prev:null,pagination_next:null},o="%TSQL.Manager",l=[{value:"Methods",id:"methods",level:2},{value:"Import",id:"import",level:3},{value:"load",id:"load",level:3},{value:"interactive",id:"interactive",level:3},{value:"readInteractive",id:"readinteractive",level:3}];function r(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"tsqlmanager",children:"%TSQL.Manager"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %TSQL.Manager [ Abstract, Deprecated, System = 4 ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"%TSQL.Manager is deprecated"}),". Use $system.SQL.TSQL(), $system.SQL.Shell() with dialect set to either Sybase or MSSQL, or $system.SQL.DDLImport() instead. The simplest method for importing a file containing T/SQL statements is to use the SQL Shell with the dialect set to Sybase or MSSQL. $system.SQL.TSQL() is a simple shortcut to launch the SQL shell using the default dialect as defined in the system configuration. In the SQL Shell simply execute the RUN command with the name of the file to be executed. This will initiate a dialog to set various RUN options and then the statements in the file will be executed."]}),"\n",(0,n.jsx)(t.p,{children:"%TSQL.Manager implements several utility methods for importing and executing files/streams containing TSQL statements."}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"import",children:"Import"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod Import(pDialect As %String, pInputFile As %RawString = "", pLogFile As %RawString = "", pRunMode As %Integer, pErrorPause As %Integer, ByRef pQSpec As %RawString) As %Status\n'})}),"\n",(0,n.jsx)(t.p,{children:"Import a file of TSQL statement batches. This should be called 'Load' but for PPCF we need to maintain the 'load' method interface and 'Load' is a name conflict. Parameters: pDialect - The dialect of TSQL contained in the input file. Values are MSSQL or Sybase, Sybase is the default; pInputFile - The name of the TSQL source file; pLogFile - The name of the log file. Input source statements and the result of execution are logged; pRunMode - The SQL Statement runtime mode; 0 - Logical (default) 1 - ODBC 2 - Display pErrorPause - The number of seconds to pause after encountering an error. Not all errors will pause. Default is 5 seconds. Specifying 0 will disable all pauses. pQSpec - Runtime options and flags. The only option relevant to TSQL import is 'displaylog'. If it is false, no logging will be done."}),"\n",(0,n.jsx)(t.h3,{id:"load",children:"load"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod load(DDLMode As %RawString = "Sybase", scriptFile As %RawString, logFile As %RawString = "", runtimeMode As %Integer, ByRef qspec As %RawString) As %Status\n'})}),"\n",(0,n.jsx)(t.p,{children:'load() This method loads and executes TSQL statements from a file. Execution of individuals batches of statements is triggered when a "GO" statement is processed. arguments: DDLMode - The dialect of the source statements. Supported dialects are Sybase and MSSQL scriptFile - the file containing SQL statements to be executed; logFile - the file to log executed statements and results; runtimeMode - the mode in which SQL statements are to be executed. "" means use the default, 0 is logical, 1 is ODBC and 2 is DISPLAY qspec - option flags and qualifiers'}),"\n",(0,n.jsx)(t.h3,{id:"interactive",children:"interactive"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod interactive(DDLMode As %RawString = "Sybase", logFile As %RawString = "", runtimeMode As %Integer, ByRef qspec As %RawString) As %Status\n'})}),"\n",(0,n.jsx)(t.p,{children:'interactive() DDLMode - The dialect of the source statements. Supported dialects are Sybase and MSSQL logFile - the name of a file to send log output to runtimeMode - the mode in which SQL statements are to be executed. "" means use the default, 0 is logical, 1 is ODBC and 2 is DISPLAY qspec - flags and options. If displayLog is true then all output is routed to logFile. This method reads source from the principle device. Execution of individual batches of statements is triggered when a "GO" statement is processed. CREATE PROCEDURE|FUNCTION|TRIGGER will also trigger execution of previously entered lines.'}),"\n",(0,n.jsx)(t.h3,{id:"readinteractive",children:"readInteractive"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod readInteractive(ByRef cachedLine As %String(MAXLEN="") = "", ByRef exitShell As %Integer = 0) As %Stream.Object\n'})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(r,{...e})}):r(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>l});var n=s(96540);const i={},a=n.createContext(i);function o(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);