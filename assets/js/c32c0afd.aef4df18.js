"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[39315],{13132:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>c,frontMatter:()=>a,toc:()=>o});var s=n(74848),i=n(28453);const a={pagination_prev:null,pagination_next:null},l="%Studio.Extension.Base",o=[{value:"Properties",id:"properties",level:2},{value:"Username",id:"username",level:3},{value:"StudioVersion",id:"studioversion",level:3},{value:"MainJob",id:"mainjob",level:3},{value:"IconStatus",id:"iconstatus",level:3},{value:"Modified",id:"modified",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"%OnClose",id:"onclose",level:3},{value:"Login",id:"login",level:3},{value:"Logout",id:"logout",level:3},{value:"OnBeforeLoad",id:"onbeforeload",level:3},{value:"OnAfterLoad",id:"onafterload",level:3},{value:"OnBeforeSave",id:"onbeforesave",level:3},{value:"OnAfterSave",id:"onaftersave",level:3},{value:"OnAfterStorage",id:"onafterstorage",level:3},{value:"OnBeforeCompile",id:"onbeforecompile",level:3},{value:"OnAfterCompile",id:"onaftercompile",level:3},{value:"OnBeforeClassCompile",id:"onbeforeclasscompile",level:3},{value:"OnAfterClassCompile",id:"onafterclasscompile",level:3},{value:"OnBeforeAllClassCompile",id:"onbeforeallclasscompile",level:3},{value:"OnAfterAllClassCompile",id:"onafterallclasscompile",level:3},{value:"OnBeforeDelete",id:"onbeforedelete",level:3},{value:"OnAfterDelete",id:"onafterdelete",level:3},{value:"GetStatus",id:"getstatus",level:3},{value:"IsReadOnly",id:"isreadonly",level:3},{value:"IsInSourceControl",id:"isinsourcecontrol",level:3},{value:"ItemIconState",id:"itemiconstate",level:3},{value:"OnBeforeTimestamp",id:"onbeforetimestamp",level:3},{value:"ExternalName",id:"externalname",level:3},{value:"OnMenuItem",id:"onmenuitem",level:3},{value:"UserAction",id:"useraction",level:3},{value:"AfterUserAction",id:"afteruseraction",level:3},{value:"IsGenerated",id:"isgenerated",level:3}];function r(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mainmenu:"mainmenu",p:"p",pre:"pre",submenu:"submenu",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"studioextensionbase",children:"%Studio.Extension.Base"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Studio.Extension.Base Extends %RegisteredObject [ Owner = {%Developer}, System = 4 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Studio extensibility superclass, this does nothing but provide interface for the real extensibility classes to use. Subclass from this and implement the methods you need."}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"username",children:"Username"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Username As %Library.Username;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Load the optional menu information on class compile. This data is provided as an XData block in the source control class called 'Menu'. The format is:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"    By default this table will be used by the two queries MainMenus and MenuItems which returns the list of menus to Studio. The username of this source control user.\n"})}),"\n",(0,s.jsx)(t.h3,{id:"studioversion",children:"StudioVersion"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property StudioVersion As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Version of Studio that is connecting to this server."}),"\n",(0,s.jsx)(t.h3,{id:"mainjob",children:"MainJob"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property MainJob As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"$Job number of the main Studio process or blank if this is the main Studio connection. This can be used to help co-ordinate between the jobs if Studio is using another server process for things like find in files or a big compile."}),"\n",(0,s.jsx)(t.h3,{id:"iconstatus",children:"IconStatus"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property IconStatus As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Can be set to determine if we wish to report the source control status of the document in the project window or in the open dialog. This property should be set when the source control class is initialized. As this can be a large number of callbacks the default is not to call the ItemIconState method at all. Do not enable this unless the information needed is available directly in InterSystems IRIS or the performance will be too slow. Values are:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"0 - Disabled"}),"\n",(0,s.jsx)(t.li,{children:"1 - Use ItemIconState callback in project window"}),"\n",(0,s.jsx)(t.li,{children:"2 - Use ItemIconState callback in open dialog window (and namespace window)"}),"\n",(0,s.jsx)(t.li,{children:"3 - Use ItemIconState callback everywhere"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"modified",children:"Modified"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Modified As %String [ MultiDimensional ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"If the root node is set to 1 then calls to the source control hooks will keep track if the source control hook modifies the document and if it does then it will set %SourceControl.Modified(docname)=1."}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnNew(initval As %String) As %Status [ Final ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This just calls the Login to perform an initialisation. Note that this is called by Studio automatically via the %Studio.SourceControl.Interface class, do not call %New directly."}),"\n",(0,s.jsx)(t.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status\n"})}),"\n",(0,s.jsx)(t.h3,{id:"login",children:"Login"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Login(Name As %String, Password As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Perform any login step here."}),"\n",(0,s.jsx)(t.h3,{id:"logout",children:"Logout"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Logout() As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Perform any logout step here."}),"\n",(0,s.jsx)(t.h3,{id:"onbeforeload",children:"OnBeforeLoad"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnBeforeLoad(InternalName As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"This is called before the actual load of data to give the chance to load the item from an external format."}),"\n",(0,s.jsx)(t.h3,{id:"onafterload",children:"OnAfterLoad"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnAfterLoad(InternalName As %String, Object As %RegisteredObject = {$$$NULLOREF}) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"This is called after the item is loaded but before it is sent to Studio so you have a chance to modify this copy before it appears in the editor. It is passed a reference to the object that represents this item so it can be modified before Studio reads this information."}),"\n",(0,s.jsx)(t.h3,{id:"onbeforesave",children:"OnBeforeSave"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method OnBeforeSave(InternalName As %String, Location As %String = "", Object As %RegisteredObject = {$$$NULLOREF}) As %Status\n'})}),"\n",(0,s.jsx)(t.p,{children:"Called before the item is saved to the database it is passed a reference to the current temporary storage of this item so that it can be modified before the save completes. If you quit with an error value then it will abort the save."}),"\n",(0,s.jsx)(t.h3,{id:"onaftersave",children:"OnAfterSave"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnAfterSave(InternalName As %String, Object As %RegisteredObject = {$$$NULLOREF}) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"This is called after the item has been saved to the database. It may be passed a reference to the object representing the item just saved. It can be use to export this documement to an external form for example."}),"\n",(0,s.jsx)(t.h3,{id:"onafterstorage",children:"OnAfterStorage"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method OnAfterStorage(InternalName As %String, Location As %String = "") As %Status\n'})}),"\n",(0,s.jsx)(t.p,{children:"This is called if you compile a class and the compilation updates the class storage. It is called after the storage has been updated so you can determine how to deal with this change in the class. The Location is the global reference to the class definition that was changed."}),"\n",(0,s.jsx)(t.h3,{id:"onbeforecompile",children:"OnBeforeCompile"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnBeforeCompile(InternalName As %String, ByRef qstruct As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Called before the compile of the item is done. It is passed a qstruct which can be inspected and modified."}),"\n",(0,s.jsx)(t.h3,{id:"onaftercompile",children:"OnAfterCompile"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnAfterCompile(InternalName As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Called after the compile of the item is done."}),"\n",(0,s.jsx)(t.h3,{id:"onbeforeclasscompile",children:"OnBeforeClassCompile"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnBeforeClassCompile(List As %String, Level As %Integer, ByRef qstruct As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Called in the class compiler after we have resolved the list of classes to be compiled but before we have started the compile itself. List is a subscripted array of items that will be compiled."}),"\n",(0,s.jsx)(t.h3,{id:"onafterclasscompile",children:"OnAfterClassCompile"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnAfterClassCompile(List As %String, Level As %Integer, ByRef qstruct As %String, Status As %Status) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Called in the class compiler after we have compiled all the classes before we exit. List is a subscripted array of items that were compiled. Status is the current compile return error %Status, so the callback can check if there was any error in compiling the list of classes."}),"\n",(0,s.jsx)(t.h3,{id:"onbeforeallclasscompile",children:"OnBeforeAllClassCompile"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod OnBeforeAllClassCompile(List As %String, Level As %Integer, ByRef qstruct As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Called in the activated source control class before starting a compile after we have resolved the list of classes but before we have started the compile itself. Note that this is a class method and it does not require the source control class to be instantiated in order for it to be called. By default it will call the OnBeforeClassCompile if there is a source control class instantiated, but you can override this to do whatever you require. Returning an error here will abort the compile. List is a subscripted array of items that will be compiled."}),"\n",(0,s.jsx)(t.h3,{id:"onafterallclasscompile",children:"OnAfterAllClassCompile"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod OnAfterAllClassCompile(List As %String, Level As %Integer, ByRef qstruct As %String, Status As %Status) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Called in the activated source control class after we have compiled all the classes but before we exit. Note that this is a class method and it does not require the source control class to be instantiated in order for it to be called. By default it will call the OnAfterClassCompile if there is a source control class instantiated, but you can override this to do whatever you require. List is a subscripted array of items that were compiled. Status is the current compile return error %Status, so the callback can check if there was any error in compiling the list of classes."}),"\n",(0,s.jsx)(t.h3,{id:"onbeforedelete",children:"OnBeforeDelete"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnBeforeDelete(InternalName As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Called before an item is deleted. Returning an error code prevents the delete from occurring."}),"\n",(0,s.jsx)(t.h3,{id:"onafterdelete",children:"OnAfterDelete"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnAfterDelete(InternalName As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Called after an item is deleted."}),"\n",(0,s.jsx)(t.h3,{id:"getstatus",children:"GetStatus"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetStatus(InternalName As %String, ByRef IsInSourceControl As %Boolean, ByRef Editable As %Boolean, ByRef IsCheckedOut As %Boolean, ByRef UserCheckedOut As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return information about this entity."}),"\n",(0,s.jsx)(t.h3,{id:"isreadonly",children:"IsReadOnly"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method IsReadOnly(InternalName As %String) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return true if this item should be marked as read only. This is called when Studio opens a document. It is set to indicate that the user checked the 'read only' checkbox in the open dialog in Studio."}),"\n",(0,s.jsx)(t.h3,{id:"isinsourcecontrol",children:"IsInSourceControl"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method IsInSourceControl(InternalName As %String) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns true if this item is in source control and false otherwise."}),"\n",(0,s.jsx)(t.h3,{id:"itemiconstate",children:"ItemIconState"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method ItemIconState(InternalName As %String) As %Integer\n"})}),"\n",(0,s.jsx)(t.p,{children:"Used to allow Studio to display different icons in open dialog or project window etc. Return values are:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"0 - Not in source control"}),"\n",(0,s.jsx)(t.li,{children:"1 - In source control, not checked out"}),"\n",(0,s.jsx)(t.li,{children:"2 - In source control and checked out so item is editable"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"onbeforetimestamp",children:"OnBeforeTimestamp"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnBeforeTimestamp(InternalName As %String)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Called before Studio checks for the timestamp of an item."}),"\n",(0,s.jsx)(t.h3,{id:"externalname",children:"ExternalName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method ExternalName(InternalName As %String) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Convert the internal name, e.g. TEST.MAC, to an external name that is used to export the routine/class/csp item. This is often a filename to write the file out to."}),"\n",(0,s.jsx)(t.h3,{id:"onmenuitem",children:"OnMenuItem"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnMenuItem(MenuName As %String, InternalName As %String, SelectedText As %String, ByRef Enabled As %Boolean, ByRef DisplayName As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Provide a list of the top level menu items that Studio will add when connecting to this namespace. For each of these top level menus Studio will call the MenuItems query to obtain the items in this menu when the top level menu is selected. Each top level menu has a 'Name' and a 'Type'. The type is 0 for regular top level menus and 1 to specify the name of the context submenu that will be added to all the context menus."}),"\n",(0,s.jsx)(t.p,{children:'Note that you can change the SQL statement or implement this query yourself. This is just an example of where you can start. This query is called by Studio when the top level menu is selected and it returns the list of items that will appear on this menu. It is passed the name of the menu and the name of the current document that has focus or "" if there are no documents open. The fields returned are:'}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Name - Name of this menu item"}),"\n",(0,s.jsx)(t.li,{children:"Enabled - True if this menu item is enabled, false to disable this menu item"}),"\n",(0,s.jsx)(t.li,{children:"Save - Flag to see if the current document or all documents should be saved before running this item"}),"\n",(0,s.jsx)(t.li,{children:"Separator - True if this is a menu separator\nNote that you can change the SQL statement or implement this query yourself. This is just an example of where you can start. This is called for every menu item returned to Studio to allow the menu to be enabled/disabled without having to write a custom query for MenuItems. The DisplayName of this menu is also passed by reference and this may be modified to change the appearance of this menu item. The MenuName is the main menu name then the submenu name separated by a ','. If Enabled is set to -1 then it will remove this menu item from the list totally, 0 will gray the menu item out, and the default 1 will display the menu item as normal."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"useraction",children:"UserAction"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method UserAction(Type As %Integer, Name As %String, InternalName As %String, SelectedText As %String, ByRef Action As %String, ByRef Target As %String, ByRef Msg As %String, ByRef Reload As %Boolean) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"This is called when the user performs an action that may need to interact with the server, such as selecting a menu or adding a new document. This encompases what the deprecated Flags parameter did and allows additional flexibility."}),"\n",(0,s.jsx)(t.p,{children:"The Type argument values are:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"0 : Server defined menu item selected"}),"\n",(0,s.jsxs)(t.li,{children:["1 : Other Studio action\nWhen a menu item is selected the Name argument is the name of this menu item in the format '",(0,s.jsxs)(t.mainmenu,{children:[",",(0,s.jsx)(t.submenu,{children:"'. For other Studio actions the Name argument is one of:"})]})]}),"\n",(0,s.jsx)(t.li,{children:"0 : User has tried to change a document that is locked in source control"}),"\n",(0,s.jsx)(t.li,{children:"1 : User has created a new document"}),"\n",(0,s.jsx)(t.li,{children:"2 : User has deleted a document"}),"\n",(0,s.jsx)(t.li,{children:"3 : User has opened a document"}),"\n",(0,s.jsx)(t.li,{children:"4 : User has closed a document"}),"\n",(0,s.jsx)(t.li,{children:"5 : User has connected to a new namespace"}),"\n",(0,s.jsx)(t.li,{children:"6 : User has selected to import comma delimetered list of documents"}),"\n",(0,s.jsx)(t.li,{children:"7 : User has saved a new document for the first time\nThe InternalName argument is the name of the document about which this action occurs. If there is any selected text in the document which has focus this is sent in the SelectedText argument. The Action argument is set by this method to tell Studio what to do. Possible return values for this are:"}),"\n",(0,s.jsx)(t.li,{children:"0 : Do nothing, note that this method can still perform some action such as check an item out of source control, but Studio will not ask for user input."}),"\n",(0,s.jsx)(t.li,{children:"1 : Display the default Studio dialog with a yes/no/cancel button. The text for this dialog is provided in the 'Target' return argument."}),"\n",(0,s.jsx)(t.li,{children:"2 - Run a CSP page/Template. The Target is the full url to the CSP page/Template, as usual the page will be passed the current document name, any selected text, the project name, the namespace."}),"\n",(0,s.jsx)(t.li,{children:"3 - Run an EXE on the client. The Target is the name of an executable file on the client machine. It is the responsibility of the customer to ensure this EXE is installed in a suitable location."}),"\n",(0,s.jsx)(t.li,{children:"4 - Insert the text in Target in the current document at the current selection point."}),"\n",(0,s.jsx)(t.li,{children:"5 - Studio will open the documents listed in Target. If there are multiple documents to open they will be separated with commas. If the document name is 'test.mac:label+10' it will open the document 'test.mac' and goto 'label+10'."}),"\n",(0,s.jsx)(t.li,{children:"6 - Display an alert dialog in Studio with the text from the Target variable."}),"\n",(0,s.jsx)(t.li,{children:"7 - Display a dialog with a textbox and Yes/No/Cancel buttons. The text for this dialog is provided by the 'Target' return argument. The initial text for the textbox is provided by the 'Msg' return argument.\nIf the Reload argument is set to true then the current document will be reloaded in Studio. This is useful if you change the document to change its attribute so Studio will pick up these changes."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"afteruseraction",children:"AfterUserAction"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method AfterUserAction(Type As %Integer, Name As %String, InternalName As %String, Answer As %Integer, Msg As %String = "", ByRef Reload As %Boolean) As %Status\n'})}),"\n",(0,s.jsx)(t.p,{children:"This is called after the UserAction and after any template is run or dialog is displayed. For a list of input arguments see UserAction. In the case of the dialog the button pushed by the user is passed in Answer:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"0 - No"}),"\n",(0,s.jsx)(t.li,{children:"1 - Yes"}),"\n",(0,s.jsx)(t.li,{children:"2 - Cancel\nFor the dialog that contains a textbox field the text of this field is passed in 'Msg' argument. In the case of a template if the template was closed from the 'x' button then Answer=2 to indicate the user attempted to cancel the operation. Otherwise if the template closed normally by getting to the end Answer=1. For the cases where Studio did not perform any interaction this method is not called. The default implementation is to call the standard source control tags . If the Reload argument is set to true by this method then the current document will be reloaded in Studio."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"isgenerated",children:"IsGenerated"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod IsGenerated(Name As %String) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return 1 if you wish this item to appear as if it is 'generated' when opened in Studio, return 0 to force this item not to appear as 'generated' and return \"\" to use normal processing."})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var s=n(96540);const i={},a=s.createContext(i);function l(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);