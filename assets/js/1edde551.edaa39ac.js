"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[1553],{86512:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>a,default:()=>c,frontMatter:()=>r,toc:()=>t});var i=n(74848),l=n(28453);const r={pagination_prev:null,pagination_next:null},a="%SYSTEM.SQL.Schema",t=[{value:"Methods",id:"methods",level:2},{value:"CreateLinkedProcedure",id:"createlinkedprocedure",level:3},{value:"CreateLinkedTable",id:"createlinkedtable",level:3},{value:"Default",id:"default",level:3},{value:"SetDefault",id:"setdefault",level:3},{value:"DropTable",id:"droptable",level:3},{value:"DropView",id:"dropview",level:3},{value:"ExportDDL",id:"exportddl",level:3},{value:"GetAllColumns",id:"getallcolumns",level:3},{value:"GetVisibleColumns",id:"getvisiblecolumns",level:3},{value:"GetSchemaFromPackage",id:"getschemafrompackage",level:3},{value:"ImportDDL",id:"importddl",level:3},{value:"ImportDDLDir",id:"importddldir",level:3},{value:"ImportDir",id:"importdir",level:3},{value:"LoadFDBMS",id:"loadfdbms",level:3},{value:"LoadInformix",id:"loadinformix",level:3},{value:"LoadInterBase",id:"loadinterbase",level:3},{value:"LoadMSSQLServer",id:"loadmssqlserver",level:3},{value:"LoadOracle",id:"loadoracle",level:3},{value:"LoadSybase",id:"loadsybase",level:3},{value:"LoadTSQL",id:"loadtsql",level:3},{value:"ProcedureExists",id:"procedureexists",level:3},{value:"QueryToTable",id:"querytotable",level:3},{value:"Run",id:"run",level:3},{value:"TableExists",id:"tableexists",level:3},{value:"ValidateTable",id:"validatetable",level:3},{value:"ViewExists",id:"viewexists",level:3}];function d(e){const s={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"systemsqlschema",children:"%SYSTEM.SQL.Schema"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"Class %SYSTEM.SQL.Schema Extends %SYSTEM.Help [ Abstract, Owner = {_PUBLIC}, Not ProcedureBlock, System = 4 ]\n"})}),"\n",(0,i.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(s.h3,{id:"createlinkedprocedure",children:"CreateLinkedProcedure"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CreateLinkedProcedure(dsn As %String, externalSchema As %String, externalProcedure As %String, localPackage As %String = "LinkedSchema", localClass As %String = "LinkedProcedure", localMethod As %String = "", localSqlName As %String = "", description As %String = "") As %Status\n'})}),"\n",(0,i.jsx)(s.p,{children:"Create a linked process"}),"\n",(0,i.jsx)(s.p,{children:"dsn - Data Source Name"}),"\n",(0,i.jsx)(s.p,{children:"externalSchema - Schema name of the linked stored procedure of external source"}),"\n",(0,i.jsx)(s.p,{children:"externalProcedure - External selected Stored Procedure name"}),"\n",(0,i.jsx)(s.p,{children:'localPackage - New Stored Procedure\'s Package name. Default value is "LinkedSchema".'}),"\n",(0,i.jsx)(s.p,{children:'localClass - New class name for the new Linked stored procedure. Default value is "LinkedProcedures"'}),"\n",(0,i.jsx)(s.p,{children:"localMethod - Method name for the stored procedure. Default value is externalProcedure."}),"\n",(0,i.jsx)(s.p,{children:"localSqlName - New SQL name. Default value is externalProcedure."}),"\n",(0,i.jsx)(s.p,{children:"description - Description. Default value is empty"}),"\n",(0,i.jsx)(s.h3,{id:"createlinkedtable",children:"CreateLinkedTable"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CreateLinkedTable(dsn As %String, externalSchema As %String, externalTable As %String, primaryKeys As %String, localClass As %String = "User.LinkedClass", localTable As %String, ByRef columnMap As %String = "") As %Status\n'})}),"\n",(0,i.jsx)(s.p,{children:"Create a linked table"}),"\n",(0,i.jsx)(s.p,{children:"dsn - Data Source Name"}),"\n",(0,i.jsx)(s.p,{children:"externalSchema - Schema name of the linked table of external source"}),"\n",(0,i.jsx)(s.p,{children:"externalTable - The linked table name of external source"}),"\n",(0,i.jsx)(s.p,{children:"primaryKeys - The fields for the primary key of new created table."}),"\n",(0,i.jsx)(s.p,{children:'Multiple fields are separated by comma. The primary key\'s field(s) should be specified as the "new class property name" if you do not use the original field name of the external source'}),"\n",(0,i.jsx)(s.p,{children:"You at least have to specify one field for this primaryKey."}),"\n",(0,i.jsx)(s.p,{children:'localClass - The new linked class name. The default value is "User.LinkedClass"'}),"\n",(0,i.jsx)(s.p,{children:"localTable - The new table name for the linked class. Default value is localClass"}),"\n",(0,i.jsx)(s.p,{children:'columnMap - The linked fields of the external table. Default is to map everything as read-only columns if you don\'t specify anything in the map. Otherwise, specify the fields in the below format. columnMap("external field name") = $lb("new class property name","new sql field name","read-only"(1/0)) or use external field name as default values by specifying columnMap("external field name") = "". "new class property name" and "new sql field name" could be defined empty and "external field name" would be used as their default values "read only" default is on.'}),"\n",(0,i.jsx)(s.p,{children:"Below is example for linking a table from MySQL"}),"\n",(0,i.jsx)(s.p,{children:"Use these commands to create a table in MySQL"}),"\n",(0,i.jsx)(s.p,{children:"in MySQL shell:"}),"\n",(0,i.jsx)(s.p,{children:"create database test1;"}),"\n",(0,i.jsx)(s.p,{children:"use test1;"}),"\n",(0,i.jsx)(s.p,{children:"create table Person(PID int,name varchar(255));"}),"\n",(0,i.jsx)(s.p,{children:'insert into Person(PID,name) values(1,"Cache")'}),"\n",(0,i.jsx)(s.p,{children:"in Cache Terminal:"}),"\n",(0,i.jsx)(s.p,{children:'$SYSTEM.SQL.Schema.CreateLinkedTable(dsn,"","Person","PID,name","User.LinkedClass","LinkedTable","")'}),"\n",(0,i.jsx)(s.p,{children:'would link all the fields of the table test1.Person from MySQL to the Cache class "User.LinkedTable"'}),"\n",(0,i.jsx)(s.p,{children:"and use both PID and name as primary keys"}),"\n",(0,i.jsx)(s.h3,{id:"default",children:"Default"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Default() As %Library.String [ CodeMode = expression, ProcedureBlock = 1, SqlName = DefaultSchema, SqlProc ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Return the default schema name for the current process in the current namespace"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(s.p,{children:"Set CurrentSchema = $SYSTEM.SQL.Schema.Default() This method can also be called as a Stored Procedure named %SYSTEM_SQL.DefaultSchema()"}),"\n",(0,i.jsx)(s.h3,{id:"setdefault",children:"SetDefault"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SetDefault(schema As %Library.String = "", ByRef oldval As %Library.String, Namespace As %Library.Boolean = 0) As %Library.Status\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Sets the default schema used by SQL.",(0,i.jsx)(s.br,{}),"\nThis configuration setting provides the ability to define a default schema name other than SQLUser, the default. When an unqualified table name is encountered in an SQL statement (and there is no #import statement specified), the default schema will be used. This setting has nothing to do with the mappings between SQL schema names and the class package name, it only specifies the default schema."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameter:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"schema"})," String containing the default SQL schema name. If ",(0,i.jsx)(s.em,{children:"schema"}),' is "" or not defined, the default schema will be set to SQLUser. ',(0,i.jsx)(s.em,{children:"oldval"})," Passed By Reference. Contains the previous value of the setting. ",(0,i.jsx)(s.em,{children:"Namespace"})," Boolean 1/0 flag. If TRUE, set the default schema for the current namespace only. The default for ",(0,i.jsx)(s.em,{children:"Namespace"})," is FALSE ",(0,i.jsx)(s.strong,{children:"Returns:"})," Status Code ",(0,i.jsx)(s.strong,{children:"NOTES:"})]}),"\n",(0,i.jsx)(s.p,{children:'- You must have the "USE" permission on the %Admin Manage Resource in order to change this configuration setting.'}),"\n",(0,i.jsx)(s.p,{children:"- Changing this configuration setting will affect all processes immediately."}),"\n",(0,i.jsx)(s.h3,{id:"droptable",children:"DropTable"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DropTable(tablename As %Library.String, dropData As %Library.Boolean = 0) As %Status\n"})}),"\n",(0,i.jsx)(s.p,{children:"This entry point can be used to delete a table definition."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"tablename"})," Name of the SQL table to delete. The name may be qualified with a schema name: ",(0,i.jsx)(s.em,{children:"Medical.Patient"}),". If the schema name is omitted, the default schema is used. ",(0,i.jsx)(s.em,{children:"dropData"})," TRUE(1)/FALSE(0) flag which determine if the table's data is to be deleted or not. If ",(0,i.jsx)(s.em,{children:"dropData"}),'="" or ',(0,i.jsx)(s.em,{children:"undefined"}),", use system flag to determine if data should be deleted. ",(0,i.jsx)(s.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'Do $SYSTEM.SQL.Schema.DropTable("MedLab.Patient",1)'}),"\n",(0,i.jsx)(s.li,{children:'Do $SYSTEM.SQL.Schema.DropTable("IscPerson",1) ; Deletes SQLUser.IscPerson'}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"dropview",children:"DropView"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DropView(viewname As %Library.String) As %Status\n"})}),"\n",(0,i.jsx)(s.p,{children:"This entry point can be used to delete a view definition."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"viewname"})," Name of the SQL view to delete. The name may be qualified with a schema name: ",(0,i.jsx)(s.em,{children:"Medical.PatientView"})," If the schema name is omitted, the default schema is used. ",(0,i.jsx)(s.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'Do $SYSTEM.SQL.Schema.DropView("MedLab.PatientView")'}),"\n",(0,i.jsx)(s.li,{children:'Do $SYSTEM.SQL.Schema.DropView("IscPersonView") ; Deletes SQLUser.IscPerson'}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"exportddl",children:"ExportDDL"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportDDL(schema As %String = "*", table As %String = "*", ByRef file As %String, qualifiers As %DynamicObject = "{}") As %Status\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Export a SQL DDL/DML script file containing Table/View definitions, User definitions, Role definitions, and/or Table/View Privileges based on the ",(0,i.jsx)(s.em,{children:"qualifiers"})," argument (see below)."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"Schema"}),' Name of the schema in the current namespace to export the privileges for. Use "*" to specify the export of SQL Privileges for all schemas in the current namespace. The default is "*". Note that when "*" is specified, \'%\' schemas (such as %Dictionary) are not exported. To export privileges for tables in a schema that begins with \'%\' you must explicitly specify that schema name in ',(0,i.jsx)(s.em,{children:"Schema"}),". ",(0,i.jsx)(s.em,{children:"Table"}),' Name of the table/view in the specified schema to export the privileges for. Use "*" to specify the export of SQL Privileges for all table/s views in the specified schema(s). The default is "*". Note that if you "*" for ',(0,i.jsx)(s.em,{children:"Schema"}),' the export will behave as if you entered "*" for ',(0,i.jsx)(s.em,{children:"Table"})," as well. For example there is no mechanism for exporting the Person table/view in each schema in the namespace. ",(0,i.jsx)(s.em,{children:"File"})," Name of the file to export the SQL statement to. ",(0,i.jsx)(s.em,{children:"qualifiers"}),' Specify any subset of the following arguments in in either dynamic object (e.g. {"FileOpenParam":"WNS","Roles":0}), json string (e.g. "{""FileOpenParam"":""WNS"",""Roles"":""0""}"), or legacy qualifier format (e.g. "/FileOpenParam=WNS/Roles=0"). All qualifier names are case insensitive. Note that variables can be embedded in dynamic objects with the format {"ParamName":(varName)}.']}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"FileOpenParam"})}),"\n",(0,i.jsxs)(s.p,{children:["Parameters to use when opening the ",(0,i.jsx)(s.em,{children:"File"}),'. The default is "WNS".']}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"Definitions"})}),"\n",(0,i.jsx)(s.p,{children:"1/0 flag. Specify 1 to export the table/view definitions. The default is 1."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"Users"})}),"\n",(0,i.jsx)(s.p,{children:"1/0 flag. Specify 1 to export the User definition. The default is 0."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"Roles"})}),"\n",(0,i.jsx)(s.p,{children:"1/0 flag. Specify 1 to export the Role definition, and the GRANT statements to assign the Roles to the Users and Roles they have been granted to. The default is 1."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"Privileges"})}),"\n",(0,i.jsxs)(s.p,{children:["1/0 flag. Specify 1 to export the Table and View privileges for the tables and views specified in the ",(0,i.jsx)(s.em,{children:"Schema"})," specification. The default is 1."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"SQLSystemPrivileges"})}),"\n",(0,i.jsx)(s.p,{children:"1/0 flag. Specify 1 to export the SQL System privileges defined in the current namespace for the users and roles. The default is 1."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"ForeignTables"})}),"\n",(0,i.jsx)(s.p,{children:"1/0 flag. Specify 1 to export foreign table definitions. The default is 1."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"ForeignServers"})}),"\n",(0,i.jsx)(s.p,{children:"1/0 flag. Specify 1 to export foreign server definitions. The default is 0."}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'Do $SYSTEM.SQL.Schema.ExportDDL("Sample","*","C:\\PT\\Sample.sql",{"FileOpenParam":"WNS","Users":0,"Roles":0,"Privileges":1,"SQLSystemPrivileges":1})'}),"\n",(0,i.jsx)(s.li,{children:'Do $SYSTEM.SQL.Schema.ImportDDL("C:\\DDT\\UsersAndRoles.sql")'}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"The method returns a Status Code."}),"\n",(0,i.jsx)(s.p,{children:'A file created via $SYSTEM.SQL.Schema.ExportDDL() can be imported using one of:  do $SYSTEM.SQL.Schema.ImportDDL(,,"IRIS")'}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["do $SYSTEM.SQL.Schema.Run()\nThe ExportDDL() method will ",(0,i.jsx)(s.strong,{children:"not"})," export the following users and roles - ",(0,i.jsx)(s.strong,{children:"Users:"})," SuperUser, Admin, UnknownUser, %System, CSPSystem, _SYSTEM, _PUBLIC ",(0,i.jsx)(s.strong,{children:"Roles:"})," %All, %Developer, %Manager, %Operator, %SQL, %LegacyTerminal, %LegacyCacheDirect, %LegacySQL"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"getallcolumns",children:"GetAllColumns"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetAllColumns(tablename As %String = "", ByRef byName As %String, ByRef byNumber As %String) As %Status [ ProcedureBlock = 1 ]\n'})}),"\n",(0,i.jsx)(s.p,{children:"Given a table name, return a list of columns by name with the column number, and a list of columns sorted by column number with the name. This includes all SQL hidden columns."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"tablename"})," Name of the table to return the columns for. Name is expected to be in the format Schema.Tablename If the name is unqualified, the default schema will be used. ",(0,i.jsx)(s.em,{children:"byName"}),' Passed By Reference. Returns columns ordered by column name with SqlColumnNumber as data. For example: byName("Id")=1,byName("Name")=2 ',(0,i.jsx)(s.em,{children:"byNumber"}),' Passed By Reference. Returns columns ordered by SqlColumnNumber with column name as data. For example: byName(1)="Id",byName(2)="Name" ',(0,i.jsx)(s.strong,{children:"Returns:"})," A %Status value"]}),"\n",(0,i.jsx)(s.h3,{id:"getvisiblecolumns",children:"GetVisibleColumns"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetVisibleColumns(tablename As %String = "", ByRef byName As %String, ByRef byNumber As %String) As %Status [ ProcedureBlock = 1 ]\n'})}),"\n",(0,i.jsx)(s.p,{children:"Given a table name, return a list of columns by name with the column number, and a list of columns sorted by column number with the name. This excludes all SQL hidden columns. SQL fields are defined as hidden if they are projected by a property defined as private, a RowID field defined as SqlRowIDPrivate, a RowID field for a linked table, a serial field that is not a collection and the storage structure is known, the %%CLASSNAME field, or a list or array collection property projected as a child table."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"tableName"})," Name of the table to return the columns for. Name is expected to be in the format Schema.Tablename If the name is unqualified, the default schema will be used. ",(0,i.jsx)(s.em,{children:"byName"}),' Passed By Reference. Returns columns ordered by column name with SqlColumnNumber as data. For example: byName("Id")=1,byName("Name")=2 ',(0,i.jsx)(s.em,{children:"byNumber"}),' Passed By Reference. Returns columns ordered by SqlColumnNumber with column name as data. For example: byName(1)="Id",byName(2)="Name" ',(0,i.jsx)(s.strong,{children:"Returns:"})," A %Status value"]}),"\n",(0,i.jsx)(s.h3,{id:"getschemafrompackage",children:"GetSchemaFromPackage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetSchemaFromPackage(packagename As %Library.String = "") As %Library.String [ Internal, SqlProc ]\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Given a package name, return the schema name This method can also be called as a Stored Procedure named %SYSTEM_SQL.Schema_GetSchemaFromPackage(",(0,i.jsx)(s.em,{children:"packagename"}),")"]}),"\n",(0,i.jsx)(s.h3,{id:"importddl",children:"ImportDDL"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ImportDDL(infile As %String = "", logfile As %String = "", DDLMode As %Library.String = "IRIS")\n'})}),"\n",(0,i.jsx)(s.p,{children:"Import a DDL/DML script file."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"infile"})," The full path name of the script file to import. This parameter is required. A ",(0,i.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"})," value may also be passed in with the filename and the TranslateTable to use for the file. (For information on translate tables, see ",(0,i.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=LANDING+TRANSLATETABLES",children:"Translation Tables"}),".) The first element is the file name and the second element is the TranslateTable for the input stream file. This is only supported for ",(0,i.jsx)(s.em,{children:"DDLMode"})," MSSQL, Sybase, Informix, or MySQL. ",(0,i.jsx)(s.em,{children:"logfile"})," The full path name of the file to report errors in. This parameter is optional. Default is the same as the ",(0,i.jsx)(s.em,{children:"infile"})," with a ",(0,i.jsx)(s.strong,{children:"_Errors.log"})," extension. ",(0,i.jsx)(s.em,{children:"DDLMode"})," Vendor from which the script file originated. This parameter is required. Supported values are:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"IRIS"}),"\n",(0,i.jsx)(s.li,{children:"CACHE"}),"\n",(0,i.jsx)(s.li,{children:"FDBMS"}),"\n",(0,i.jsx)(s.li,{children:"Informix"}),"\n",(0,i.jsx)(s.li,{children:"Interbase"}),"\n",(0,i.jsx)(s.li,{children:"MSSQL"}),"\n",(0,i.jsx)(s.li,{children:"MSSQLServer - same as MSSQL"}),"\n",(0,i.jsx)(s.li,{children:"MySQL"}),"\n",(0,i.jsx)(s.li,{children:"Oracle"}),"\n",(0,i.jsx)(s.li,{children:"Sybase"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["When ",(0,i.jsx)(s.em,{children:"DDLMode"}),"=IRIS, the following statements are supported:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"CREATE ..."}),"\n",(0,i.jsx)(s.li,{children:"DROP ..."}),"\n",(0,i.jsx)(s.li,{children:"TRUNCATE TABLE ..."}),"\n",(0,i.jsx)(s.li,{children:"ALTER ..."}),"\n",(0,i.jsx)(s.li,{children:"INSERT ..."}),"\n",(0,i.jsx)(s.li,{children:"UPDATE ..."}),"\n",(0,i.jsx)(s.li,{children:"DELETE ..."}),"\n",(0,i.jsx)(s.li,{children:"SET OPTION ..."}),"\n",(0,i.jsx)(s.li,{children:"GRANT ..."}),"\n",(0,i.jsx)(s.li,{children:"REVOKE ..."}),"\n",(0,i.jsx)(s.li,{children:"LOAD DATA ..."}),"\n",(0,i.jsx)(s.li,{children:"USE [DATABASE] ..."}),"\n",(0,i.jsx)(s.li,{children:"TUNE TABLE ..."}),"\n",(0,i.jsx)(s.li,{children:"FREEZE ..."}),"\n",(0,i.jsx)(s.li,{children:"UNFREEZE ..."}),"\n",(0,i.jsx)(s.li,{children:"LOCK ..."}),"\n",(0,i.jsx)(s.li,{children:"UNLOCK ..."}),"\n",(0,i.jsx)(s.li,{children:"BUILD INDEX ..."}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'Do $SYSTEM.SQL.Schema.ImportDDL("C:\\PT\\Patient.sql",,"Sybase")'}),"\n",(0,i.jsx)(s.li,{children:'Do $SYSTEM.SQL.Schema.ImportDDL("C:\\DDT\\all_tables.sql",all.log,"Oracle")'}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"importddldir",children:"ImportDDLDir"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ImportDDLDir(directory As %Library.String = "", DDLMode As %String = "", qualifiers As %DynamicObject = "{}") As %Status\n'})}),"\n",(0,i.jsx)(s.p,{children:"Import all DDL/DML script file in a given directory. All files with the extension .sql in the directory will be imported."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"directory"})," The full path name of the directory to import. This parameter is required. ",(0,i.jsx)(s.em,{children:"DDLMode"})," Vendor from which the script file originated. This parameter is required. Supported values are:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Informix"}),"\n",(0,i.jsx)(s.li,{children:"MSSQL"}),"\n",(0,i.jsx)(s.li,{children:"MSSQLServer - same as MSSQL"}),"\n",(0,i.jsxs)(s.li,{children:["Sybase\n",(0,i.jsx)(s.em,{children:"qualifiers"}),' Specify any subset of the following optional arguments in dynamic object format (e.g. {"logFile":"log.txt","eosDelimiter":";"}). Note that variables can be embedded in dynamic objects with the format {"ParamName":(varName)}, and all qualifier names are case insensitive.']}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"logFile"})}),"\n",(0,i.jsx)(s.p,{children:"The full path name of the file to report errors in. This parameter is Optional. Default is DDLImportDir.log in the directory loaded. If this parameter value is 1, a separate log file will be generated for each file loaded. The name of the log file will be the same as the file imported, but with the extension .log instead of .sql."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"eosDelimiter"})}),"\n",(0,i.jsxs)(s.p,{children:["End of statement delimiter. Will default to an appropriate value based on the value of ",(0,i.jsx)(s.em,{children:"%DDLMode"}),". This parameter is optional. ",(0,i.jsx)(s.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'Do $SYSTEM.SQL.Schema.ImportDDLDir("C:\\Work\\db1\\","Informix",{"logFile":"C:\\Work\\db1\\import.log","eosDelimiter":";"})'}),"\n",(0,i.jsx)(s.li,{children:'Do $SYSTEM.SQL.Schema.ImportDDLDir("C:\\Work\\db1\\","Informix",{"logFile":1,"eosDelimiter":";"})'}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"importdir",children:"ImportDir"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ImportDir(dialect As %String = "", directory As %Library.String = "", qualifiers As %DynamicObject = "{}") As %Status\n'})}),"\n",(0,i.jsx)(s.p,{children:"Import all DDL/DML script files in a given directory. All files with the extension .sql in the directory will be imported. The caller can optionally specify a comma delimited list of file extensions to import. Subdirectories are also recursively processed if the caller specifies the recurse qualifier as 1. The log for this command can be found in SQLImportDir.log within the input directory."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"dialect"}),": Vendor from which the script file originated. This parameter is required. Supported values are:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"MSSQL"}),"\n",(0,i.jsx)(s.li,{children:"MSSQLServer - same as MSSQL"}),"\n",(0,i.jsx)(s.li,{children:"Sybase"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"directory"})," The full path name of the directory to import. This parameter is required. ",(0,i.jsx)(s.em,{children:"qualifiers"}),' Specify any subset of the following optional arguments in dynamic object format (e.g. {"logFile":"importdir.log","echoMode":0}). Note that variables can be embedded in dynamic objects with the format {"ParamName":(varName)}, and all qualifier names are case insensitive.']}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"logFile"})}),"\n",(0,i.jsxs)(s.p,{children:["The full path name of the file to report errors in. Default is ",(0,i.jsx)(s.strong,{children:"SQLImportDir.log"})," in the directory loaded. If this parameter value is 1, a separate log file will be generated for each file loaded. The name of the log file will be the same as the file imported, but with the extension .log instead of .sql."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"extensions"})}),"\n",(0,i.jsx)(s.p,{children:'A comma delimited list of file extensions to import. Defaults to "sql".'}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"eosDelimiter"})}),"\n",(0,i.jsxs)(s.p,{children:["End of statement delimiter. Will default to an appropriate value based on the value of ",(0,i.jsx)(s.em,{children:"%DDLMode"}),"."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"recurse"})}),"\n",(0,i.jsxs)(s.p,{children:["0/1. If 1, then subdirectories of ",(0,i.jsx)(s.em,{children:"directory"})," will be recursively imported. This parameter defaults to 0."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"messageMode"})}),"\n",(0,i.jsx)(s.p,{children:"0/1. If true then all messages reported by executing imported statements will be displayed on the current device. Default is true."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"echoMode"})}),"\n",(0,i.jsx)(s.p,{children:"0/1. If true, all statement source is displayed on the current device. Default is true."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.em,{children:"errorPause"})}),"\n",(0,i.jsxs)(s.p,{children:["The number of seconds to pause when an error is reported. The default is five seconds. ",(0,i.jsx)(s.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'Do $SYSTEM.SQL.Schema.ImportDir("Sybase","C:\\Work\\db1\\",{"logFile":"C:\\Work\\db1\\import.log","extensions":"sql","eosDelimiter":";"})'}),"\n",(0,i.jsx)(s.li,{children:'Do $SYSTEM.SQL.Schema.ImportDir("Sybase","C:\\Work\\db1\\",{"logFile":"C:\\Work\\db1\\import.log","extensions":"sql,tab,sp","eosDelimiter":";","messageMode":1})'}),"\n",(0,i.jsx)(s.li,{children:'Do $SYSTEM.SQL.Schema.ImportDir("Sybase","C:\\Work\\db1\\",{"eosDelimiter":";"})'}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"loadfdbms",children:"LoadFDBMS"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LoadFDBMS() As %Library.String\n"})}),"\n",(0,i.jsx)(s.p,{children:"Import a FDBMS DDL script file."}),"\n",(0,i.jsx)(s.h3,{id:"loadinformix",children:"LoadInformix"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LoadInformix() As %Library.String\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Import an Informix DDL/DML script file.",(0,i.jsx)(s.br,{}),"\nThe Informix DDL/DML Import Utility supports the following statements:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"CREATE TABLE ..."}),"\n",(0,i.jsx)(s.li,{children:"ALTER TABLE ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE INDEX ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE VIEW ..."}),"\n",(0,i.jsx)(s.li,{children:"SET OPTION ..."}),"\n",(0,i.jsx)(s.li,{children:"GRANT { ALTER | SELECT | INSERT | UPDATE | DELETE | REFERENCES | ALL PRIVILEGES } ...\nStatements other than the ones above are not handled by the utility and must be added to your application manually (if applicable)."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"loadinterbase",children:"LoadInterBase"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LoadInterBase() As %Library.String\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Import an Interbase DDL/DML script file.",(0,i.jsx)(s.br,{}),"\nThe Interbase DDL/DML Import Utility supports the following statements:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"CREATE TABLE ..."}),"\n",(0,i.jsx)(s.li,{children:"ALTER TABLE ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE INDEX ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE UNIQUE INDEX ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE VIEW ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE ROLE ...\nStatements other than the ones above are not handled by the utility and must be added to your application manually (if applicable)."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"loadmssqlserver",children:"LoadMSSQLServer"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LoadMSSQLServer() As %Library.String\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Import an MS SQL Server DDL/DML script file.",(0,i.jsx)(s.br,{}),"\nThe MS SQL Server DDL/DML Import Utility supports the following statements:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"CREATE [GLOBAL TEMPORARY] TABLE ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE VIEW ..."}),"\n",(0,i.jsx)(s.li,{children:"ALTER TABLE ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE INDEX ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE CLUSTERED INDEX ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE UNIQUE INDEX ..."}),"\n",(0,i.jsx)(s.li,{children:"INSERT ..."}),"\n",(0,i.jsx)(s.li,{children:"UPDATE ..."}),"\n",(0,i.jsx)(s.li,{children:"DELETE ..."}),"\n",(0,i.jsx)(s.li,{children:"SET OPTION ...\nStatements other than the ones above are not handled by the utility and must be added to your application manually (if applicable)."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"loadoracle",children:"LoadOracle"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LoadOracle() As %Library.String\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Import an Oracle DDL/DML script file.",(0,i.jsx)(s.br,{}),"\nThe Oracle DDL/DML Import Utility supports the following statements:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"CREATE TABLE ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE VIEW ..."}),"\n",(0,i.jsx)(s.li,{children:"ALTER TABLE ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE INDEX ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE UNIQUE INDEX ..."}),"\n",(0,i.jsx)(s.li,{children:"DROP TABLE ..."}),"\n",(0,i.jsx)(s.li,{children:"DROP VIEW ..."}),"\n",(0,i.jsx)(s.li,{children:"DROP INDEX ..."}),"\n",(0,i.jsx)(s.li,{children:"INSERT ..."}),"\n",(0,i.jsx)(s.li,{children:"UPDATE ..."}),"\n",(0,i.jsx)(s.li,{children:"DELETE ..."}),"\n",(0,i.jsx)(s.li,{children:"SET OPTION ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE USER ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE ROLE ..."}),"\n",(0,i.jsx)(s.li,{children:"GRANT { SELECT | INSERT | UPDATE | DELETE | REFERENCES | ALL PRIVILEGES } ...\nStatements other than the ones above are not handled by the utility and must be added to your application manually (if applicable)."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"loadsybase",children:"LoadSybase"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LoadSybase() As %Library.String\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Import a Sybase DDL/DML script file.",(0,i.jsx)(s.br,{}),"\nThe Sybase DDL/DML Import Utility supports the following statements:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"CREATE [GLOBAL TEMPORARY] TABLE ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE VIEW ..."}),"\n",(0,i.jsx)(s.li,{children:"ALTER TABLE ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE INDEX ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE CLUSTERED INDEX ..."}),"\n",(0,i.jsx)(s.li,{children:"CREATE UNIQUE INDEX ..."}),"\n",(0,i.jsx)(s.li,{children:"INSERT ..."}),"\n",(0,i.jsx)(s.li,{children:"UPDATE ..."}),"\n",(0,i.jsx)(s.li,{children:"DELETE ..."}),"\n",(0,i.jsx)(s.li,{children:"SET OPTION ..."}),"\n",(0,i.jsx)(s.li,{children:"GRANT CONNECT ... (Same as SQL CREATE USER ...)"}),"\n",(0,i.jsx)(s.li,{children:"GRANT { ALTER | SELECT | INSERT | UPDATE | DELETE | REFERENCES | ALL PRIVILEGES } ...\nStatements other than the ones above are not handled by the utility and must be added to your application manually (if applicable)."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"loadtsql",children:"LoadTSQL"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LoadTSQL() As %Library.String [ ProcedureBlock = 1 ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Import a TSQL script file.",(0,i.jsx)(s.br,{}),"\nTSQL source files can contain any TSQL syntax supported by InterSystems IRIS TSQL.",(0,i.jsx)(s.br,{}),"\nThis API will put the caller to the SQL Shell in the default TSQL dialect as defined in the TSQL Compatibility Settings.",(0,i.jsx)(s.br,{}),"\nThe caller can then use the ",(0,i.jsxs)(s.strong,{children:["run [",(0,i.jsx)(s.em,{children:"filename"}),"]"]})," command from the shell to import the script file."]}),"\n",(0,i.jsx)(s.h3,{id:"procedureexists",children:"ProcedureExists"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ProcedureExists(procname As %Library.String = "", ByRef metadata As %String) As %Library.Boolean [ ProcedureBlock = 1, SqlProc ]\n'})}),"\n",(0,i.jsx)(s.p,{children:"This entry point can be used to determine if a stored procedure exists."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"procname"})," Name of the stored procedure to check.",(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.em,{children:"procname"})," can be qualified or unqualified. If unqualified, the default schema is applied. ",(0,i.jsx)(s.em,{children:"metadata"})," Passed by reference, optional argument.",(0,i.jsx)(s.br,{}),"\nIf the stored procedure exists, returns a ",(0,i.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$LIST"})," with the following information about the procedure: $ListBuild(SchemaName,ProcedureName,Classname that projected the stored procedure,Procedure type)"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'Write $SYSTEM.SQL.Schema.ProcedureExists("SQLUser.stpSalaryReport") // Writes a 1 if procedure SQLUser.stpSalaryReport exists'}),"\n",(0,i.jsx)(s.li,{children:'Write $SYSTEM.SQL.Schema.ProcedureExists("stpSalaryReport",.metadata) // Writes a 1 if procedure [DefaultSchema].stpSalaryReport exists, returns metadata=$lb("SQLUser","stpSalaryReport","User.stpSalaryReport","function")'}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Notes"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"If the user calling the function does not hold any privileges for the procedure, 0 will be returned."}),"\n",(0,i.jsx)(s.li,{children:"If a class exists that would project this procedure to SQL during compilation, but the class has not been compiled, 0 will be returned."}),"\n",(0,i.jsx)(s.li,{children:"If a procedure is marked as hidden, 0 will be returned."}),"\n",(0,i.jsxs)(s.li,{children:['metadata will be set to "" if 0 is returned by the function.\nThis method can also be called as a Stored Procedure named %SYSTEM_SQL.Schema_ProcedureExists(',(0,i.jsx)(s.em,{children:"procname"}),")"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"querytotable",children:"QueryToTable"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod QueryToTable(ByRef query As %Library.String, table As %Library.String, display As %Library.Boolean = 0) As %Status [ Deprecated, Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsxs)(s.strong,{children:["This method is now deprecated, in favour of the standard ",(0,i.jsx)(s.a,{href:"https://docs.intersystems.com/irislatest/csp/docbook/DocBook.UI.Page.cls?KEY=RSQL%5Fcreatetable#RSQL%5Fcreatetable%5Fargs%5Fquery",children:"CREATE TABLE t AS SELECT ..."})," command."]})}),"\n",(0,i.jsx)(s.p,{children:"Turn the results of a query into a table definition. This utility takes a query and the name of a new table and executes the query. The results of the query are turned into a new table of name 'table'."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"query"})," The query text to execute. query can be of the format:"]}),"\n",(0,i.jsx)(s.p,{children:'query="sql text" OR query = # of lines query(1) = sql line 1 query(n) = sql line n'}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"table"})," Name of the new SQL table to generate. The name may be qualified with a schema name: ",(0,i.jsx)(s.em,{children:"Medical.Patient"})," If the schema name is omitted, the default schema is used. ",(0,i.jsx)(s.em,{children:"display"})," TRUE(1)/FALSE(0) flag. Displays progress messages to the current device if TRUE. The default is FALSE (0)."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsx)(s.p,{children:'Do $SYSTEM.SQL.Schema.QueryToTable("SELECT * FROM MedLab.Patient WHERE Sex = \'Male\'","MedLab.MalePatient",1) Set query=3 Set query(1)="SELECT *" Set query(2)=" FROM ""Med Lab"".Patient"" Set query(3)=" WHERE Sex = \'Male\'" Do $SYSTEM.SQL.Schema.QueryToTable(.query,"""Med Lab"".MalePatient",1) Do $SYSTEM.SQL.Schema.QueryToTable("SELECT * FROM Patient WHERE Sex = \'Male\'","MalePatient",1) ; Creates SQLUser.MalePatient'}),"\n",(0,i.jsx)(s.h3,{id:"run",children:"Run"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Run() As %Status\n"})}),"\n",(0,i.jsx)(s.p,{children:"Import an IRIS SQL script file. For InterSystems IRIS SQL script files, the default end-of-statement marker is the string GO. The end-of-statement marker must be on a line by itself after the statement."}),"\n",(0,i.jsx)(s.h3,{id:"tableexists",children:"TableExists"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod TableExists(tablename As %Library.String = "", ByRef metadata As %String) As %Library.Boolean [ ProcedureBlock = 1, SqlProc ]\n'})}),"\n",(0,i.jsx)(s.p,{children:"This entry point can be used to determine if a base table exists."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"tablename"})," Name of the table to check.",(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.em,{children:"tablename"})," can be qualified or unqualified. If unqualified, the default schema is applied. ",(0,i.jsx)(s.em,{children:"metadata"})," Passed by reference, optional argument.",(0,i.jsx)(s.br,{}),"\nIf the table exists, returns a ",(0,i.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$LIST"})," with the following information about the table: $ListBuild(SchemaName,TableName,Classname that projected the table,System Flag)"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'Write $SYSTEM.SQL.Schema.TableExists("Sample.Person") // Writes a 1 if table Sample.Person exists'}),"\n",(0,i.jsx)(s.li,{children:'Write $SYSTEM.SQL.Schema.TableExists("Sample.Person",.metadata) // Writes a 1 if table Sample.Person exists, returns metadata=$lb("Sample","Person","Sample.Person","0")'}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Notes"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"If the user calling the function does not hold any privileges for the table, 0 will be returned."}),"\n",(0,i.jsx)(s.li,{children:"If a class exists that would project this table to SQL during compilation, but the class has not been compiled, 0 will be returned."}),"\n",(0,i.jsxs)(s.li,{children:['metadata will be set to "" if 0 is returned by the function.\nThis method can also be called as a Stored Procedure named %SYSTEM_SQL.Schema_TableExists(',(0,i.jsx)(s.em,{children:"tablename"}),")"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"validatetable",children:"ValidateTable"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ValidateTable(tablename As %Library.String = "", index As %BigInt = 0) As %Library.Status [ ProcedureBlock = 1, ReturnResultsets, SqlProc ]\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Validate data for a table",(0,i.jsx)(s.br,{}),"\nThis utility can be called via $SYSTEM.SQL.Schema.ValidateTable(tablename) or as the %SYSTEM_SQL.Schema_ValidateTable(tablename) stored procedure. This method/procedure returns a resultset that contains a row for each issue found with the table's data. If the resultset is empty, the table has no data validation issues. The table's data is checked for the following:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Each field's validation code from the IsValid method of the field's datatype"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Required fields do not have a null value"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Unique constraints do not have duplicate values"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Foreign Key fields reference valid rows in the referenced table"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"tablename"})," Name of the table to validate data. Must be a table name, not a view name. ",(0,i.jsx)(s.em,{children:"index"})," Internal use only"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,i.jsx)(s.p,{children:"Status Code"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Example"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'Set status=$SYSTEM.SQL.Schema.ValidateTable("Sample.Person") // Validates the data in the Sample.Person table'}),"\n",(0,i.jsx)(s.li,{children:'Set status=$SYSTEM.SQL.Schema.ValidateTable("Company") // Validates the data in the SQLUser.Company table'}),"\n",(0,i.jsx)(s.li,{children:"call %SYSTEM_SQL.Schema_ValidateTable('Sample.Person') // Validates the data in the Sample.Person table via SQL"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Notes"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"After calling $SYSTEM.SQL.Schema.ValidateTable(...), the resultset will be held in the %sqlcontext object. Do %sqlcontext.%Display() will dump the results to the current device"}),"\n",(0,i.jsx)(s.li,{children:"If the table is sharded, this should be called on the shard master table"}),"\n",(0,i.jsx)(s.li,{children:"There is no locking performed by the utility. If run on a table in a live system, you could receive false-positive error reports"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"viewexists",children:"ViewExists"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ViewExists(viewname As %Library.String = "", ByRef metadata As %String) As %Library.Boolean [ ProcedureBlock = 1, SqlProc ]\n'})}),"\n",(0,i.jsx)(s.p,{children:"This entry point can be used to determine if a view exists."}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"viewname"})," Name of the view to check.",(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.em,{children:"viewname"})," can be qualified or unqualified. If unqualified, the default schema is applied. ",(0,i.jsx)(s.em,{children:"metadata"})," Passed by reference, optional argument.",(0,i.jsx)(s.br,{}),"\nIf the view exists, returns a ",(0,i.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$LIST"})," with the following information about the view: $ListBuild(SchemaName,ViewName,Classname that projected the view,System Flag)"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'Write $SYSTEM.SQL.Schema.ViewExists("SQLUser.STestView") // Writes a 1 if view SQLUser.STestView exists'}),"\n",(0,i.jsx)(s.li,{children:'Write $SYSTEM.SQL.Schema.ViewExists("STestView",.metadata) // Writes a 1 if view [DefaultSchema].STestView exists, returns metadata=$lb("SQLUser","STestView","User.STestView","0")'}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Notes"}),":"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"If the user calling the function does not hold any privileges for the view, 0 will be returned."}),"\n",(0,i.jsx)(s.li,{children:"If a class exists that would project this view to SQL during compilation, but the class has not been compiled, 0 will be returned."}),"\n",(0,i.jsx)(s.li,{children:"If a class that projects the view is marked as hidden, 0 will be returned."}),"\n",(0,i.jsxs)(s.li,{children:['metadata will be set to "" if 0 is returned by the function.\nThis method can also be called as a Stored Procedure named %SYSTEM_SQL.Schema_ViewExists(',(0,i.jsx)(s.em,{children:"viewname"}),")"]}),"\n"]})]})}function c(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>t});var i=n(96540);const l={},r=i.createContext(l);function a(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);