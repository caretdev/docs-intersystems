"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[46321],{14665:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>l,default:()=>o,frontMatter:()=>n,toc:()=>i});var r=s(74848),a=s(28453);const n={pagination_prev:null,pagination_next:null},l="%Library.SQLCatalog",i=[{value:"Methods",id:"methods",level:2},{value:"SQLClassname",id:"sqlclassname",level:3},{value:"SQLCachedQueryInfoExecute",id:"sqlcachedqueryinfoexecute",level:3},{value:"SQLCachedQueryInfoFetch",id:"sqlcachedqueryinfofetch",level:3},{value:"SQLCachedQueryInfoClose",id:"sqlcachedqueryinfoclose",level:3},{value:"SQLCachedQueryTableExecute",id:"sqlcachedquerytableexecute",level:3},{value:"SQLCachedQueryTableFetch",id:"sqlcachedquerytablefetch",level:3},{value:"SQLCachedQueryTableClose",id:"sqlcachedquerytableclose",level:3},{value:"GetCachedQueryInfo",id:"getcachedqueryinfo",level:3},{value:"GetCachedQueryTableCount",id:"getcachedquerytablecount",level:3},{value:"SQLChildTablesExecute",id:"sqlchildtablesexecute",level:3},{value:"SQLChildTablesFetch",id:"sqlchildtablesfetch",level:3},{value:"SQLChildTablesClose",id:"sqlchildtablesclose",level:3},{value:"SQLCODEListExecute",id:"sqlcodelistexecute",level:3},{value:"SQLCODEListFetch",id:"sqlcodelistfetch",level:3},{value:"SQLCODEListClose",id:"sqlcodelistclose",level:3},{value:"SQLConstraintsExecute",id:"sqlconstraintsexecute",level:3},{value:"SQLConstraintsFetch",id:"sqlconstraintsfetch",level:3},{value:"SQLConstraintsClose",id:"sqlconstraintsclose",level:3},{value:"SQLFieldsExecute",id:"sqlfieldsexecute",level:3},{value:"SQLFieldsFetch",id:"sqlfieldsfetch",level:3},{value:"SQLFieldsClose",id:"sqlfieldsclose",level:3},{value:"SQLForeignKeysExecute",id:"sqlforeignkeysexecute",level:3},{value:"SQLForeignKeysFetch",id:"sqlforeignkeysfetch",level:3},{value:"SQLForeignKeysClose",id:"sqlforeignkeysclose",level:3},{value:"SQLIndicesExecute",id:"sqlindicesexecute",level:3},{value:"SQLIndicesFetch",id:"sqlindicesfetch",level:3},{value:"SQLIndicesClose",id:"sqlindicesclose",level:3},{value:"SQLParentTableExecute",id:"sqlparenttableexecute",level:3},{value:"SQLParentTableFetch",id:"sqlparenttablefetch",level:3},{value:"SQLParentTableClose",id:"sqlparenttableclose",level:3},{value:"SQLProceduresExecute",id:"sqlproceduresexecute",level:3},{value:"SQLProceduresFetch",id:"sqlproceduresfetch",level:3},{value:"SQLProceduresClose",id:"sqlproceduresclose",level:3},{value:"SQLProcedureInfoExecute",id:"sqlprocedureinfoexecute",level:3},{value:"SQLProcedureInfoFetch",id:"sqlprocedureinfofetch",level:3},{value:"SQLProcedureInfoClose",id:"sqlprocedureinfoclose",level:3},{value:"SQLRelationshipsExecute",id:"sqlrelationshipsexecute",level:3},{value:"SQLRelationshipsFetch",id:"sqlrelationshipsfetch",level:3},{value:"SQLRelationshipsClose",id:"sqlrelationshipsclose",level:3},{value:"SQLReservedWordsExecute",id:"sqlreservedwordsexecute",level:3},{value:"SQLReservedWordsFetch",id:"sqlreservedwordsfetch",level:3},{value:"SQLReservedWordsClose",id:"sqlreservedwordsclose",level:3},{value:"SQLTablesExecute",id:"sqltablesexecute",level:3},{value:"SQLTablesFetch",id:"sqltablesfetch",level:3},{value:"SQLTablesClose",id:"sqltablesclose",level:3},{value:"SQLTriggersExecute",id:"sqltriggersexecute",level:3},{value:"SQLTriggersFetch",id:"sqltriggersfetch",level:3},{value:"SQLTriggersClose",id:"sqltriggersclose",level:3},{value:"SQLViewFieldsExecute",id:"sqlviewfieldsexecute",level:3},{value:"SQLViewFieldsFetch",id:"sqlviewfieldsfetch",level:3},{value:"SQLViewFieldsClose",id:"sqlviewfieldsclose",level:3},{value:"SQLViewInfoExecute",id:"sqlviewinfoexecute",level:3},{value:"SQLViewInfoFetch",id:"sqlviewinfofetch",level:3},{value:"SQLViewInfoClose",id:"sqlviewinfoclose",level:3},{value:"SQLViewDependsOnExecute",id:"sqlviewdependsonexecute",level:3},{value:"SQLViewDependsOnFetch",id:"sqlviewdependsonfetch",level:3},{value:"SQLViewDependsOnClose",id:"sqlviewdependsonclose",level:3},{value:"SQLTableStatementsExecute",id:"sqltablestatementsexecute",level:3},{value:"SQLTableStatementsFetch",id:"sqltablestatementsfetch",level:3},{value:"SQLTableStatementsClose",id:"sqltablestatementsclose",level:3},{value:"MakePat",id:"makepat",level:3}];function c(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"librarysqlcatalog",children:"%Library.SQLCatalog"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Library.SQLCatalog Extends %RegisteredObject [ Owner = {_PUBLIC}, Not ProcedureBlock, System = 3 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"SQL Catalog Queries"}),"\n",(0,r.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(t.h3,{id:"sqlclassname",children:"SQLClassname"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLClassname(qh As %Library.SQLProcContext, table As %String(MAXLEN=257)) As %Library.String [ ProcedureBlock = 1, SqlProc ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLClassname Procedure \t%SQLCatalog_SQLClassname('tablename') \t\tTakes 1 %String/VARCHAR type parameter which is the name of a BaseTable. \t\tIf 'tablename' is not qualified, the default schema will be added to the name. \t\tReturns The name of the class which projected the table -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqlcachedqueryinfoexecute",children:"SQLCachedQueryInfoExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLCachedQueryInfoExecute(ByRef qh As %Binary, stripOptions As %Boolean = 0) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"The SQLCachedQueryInfo query returns a list of cached queries. Note that only the first 80 characters of a query are returned. -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLCachedQueryInfo Procedure \t%SQLCatalog_SQLCachedQueryInfo(stripOptions=0) \t\tTakes one %Boolean type parameter which determines if the QUERY contains any /*#OPTIONS ... string added to xDBC statements.  Default is 0. \t\tReturns Cached Queries the current user is privileged to see \t\tROWSPEC = ROUTINE:%String\t\t- Name of the Cached Query's routine \t\t\t  QUERY:%String \t\t- Cached Query's SQL Text \t\t\t  CREATE_TIME:%TimeStamp \t- Date/Time of Cached Query creation \t\t\t  SOURCE:%Boolean \t\t- Cached Query source there? \t\t\t  QUERYTYPE:%Integer\t\t- 6 or 7 \t\t\t  QUERYTYPE_EXT:%String\t\t- ODBC QUERY OR DYNAMIC QUERY \t\t\t  COST:%Numeric\t\t\t- Generated Cost of the query \t\tRows are returned in no particular order -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqlcachedqueryinfofetch",children:"SQLCachedQueryInfoFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLCachedQueryInfoFetch(ByRef qh As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlcachedqueryinfoclose",children:"SQLCachedQueryInfoClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLCachedQueryInfoClose(qh As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlcachedquerytableexecute",children:"SQLCachedQueryTableExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLCachedQueryTableExecute(ByRef qh As %Binary, %table As %String, stripOptions As %Boolean = 0) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"The SQLCachedQueryTable query returns a list of cached queries for a given table. -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLCachedQueryTable Procedure \t\t%SQLCatalog_SQLCachedQueryTable('tablename',stripOptions=0) \t\tTakes two parameters: \t\t\t1) %String/VARCHAR type parameter which is the name of a table. \t\t\t2) %Boolean type parameter which determines if the QUERY contains any /*#OPTIONS ... string added to xDBC statements.  Default is 0. \t\tReturns Cached Queries on this table the current user is privileged to see \t\tROWSPEC = ROUTINE:%String\t\t- Name of the Cached Query's routine \t\t\tQUERY:%String\t\t\t\t- Cached Query's SQL Text (First 80 characters) \t\t\tCREATE_TIME:%TimeStamp\t\t- Date/Time of Cached Query creation \t\t\tSOURCE:%Boolean\t\t\t\t- Cached Query source there? \t\t\tQUERYTYPE:%Integer\t\t\t- 8 (Dynamic), 9 (xDBC), 10 (Dynamic), 11 (Embedded) \t\t\tQUERYTYPE_EXT:%String\t\t- ODBC QUERY OR DYNAMIC QUERY \t\t\tCOST:%Numeric\t\t\t\t- Generated Cost of the query \t\tRows are returned in no particular order -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqlcachedquerytablefetch",children:"SQLCachedQueryTableFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLCachedQueryTableFetch(ByRef qh As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlcachedquerytableclose",children:"SQLCachedQueryTableClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLCachedQueryTableClose(qh As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"getcachedqueryinfo",children:"GetCachedQueryInfo"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetCachedQueryInfo(Routine As %String, ByRef CreateTime As %TimeStamp, ByRef Source As %Boolean, ByRef QueryType As %Integer, ByRef Cost As %Numeric) As %String [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Returns information about the cached query Routine."}),"\n",(0,r.jsx)(t.p,{children:"Returns a string containing the query text for the cached query. Returns the create times by reference."}),"\n",(0,r.jsx)(t.p,{children:"Source indicates that there is source for the routine and QueryType indicates whether it is a ODBC query or a Dynamic query."}),"\n",(0,r.jsx)(t.h3,{id:"getcachedquerytablecount",children:"GetCachedQueryTableCount"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetCachedQueryTableCount(tablename As %String) As %Integer [ ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Given a tablename, return a count of Cached Queries currently defined against the table."}),"\n",(0,r.jsx)(t.h3,{id:"sqlchildtablesexecute",children:"SQLChildTablesExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLChildTablesExecute(ByRef %q As %Binary, table As %String) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Get a List of all child tables of a given table. -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLChildTables Procedure \t%Library.SQLCatalog_SQLChildTables('tablename') \t\tTakes 1 %String/VARCHAR type parameter which is the name of a BaseTable. \t\tReturns any child tables this table has \t\tROWSPEC = TABLE_NAME:%String      \t- Name of the Child Table \t\t \t  COLLECTION_TYPE:%String \t- 'ARRAY' or 'LIST' if the table was projected as the result of a collection, else RELATIONSHIP \t\t\t  ELEMENT_TYPE:%String    \t- If COLLECTION_TYPE is ARRAY or LIST, this will contain the type of elements in the collection \t\t\t\t\t\t\t  'PERSISTENT', 'SERIAL', or 'DATATYPE'.  If COLLECTION_TYPE is RELATIONSHIP, this field is NULL \t\t\t  CLASS_NAME:%String      \t- Name of the class which projected the table \t\t\t  ORIGINATING_PROPERTY:%String\t- Name of the property which produced the projection of this Child Table. \t\t\t  INVERSE_RELATIONSHIP:%String\t- If this child table is the result of a RELATIONSHIP, the relationship in the Parent table that \t\t\t\t\t\t\t  is the inverse of the ORIGINATING_PROPERTY relationship. \t\t\t\t\t\t\t  NOTE:  If the child table is projected as a result of the deprecated IDENTIFIEDBY class parameter, \t\t\t\t\t\t\t  this INVERSE_RELATIONSHIP will be NULL, even though the COLLECTION_TYPE is reported as RELATIONSHIP. \t\tRows are returned in no particular order -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqlchildtablesfetch",children:"SQLChildTablesFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLChildTablesFetch(ByRef %q As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlchildtablesclose",children:"SQLChildTablesClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLChildTablesClose(%q As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlcodelistexecute",children:"SQLCODEListExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLCODEListExecute(ByRef qh As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Returns a list of all SQLCODE values and descriptions -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-   SQLCODEList Procedure \t%SQLCatalog_SQLCODEList() \t\tReturns list of all SQLCODE values and descriptions \t\tROWSPEC = SQLCODE:%SmallInt\t- SQLCODE value \t\t\t  DESCRIPTION:%String\t- SQLCODE Description \t\tRows are returned in SQLCODE order -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqlcodelistfetch",children:"SQLCODEListFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLCODEListFetch(ByRef qh As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlcodelistclose",children:"SQLCODEListClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLCODEListClose(ByRef qh As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlconstraintsexecute",children:"SQLConstraintsExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLConstraintsExecute(ByRef %q As %Binary, table As %String) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Get a List of all constraints from a table. -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-   SQLConstraints Procedure \t%SQLCatalog_SQLConstraints('tablename') \t\tTakes 1 %String/VARCHAR type parameter which is the name of a BaseTable. \t\tReturns all fields in the table: \t\tROWSPEC = CONSTRAINT_NAME:%String        - Name of the constraint \t\t\t  TYPE:%String                   - Type of constraint \t\t\t  CONSTRAINT_DATE:%String        - Constraint info depends on type \t\t\t  CONSTRAINT_OBJECT_NAME:%String - Object name of the constraint \t\tRows are returned in no particular order -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqlconstraintsfetch",children:"SQLConstraintsFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLConstraintsFetch(ByRef %q As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlconstraintsclose",children:"SQLConstraintsClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLConstraintsClose(ByRef %q As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlfieldsexecute",children:"SQLFieldsExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLFieldsExecute(ByRef %q As %Binary, table As %String(MAXLEN=257)) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Get a List of all Fields from a table. -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLFields Procedure \t%SQLCatalog_SQLFields('tablename') \t\tTakes 1 %String/VARCHAR type parameter which is the name of a BaseTable. \t\tReturns all fields in the table: \t\tROWSPEC = FIELD_NAME:%String\t\t\t- Name of the field \t\t\t  DATATYPE:%String\t\t\t- Field's datatype \t\t\t  COLUMN_NUMBER:%Integer\t\t- Field's internal column number \t\t\t  REQUIRED:%String\t\t\t- Is field required, 'Yes' or 'No' \t\t\t  UNIQUE:%String\t\t\t- Is field unique, 'Yes', or 'No' \t\t\t  COLLATION_FUNCTION:%String\t\t- ALPHAUP, UPPER, STRING, EXACT, PLUS or MINUS \t\t\t  HIDDEN:%String\t\t\t- Is field hidden, 'Yes' or 'No' \t\t\t  MAXLEN:%String\t\t\t- MAXLEN parameter of field (or NULL) \t\t\t  BLOB:%String\t\t\t\t- Is field a BLOB, 'Yes' or 'No' \t\t\t  REFERENCE:%String\t\t\t- Name of the referenced table or NULL if not a reference \t\t\t  CONTAINER_FIELD:%Library.String\t- If this is a sub-field of a serial container, the name of the serial field \t\t\t  ODBC_DATATYPE_CODE\t\t\t- ODBC Datatype code for this field \t\t\t  JDBC_DATATYPE_CODE\t\t\t- ODBC Datatype code for this field \t\t\t  COLLECTION_TYPE\t\t\t- Type of collection, 'LIST', 'ARRAY' or \"\" \t\t\t  REF_ID_DATATYPE\t\t\t- If this is a reference field, the DATATYPE for the ID of the referenced table \t\t\t  ELEMENT_TYPE\t\t\t\t- If COLLECTION_TYPE is non-NULL, this will contain the type of elements in the collection \t\t\t\t\t\t\t\t  'PERSISTENT', 'SERIAL', or 'DATATYPE'.  If COLLECTION_TYPE is NULL, this field is NULL \t\t\t  REFERENCE_CLASS:%String\t\t- Name of the referenced table's projecting class or NULL if not a reference \t\t\t  INSERTABLE:%String\t\t\t- Can a value for the field be supplied in an SQL INSERT statement, 'Yes' or 'No'. \t\t\t  UPDATEABLE:%String\t\t\t- Can a value for the field be supplied in an SQL UPDATE statement, 'Yes' or 'No'. \t\t\t  DEFAULT:%String\t\t\t- Field's default value expression (if any) \t\t\t  ROWIDWITHODBCVALUES:%String\t\t- If this is the ROWID field and the ROWID field is a datatype which \t\t\t\t\t\t\t\t  has OdbcToLogical conversion, return Yes, otherwise No.  If this is not the \t\t\t\t\t\t\t\t  ROWID field, return NULL. \t\t\t  SERIAL_FIELD:%String\t\t\t- Is this a serial field?  'Yes' or 'No'. \t\t\t  ROWID_FIELD:%SmallInt\t\t\t- Is this a RowID field? 0 = No, 1 = Yes, 2 = A field the RowID is based on. \t\t\t  ORIGINATING_PROPERTY:%String\t\t- Name of the class property which projected this field \t\t\t  MAXVAL:%Library.String\t\t- MAXVAL parameter of field (or NULL) \t\t\t  MINVAL:%Library.String\t\t- MINVAL parameter of field (or NULL) \t\tRows are returned in table column order -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqlfieldsfetch",children:"SQLFieldsFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLFieldsFetch(ByRef %q As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlfieldsclose",children:"SQLFieldsClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLFieldsClose(ByRef %q As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlforeignkeysexecute",children:"SQLForeignKeysExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLForeignKeysExecute(ByRef %q As %Binary, table As %String(MAXLEN=257)) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Get a List of all Foreign Key constraints from a table. -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLForeignKeys Procedure \t%SQLCatalog_SQLForeignKeys('tablename') \t\tTakes 1 %String/VARCHAR type parameter which is the name of a BaseTable. \t\tReturns all ForeignKeys defined in the table: \t\tROWSPEC = FOREIGN_KEY_NAME:%String   - Name of the FKey constraint \t\t\t  FOREIGN_KEY_FIELDS:%String - List of field in the FKey constraint \t\t\t  TARGET_TABLE:%String       - Name of the table referenced in the FKey constraint \t\t\t  TARGET_CLASS:%String       - Name of the class which projects the table referenced in the FKey constraint \t\t\t  TARGET_KEY:%String         - SQLName of the key in the referenced table \t\t\t  TARGET_KEY_FIELDS:%String  - List of fields in the reference table this FKey references \t\t\t  UPDATE_ACTION:%String      - Cascade, SetNull, NoAction, SetDefault \t\t\t  DELETE_ACTION:%String      - Cascade, SetNull, NoAction, SetDefault \t\t\t  FOREIGN_KEY_TYPE:%String   - RELATIONSHIP if the FKey was projected from a one-many relationship or FOREIGNKEY if the FKey \t\t\t\t\t\t       was projected from a foreign key definition. \t\tRows are returned in no particular order -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqlforeignkeysfetch",children:"SQLForeignKeysFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLForeignKeysFetch(ByRef %q As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlforeignkeysclose",children:"SQLForeignKeysClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLForeignKeysClose(ByRef %q As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlindicesexecute",children:"SQLIndicesExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLIndicesExecute(ByRef %q As %Binary, table As %String(MAXLEN=257)) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Get a List of all Indices from a table. -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLIndices Procedure \t%SQLCatalog_SQLIndices('tablename') \t\tTakes 1 %String/VARCHAR type parameter which is the name of a BaseTable. \t\tReturns all Indices in the table: \t\tROWSPEC = INDEX_NAME:%String\t- Name of the index \t\t\t  FIELDS:%String\t- Indexed Fields \t\t\t  UNIQUE:%SmallInt\t- 1 = UNIQUE Index, 0 NON_UNIQUE \t\t\t  PAGES:%Integer\t- # of map pages \t\tRows are returned in no particular order -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqlindicesfetch",children:"SQLIndicesFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLIndicesFetch(ByRef %q As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlindicesclose",children:"SQLIndicesClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLIndicesClose(ByRef %q As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlparenttableexecute",children:"SQLParentTableExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLParentTableExecute(ByRef %q As %Binary, table As %String(MAXLEN=257)) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"SQLParentTable Procedure \t%Library.SQLCatalog_SQLParentTable('tablename') \t\tTakes 1 %String/VARCHAR type parameter which is the name of a BaseTable. \t\tReturns any parent table this table has \t\tROWSPEC = PARENT_TABLE:%String    - Name of the Parent Table \t\t\t  PARENT_CLASS:%String    - Name of the class that projected the parent table \t\t\t  PARENT_PROPERTY:%String - Name of the property in the parent class (if from a collection) that projected this table \t\tRows are returned in no particular order"}),"\n",(0,r.jsx)(t.h3,{id:"sqlparenttablefetch",children:"SQLParentTableFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLParentTableFetch(ByRef %q As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlparenttableclose",children:"SQLParentTableClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLParentTableClose(%q As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlproceduresexecute",children:"SQLProceduresExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLProceduresExecute(ByRef %q As %Binary, name As %String(MAXLEN=257)) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Gets a description of the stored procedures available in the catalog. -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLProcedures Procedure \t%SQLCatalog_SQLProcedures('proc_name') \t\tTakes 1 %String/VARCHAR type parameter which is an optional wildcard \t\tmatch for the name of a Stored Procedure \t\tReturns all SQL Procedures which match the name given \t\tROWSPEC = PROCEDURE_NAME:%String       - Name of the Stored procedure, LIKE Pattern allowed \t\t\t  PROCEDURE_TYPE:%String       - Type of Stored procedure \t\t\t  PROCEDURE_CLASS:%String      - Name of the class which projected the Procedure \t\t\t  METHOD_OR_QUERY_NAME:%String - Name of the method or query the procedure is generated from \t\tRows are returned in no particular order -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqlproceduresfetch",children:"SQLProceduresFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLProceduresFetch(ByRef %q As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlproceduresclose",children:"SQLProceduresClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLProceduresClose(ByRef %q As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlprocedureinfoexecute",children:"SQLProcedureInfoExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLProcedureInfoExecute(ByRef QHandle As %Binary, name As %String(MAXLEN=257)) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Gets detailed information about a single Stored Procedure -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-   SQLProcedureInfo Procedure \t%SQLCatalog_SQLProcedureInfo('proc_name') \t\tTakes 1 %String/VARCHAR type parameter which is an exact Procedure name \t\tReturns information for the Procedure \t\tROWSPEC = CLASS_NAME:%String\t\t- Name of the class procedure method or query reside in \t\t\t  PROCEDURE_TYPE:%String\t\t- Type of Stored procedure \t\t\t  METHOD_OR_QUERY_NAME:%String\t- Name of the method or query the procedure is generated from \t\t\t  DESCRIPTION:%String\t\t- Procedure's description \t\t\t  NUMBER_INPUT_PARAMS:%Integer\t- Number of input parameters \t\t\t  NUMBER_OUTPUT_PARAMS:%Integer\t- Number of output parameters \t\t\t  RETURN_VALUE:%Integer\t\t- Has a return value? \t\t\t  NUMBER_OF_COLUMNS:%Integer\t- Number of columns \t\tRows are returned in no particular order -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqlprocedureinfofetch",children:"SQLProcedureInfoFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLProcedureInfoFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlprocedureinfoclose",children:"SQLProcedureInfoClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLProcedureInfoClose(QHandle As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlrelationshipsexecute",children:"SQLRelationshipsExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod SQLRelationshipsExecute(ByRef %q As %Binary, tablename As %String(MAXLEN=257), cardinality As %String = "") As %Status [ Internal, ProcedureBlock = 1 ]\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Get a List of all relationship constraints from a table. -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLRelationships Procedure \t%SQLCatalog_SQLRelationships('tablename','cardinality') \t\tParameters: \t\t\t  tablename   - %String - required - fully qualified table name \t\t\t  cardinality - %String - optional - default is '",(0,r.jsx)(t.em,{children:"' \t\t\t\t\tComma delimited list of cardinality values \t\t\t\t\tMANY, ONE, PARENT, CHILDREN \t\t\t\t\t'%', or '"}),"' means any/all cardinality values \t\tReturns Relationships defined in the class (including inherited relationships) which projected the table. \t\tROWSPEC = RELATIONSHIP_NAME:%String           - SQL Name of the Relationship Property \t\t\t  RELATIONSHIP_CLASS:%String          - Name of the class the relationship property references \t\t\t  RELATIONSHIP_TABLE:%String          - Name of the table the relationship property references \t\t\t  INVERSE:%String                     - SQL Name of the inverse property \t\t\t  CARDINALITY:%String                 - Relationship's cardinality \t\t\t  RELATIONSHIP_JDBC_TYPE:%Integer     - JDBC Datatype number of the relationship property \t\t\t  RELATIONSHIP_JDBC_TYPENAME:%String  - JDBC Datatype name of the relationship property \t\t\t  INVERSE_JDBC_TYPE:%Integer          - JDBC Datatype number of the inverse property \t\t\t  INVERSE_JDBC_TYPENAME:%String       - JDBC Datatype name of the inverse property \tRows are returned in no particular order -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"]}),"\n",(0,r.jsx)(t.h3,{id:"sqlrelationshipsfetch",children:"SQLRelationshipsFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLRelationshipsFetch(ByRef %q As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlrelationshipsclose",children:"SQLRelationshipsClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLRelationshipsClose(ByRef %q As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlreservedwordsexecute",children:"SQLReservedWordsExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLReservedWordsExecute(ByRef %q As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Gets a list of SQL Reserved Words -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLReservedWords Procedure \t%SQLCatalog_SQLReservedWords() \t\tReturns a list of SQL Reserved words \t\tROWSPEC = SQL_RESERVED_WORD:%String - Name of the SQL Reserved Word \t\tRows are returned in Reserved Word order using UPPER collation -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqlreservedwordsfetch",children:"SQLReservedWordsFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLReservedWordsFetch(ByRef %q As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlreservedwordsclose",children:"SQLReservedWordsClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLReservedWordsClose(ByRef %q As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqltablesexecute",children:"SQLTablesExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLTablesExecute(ByRef %q As %Binary, %user As %String) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Get a list of all Tables and Views. -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLTables Procedure \t%SQLCatalog_SQLTables() \t\tPrivileges are checked against pre-define $Username. \t\tReturns a list of tables and views defined in the current namespace. \t\tROWSEPC = RELATION_NAME:%String\t   - Name of the table or view \t\t\t  TYPE:%String \t\t   - 'TABLE' or 'VIEW' \t\t\t  OWNER:%String            - Owner of the table/view \t\t\t  LAST_COMPILED:%TimeStamp - Time of last compilation \t\tRows are returned in order by RELATION_NAME -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqltablesfetch",children:"SQLTablesFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLTablesFetch(ByRef %q As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqltablesclose",children:"SQLTablesClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLTablesClose(ByRef QHandle As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqltriggersexecute",children:"SQLTriggersExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLTriggersExecute(ByRef %q As %Library.Binary, %table As %Library.String(MAXLEN=257)) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Get a List of all Triggers from a table. -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLTriggers Procedure \t%SQLCatalog_SQLTriggers('tablename') \t\tTakes 1 %String/VARCHAR type parameter which is the name of a BaseTable. \t\tReturns all triggers in the table: \t\tROWSPEC = TRIGGER_NAME:%String\t\t- Name of the trigger \t\t\t  TIME_EVENT:%String\t\t- Trigger's TIME and EVENT \t\t\t  ORDER:%SmallInt\t\t- Trigger's order with the TIME_EVENT \t\t\t  CODE:%String\t\t\t- Trigger code \t\tRows are returned in no particular order -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqltriggersfetch",children:"SQLTriggersFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLTriggersFetch(ByRef %q As %Library.Binary, ByRef Row As %Library.List, AtEnd As %Library.Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqltriggersclose",children:"SQLTriggersClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLTriggersClose(ByRef %q As %Library.Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlviewfieldsexecute",children:"SQLViewFieldsExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLViewFieldsExecute(ByRef %q As %Binary, view As %String(MAXLEN=257)) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Get a List of all Fields from a view. -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLViewFields Procedure \t%SQLCatalog_SQLViewFields('viewname') \t\tTakes 1 %String/VARCHAR type parameter which is the name of a View. \t\tReturns all fields in the table: \t\tROWSPEC = FIELD_NAME:%String\t\t- Name of the field \t\t\t  DATATYPE:%String\t\t- Field's datatype \t\t\t  MAXLEN:%String\t\t- MAXLEN parameter of field (or NULL) \t\t\t  BLOB:%String\t\t\t- Is field a BLOB, 'Yes' or 'No' \t\t\t  MAXVAL:%Library.String\t- MAXVAL parameter of field (or NULL) \t\t\t  MINVAL:%Library.String\t- MINVAL parameter of field (or NULL) \t\tRows are returned view column order -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqlviewfieldsfetch",children:"SQLViewFieldsFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLViewFieldsFetch(ByRef %q As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlviewfieldsclose",children:"SQLViewFieldsClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLViewFieldsClose(ByRef %q As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlviewinfoexecute",children:"SQLViewInfoExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLViewInfoExecute(ByRef %q As %Binary, view As %String(MAXLEN=257)) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Get full View definition. -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLViewInfo Procedure \t%SQLCatalog_SQLViewInfo('viewname') \t\tTakes 1 %String/VARCHAR type parameter which is the name of a View. \t\tReturns all fields in the table: \t\tROWSPEC = VIEW_QUERY:%String\t- Query Text of the View -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqlviewinfofetch",children:"SQLViewInfoFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLViewInfoFetch(ByRef %q As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlviewinfoclose",children:"SQLViewInfoClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLViewInfoClose(ByRef %q As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlviewdependsonexecute",children:"SQLViewDependsOnExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLViewDependsOnExecute(ByRef %q As %Binary, pView As %String(MAXLEN=257)) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Return list of tables the view depends on -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLViewDependsOn Procedure \t%Library.SQLViewDependsOn('viewname') \t\tTakes 1 %String/VARCHAR type parameter which is the name of a View. \t\tReturns a list of tables this view depends on \t\tROWSPEC = SCHEMA:%String\t- Schema name \t\t\t  TABLE_NAME:%String\t- Table name -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqlviewdependsonfetch",children:"SQLViewDependsOnFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLViewDependsOnFetch(ByRef %q As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqlviewdependsonclose",children:"SQLViewDependsOnClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLViewDependsOnClose(ByRef %q As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqltablestatementsexecute",children:"SQLTableStatementsExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLTableStatementsExecute(ByRef %q As %Binary, SchemaName As %String(MAXLEN=128), RelationName As %String(MAXLEN=128)) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Returns list of SQL statements against the given Table or View name -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SQLTableStatements Procedure \t%Library.SQLTableStatements('schema_name','relation_name') \t\tTakes 2 %String/VARCHAR type parameters which is the name of a schema and a table or view name. \t\tReturns a list of SQL statements against the table or view \t\tROWSPEC = SCHEMA:%String(MAXLEN=128)\t  - Schema name \t\t\t  RELATION_NAME:%String(MAXLEN=128)   - Table/View name \t\t\t  PLAN_STATE:%String(MAXLEN=32)\t      - The state of the frozen plan for this statement: Frozen/Explicit, Unfrozen/Parallel or Unfrozen. \t\t\t  LOCATION:%String(MAXLEN=128)\t      - Routine name the SQL code is located in \t\t\t  STATEMENT:%String(MAXLEN(16348)     - SQL Statement               NATURAL_QUERY:%String               - True if this is a simple query where we will not record stats               COUNT:%Integer                      - Number of times this query has been called               AVERAGECOUNT:%Double                - Average number of times this query has been called (based on days since we first saw this)            \t  TOTAL:%Integer                      - Total time spent executing this query               AVERAGE:%Double                     - Average time spent running query               STDDEV:%Double                      - Standard deviation of query time               RUNTIMELOCATION:%String(MAXLEN=128) - For UCQ runtimeLocation is the UCQ classname which is different from the containers name               ROWCOUNT:%Integer                   - Total %ROWCOUNT from running this query               AVERAGEROWCOUNT:%Integer            - Average row count per day (since we first saw this query)               USERNAME:%String                    - $username that built query               CLIENTNAME:%String                  - Client name that built query               CLIENTIP:%String                    - Client IP that built query               CLIENTAPP:%String                   - Client application name that built query               CALLSTACK:%String                   - Call stack when query was built               COMMANDS:%Integer                   - ObjectScript commands executed from running this query               AVERAGECOMMANDS:%Integer            - Average ObjectScript commands executed from running this query per day \t\tNote:  Only DECLARE, SELECT, INSERT, UPDATE, and DELETE statements are returned. -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"}),"\n",(0,r.jsx)(t.h3,{id:"sqltablestatementsfetch",children:"SQLTableStatementsFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLTableStatementsFetch(ByRef %q As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sqltablestatementsclose",children:"SQLTableStatementsClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SQLTableStatementsClose(ByRef %q As %Binary) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"makepat",children:"MakePat"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod MakePat(like As %Library.String, esc As %Library.String) As %Library.String [ Internal, ProcedureBlock = 1 ]\n"})})]})}function o(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>i});var r=s(96540);const a={},n=r.createContext(a);function l(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);