"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[22965],{95386:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>l,default:()=>c,frontMatter:()=>i,toc:()=>d});var n=s(74848),a=s(28453);const i={pagination_prev:null,pagination_next:null},l="%iKnow.DeepSee.MetadataAPI",d=[{value:"Parameters",id:"parameters",level:2},{value:"GetFieldsRT",id:"getfieldsrt",level:3},{value:"Methods",id:"methods",level:2},{value:"CreateFilter",id:"createfilter",level:3},{value:"GetFieldId",id:"getfieldid",level:3},{value:"GetFactInfo",id:"getfactinfo",level:3},{value:"GetValue",id:"getvalue",level:3},{value:"GetFields",id:"getfields",level:3},{value:"GetFieldInfoById",id:"getfieldinfobyid",level:3},{value:"GetFieldInfo",id:"getfieldinfo",level:3},{value:"GetValueById",id:"getvaluebyid",level:3},{value:"SetValue",id:"setvalue",level:3},{value:"SetValueById",id:"setvaluebyid",level:3},{value:"AddField",id:"addfield",level:3},{value:"EndBatch",id:"endbatch",level:3},{value:"StartBatch",id:"startbatch",level:3}];function r(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"iknowdeepseemetadataapi",children:"%iKnow.DeepSee.MetadataAPI"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %iKnow.DeepSee.MetadataAPI Extends %iKnow.Queries.MetadataI [ Deprecated, System = 4 ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"This class offers a read-only implementation for most of the %iKnow.Queries.MetadataI interface in DeepSee-managed domains. It exposes all available dimension levels and measures for the cube managing the domain. This enables iKnow-style query filtering using the result of CreateFilter as a convenient alternative to manually instantiating MDX or SQL-based filter objects."}),"\n",(0,n.jsx)(t.p,{children:'The "virtual" metadata fields exposed this way can be referenced by name or MDX spec and will be resolved as follows:'}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"[dimName].[hierName].[levelName]"}),"\n",(0,n.jsx)(t.li,{children:"dimName.hierName.levelName"}),"\n",(0,n.jsx)(t.li,{children:"[dimName].[levelName]"}),"\n",(0,n.jsx)(t.li,{children:"dimName.levelName"}),"\n",(0,n.jsx)(t.li,{children:"[measures].[msrName]"}),"\n",(0,n.jsx)(t.li,{children:"levelName"}),"\n",(0,n.jsx)(t.li,{children:"msrName"}),"\n",(0,n.jsx)(t.li,{children:"factName"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:'If the spec is not complete (missing hierarchy and/or dimension, the "field name" is resolved as the first level, measure or fact found with a corresponding name. Therefore, it is recommended to use full specifications as soon as there is a potential name conflict. When working with fact names, the values in the cube\'s Fact table are considered to be the desired results and no star tables will be queried.'}),"\n",(0,n.jsx)(t.p,{children:"For iKnow-managed domains, use %iKnow.Queries.MetadataAPI."}),"\n",(0,n.jsx)(t.p,{children:"NOTE: this does not support cube relationships or calculated members"}),"\n",(0,n.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(t.h3,{id:"getfieldsrt",children:"GetFieldsRT"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetFieldsRT [ Internal ] = "mdFieldId:%String,fieldName:%String,supportedOperators:%List,dataType:%String,storage:%Integer,caseSensitive:%Boolean,lovId:%Integer,validateLov:%Boolean,hidden:%Boolean";\n'})}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"createfilter",children:"CreateFilter"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CreateFilter(pDomainId As %Integer, pFieldName As %String, pOperator As %String, pValue As %String, Output pSC As %Status = {$$$OK}) As %iKnow.Filters.Filter\n"})}),"\n",(0,n.jsx)(t.p,{children:"Creates a %iKnow.Filters.Filter object for filtering sources according to the provided criteria."}),"\n",(0,n.jsx)(t.h3,{id:"getfieldid",children:"GetFieldId"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFieldId(pDomainId As %Integer, pFieldName As %String, Output pSC As %Status = {$$$OK}) As %Integer\n"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the full MDX spec for the given pFieldName, which can be used as an identifier for this field."}),"\n",(0,n.jsx)(t.h3,{id:"getfactinfo",children:"GetFactInfo"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetFactInfo(pDomainId As %Integer, pFieldName As %String, Output pFactName As %String = "", Output pType As %String = "", Output pFullSpec As %String = "", Output pDimType As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Resolves a metadata field name and returns various pieces of information about it."}),"\n",(0,n.jsx)(t.h3,{id:"getvalue",children:"GetValue"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetValue(pDomainId As %Integer, pFieldName As %String, pExternalId As %String, Output pSC As %Status) As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the actual value for a given metadata field (by name) and source (by External ID)."}),"\n",(0,n.jsx)(t.h3,{id:"getfields",children:"GetFields"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFields(ByRef pFields As %Integer, pDomainId As %Integer, pIncludeHidden As %Boolean = 0) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:'Returns a list of all the "virtualized" metadata fields exposed for a DeepSee-managed domain in an array: pFields(n) = $lb(fieldName, fullSpec, [dimension|measure]). Please note the returned field names are not necessarily unique across the whole cube, so using the full specificiation (returned as the first column) is safer.'}),"\n",(0,n.jsx)(t.p,{children:'Because of the "virtual" nature of these fields, only the fieldName (2nd) and supportedOperators (3rd) output columns are to be taken into account. The pIncludeHidden parameter is ignored.'}),"\n",(0,n.jsx)(t.h3,{id:"getfieldinfobyid",children:"GetFieldInfoById"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFieldInfoById(pDomainId As %Integer, pFieldId As %String, Output pInfo) As %Status\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getfieldinfo",children:"GetFieldInfo"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFieldInfo(pDomainId As %Integer, pFieldName As %String, Output pInfo) As %Status\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getvaluebyid",children:"GetValueById"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetValueById(pDomainId As %Integer, pFieldId As %Integer, pSrcId As %Integer, Output pSC As %Status) As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Use GetValue instead."}),"\n",(0,n.jsx)(t.h3,{id:"setvalue",children:"SetValue"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetValue(domainId As %Integer, fieldName As %String, externalId As %String, value As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.h3,{id:"setvaluebyid",children:"SetValueById"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetValueById(domainId As %Integer, fieldId As %Integer, srcId As %Integer, value As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.h3,{id:"addfield",children:"AddField"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod AddField(domainId As %Integer, fieldName As %String, supportedOperators As %List, dataType As %String = {$$$MDDTSTRING}, storage As %Integer = {$$$MDSTNORMAL}, caseSensitive As %Boolean = 0, lovId As %Integer = -1, validateLov As %Boolean = 1, hidden As %Boolean = 0) As %Integer\n"})}),"\n",(0,n.jsx)(t.h3,{id:"endbatch",children:"EndBatch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod EndBatch(domainId As %Integer) As %Status\n"})}),"\n",(0,n.jsx)(t.h3,{id:"startbatch",children:"StartBatch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod StartBatch(domainId As %Integer) As %Status\n"})})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(r,{...e})}):r(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>d});var n=s(96540);const a={},i=n.createContext(a);function l(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);