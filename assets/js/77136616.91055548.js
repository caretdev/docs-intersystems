"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[66388],{65694:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>l,default:()=>c,frontMatter:()=>r,toc:()=>o});var s=a(74848),n=a(28453);const r={pagination_prev:null,pagination_next:null},l="%ZEN.SVGComponent.treeMapChart",o=[{value:"Properties",id:"properties",level:2},{value:"showPercentage",id:"showpercentage",level:3},{value:"ongetColorScaleData",id:"ongetcolorscaledata",level:3},{value:"XDatas",id:"xdatas",level:2},{value:"SVGStyle",id:"svgstyle",level:3},{value:"Methods",id:"methods",level:2},{value:"hasAxes",id:"hasaxes",level:3},{value:"is3D",id:"is3d",level:3},{value:"renderSeries",id:"renderseries",level:3},{value:"plotItems",id:"plotitems",level:3},{value:"plotOneBox",id:"plotonebox",level:3},{value:"hasMultiples",id:"hasmultiples",level:3},{value:"setProperty",id:"setproperty",level:3},{value:"getLegendLabels",id:"getlegendlabels",level:3},{value:"getChartElementStyle",id:"getchartelementstyle",level:3},{value:"acquireData",id:"acquiredata",level:3},{value:"getSeriesColor",id:"getseriescolor",level:3},{value:"convertToRGB",id:"converttorgb",level:3},{value:"getFGColor",id:"getfgcolor",level:3},{value:"getToolTipInfo",id:"gettooltipinfo",level:3}];function i(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"zensvgcomponenttreemapchart",children:"%ZEN.SVGComponent.treeMapChart"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %ZEN.SVGComponent.treeMapChart Extends chart [ Deprecated, System = 3 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This is an SVG chart component that displays a tree map.",(0,s.jsx)(t.br,{}),"\nA tree map displays a series of values as a set of rectangles. The area of each rectangle is proportional to its value. Negative values are ignored."]}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"showpercentage",children:"showPercentage"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property showPercentage As %ZEN.Datatype.boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"If true, percentage values (rounded to 2 decimal places integer) are displayed as part of the label for each box."}),"\n",(0,s.jsx)(t.h3,{id:"ongetcolorscaledata",children:"ongetColorScaleData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property ongetColorScaleData As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(t.p,{children:'ongetColorScaleData event handler: This event handler, if defined, is called by the chart to compute the color scale for a given data item. It should match the format of ongetData, returning corresponding color scale values for each data point returned by ongetData. For example, to scale the colors of each data point according to the "value" of that data point itself, set this property to the same event handler as ongetData. The scaled colors will be using the first color defined in seriesColorScheme, optionally overridden by seriesColors.'}),"\n",(0,s.jsx)(t.h2,{id:"xdatas",children:"XDatas"}),"\n",(0,s.jsx)(t.h3,{id:"svgstyle",children:"SVGStyle"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"XData SVGStyle\n"})}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"hasaxes",children:"hasAxes"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod hasAxes() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Indicates that this chart has no axes and associated grids"}),"\n",(0,s.jsx)(t.h3,{id:"is3d",children:"is3D"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod is3D() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Do not show 3-D plot area."}),"\n",(0,s.jsx)(t.h3,{id:"renderseries",children:"renderSeries"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod renderSeries(group) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Draw data series for this chart. group is the SVG container for the chart components."}),"\n",(0,s.jsx)(t.h3,{id:"plotitems",children:"plotItems"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod plotItems(group, dataItems, width, height, x, y, qCount, seriesNumber) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Plot map items onto the chart."}),"\n",(0,s.jsx)(t.h3,{id:"plotonebox",children:"plotOneBox"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod plotOneBox(group, seriesNo, itemNo, x, y, width, height, value) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Render one item in the chart."}),"\n",(0,s.jsx)(t.h3,{id:"hasmultiples",children:"hasMultiples"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod hasMultiples() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:'Indicates that this chart supports "show multiples" mode.'}),"\n",(0,s.jsx)(t.h3,{id:"setproperty",children:"setProperty"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod setProperty(property, value, value2) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Set the value of a named property."}),"\n",(0,s.jsx)(t.h3,{id:"getlegendlabels",children:"getLegendLabels"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getLegendLabels() [ Language = javascript ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Return an array of labels to display within the Legend box.",(0,s.jsx)(t.br,{}),"\nOverride to get appropriate labels for TreeMap Chart."]}),"\n",(0,s.jsx)(t.h3,{id:"getchartelementstyle",children:"getChartElementStyle"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getChartElementStyle(series, item) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return default style for slice element."}),"\n",(0,s.jsx)(t.h3,{id:"acquiredata",children:"acquireData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod acquireData() [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getseriescolor",children:"getSeriesColor"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getSeriesColor(index, series, itemNo) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return the CSS color that should be used for the given series."}),"\n",(0,s.jsx)(t.h3,{id:"converttorgb",children:"convertToRGB"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod convertToRGB(string) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns a 3-element array containing the RGB values for the string input. Supporte inputs: - RGB format: fe 'rgb(123,45,67)' => { 123, 45, 67 } - HEX format, with or without leading #: fe '#ff0000' => { 255, 0, 0 } - predefined CSS colors: fe 'white' => { 255, 255, 255 } Throws a simple string error message if unsupported input is being supplied (such as \"url(#glow-red)\")"}),"\n",(0,s.jsx)(t.h3,{id:"getfgcolor",children:"getFGColor"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getFGColor(background) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Based on the supplied background color, return an appropriately contrasting foreground color (for text labels). Currently, returns either black or white based on background brightness"}),"\n",(0,s.jsx)(t.h3,{id:"gettooltipinfo",children:"getToolTipInfo"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getToolTipInfo(series, item, captions, values) [ Internal, Language = javascript ]\n"})})]})}function c(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>l,x:()=>o});var s=a(96540);const n={},r=s.createContext(n);function l(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);