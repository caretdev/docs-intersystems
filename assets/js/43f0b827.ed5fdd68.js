"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[1829],{48637:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>i,default:()=>o,frontMatter:()=>a,toc:()=>c});var n=t(74848),l=t(28453);const a={pagination_prev:null,pagination_next:null},i="%SYSTEM.DeepSee",c=[{value:"Methods",id:"methods",level:2},{value:"Reset",id:"reset",level:3},{value:"BuildCube",id:"buildcube",level:3},{value:"SynchronizeCube",id:"synchronizecube",level:3},{value:"PurgeObsoleteCache",id:"purgeobsoletecache",level:3},{value:"KillCube",id:"killcube",level:3},{value:"ListCubes",id:"listcubes",level:3},{value:"Shell",id:"shell",level:3}];function r(e){const s={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"systemdeepsee",children:"%SYSTEM.DeepSee"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class %SYSTEM.DeepSee Extends Help [ Abstract, System = 4 ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"The %SYSTEM.DeepSee class provides an interface for the most common DeepSee tasks."}),"\n",(0,n.jsxs)(s.p,{children:["You can use it via the special ",(0,n.jsx)(s.strong,{children:"$system"})," object: ",(0,n.jsx)(s.code,{children:'Do $system.DeepSee.BuildCube("MyCube")'})," For a more complete API, refer to the %DeepSee.Utils class."]}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"reset",children:"Reset"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Reset(pClearCells As %Boolean = 0) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Stops all DeepSee background agents, clears any pending tasks, and clears the result cache for the current namespace. If pClearCells is true, then the cell cache for the current namespace is also cleared.",(0,n.jsx)(s.br,{}),"\nThis method is provided as a convenience for developers for use on development or test systems.",(0,n.jsx)(s.br,{}),"\nYou should not use this method on production systems as it will have immediate effect on the performance of end user operations."]}),"\n",(0,n.jsx)(s.h3,{id:"buildcube",children:"BuildCube"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod BuildCube(pCubeName As %String, pAsync As %Boolean = 1, pVerbose As %Boolean = 1, pIndexOnly As %Boolean = 0, pMaxFacts As %Integer = 0, pTracking As %Boolean = 1, ByRef pBuildStatistics As %String = 0, pFactList As %String = "") As %Status\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Update ",(0,n.jsx)(s.em,{children:"all"})," facts in the DeepSee cube pCubeName with data from the source table.",(0,n.jsx)(s.br,{}),"\nThis will delete any information currently in the cube. If pAsync is true, then background tasks are used.",(0,n.jsx)(s.br,{}),"\nIf pVerbose is true, then status information is written to the console.",(0,n.jsx)(s.br,{}),"\nIf pIndexOnly is true, only rebuild the fact table indices.",(0,n.jsx)(s.br,{}),"\nIf pMaxFacts is non-zero, then only build this number of facts.",(0,n.jsx)(s.br,{}),"\nIf the pFactList is supplied the build will only update the columns listed in that fact list. The list must consist of the specific fact names and can have either a comma-delimited or $LB format."]}),"\n",(0,n.jsx)(s.h3,{id:"synchronizecube",children:"SynchronizeCube"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SynchronizeCube(pCubeName As %String, pVerbose As %Boolean = 0, Output pFactsUpdated As %Integer, pReadCommitted As %Boolean = 1, pCheckReferences As %Boolean = 1, pAsync As %Boolean = 0, ByRef pSynchronizeStatistics As %String = 0) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["For the specified cube, find and apply all changes from the source data that have been made since the last call to this method. If pVerbose is true, then status information is written to the console.",(0,n.jsx)(s.br,{}),"\nIf the pFactList is supplied the build will only update the columns listed in that fact list. The list must consist of the specific fact names and can have either a comma-delimited or $LB format."]}),"\n",(0,n.jsx)(s.h3,{id:"purgeobsoletecache",children:"PurgeObsoleteCache"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PurgeObsoleteCache(pCubeName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Delete all cache that has been invalidated for cube pCubeName.",(0,n.jsx)(s.br,{}),"\nThe results cache is stored in partitions, and a partition of the results cache is invalidated during the cube synchronization process if one or more of the records being updated contributed to the results within that partition.",(0,n.jsx)(s.br,{}),"\nA cube build removes the entire cache and so automatically performs this operation."]}),"\n",(0,n.jsx)(s.h3,{id:"killcube",children:"KillCube"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KillCube(pCubeName As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Delete all indices and cache values for the given cube."}),"\n",(0,n.jsx)(s.h3,{id:"listcubes",children:"ListCubes"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListCubes()\n"})}),"\n",(0,n.jsx)(s.p,{children:"Display a list of all cubes within this namespace (that are visible to the current user) to the console."}),"\n",(0,n.jsx)(s.h3,{id:"shell",children:"Shell"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Shell() As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Invoke the DeepSee command line shell."})]})}function o(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(r,{...e})}):r(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>c});var n=t(96540);const l={},a=n.createContext(l);function i(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);