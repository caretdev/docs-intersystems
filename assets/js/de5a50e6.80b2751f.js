"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[82874],{75363:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>r,default:()=>o,frontMatter:()=>i,toc:()=>l});var a=t(74848),n=t(28453);const i={pagination_prev:null,pagination_next:null},r="%DeepSee.Utils",l=[{value:"Parameters",id:"parameters",level:2},{value:"DOMAIN",id:"domain",level:3},{value:"Methods",id:"methods",level:2},{value:"%Reset",id:"reset",level:3},{value:"%TestForCancel",id:"testforcancel",level:3},{value:"%RunServerInitCode",id:"runserverinitcode",level:3},{value:"%RunServerCloseCode",id:"runserverclosecode",level:3},{value:"%RunServerAuditCode",id:"runserverauditcode",level:3},{value:"%IsCubeAvailable",id:"iscubeavailable",level:3},{value:"%BuildCube",id:"buildcube",level:3},{value:"%LogBuildError",id:"logbuilderror",level:3},{value:"%BuildStatus",id:"buildstatus",level:3},{value:"%FixBuildErrors",id:"fixbuilderrors",level:3},{value:"%PrintBuildErrors",id:"printbuilderrors",level:3},{value:"%PrecomputeAggregates",id:"precomputeaggregates",level:3},{value:"%ComputeAggregateGroup",id:"computeaggregategroup",level:3},{value:"%ComputeAggregateCombos",id:"computeaggregatecombos",level:3},{value:"%ComputeAggregateForBucket",id:"computeaggregateforbucket",level:3},{value:"%DeleteObsoleteCache",id:"deleteobsoletecache",level:3},{value:"%PurgeObsoleteCache",id:"purgeobsoletecache",level:3},{value:"%ProcessFact",id:"processfact",level:3},{value:"%DeleteFact",id:"deletefact",level:3},{value:"%SynchronizeCube",id:"synchronizecube",level:3},{value:"%ProcessUpdateBuffer",id:"processupdatebuffer",level:3},{value:"%ClearUpdateBuffer",id:"clearupdatebuffer",level:3},{value:"%HasUpdates",id:"hasupdates",level:3},{value:"%SetCubeDSTime",id:"setcubedstime",level:3},{value:"%GetCubeDSTime",id:"getcubedstime",level:3},{value:"%PurgeListings",id:"purgelistings",level:3},{value:"%PurgeDSTIME",id:"purgedstime",level:3},{value:"%PurgeUpdateBuffer",id:"purgeupdatebuffer",level:3},{value:"%KillCube",id:"killcube",level:3},{value:"%KillKPICacheForCube",id:"killkpicacheforcube",level:3},{value:"%GetCountName",id:"getcountname",level:3},{value:"%GetCountCaption",id:"getcountcaption",level:3},{value:"%GetCubeFactClass",id:"getcubefactclass",level:3},{value:"%GetCubeFactTable",id:"getcubefacttable",level:3},{value:"%GetCubeFactCount",id:"getcubefactcount",level:3},{value:"%GetCubeMemberCount",id:"getcubemembercount",level:3},{value:"%GetCubeName",id:"getcubename",level:3},{value:"%IsCubeAbstract",id:"iscubeabstract",level:3},{value:"%IsCubeCompound",id:"iscubecompound",level:3},{value:"%GetCubeModifiedDate",id:"getcubemodifieddate",level:3},{value:"%GetKPIModifiedDate",id:"getkpimodifieddate",level:3},{value:"%GetCubeCaption",id:"getcubecaption",level:3},{value:"%GetKPICaption",id:"getkpicaption",level:3},{value:"%CubeExists",id:"cubeexists",level:3},{value:"%KPIExists",id:"kpiexists",level:3},{value:"%CheckPrivilege",id:"checkprivilege",level:3},{value:"%GetCubeClass",id:"getcubeclass",level:3},{value:"%GetCubeActionClass",id:"getcubeactionclass",level:3},{value:"%GetCubeDescription",id:"getcubedescription",level:3},{value:"%GetKPIName",id:"getkpiname",level:3},{value:"%IsKPIPublic",id:"iskpipublic",level:3},{value:"%GetKPIDescription",id:"getkpidescription",level:3},{value:"%GetKPIClass",id:"getkpiclass",level:3},{value:"%GetKPIList",id:"getkpilist",level:3},{value:"%GetKPIPlugInList",id:"getkpipluginlist",level:3},{value:"%GetWorksheetList",id:"getworksheetlist",level:3},{value:"%GetMetricList",id:"getmetriclist",level:3},{value:"%GetDefaultMember",id:"getdefaultmember",level:3},{value:"%GetDefaultMeasure",id:"getdefaultmeasure",level:3},{value:"%GetDefaultHierarchy",id:"getdefaulthierarchy",level:3},{value:"%GetDefaultLevel",id:"getdefaultlevel",level:3},{value:"%IsBaseCube",id:"isbasecube",level:3},{value:"%GetBaseCube",id:"getbasecube",level:3},{value:"%GetSourceClass",id:"getsourceclass",level:3},{value:"%GetRelatedCube",id:"getrelatedcube",level:3},{value:"%IsRelationship",id:"isrelationship",level:3},{value:"%GetDimensionList",id:"getdimensionlist",level:3},{value:"%GetMemberTree",id:"getmembertree",level:3},{value:"%GetPivotTree",id:"getpivottree",level:3},{value:"%GetQualityMeasureTree",id:"getqualitymeasuretree",level:3},{value:"%CopyTree",id:"copytree",level:3},{value:"%GetDimensionInfo",id:"getdimensioninfo",level:3},{value:"%GetDimensionSpec",id:"getdimensionspec",level:3},{value:"%GetCubeMeasures",id:"getcubemeasures",level:3},{value:"%GetNamedFilters",id:"getnamedfilters",level:3},{value:"%DeleteNamedFilter",id:"deletenamedfilter",level:3},{value:"%GetNamedFilterInfo",id:"getnamedfilterinfo",level:3},{value:"%SaveNamedFilter",id:"savenamedfilter",level:3},{value:"%GetSharedCalcMembers",id:"getsharedcalcmembers",level:3},{value:"%DeleteSharedCalcMember",id:"deletesharedcalcmember",level:3},{value:"%GetSharedCalcMemberInfo",id:"getsharedcalcmemberinfo",level:3},{value:"%SaveSharedCalcMember",id:"savesharedcalcmember",level:3},{value:"%GetPivotVariables",id:"getpivotvariables",level:3},{value:"%DeletePivotVariable",id:"deletepivotvariable",level:3},{value:"%GetPivotVariableInfo",id:"getpivotvariableinfo",level:3},{value:"%SavePivotVariable",id:"savepivotvariable",level:3},{value:"%GetPivotVariableValues",id:"getpivotvariablevalues",level:3},{value:"%GetCubeSearchableMeasures",id:"getcubesearchablemeasures",level:3},{value:"%GetDimensionCaption",id:"getdimensioncaption",level:3},{value:"%GetMemberCaption",id:"getmembercaption",level:3},{value:"%GetMemberDescription",id:"getmemberdescription",level:3},{value:"%MemberHasChildren",id:"memberhaschildren",level:3},{value:"%GetMeasureFact",id:"getmeasurefact",level:3},{value:"%GetDimensionFact",id:"getdimensionfact",level:3},{value:"%GetDimensionProperties",id:"getdimensionproperties",level:3},{value:"%GetCubeLevels",id:"getcubelevels",level:3},{value:"%GetCubeListings",id:"getcubelistings",level:3},{value:"%GetCubeListingFields",id:"getcubelistingfields",level:3},{value:"%GetDimensionMembers",id:"getdimensionmembers",level:3},{value:"%FilterSpecToArray",id:"filterspectoarray",level:3},{value:"%SlicerNodeToSpecArray",id:"slicernodetospecarray",level:3},{value:"%GetLevelNameForKey",id:"getlevelnameforkey",level:3},{value:"%ParseKeyForDisplay",id:"parsekeyfordisplay",level:3},{value:"%GetMemberKeyForID",id:"getmemberkeyforid",level:3},{value:"%GetModel",id:"getmodel",level:3},{value:"%GetSubjectAreaModel",id:"getsubjectareamodel",level:3},{value:"%GetFunctionSet",id:"getfunctionset",level:3},{value:"%GetTimeLevelClasses",id:"gettimelevelclasses",level:3},{value:"%GetTimeLevelType",id:"gettimeleveltype",level:3},{value:"%GetTimeLevelCalendar",id:"gettimelevelcalendar",level:3},{value:"%ExcelFormatDate",id:"excelformatdate",level:3},{value:"%Analyze",id:"analyze",level:3},{value:"%AnalyzeMissing",id:"analyzemissing",level:3},{value:"%GetDimensionTables",id:"getdimensiontables",level:3},{value:"%BuildDimensionTableIndices",id:"builddimensiontableindices",level:3},{value:"%ReadFacts",id:"readfacts",level:3},{value:"%CompressIndices",id:"compressindices",level:3},{value:"%DenormalizeType",id:"denormalizetype",level:3},{value:"%GetSQLTableName",id:"getsqltablename",level:3},{value:"%GetSQLColumnName",id:"getsqlcolumnname",level:3},{value:"%GetCubeList",id:"getcubelist",level:3},{value:"%GetCubeListArray",id:"getcubelistarray",level:3},{value:"%GetPivotListArray",id:"getpivotlistarray",level:3},{value:"%GetDashboardListArray",id:"getdashboardlistarray",level:3},{value:"%GetKPIListArray",id:"getkpilistarray",level:3},{value:"%GetWorksheetListArray",id:"getworksheetlistarray",level:3},{value:"%GetMetricListArray",id:"getmetriclistarray",level:3},{value:"%BuildItemListArray",id:"builditemlistarray",level:3},{value:"%GetFunctionList",id:"getfunctionlist",level:3},{value:"%TestTimeClass",id:"testtimeclass",level:3},{value:"%LoadCellCache",id:"loadcellcache",level:3},{value:"%ComputeCellCache",id:"computecellcache",level:3},{value:"%ParseRangeExpression",id:"parserangeexpression",level:3},{value:"%ExpandRangeMacro",id:"expandrangemacro",level:3},{value:"%KillLogFile",id:"killlogfile",level:3},{value:"%WriteToLog",id:"writetolog",level:3},{value:"%GetLogFileName",id:"getlogfilename",level:3},{value:"%GetDataSourceTree",id:"getdatasourcetree",level:3},{value:"%SaveCubeDefinition",id:"savecubedefinition",level:3},{value:"%SaveSubjectAreaDefinition",id:"savesubjectareadefinition",level:3},{value:"%GetPivotList",id:"getpivotlist",level:3},{value:"%GetDashboardList",id:"getdashboardlist",level:3},{value:"%ConvertDate",id:"convertdate",level:3},{value:"%SetAgentCount",id:"setagentcount",level:3},{value:"%GetAgentCount",id:"getagentcount",level:3},{value:"%SetDSTimeIndex",id:"setdstimeindex",level:3},{value:"%GetErrorPageURL",id:"geterrorpageurl",level:3},{value:"%GetCollectionProjections",id:"getcollectionprojections",level:3},{value:"%AddTimeInterval",id:"addtimeinterval",level:3},{value:"%DaysInMonth",id:"daysinmonth",level:3},{value:"%HijriDaysInMonth",id:"hijridaysinmonth",level:3},{value:"%AddHijriTimeInterval",id:"addhijritimeinterval",level:3},{value:"%IsLeapYear",id:"isleapyear",level:3},{value:"%IsHijriLeapYear",id:"ishijrileapyear",level:3},{value:"%FormatDate",id:"formatdate",level:3},{value:"%UnformatDate",id:"unformatdate",level:3},{value:"%FormatPartialDate",id:"formatpartialdate",level:3},{value:"%UnformatPartialDate",id:"unformatpartialdate",level:3},{value:"%DayOfWeekToNumber",id:"dayofweektonumber",level:3},{value:"%Shell",id:"shell",level:3},{value:"%UpdateDimensionProperty",id:"updatedimensionproperty",level:3},{value:"%WriteDependencyGraph",id:"writedependencygraph",level:3},{value:"%GetDependencyGraph",id:"getdependencygraph",level:3},{value:"%FindDimensionTableForProperty",id:"finddimensiontableforproperty",level:3},{value:"%GetPaperSizeList",id:"getpapersizelist",level:3},{value:"%ExportExcelToFile",id:"exportexceltofile",level:3},{value:"%ExportPDFToFile",id:"exportpdftofile",level:3},{value:"%ExportCSVToFile",id:"exportcsvtofile",level:3},{value:"%ComputeAge",id:"computeage",level:3},{value:"%CreateQueryNonce",id:"createquerynonce",level:3},{value:"%CreateParameterNonce",id:"createparameternonce",level:3},{value:"%GetParameterNonce",id:"getparameternonce",level:3},{value:"%FindCubeMembers",id:"findcubemembers",level:3},{value:"GetResourceList",id:"getresourcelist",level:3},{value:"%CompressList",id:"compresslist",level:3},{value:"%TestForZProcessing",id:"testforzprocessing",level:3},{value:"%IsDeepSeeEnabled",id:"isdeepseeenabled",level:3},{value:"%IsDataConnector",id:"isdataconnector",level:3},{value:"%GetMDXFromPivot",id:"getmdxfrompivot",level:3},{value:"%ExecutePivot",id:"executepivot",level:3},{value:"%GetResultSetFromPivot",id:"getresultsetfrompivot",level:3},{value:"%GetChildSpec",id:"getchildspec",level:3},{value:"%ProcessCubeListArrayNode",id:"processcubelistarraynode",level:3},{value:"%ParseSQLFieldList",id:"parsesqlfieldlist",level:3},{value:"%ArrayToList",id:"arraytolist",level:3},{value:"%ArrayFromList",id:"arrayfromlist",level:3},{value:"%IsValidFactList",id:"isvalidfactlist",level:3},{value:"%NormalizeFactList",id:"normalizefactlist",level:3},{value:"%ReinforceFactList",id:"reinforcefactlist",level:3},{value:"%FindCubeIndexList",id:"findcubeindexlist",level:3},{value:"%LockFactList",id:"lockfactlist",level:3},{value:"%UnlockFactList",id:"unlockfactlist",level:3},{value:"%MarkFactsEnabled",id:"markfactsenabled",level:3},{value:"%IsFactEnabled",id:"isfactenabled",level:3},{value:"%IsValidCubeName",id:"isvalidcubename",level:3},{value:"%AtScaleExportCube",id:"atscaleexportcube",level:3}];function c(e){const s={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"deepseeutils",children:"%DeepSee.Utils"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Class %DeepSee.Utils Extends %RegisteredObject [ System = 4 ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"This class contains a number of DeepSee utility methods."}),"\n",(0,a.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(s.h3,{id:"domain",children:"DOMAIN"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter DOMAIN = "%DeepSee";\n'})}),"\n",(0,a.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(s.h3,{id:"reset",children:"%Reset"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %Reset(pClearCells As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Stops all DeepSee background agents, clears any pending tasks, and clears the result cache for the current namespace. If pClearCells is true, then the cell cache for the current namespace is also cleared.",(0,a.jsx)(s.br,{}),"\nThis method is provided as a convenience for developers for use on development or test systems. You should not use this method on production systems as it will have immediate effect on the performance of end user operations."]}),"\n",(0,a.jsx)(s.h3,{id:"testforcancel",children:"%TestForCancel"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %TestForCancel(pFlag As %String = "") As %Boolean [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Test if the current query execution should be cancelled. Not currently used."}),"\n",(0,a.jsx)(s.h3,{id:"runserverinitcode",children:"%RunServerInitCode"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %RunServerInitCode() As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Run the server init code.",(0,a.jsx)(s.br,{}),"\nThis gives customer applications a chance to establish environmental settings. This is called whenever a DeepSee session is created or when a background process begins work on a %DeepSee.WorkMgr queue.",(0,a.jsx)(s.br,{}),"\nThe server init code is a valid ObjectScript expression stored in the ^DeepSee.InitCode global. Server init code should not write any output to the current device nor should this code kill any % variables required by Zen or DeepSee."]}),"\n",(0,a.jsx)(s.h3,{id:"runserverclosecode",children:"%RunServerCloseCode"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %RunServerCloseCode() As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Run the server close code.",(0,a.jsx)(s.br,{}),"\nThis gives customer applications a chance to clear environmental settings. This method is called whenever a DeepSee session is closed or when a background process completes work on a %DeepSee.WorkMgr queue.",(0,a.jsx)(s.br,{}),"\nThe server close code is a valid ObjectScript expression stored in the ^DeepSee.CloseCode global. Server close code should not write any output to the current device nor should this code kill any % variables required by Zen or DeepSee."]}),"\n",(0,a.jsx)(s.h3,{id:"runserverauditcode",children:"%RunServerAuditCode"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %RunServerAuditCode(pDashboardId As %String) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Run the server audit code.",(0,a.jsx)(s.br,{}),"\nThis gives customer applications a chance to audit viewing of DeepSee dashboard pages. This is called whenever a DeepSee dashaboard is viewed in the user portal.",(0,a.jsx)(s.br,{}),"\nThe server audit code is a valid ObjectScript expression stored in the ^DeepSee.AuditCode global. Server audit code should not write any output to the current device nor should this code kill any % variables required by Zen or DeepSee.",(0,a.jsx)(s.br,{}),"\nThe variable, %dsDashboard, will contain the id (name) of the current dashboard item."]}),"\n",(0,a.jsx)(s.h3,{id:"iscubeavailable",children:"%IsCubeAvailable"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %IsCubeAvailable(pCubeName As %String, Output pReason As %String) As %Boolean\n"})}),"\n",(0,a.jsx)(s.p,{children:"Test if the given cube is available for querying."}),"\n",(0,a.jsx)(s.h3,{id:"buildcube",children:"%BuildCube"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %BuildCube(pCubeName As %String = "", pAsync As %Boolean = 1, pVerbose As %Boolean = 1, pIndexOnly As %Boolean = 0, pMaxFacts As %Integer = 0, pTracking As %Boolean = 1, ByRef pBuildStatistics As %String = "", pFactList As %String = "") As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Update ",(0,a.jsx)(s.em,{children:"all"})," facts in the DeepSee cube pCubeName with data from the source table.",(0,a.jsx)(s.br,{}),"\nThis will delete any information currently in the cube."]}),"\n",(0,a.jsxs)(s.p,{children:["pAsync controls whether DeepSee performs the build in multiple background processes. If this argument is true, the system uses multiple processes and does not return until they are all complete. If this argument is false, the system uses a single process and does not return until it is complete.",(0,a.jsx)(s.br,{}),"\nIf you have specified initialBuildOrder, the system will reset the value of pAsync to 0 and use a single process to build the cube. The presence of initialBuildOrder in the cube definition will override this setting and will force pAsync=0. The parameter may be passed by reference to communicate to the caller whether or not this override has taken place.",(0,a.jsx)(s.br,{}),"\nWhen a limit is imposed on background agents for a particular namespace using %SetAgentCount, only one build may be active at a time in that namespace. This will not have any effect on behavior of builds in other namespaces.",(0,a.jsx)(s.br,{}),"\nIf pVerbose is true, then status information is written to the console.",(0,a.jsx)(s.br,{}),"\nIf pIndexOnly is true, only rebuild the fact table indices.",(0,a.jsx)(s.br,{}),"\nIf pMaxFacts is non-zero, then only build this number of facts.",(0,a.jsx)(s.br,{}),"\npTracking is an internal argument used when this method is run in the background and specifies that status information should be stored.",(0,a.jsx)(s.br,{}),"\npBuildStatistics returns an array of information about the cube build.",(0,a.jsx)(s.br,{}),"\nThe array has four subscripts. For example, if tStats is the argument used, as in:",(0,a.jsx)(s.br,{}),'\ndo ##class(%DeepSee.Utils).%BuildCube("PATIENTS",1,,,,,.tStats) the array will look like the following:',(0,a.jsx)(s.br,{}),'\ntStats("elapsedTime")=10.000643',(0,a.jsx)(s.br,{}),'\ntStats("errors")=1',(0,a.jsx)(s.br,{}),'\ntStats("factCount")=5000',(0,a.jsx)(s.br,{}),'\ntStats("missingReferences")=1']}),"\n",(0,a.jsx)(s.p,{children:"If the pFactList is supplied the build will only update the columns listed in that fact list. The list must consist of the specific fact names and can have either a comma-delimited or $LB format. If this list is supplied, the specific facts being updated will be individually marked as unavailable for queries and queries referencing dimensions based on those facts will throw an error on prepare."}),"\n",(0,a.jsx)(s.h3,{id:"logbuilderror",children:"%LogBuildError"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %LogBuildError(pCubeName As %String = "", pRecordID As %Integer = 0, pStatus As %Status = {$$$OK}) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Log a %Status to the ^DeepSee.BuildErrors global."}),"\n",(0,a.jsx)(s.h3,{id:"buildstatus",children:"%BuildStatus"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %BuildStatus(pCubeName As %String = "")\n'})}),"\n",(0,a.jsx)(s.p,{children:"Command line utility for monitoring cube build progress. This repeats the same information available to the Architect's build winow in a terminal."}),"\n",(0,a.jsx)(s.h3,{id:"fixbuilderrors",children:"%FixBuildErrors"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %FixBuildErrors(pCube As %String, pVerbose As %Boolean = 1) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"For the given cube, iterate over all facts in the build error log and attempt to reprocess each fact. If the processing succeeds, remove the item from the error log."}),"\n",(0,a.jsx)(s.h3,{id:"printbuilderrors",children:"%PrintBuildErrors"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %PrintBuildErrors(pCube As %String = "", pMaxErrors = 0)\n'})}),"\n",(0,a.jsx)(s.p,{children:"Display the list of errors encountered in the most recent build of the given cube."}),"\n",(0,a.jsx)(s.h3,{id:"precomputeaggregates",children:"%PrecomputeAggregates"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %PrecomputeAggregates(pCubeName As %String, pAsync As %Boolean = 1, pVerbose As %Boolean = 1, pTracking As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Precompute aggregate values for the given cube (if its precompute property is non-zero).",(0,a.jsx)(s.br,{}),"\nIf pAsync is true, then background tasks are used.",(0,a.jsx)(s.br,{}),"\nIf pVerbose is true, then status information is written to the console."]}),"\n",(0,a.jsx)(s.h3,{id:"computeaggregategroup",children:"%ComputeAggregateGroup"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ComputeAggregateGroup(pCubeName As %String, pGroupName As %String, pVerbose As %Boolean = 1) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Precompute the aggregates witin the given cube and the given group name within the cube's CellCache specification.",(0,a.jsx)(s.br,{}),'\nSet pGroupName to "*" for all groups.']}),"\n",(0,a.jsx)(s.h3,{id:"computeaggregatecombos",children:"%ComputeAggregateCombos"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ComputeAggregateCombos(pCubeName As %String, ByRef pCombos, pVerbose As %Boolean = 1, pTracking As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Loop over fact table for cube and precompute the aggregates for the specified combinations in pCombo.",(0,a.jsx)(s.br,{}),'\npCombo(n) = "FactName1,FactName2,MsrName1"']}),"\n",(0,a.jsx)(s.h3,{id:"computeaggregateforbucket",children:"%ComputeAggregateForBucket"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ComputeAggregateForBucket(pCubeName As %String, pStartChunk As %Integer, pEndChunk As %Integer, ByRef pFactList, ByRef pWorkList, pVerbose As %Boolean = 1, ByRef pCount As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:'Compute aggregate combinations for one "bucket".'}),"\n",(0,a.jsx)(s.h3,{id:"deleteobsoletecache",children:"%DeleteObsoleteCache"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %DeleteObsoleteCache(pCubeName = "") As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Delete any stale cache for cube pCubeName."}),"\n",(0,a.jsx)(s.h3,{id:"purgeobsoletecache",children:"%PurgeObsoleteCache"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %PurgeObsoleteCache(pCubeName As %String) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"[Deprecated] Cache is purged automatically on cube update and does not need to be called in user code."}),"\n",(0,a.jsx)(s.h3,{id:"processfact",children:"%ProcessFact"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %ProcessFact(pCubeName As %String, pSourceId As %String = "", pVerbose As %Boolean = 0, Output pMissingReferences As %Integer, pFactList As %String = "") As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["For the specified cube, update one fact from the source table (with id of pSourceId). If the fact does not yet exist, it is inserted, if does exist it is updated.",(0,a.jsx)(s.br,{}),"\nIf pVerbose is true, then status information is written to the console.",(0,a.jsx)(s.br,{}),"\npMissingReferences how missing references to related cubes were encountered. Refer to the %SynchronizeCube for details.",(0,a.jsx)(s.br,{}),"\nThis method logs current time as the cube's last data update but does not advance the cube's DSTIME timestamp."]}),"\n",(0,a.jsx)(s.h3,{id:"deletefact",children:"%DeleteFact"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %DeleteFact(pCubeName As %String, pSourceId As %String = "", pVerbose As %Boolean = 0) As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["For the specified cube, delete one fact from the source table (with id of pSourceId). If pVerbose is true, then status information is written to the console.",(0,a.jsx)(s.br,{}),"\nThis method logs current time as the cube's last data update but does not advance the cube's DSTIME timestamp."]}),"\n",(0,a.jsx)(s.h3,{id:"synchronizecube",children:"%SynchronizeCube"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %SynchronizeCube(pCubeName As %String = "", pVerbose As %Boolean = 1, Output pFactsUpdated As %Integer, pReadCommitted As %Boolean = 1, pCheckReferences As %Boolean = 1, pAsync As %Boolean = 0, ByRef pSynchronizeStatistics As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"For the specified cube, find and apply all changes from the source data that have been made since the last call to this method. If pVerbose is true, then status information is written to the console."}),"\n",(0,a.jsx)(s.p,{children:"On return, pFactsUpdated will return the number of facts updated."}),"\n",(0,a.jsx)(s.p,{children:"By default, reads from the source table use READ COMMITTED mode, you can turn this off (if you can tolerate reads of values from uncommitted transactions) by setting pReadCommitted to 0."}),"\n",(0,a.jsxs)(s.p,{children:["If this cube has facts that reference (via relationships) facts within another cube and any of those remote facts are missing (because the related cube has not been synchronized), then this method will report success and the missing references will be treated as build errors.",(0,a.jsx)(s.br,{}),"\nTo avoid this type of error, it is better to plan your synchronization so that the related cubes are synchronized first (in the same order the cubes are built)."]}),"\n",(0,a.jsx)(s.p,{children:"The pCheckReferences argument is deprecated and no longer has any effect on updates."}),"\n",(0,a.jsxs)(s.p,{children:["pAsync controls whether DeepSee performs the synchronize in multiple background processes. If this argument is true, the system uses multiple processes and does not return until they are all complete. If this argument is false, the system uses a single process and does not return until it is complete.",(0,a.jsx)(s.br,{}),"\nBy default this method runs in the synchronous mode to avoid any potential interference with agents involved in background processing. If asynchronous mode is turned on, the synchronization work will be divided among all available Low priority agents."]}),"\n",(0,a.jsxs)(s.p,{children:["pSynchronizeStatistics returns an array of information about the synchronize.",(0,a.jsx)(s.br,{}),"\nThe array has four subscripts. For example, if tStats is the argument used, as in:",(0,a.jsx)(s.br,{}),'\ndo ##class(%DeepSee.Utils).%SynchronizeCube("PATIENTS",1,,,,,.tStats) the array might look like the following:',(0,a.jsx)(s.br,{}),'\ntStats("elapsedTime")=.000643',(0,a.jsx)(s.br,{}),'\ntStats("errors")=1',(0,a.jsx)(s.br,{}),'\ntStats("factCount")=5',(0,a.jsx)(s.br,{}),'\ntStats("missingReferences")=1']}),"\n",(0,a.jsx)(s.p,{children:"If any errors occur during the synchronize process but all source records are successfully checked, this cube will treat processing for this timestamp as complete. The expectation is that any individual update errors can and should be resolved individually or through the %FixBuildErrors method and not by the synchronize itself."}),"\n",(0,a.jsx)(s.h3,{id:"processupdatebuffer",children:"%ProcessUpdateBuffer"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %ProcessUpdateBuffer(pClassName = "", pNoKill = 0) As %Status [ Internal ]\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Process the ^OBJ.DSTIME update buffer into the concurrency-protected update global. To protect an update entry in the ^OBJ.DSTIME buffer within a transaction, the process setting the buffer should use ",(0,a.jsx)(s.code,{children:"Lock +^DeepSee.Build(pClassName,ID)"})," The ID is not needed for concurrency protection between the transactional process and %ProcessUpdateBuffer, but will prevent lock contention between transactional processes if this is used."]}),"\n",(0,a.jsx)(s.h3,{id:"clearupdatebuffer",children:"%ClearUpdateBuffer"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %ClearUpdateBuffer(pClassName = "") As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Clear the update buffer for a given class. This will completely remove the current contents of ^OBJ.DSTIME(pClassName)."}),"\n",(0,a.jsx)(s.h3,{id:"hasupdates",children:"%HasUpdates"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %HasUpdates(pClassName = "") As %Boolean\n'})}),"\n",(0,a.jsx)(s.p,{children:"Test the ^OBJ.DSTIME update buffer for new updates in the class pClassName"}),"\n",(0,a.jsx)(s.h3,{id:"setcubedstime",children:"%SetCubeDSTime"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %SetCubeDSTime(pCubeName As %String, pVersion As %Integer = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Update the sync timestamp for the given cube."}),"\n",(0,a.jsx)(s.h3,{id:"getcubedstime",children:"%GetCubeDSTime"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeDSTime(pCubeName As %String, Output pStatus As %Status) As %Integer\n"})}),"\n",(0,a.jsx)(s.p,{children:"Query the sync timestamp for the given cube."}),"\n",(0,a.jsx)(s.h3,{id:"purgelistings",children:"%PurgeListings"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %PurgeListings(pVerbose As %Integer = 0, pStartDay = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Purge all entries in the listing cache older than pStartDay. If this is omitted, the start day used will be the current day."}),"\n",(0,a.jsx)(s.h3,{id:"purgedstime",children:"%PurgeDSTIME"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %PurgeDSTIME(pVerbose As %Integer = 0, Output pPurged As %Library.String(MAXLEN="")) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"%PurgeDSTIME purges all nodes in ^DeepSee.Update that have already been processed by all cubes, and by all classes that extend %DeepSee.TimeSync. This method checks the DSTIME value for each cube, and for each class that extends %DeepSee.TimeSync, and computes the oldest DSTIME value that has not yet been synchronized. All DSTIME values older than that time are purged from the DSTIME index."}),"\n",(0,a.jsx)(s.p,{children:"If a class has entries in the DSTIME index and no cubes use that class as a source class then those DSTIME entries are not purged."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Parameters"}),(0,a.jsx)(s.th,{}),(0,a.jsx)(s.th,{children:"pVerbose"}),(0,a.jsx)(s.th,{children:"Input"}),(0,a.jsx)(s.th,{children:"If true then status messages will be displayed on the current device."})]})}),(0,a.jsx)(s.tbody,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"pPurged"}),(0,a.jsx)(s.td,{children:"Output"}),(0,a.jsx)(s.td,{children:'An array of DSTIME entries that have been purged. For example:  \t\tpurged("DeepSee.Study.CityRainfall")=1 \t\tpurged("DeepSee.Study.Patient")=2 \t\tpurged("HoleFoods.Transaction")=0 \t\t\t The array subscript is the class name and the value is the DSTIME value that was purged.'}),(0,a.jsx)(s.td,{}),(0,a.jsx)(s.td,{})]})})]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Return value"}),": This method returns a %Status value indicating success or failure."]}),"\n",(0,a.jsx)(s.h3,{id:"purgeupdatebuffer",children:"%PurgeUpdateBuffer"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %PurgeUpdateBuffer(pClass As %String = "", pPurgeUpTo As %String = "", pIncrement As %Boolean = 1, pVerbose As %Boolean = 0) As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Purge the ^OBJ.DSTIME update buffer when there are no cubes present to clear entries via updates.",(0,a.jsx)(s.br,{}),'\npClass [Required] - The class to be purged from the ^OBJ.DSTIME update buffer. The "*" wildcard may be used to purge all classes present in the buffer.',(0,a.jsx)(s.br,{}),'\npPurgeUpTo [Required] - This is the oldest timestamp that must be retained in the purge. Every entry older than this will be removed. The "*" wildcard may be used to remove all entries for the given pClass.',(0,a.jsx)(s.br,{}),"\npIncrement - If true, the purge method will automatically advance the top node of ^OBJ.DSTIME to advance the timestamp of all non-interval type entries to support the next purge. This parameter is set to 1 by default."]}),"\n",(0,a.jsx)(s.h3,{id:"killcube",children:"%KillCube"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %KillCube(pCubeName As %String = "", pForce = 0) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Delete all indices and cache values for the given cube."}),"\n",(0,a.jsx)(s.h3,{id:"killkpicacheforcube",children:"%KillKPICacheForCube"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %KillKPICacheForCube(pCubeName As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Delete any KPI cache values for the given cube."}),"\n",(0,a.jsx)(s.h3,{id:"getcountname",children:"%GetCountName"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCountName(pCubeName As %String, Output pStatus As %Status) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, return the logical name of its %COUNT measure."}),"\n",(0,a.jsx)(s.h3,{id:"getcountcaption",children:"%GetCountCaption"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCountCaption(pCubeName As %String, Output pStatus As %Status) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, return the display name of its %COUNT measure."}),"\n",(0,a.jsx)(s.h3,{id:"getcubefactclass",children:"%GetCubeFactClass"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeFactClass(pCubeName As %String, Output pStatus As %Status) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, return the class name of its fact table."}),"\n",(0,a.jsx)(s.h3,{id:"getcubefacttable",children:"%GetCubeFactTable"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeFactTable(pCubeName As %String, Output pStatus As %Status) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, return the SQL name of its fact table."}),"\n",(0,a.jsx)(s.h3,{id:"getcubefactcount",children:"%GetCubeFactCount"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeFactCount(pCubeName As %String, Output pStatus As %Status) As %Integer\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, return the number of rows within its fact table."}),"\n",(0,a.jsx)(s.h3,{id:"getcubemembercount",children:"%GetCubeMemberCount"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetCubeMemberCount(pCubeName As %String, Output pStatus As %Status, pDimName As %String = "", pHierName As %String = "", pLevelName As %String = "") As %Integer\n'})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, return the number of members within the given dimension level."}),"\n",(0,a.jsx)(s.h3,{id:"getcubename",children:"%GetCubeName"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeName(pCubeName As %String, Output pStatus As %Status) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, return its name in its original case."}),"\n",(0,a.jsx)(s.h3,{id:"iscubeabstract",children:"%IsCubeAbstract"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %IsCubeAbstract(pCubeName As %String, Output pStatus As %Status) As %Boolean\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Given the logical name, pCubeName of a DeepSee cube, test if it is abstract.",(0,a.jsx)(s.br,{}),"\nAn abstract cube does not contain any data and cannot be queried."]}),"\n",(0,a.jsx)(s.h3,{id:"iscubecompound",children:"%IsCubeCompound"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %IsCubeCompound(pCubeName As %String, Output pJoinList As %String, Output pStatus As %Status) As %Boolean\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, test if it is a compound cube (composed of two or more cubes joined together)."}),"\n",(0,a.jsx)(s.h3,{id:"getcubemodifieddate",children:"%GetCubeModifiedDate"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeModifiedDate(pCubeName As %String, Output pStatus As %Status) As %DeepSee.Datatype.dateTime\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, return the date and time that the cube definition was last modifed."}),"\n",(0,a.jsx)(s.h3,{id:"getkpimodifieddate",children:"%GetKPIModifiedDate"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetKPIModifiedDate(pKPI As %String, Output pStatus As %Status) As %DeepSee.Datatype.dateTime\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pKPI of a DeepSee KPI, return the date of the time the KPI definition was modified (in $H format)."}),"\n",(0,a.jsx)(s.h3,{id:"getcubecaption",children:"%GetCubeCaption"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeCaption(pCubeName As %String, Output pStatus As %Status) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, return its caption."}),"\n",(0,a.jsx)(s.h3,{id:"getkpicaption",children:"%GetKPICaption"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetKPICaption(pKPI As %String, Output pStatus As %Status) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pKPI of a DeepSee KPI, return its caption."}),"\n",(0,a.jsx)(s.h3,{id:"cubeexists",children:"%CubeExists"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %CubeExists(pCubeName As %String = "", Output pStatus As %Status) As %Boolean\n'})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, test if it exists."}),"\n",(0,a.jsx)(s.h3,{id:"kpiexists",children:"%KPIExists"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %KPIExists(pKPIName As %String = "", Output pStatus As %Status) As %Boolean\n'})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, test if it exists."}),"\n",(0,a.jsx)(s.h3,{id:"checkprivilege",children:"%CheckPrivilege"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %CheckPrivilege(pCubeName As %String) As %Boolean [ Final ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Test that the current user holds privileges on the given cube."}),"\n",(0,a.jsx)(s.h3,{id:"getcubeclass",children:"%GetCubeClass"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeClass(pCubeName As %String, Output pStatus As %Status) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, return the class name of the cube definition."}),"\n",(0,a.jsx)(s.h3,{id:"getcubeactionclass",children:"%GetCubeActionClass"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeActionClass(pCubeName As %String, Output pStatus As %Status) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, return the class name of it associated actionClass, if any."}),"\n",(0,a.jsx)(s.h3,{id:"getcubedescription",children:"%GetCubeDescription"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeDescription(pCubeName As %String, Output pStatus As %Status) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube return its class description."}),"\n",(0,a.jsx)(s.h3,{id:"getkpiname",children:"%GetKPIName"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetKPIName(pKPIName As %String, Output pStatus As %Status) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pKPIName of a DeepSee KPI, return its name in its original case."}),"\n",(0,a.jsx)(s.h3,{id:"iskpipublic",children:"%IsKPIPublic"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %IsKPIPublic(pKPIName As %String) As %Boolean\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pKPIName of a DeepSee KPI, test if it is public."}),"\n",(0,a.jsx)(s.h3,{id:"getkpidescription",children:"%GetKPIDescription"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetKPIDescription(pKPIName As %String, Output pStatus As %Status) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pKPIName of a DeepSee KPI return its class description."}),"\n",(0,a.jsx)(s.h3,{id:"getkpiclass",children:"%GetKPIClass"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetKPIClass(pKPIName As %String, Output pStatus As %Status) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pKPIName of a DeepSee KPI, return the class name of the KPI definition."}),"\n",(0,a.jsx)(s.h3,{id:"getkpilist",children:"%GetKPIList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetKPIList(Output pList) As %Status [ Final ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return a list of all currently defined DeepSee KPIs visible to the current user. This is used by utilities.",(0,a.jsx)(s.br,{}),"\nThis list takes the form:",(0,a.jsx)(s.br,{}),"\npList(NAME) = $LB(name,caption,moddate,type)"]}),"\n",(0,a.jsx)(s.h3,{id:"getkpipluginlist",children:"%GetKPIPlugInList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetKPIPlugInList(Output pList, pBaseName As %String = "", pPlugInType As %String = "", pUseCubeVersion As %Boolean = 0) As %Status [ Final ]\n'})}),"\n",(0,a.jsxs)(s.p,{children:['Return a list of all currently defined DeepSee "Plug-in" KPIs visible to the current user. If pBaseName is provided, then only list plug-ins visible to this base cube.',(0,a.jsx)(s.br,{}),"\nThis is used by utilities.",(0,a.jsx)(s.br,{}),"\nThis list takes the form:",(0,a.jsx)(s.br,{}),"\npList(NAME) = $LB(name,caption,moddate,type)",(0,a.jsx)(s.br,{}),'\npList(NAME,"props",propName) = ""']}),"\n",(0,a.jsx)(s.h3,{id:"getworksheetlist",children:"%GetWorksheetList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetWorksheetList(Output pList, pHidden As %Boolean = 0) As %Status [ Final ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return a list of all currently defined DeepSee worksheets visible to the current user. This is used by utilities.",(0,a.jsx)(s.br,{}),"\nThis list takes the form:",(0,a.jsx)(s.br,{}),"\npList(NAME) = $LB(name,caption,moddate,type)",(0,a.jsx)(s.br,{}),"\nIf pHidden is true, then include trash and local items."]}),"\n",(0,a.jsx)(s.h3,{id:"getmetriclist",children:"%GetMetricList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetMetricList(Output pList) As %Status [ Final ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return a list of all currently defined Business Metrics visible to the current user. This is used by utilities.",(0,a.jsx)(s.br,{}),"\nThis list takes the form:",(0,a.jsx)(s.br,{}),"\npList(NAME) = $LB(name,caption,moddate,type)"]}),"\n",(0,a.jsx)(s.h3,{id:"getdefaultmember",children:"%GetDefaultMember"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetDefaultMember(pCubeName As %String) As %String\n"})}),"\n",(0,a.jsxs)(s.p,{children:['Given the logical name, pCubeName of a DeepSee cube, return the default cube element (dimension and possibly level) as a string ("[Product].[Name]").',(0,a.jsx)(s.br,{}),"\nNote: this is no longer used by DeepSee."]}),"\n",(0,a.jsx)(s.h3,{id:"getdefaultmeasure",children:"%GetDefaultMeasure"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetDefaultMeasure(pCubeName As %String) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, return the name of the default Measure. Note: this is no longer used by DeepSee."}),"\n",(0,a.jsx)(s.h3,{id:"getdefaulthierarchy",children:"%GetDefaultHierarchy"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetDefaultHierarchy(pCubeName As %String, pDimName As %String) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, and a dimension name, return the name of the default Hierarchy (this is only defined if there is no more than one hierarchy for this dimension)."}),"\n",(0,a.jsx)(s.h3,{id:"getdefaultlevel",children:"%GetDefaultLevel"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetDefaultLevel(pCubeName As %String, pDimName As %String, pHierName As %String) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, and a dimension and hierarchy name, return the name of the default Level (this is only defined if there is no more than one level for this hierarchy)."}),"\n",(0,a.jsx)(s.h3,{id:"isbasecube",children:"%IsBaseCube"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %IsBaseCube(pCubeName As %String) As %Boolean [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube known to exist, return true if it is a base cube (and not a Subject Area)."}),"\n",(0,a.jsx)(s.h3,{id:"getbasecube",children:"%GetBaseCube"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetBaseCube(pCubeName As %String) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee subject area known to exist, return its base cube."}),"\n",(0,a.jsx)(s.h3,{id:"getsourceclass",children:"%GetSourceClass"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetSourceClass(pCubeName As %String) As %String\n"})}),"\n",(0,a.jsx)(s.h3,{id:"getrelatedcube",children:"%GetRelatedCube"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetRelatedCube(pCubeName As %String, pRelationName As %String) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, and the name of a relationship in the cube, return the name of the cube referred to by the relationship."}),"\n",(0,a.jsx)(s.h3,{id:"isrelationship",children:"%IsRelationship"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %IsRelationship(pCubeName As %String, pDimension As %String) As %Boolean\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pCubeName of a DeepSee cube, and the name of a dimension, test if the dimension is a relationship."}),"\n",(0,a.jsx)(s.h3,{id:"getdimensionlist",children:"%GetDimensionList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetDimensionList(pCube As %String, ByRef pInfo, pIncludeCalcMbrs As %Boolean = 0, pUseInFilter As %Boolean = 0, pExtendedInfo As %Boolean = 0, pShowAll As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return a list of the dimensions (and measures) within the specified cube.",(0,a.jsx)(s.br,{}),"\nOn return, pInfo will contain array of the form:",(0,a.jsx)(s.br,{}),"\npInfo(DimNo,HierNo,LevelNo) = $LB(type,DimName,HierName,LevelName)",(0,a.jsx)(s.br,{}),'\ntype can be "d","h","l","m","r" or "all" for dimension, hierarchy, level, measure, relationship or all level.',(0,a.jsx)(s.br,{}),'\nNote that all measures are found under DimNo 0 and have no LevelName. Dimensions whose name starts with "%" are not listed.',(0,a.jsx)(s.br,{}),"\nDimensions that only contain calculated members are returned as:",(0,a.jsx)(s.br,{}),"\npInfo(-1,hierNo,memberNo)",(0,a.jsx)(s.br,{}),"\nIf pUseInFilter is true, then only return levels whose useInFilter flag is true.",(0,a.jsx)(s.br,{}),"\nIf pExtendedInfo is true, also return $LB(factNumber, factID, SQL column ID, isEnabled, inProgress) settings.",(0,a.jsx)(s.br,{}),"\nIf pShowAll is true, include hidden items in the return list."]}),"\n",(0,a.jsx)(s.h3,{id:"getmembertree",children:"%GetMemberTree"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetMemberTree(pCube As %String, ByRef pTree, ByRef pVisited As %String, pSkipMeasures As %Boolean = 0, pRoot As %String = "", ByRef pLocalCalcMembers As %List, ByRef pLocalNamedSets As %List, pRelatedBy As %String = "", pLevel As %Integer = 0, pSkeleton As %Boolean = 0) As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Get the members (dimensions, measures, and actual members of dimensions) of the specified cube as a tree format that can be displayed within a %ZEN.Component.dynaTree.",(0,a.jsx)(s.br,{}),"\npCube is the cube name.",(0,a.jsx)(s.br,{}),"\npTree is an array returned by reference that contains the member data.",(0,a.jsx)(s.br,{}),"\npSkipMeasures is used internally and indicates that measures (as well as named filters) should not be listed.",(0,a.jsx)(s.br,{}),"\npRoot is used to specify that an incremental load of children is requested; if provided it is the spec of a parent node.",(0,a.jsx)(s.br,{}),"\npLocalCalcMembers is used to pass in additional calculated members.",(0,a.jsx)(s.br,{}),"\npLocalNamedSets is used to pass in additional named sets.",(0,a.jsx)(s.br,{}),"\npVisited and pRelatedBy are not used.",(0,a.jsx)(s.br,{}),"\npSkeleton indicates that members and relationships are not displayed."]}),"\n",(0,a.jsx)(s.h3,{id:"getpivottree",children:"%GetPivotTree"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetPivotTree(pCube As %String, ByRef pTree, pCurrPivot As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Get list of saved pivots for a cube for display within a tree."}),"\n",(0,a.jsx)(s.h3,{id:"getqualitymeasuretree",children:"%GetQualityMeasureTree"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetQualityMeasureTree(pCube As %String, ByRef pTree) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Get list of quality measures for display within a tree."}),"\n",(0,a.jsx)(s.h3,{id:"copytree",children:"%CopyTree"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %CopyTree(pName As %String, ByRef pTree, pParent As %Integer, ByRef pSource, pRoot As %Integer) As %Integer [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Copy source tree (from root) into pTree at the given parent node. Return number of nodes copied."}),"\n",(0,a.jsx)(s.h3,{id:"getdimensioninfo",children:"%GetDimensionInfo"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetDimensionInfo(pCubeName As %String, pSpec As %String, Output pDimNo, Output pHierNo, Output pLevelNo, Output pRelationName As %String, Output pRelationSpec As %String, Output pSpecInfo As %String, ByRef pLocalCalcMembers, pStrict As %Boolean = 1, ByRef pLocalNamedSets) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return the dimension,hierarchy, and level number of the specified element within the specified cube.",(0,a.jsx)(s.br,{}),"\npCubeName is the name of the cube.",(0,a.jsx)(s.br,{}),'\npSpec specifies the dimension in the form: "Dim.Hier.Level" or "Dim.Hier.Level.member".',(0,a.jsx)(s.br,{}),"\nIf pStrict is false, then find a level: Hier or Level can be omitted if they are not ambiguous.",(0,a.jsx)(s.br,{}),"\npSpecInfo is the array produced by parsing pSpec. This is returned as a convenience.",(0,a.jsx)(s.br,{}),"\npLocalCalcMembers is an optional list of locally defined calculated members. pLocalNamedSets is an optional list of locally defined named sets."]}),"\n",(0,a.jsx)(s.h3,{id:"getdimensionspec",children:"%GetDimensionSpec"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetDimensionSpec(pCubeName As %String, Output pSpec As %String, pDimNo As %Integer, pHierNo As %Integer = 0, pLevelNo As %Integer = 0) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the dimension,hierarchy, and level number for a dimension within the specified cube, return it's specification string."}),"\n",(0,a.jsx)(s.h3,{id:"getcubemeasures",children:"%GetCubeMeasures"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeMeasures(pCube As %String, ByRef pMeasures, pSkipCalculated As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return the measures within the given cube as an array of form:",(0,a.jsx)(s.br,{}),"\npMeasures(n) = $LB(name,caption,type,hidden,factName)",(0,a.jsx)(s.br,{}),"\nIf pSkipCalculated is true, then do not include calculated measures."]}),"\n",(0,a.jsx)(s.h3,{id:"getnamedfilters",children:"%GetNamedFilters"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetNamedFilters(pCube As %String, ByRef pFilters, pUseCubeVersion As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return all named filters for a given cube as an array of form:",(0,a.jsx)(s.br,{}),"\npFilters(n) = $LB(name,tooltip,spec,cube)"]}),"\n",(0,a.jsx)(s.h3,{id:"deletenamedfilter",children:"%DeleteNamedFilter"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %DeleteNamedFilter(pCube As %String, pFilterName As %String = "", pUseCubeVersion As %Boolean = 0) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:'Delete the given named filter for the given cube. If pFilterName is "*", then delete all named filters for the cube.'}),"\n",(0,a.jsx)(s.h3,{id:"getnamedfilterinfo",children:"%GetNamedFilterInfo"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetNamedFilterInfo(pCube As %String, pFilterName As %String, Output pInfo, pUseCubeVersion As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return details on the given named filter in the array pInfo."}),"\n",(0,a.jsx)(s.h3,{id:"savenamedfilter",children:"%SaveNamedFilter"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %SaveNamedFilter(pCube As %String, pFilterName As %String, pTooltip As %String, pSpec As %String, pUseCubeVersion As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Save a named filter."}),"\n",(0,a.jsx)(s.h3,{id:"getsharedcalcmembers",children:"%GetSharedCalcMembers"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetSharedCalcMembers(pCube As %String, ByRef pCalcMbrs, pUseCubeVersion As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return all shared calculated members for a given cube as an array of form:",(0,a.jsx)(s.br,{}),"\npCalcMbrs(n) = $LB(name,tooltip,dimension,cube)"]}),"\n",(0,a.jsx)(s.h3,{id:"deletesharedcalcmember",children:"%DeleteSharedCalcMember"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %DeleteSharedCalcMember(pCube As %String = "", pCalcMbrName As %String = "", pDimension As %String = "", pUseCubeVersion As %Boolean = 0) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:'Delete the given shared calculated member for the given cube. If pCalcMbrName is "*", then delete all shared calculated members for the cube.'}),"\n",(0,a.jsx)(s.h3,{id:"getsharedcalcmemberinfo",children:"%GetSharedCalcMemberInfo"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetSharedCalcMemberInfo(pCube As %String, pDimension As %String = "", pCalcMbrName As %String = "", Output pInfo, pUseCubeVersion As %Boolean = 0) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Return details on the given shared calculated member in the array pInfo."}),"\n",(0,a.jsx)(s.h3,{id:"savesharedcalcmember",children:"%SaveSharedCalcMember"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %SaveSharedCalcMember(pCube As %String = "", pCalcMbrName As %String = "", pDimension = "", pValueExpression = "", pFormatString = "", pSolveOrder, pUseCubeVersion As %Boolean = 0) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Store the details of a calulated member in the shared location."}),"\n",(0,a.jsx)(s.h3,{id:"getpivotvariables",children:"%GetPivotVariables"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetPivotVariables(pCube As %String, ByRef pVariables, pUseCubeVersion As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return all pivot variables for a given cube as an array of form:",(0,a.jsx)(s.br,{}),"\npVariables(n) = $LB(name,caption,defValue,context,desc)"]}),"\n",(0,a.jsx)(s.h3,{id:"deletepivotvariable",children:"%DeletePivotVariable"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %DeletePivotVariable(pCube As %String, pVariableName As %String = "", pUseCubeVersion As %Boolean = 0) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:'Delete the given pivot variable for the given cube. If pVariableName is "*", then delete all pivot variables for the cube.'}),"\n",(0,a.jsx)(s.h3,{id:"getpivotvariableinfo",children:"%GetPivotVariableInfo"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetPivotVariableInfo(pCube As %String, pVariableName As %String, Output pInfo, pUseCubeVersion As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return details on the given pivot variable in the array pInfo."}),"\n",(0,a.jsx)(s.h3,{id:"savepivotvariable",children:"%SavePivotVariable"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %SavePivotVariable(pCube As %String, pVariableName As %String, ByRef pInfo As %String, pUseCubeVersion As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Save a pivot variable. The variable's attributes are in the array pInfo."}),"\n",(0,a.jsx)(s.h3,{id:"getpivotvariablevalues",children:"%GetPivotVariableValues"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetPivotVariableValues(pCube As %String, pVariableName As %String, Output pValues, pUseCubeVersion As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Find all values for a given pivot variable.",(0,a.jsx)(s.br,{}),"\nReturn pValues(n) = $LB(text,spec)"]}),"\n",(0,a.jsx)(s.h3,{id:"getcubesearchablemeasures",children:"%GetCubeSearchableMeasures"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeSearchableMeasures(pCube As %String, ByRef pMeasures) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return the searchable measures within the given cube as an array of form:",(0,a.jsx)(s.br,{}),"\npMeasures(n) = $LB(name,caption,type)"]}),"\n",(0,a.jsx)(s.h3,{id:"getdimensioncaption",children:"%GetDimensionCaption"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetDimensionCaption(pCube As %String, pDimNo As %Integer, pHierNo As %Integer, pLevelNo As %Integer, ByRef pCaption As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return the localized display name for a given element within the given cube."}),"\n",(0,a.jsx)(s.h3,{id:"getmembercaption",children:"%GetMemberCaption"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetMemberCaption(pCube As %String, pDimName As %String, pHierName As %String = "", pLevelName As %String = "", ByRef pCaption As %String) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Return the localized display name for a given element within the given cube given a dimension, hierarchy, and level name."}),"\n",(0,a.jsx)(s.h3,{id:"getmemberdescription",children:"%GetMemberDescription"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetMemberDescription(pCube As %String, pDimName As %String, pHierName As %String = "", pLevelName As %String = "", ByRef pDescription As %String) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Return the localized description for a given element within the given cube given a dimension, hierarchy, and level name."}),"\n",(0,a.jsx)(s.h3,{id:"memberhaschildren",children:"%MemberHasChildren"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %MemberHasChildren(pCube As %String, pDimNo As %Integer, pHierNo As %Integer, pLevelNo As %Integer, ByRef pHasChildren As %Boolean) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Test if a given element within the given cube has child levels."}),"\n",(0,a.jsx)(s.h3,{id:"getmeasurefact",children:"%GetMeasureFact"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetMeasureFact(pCube As %String, pMeasureName As %String, Output pMeasureFact As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:'Given a cube and a measure name, i.e. "Patient Count", return the fact table column name for that measured.'}),"\n",(0,a.jsx)(s.h3,{id:"getdimensionfact",children:"%GetDimensionFact"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetDimensionFact(pCube As %String, pDimNo As %Integer, pHierNo As %Integer, pLevelNo As %Integer, ByRef pFactName As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return the fact name associated with a given element within the given cube."}),"\n",(0,a.jsx)(s.h3,{id:"getdimensionproperties",children:"%GetDimensionProperties"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetDimensionProperties(pCube As %String, pDimName As %String, pHierName As %String, pLevelName As %String, ByRef pProperties) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return the properties of a given level within the given cube as an array of form:",(0,a.jsx)(s.br,{}),"\npProperties(n) = $LB(name,caption,type)"]}),"\n",(0,a.jsx)(s.h3,{id:"getcubelevels",children:"%GetCubeLevels"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeLevels(pCube As %String, ByRef pLevels, pSkipAll As %Boolean = 0, pSkipComputed As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return a list of all levels within the given cube.",(0,a.jsx)(s.br,{}),"\nOn return pLevels contains a list of all levels of the form:",(0,a.jsx)(s.br,{}),"\npLevels(n) = $LB(type,dimName,hierName,levelName)",(0,a.jsx)(s.br,{}),'\nType is "l" for level, "m" for measure (in which case there is no levelName) or "r" for relationship (in which case there is only a dimension name).',(0,a.jsx)(s.br,{}),'\nIf pSkipAll is true, do not return any "all" levels.',(0,a.jsx)(s.br,{}),"\nIf pSkipComputed is true, do not return any levels for computed dimensions."]}),"\n",(0,a.jsx)(s.h3,{id:"getcubelistings",children:"%GetCubeListings"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetCubeListings(pCube As %String, Output pListings As %List, pType As %String = "") As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Return an array of all (non-default) listings for the given cube. The array is of the form:",(0,a.jsx)(s.br,{}),"\npListings(name) = $LB(caption,fields,order,type,source,edit)",(0,a.jsx)(s.br,{}),"\nIf there are no listings, then pListings will be undefined.",(0,a.jsx)(s.br,{}),"\nIf pType is defined, then only return listings of the given type."]}),"\n",(0,a.jsx)(s.h3,{id:"getcubelistingfields",children:"%GetCubeListingFields"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCubeListingFields(pCube As %String, Output pFields As %List) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return an array of all defined listing fields for the given cube. The array is of the form:",(0,a.jsx)(s.br,{}),"\npListings(name) = $LB(caption,expression)",(0,a.jsx)(s.br,{}),"\nIf there are no listing fields, then pFields will be undefined."]}),"\n",(0,a.jsx)(s.h3,{id:"getdimensionmembers",children:"%GetDimensionMembers"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetDimensionMembers(pCubeName As %String, pSpec As %String, pContext As %String = "", Output pMembers, pMaxMembers As %Integer = 100, Output pMemberClass As %String, ByRef pRelatedFilters, pCalcMode As %Integer = 0, pSearchKey As %String = "") As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Return a list of members of the specified dimension for the specified cube.",(0,a.jsx)(s.br,{}),"\npCubeName is the name of the cube.",(0,a.jsx)(s.br,{}),'\npSpec specifies the dimension in the form: "Dim.Hier.Level".',(0,a.jsx)(s.br,{}),"\npContext is used to indicate a particular calling context. This affects the behavior when trimming the list of members using related filters.",(0,a.jsx)(s.br,{}),"\nThe list is returned via pMembers. This takes the form:",(0,a.jsx)(s.br,{}),"\npMembers(n) = $LB(value,name,memberId,memberKey,[description])",(0,a.jsx)(s.br,{}),"\nReturn the member class as a convenience.",(0,a.jsx)(s.br,{}),"\nIf pRelatedFilters is provided, it is an array of other filter values to use to restrict the set of members. It takes the form:",(0,a.jsx)(s.br,{}),"\npRelatedFilters(spec) = key",(0,a.jsx)(s.br,{}),"\nIf pCalcMode is 1, then only return calculated members. If pCalcMode is -1, then only return non-calculated members."]}),"\n",(0,a.jsx)(s.h3,{id:"filterspectoarray",children:"%FilterSpecToArray"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %FilterSpecToArray(pCube As %String, pSpec As %String, ByRef pFilterArray) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Convert a string pSpec into array form and add it to the array pFilterArray. The value for pSpec may be any valid MDX WHERE clause referencing non-calculated members. If a member being inserted into the array already exists, the selection data will be replaced by the intersection of the preexisting member or set and the new member or set provided by the argument."}),"\n",(0,a.jsx)(s.h3,{id:"slicernodetospecarray",children:"%SlicerNodeToSpecArray"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %SlicerNodeToSpecArray(node As %DeepSee.Query.node, ByRef pFilterArray) As %Status [ Internal ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Perfroms the actual work of recursively walking a slicer tree and representing it as an array if possible. Contents of the pFilterArray can be returned in two different forms:",(0,a.jsx)(s.br,{}),"\nSingle argument: pFilterArray(levelSpec) = key",(0,a.jsx)(s.br,{}),"\nheterogeneous %OR: pFilterArray(ORText,levelSpec) = key"]}),"\n",(0,a.jsx)(s.h3,{id:"getlevelnameforkey",children:"%GetLevelNameForKey"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetLevelNameForKey(pCubeName As %String, pSpec As %String, pKey As %String, Output pValue As %String) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Give a cube, a level within the cube, and the key value of a member of the level, return the name of the level member.",(0,a.jsx)(s.br,{}),"\npCubeName is the name of the cube.",(0,a.jsx)(s.br,{}),'\npSpec specifies the dimension in the form: "Dim.Hier.Level".',(0,a.jsx)(s.br,{}),"\npKey is a key value. This may include the &[] around the key value.",(0,a.jsx)(s.br,{}),"\npValue is the returned display value."]}),"\n",(0,a.jsx)(s.h3,{id:"parsekeyfordisplay",children:"%ParseKeyForDisplay"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %ParseKeyForDisplay(pKey As %String, Output pValue As %String, pKPIClass As %String = "", pFilterName As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Parse a filter key value and convert all keys to display values in the context of pKPIClass."}),"\n",(0,a.jsx)(s.h3,{id:"getmemberkeyforid",children:"%GetMemberKeyForID"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetMemberKeyForID(pCubeName As %String, pDimNo As %Integer, pHierNo As %Integer, pLevelNo As %Integer, pID As %String, Output pKey As %String) As %Status [ Internal ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Given a cube and the dimension, heirarchy, and level numbers, translate the member ID into the member key. pCubeName is the name of the cube.",(0,a.jsx)(s.br,{}),"\npID is an ID in the dimension's star table.",(0,a.jsx)(s.br,{}),"\npKey is the returned key corresponding to that ID."]}),"\n",(0,a.jsx)(s.h3,{id:"getmodel",children:"%GetModel"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetModel(pCubeName As %String, Output pStatus As %Status) As %DeepSee.Model.cube\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Given the logical name, pCubeName of a DeepSee cube, return an instance of the %DeepSee.Model.cube meta-data object that describes the cube.",(0,a.jsx)(s.br,{}),'\nReturn "" if the given cube does not exist.',(0,a.jsx)(s.br,{}),"\nWhen called on a subject area, this redirects to %GetSubjectAreaModel."]}),"\n",(0,a.jsx)(s.h3,{id:"getsubjectareamodel",children:"%GetSubjectAreaModel"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetSubjectAreaModel(pName As %String, Output pStatus As %Status) As %DeepSee.Model.SubjectArea.subjectArea\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Given the logical name, pName of a DeepSee subject, return an instance of the %DeepSee.Model.SubjectArea.subjectArea meta-data object that describes the cube.",(0,a.jsx)(s.br,{}),'\nReturn "" if the given cube does not exist.',(0,a.jsx)(s.br,{}),"\nThis method does not work on base cubes; use %GetModel."]}),"\n",(0,a.jsx)(s.h3,{id:"getfunctionset",children:"%GetFunctionSet"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetFunctionSet(ByRef funcset, pClass As %String) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Builds a list of functions (methods) for a given FunctionSet class This list is returned in funcset.",(0,a.jsx)(s.br,{}),"\nThe list is of the form list(NAME) = $LB(class,name,specparsed,return).",(0,a.jsx)(s.br,{}),"\nThis method is not currently used. [Previously private]"]}),"\n",(0,a.jsx)(s.h3,{id:"gettimelevelclasses",children:"%GetTimeLevelClasses"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetTimeLevelClasses(Output pClasses) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Builds a list of available time level classes. The list is of the form pClasses(calendar,NAME) = class. [Previously private]"}),"\n",(0,a.jsx)(s.h3,{id:"gettimeleveltype",children:"%GetTimeLevelType"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetTimeLevelType(pClassName As %String) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Protected lookup of the type of a time function. If the argument pClassName is not a valid time class (extends %DeepSee.Time.AbstractLevel), then the method returns an empty string."}),"\n",(0,a.jsx)(s.h3,{id:"gettimelevelcalendar",children:"%GetTimeLevelCalendar"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetTimeLevelCalendar(pClassName As %String) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Protected lookup of the calendar used for a time function. If the argument pClassName is not a valid time class (extends %DeepSee.Time.AbstractLevel), then the method returns an empty string."}),"\n",(0,a.jsx)(s.h3,{id:"excelformatdate",children:"%ExcelFormatDate"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ExcelFormatDate(pDate As %String, pCalendar As %String) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given a date in $H format and a calendar, return the number of days since Jan 0 1900 This is excel's version of $H and is needed to export dates as dates to excel"}),"\n",(0,a.jsx)(s.h3,{id:"analyze",children:"%Analyze"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %Analyze(pCubeName As %String, pFlags As %String = "i", pVerbose As %Boolean = 1) As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Loop over all indices for a given cube and show details.",(0,a.jsx)(s.br,{}),"\npCubeName is the name of the cube.",(0,a.jsx)(s.br,{}),'\npFlags is a set of flags that can control what is analyzed: flags include "i" (include indices), "f" (include facts), "c" (include cell cache). The default is "i".',(0,a.jsx)(s.br,{}),"\npVerbose indicates that status information is to be displayed while the analysis is done."]}),"\n",(0,a.jsx)(s.h3,{id:"analyzemissing",children:"%AnalyzeMissing"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %AnalyzeMissing(pCube As %String) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Examine the levels and measures for a given cube and report on how many missing values there are.",(0,a.jsx)(s.br,{}),"\npCubeName is the name of the cube."]}),"\n",(0,a.jsx)(s.h3,{id:"getdimensiontables",children:"%GetDimensionTables"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetDimensionTables(pCubeName As %String, Output pStarTables, pCardinality As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return an array of the dimension tables (class names) used for a given cube. If pCardinality is true, compute the size of each table."}),"\n",(0,a.jsx)(s.h3,{id:"builddimensiontableindices",children:"%BuildDimensionTableIndices"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %BuildDimensionTableIndices(pCubeName As %String, pVerbose As %Boolean = 1) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:'Rebuild the indices for every dimension table used for cube pCubeName. If pCubeName is "*", then perform this on every cube within the current namespace that is visible to the current user.'}),"\n",(0,a.jsx)(s.h3,{id:"readfacts",children:"%ReadFacts"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ReadFacts(pCubeName As %String, pStartId As %Integer, pEndId As %Integer) [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Read portion of fact table into memory. Used during index loading."}),"\n",(0,a.jsx)(s.h3,{id:"compressindices",children:"%CompressIndices"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %CompressIndices(pCubeName As %String, pVerbose As %Boolean = 0) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Loop over all indices for the given cube and compress them."}),"\n",(0,a.jsx)(s.h3,{id:"denormalizetype",children:"%DenormalizeType"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %DenormalizeType(pType As %String) As %String [ CodeMode = expression ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Convert a class name of the form %Library.xxx to %xxx."}),"\n",(0,a.jsx)(s.h3,{id:"getsqltablename",children:"%GetSQLTableName"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetSQLTableName(pClass As %String, pVerifyExists = 0) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Returns the SQL table name for class pClass. Returns the empty string if the supplied pClass does not have an associated table."}),"\n",(0,a.jsx)(s.h3,{id:"getsqlcolumnname",children:"%GetSQLColumnName"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetSQLColumnName(pClass As %String, pProp As %String) As %String [ Final ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Returns the SQL name of property pProp for class pClass."}),"\n",(0,a.jsx)(s.h3,{id:"getcubelist",children:"%GetCubeList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetCubeList(Output pList, pType As %String = "", pNonAbstract As %Boolean = 0, pBaseCube As %String = "") As %Status [ Final ]\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Return an ",(0,a.jsx)(s.strong,{children:"array"})," of all currently defined DeepSee Cubes visible to the current user. This is used by utilities.",(0,a.jsx)(s.br,{}),"\nThis array takes the form:",(0,a.jsx)(s.br,{}),"\npList(NAME) = $LB(name,caption,moddate,type)",(0,a.jsx)(s.br,{}),'\npType, if defined, can be "cubes" or "subjectAreas". This will limit the returned list to those item types.',(0,a.jsx)(s.br,{}),"\npNonAbstract, if true, limits the returned items to non-abstract cubes.",(0,a.jsx)(s.br,{}),"\npBaseCube, if provided, limits the returned items to the base cube and its descendants.",(0,a.jsx)(s.br,{}),"\nIf there are no cubes, then pList will be ",(0,a.jsx)(s.strong,{children:"undefined"}),"."]}),"\n",(0,a.jsx)(s.h3,{id:"getcubelistarray",children:"%GetCubeListArray"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetCubeListArray(ByRef pParameters, Output pMetaData, Output %pData, pType As %String = "", pNonAbstract As %Boolean = 0) As %Status [ Final, Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:'Return an array of all currently DeepSee Cubes and subject areas in a format that can be used by a finderDialog. pType, if defined, can be "cubes" or "subjectAreas". This will limit the returned list to those item types. pNonAbstract, if true, limits the returned items to non-abstract cubes.'}),"\n",(0,a.jsx)(s.h3,{id:"getpivotlistarray",children:"%GetPivotListArray"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetPivotListArray(ByRef pParameters, Output pMetaData, Output %pData) As %Status [ Final, Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return an array of all currently defined DeepSee Pivots in a format that can be used by a finderDialog."}),"\n",(0,a.jsx)(s.h3,{id:"getdashboardlistarray",children:"%GetDashboardListArray"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetDashboardListArray(ByRef pParameters, Output pMetaData, Output %pData) As %Status [ Final, Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return an array of all currently defined DeepSee dashboards in a format that can be used by a finderDialog."}),"\n",(0,a.jsx)(s.h3,{id:"getkpilistarray",children:"%GetKPIListArray"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetKPIListArray(ByRef pParameters, Output pMetaData, Output %pData) As %Status [ Final, Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return an array of all currently defined, public DeepSee KPIs in a format that can be used by a finderDialog."}),"\n",(0,a.jsx)(s.h3,{id:"getworksheetlistarray",children:"%GetWorksheetListArray"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetWorksheetListArray(ByRef pParameters, Output pMetaData, Output %pData) As %Status [ Final, Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return an array of all currently defined DeepSee Worksheets in a format that can be used by a finderDialog."}),"\n",(0,a.jsx)(s.h3,{id:"getmetriclistarray",children:"%GetMetricListArray"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetMetricListArray(ByRef pParameters, Output pMetaData, Output %pData) As %Status [ Final, Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return an array of all currently defined Business Metrics in a format that can be used by a finderDialog."}),"\n",(0,a.jsx)(s.h3,{id:"builditemlistarray",children:"%BuildItemListArray"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %BuildItemListArray(ByRef pList, Output pMetaData, Output %pData, ByRef pParameters) As %Status [ Final, Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Helper method. Convert the items in pList into an array that can be used by a finderDialog."}),"\n",(0,a.jsx)(s.h3,{id:"getfunctionlist",children:"%GetFunctionList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetFunctionList(Output pList, pAsTree As %Boolean = 0) As %Status [ Final ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return a list of all currently defined MDX functions. This is used by utilities.",(0,a.jsx)(s.br,{}),"\nIf pAsTree is true, return a format that a tree control can consume."]}),"\n",(0,a.jsx)(s.h3,{id:"testtimeclass",children:"%TestTimeClass"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %TestTimeClass(pClassName As %String, pTest As %Integer = 1, pFormat As %String = "") As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["This utility method tests a DeepSee time level class to verify that it is implemented correctly.",(0,a.jsx)(s.br,{}),"\nThere are several tests:",(0,a.jsx)(s.br,{}),"\nTest 1: test the %Convert, %KeyToValue, and %ValueToKey methods.",(0,a.jsx)(s.br,{}),"\nTest 2: test the %Convert, %KeyToValue, and %ValueToKey methods."]}),"\n",(0,a.jsx)(s.h3,{id:"loadcellcache",children:"%LoadCellCache"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %LoadCellCache(pCubeName As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Compute pre-loaded cell cache entries for the given cube based on the cell cache specification within the cube's definition."}),"\n",(0,a.jsx)(s.h3,{id:"computecellcache",children:"%ComputeCellCache"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ComputeCellCache(pCubeName As %String, ByRef pSpec) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Generate and execute a query that will force the update of the cell cache for given cube and levels."}),"\n",(0,a.jsx)(s.h3,{id:"parserangeexpression",children:"%ParseRangeExpression"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %ParseRangeExpression(pRange As %String, Output pOutput, pContext As %String = "", Output pCode As %String) As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Parse the given DeepSee range expression.",(0,a.jsx)(s.br,{}),"\nA range expression takes the form:",(0,a.jsx)(s.br,{}),"\nspec:replace;spec:replace;",(0,a.jsx)(s.br,{}),"\nspec takes the form:",(0,a.jsx)(s.br,{}),"\nvalue | (value,value) | [value,value]",(0,a.jsx)(s.br,{}),"\n() specifies a non-inclusive edge of a range.",(0,a.jsx)(s.br,{}),"\n[] specifies a inclusive edge of a range.",(0,a.jsx)(s.br,{}),"\npContext is used for error reporting. pCode contains a generated expression that implement the range expression (using x as an input value)."]}),"\n",(0,a.jsx)(s.h3,{id:"expandrangemacro",children:"%ExpandRangeMacro"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %ExpandRangeMacro(ByRef pReplace As %String, pExp As %String, pContext As %String = "") As %Status [ Private ]\n'})}),"\n",(0,a.jsx)(s.h3,{id:"killlogfile",children:"%KillLogFile"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %KillLogFile(pFileName As %String = "DeepSeeTasks") As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Delete the given DeepSee log file."}),"\n",(0,a.jsx)(s.h3,{id:"writetolog",children:"%WriteToLog"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %WriteToLog(pSource As %String = "", pMsg As %String = "", pFileName As %String = "DeepSeeTasks") As %Status [ Internal ]\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Appends an error message to a DeepSee log file within the log directory. This method uses locks to support simultaneous updates from from multiple processes.",(0,a.jsx)(s.br,{}),"\npSource is the source of the error.",(0,a.jsx)(s.br,{}),"\npMsg is the error message.",(0,a.jsx)(s.br,{}),"\npFileName is the name of the log file. This should not include a file path or file extension."]}),"\n",(0,a.jsx)(s.h3,{id:"getlogfilename",children:"%GetLogFileName"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetLogFileName(pFileName As %String = "DeepSeeTasks") As %String [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Return the full name of a DeepSee log file."}),"\n",(0,a.jsx)(s.h3,{id:"getdatasourcetree",children:"%GetDataSourceTree"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetDataSourceTree(pClass As %String, Output pTree, ByRef pParms, pLevel As %Integer = 0, pParentRef As %String = "", pRoot As %String = "") As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Return the properties of a cube data source in a format that can be consumed by a Zen dynaTree control.",(0,a.jsx)(s.br,{}),"\npRoot is used to specify that an incremental load of children is requested; if provided it is the spec of a parent node."]}),"\n",(0,a.jsx)(s.h3,{id:"savecubedefinition",children:"%SaveCubeDefinition"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %SaveCubeDefinition(pClassName As %String, pSuper As %String = "", pDesc As %String, pModel As %DeepSee.Model.cube, pDomain As %String = "", pDependsOn As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Utility method to create and save a cube definition class. Used by Architect."}),"\n",(0,a.jsx)(s.h3,{id:"savesubjectareadefinition",children:"%SaveSubjectAreaDefinition"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %SaveSubjectAreaDefinition(pClassName As %String, pSuper As %String = "", pDesc As %String, pModel As %DeepSee.Model.SubjectArea.subjectArea, pDomain As %String = "", pDependsOn As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Utility method to create and save a subject area definition class. Used by Architect."}),"\n",(0,a.jsx)(s.h3,{id:"getpivotlist",children:"%GetPivotList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetPivotList(Output pList, pHidden As %Boolean = 0, pCubeName As %String = "") As %Status [ Final ]\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Return a list of all currently defined DeepSee Pivots visible to the current user. This is used by utilities.",(0,a.jsx)(s.br,{}),"\nThis list takes the form:",(0,a.jsx)(s.br,{}),"\npList(NAME) = $LB(name,caption,moddate,type)",(0,a.jsx)(s.br,{}),"\nIf pHidden is true, then include trash and local items.",(0,a.jsx)(s.br,{}),"\nIf pCubeName is provided, then only list pivots based on it."]}),"\n",(0,a.jsx)(s.h3,{id:"getdashboardlist",children:"%GetDashboardList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetDashboardList(Output pList) As %Status [ Final ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return a list of all currently defined DeepSee dashboards visible to the current user. This is used by utilities.",(0,a.jsx)(s.br,{}),"\nThis list takes the form:",(0,a.jsx)(s.br,{}),"\npList(NAME) = $LB(name,caption,moddate,type)"]}),"\n",(0,a.jsx)(s.h3,{id:"convertdate",children:"%ConvertDate"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ConvertDate(pDate As %String, pDateType As %String) As %Date\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Utility method. Convert a date value to %Date ($H) format.",(0,a.jsx)(s.br,{}),"\npDateType indicates the incoming date format."]}),"\n",(0,a.jsx)(s.h3,{id:"setagentcount",children:"%SetAgentCount"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %SetAgentCount(pNumAgents As %Integer = "", pType = "build", Output pStatus As %Status) As %Integer\n'})}),"\n",(0,a.jsxs)(s.p,{children:['Set the default number of background processes used by DeepSee for the group specified by pType. Tasks executed by background agents are divided into "build" and "runTime" groups. This method can be used to set a per-group limit or to set a maximum number of processes that may be active across multiple groups. The limits can be set with the following value for pType:',(0,a.jsx)(s.br,{}),'\n- "build" - number of agents that will be requested for a single worker group performing cube build tasks',(0,a.jsx)(s.br,{}),'\n- "runTime" - number of agents that will be requested for queries and processing of user code such as KPIs',(0,a.jsx)(s.br,{}),'\n- "buildMax" - the maximum number of agents that can be active for user tasks',(0,a.jsx)(s.br,{}),'\n- "runTimeMax" - the maximum number of agents that can be active for user tasks']}),"\n",(0,a.jsx)(s.h3,{id:"getagentcount",children:"%GetAgentCount"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetAgentCount(pType = "build", Output pStatus As %Status) As %Integer\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Get the current default agent count for the group specified by pType. pType can be used to query any of the limits:",(0,a.jsx)(s.br,{}),'\n- "build" - number of agents that will be requested for a single worker group performing cube build tasks',(0,a.jsx)(s.br,{}),'\n- "runTime" - number of agents that will be requested for queries and processing of user code such as KPIs',(0,a.jsx)(s.br,{}),'\n- "buildMax" - the maximum number of agents that can be active for build tasks',(0,a.jsx)(s.br,{}),'\n- "runTimeMax" - the maximum number of agents that can be active for user tasks']}),"\n",(0,a.jsx)(s.h3,{id:"setdstimeindex",children:"%SetDSTimeIndex"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %SetDSTimeIndex(pClassName As %String, pObjectId As %String, pAction As %Integer, pInterval As %Integer = 0)\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Set an entry into the DS Time index used to track changes to transactional classes.",(0,a.jsx)(s.br,{}),'\nThis is intended for classes that use DSTIME="manual" and wish to maintain the DSTIME index manually. It should be called whenever an instance of the class is inserted, updated, or deleted.',(0,a.jsx)(s.br,{}),"\npClassName is the (case-sensitive) class name of the transactional class.",(0,a.jsx)(s.br,{}),"\npObjectId is object id of the affected object instance.",(0,a.jsx)(s.br,{}),"\npAction is 0 for updates, 1 for inserts, and 2 for deletes.",(0,a.jsx)(s.br,{}),"\npInterval is the time interval value corresponding to the DSINTERVAL parameter. If this is not greater than zero then a standard DSTIME index entry is set, otherwise a DSINTERVAL index entry is set."]}),"\n",(0,a.jsx)(s.h3,{id:"geterrorpageurl",children:"%GetErrorPageURL"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetErrorPageURL(pError As %String) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return the URL for the DeepSee management portal error page."}),"\n",(0,a.jsx)(s.h3,{id:"getcollectionprojections",children:"%GetCollectionProjections"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCollectionProjections(pClassname As %String, ByRef pProjectedClass As %String(MAXLEN=255)) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given a class name, return the set of classes projected for collection properties of the class."}),"\n",(0,a.jsx)(s.h3,{id:"addtimeinterval",children:"%AddTimeInterval"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %AddTimeInterval(pDate As %Date, pInterval As %String) As %Date\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Add a time interval to a given date (in $H format).",(0,a.jsx)(s.br,{}),'\nThe interval is of the form "99y99m99d" (years, months, and days). There can be a leading minus sign.']}),"\n",(0,a.jsx)(s.h3,{id:"daysinmonth",children:"%DaysInMonth"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %DaysInMonth(y, m) As %Integer\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return number of days in the given year and month."}),"\n",(0,a.jsx)(s.h3,{id:"hijridaysinmonth",children:"%HijriDaysInMonth"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %HijriDaysInMonth(y = "", m = "", calendar = "hijriTabular") As %Integer\n'})}),"\n",(0,a.jsx)(s.p,{children:"Return number of days in the given year and month."}),"\n",(0,a.jsx)(s.h3,{id:"addhijritimeinterval",children:"%AddHijriTimeInterval"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %AddHijriTimeInterval(pDate As %Date, pInterval As %String, pCalendar As %String = "hijriTabular") As %Date\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Add a time interval to a given date (in $H format).",(0,a.jsx)(s.br,{}),'\nThe interval is of the form "99y99m99d" (years, months, and days). There can be a leading minus sign.']}),"\n",(0,a.jsx)(s.h3,{id:"isleapyear",children:"%IsLeapYear"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %IsLeapYear(y) As %Boolean\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return whether the given year is a leap year."}),"\n",(0,a.jsx)(s.h3,{id:"ishijrileapyear",children:"%IsHijriLeapYear"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %IsHijriLeapYear(y, calendar = "hijriTabular") As %Boolean\n'})}),"\n",(0,a.jsx)(s.p,{children:"Return whether the given year is a leap year."}),"\n",(0,a.jsx)(s.h3,{id:"formatdate",children:"%FormatDate"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %FormatDate(pDate As %Date, pFormat As %String = "") As %String\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Format a date value (in $H format) according to the format in pFormat.",(0,a.jsx)(s.br,{}),"\nThe format string can contain:",(0,a.jsx)(s.br,{}),'\n"y" - Year number (4 digits).',(0,a.jsx)(s.br,{}),'\n"q" - Quarter number.',(0,a.jsx)(s.br,{}),'\n"m" - Month number, with no leading zero.',(0,a.jsx)(s.br,{}),'\n"mm" - Month number, with leading zero.',(0,a.jsx)(s.br,{}),'\n"mmm" - Short name of month (using server locale).',(0,a.jsx)(s.br,{}),'\n"mmmm" - Long name of month (using server locale).',(0,a.jsx)(s.br,{}),'\n"d" - Day number, with no leading zero.',(0,a.jsx)(s.br,{}),'\n"dd" - Day number, with leading zero.',(0,a.jsx)(s.br,{}),'\n"ddd" - Short name of day (using server locale).',(0,a.jsx)(s.br,{}),'\n"dddd" - Long name of day (using server locale).',(0,a.jsx)(s.br,{}),'\n"\\x" - display character "x"',(0,a.jsx)(s.br,{}),'\n" " - space',(0,a.jsx)(s.br,{}),'\n"/" - "/"',(0,a.jsx)(s.br,{}),'\n"-" - "-"',(0,a.jsx)(s.br,{}),'\n"." - "."']}),"\n",(0,a.jsx)(s.h3,{id:"unformatdate",children:"%UnformatDate"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %UnformatDate(pValue As %String, pFormat As %String = "") As %Date\n'})}),"\n",(0,a.jsxs)(s.p,{children:['Unformat a date value according to the given format and convert to $H (or "").',(0,a.jsx)(s.br,{}),"\nSee %FormatDate for information on formats."]}),"\n",(0,a.jsx)(s.h3,{id:"formatpartialdate",children:"%FormatPartialDate"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %FormatPartialDate(pDate As %String = "", pFormat As %String = "") As %String\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Format a date value (in partial date ODBC format) according to the format in pFormat.",(0,a.jsx)(s.br,{}),"\nThe format string can contain:",(0,a.jsx)(s.br,{}),'\n"y" - Year number (4 digits).',(0,a.jsx)(s.br,{}),'\n"q" - Quarter number.',(0,a.jsx)(s.br,{}),'\n"m" - Month number, with no leading zero.',(0,a.jsx)(s.br,{}),'\n"mm" - Month number, with leading zero.',(0,a.jsx)(s.br,{}),'\n"mmm" - Short name of month (using server locale).',(0,a.jsx)(s.br,{}),'\n"mmmm" - Long name of month (using server locale).',(0,a.jsx)(s.br,{}),'\n"d" - Day number, with no leading zero.',(0,a.jsx)(s.br,{}),'\n"dd" - Day number, with leading zero.',(0,a.jsx)(s.br,{}),'\n"ddd" - Short name of day (using server locale).',(0,a.jsx)(s.br,{}),'\n"dddd" - Long name of day (using server locale).',(0,a.jsx)(s.br,{}),'\n"\\x" - display character "x"',(0,a.jsx)(s.br,{}),'\n" " - space',(0,a.jsx)(s.br,{}),'\n"/" - "/"',(0,a.jsx)(s.br,{}),'\n"-" - "-"',(0,a.jsx)(s.br,{}),'\n"." - "."',(0,a.jsx)(s.br,{}),'\nMissing pieces are replaced with the localized text "Unknown".']}),"\n",(0,a.jsx)(s.h3,{id:"unformatpartialdate",children:"%UnformatPartialDate"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %UnformatPartialDate(pValue As %String, pFormat As %String = "") As %Date\n'})}),"\n",(0,a.jsxs)(s.p,{children:['Unformat a date value according to the given format and convert to $H (or "").',(0,a.jsx)(s.br,{}),"\nSee %FormatDate for information on formats."]}),"\n",(0,a.jsx)(s.h3,{id:"dayofweektonumber",children:"%DayOfWeekToNumber"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %DayOfWeekToNumber(pDayName, pFullName As %Boolean = 1, pLocale As %String = "")\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Method to convert day of week name to a number from 1 to 7",(0,a.jsx)(s.br,{}),"\npDayName: full day name (e.g. Monday) or day short name (e.g. Mon)",(0,a.jsx)(s.br,{}),"\npFullName: If true pDayName is the full day name: if false, pDayName is the short day name",(0,a.jsx)(s.br,{}),"\npLocale: if not specified, default to current locale."]}),"\n",(0,a.jsx)(s.h3,{id:"shell",children:"%Shell"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %Shell()\n"})}),"\n",(0,a.jsx)(s.p,{children:"Invoke the DeepSee command line shell."}),"\n",(0,a.jsx)(s.h3,{id:"updatedimensionproperty",children:"%UpdateDimensionProperty"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %UpdateDimensionProperty(pCubeName As %String, pSpec As %String, pValue As %String, pKey As %String) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Programmatic API for updating the value of a dimension property after a cube has been built. ",(0,a.jsx)(s.code,{children:'Set tSC = ##class(%DeepSee.Utils).%UpdateDimensionProperty( "Holefoods","[Outlet].[H1].[Region].&[Asia]","Asia2")'})," It takes the following arguments:",(0,a.jsx)(s.br,{}),"\npCubeName-name of the cube.",(0,a.jsx)(s.br,{}),'\npSpec-specification of member to update as an MDX expression. This must completely specify a level and a single key value within the level. For example: "[Product].[P1].[Product Category].&[Candy]"',(0,a.jsx)(s.br,{}),'\nYou can set the value of a dimension property by adding Properties(propName) to the end of the spec: "[Outlet].[H1].[City].&[23].Properties(""Population"")" pValue-if defined, this is new NAME value for a dimension member or the value to use for a dimension property.',(0,a.jsx)(s.br,{}),"\npKey-if defined, this is new KEY value for a dimension member. Ignored for a dimension property.",(0,a.jsx)(s.br,{}),"\nThere a number of restrictions on this method:",(0,a.jsx)(s.br,{}),"\nYou cannot update a time dimension.",(0,a.jsx)(s.br,{}),"\nYou cannot update a member of relationship.",(0,a.jsx)(s.br,{}),"\nYou cannot update a level property whose isReference is true."]}),"\n",(0,a.jsx)(s.h3,{id:"writedependencygraph",children:"%WriteDependencyGraph"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %WriteDependencyGraph(pCubeName As %String)\n"})}),"\n",(0,a.jsx)(s.p,{children:"Write the cube dependency graph for the given cube."}),"\n",(0,a.jsx)(s.h3,{id:"getdependencygraph",children:"%GetDependencyGraph"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetDependencyGraph(ByRef pGraph, pCubeName As %String, pDirection As %String = "", pLevel As %Integer = 0) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:'Get the cube dependency graph for the given cube: pGraph(cube, dependentCube) = ""'}),"\n",(0,a.jsx)(s.h3,{id:"finddimensiontableforproperty",children:"%FindDimensionTableForProperty"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %FindDimensionTableForProperty(pCubeName As %String, pSourceProp As %String, Output pList) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given a cube and a source property name, return the list of dimension tables that make use of the source property."}),"\n",(0,a.jsx)(s.h3,{id:"getpapersizelist",children:"%GetPaperSizeList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetPaperSizeList(Output pList) As %Status [ Internal ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Return list of standard paper sizes in the form:",(0,a.jsx)(s.br,{}),"\npList(n) = $LB(name,size)",(0,a.jsx)(s.br,{}),'\nWhere size is "WxH units", e.g., "8.5x11 in"']}),"\n",(0,a.jsx)(s.h3,{id:"exportexceltofile",children:"%ExportExcelToFile"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ExportExcelToFile(pFile As %String, ByRef pParms As %String) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Export a DeepSee query or KPI to the file pFile in CSV format.",(0,a.jsx)(s.br,{}),"\npParms controls the content and display of the export.",(0,a.jsx)(s.br,{}),'\npParms("TITLE") = title',(0,a.jsx)(s.br,{}),'\npParms("SUBTITLE") = subtitle',(0,a.jsx)(s.br,{}),'\npParms("SHOWDATE") = "on" (includes current date and time in the export)',(0,a.jsx)(s.br,{}),"\nData export should rely on either a base MDX query or an available KPI.",(0,a.jsx)(s.br,{}),'\npParms("MDX") = MDX Statement to execute',(0,a.jsx)(s.br,{}),'\npParms("KPI") = KPI class name',(0,a.jsx)(s.br,{}),"\nExports operating in MDX mode expect filter clauses to be included in the query. When filters are being applied to the KPI class, they may be provided in the array:",(0,a.jsx)(s.br,{}),'\npParms("FILTER",filterName) = filterValue',(0,a.jsx)(s.br,{}),"\nFilters can optionally be included as a printed table in the export, provided by the FILTERNAMES and FILTERVALUES parameters:",(0,a.jsx)(s.br,{}),'\npParms("FILTERNAMES") = A $C(10)-delimited list of filter names to display',(0,a.jsx)(s.br,{}),'\npParms("FILTERVALUES") = A $C(10)-delimited list of filter values to display']}),"\n",(0,a.jsxs)(s.p,{children:["Defined listings can be applied to a resultset using:",(0,a.jsx)(s.br,{}),'\npParms("LISTINGNAME") = Name of a listing to execute.',(0,a.jsx)(s.br,{}),"\nA KPI must support use of a named listing or else this will be ignored. An MDX query must be in DRILLTHROUGH mode and the cube must have that listing defined for the listing to be applied."]}),"\n",(0,a.jsx)(s.h3,{id:"exportpdftofile",children:"%ExportPDFToFile"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ExportPDFToFile(pFile As %String, ByRef pParms As %String) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Export a DeepSee query or KPI to the file pFile in CSV format.",(0,a.jsx)(s.br,{}),"\npParms controls the content and display of the export.",(0,a.jsx)(s.br,{}),'\npParms("TITLE") = title',(0,a.jsx)(s.br,{}),'\npParms("SUBTITLE") = subtitle',(0,a.jsx)(s.br,{}),'\npParms("SHOWDATE") = "on" (includes current date and time in the export)',(0,a.jsx)(s.br,{}),"\nData export should rely on either a base MDX query or an available KPI.",(0,a.jsx)(s.br,{}),'\npParms("MDX") = MDX Statement to execute',(0,a.jsx)(s.br,{}),'\npParms("KPI") = KPI class name',(0,a.jsx)(s.br,{}),"\nExports operating in MDX mode expect filter clauses to be included in the query. When filters are being applied to the KPI class, they may be provided in the array:",(0,a.jsx)(s.br,{}),'\npParms("FILTER",filterName) = filterValue',(0,a.jsx)(s.br,{}),"\nFilters can optionally be included as a printed table in the export, provided by the FILTERNAMES and FILTERVALUES parameters:",(0,a.jsx)(s.br,{}),'\npParms("FILTERNAMES") = A $C(10)-delimited list of filter names to display',(0,a.jsx)(s.br,{}),'\npParms("FILTERVALUES") = A $C(10)-delimited list of filter values to display']}),"\n",(0,a.jsxs)(s.p,{children:["Defined listings can be applied to a resultset using:",(0,a.jsx)(s.br,{}),'\npParms("LISTINGNAME") = Name of a listing to execute.',(0,a.jsx)(s.br,{}),"\nA KPI must support use of a named listing or else this will be ignored. An MDX query must be in DRILLTHROUGH mode and the cube must have that listing defined for the listing to be applied."]}),"\n",(0,a.jsx)(s.h3,{id:"exportcsvtofile",children:"%ExportCSVToFile"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %ExportCSVToFile(pFile As %String = "", ByRef pParms As %String, Output pOutFile) As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Export a DeepSee query or KPI to the file pFile in CSV format.",(0,a.jsx)(s.br,{}),"\npParms controls the content and display of the export.",(0,a.jsx)(s.br,{}),'\npParms("TITLE") = title',(0,a.jsx)(s.br,{}),'\npParms("SUBTITLE") = subtitle',(0,a.jsx)(s.br,{}),'\npParms("SHOWDATE") = "on" (includes current date and time in the export) pParms("SIMPLE") = 1 (exports only the data table without any filter or title information)']}),"\n",(0,a.jsxs)(s.p,{children:["Data export should rely on either a base MDX query or an available KPI.",(0,a.jsx)(s.br,{}),'\npParms("MDX") = MDX Statement to execute',(0,a.jsx)(s.br,{}),'\npParms("KPI") = KPI class name',(0,a.jsx)(s.br,{}),"\nExports operating in MDX mode expect filter clauses to be included in the query. When filters are being applied to the KPI class, they may be provided in the array:",(0,a.jsx)(s.br,{}),'\npParms("FILTER",filterName) = filterValue',(0,a.jsx)(s.br,{}),"\nFilters can optionally be included as a printed table in the export, provided by the FILTERNAMES and FILTERVALUES parameters:",(0,a.jsx)(s.br,{}),'\npParms("FILTERNAMES") = A $C(10)-delimited list of filter names to display',(0,a.jsx)(s.br,{}),'\npParms("FILTERVALUES") = A $C(10)-delimited list of filter values to display']}),"\n",(0,a.jsxs)(s.p,{children:["Defined listings can be applied to a resultset using:",(0,a.jsx)(s.br,{}),'\npParms("LISTINGNAME") = Name of a listing to execute.',(0,a.jsx)(s.br,{}),"\nA KPI must support use of a named listing or else this will be ignored. An MDX query must be in DRILLTHROUGH mode and the cube must have that listing defined for the listing to be applied."]}),"\n",(0,a.jsx)(s.h3,{id:"computeage",children:"%ComputeAge"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %ComputeAge(pStart As %Date, pEnd As %Date, pUnits As %String = "years") As %Integer\n'})}),"\n",(0,a.jsx)(s.p,{children:'Compute the "age" (time difference) between pStart and pEnd as a number of units specified by pUnits ("years","months","days").'}),"\n",(0,a.jsx)(s.h3,{id:"createquerynonce",children:"%CreateQueryNonce"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %CreateQueryNonce(pText As %String, pMode As %String = "MDX") As %String\n'})}),"\n",(0,a.jsx)(s.p,{children:'Sometimes we need to pass a query (or XML) to another process via a URL. I.E. has trouble with large URL parameters, so the best approach is to store the query text in a global and pass a one-time token (or nonce) as part of the URL. Assumes that the query is encrypted. Returns "ERROR:"_details if there is an error.'}),"\n",(0,a.jsx)(s.h3,{id:"createparameternonce",children:"%CreateParameterNonce"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %CreateParameterNonce(pParm As %String) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:'Sometimes we need to pass parameters to another process via a URL. I.E. has trouble with large URL parameters, so the best approach is to store the parameter text in a global and pass a one-time token (or nonce) as part of the URL. Assumes that the parm unencrypted. Returns "ERROR:"_details if there is an error.'}),"\n",(0,a.jsx)(s.h3,{id:"getparameternonce",children:"%GetParameterNonce"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetParameterNonce(pNonce As %Integer)\n"})}),"\n",(0,a.jsx)(s.h3,{id:"findcubemembers",children:"%FindCubeMembers"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %FindCubeMembers(pCube As %String, pSearchKey As %String, Output pMembers, pDimList As %String = "", pIncludeLevelNames As %Boolean = 0, pIncludeMeasures As %Boolean = 0, pIncludeComputed As %Boolean = 0, pMaxResults As %Integer = 10) As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Utility method to retrieve pMaxResults cube members based on a simple search key. By default, this method will return normal cube members only, but a range of flags serve to indicate which type of results to return on top, as long as they match the search key (level names, measure names or computed members).",(0,a.jsx)(s.br,{}),"\nMembers are returned as"]}),"\n",(0,a.jsxs)(s.p,{children:["pMembers(n) = $lb(",(0,a.jsx)(s.em,{children:"Caption"}),", ",(0,a.jsx)(s.em,{children:"Spec"}),', ["measure"|"level"|"member"])']}),"\n",(0,a.jsx)(s.p,{children:"Use pDimList to limit the search scope to those dimensions, hierarchies or levels listed in this comma-separated list of specs."}),"\n",(0,a.jsx)(s.p,{children:'This method does not return "all" levels, nor will it check cube relationships.'}),"\n",(0,a.jsx)(s.h3,{id:"getresourcelist",children:"GetResourceList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetResourceList() As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return resource list containing type=Application only."}),"\n",(0,a.jsx)(s.h3,{id:"compresslist",children:"%CompressList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %CompressList(pFactId As %String) As %String [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given a fact id, see if there are any or groups (1|2|3) that can be compressed into ranges."}),"\n",(0,a.jsx)(s.h3,{id:"testforzprocessing",children:"%TestForZProcessing"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %TestForZProcessing(pKill As %Boolean = 0) [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Diagnostic."}),"\n",(0,a.jsx)(s.h3,{id:"isdeepseeenabled",children:"%IsDeepSeeEnabled"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %IsDeepSeeEnabled(pNamespace = "") As %Boolean\n'})}),"\n",(0,a.jsx)(s.p,{children:"Indicates whether the default application for this namespace will process DeepSee Pages."}),"\n",(0,a.jsx)(s.h3,{id:"isdataconnector",children:"%IsDataConnector"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %IsDataConnector(pClassName As %String = "", pStatus As %Status) As %Boolean\n'})}),"\n",(0,a.jsx)(s.p,{children:"Test whether pClassName is a DataConnector. This uses a direct global lookup so users do not need to rely on access to %Dictionary tables"}),"\n",(0,a.jsx)(s.h3,{id:"getmdxfrompivot",children:"%GetMDXFromPivot"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetMDXFromPivot(pPivotFullName = "", Output pStatus As %Status, pExecute As %Boolean = 0, ByRef pParms, Output pResultSet As %DeepSee.ResultSet) As %String\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Method for programmatically creating a pivot table",(0,a.jsx)(s.br,{}),"\nThe GetMDXforPivot method returns the MDX query for saved pivot."]}),"\n",(0,a.jsx)(s.p,{children:"Arguments:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:["pPivotFullName\nThe name of the pivot including folder name",(0,a.jsx)(s.br,{}),"\nFormat: folder/pivot name",(0,a.jsx)(s.br,{}),"\nExample: My Folder/My Pivot"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:["pExecute\nBoolean value (optional):",(0,a.jsx)(s.br,{}),"\n0 - Do not execute the MDX query (Default)",(0,a.jsx)(s.br,{}),"\n1 - Execute the MDX query"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsxs)(s.p,{children:["pResultSet\nOutput argument (optional):",(0,a.jsx)(s.br,{}),"\nInstance of %DeepSee.ResultSet for the MDX query:",(0,a.jsx)(s.br,{}),"\nThis can be used to access the query results, meta data, statistics, etc.",(0,a.jsx)(s.br,{}),"\nTo get the text of the MDX query, use only the pPivotFullName argument",(0,a.jsx)(s.br,{}),"\nTo get the text of the MDX query and run the query, use pPivotFullName and pExecute",(0,a.jsx)(s.br,{}),"\nTo get the text of the MDX query, run the query, and get the ResultSet, use pPivotFullName, pExecute and pResultSet"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"executepivot",children:"%ExecutePivot"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %ExecutePivot(pPivotFullName = "", ByRef pParms, Output pResultSet) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Programmatically execute a stored pivot table. The pPivotTableName is the full Folder/SubFolder/Name of the pivot table. Execute parameters may optionally be passed in through the pParms array. If desired, the resultset constructed in the execution procedure can be returned using pResultSet."}),"\n",(0,a.jsx)(s.h3,{id:"getresultsetfrompivot",children:"%GetResultSetFromPivot"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetResultSetFromPivot(pPivotFullName = "", Output pStatus As %Status, pExecute As %Boolean = 0, ByRef pParms, Output pMDX) As %DeepSee.ResultSet\n'})}),"\n",(0,a.jsx)(s.p,{children:"Programmatically create an instance of a %DeepSee.ResultSet from a stored pivot table. The pPivotTableName is the full Folder/SubFolder/Name of the pivot table. By default, the query is only prepared and returned ready for execution. The query can be asynchronously executed as part of the retrieval process by setting pExecute=1. Execute parameters may optionally be passed in through the pParms array."}),"\n",(0,a.jsx)(s.h3,{id:"getchildspec",children:"%GetChildSpec"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetChildSpec(pItemList As %String, pCubeName As %String, pAxisNo As %Integer = 0, Output pChildSpec As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.h3,{id:"processcubelistarraynode",children:"%ProcessCubeListArrayNode"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %ProcessCubeListArrayNode(ByRef pNode, pCurrentString = "", ByRef pValueList = "") As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Convert a node of the graph returned by %GetCubeListArray into a comma-delimited valueList. This may be called on the graph itself."}),"\n",(0,a.jsx)(s.h3,{id:"parsesqlfieldlist",children:"%ParseSQLFieldList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %ParseSQLFieldList(pFieldString = "", pDomain = "", Output pFieldArray, pLocalize As %Boolean = 0) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:'Split a single fieldList string into the individual fields. The output pFieldArray returns each SELECT item in pFieldArray(termNumber) = $LB( $LB(fieldIdenitifier,"AS",logicalHeader), $LB(fieldIdenitifier,"AS",displayHeader)) The pLocalize parameter can be used to request behavior of the $$$TEXT macro in the header portion: 0 - Return the original text value from $$$TEXT 1 - Return the header value localized to the language of the current client When pLocalize is used, a default domain can be provided in pDomain. This domain will be used for translation for each instance of $$$TEXT that does not specify its own domain.'}),"\n",(0,a.jsx)(s.h3,{id:"arraytolist",children:"%ArrayToList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ArrayToList(ByRef pParms, Output pParmsList As %List) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Convert a single-subscript array to an $LB format"}),"\n",(0,a.jsx)(s.h3,{id:"arrayfromlist",children:"%ArrayFromList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ArrayFromList(pParmsList As %List = {$LB()}, ByRef pParms) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Convert a parameters list in $LB format to an array"}),"\n",(0,a.jsx)(s.h3,{id:"isvalidfactlist",children:"%IsValidFactList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %IsValidFactList(pCube As %String = "", pFactList As %String = "", Output pStatus As %Status, pReason As %String = "") As %Boolean\n'})}),"\n",(0,a.jsx)(s.p,{children:"Test a pFactList to make sure it contains only SQL column identifiers that are actually defined in pCube."}),"\n",(0,a.jsx)(s.h3,{id:"normalizefactlist",children:"%NormalizeFactList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %NormalizeFactList(pFactList = "", Output pStatus As %Status, pCubeName = "") As %List\n'})}),"\n",(0,a.jsx)(s.p,{children:"Take as input a pFactList in either comma-delimited string or $LB format and return a fact list in $LB format with any empty entries removed. If pCubeName is supplied, any supporting fields that are required to produce a successful Selective Build given the cube definition are added to the original list."}),"\n",(0,a.jsx)(s.h3,{id:"reinforcefactlist",children:"%ReinforceFactList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %ReinforceFactList(pCubeIndex = "", ByRef pFacts) As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"This examines an array of facts for a given cube as provided in pFacts - For levels in a hierarchy all parent levels in that hierarchy will also be included in the list. - For time levels the common reference column in the fact table on which the time functions operate will also be added to the list."}),"\n",(0,a.jsx)(s.h3,{id:"findcubeindexlist",children:"%FindCubeIndexList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %FindCubeIndexList(pCubeName = "", Output pStatus As %Status, pFactList = "") As %List [ Internal ]\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Provided a pCubeName and a valid pFactList for that cube, return the list of buildable indices contained in the original fact list. If no fact list is supplied, the method returns a null string.",(0,a.jsx)(s.br,{}),"\nThis is best used following normalization of the fact list using %NormalizeFactList method with the cubename suplied."]}),"\n",(0,a.jsx)(s.h3,{id:"lockfactlist",children:"%LockFactList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %LockFactList(pCubeName As %String, pFactList As %List, ByRef pLocked, pLockTimeout = 1) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Take out locks for the specific column identifiers in a pFactList under the synchronze lock. This will prevent a general build or a synchronize but will not prevent selected updates of other columns in the fact table."}),"\n",(0,a.jsx)(s.h3,{id:"unlockfactlist",children:"%UnlockFactList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %UnlockFactList(pCubeName As %String, pFactList As %List) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Release the update locks for the selected fact list."}),"\n",(0,a.jsx)(s.h3,{id:"markfactsenabled",children:"%MarkFactsEnabled"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %MarkFactsEnabled(pCubeName As %String = "", pFactList As %String = "", pEnabled = 1, pInProgress = 0) As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Mark dimensions as enabled or disabled according to pEnabled. If the fact list is not supplied, mark all as enabled. Otherwise, mark only the dimensions supplied in the fact list.",(0,a.jsx)(s.br,{}),"\nThis method can also optionally mark that a dimension is in the process of updating using the pInProgress paraeter."]}),"\n",(0,a.jsx)(s.h3,{id:"isfactenabled",children:"%IsFactEnabled"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %IsFactEnabled(pCubeName As %String = "", pSpec As %String = "", Output pStatus As %Status, Output pFactName As %String, Output pInProgress) As %Boolean\n'})}),"\n",(0,a.jsx)(s.p,{children:"Check to see if a given dimension is currently queryable for a given cube."}),"\n",(0,a.jsx)(s.h3,{id:"isvalidcubename",children:"%IsValidCubeName"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %IsValidCubeName(pCubeName As %String = "", Output pReason) As %Boolean\n'})}),"\n",(0,a.jsx)(s.p,{children:"Test the raw string to verify it is a valid cube name. A valid cube name must begin with an alpha-numeric character or an underscore. Remaining characters in the cube name must be alpha-numeric, space, underscore, period, slash, and colons."}),"\n",(0,a.jsx)(s.h3,{id:"atscaleexportcube",children:"%AtScaleExportCube"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %AtScaleExportCube(pCubeName As %String = "", pFileName As %String = "", pCalendar As %String = "") As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Produce a serialized representation of the cube model suitable for import to an AtScale environment. The JSON output will be saved in the file pFileName.",(0,a.jsx)(s.br,{}),"\nIf a calendar has been created to support time dimensions in the AtScale environment, that can be passed in via pCalendar using either table or class reference syntax."]})]})}function o(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>l});var a=t(96540);const n={},i=a.createContext(n);function r(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);