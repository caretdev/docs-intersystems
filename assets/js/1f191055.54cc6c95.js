"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[54333],{83301:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>i,default:()=>o,frontMatter:()=>a,toc:()=>l});var n=t(74848),r=t(28453);const a={pagination_prev:null,pagination_next:null},i="Config.Archives",l=[{value:"Parameters",id:"parameters",level:2},{value:"CPFFlags",id:"cpfflags",level:3},{value:"CAPITALNAME",id:"capitalname",level:3},{value:"EMSSERVICE",id:"emsservice",level:3},{value:"Properties",id:"properties",level:2},{value:"Type",id:"type",level:3},{value:"Location",id:"location",level:3},{value:"Methods",id:"methods",level:2},{value:"NameSet",id:"nameset",level:3},{value:"CreateCallBack",id:"createcallback",level:3},{value:"ArchiveByName",id:"archivebyname",level:3},{value:"Default",id:"default",level:3},{value:"GetLocation",id:"getlocation",level:3},{value:"Load",id:"load",level:3},{value:"Modify",id:"modify",level:3},{value:"MoveToActive",id:"movetoactive",level:3},{value:"Rename",id:"rename",level:3},{value:"SynonymArchives",id:"synonymarchives",level:3},{value:"IsInUse",id:"isinuse",level:3},{value:"%OnAddToSaveSet",id:"onaddtosaveset",level:3},{value:"%OnDeleteCallBack",id:"ondeletecallback",level:3},{value:"%OnValidateObject",id:"onvalidateobject",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"ListFetch",id:"listfetch",level:3},{value:"ListClose",id:"listclose",level:3},{value:"List1Execute",id:"list1execute",level:3},{value:"List1Flags",id:"list1flags",level:3},{value:"List1Fetch",id:"list1fetch",level:3},{value:"List1Close",id:"list1close",level:3},{value:"%OnOpen",id:"onopen",level:3}];function c(e){const s={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"configarchives",children:"Config.Archives"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class Config.Archives Extends (%Persistent, Config.CommonMultipleMethods, Config.CommonProperties, %SYSTEM.Help) [ Final, Inheritance = right, System = 4 ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This class allows you to modify and view the [Archives] section of the CPF file through programatic APIs. While properties are usually modified through the System Management portal, there may be some occasion where modifying them through the API's is best for your system. In all the Config methods, if you do not specify the CPFFile parameter, the currently active CPF file is used. If you wish to modify a CPF file which is not the currently active one, then specify the CPFFile you wish to modify in the method call.",(0,n.jsx)(s.br,{}),"\nThe Flags parameter does not normally need to be specified; the defaults are usually sufficient for most cases.",(0,n.jsx)(s.br,{}),"\nYou can use either the provided API's (Create/Get/Modify/Delete) to modify the properties by passing in the correct parameters, or use Object sytax to open and directly manipulate the config objects (Open() and Exists()). Most objects created here need only to specify the Name of the object, and 1 or 2 properties since the the defaults are what are commonly used for most cases."]}),"\n",(0,n.jsx)(s.p,{children:"EXAMPLE:"}),"\n",(0,n.jsxs)(s.p,{children:['; Use class methods to create an instance %SYS>s Name="ABC" %SYS>s Properties("Type")="s3" %SYS>s Properties("Location")="s3://myBucket/" %SYS>s Status=##Class(Config.Archives).Create(Name,.Properties) %SYS>i \'$$$ISOK(Status) w !,"Error="',(0,n.jsx)(s.em,{children:'$SYSTEM.Status.GetErrorText(Status) ; Use class methods to modify properties %SYS>s Status=##Class(Config.Archives).Get(Name,.Properties) %SYS>i \'$$$ISOK(Status) w !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status) %SYS>zw Properties Properties("Type")="s3" Properties("Location")="s3://myBucket/" %SYS>s Properties("Location")="s3://myBucket2/" %SYS>s Status=##Class(Config.Archives).Modify(Name,.Properties) %SYS>i \'$$$ISOK(Status) w !,"Error="',(0,n.jsx)(s.em,{children:'$SYSTEM.Status.GetErrorText(Status) ; Now use Objects to modify properties %SYS>s Obj=##Class(Config.Archives).Open(Name) ; We could have used i ##Class(Config.Archives).Exists(Name,.Obj) instead of Open() %SYS>w Obj.Type s3 %SYS>s Obj.Location="s3://myBucket/" %SYS>s Status=Obj.%Save() %SYS>i \'$$$ISOK(Status) w !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status) ; Now delete the object we just created %SYS>s Status=##Class(Config.Archives).Delete(Name) %SYS>i \'$$$ISOK(Status) w !,"Error="_$SYSTEM.Status.GetErrorText(Status)']}),"\n",(0,n.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(s.h3,{id:"cpfflags",children:"CPFFlags"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter CPFFlags [ Internal ] = {1};\n"})}),"\n",(0,n.jsx)(s.p,{children:"{$$$CPFSave};"}),"\n",(0,n.jsx)(s.h3,{id:"capitalname",children:"CAPITALNAME"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter CAPITALNAME = 1;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Archive name is always capitalized."}),"\n",(0,n.jsx)(s.h3,{id:"emsservice",children:"EMSSERVICE"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter EMSSERVICE [ Internal ] = "Namespace";\n'})}),"\n",(0,n.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(s.h3,{id:"type",children:"Type"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Type As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"location",children:"Location"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Location As %String(MAXLEN = 4096);\n"})}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"nameset",children:"NameSet"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method NameSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Force the name to be uppercase."}),"\n",(0,n.jsx)(s.h3,{id:"createcallback",children:"CreateCallBack"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateCallBack(Obj As %ObjectHandle, Data As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Called by the Create method during import from a CPF file."}),"\n",(0,n.jsx)(s.h3,{id:"archivebyname",children:"ArchiveByName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ArchiveByName(Name As %String) As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"Return Type,Location of a named archive target."}),"\n",(0,n.jsx)(s.h3,{id:"default",children:"Default"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Default(CPFFile As %String, Platform As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Write a default Archives section in a CPF file."}),"\n",(0,n.jsx)(s.h3,{id:"getlocation",children:"GetLocation"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetLocation(Name As %String) As %String [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Get the archive target's location.",(0,n.jsx)(s.br,{}),"\nIf the archive does not exist in the configuration, it will return null."]}),"\n",(0,n.jsx)(s.h3,{id:"load",children:"Load"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Load(Obj As %ObjectHandle = "", Flags As %Integer = 1) As %Status [ Internal ]\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Load the parameters into memory and activate.",(0,n.jsx)(s.br,{}),"\nParameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Obj"}),' = Handle to the object which caused the load. If "", then load everything, only called from STU.',(0,n.jsx)(s.br,{}),"\nIf a delete operation, then Obj is the NAME of the item which was deleted since the oject itself has already been deleted.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Flags"})," = Type of modification.",(0,n.jsx)(s.br,{}),"\n0 - Modify",(0,n.jsx)(s.br,{}),"\n1 - Create/Insert",(0,n.jsx)(s.br,{}),"\n2 - Delete"]}),"\n",(0,n.jsx)(s.h3,{id:"modify",children:"Modify"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Modify(Name As %String, ByRef Properties As %String, ByRef CPFFile As %String = "", Flags As %Integer = {$$$CPFSave+$$$CPFWrite+$$$CPFActivate}) As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Modify Dataset section instance in CPF file. If the Server or Directory path is changed, it will be reflected on all Namespaces referring this DB."}),"\n",(0,n.jsxs)(s.p,{children:["Parameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Name"})," - Name of the archive target to modify.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Properties (byref)"})," - List of the properties to modify in Properties(Name)=Value format. See the subclass for a list of valid properties. If a specific property is not passed in the properties array, the value is not modified.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file to use, Default=current active CPF file.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Flags"})," - Bit string of options to perform. See the Create method for values."]}),"\n",(0,n.jsxs)(s.p,{children:["Return values:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file the modification was made in."]}),"\n",(0,n.jsx)(s.h3,{id:"movetoactive",children:"MoveToActive"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod MoveToActive(Obj As %ObjectHandle = "", Flags As %Integer = 1) As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(s.p,{children:"Move the CPF data into the active config global. This also check if any Archive is added/removed/updated in CPF file since last shutdown. And those archives will affect journal setting."}),"\n",(0,n.jsxs)(s.p,{children:["Parameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Obj"})," - Handle to Object causing the move"]}),"\n",(0,n.jsx)(s.h3,{id:"rename",children:"Rename"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Rename(OldName As %String, NewName As %String, ByRef CPFFile As %String = "") As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Rename the archive name in the CPF file."}),"\n",(0,n.jsxs)(s.p,{children:["Parameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"OldName"})," - Name of the archive to rename.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"NewName (byref)"})," - New name of the archive.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file to use, Default=current active CPF file."]}),"\n",(0,n.jsxs)(s.p,{children:["Return values:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file the modification was made in."]}),"\n",(0,n.jsx)(s.h3,{id:"synonymarchives",children:"SynonymArchives"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SynonymArchives(Name As DBName, ByRef ArcList As %String, CPFFile As %String = "", Flags As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Returns a list of archive names whose Type/Location properties are the same as the ones for a given archive for the current configuration.",(0,n.jsx)(s.br,{}),"\nThis will return the passed archive name as one of the matching ones."]}),"\n",(0,n.jsx)(s.h3,{id:"isinuse",children:"IsInUse"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsInUse(Name As DBName) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Return whether an archive target is in use (for journal)."}),"\n",(0,n.jsx)(s.h3,{id:"onaddtosaveset",children:"%OnAddToSaveSet"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnAddToSaveSet(depth As %Integer = 3, insert As %Integer = 0, callcount As %Integer = 0) As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Called from %Save().",(0,n.jsx)(s.br,{}),"\nValidate the archive info here, and possibly change it."]}),"\n",(0,n.jsx)(s.h3,{id:"ondeletecallback",children:"%OnDeleteCallBack"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %OnDeleteCallBack(Obj As %ObjectHandle) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Called from %OnDelete.",(0,n.jsx)(s.br,{}),"\nReturning an error here will keep the archive from being deleted."]}),"\n",(0,n.jsx)(s.h3,{id:"onvalidateobject",children:"%OnValidateObject"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnValidateObject() As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Called from %Save().",(0,n.jsx)(s.br,{}),"\nValidate that the archive being created has all its parameters set correctly.",(0,n.jsx)(s.br,{}),"\nAny error returned here will abort the creation of the archive."]}),"\n",(0,n.jsx)(s.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListExecute(ByRef qHandle As %Binary, Names As %String = "*", CPFFile As %String = "", Flags As %Integer = 0, Format As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(s.p,{children:"List Archives in a CPF file."}),"\n",(0,n.jsxs)(s.p,{children:["Parameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Names"})," - Comma separated list of Archive names",(0,n.jsx)(s.br,{}),'\n"*" - All records match',(0,n.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,n.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,n.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile"})," - Name of the CPF file to use. A null string means use the active CPF file.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Flags"})," - Type of archives to return  0  - All archives  1  - rsync archives  2  - s3 archives ",(0,n.jsx)(s.strong,{children:"Format"}),(0,n.jsx)(s.br,{}),"\n0 - Standard report list format",(0,n.jsx)(s.br,{}),"\n1 - ^CONFIG global format",(0,n.jsx)(s.br,{}),"\n2 - CPF file format",(0,n.jsx)(s.br,{}),"\nNote: This query may change in future versions"]}),"\n",(0,n.jsx)(s.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listclose",children:"ListClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"list1execute",children:"List1Execute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod List1Execute(ByRef %qHandle As %Binary, Names As %String = "*", CPFFile As %String = "", Flags As %Boolean = 0) As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(s.p,{children:"List Archives in a CPF file. Used internally by the List Query."}),"\n",(0,n.jsxs)(s.p,{children:["Parameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Names"})," - Comma separated list of Archive names",(0,n.jsx)(s.br,{}),'\n"*" - All records match',(0,n.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,n.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,n.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile"})," - Name of the CPF file to use. A null string means use the active CPF file.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Flags"})," - Type of archives to return  0  - All archives  1  - Local archives  2  - Remote archives Note: This query may change in future versions"]}),"\n",(0,n.jsx)(s.h3,{id:"list1flags",children:"List1Flags"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod List1Flags(Flags, Server) As %Boolean [ Internal, SqlProc ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"list1fetch",children:"List1Fetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod List1Fetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = List1Execute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"list1close",children:"List1Close"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod List1Close(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = List1Execute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"onopen",children:"%OnOpen"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnOpen() As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method is invoked by the %Open method to provide notification that the object specified by oid is being opened."}),"\n",(0,n.jsx)(s.p,{children:"If this method returns an error then the object will not be opened."})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>l});var n=t(96540);const r={},a=n.createContext(r);function i(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);