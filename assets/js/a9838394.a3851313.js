"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[41246],{15861:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>i,default:()=>o,frontMatter:()=>a,toc:()=>c});var r=s(74848),n=s(28453);const a={pagination_prev:null,pagination_next:null},i="%iKnow.Source.Processor",c=[{value:"Properties",id:"properties",level:2},{value:"DomainId",id:"domainid",level:3},{value:"TempId",id:"tempid",level:3},{value:"Indexer",id:"indexer",level:3},{value:"DirectInput",id:"directinput",level:3},{value:"Converter",id:"converter",level:3},{value:"Buffer",id:"buffer",level:3},{value:"ListerId",id:"listerid",level:3},{value:"Params",id:"params",level:3},{value:"ConverterId",id:"converterid",level:3},{value:"ConvParams",id:"convparams",level:3},{value:"MetaData",id:"metadata",level:3},{value:"SrcTemp",id:"srctemp",level:3},{value:"SrcMeta",id:"srcmeta",level:3},{value:"DPSkipExtIdCheck",id:"dpskipextidcheck",level:3},{value:"DPSimpleExtIds",id:"dpsimpleextids",level:3},{value:"DPLanguageFieldName",id:"dplanguagefieldname",level:3},{value:"DPIgnoreDupExtIds",id:"dpignoredupextids",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"SetBatchMode",id:"setbatchmode",level:3},{value:"SetParams",id:"setparams",level:3},{value:"SetConverter",id:"setconverter",level:3},{value:"GetSystemMetadataKeys",id:"getsystemmetadatakeys",level:3},{value:"GetMetadataKeys",id:"getmetadatakeys",level:3},{value:"GetCurrentMetadataKeys",id:"getcurrentmetadatakeys",level:3},{value:"SetCurrentMetadataValues",id:"setcurrentmetadatavalues",level:3},{value:"FetchSource",id:"fetchsource",level:3},{value:"ProcessListElement",id:"processlistelement",level:3},{value:"ProcessVirtualListElement",id:"processvirtuallistelement",level:3},{value:"ReportError",id:"reporterror",level:3},{value:"ReportWarning",id:"reportwarning",level:3},{value:"Convert",id:"convert",level:3},{value:"CleanTemp",id:"cleantemp",level:3},{value:"GetKnownLanguage",id:"getknownlanguage",level:3}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"iknowsourceprocessor",children:"%iKnow.Source.Processor"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Class %iKnow.Source.Processor Extends %RegisteredObject [ Abstract, Deprecated, System = 4 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"This is the base class for any Processor implementations. Processor classes are developed to read source data as referenced (or stored temporarily) by %iKnow.Source.Lister classes in their ExpandList methods. It is up to the Lister to make sure the references they store in this stage refer to the proper Processor implementation and contain the details it needs to find and read that source while executing FetchSource."}),"\n",(0,r.jsx)(t.p,{children:"Each Processor implementation tackles a specific type of location where source data can be read from, such as a filesystem for %iKnow.Source.File.Processor or a global for %iKnow.Source.Global.Processor."}),"\n",(0,r.jsx)(t.p,{children:"Processor objects are handled by the loading framework automatically and custom code should never instantiate a Processor object or call any of its methods directly."}),"\n",(0,r.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(t.h3,{id:"domainid",children:"DomainId"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property DomainId As %Integer [ Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"tempid",children:"TempId"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property TempId As %Integer [ Private ];\n"})}),"\n",(0,r.jsx)(t.p,{children:"surrogate domain ID for use in IRIS.Temp guaranteed to be unique across namespaces"}),"\n",(0,r.jsx)(t.h3,{id:"indexer",children:"Indexer"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property Indexer As %iKnow.Indexer [ Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"directinput",children:"DirectInput"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property DirectInput As %iKnow.DirectInput [ Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"converter",children:"Converter"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property Converter As %iKnow.Source.Converter [ Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"buffer",children:"Buffer"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property Buffer As %RegisteredObject [ Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"listerid",children:"ListerId"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property ListerId As %Integer [ Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"params",children:"Params"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property Params As %String [ Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"converterid",children:"ConverterId"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property ConverterId As %Integer [ Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"convparams",children:"ConvParams"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property ConvParams As %String [ Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"metadata",children:"MetaData"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property MetaData As %List [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"srctemp",children:"SrcTemp"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property SrcTemp As %String [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"srcmeta",children:"SrcMeta"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property SrcMeta As %String [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"dpskipextidcheck",children:"DPSkipExtIdCheck"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property DPSkipExtIdCheck As %Boolean [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"dpsimpleextids",children:"DPSimpleExtIds"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property DPSimpleExtIds As %Boolean [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"dplanguagefieldname",children:"DPLanguageFieldName"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property DPLanguageFieldName As %String [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"dpignoredupextids",children:"DPIgnoreDupExtIds"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property DPIgnoreDupExtIds As %Boolean [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(t.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnNew(domainId As %Integer, indexer As %iKnow.Indexer, directInput As %iKnow.DirectInput) As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"setbatchmode",children:"SetBatchMode"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method SetBatchMode(BatchMode As %Integer) [ Internal ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"setparams",children:"SetParams"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method SetParams(params As %String) As %Status [ ServerOnly = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"This method stores the Processor parameters in the Params property, from where they can be referenced in the FetchSource implementation."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"NOTE:"})," If this method is overridden by a subclass, it should make sure to either call this method via ##super, or set Params itself."]}),"\n",(0,r.jsx)(t.h3,{id:"setconverter",children:"SetConverter"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method SetConverter(convId As %Integer, convParams As %String) As %Status [ Final ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Registers the Converter to be used by this Processor onwards."}),"\n",(0,r.jsx)(t.h3,{id:"getsystemmetadatakeys",children:"GetSystemMetadataKeys"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetSystemMetadataKeys() As %List [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Returns the metadata keys that are made available and taken care of automatically for every Processor implementation."}),"\n",(0,r.jsx)(t.h3,{id:"getmetadatakeys",children:"GetMetadataKeys"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetMetadataKeys(params As %String) As %List\n"})}),"\n",(0,r.jsx)(t.p,{children:"Subclasses should override this method to identify those metadata keys that are calculated or extracted by this Processor implementation and will be registered for every source processed by calling SetCurrentMetadataValues during the FetchSource execution."}),"\n",(0,r.jsx)(t.h3,{id:"getcurrentmetadatakeys",children:"GetCurrentMetadataKeys"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetCurrentMetadataKeys() As %List [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Instance method to invoke the static GetMetadataKeys using this instances params"}),"\n",(0,r.jsx)(t.h3,{id:"setcurrentmetadatavalues",children:"SetCurrentMetadataValues"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method SetCurrentMetadataValues(metaValues As %List) As %Status [ Final, Private ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Stores the metadata values for the source currently being processed. Their order and number should correspond to the keys returned by GetMetadataKeys."}),"\n",(0,r.jsx)(t.h3,{id:"fetchsource",children:"FetchSource"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method FetchSource(loc As %Integer, ref As %List) As %Status [ Private ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"This is the primary method that will need to be implemented by subclasses. It gets the local ID of the source being processed (as assigned by the lister) and the Composite Reference in %List format. Data read by the Processor should be buffered through calling ..Buffer.BufferString(), which will automatically forward the data to the iKnow Indexing engine or, if configured, a %iKnow.Source.Converter object that will in turn push converted data through to the engine."}),"\n",(0,r.jsx)(t.p,{children:"If this Processor also extracts metadata while reading (as specified in its GetMetadataKeys implementation), it should make sure to invoke SetCurrentMetadataValues at some point in this methods execution."}),"\n",(0,r.jsx)(t.h3,{id:"processlistelement",children:"ProcessListElement"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method ProcessListElement(loc As %Integer, ref As %List, keyid As %Integer, metadata As %String, Output skipped As %Boolean = 0) As %Status [ Final ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"This is the primary method that will be called from the %iKnow.Source.Loader for each source identified by the %iKnow.Source.Lister objects involved in this loading process. It will buffer what's read in the FetchSource implementation, trigger the %iKnow.Source.Converter if one is configured, and then instruct the Indexer to process the resulting plain text, directing its output to the appropriate DirectInput object."}),"\n",(0,r.jsx)(t.p,{children:"Also, this method will gather any metadata set by the Lister, combine it with metadata calculated by the Processor or Converter and push it to the DirectInput object as well."}),"\n",(0,r.jsx)(t.h3,{id:"processvirtuallistelement",children:"ProcessVirtualListElement"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method ProcessVirtualListElement(loc As %Integer, ref As %List) As %Status [ Final ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Same as ProcessListElement, but for Virtual Sources."}),"\n",(0,r.jsx)(t.h3,{id:"reporterror",children:"ReportError"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'Method ReportError(ref As %List, message As %String, location As %String = "", errorId As %String = "") As %Status [ Final, Private ]\n'})}),"\n",(0,r.jsx)(t.p,{children:"Utility method to report failures for a given source (identified through a Composite Reference)"}),"\n",(0,r.jsx)(t.h3,{id:"reportwarning",children:"ReportWarning"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'Method ReportWarning(ref As %List, message As %String, location As %String = "") As %Status [ Final, Private ]\n'})}),"\n",(0,r.jsx)(t.p,{children:"Utility method to report warnings for a given source (identified through a Composite Reference)"}),"\n",(0,r.jsx)(t.h3,{id:"convert",children:"Convert"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method Convert() As %Status [ Final, Internal, Private ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"cleantemp",children:"CleanTemp"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method CleanTemp() As %Status [ Final, Internal, Private ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"TODO: can we get rid of this one? or should we call it at the end of ProcessListElement?"}),"\n",(0,r.jsx)(t.h3,{id:"getknownlanguage",children:"GetKnownLanguage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'Method GetKnownLanguage(loc As %Integer, ref As %List, keyid As %Integer = "") As %String\n'})}),"\n",(0,r.jsx)(t.p,{children:'This method is called from ProcessListElement and ProcessVirtualListElement right before calling on the Indexer to process the data read by this Processor instance. It returns the language (two-letter ISO code) for the source being processed, if there is any means to derive it from known facts about the source. If no language can be derived with enough certainty, this method returns "".'}),"\n",(0,r.jsx)(t.p,{children:"The default implementation looks if there is a $$$IKPLANGUAGEFIELDNAME parameter defined pointing to a metadata field containing the language code. Subclasses may override and/or extend this method if they have access to additional information."})]})}function o(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>c});var r=s(96540);const n={},a=r.createContext(n);function i(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);