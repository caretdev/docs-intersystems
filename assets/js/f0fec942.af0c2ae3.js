"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[52e3],{35235:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>l,frontMatter:()=>a,toc:()=>o});var r=t(74848),i=t(28453);const a={pagination_prev:null,pagination_next:null},s="%IO.IParts.LineIO",o=[{value:"Properties",id:"properties",level:2},{value:"LineTerminator",id:"lineterminator",level:3},{value:"Methods",id:"methods",level:2},{value:"ReadLine",id:"readline",level:3},{value:"WriteLine",id:"writeline",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ioipartslineio",children:"%IO.IParts.LineIO"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Class %IO.IParts.LineIO [ Abstract, System = 2 ]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Aggregation holder class for methods implemented in those Stream classes that support line-by-line Read and Write operations."}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(n.h3,{id:"lineterminator",children:"LineTerminator"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Property LineTerminator As %String(TRUNCATE = 1) [ InitialExpression = {$S($$$isWINDOWS:$Char(13,10),1:$Char(10))} ];\n"})}),"\n",(0,r.jsx)(n.p,{children:"A string of characters that will be written at the end of each WriteLine operation, and any of which will terminate a ReadLine() operation if it is encountered. (Note: special-case handling will treat CR/LF input sequences as a single terminator.)"}),"\n",(0,r.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.h3,{id:"readline",children:"ReadLine"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:"Method ReadLine(pMaxReadLen As %Integer, ByRef pTimeout As %Numeric = -1, Output pSC As %Status, ByRef pLineTerminator As %String) As %String [ Abstract ]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Read until pMaxReadLen chars are gotten, pTimeout expires, or a LineTerminator character is found. On return, if pTimeout=0 it means no timeout occurred. If pTimeout=0 and the returned string contains the full pMaxReadLen characters, it means no LineTerminator was encountered yet, even if the following character would be a LineTerminator. If pTimeout=0 and the returned string is shorter than pMaxReadLen, then either a LineTerminator or the End Of Stream (AtEnd = 1) was encountered. If pLineTerminator is defined, then the line is read until one of the given characters is encountered. On return, pLineTerminator contains the encountered character(s) if any."}),"\n",(0,r.jsx)(n.h3,{id:"writeline",children:"WriteLine"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objectscript-class",children:'Method WriteLine(pLine As %String = "", pFlush As %Boolean, Output pSC As %Status)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Write pLine to the stream buffer, followed by the current LineTerminator characters. If pFlush is True, ensure that the characters are actually sent to the stream. Note: No pLineTerminator argument because delegators always call Write() not WriteLine()"})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(96540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);