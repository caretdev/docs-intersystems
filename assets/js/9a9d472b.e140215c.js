"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[77165],{48718:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>c,frontMatter:()=>r,toc:()=>a});var s=t(74848),i=t(28453);const r={pagination_prev:null,pagination_next:null},l="%SYS.Python",a=[{value:"Parameters",id:"parameters",level:2},{value:"%MODULENAME",id:"modulename",level:3},{value:"Properties",id:"properties",level:2},{value:"ModDesc",id:"moddesc",level:3},{value:"UID",id:"uid",level:3},{value:"Methods",id:"methods",level:2},{value:"Import",id:"import",level:3},{value:"%DispatchGetProperty",id:"dispatchgetproperty",level:3},{value:"%DispatchSetProperty",id:"dispatchsetproperty",level:3},{value:"Run",id:"run",level:3},{value:"Path",id:"path",level:3},{value:"ConfigureAutoML",id:"configureautoml",level:3},{value:"AllowAutoML",id:"allowautoml",level:3},{value:"IRISInsidePython",id:"irisinsidepython",level:3},{value:"PythonInsideIRIS",id:"pythoninsideiris",level:3},{value:"IrisPlatform",id:"irisplatform",level:3},{value:"GetPythonInfo",id:"getpythoninfo",level:3},{value:"GetPythonVersion",id:"getpythonversion",level:3},{value:"GetCompileTimeVersion",id:"getcompiletimeversion",level:3},{value:"GetCompileTimeVersionFull",id:"getcompiletimeversionfull",level:3},{value:"GetCompileTimePath",id:"getcompiletimepath",level:3},{value:"PythonRuntimeLibraryVersion",id:"pythonruntimelibraryversion",level:3},{value:"PythonRuntimeLibrary",id:"pythonruntimelibrary",level:3},{value:"GetRunningLibrary",id:"getrunninglibrary",level:3},{value:"PerProcessRuntimeLibrarySet",id:"perprocessruntimelibraryset",level:3},{value:"PerProcessRuntimeLibraryStart",id:"perprocessruntimelibrarystart",level:3},{value:"PerProcessRuntimeLibrarySetPathElement",id:"perprocessruntimelibrarysetpathelement",level:3},{value:"PerProcessRuntimeLibrarySetRelativePathElement",id:"perprocessruntimelibrarysetrelativepathelement",level:3},{value:"Bytes",id:"bytes",level:3},{value:"CallInInit",id:"callininit",level:3},{value:"None",id:"none",level:3},{value:"True",id:"true",level:3},{value:"False",id:"false",level:3},{value:"Validate",id:"validate",level:3},{value:"ChangeSignalState",id:"changesignalstate",level:3},{value:"Debugging",id:"debugging",level:3},{value:"Builtins",id:"builtins",level:3},{value:"SetStdIOMode",id:"setstdiomode",level:3},{value:"Install",id:"install",level:3},{value:"Shell",id:"shell",level:3},{value:"SetInteractiveMode",id:"setinteractivemode",level:3},{value:"ToListTyped",id:"tolisttyped",level:3},{value:"To2DListTyped",id:"to2dlisttyped",level:3},{value:"ToList",id:"tolist",level:3}];function o(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"syspython",children:"%SYS.Python"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Class %SYS.Python Extends %Library.SystemBase [ Final ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Provides utilities for loading and using Python modules, running Python commands, and starting the Python shell. For information on working with Python within IRIS, see ",(0,s.jsx)(n.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+%25SYS.Python",children:"Using Embedded Python"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(n.h3,{id:"modulename",children:"%MODULENAME"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter %MODULENAME [ Internal ] = 13;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(n.h3,{id:"moddesc",children:"ModDesc"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property ModDesc As %CPP.LongLong [ Internal, Private ];\n"})}),"\n",(0,s.jsx)(n.h3,{id:"uid",children:"UID"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property UID As %CPP.Integer [ Internal, Private ];\n"})}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"import",children:"Import"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Import(name As %String) As %CPP.LongLong [ Language = cpp ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Loads a Python module and returns a handle to that module. On failure, this method returns 0. Typically you use this method to bind the module to a variable, which you then use to call code within the module. For example: ",(0,s.jsx)(n.code,{children:'set mypython = ##class(%SYS.Python).Import("package.subpackage.name") write mypython.helloWorld()'})]}),"\n",(0,s.jsx)(n.h3,{id:"dispatchgetproperty",children:"%DispatchGetProperty"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Method %DispatchGetProperty(name As %String) As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Get a python object attribute."}),"\n",(0,s.jsx)(n.h3,{id:"dispatchsetproperty",children:"%DispatchSetProperty"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Method %DispatchSetProperty(propName As %Library.String, value As %Library.String) [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Get a python object attribute."}),"\n",(0,s.jsx)(n.h3,{id:"run",children:"Run"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Run(cmd As %String) As %Integer [ Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Runs one or more Python commands; to run multiple commands, separate the commands with a new line, $char(10). This method returns 0 on success or -1 on failure."}),"\n",(0,s.jsx)(n.h3,{id:"path",children:"Path"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Path() As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Get current run time setting for PythonPath, if a new value is specified it overwrites the run time value (used by config mgr)."}),"\n",(0,s.jsx)(n.h3,{id:"configureautoml",children:"ConfigureAutoML"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ConfigureAutoML(pathelement As %String) As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:'An API that affects just the current process. The specified string argument will be added to sys.path relative to the instance dir on the next load of embedded python. Without args, returns the current string. With a string argument, this also loads OS Default libpython after it sets sys.path. This API is used in IML classes with "lib/automl" to reflect where the numpy is in ML enabled kits. Blocks IML from working if a non default python is already in the process (Also see AllowAutoML() ).'}),"\n",(0,s.jsx)(n.h3,{id:"allowautoml",children:"AllowAutoML"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod AllowAutoML(allow As %Integer) As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Set an integer in system memory. Without args, return the current integer. If the integer is 1, AutoML ( ConfigureAutoML() ) will be allowed to start trying to run a non default python like the one in the CPF, for example. This is quite likely to result in AutoML errors unless what you are doing has been integrated by Intersystems."}),"\n",(0,s.jsx)(n.h3,{id:"irisinsidepython",children:"IRISInsidePython"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod IRISInsidePython() As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"FT counter of irispython activations"}),"\n",(0,s.jsx)(n.h3,{id:"pythoninsideiris",children:"PythonInsideIRIS"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod PythonInsideIRIS() As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"FT counter of libpython.so/.dll activations"}),"\n",(0,s.jsx)(n.h3,{id:"irisplatform",children:"IrisPlatform"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod IrisPlatform() As %String [ Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Returns platform (kit) identifier used in creation of IRIS kits and also in EP iris_site.py"}),"\n",(0,s.jsx)(n.h3,{id:"getpythoninfo",children:"GetPythonInfo"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetPythonInfo(ByRef info) As %Integer\n"})}),"\n",(0,s.jsx)(n.p,{children:"Returns descriptive general information about process and system wide python and python related CPF settings. Informational names/API compatibility not guaranteed."}),"\n",(0,s.jsx)(n.h3,{id:"getpythonversion",children:"GetPythonVersion"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetPythonVersion() As %String\n"})}),"\n",(0,s.jsx)(n.p,{children:'Returns descriptive version information about the python currently loaded in the process. Example: "3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0]" on Ubuntu 22. If python is not loaded it will return "Not Loaded". Does not Load Python.'}),"\n",(0,s.jsx)(n.h3,{id:"getcompiletimeversion",children:"GetCompileTimeVersion"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetCompileTimeVersion() As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Returns short form python version present on the build machine used to compile IRIS"}),"\n",(0,s.jsx)(n.h3,{id:"getcompiletimeversionfull",children:"GetCompileTimeVersionFull"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetCompileTimeVersionFull() As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Returns full form python version present on the build machine used to compile IRIS"}),"\n",(0,s.jsx)(n.h3,{id:"getcompiletimepath",children:"GetCompileTimePath"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetCompileTimePath() As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Returns python runtime library path on the build machine used to compile IRIS"}),"\n",(0,s.jsx)(n.h3,{id:"pythonruntimelibraryversion",children:"PythonRuntimeLibraryVersion"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod PythonRuntimeLibraryVersion(location As %String) As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Version of Python used by PythonRuntimeLibrary in Major.Minor format: 3.9, 3.11, etc.",(0,s.jsx)(n.br,{}),"\nUsed in properly loading PythonRuntimeLibrary into IRIS."]}),"\n",(0,s.jsx)(n.h3,{id:"pythonruntimelibrary",children:"PythonRuntimeLibrary"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod PythonRuntimeLibrary(location As %String) As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The full path (including library name) of the alternate python that you want IRIS to use in %SYS.Python.Shell() and [Language=python] for all new processes.",(0,s.jsx)(n.br,{}),"\nFor example, if you install the optional python 3.11 on Ubuntu 20.04 use:",(0,s.jsx)(n.br,{}),"\n/lib/x86_64-linux-gnu/libpython3.11.so.1.0",(0,s.jsx)(n.br,{}),"\nIf you install the optional python 3.8 on RH 7.9 use:",(0,s.jsx)(n.br,{}),"\n/opt/rh/rh-python38/root/usr/lib64/libpython3.8.so",(0,s.jsx)(n.br,{}),"\nIf you do not use a setting here, you'll get the default OS vendor system python."]}),"\n",(0,s.jsx)(n.h3,{id:"getrunninglibrary",children:"GetRunningLibrary"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetRunningLibrary() As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"After libpython has been loaded, by whatever means, this returns the actual libpython in use by this process."}),"\n",(0,s.jsx)(n.h3,{id:"perprocessruntimelibraryset",children:"PerProcessRuntimeLibrarySet"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod PerProcessRuntimeLibrarySet(location As %String) As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:'Use this to specify what libpython you want to be loaded for just this process by a future PerProcessRuntimeLibraryStart("UserPerProcess") call. Without arguments, it returns the value that you previously set.'}),"\n",(0,s.jsx)(n.h3,{id:"perprocessruntimelibrarystart",children:"PerProcessRuntimeLibraryStart"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod PerProcessRuntimeLibraryStart(mode As %String) As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Loads libpython into the current process",(0,s.jsx)(n.br,{}),'\n"UserPerProcess" will load the libpython you specified with PerProcessLibpythonSet()',(0,s.jsx)(n.br,{}),'\n"UserSystemWide" will load the libpython you specified with PythonRuntimeLibrary()',(0,s.jsx)(n.br,{}),'\n"CPF" will load the libpython you specified in the CPF',(0,s.jsx)(n.br,{}),'\n"OSDefault" will load the default libpython of the OS vendor that was compiled into IRIS',(0,s.jsx)(n.br,{}),'\nAny other argument acts as "OSDefault"',(0,s.jsx)(n.br,{}),"\nWithout args it returns current flag (a number)"]}),"\n",(0,s.jsx)(n.h3,{id:"perprocessruntimelibrarysetpathelement",children:"PerProcessRuntimeLibrarySetPathElement"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod PerProcessRuntimeLibrarySetPathElement(element As %String) As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Set a string in process memory. Without args, return the current string. When libpython loads in the future, the specified string will be added to sys.path."}),"\n",(0,s.jsx)(n.h3,{id:"perprocessruntimelibrarysetrelativepathelement",children:"PerProcessRuntimeLibrarySetRelativePathElement"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod PerProcessRuntimeLibrarySetRelativePathElement(element As %String) As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Set a string in process memory. Without args, return the current string. When libpython loads in the future, the specified string will be added to sys.path relative to the instance dir."}),"\n",(0,s.jsx)(n.h3,{id:"bytes",children:"Bytes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Bytes(cmd As %String) As %CPP.LongLong [ Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Given an ObjectScript string, returns a Python object of type bytes. The input string cannot contain any wide character."}),"\n",(0,s.jsx)(n.h3,{id:"callininit",children:"CallInInit"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod CallInInit() [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:'An internal methods, finish "callin" initialization'}),"\n",(0,s.jsx)(n.h3,{id:"none",children:"None"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod None() As %CPP.LongLong [ Language = cpp ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Returns the Python ",(0,s.jsx)(n.code,{children:"**None**"})," value."]}),"\n",(0,s.jsx)(n.h3,{id:"true",children:"True"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod True() As %CPP.LongLong [ Language = cpp ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Returns the Python ",(0,s.jsx)(n.code,{children:"**True**"})," value."]}),"\n",(0,s.jsx)(n.h3,{id:"false",children:"False"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod False() As %CPP.LongLong [ Language = cpp ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Returns the Python ",(0,s.jsx)(n.code,{children:"**False**"})," value."]}),"\n",(0,s.jsx)(n.h3,{id:"validate",children:"Validate"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Validate() As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Validate the internal state session, returns the number of active python objs. return - if python is not inited or an invalid object is found."}),"\n",(0,s.jsx)(n.h3,{id:"changesignalstate",children:"ChangeSignalState"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ChangeSignalState(state As %Integer) As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Set the signal handling state 0 - swap, 1 - disable swapping iris will notify, to python signal handling"}),"\n",(0,s.jsx)(n.h3,{id:"debugging",children:"Debugging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Debugging(state As %Integer) As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"If passed true, it doesn't reset the error context before invoking any python feature (enable this before invoking any pdb method)."}),"\n",(0,s.jsx)(n.h3,{id:"builtins",children:"Builtins"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Builtins(flags As %Integer) As %CPP.LongLong\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Loads the Python ",(0,s.jsx)(n.code,{children:"builtins"})," module and returns a handle to that module. On failure, this method returns 0. Using this method is equivalent to using Import to load the Python builtins module."]}),"\n",(0,s.jsx)(n.h3,{id:"setstdiomode",children:"SetStdIOMode"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod SetStdIOMode(flags As %Integer) As %Integer [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"if flags bit 1 is set, the stderr (fd 2) output will be redirected to stdout (fd 1) if there is a current COS primary device, otherwise it will behave the original way and log it in messages.log"}),"\n",(0,s.jsx)(n.h3,{id:"install",children:"Install"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod Install(packages As %String, dir As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"This is deprecated. Please use the pip3 command line to install packages."}),"\n",(0,s.jsx)(n.h3,{id:"shell",children:"Shell"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Shell(vars As %Integer = 0) As %Status\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Starts the interactive Python shell. To use this method, you must have USE permission on the %Developer resource. To exit the shell, type the command ",(0,s.jsx)(n.code,{children:"quit()"})]}),"\n",(0,s.jsx)(n.p,{children:"If vars is 1, then any OREF variables present in the ObjectScript shell are also available in the Python shell; the reverse is not true."}),"\n",(0,s.jsx)(n.h3,{id:"setinteractivemode",children:"SetInteractiveMode"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod SetInteractiveMode(state As %Integer) As %Integer\n"})}),"\n",(0,s.jsx)(n.p,{children:"Set the mode of python to Interactive meaning that signal handling state swaps will be allowed. Interactive mode has a performance cost, but enables useful features like saving/restoring terminal state and generating better documentation. Returns previous signal state: 0 - swapping allowed, 1 - swapping disabled, -1 - Swapping unapplicable to your platform."}),"\n",(0,s.jsx)(n.h3,{id:"tolisttyped",children:"ToListTyped"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ToListTyped(contentList As %CPP.BinList, typeList As %CPP.BinList) As %CPP.LongLong [ Language = cpp ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Given two ObjectScript ",(0,s.jsx)(n.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"lists"}),", returns a Python list that contains the same data as contentList, with each member of the list having the data type specified in typeList. For example, the following code returns a Python list where each member of the list has the value 42, but is represented as ODBCTYPEbit(SQLBIT), ODBCTYPEnumeric(SQLNUMERIC), ODBCTYPEdecimal(SQLDECIMAL), and ODBCTYPEinteger(SQLINTEGER), respectively. More info on the type values can be found in %occODBC.inc as well as:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.a,{href:"/csp/docbook/DocBook.UI.Page.cls?KEY=RSQL%5Fdatatype#RSQL%5Fdatatype%5Fintcodes",children:"the docs"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Include %occODBC set clist = $lb(42, 42, 42, 42) set tlist = $lb(-7, 2, 3, 4) [or] set tlist = $lb($$$ODBCTYPEbit,$$$ODBCTYPEnumeric,$$$ODBCTYPEdecimal,$$$ODBCTYPEinteger) set plist = ##class(%SYS.Python).ToListTyped(clist, tlist)"}),(0,s.jsx)(n.br,{}),'\nThis type translation obeys Intersystems SQL Rules, so for the string and binary ODBC types, $C(0) will turn into Python "". For all ODBC types, $lb(,"") will be 2 Python "None" elements.']}),"\n",(0,s.jsx)(n.h3,{id:"to2dlisttyped",children:"To2DListTyped"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod To2DListTyped(contentList As %Integer, typeList As %Integer) As %CPP.LongLong [ Internal, Language = cpp ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Takes in a 2D ObjectScript $LIST, and another $LIST with type info for each column in the first $LIST.",(0,s.jsx)(n.br,{}),"\nReturns a copy of the first $LIST as a python list with matching python types."]}),"\n",(0,s.jsxs)(n.p,{children:["The types are the same as for ToListTyped.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:'set plist = $system.Python.To2DListTyped($lb($lb("philip",21,"electrician"),$lb("mary",22,"plumber")), $lb(12,4,12))'})]}),"\n",(0,s.jsx)(n.h3,{id:"tolist",children:"ToList"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ToList(contentList As %CPP.BinList) As %CPP.LongLong [ Language = cpp ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Given contentList (an ObjectScript ",(0,s.jsx)(n.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"list"}),"), this method returns a Python list that contains the same data. For example: ",(0,s.jsx)(n.code,{children:'set clist = $lb(123, 456.789, "hello world") set plist = ##class(%SYS.Python).ToList(clist)'}),(0,s.jsx)(n.br,{}),"\nWarning:",(0,s.jsx)(n.br,{}),"\nDon't pass binary data via this API, Use ToListTyped with one of the binary ODBC types instead.",(0,s.jsx)(n.br,{}),"\nIf you put binary data in this API, IRIS will try to translate it as a UTF8 string."]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(96540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);