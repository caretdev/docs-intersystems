"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[29872],{6744:(e,a,t)=>{t.r(a),t.d(a,{contentTitle:()=>l,default:()=>o,frontMatter:()=>r,toc:()=>d});var n=t(74848),s=t(28453);const r={pagination_prev:null,pagination_next:null},l="%ZEN.Report.Display.COSChart.abstractController",d=[{value:"Parameters",id:"parameters",level:2},{value:"DEFAULTVISIBLE",id:"defaultvisible",level:3},{value:"Properties",id:"properties",level:2},{value:"modelId",id:"modelid",level:3},{value:"defaultSeries",id:"defaultseries",level:3},{value:"modelError",id:"modelerror",level:3},{value:"readOnly",id:"readonly",level:3},{value:"dataBag",id:"databag",level:3},{value:"dataLoaded",id:"dataloaded",level:3},{value:"dataReadOnly",id:"datareadonly",level:3},{value:"modelChanged",id:"modelchanged",level:3},{value:"criteria",id:"criteria",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"%AcquireData",id:"acquiredata",level:3},{value:"%AcquireMetaData",id:"acquiremetadata",level:3},{value:"%CreateModelInstance",id:"createmodelinstance",level:3},{value:"%DeleteModelInstance",id:"deletemodelinstance",level:3},{value:"%GetModelPropertyList",id:"getmodelpropertylist",level:3},{value:"%GetModelPropertyInfo",id:"getmodelpropertyinfo",level:3},{value:"%GetDataByName",id:"getdatabyname",level:3},{value:"%GetTypeByName",id:"gettypebyname",level:3},{value:"%SetDataByName",id:"setdatabyname",level:3},{value:"hasData",id:"hasdata",level:3},{value:"save",id:"save",level:3},{value:"loadModel",id:"loadmodel",level:3},{value:"LoadFromServer",id:"loadfromserver",level:3},{value:"SaveToServer",id:"savetoserver",level:3},{value:"createNewObject",id:"createnewobject",level:3},{value:"deleteId",id:"deleteid",level:3},{value:"DeleteFromServer",id:"deletefromserver",level:3},{value:"invokeAction",id:"invokeaction",level:3},{value:"isModelReadOnly",id:"ismodelreadonly",level:3},{value:"getError",id:"geterror",level:3},{value:"isPropertyValid",id:"ispropertyvalid",level:3},{value:"execValidationCode",id:"execvalidationcode",level:3},{value:"getTypeByName",id:"gettypebyname-1",level:3},{value:"getDataByName",id:"getdatabyname-1",level:3},{value:"getPropertyName",id:"getpropertyname",level:3},{value:"setDataByName",id:"setdatabyname-1",level:3},{value:"getDimSize",id:"getdimsize",level:3},{value:"getDimensions",id:"getdimensions",level:3},{value:"getLabel",id:"getlabel",level:3},{value:"getData",id:"getdata",level:3},{value:"getDataAsArrays",id:"getdataasarrays",level:3},{value:"getDataAsObject",id:"getdataasobject",level:3},{value:"setData",id:"setdata",level:3},{value:"setModelId",id:"setmodelid",level:3},{value:"getModelId",id:"getmodelid",level:3},{value:"setProperty",id:"setproperty",level:3}];function i(e){const a={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"zenreportdisplaycoschartabstractcontroller",children:"%ZEN.Report.Display.COSChart.abstractController"})}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Class %ZEN.Report.Display.COSChart.abstractController Extends %ZEN.Report.Display.node [ Abstract, Deprecated, System = 4 ]\n"})}),"\n",(0,n.jsx)(a.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(a.h3,{id:"defaultvisible",children:"DEFAULTVISIBLE"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter DEFAULTVISIBLE = 0;\n"})}),"\n",(0,n.jsx)(a.p,{children:"This component is not visible."}),"\n",(0,n.jsx)(a.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(a.h3,{id:"modelid",children:"modelId"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Property modelId As %ZEN.Datatype.string(ZENEXPRESSION = 1) [ Final ];\n"})}),"\n",(0,n.jsxs)(a.p,{children:["ID value passed to the DataModel class.",(0,n.jsx)(a.br,{}),"\nYou can change this value using the client-side setModelId method. This will cause a new object to be loaded into the controller."]}),"\n",(0,n.jsx)(a.h3,{id:"defaultseries",children:"defaultSeries"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Property defaultSeries As %ZEN.Datatype.integer(MINVAL = 1) [ Final, InitialExpression = 1 ];\n"})}),"\n",(0,n.jsx)(a.p,{children:"Optional. If a DataModel has multiple dataSeries, then this specifies which DataSeries (1-based) should be used to provide values to DataViews that can only display values from one data series (such as a form)."}),"\n",(0,n.jsx)(a.h3,{id:"modelerror",children:"modelError"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:'Property modelError As %ZEN.Datatype.string(XMLPROJECTION = "none") [ Final ];\n'})}),"\n",(0,n.jsx)(a.p,{children:"Most recent error message reported by the DataModel object this dataController is connected to. This is set to a non-empty string after a save, load, or delete operation encounters an error."}),"\n",(0,n.jsx)(a.h3,{id:"readonly",children:"readOnly"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Property readOnly As %ZEN.Datatype.boolean [ Final, InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(a.p,{children:"If true, this data controller is read only regardless of whether its corresponding data model is read only or not."}),"\n",(0,n.jsx)(a.h3,{id:"databag",children:"dataBag"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:'Property dataBag As %ZEN.Report.Display.COSChart.dataBag(XMLPROJECTION = "none") [ Final, Internal ];\n'})}),"\n",(0,n.jsxs)(a.p,{children:["Internal property.",(0,n.jsx)(a.br,{}),"\ndataBag used to hold values."]}),"\n",(0,n.jsx)(a.h3,{id:"dataloaded",children:"dataLoaded"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:'Property dataLoaded As %ZEN.Datatype.boolean(XMLPROJECTION = "none") [ Final, InitialExpression = 0, Internal ];\n'})}),"\n",(0,n.jsxs)(a.p,{children:["Internal property.",(0,n.jsx)(a.br,{}),"\nIf true, this controller has loaded data from its model."]}),"\n",(0,n.jsx)(a.h3,{id:"datareadonly",children:"dataReadOnly"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:'Property dataReadOnly As %ZEN.Datatype.boolean(XMLPROJECTION = "none") [ Final, Internal ];\n'})}),"\n",(0,n.jsxs)(a.p,{children:["Internal property.",(0,n.jsx)(a.br,{}),"\nUsed to track whether the current model is readonly or not. Use readOnly if you want to set this data controller to be read only."]}),"\n",(0,n.jsx)(a.h3,{id:"modelchanged",children:"modelChanged"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:'Property modelChanged As %ZEN.Datatype.boolean(XMLPROJECTION = "none") [ Final, InitialExpression = 1, Internal ];\n'})}),"\n",(0,n.jsxs)(a.p,{children:["Internal property.",(0,n.jsx)(a.br,{}),"\nIf true, client requires updated meta-data from its model."]}),"\n",(0,n.jsx)(a.h3,{id:"criteria",children:"criteria"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:'Property criteria As %ZEN.proxyObject(XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,n.jsxs)(a.p,{children:["Optional. Additional criteria from the client.",(0,n.jsx)(a.br,{}),"\nThis is a proxy object whose contents may be filled by client application code and is available to methods of the controller object."]}),"\n",(0,n.jsx)(a.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(a.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method %OnNew(initvalue As %RawString) As %Status [ Private, ProcedureBlock = 1 ]\n"})}),"\n",(0,n.jsx)(a.h3,{id:"acquiredata",children:"%AcquireData"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method %AcquireData() As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Internal method.",(0,n.jsx)(a.br,{}),"\nAcquire data from the associated DataModel object. This is typically called on the server before a page is served in order to get initial values for bound components."]}),"\n",(0,n.jsx)(a.h3,{id:"acquiremetadata",children:"%AcquireMetaData"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method %AcquireMetaData() As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Internal method.",(0,n.jsx)(a.br,{}),"\nAcquire meta-data from the associated DataModel object. This may be called before a page is rendered or in response to a client-side change to a dataController."]}),"\n",(0,n.jsx)(a.h3,{id:"createmodelinstance",children:"%CreateModelInstance"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod %CreateModelInstance(pClass As %String, pID As %String, Output pSC As %Status, pController As %ZEN.Auxiliary.dataController) As %ZEN.DataModel.DataModel [ Internal ]\n"})}),"\n",(0,n.jsx)(a.p,{children:'Internal method. Create an instance of a DataModel object. If pID is "", then this creates a new instance of model.'}),"\n",(0,n.jsx)(a.h3,{id:"deletemodelinstance",children:"%DeleteModelInstance"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod %DeleteModelInstance(pClass As %String, pID As %String) As %Status\n"})}),"\n",(0,n.jsx)(a.p,{children:"Delete an instance of a DataModel object."}),"\n",(0,n.jsx)(a.h3,{id:"getmodelpropertylist",children:"%GetModelPropertyList"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method %GetModelPropertyList(Output pSC As %Status) As %String\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Return a comma-delimited list of the properties contained in the current DataModel class.",(0,n.jsx)(a.br,{}),"\nA property in the list may include type and label information in the form:",(0,n.jsx)(a.br,{}),"\nProp:type:label"]}),"\n",(0,n.jsx)(a.h3,{id:"getmodelpropertyinfo",children:"%GetModelPropertyInfo"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method %GetModelPropertyInfo(Output pInfo As %String, pExtended As %Boolean = 0) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Return an array containing information about the properties contained in the current DataModel.",(0,n.jsx)(a.br,{}),"\nRefer to the %GetPropertyInfo of the %ZEN.DataModel.DataModel for details."]}),"\n",(0,n.jsx)(a.h3,{id:"getdatabyname",children:"%GetDataByName"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method %GetDataByName(pProperty As %String) [ CodeMode = expression ]\n"})}),"\n",(0,n.jsx)(a.p,{children:"Get a data value, by property name, from this dataController."}),"\n",(0,n.jsx)(a.h3,{id:"gettypebyname",children:"%GetTypeByName"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method %GetTypeByName(pProperty As %String) [ CodeMode = expression ]\n"})}),"\n",(0,n.jsx)(a.p,{children:"Get a data type, by property name, from this dataController."}),"\n",(0,n.jsx)(a.h3,{id:"setdatabyname",children:"%SetDataByName"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method %SetDataByName(pProperty As %String, pValue As %String)\n"})}),"\n",(0,n.jsx)(a.p,{children:"Set a data value, by property name, into this dataController."}),"\n",(0,n.jsx)(a.h3,{id:"hasdata",children:"hasData"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod hasData() [ Language = javascript ]\n"})}),"\n",(0,n.jsx)(a.p,{children:"Return true if this controller currently contains data loaded from a DataModel."}),"\n",(0,n.jsx)(a.h3,{id:"save",children:"save"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod save() [ Language = javascript ]\n"})}),"\n",(0,n.jsx)(a.p,{children:"Save data from this dataController back to the DataModel on the server. Return the id with which the model was saved or '' if it was not saved."}),"\n",(0,n.jsx)(a.h3,{id:"loadmodel",children:"loadModel"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod loadModel(force) [ Internal, Language = javascript ]\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Load new data into this dataController from DataModel on the server.",(0,n.jsx)(a.br,{}),"\nIf force is true, then always load data, otherwise only load data if there is no current data or it has been invalidated.",(0,n.jsx)(a.br,{}),"\nApplications should not call this directly. Instead they should use the setModelClass, setModelId, or update methods."]}),"\n",(0,n.jsx)(a.h3,{id:"loadfromserver",children:"LoadFromServer"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method LoadFromServer() As %String [ Internal ]\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Internal method.",(0,n.jsx)(a.br,{}),"\nLoad data from the associated DataModel object."]}),"\n",(0,n.jsx)(a.h3,{id:"savetoserver",children:"SaveToServer"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method SaveToServer() As %String [ Internal ]\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Internal method.",(0,n.jsx)(a.br,{}),"\nSave data back to the associated DataModel object. Returns the id of the saved object (which could have changed in the case of an insert)."]}),"\n",(0,n.jsx)(a.h3,{id:"createnewobject",children:"createNewObject"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod createNewObject() [ Language = javascript ]\n"})}),"\n",(0,n.jsx)(a.p,{children:"Ask our associated dataModel to create a new (unsaved) instance."}),"\n",(0,n.jsx)(a.h3,{id:"deleteid",children:"deleteId"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod deleteId(id) [ Language = javascript ]\n"})}),"\n",(0,n.jsx)(a.p,{children:"Ask our associated dataModel to delete the item with the given id. Returns true if the delete was successful. If the dataModel is readOnly, then the delete will not happen."}),"\n",(0,n.jsx)(a.h3,{id:"deletefromserver",children:"DeleteFromServer"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method DeleteFromServer(pID As %String) As %Boolean [ Internal ]\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Internal method.",(0,n.jsx)(a.br,{}),"\nAsk the associated DataModel object to delete the given item."]}),"\n",(0,n.jsx)(a.h3,{id:"invokeaction",children:"invokeAction"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod invokeAction(action, data) [ Language = javascript ]\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Invoke a named ",(0,n.jsx)(a.em,{children:"action"})," on our associated dataModel. An action is an arbitrary operation that is defined by a specific dataModel class. data is an arbitary value passed along with the action."]}),"\n",(0,n.jsx)(a.h3,{id:"ismodelreadonly",children:"isModelReadOnly"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method isModelReadOnly()\n"})}),"\n",(0,n.jsx)(a.p,{children:"Test if the current data model is read-only."}),"\n",(0,n.jsx)(a.h3,{id:"geterror",children:"getError"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method getError()\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Return the latest error message encountered by this data controller. Call this after a save, load, or delete operation to test if an error occurred.",(0,n.jsx)(a.br,{}),"\nThis will return '' if there is no current error."]}),"\n",(0,n.jsx)(a.h3,{id:"ispropertyvalid",children:"isPropertyValid"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method isPropertyValid(property, value)\n"})}),"\n",(0,n.jsx)(a.p,{children:"Test if a given value for a property is valid."}),"\n",(0,n.jsx)(a.h3,{id:"execvalidationcode",children:"execValidationCode"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method execValidationCode(property, value)\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Internal method.",(0,n.jsx)(a.br,{}),"\nExecute client side validation code for this controller."]}),"\n",(0,n.jsx)(a.h3,{id:"gettypebyname-1",children:"getTypeByName"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method getTypeByName(property)\n"})}),"\n",(0,n.jsx)(a.p,{children:"Get the type code for a property given its name."}),"\n",(0,n.jsx)(a.h3,{id:"getdatabyname-1",children:"getDataByName"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method getDataByName(property, series)\n"})}),"\n",(0,n.jsx)(a.p,{children:"dataBag API Get a data value, by property name, from this dataController."}),"\n",(0,n.jsx)(a.h3,{id:"getpropertyname",children:"getPropertyName"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method getPropertyName(n)\n"})}),"\n",(0,n.jsx)(a.p,{children:"Given a 0-based index, return the corresponding property name."}),"\n",(0,n.jsx)(a.h3,{id:"setdatabyname-1",children:"setDataByName"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method setDataByName(property, value, series)\n"})}),"\n",(0,n.jsxs)(a.p,{children:["dataBag API Set a data value, by property name, into this dataController.",(0,n.jsx)(a.br,{}),'\nIf property is "%id", then change the id of this controller.',(0,n.jsx)(a.br,{}),'\nIf property is "%series", then change the defaultSeries of this controller.']}),"\n",(0,n.jsx)(a.h3,{id:"getdimsize",children:"getDimSize"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method getDimSize(dim)\n"})}),"\n",(0,n.jsx)(a.p,{children:"dataSet API Return the number of items in the specified dimension (dim is 1,2, or 3)."}),"\n",(0,n.jsx)(a.h3,{id:"getdimensions",children:"getDimensions"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method getDimensions()\n"})}),"\n",(0,n.jsxs)(a.p,{children:["dataSet API Return number of dimensions within the dataModel. There are 2 dimensions: The first is the set of properties, the second has a typical size of 1.",(0,n.jsx)(a.br,{}),"\nThe second dimension may be larger than 1 in cases where the model serves multiple series for a given model instance. (Such as when providing mulitple data series for charts)."]}),"\n",(0,n.jsx)(a.h3,{id:"getlabel",children:"getLabel"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method getLabel(n, dim)\n"})}),"\n",(0,n.jsx)(a.p,{children:"dataSet API Get the label at position n (0-based) in the given dimension (1,2, or 3)."}),"\n",(0,n.jsx)(a.h3,{id:"getdata",children:"getData"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method getData(d1, d2, d3)\n"})}),"\n",(0,n.jsx)(a.p,{children:"dataSet API Return the data contained in the specified location. Location is 0-based;"}),"\n",(0,n.jsx)(a.h3,{id:"getdataasarrays",children:"getDataAsArrays"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method getDataAsArrays(ByRef values)\n"})}),"\n",(0,n.jsx)(a.p,{children:"This is a specialized variant of getData that return the data in this controller as an array of arrays (used by charts)."}),"\n",(0,n.jsx)(a.h3,{id:"getdataasobject",children:"getDataAsObject"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod getDataAsObject(series) [ Language = javascript ]\n"})}),"\n",(0,n.jsxs)(a.p,{children:["TBD - 08/29/2012 JSL This is a specialized variant of getData that returns the data in this controller as a zenProxy object (associative array).",(0,n.jsx)(a.br,{}),"\nThe return value of this object is a zenProxy object with properties that correspond to the properties of the current Data Model object. The value of each property in the returned object corresponds to the value in the Data Model object.",(0,n.jsx)(a.br,{}),"\nIf the Data Model supports more than one data series, then the series parameter (0-based) specifies which series to use (the default is series 0).",(0,n.jsx)(a.br,{}),"\nRefer to the %ZEN.proxyObject for more details."]}),"\n",(0,n.jsx)(a.h3,{id:"setdata",children:"setData"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method setData(value, d1, d2, d3)\n"})}),"\n",(0,n.jsx)(a.p,{children:"dataSet API Set the data contained in the specified location. Location is 0-based;"}),"\n",(0,n.jsx)(a.h3,{id:"setmodelid",children:"setModelId"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod setModelId(id) [ Language = javascript ]\n"})}),"\n",(0,n.jsxs)(a.p,{children:["TBD 08-29-2012 JSL Set the value of the modelId property for this controller. This will cause new data to be loaded and any views connected to this controller to refresh.",(0,n.jsx)(a.br,{}),"\nThis is equivalent to calling setProperty('modelId',id) and is defined for convenience."]}),"\n",(0,n.jsx)(a.h3,{id:"getmodelid",children:"getModelId"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"Method getModelId()\n"})}),"\n",(0,n.jsx)(a.p,{children:"Return the current model id associated with this dataController."}),"\n",(0,n.jsx)(a.h3,{id:"setproperty",children:"setProperty"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-objectscript-class",children:"ClientMethod setProperty(property, value, value2) [ Language = javascript ]\n"})}),"\n",(0,n.jsx)(a.p,{children:"TBD - 08-29-2012 JSL, not clear how to invoke super Set the value of a named property."})]})}function o(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(i,{...e})}):i(e)}},28453:(e,a,t)=>{t.d(a,{R:()=>l,x:()=>d});var n=t(96540);const s={},r=n.createContext(s);function l(e){const a=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(r.Provider,{value:a},e.children)}}}]);