"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[51846],{87972:(e,s,a)=>{a.r(s),a.d(s,{contentTitle:()=>t,default:()=>d,frontMatter:()=>r,toc:()=>c});var n=a(74848),l=a(28453);const r={pagination_prev:null,pagination_next:null},t="%Compiler.COS.Refactor",c=[{value:"Properties",id:"properties",level:2},{value:"className",id:"classname",level:3},{value:"propName",id:"propname",level:3},{value:"methName",id:"methname",level:3},{value:"type",id:"type",level:3},{value:"lhs",id:"lhs",level:3},{value:"lnum",id:"lnum",level:3},{value:"pair",id:"pair",level:3},{value:"changed",id:"changed",level:3},{value:"scname",id:"scname",level:3},{value:"tcname",id:"tcname",level:3},{value:"cmname",id:"cmname",level:3},{value:"smname",id:"smname",level:3},{value:"tmname",id:"tmname",level:3},{value:"ssqlname",id:"ssqlname",level:3},{value:"tsqlname",id:"tsqlname",level:3},{value:"sqlTableNameList",id:"sqltablenamelist",level:3},{value:"ctind",id:"ctind",level:3},{value:"Methods",id:"methods",level:2},{value:"oneClassold",id:"oneclassold",level:3},{value:"oneClass",id:"oneclass",level:3},{value:"rf",id:"rf",level:3},{value:"v9",id:"v9",level:3},{value:"v10",id:"v10",level:3},{value:"v2",id:"v2",level:3},{value:"v1",id:"v1",level:3},{value:"v62",id:"v62",level:3},{value:"v5",id:"v5",level:3},{value:"replaceMemberName",id:"replacemembername",level:3},{value:"replaceClassName",id:"replaceclassname",level:3},{value:"v35",id:"v35",level:3},{value:"v97",id:"v97",level:3},{value:"v36",id:"v36",level:3},{value:"v41",id:"v41",level:3},{value:"v13",id:"v13",level:3},{value:"v14",id:"v14",level:3},{value:"v37",id:"v37",level:3},{value:"v34",id:"v34",level:3},{value:"v33",id:"v33",level:3},{value:"v11",id:"v11",level:3},{value:"v38",id:"v38",level:3},{value:"v12",id:"v12",level:3},{value:"v32",id:"v32",level:3},{value:"ChangeMultClassNameExecute",id:"changemultclassnameexecute",level:3},{value:"ChangeMultClassNameClose",id:"changemultclassnameclose",level:3},{value:"ChangeMultClassNameFetch",id:"changemultclassnamefetch",level:3},{value:"GetSubclasses",id:"getsubclasses",level:3},{value:"GetTableList",id:"gettablelist",level:3},{value:"ChangeMultMemberNameExecute",id:"changemultmembernameexecute",level:3},{value:"ChangeMultMemberNameClose",id:"changemultmembernameclose",level:3},{value:"ChangeMultMemberNameFetch",id:"changemultmembernamefetch",level:3},{value:"NormalizeClName",id:"normalizeclname",level:3},{value:"ChangeCSList",id:"changecslist",level:3},{value:"ChangeClName",id:"changeclname",level:3},{value:"ChangeClassNameExecute",id:"changeclassnameexecute",level:3},{value:"ChangeClassNameClose",id:"changeclassnameclose",level:3},{value:"ChangeClassNameFetch",id:"changeclassnamefetch",level:3},{value:"ChangeMemName",id:"changememname",level:3},{value:"ChangeMemberNameExecute",id:"changemembernameexecute",level:3},{value:"ChangeMemberNameClose",id:"changemembernameclose",level:3},{value:"ChangeMemberNameFetch",id:"changemembernamefetch",level:3},{value:"GetMemberOrigin",id:"getmemberorigin",level:3},{value:"RefactorStorageProperty",id:"refactorstorageproperty",level:3},{value:"RenameSqlField",id:"renamesqlfield",level:3},{value:"RenameSqlFieldLbst",id:"renamesqlfieldlbst",level:3},{value:"RenameSqlTable",id:"renamesqltable",level:3}];function i(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"compilercosrefactor",children:"%Compiler.COS.Refactor"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class %Compiler.COS.Refactor Extends %Compiler.COS.Traveler [ System = 4 ]\n"})}),"\n",(0,n.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(s.h3,{id:"classname",children:"className"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property className As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"propname",children:"propName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property propName As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"methname",children:"methName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property methName As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"type",children:"type"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property type As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"lhs",children:"lhs"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property lhs As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"lnum",children:"lnum"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property lnum As %Integer;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"pair",children:"pair"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property pair As %ObjectHandle;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"changed",children:"changed"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property changed As %Boolean;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"scname",children:"scname"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property scname As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"tcname",children:"tcname"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property tcname As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"cmname",children:"cmname"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property cmname As %Binary;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"smname",children:"smname"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property smname As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"tmname",children:"tmname"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property tmname As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"ssqlname",children:"ssqlname"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property ssqlname As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"tsqlname",children:"tsqlname"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property tsqlname As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"sqltablenamelist",children:"sqlTableNameList"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property sqlTableNameList As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"ctind",children:"ctind"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property ctind As %Integer;\n"})}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"oneclassold",children:"oneClassold"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method oneClassold() As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"oneclass",children:"oneClass"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method oneClass(ByRef tempName As %String, bsave As %Boolean = 1, ByRef storagechanged As %Boolean, bNewSlot As %Boolean = 0, bDeleteStorage As %Boolean = 0) As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"rf",children:"rf"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Method rf(ByRef source As %RawString, pPackage As %RawString = "", ByRef code As %RawString, ByRef warning As %Status = 1, sqlContext As %Integer = 0) As %Status\n'})}),"\n",(0,n.jsx)(s.h3,{id:"v9",children:"v9"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v9(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.p,{children:"LvnRef(9): ann name Name:1, ann enum LvnType:2, optional child Subscripts:1 LOCAL/GLOBAL VARIABLES enum LvnType: Private:1, Public:2, Parameter:3"}),"\n",(0,n.jsx)(s.h3,{id:"v10",children:"v10"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v10(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v2",children:"v2"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v2(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v1",children:"v1"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v1(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v62",children:"v62"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v62(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v5",children:"v5"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v5(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"replacemembername",children:"replaceMemberName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method replaceMemberName(parseTree As %Compiler.Util.ParseTree, newname As %Binary, nodePtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"replaceclassname",children:"replaceClassName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method replaceClassName(parseTree As %Compiler.Util.ParseTree, newname As %Binary, nodePtr As %Integer, parentPtr As %Integer, ann As %String)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v35",children:"v35"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v35(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v97",children:"v97"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v97(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v36",children:"v36"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v36(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v41",children:"v41"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v41(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v13",children:"v13"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v13(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v14",children:"v14"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v14(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v37",children:"v37"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v37(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v34",children:"v34"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v34(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v33",children:"v33"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v33(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v11",children:"v11"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v11(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v38",children:"v38"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v38(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v12",children:"v12"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v12(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"v32",children:"v32"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method v32(parseTree As %Compiler.Util.ParseTree, visit As %Integer, nodePtr As %Integer, parentPtr As %Integer)\n"})}),"\n",(0,n.jsx)(s.h3,{id:"changemultclassnameexecute",children:"ChangeMultClassNameExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ChangeMultClassNameExecute(ByRef qHandle As %Binary, oldName As %String, newName As %String, projectName As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"changemultclassnameclose",children:"ChangeMultClassNameClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ChangeMultClassNameClose(ByRef qHandle As %Binary) As %Status [ PlaceAfter = ChangeMultClassNameExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"changemultclassnamefetch",children:"ChangeMultClassNameFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ChangeMultClassNameFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ PlaceAfter = ChangeMultClassNameExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"getsubclasses",children:"GetSubclasses"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetSubclasses(classname As %String) As %Binary\n"})}),"\n",(0,n.jsx)(s.h3,{id:"gettablelist",children:"GetTableList"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetTableList(classnamelist As %Binary) As %Binary\n"})}),"\n",(0,n.jsx)(s.h3,{id:"changemultmembernameexecute",children:"ChangeMultMemberNameExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ChangeMultMemberNameExecute(ByRef qHandle As %Binary, oldName As %String, newName As %String, memclassName As %String, projectName As %String, sqlName As %String = "") As %Status\n'})}),"\n",(0,n.jsx)(s.h3,{id:"changemultmembernameclose",children:"ChangeMultMemberNameClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ChangeMultMemberNameClose(ByRef qHandle As %Binary) As %Status [ PlaceAfter = ChangeMultClassNameExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"changemultmembernamefetch",children:"ChangeMultMemberNameFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ChangeMultMemberNameFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ PlaceAfter = ChangeMultClassNameExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"normalizeclname",children:"NormalizeClName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NormalizeClName(clname As %String, context As %String) As %String\n"})}),"\n",(0,n.jsx)(s.h3,{id:"changecslist",children:"ChangeCSList"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ChangeCSList(ByRef cslist As %String, oldName As %String, newName As %String, bNormalize As %Boolean, context As %String = "") As %Boolean\n'})}),"\n",(0,n.jsx)(s.h3,{id:"changeclname",children:"ChangeClName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ChangeClName(oldName As %String, newName As %String, className As %String, ByRef tempName As %String, ByRef storagechanged As %Boolean, bDeleteStorage As %Boolean = 0) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The method ",(0,n.jsx)(s.strong,{children:"ChangeClName"}),"  is used for changing a class name. Arguments: oldName - existing class name, newName - new class name, className - class to be processed, tempName - name of generated clas,s storagechanged - indicate whether storage was modified. In order to replace encounters of the class A to the class B in the class C, the call should be ChangeClName(A, B, C, .tempName, .storagechanged) As a result of this call a new class (with a name returned in tempName) will be created (but not compiled)."]}),"\n",(0,n.jsx)(s.h3,{id:"changeclassnameexecute",children:"ChangeClassNameExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ChangeClassNameExecute(ByRef qHandle As %Binary, oldName As %String, newName As %String, className As %String, ByRef tempName As %String, ByRef storagechanged As %Boolean) As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"changeclassnameclose",children:"ChangeClassNameClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ChangeClassNameClose(ByRef qHandle As %Binary) As %Status [ PlaceAfter = ChangeClassNameExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"changeclassnamefetch",children:"ChangeClassNameFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ChangeClassNameFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ PlaceAfter = ChangeClassNameExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"changememname",children:"ChangeMemName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ChangeMemName(oldName As %String, newName As %String, memclassName As %String, className As %String, ByRef tempName As %String, ByRef storagechanged As %Boolean, sqlName = "", bNewSlot As %Boolean = 0) As %Status\n'})}),"\n",(0,n.jsxs)(s.p,{children:["The method ",(0,n.jsx)(s.strong,{children:"ChangeMemName"}),"  is used for changing a member name (either a property or a method). Arguments: oldName - existing member name, newName - new member name, memclassName - the class name of a property that is being changed, className - class to be processed, tempName - name of generated clas,s storagechanged - indicate whether storage was modified. In order to replace encounters of the member Z.A to Z.B in the class C, the call should be ChangeMemName(A, B, Z, C, .tempName, .storagechanged) As a result of this call a new class (with a name returned in tempName) will be created (but not compiled)."]}),"\n",(0,n.jsx)(s.h3,{id:"changemembernameexecute",children:"ChangeMemberNameExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ChangeMemberNameExecute(ByRef qHandle As %Binary, oldName As %String, newName As %String, memclassName As %String, className As %String, ByRef tempName As %String, ByRef storagechanged As %Boolean, sqlName As %String = "") As %Status\n'})}),"\n",(0,n.jsx)(s.h3,{id:"changemembernameclose",children:"ChangeMemberNameClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ChangeMemberNameClose(ByRef qHandle As %Binary) As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"changemembernamefetch",children:"ChangeMemberNameFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ChangeMemberNameFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"getmemberorigin",children:"GetMemberOrigin"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetMemberOrigin(memberName As %String, className As %String) As %String\n"})}),"\n",(0,n.jsx)(s.h3,{id:"refactorstorageproperty",children:"RefactorStorageProperty"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RefactorStorageProperty(pClassname As %String, pPropName As %String, pNewName As %String, pNewSlot As %Boolean = 0, ByRef pChanged As %Boolean, pSave As %Boolean = 1) As %String [ PublicList = (%ROWCOUNT, %ROWID, SQLCODE, %msg, pPropName, tStorageId, pClassname, tDSDId, tDataAttribute, tDataValueName, tPropDefName, tDVDId, tSPDId) ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"RefactorStorageProperty takes a classname, property name, and a new property name and changes the name of the property to the new name everywhere in the storage definition. The pNewSlot argument means if pNewSlot=1, don't overwrite the current property storage data location, but provide a new data slot with the new name. The pChanged argument is passed by reference and will be set to 1 if any change is made to any Storage defined for this class. It will be 0 if no changes are made. Returns %Status value"}),"\n",(0,n.jsx)(s.h3,{id:"renamesqlfield",children:"RenameSqlField"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RenameSqlField(ByRef sql As %String, ByRef nuq As %String, ffn As %String, nuf As %String, sch As %String, tab As %String) As %Library.Status [ PublicList = mtc ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"In the SQL text array (by ref) .sql(1:sql)=line, find all occurrences, if any, of field ffn from the table specified by sch=$LB(schema) and tab=$LB(table), and replace them with nuf in the result array (by ref) .nuq(1:nuq)=line , returns %Status"}),"\n",(0,n.jsx)(s.h3,{id:"renamesqlfieldlbst",children:"RenameSqlFieldLbst"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod RenameSqlFieldLbst(ByRef sql As %String, ByRef nuq As %String, ffn As %String, nuf As %String, lbst As %String, ByRef pChanged As %Boolean, pClassname As %String = "") As %Library.Status [ PublicList = (backgrnd, err, mcurs, mtag, mtc, SQLCODE) ]\n'})}),"\n",(0,n.jsx)(s.p,{children:"In the SQL text array (by ref) .sql(1:sql)=line, find all occurrences, if any, of field ffn from the tables specified by lbst=$LB(schema.table), and replace them with nuf in the result array (by ref) .nuq(1:nuq)=line , pChanged=0/1 (by ref) indicates whether anything changed, return %Status. pClassname is the class name the sql statement came from, if any, and its package name is used as the packages argument to comp^%qaqqt"}),"\n",(0,n.jsx)(s.h3,{id:"renamesqltable",children:"RenameSqlTable"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod RenameSqlTable(ByRef sql As %String, ByRef nuq As %String, sntn As %String, nust As %String, ByRef pChanged As %Boolean, pClassname As %String = "") As %Library.Status [ PublicList = (backgrnd, err, mcurs, mtag, mtc, SQLCODE) ]\n'})}),"\n",(0,n.jsx)(s.p,{children:"In the SQL text array (by ref) .sql(1:sql)=line, find all occurrences, if any, of [schema.]table sntn=schema.table, and replace them with the new schema.table nust in the result array (by ref) .nuq(1:nuq)=line , pChanged=0/1 (by ref) indicates whether anything changed, return %Status. pClassname is the class name the sql statement came from, if any, and its package name is used as the packages argument to comp^%qaqqt"})]})}function d(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(i,{...e})}):i(e)}},28453:(e,s,a)=>{a.d(s,{R:()=>t,x:()=>c});var n=a(96540);const l={},r=n.createContext(l);function t(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);