"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[39308],{7547:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>h,frontMatter:()=>i,toc:()=>o});var s=n(74848),a=n(28453);const i={pagination_prev:null,pagination_next:null},r="%ZEN.Component.activeVGroup",o=[{value:"Parameters",id:"parameters",level:2},{value:"INCLUDEFILES",id:"includefiles",level:3},{value:"DEFAULTENCLOSINGCLASS",id:"defaultenclosingclass",level:3},{value:"Properties",id:"properties",level:2},{value:"split",id:"split",level:3},{value:"autoExpand",id:"autoexpand",level:3},{value:"noResize",id:"noresize",level:3},{value:"handleThickness",id:"handlethickness",level:3},{value:"handlePattern",id:"handlepattern",level:3},{value:"soundFX",id:"soundfx",level:3},{value:"onresizeTop",id:"onresizetop",level:3},{value:"onresizeBottom",id:"onresizebottom",level:3},{value:"XDatas",id:"xdatas",level:2},{value:"Style",id:"style",level:3},{value:"Methods",id:"methods",level:2},{value:"%DrawHTML",id:"drawhtml",level:3},{value:"getController",id:"getcontroller",level:3},{value:"showBottomOnly",id:"showbottomonly",level:3},{value:"showTopOnly",id:"showtoponly",level:3},{value:"restoreSplit",id:"restoresplit",level:3},{value:"setProperty",id:"setproperty",level:3},{value:"onloadHandler",id:"onloadhandler",level:3},{value:"onRefreshContents",id:"onrefreshcontents",level:3},{value:"installResizeHandlers",id:"installresizehandlers",level:3}];function l(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"zencomponentactivevgroup",children:"%ZEN.Component.activeVGroup"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %ZEN.Component.activeVGroup Extends %ZEN.Component.activeGroup [ Deprecated, System = 3 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["%ZEN.Component.activeVGroup The active vertical group is a client-side (JavaScript-heavy) container widget designed for creating binary partitions of an area of the active display. An activeVGroup is always specified with exactly two children (any excess are ignored). These children may have an arbitrary number of children of their own but at the top level the strict limit is enforced.",(0,s.jsx)(t.br,{}),"\nOn the client-side, the component will be rendered as a split pane with top and bottom partitions, potentially separated by an adjustment handle. If no geometry restrictions are specified, the component will attempt to size itself to fill all available space remaining in the browser window (this behavior, can of course be overridden by CSS).",(0,s.jsx)(t.br,{}),"\nThere are several properties governing the nature and handling of the partioning. The split may be speficied as an absolute reserve of pixels for the top or bottom pane (with excess pixels going to the other) or as a constant percentage to be reapportioned in actual pixels whenever the widget's container is resized. The split can be marked as either fixed or user-adjustable. It is possible specify child panes that slide open to a predefined taller height when the mouse rolls over them and auto-close when the mouse leaves the region. In the case of auto-expanding panes, it is possible to define sound effects to accompany the animation."]}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(t.h3,{id:"includefiles",children:"INCLUDEFILES"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter INCLUDEFILES = "zenCSLM.js,zenActiveVGroup.js";\n'})}),"\n",(0,s.jsx)(t.h3,{id:"defaultenclosingclass",children:"DEFAULTENCLOSINGCLASS"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter DEFAULTENCLOSINGCLASS = "activeGroup";\n'})}),"\n",(0,s.jsx)(t.p,{children:"To be compatible with the static layout manager the enclosing class has to be the generic activeGroup rather than the specific activeVGroup The activeVGroup is the one used for tuning attributes of the absolutely positioned elements."}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"split",children:"split"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property split As %ZEN.Datatype.string;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Defines the division between the two panes.",(0,s.jsx)(t.br,{}),"\nA value with a % sign is interpreted as a proportional division between the top and bottom panes and is recalculated to maintain this ratio whenever the base division is resized by any means. Manual adjustment of the value continues to be interpreted as a percentage split.",(0,s.jsx)(t.br,{}),"\nA positive value not constaining a percent sign is interpreted as a fixed reserve height for the top child. Any adjustments to the total height of the base container are reflected in the geometry of the bottom pane only.",(0,s.jsx)(t.br,{}),"\nA negative value (which cannot contain a % sign) is interpreted as a fixed height for the bottom pane. Any adjustments to the total height of the base container are reflected in the geometry of the top child.",(0,s.jsx)(t.br,{}),"\nManual adjustment of a top or bottom reserved height will change the size of the reserve and these fixed sizes will be respected even as the window is resized.",(0,s.jsx)(t.br,{}),'\nThe default split is "50%"']}),"\n",(0,s.jsx)(t.h3,{id:"autoexpand",children:"autoExpand"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property autoExpand As %ZEN.Datatype.string;\n"})}),"\n",(0,s.jsxs)(t.p,{children:['If defined, this property indicates that one of the two panels is an auto-open/auto-close sidebar panel and that the panel should expand when the mouse enters its "split"-defined bounds and grow until it reaches the height given in the autoExpand parameter. The value is always interpreted in pixels. A positive value designates the top pane for auto-expansion. A negative value designates the bottom.',(0,s.jsx)(t.br,{}),"\nThe default value (null) indicates that the auto-expansion feature is not used by this instance of the widget."]}),"\n",(0,s.jsx)(t.h3,{id:"noresize",children:"noResize"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property noResize As %ZEN.Datatype.string;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["if true, this indicates that the user is not to be allowed to resize the panes.",(0,s.jsx)(t.br,{}),"\nIf false, user adjustment of the pane sizes is allowed via dragging the pane handle with the mouse. If user resizing is enabled, the mouse pointer will change to a north-south resize cursor when the mouse is in potential drag position.",(0,s.jsx)(t.br,{}),'\nThe default value is "false"']}),"\n",(0,s.jsx)(t.h3,{id:"handlethickness",children:"handleThickness"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property handleThickness As %ZEN.Datatype.string;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This indicates the height of the pane partition handle in pixels. Due to the dynamic functional nature of the element, the height of this bar cannot be set via CSS and must be specified via this property.",(0,s.jsx)(t.br,{}),'\nThe default value is "7", resulting a drag handle a little under one eight of an inch (2 mm) thick on most screens.']}),"\n",(0,s.jsx)(t.h3,{id:"handlepattern",children:"handlePattern"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property handlePattern As %ZEN.Datatype.string;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This indicates a file name for an image to use for painting the dragable partition handle. This image should be at least as tall as the handle thickness and is repeated horzontally along the length of the handle.",(0,s.jsx)(t.br,{}),"\nThe default value is a PNG file of a top-highighted gray gradient, bounded by black on either side."]}),"\n",(0,s.jsx)(t.h3,{id:"soundfx",children:"soundFX"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property soundFX As %ZEN.Datatype.string;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This indicates a sound file to be played when an auto-expansion window grows or shrinks. If not defined or null, no sound accompanies the animation.",(0,s.jsx)(t.br,{}),'\nThe default is "null"']}),"\n",(0,s.jsx)(t.h3,{id:"onresizetop",children:"onresizeTop"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property onresizeTop As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(t.p,{children:"onresizeTop event handler: This event is fired when the top panel of this component is resized"}),"\n",(0,s.jsx)(t.h3,{id:"onresizebottom",children:"onresizeBottom"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property onresizeBottom As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(t.p,{children:"onresizeBottom event handler: This event is fired when the bottom panel of this component is resized"}),"\n",(0,s.jsx)(t.h2,{id:"xdatas",children:"XDatas"}),"\n",(0,s.jsx)(t.h3,{id:"style",children:"Style"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"XData Style\n"})}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"drawhtml",children:"%DrawHTML"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %DrawHTML()\n"})}),"\n",(0,s.jsx)(t.p,{children:"The HTML generated here is NOT the final DOM structure of this component. At the client, the information embedded here will be used to build a more complex DOM subtree under the control of an active client-side layout manager. The exact structure of this expansion is not important for most users of this particular component, however, it _is_ useful to not that the handle dividing the panes is of the HTML class zenHPaneHandle for the purposes of CSS style references."}),"\n",(0,s.jsx)(t.h3,{id:"getcontroller",children:"getController"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getController() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"showbottomonly",children:"showBottomOnly"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod showBottomOnly() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"showtoponly",children:"showTopOnly"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod showTopOnly() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"restoresplit",children:"restoreSplit"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod restoreSplit() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"setproperty",children:"setProperty"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod setProperty(property, value, value2) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Set the value of a named property."}),"\n",(0,s.jsx)(t.h3,{id:"onloadhandler",children:"onloadHandler"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod onloadHandler() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:'The code generated by the server is NOT the complete structure for the activeHGroup. Like other client-side layout managers, only the necessary meta-data is sent to the client. The main processing logic is stored in a client-side, cache-able JavaScript file (zenActiveHGroup.js) To complete the connection between the meta-data description and the code library, the manager class must be registered with the generic client-side layout manager. The generic manager maintains a list of classes that require special handling and the JavaScript code bodies that perform such handling. A call to ZLM.initLayout() scans the DOM to find any meta-data classes (such as this one) and "unpacks" them into DOM structures for local geometry maintenance. This is all done behind the scenes via the Zen classes onload handler.'}),"\n",(0,s.jsx)(t.h3,{id:"onrefreshcontents",children:"onRefreshContents"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod onRefreshContents() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"installresizehandlers",children:"installResizeHandlers"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod installResizeHandlers() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Install or update the resize callbacks associated with this instance"})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);