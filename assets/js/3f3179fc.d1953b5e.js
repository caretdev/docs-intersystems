"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[61097],{7572:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>l,default:()=>o,frontMatter:()=>a,toc:()=>c});var n=s(74848),r=s(28453);const a={pagination_prev:null,pagination_next:null},l="%iKnow.Semantics.DominanceQAPI",c=[{value:"Methods",id:"methods",level:2},{value:"GetAggregateOverlapsExecute",id:"getaggregateoverlapsexecute",level:3},{value:"GetAggregateOverlapsFetch",id:"getaggregateoverlapsfetch",level:3},{value:"GetAggregateOverlapsClose",id:"getaggregateoverlapsclose",level:3},{value:"GetBreakingSourcesExecute",id:"getbreakingsourcesexecute",level:3},{value:"GetBreakingSourcesFetch",id:"getbreakingsourcesfetch",level:3},{value:"GetBreakingSourcesClose",id:"getbreakingsourcesclose",level:3},{value:"GetBySourceExecute",id:"getbysourceexecute",level:3},{value:"GetBySourceFetch",id:"getbysourcefetch",level:3},{value:"GetBySourceClose",id:"getbysourceclose",level:3},{value:"GetCountBySource",id:"getcountbysource",level:3},{value:"GetCountBySourceInternal",id:"getcountbysourceinternal",level:3},{value:"GetDomainValue",id:"getdomainvalue",level:3},{value:"GetOverlapExecute",id:"getoverlapexecute",level:3},{value:"GetOverlapFetch",id:"getoverlapfetch",level:3},{value:"GetOverlapClose",id:"getoverlapclose",level:3},{value:"GetOverlapDetailsExecute",id:"getoverlapdetailsexecute",level:3},{value:"GetOverlapDetailsFetch",id:"getoverlapdetailsfetch",level:3},{value:"GetOverlapDetailsClose",id:"getoverlapdetailsclose",level:3},{value:"GetProfileByDomainExecute",id:"getprofilebydomainexecute",level:3},{value:"GetProfileByDomainFetch",id:"getprofilebydomainfetch",level:3},{value:"GetProfileByDomainClose",id:"getprofilebydomainclose",level:3},{value:"GetProfileBySourceExecute",id:"getprofilebysourceexecute",level:3},{value:"GetProfileBySourceFetch",id:"getprofilebysourcefetch",level:3},{value:"GetProfileBySourceClose",id:"getprofilebysourceclose",level:3},{value:"GetProfileCountByDomain",id:"getprofilecountbydomain",level:3},{value:"GetProfileCountBySource",id:"getprofilecountbysource",level:3},{value:"GetSourceValue",id:"getsourcevalue",level:3},{value:"GetSourcesByCorrelationExecute",id:"getsourcesbycorrelationexecute",level:3},{value:"GetSourcesByCorrelationFetch",id:"getsourcesbycorrelationfetch",level:3},{value:"GetSourcesByCorrelationClose",id:"getsourcesbycorrelationclose",level:3},{value:"GetTopExecute",id:"gettopexecute",level:3},{value:"GetTopFetch",id:"gettopfetch",level:3},{value:"GetTopClose",id:"gettopclose",level:3},{value:"GetTypicalSourcesExecute",id:"gettypicalsourcesexecute",level:3},{value:"GetTypicalSourcesFetch",id:"gettypicalsourcesfetch",level:3},{value:"GetTypicalSourcesClose",id:"gettypicalsourcesclose",level:3}];function i(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"iknowsemanticsdominanceqapi",children:"%iKnow.Semantics.DominanceQAPI"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %iKnow.Semantics.DominanceQAPI Extends %iKnow.Queries.AbstractQAPI [ Deprecated, System = 4 ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"This is an automatically generated class, offering a functionally equivalent set of methods and queries as %iKnow.Semantics.DominanceAPI, exposed as SqlProc methods."}),"\n",(0,n.jsx)(t.p,{children:"See the classdocs for %iKnow.Semantics.DominanceAPI for more information."}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"getaggregateoverlapsexecute",children:"GetAggregateOverlapsExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetAggregateOverlapsExecute(ByRef qHandle As %Binary, domainid As %Integer, type As %Integer, set1 As %String(MAXLEN=32767) = "", set2 As %String(MAXLEN=32767) = "", page As %Integer = 1, pagesize As %Integer = 10) As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Calculates the overlapping overlap of two sets of documents. First the overlap within set1 is calculated, then the overlap within set2. Finally those are compared and the most overlapping elements within those 2 sets are returned."}),"\n",(0,n.jsx)(t.h3,{id:"getaggregateoverlapsfetch",children:"GetAggregateOverlapsFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetAggregateOverlapsFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = GetAggregateOverlapsExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getaggregateoverlapsclose",children:"GetAggregateOverlapsClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetAggregateOverlapsClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = GetAggregateOverlapsExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getbreakingsourcesexecute",children:"GetBreakingSourcesExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetBreakingSourcesExecute(ByRef qHandle As %Binary, domainid As %Integer, page As %Integer = 1, pagesize As %Integer = 10, type As %Integer = {$$$SDCONCEPT}, filter As %String(MAXLEN=32767) = "") As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Returns the list of most breaking sources in a domain. The type parameter defines on which type of element you want the list of breaking documents to be based. This can be:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"$$$SDCONCEPT"}),"\n",(0,n.jsx)(t.li,{children:"$$$SDRELATION"}),"\n",(0,n.jsx)(t.li,{children:"$$$SDENTITY"}),"\n",(0,n.jsx)(t.li,{children:"$$$SDCRC\n."}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"getbreakingsourcesfetch",children:"GetBreakingSourcesFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetBreakingSourcesFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = GetBreakingSourcesExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getbreakingsourcesclose",children:"GetBreakingSourcesClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetBreakingSourcesClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = GetBreakingSourcesExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getbysourceexecute",children:"GetBySourceExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetBySourceExecute(ByRef qHandle As %Binary, domainid As %Integer, srcid As %Integer, page As %Integer = 1, pagesize As %Integer = 10, type As %Integer = {$$$SDCONCEPT}, cutoff As %Integer = {$$$SDALL}) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Returns all dominant elements for a specific source. The type of elements returned can be set by the type parameter. Available types are $$$SDCONCEPT, $$$SDRELATION, $$$SDENTITY, $$$SDCRC, $$$SDPATH and $$$SDAGGREGATE."}),"\n",(0,n.jsx)(t.p,{children:"The elements returned can be limited to those with a dominance value above average by setting the cutoff parameter to $$$SDABOVEAVERAGE."}),"\n",(0,n.jsx)(t.h3,{id:"getbysourcefetch",children:"GetBySourceFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetBySourceFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = GetBySourceExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getbysourceclose",children:"GetBySourceClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetBySourceClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = GetBySourceExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getcountbysource",children:"GetCountBySource"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetCountBySource(domainid As %Integer, srcid As %Integer, type As %Integer = {$$$SDCONCEPT}, cutoff As %Integer = {$$$SDALL}, Output scText As %String = "") As %Library.Integer [ SqlProc ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Returns the number of dominant terms found in a specific source. The type of elements counted can be set by the type parameter. Available types are $$$SDCONCEPT, $$$SDRELATION, $$$SDENTITY, $$$SDCRC, $$$SDPATH and $$$SDAGGREGATE."}),"\n",(0,n.jsx)(t.p,{children:"The number of elements counted can be limited to those with a dominance value above average by setting the cutoff parameter to $$$SDABOVEAVERAGE."}),"\n",(0,n.jsx)(t.h3,{id:"getcountbysourceinternal",children:"GetCountBySourceInternal"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetCountBySourceInternal(domainid As %Integer, srcid As %Integer, type As %Integer = {$$$SDCONCEPT}, cutoff As %Integer = {$$$SDALL}, pUseProfile As %Boolean = 1, Output scText As %String = "") As %Library.Integer [ SqlProc ]\n'})}),"\n",(0,n.jsx)(t.h3,{id:"getdomainvalue",children:"GetDomainValue"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetDomainValue(domainid As %Integer, id As %Integer, type As %Integer = {$$$SDCONCEPT}, Output scText As %String = "") As %Library.Numeric [ SqlProc ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Returns the dominance value of an element within a specified domain. The id parameter takes either an entityId, crcId or pathId and the type parameter defines of what type the id parameter is. Thus valid types are $$$SDCONCEPT, $$$SDCRC and $$$SDPATH."}),"\n",(0,n.jsx)(t.h3,{id:"getoverlapexecute",children:"GetOverlapExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetOverlapExecute(ByRef qHandle As %Binary, domainid As %Integer, page As %Integer = 1, pagesize As %Integer = 10, type As %Integer = {$$$SDCONCEPT}, filter As %String(MAXLEN=32767) = "") As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Returns the most overlapping elements in a domain. This can be restricted by type by setting the type parameter to any of those values:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"$$$SDCONCEPT"}),"\n",(0,n.jsx)(t.li,{children:"$$$SDRELATION"}),"\n",(0,n.jsx)(t.li,{children:"$$$SDENTITY"}),"\n",(0,n.jsx)(t.li,{children:"$$$SDCRC\n."}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"getoverlapfetch",children:"GetOverlapFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetOverlapFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = GetOverlapExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getoverlapclose",children:"GetOverlapClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetOverlapClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = GetOverlapExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getoverlapdetailsexecute",children:"GetOverlapDetailsExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetOverlapDetailsExecute(ByRef qHandle As %Binary, domainid As %Integer, id As %Integer, page As %Integer = 1, pagesize As %Integer = 10, type As %Integer = {$$$SDCONCEPT}, filter As %String(MAXLEN=32767) = "") As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Returns the overlap details of an element in a domain. The type of the element must be specified through the type parameter to any of those values:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"$$$SDCONCEPT"}),"\n",(0,n.jsx)(t.li,{children:"$$$SDRELATION"}),"\n",(0,n.jsx)(t.li,{children:"$$$SDENTITY"}),"\n",(0,n.jsx)(t.li,{children:"$$$SDCRC\n."}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"getoverlapdetailsfetch",children:"GetOverlapDetailsFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetOverlapDetailsFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = GetOverlapDetailsExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getoverlapdetailsclose",children:"GetOverlapDetailsClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetOverlapDetailsClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = GetOverlapDetailsExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getprofilebydomainexecute",children:"GetProfileByDomainExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetProfileByDomainExecute(ByRef qHandle As %Binary, domainid As %Integer, page As %Integer = 1, pagesize As %Integer = 10, type As %Integer = {$$$SDCONCEPT}) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the dominance profile for a complete domain. The type of elements returned can be set by the type parameter. Available types are $$$SDCONCEPT, $$$SDRELATION, $$$SDENTITY, $$$SDCRC and $$$SDAGGREGATE."}),"\n",(0,n.jsx)(t.h3,{id:"getprofilebydomainfetch",children:"GetProfileByDomainFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetProfileByDomainFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = GetProfileByDomainExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getprofilebydomainclose",children:"GetProfileByDomainClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetProfileByDomainClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = GetProfileByDomainExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getprofilebysourceexecute",children:"GetProfileBySourceExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetProfileBySourceExecute(ByRef qHandle As %Binary, domainid As %Integer, srcid As %Integer, page As %Integer = 1, pagesize As %Integer = 10, type As %Integer = {$$$SDCONCEPT}, cutoff As %Integer = {$$$SDALL}) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the dominance profile for a specific source. The type of elements returned can be set by the type parameter. Available types are $$$SDCONCEPT, $$$SDRELATION, $$$SDENTITY, $$$SDCRC, $$$SDPATH and $$$SDAGGREGATE."}),"\n",(0,n.jsx)(t.p,{children:"The elements returned can be limited to those with a dominance value above average by setting the cutoff parameter to $$$SDABOVEAVERAGE."}),"\n",(0,n.jsx)(t.h3,{id:"getprofilebysourcefetch",children:"GetProfileBySourceFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetProfileBySourceFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = GetProfileBySourceExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getprofilebysourceclose",children:"GetProfileBySourceClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetProfileBySourceClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = GetProfileBySourceExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getprofilecountbydomain",children:"GetProfileCountByDomain"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetProfileCountByDomain(domainid As %Integer, type As %Integer = {$$$SDCONCEPT}, Output scText As %String = "") As %Library.Integer [ SqlProc ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Returns the number of dominant terms in the profile of a complete domain. The type of elements counted can be set by the type parameter. Available types are $$$SDCONCEPT, $$$SDRELATION, $$$SDENTITY, $$$SDCRC and $$$SDAGGREGATE."}),"\n",(0,n.jsx)(t.h3,{id:"getprofilecountbysource",children:"GetProfileCountBySource"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetProfileCountBySource(domainid As %Integer, srcid As %Integer, type As %Integer = {$$$SDCONCEPT}, cutoff As %Integer = {$$$SDALL}, Output scText As %String = "") As %Library.Integer [ SqlProc ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Returns the number of dominant terms in the profile of a specific source. The type of elements counted can be set by the type parameter. Available types are $$$SDCONCEPT, $$$SDRELATION, $$$SDENTITY, $$$SDCRC, $$$SDPATH and $$$SDAGGREGATE."}),"\n",(0,n.jsx)(t.p,{children:"The number of elements counted can be limited to those with a dominance value above average by setting the cutoff parameter to $$$SDABOVEAVERAGE."}),"\n",(0,n.jsx)(t.h3,{id:"getsourcevalue",children:"GetSourceValue"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetSourceValue(domainid As %Integer, srcid As %Integer, id As %Integer, type As %Integer = {$$$SDCONCEPT}, Output scText As %String = "") As %Library.Numeric [ SqlProc ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Returns the dominance value of an element within a specified source. The id parameter takes either an entityId, crcId or pathId and the type parameter defines of what type the id parameter is. Thus valid types are $$$SDCONCEPT, $$$SDRELATIONM, $$$SDENTITY, $$$SDCRC and $$$SDPATH."}),"\n",(0,n.jsx)(t.h3,{id:"getsourcesbycorrelationexecute",children:"GetSourcesByCorrelationExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetSourcesByCorrelationExecute(ByRef qHandle As %Binary, domainid As %Integer, entids As %String(MAXLEN=32767) = "", page As %Integer = 1, pagesize As %Integer = 10, filter As %String(MAXLEN=32767) = "") As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Returns a set of documents wich correlate closely to the input set (entids) of entities based on the dominance values of those entities within the documents."}),"\n",(0,n.jsx)(t.h3,{id:"getsourcesbycorrelationfetch",children:"GetSourcesByCorrelationFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetSourcesByCorrelationFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = GetSourcesByCorrelationExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getsourcesbycorrelationclose",children:"GetSourcesByCorrelationClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetSourcesByCorrelationClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = GetSourcesByCorrelationExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"gettopexecute",children:"GetTopExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetTopExecute(ByRef qHandle As %Binary, pDomainId As %Integer, pPage As %Integer = 1, pPageSize As %Integer = 10, pFilter As %String(MAXLEN=32767) = "", pAggregation As %String(MAXLEN=32767) = "AVG", pEntRole As %Integer = {$$$SDCONCEPT}, pSkipLists As %String(MAXLEN=32767) = "") As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Returns the top entities for this domain, sorted by their aggregated dominance values."}),"\n",(0,n.jsx)(t.p,{children:'pAggregation defines how to aggregate the source-level values. Currently the only supported value is "AVG", which just calculates a regular average as a fast approximation. Future versions will offer more advanced aggregation modes (which may be slower to calculate).'}),"\n",(0,n.jsx)(t.h3,{id:"gettopfetch",children:"GetTopFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetTopFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = GetTopExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"gettopclose",children:"GetTopClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetTopClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = GetTopExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"gettypicalsourcesexecute",children:"GetTypicalSourcesExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetTypicalSourcesExecute(ByRef qHandle As %Binary, domainid As %Integer, page As %Integer = 1, pagesize As %Integer = 10, type As %Integer = {$$$SDCONCEPT}, filter As %String(MAXLEN=32767) = "") As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Returns the list of most typical sources in a domain. The type parameter defines on which type of element you want the list of typical documents to be based. This can be:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"$$$SDCONCEPT"}),"\n",(0,n.jsx)(t.li,{children:"$$$SDRELATION"}),"\n",(0,n.jsx)(t.li,{children:"$$$SDENTITY"}),"\n",(0,n.jsx)(t.li,{children:"$$$SDCRC\n."}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"gettypicalsourcesfetch",children:"GetTypicalSourcesFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetTypicalSourcesFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = GetTypicalSourcesExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"gettypicalsourcesclose",children:"GetTypicalSourcesClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetTypicalSourcesClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = GetTypicalSourcesExecute ]\n"})})]})}function o(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(i,{...e})}):i(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>c});var n=s(96540);const r={},a=n.createContext(r);function l(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);