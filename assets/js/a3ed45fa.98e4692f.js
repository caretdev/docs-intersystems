"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[82218],{80244:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>a,default:()=>c,frontMatter:()=>i,toc:()=>o});var r=t(74848),n=t(28453);const i={pagination_prev:null,pagination_next:null},a="%SYSTEM.Security",o=[{value:"Methods",id:"methods",level:2},{value:"AddRoles",id:"addroles",level:3},{value:"Audit",id:"audit",level:3},{value:"AuditID",id:"auditid",level:3},{value:"ChangePassword",id:"changepassword",level:3},{value:"Check",id:"check",level:3},{value:"CheckRolesPermission",id:"checkrolespermission",level:3},{value:"CheckUserPermission",id:"checkuserpermission",level:3},{value:"ValidatePassword",id:"validatepassword",level:3},{value:"Login",id:"login",level:3},{value:"GetGlobalPermission",id:"getglobalpermission",level:3},{value:"GlobalPermissionCheck",id:"globalpermissioncheck",level:3},{value:"GetRoutinePermission",id:"getroutinepermission",level:3},{value:"RoutinePermissionCheck",id:"routinepermissioncheck",level:3},{value:"GetRecursedRoleSet",id:"getrecursedroleset",level:3},{value:"GetUserRecursedRoleSet",id:"getuserrecursedroleset",level:3},{value:"ResourceExists",id:"resourceexists",level:3},{value:"CSPEscalateLogin",id:"cspescalatelogin",level:3},{value:"EscalateLogin",id:"escalatelogin",level:3}];function l(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"systemsecurity",children:"%SYSTEM.Security"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Class %SYSTEM.Security [ Abstract, System = 4 ]\n"})}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"addroles",children:"AddRoles"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod AddRoles(ApplicationName As %String, Hash As %String = "") As %Status\n'})}),"\n",(0,r.jsx)(s.p,{children:"Add the extra roles associated with the named application"}),"\n",(0,r.jsx)(s.h3,{id:"audit",children:"Audit"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Audit(Source As %String, Type As %String, Name As %String, EventData As %String, Description As %String) As %Status [ Abstract ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Audit a user-level event. If auditing is enabled for user level events, generate an audit record with the user-specified information.",(0,r.jsx)(s.br,{}),"\nSource - Source of the Audit event",(0,r.jsx)(s.br,{}),"\nType - Type of the Audit event",(0,r.jsx)(s.br,{}),"\nName - Name of the Audit event",(0,r.jsx)(s.br,{}),"\nEventData - Data logged by the event. Maximum size of 3632952 bytes. Truncated if longer.",(0,r.jsx)(s.br,{}),"\nDescription - Description of the audit event. Maximum size of 128 bytes. Truncated if longer."]}),"\n",(0,r.jsx)(s.h3,{id:"auditid",children:"AuditID"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AuditID(AuditIndex As %Integer, EventData As %String, Description As %String) As %Boolean [ Abstract, Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Audit a system-level event.",(0,r.jsx)(s.br,{}),"\nThis method functions exactly like the Audit method, but avoids the overhead of looking up the Audit Index using the Source, Type, and Name.",(0,r.jsx)(s.br,{}),"\nAuditIndex - Audit event number defined in %syAudit.",(0,r.jsx)(s.br,{}),"\nEventData - Data logged by the event. Maximum size of 3632952 bytes. Truncated if longer.",(0,r.jsx)(s.br,{}),"\nDescription - Description of the audit event. Maximum size of 128 bytes. Truncated if longer."]}),"\n",(0,r.jsx)(s.h3,{id:"changepassword",children:"ChangePassword"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ChangePassword(Username As %String, NewPassword As %String, OldPassword As %String, ByRef Status As %Status) As %Boolean\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Change password for a user.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nUsername - Name of the User to change",(0,r.jsx)(s.br,{}),"\nNewPassword - New password to set",(0,r.jsx)(s.br,{}),"\nOldPassword - Old Password to validate against",(0,r.jsx)(s.br,{}),"\nReturn Value:",(0,r.jsx)(s.br,{}),"\n0 - Failure",(0,r.jsx)(s.br,{}),"\n1 - Password changed",(0,r.jsx)(s.br,{}),"\nOn failure, an error code is returned in Status.",(0,r.jsx)(s.br,{}),"\nIf the old password is not passed as a parameter, then the password will be changed to the NewPassword parameter, providing the following:"]}),"\n",(0,r.jsxs)(s.p,{children:["The calling process has Write permission on the resource that protects the IRISSYS database or the calling routine is stored in the system database.",(0,r.jsx)(s.br,{}),"\nIf you are trying to change the password of a user who was created either through Delegated authentication or through LDAP authentication, you will need to update the ChangePassword^ZAUTHENTICATE routine on your system. See the ZAUTHENTICATE routine in the SAMPLES namespace for documentation."]}),"\n",(0,r.jsx)(s.h3,{id:"check",children:"Check"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Check(ResourceName As %String, Permissions As %String) As %RawString [ Abstract ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Determine if a specified privilege is held on a specified resource.",(0,r.jsx)(s.br,{}),"\nIf called as $System.Security.Check(resource)",(0,r.jsx)(s.br,{}),"\nit returns the privileges held on that resource as a comma-separated list. For example,",(0,r.jsx)(s.br,{}),'\n$System.Security.Check("%DB_IRISTEMP") => "READ,WRITE"']}),"\n",(0,r.jsxs)(s.p,{children:["If called as $System.Security.Check(resource,privilege) it returns 1 or 0 depending on whether the specified privilege is held. For example,",(0,r.jsx)(s.br,{}),'\n$System.Security.Check("%Development","USE") => 1',(0,r.jsx)(s.br,{}),'\nNote: If the process holds the %All role, then the method always returns "READ,WRITE,USE" for the 1-argument form and 1 for the 2-argument form.']}),"\n",(0,r.jsx)(s.h3,{id:"checkrolespermission",children:"CheckRolesPermission"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckRolesPermission(Roles As %String, ResourceName As %String, Permissions As %String) As %RawString\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Determine if a specified privilege is held on a specified resource for a set of roles.",(0,r.jsx)(s.br,{}),"\nIf called as $System.Security.CheckRolesPermission(Roles,Resource)",(0,r.jsx)(s.br,{}),"\nit returns the privileges held on that resource as a comma-separated list. For example,",(0,r.jsx)(s.br,{}),'\n$System.Security.CheckRolesPermission("%Manager,%Operator","%DB_IRISSYS") => "READ,WRITE"']}),"\n",(0,r.jsxs)(s.p,{children:["If called as $System.Security.CheckRolesPermission(Roles,Resource,Privilege) it returns 1 or 0 depending on whether the specified privilege is held. For example,",(0,r.jsx)(s.br,{}),'\n$System.Security.CheckRolesPermission("%Manager","%Admin_Secure","USE") => 1',(0,r.jsx)(s.br,{}),"\nThe method will take the list of roles passed to this method, and for each role in the list will determine if any additional roles are granted by this role. If so, it also adds this role to the list. Once the entire set of roles is calculated, the list of resources and permissions which the list of roles contains is calculated. Finally, any PUBLIC resources are also added to the list of resources and permission. The resource name is then checked against this list to determine the return value for the method.",(0,r.jsx)(s.br,{}),'\nNote: If one of the roles being checked is %All, then the method always returns "READ,WRITE,USE" for the 2-argument form and 1 for the 3-argument form',(0,r.jsx)(s.br,{}),'\nIf the Role does not exist, or an error occurs, then the method will return "" for the 2-argument form and 0 for the 3-argument form.']}),"\n",(0,r.jsx)(s.h3,{id:"checkuserpermission",children:"CheckUserPermission"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckUserPermission(Username As %String, ResourceName As %String, Permissions As %String) As %RawString\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Determine if a specified privilege is held on a specified resource for a specific Username.",(0,r.jsx)(s.br,{}),"\nIf called as $System.Security.CheckUserPermission(Username,Resource)",(0,r.jsx)(s.br,{}),"\nit returns the privileges held on that resource as a comma-separated list. For example,",(0,r.jsx)(s.br,{}),'\n$System.Security.CheckUserPermission("Admin","%DB_IRISSYS") => "READ,WRITE"']}),"\n",(0,r.jsxs)(s.p,{children:["If called as $System.Security.CheckUserPermission(Username,Resource,Privilege) it returns 1 or 0 depending on whether the specified privilege is held. For example,",(0,r.jsx)(s.br,{}),'\n$System.Security.CheckUserPermission("Operator","%Admin_Secure","USE") => 0',(0,r.jsx)(s.br,{}),"\nThe method will take the Username passed to this method, and retrieve the list of roles the user is granted. For each role in this list, it will determine if any additional roles are granted by this role. If so, it also adds this role to the list. Once the entire set of roles is calculated, the list of resources and permissions which the list of roles contains is calculated. Finally, any PUBLIC resources are also added to the list of resources and permission. The resource name is then checked against this list to determine the return value for the method.",(0,r.jsx)(s.br,{}),'\nNote: If the Username holds the %All role, then the method always returns "READ,WRITE,USE" for the 2-argument form and 1 for the 3-argument form',(0,r.jsx)(s.br,{}),'\nIf the User does not exist, or an error occurs, then the method returns "" for the 2-argument form and 0 for the 3-argument form']}),"\n",(0,r.jsx)(s.h3,{id:"validatepassword",children:"ValidatePassword"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ValidatePassword(Password As %String, Username As %String = "User") As %Status\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Validate a password against system password policy.",(0,r.jsx)(s.br,{}),"\nPassword - Password to validate against the system password policy",(0,r.jsx)(s.br,{}),"\nUsername - (Optional) Username to use to validate against user defined password policy"]}),"\n",(0,r.jsx)(s.h3,{id:"login",children:"Login"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Login(Username As %String, Password As %String) As %Boolean\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Log in a user given a valid username and password.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nUsername - Name of the user to log in as",(0,r.jsx)(s.br,{}),"\nPassword - Password of user to log in (optional)",(0,r.jsx)(s.br,{}),"\nReturn Value:",(0,r.jsx)(s.br,{}),"\n0 - Failure",(0,r.jsx)(s.br,{}),"\n1 - Success, user logged in",(0,r.jsx)(s.br,{}),"\nIf the password is not passed as a parameter (1 argument form), then the user will be logged in if the calling process has Write permission on the resource that protects the IRISSYS database or the calling routine is stored in the system database."]}),"\n",(0,r.jsx)(s.p,{children:"When the password is passed in as the second parameter (2 argument form), the method requires that the user has the %Service_Login:USE privilege."}),"\n",(0,r.jsx)(s.h3,{id:"getglobalpermission",children:"GetGlobalPermission"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetGlobalPermission(Namespace As %String = "", Global As %String = "", Subscript As %String, Mount As %Boolean = 1) As %String\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Return the permissions the process has for a global.",(0,r.jsx)(s.br,{}),"\nThis method will follow the mapping of where the global and subscript are actually mapped to to find out the access to it.",(0,r.jsx)(s.br,{}),'\nIf the database where it maps to is read-only, then the method can only return "READ" or "".',(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nNamespace - Namespace where the global exists. The namespace specified may either be a real namespace, or an implied namespace in the format ^system^directory.",(0,r.jsx)(s.br,{}),'\nGlobal - Name of the global. If not specified or "", then the method returns the permissions for the default global database of the namespace.',(0,r.jsx)(s.br,{}),'\nSubscripts - Fully specified subscript including "()".',(0,r.jsx)(s.br,{}),"\nMount - Default = 1 - 1=If the database is not mounted, mount it before checking. Subsequent permission checks may be faster.",(0,r.jsx)(s.br,{}),"\n0 = Do not mount the database if it is not mounted.",(0,r.jsx)(s.br,{}),"\nReturn Values:",(0,r.jsx)(s.br,{}),'\nComma delimited list of permissions the process has on the global, or "" for no access/invalid parameters.',(0,r.jsx)(s.br,{}),"\ne.g. READ,WRITE",(0,r.jsx)(s.br,{}),'\nIn the case where an ECP database is not mounted, the return value may be "UNKNOWN"',(0,r.jsx)(s.br,{}),"\nExamples:",(0,r.jsx)(s.br,{}),'\nCheck the access on the global ^GLOBALNAME("Subscript1")',(0,r.jsx)(s.br,{}),'\nS x=$SYSTEM.Security.GetGlobalPermission("USER","GLOBALNAME","(""Subscript1"")")',(0,r.jsx)(s.br,{}),'\nCheck the access on the global ^ABC("Subscript1",2)',(0,r.jsx)(s.br,{}),'\nS x=$SYSTEM.Security.GetGlobalPermission("USER","GLOBALNAME","(""Subscript1"",2)")']}),"\n",(0,r.jsx)(s.h3,{id:"globalpermissioncheck",children:"GlobalPermissionCheck"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GlobalPermissionCheck(Permissions As %String, Namespace As %String = "", Global As %String = "", Subscript As %String, Mount As %Boolean = 1) As %Boolean\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Checks if the caller has the permissions requested on the specified global.",(0,r.jsx)(s.br,{}),"\nThis method follows the mappings for the namespace and determines if you have the permissions requested on the specified global.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),'\nPermissions - comma separated list of permissions. Can be any combination of "READ","R","WRITE", or "W".',(0,r.jsx)(s.br,{}),"\nNamespace - Namespace where the global exists. The namespace specified may either be a real namespace, or an implied namespace in the format ^system^directory.",(0,r.jsx)(s.br,{}),'\nGlobal - Name of the global. Subscripts - Fully specified subscript including "()".',(0,r.jsx)(s.br,{}),"\nMount - Default = 1 - 1=If the database is not mounted, mount it before checking. Subsequent permission checks may be faster.",(0,r.jsx)(s.br,{}),"\n0 = Do not mount the database if it is not mounted.",(0,r.jsx)(s.br,{}),"\nReturn Values:",(0,r.jsx)(s.br,{}),'\nComma delimited list of permissions the process has on the global, or "" for no access/invalid parameters.',(0,r.jsx)(s.br,{}),"\ne.g. READ,WRITE",(0,r.jsx)(s.br,{}),'\nIn the case where an ECP database is not mounted, and the mount flag is not specified, the return value may be "UNKNOWN"',(0,r.jsx)(s.br,{}),"\nExamples:",(0,r.jsx)(s.br,{}),'\nCheck for READ access on the global ^GLOBALNAME("Subscript1")',(0,r.jsx)(s.br,{}),'\nS x=$SYSTEM.Security.GlobalPermissionCheck("READ","USER","GLOBALNAME","(""Subscript1"")")',(0,r.jsx)(s.br,{}),'\nCheck READ and WRITE access on the global ^ABC("Subscript1",2)',(0,r.jsx)(s.br,{}),'\nS x=$SYSTEM.Security.GlobalPermissionCheck("READ,WRITE","USER","GLOBALNAME","(""Subscript1"",2)")']}),"\n",(0,r.jsx)(s.h3,{id:"getroutinepermission",children:"GetRoutinePermission"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetRoutinePermission(Namespace As %String = "", Routine As %String = "", Mount As %Boolean = 1) As %String\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Return the permissions the process has for a routine.",(0,r.jsx)(s.br,{}),"\nThis method will follow the mapping of where the routine is mapped to to find out the access to it.",(0,r.jsx)(s.br,{}),'\nIf the database where it maps to is read-only, then the method can only return "READ" or "".',(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nNamespace - Namespace where the routine exists. The namespace specified may either be a real namespace, or an implied namespace in the format ^system^directory.",(0,r.jsx)(s.br,{}),'\nRoutine - Name of the routine. If not specified or "", then the method returns the permissions for the default routine database of the namespace.',(0,r.jsx)(s.br,{}),"\nMount - Default = 1 - 1=If the database is not mounted, mount it before checking. Subsequent permission checks may be faster.",(0,r.jsx)(s.br,{}),"\n0 = Do not mount the database if it is not mounted.",(0,r.jsx)(s.br,{}),"\nReturn Values:",(0,r.jsx)(s.br,{}),'\nComma delimited list of permissions the process has on the routine, or "" for no access/invalid parameters.',(0,r.jsx)(s.br,{}),"\ne.g. READ,WRITE",(0,r.jsx)(s.br,{}),'\nIn the case where an ECP database is not mounted, and the mount flag is not specified, the return value may be "UNKNOWN"',(0,r.jsx)(s.br,{}),"\nExamples:",(0,r.jsx)(s.br,{}),"\nCheck the access on the routine ^ROUTINENAME",(0,r.jsx)(s.br,{}),'\nS x=$SYSTEM.Security.GetRoutinePermission("USER","ROUTINENAME")',(0,r.jsx)(s.br,{}),"\nCheck the access for the default routine database for the namespace",(0,r.jsx)(s.br,{}),'\nS x=$SYSTEM.Security.GetRoutinePermission("USER")']}),"\n",(0,r.jsx)(s.h3,{id:"routinepermissioncheck",children:"RoutinePermissionCheck"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod RoutinePermissionCheck(Permissions As %String, Namespace As %String = "", Routine As %String = "", Mount As %Boolean = 1) As %Boolean\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Checks if the caller has the permissions requested on the specified routine.",(0,r.jsx)(s.br,{}),"\nThis method follows the mappings for the namespace and determines if you have the permissions requested on the specified routine.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nNamespace - Namespace where the routine exists. The namespace specified may either be a real namespace, or an implied namespace in the format ^system^directory.",(0,r.jsx)(s.br,{}),'\nRoutine - Name of the routine. If not specified or "", then the method returns the permissions for the default routine database of the namespace.',(0,r.jsx)(s.br,{}),"\nMount - Default = 1 - 1=If the database is not mounted, mount it before checking. Subsequent permission checks may be faster.",(0,r.jsx)(s.br,{}),"\n0 = Do not mount the database if it is not mounted.",(0,r.jsx)(s.br,{}),"\nReturn Values:",(0,r.jsx)(s.br,{}),'\nComma delimited list of permissions the process has on the routine, or "" for no access/invalid parameters.',(0,r.jsx)(s.br,{}),"\ne.g. READ,WRITE",(0,r.jsx)(s.br,{}),'\nIn the case where an ECP database is not mounted, the return value may be "UNKNOWN"',(0,r.jsx)(s.br,{}),"\nExamples:",(0,r.jsx)(s.br,{}),"\nCheck the access on the routine ^ROUTINENAME",(0,r.jsx)(s.br,{}),'\nS x=$SYSTEM.Security.RoutinePermissionCheck("USER","ROUTINENAME")',(0,r.jsx)(s.br,{}),"\nCheck the access for the default routine database for the namespace",(0,r.jsx)(s.br,{}),'\nS x=$SYSTEM.Security.RoutinePermissionCheck("USER")']}),"\n",(0,r.jsx)(s.h3,{id:"getrecursedroleset",children:"GetRecursedRoleSet"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetRecursedRoleSet(Roles As %String, ByRef RecursedRoles As %String) As %Status\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Given a set of roles, recurse through them for the entire set of roles which would be granted.",(0,r.jsx)(s.br,{}),"\nWhen a role is granted to a process, the role itself may grant another role. This method takes a comma delimited set of roles as input, and returns the comma delimited entire set of roles which would be granted to the process.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nRoles - Comma delimited list of roles to recurse.",(0,r.jsx)(s.br,{}),"\nReturn value:",(0,r.jsx)(s.br,{}),"\nRecursedRoles - Comma delimited list of recursed roles."]}),"\n",(0,r.jsx)(s.h3,{id:"getuserrecursedroleset",children:"GetUserRecursedRoleSet"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetUserRecursedRoleSet(Username As %String, ByRef RecursedRoles As %String) As %Status\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Given a Username, return the entire set of roles which would be granted if they logged in.",(0,r.jsx)(s.br,{}),"\nWhen a role is granted to a process, the role itself may grant another role. This method takes a username as input, and returns the comma delimited entire set of roles which would be granted to the user if they logged in.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nUsername - Username to calculate recursed role set for.",(0,r.jsx)(s.br,{}),"\nReturn value:",(0,r.jsx)(s.br,{}),"\nRecursedRoles - Comma delimited list of recursed roles."]}),"\n",(0,r.jsx)(s.h3,{id:"resourceexists",children:"ResourceExists"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ResourceExists(Resource As %String) As %Boolean [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Returns 0/1 if the resource exists"}),"\n",(0,r.jsx)(s.h3,{id:"cspescalatelogin",children:"CSPEscalateLogin"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CSPEscalateLogin(RoleName As %String, Password As %String) As %Status [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Escalate the user's CSP session to the given escalation role. This role must be one of the current user's configured EscalationRoles. This method should not be used directly, instead Applications should call:",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.code,{children:"Do %session.EscalateLogin(Role,Password)"})]}),"\n",(0,r.jsx)(s.h3,{id:"escalatelogin",children:"EscalateLogin"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod EscalateLogin(RoleName As %String, Password As %String) As %Status\n"})}),"\n",(0,r.jsx)(s.p,{children:"Escalate the user's login to the given escalation role. This role must be one of the current user's configured EscalationRoles."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"RoleName"}),"\n- specifies the escalation role to assume"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Password"}),"\n- the user's password\nBoth parameters are optional; if absent the user will be prompted for their values. This method must be called from a foreground process."]}),"\n"]})]})}function c(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>o});var r=t(96540);const n={},i=r.createContext(n);function a(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);