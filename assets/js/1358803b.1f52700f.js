"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[92747],{1976:(e,t,i)=>{i.r(t),i.d(t,{contentTitle:()=>a,default:()=>c,frontMatter:()=>n,toc:()=>l});var r=i(74848),s=i(28453);const n={pagination_prev:null,pagination_next:null},a="%Library.File",l=[{value:"Parameters",id:"parameters",level:2},{value:"SQLPUBLICSECURITY",id:"sqlpublicsecurity",level:3},{value:"Properties",id:"properties",level:2},{value:"Name",id:"name",level:3},{value:"CanonicalName",id:"canonicalname",level:3},{value:"DateCreated",id:"datecreated",level:3},{value:"DateModified",id:"datemodified",level:3},{value:"IsOpen",id:"isopen",level:3},{value:"openmode",id:"openmode",level:3},{value:"Methods",id:"methods",level:2},{value:"CanonicalNameGet",id:"canonicalnameget",level:3},{value:"%Load",id:"load",level:3},{value:"%DeleteData",id:"deletedata",level:3},{value:"%SaveData",id:"savedata",level:3},{value:"Exists",id:"exists",level:3},{value:"DirectoryExists",id:"directoryexists",level:3},{value:"NormalizeDirectory",id:"normalizedirectory",level:3},{value:"NormalizeFilename",id:"normalizefilename",level:3},{value:"CanonicalFilename",id:"canonicalfilename",level:3},{value:"ManagerDirectory",id:"managerdirectory",level:3},{value:"Delete",id:"delete",level:3},{value:"ReadOnly",id:"readonly",level:3},{value:"ComplexDelete",id:"complexdelete",level:3},{value:"ComputeFullDBDir",id:"computefulldbdir",level:3},{value:"CreateDirectory",id:"createdirectory",level:3},{value:"CreateNewDir",id:"createnewdir",level:3},{value:"CreateDirectoryChain",id:"createdirectorychain",level:3},{value:"SubDirectoryName",id:"subdirectoryname",level:3},{value:"ParentDirectoryName",id:"parentdirectoryname",level:3},{value:"Construct",id:"construct",level:3},{value:"Deconstruct",id:"deconstruct",level:3},{value:"GetFilename",id:"getfilename",level:3},{value:"GetDirectory",id:"getdirectory",level:3},{value:"GetDirectoryLength",id:"getdirectorylength",level:3},{value:"GetDirectoryPiece",id:"getdirectorypiece",level:3},{value:"GetDirectorySpace",id:"getdirectoryspace",level:3},{value:"ParseDirectoryExecute",id:"parsedirectoryexecute",level:3},{value:"ParseDirectoryClose",id:"parsedirectoryclose",level:3},{value:"ParseDirectoryFetch",id:"parsedirectoryfetch",level:3},{value:"RemoveDirectory",id:"removedirectory",level:3},{value:"RemoveDirectoryTree",id:"removedirectorytree",level:3},{value:"Rename",id:"rename",level:3},{value:"CopyFile",id:"copyfile",level:3},{value:"CopyDir",id:"copydir",level:3},{value:"GetFileSize",id:"getfilesize",level:3},{value:"GetFileDateCreated",id:"getfiledatecreated",level:3},{value:"GetFileDateModified",id:"getfiledatemodified",level:3},{value:"GetFileSHA256Hash",id:"getfilesha256hash",level:3},{value:"Writeable",id:"writeable",level:3},{value:"Attributes",id:"attributes",level:3},{value:"SetAttributes",id:"setattributes",level:3},{value:"GetOwnerGroup",id:"getownergroup",level:3},{value:"SetOwnerGroup",id:"setownergroup",level:3},{value:"SetWriteable",id:"setwriteable",level:3},{value:"SetReadOnly",id:"setreadonly",level:3},{value:"Truncate",id:"truncate",level:3},{value:"%OnNew",id:"onnew",level:3},{value:"%OnClose",id:"onclose",level:3},{value:"Open",id:"open",level:3},{value:"Close",id:"close",level:3},{value:"Rewind",id:"rewind",level:3},{value:"Clear",id:"clear",level:3},{value:"Read",id:"read",level:3},{value:"Write",id:"write",level:3},{value:"WriteLine",id:"writeline",level:3},{value:"IsOpenSet",id:"isopenset",level:3},{value:"DateCreatedGet",id:"datecreatedget",level:3},{value:"DateModifiedGet",id:"datemodifiedget",level:3},{value:"SizeGet",id:"sizeget",level:3},{value:"DriveListExecute",id:"drivelistexecute",level:3},{value:"DriveListClose",id:"drivelistclose",level:3},{value:"DriveListFetch",id:"drivelistfetch",level:3},{value:"FileSetExecute",id:"filesetexecute",level:3},{value:"FileSetClose",id:"filesetclose",level:3},{value:"FileSetFetch",id:"filesetfetch",level:3},{value:"LastModifiedGet",id:"lastmodifiedget",level:3},{value:"SetFileDateModified",id:"setfiledatemodified",level:3},{value:"CopyFromAndSave",id:"copyfromandsave",level:3},{value:"TempFilename",id:"tempfilename",level:3},{value:"SetUMask",id:"setumask",level:3},{value:"Compare",id:"compare",level:3},{value:"SHA1Hash",id:"sha1hash",level:3},{value:"NormalizeFilenameWithSpaces",id:"normalizefilenamewithspaces",level:3}];function o(e){const t={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"libraryfile",children:"%Library.File"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Library.File Extends %AbstractStream [ System = 2 ]\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"For information on this class"}),", see ",(0,r.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?FIND=CLASSES+%25Library.File",children:"Using %Library.File"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"The %File class represents a disk file. It contains a number of class methods that provide a number of file system services."}),"\n",(0,r.jsxs)(t.p,{children:["For example, ",(0,r.jsx)(t.code,{children:'If ##class(%File).Exists("file.txt") Write "It exists",!'})]}),"\n",(0,r.jsx)(t.p,{children:"You can also create an instance of a %File object that represents a particular file. %File makes a number of file attributes accessible as properties as well as providing a %AbstractStream interface on the file."}),"\n",(0,r.jsxs)(t.p,{children:["For example, ",(0,r.jsx)(t.code,{children:'Set file=##class(%File).%New("file.txt") Write file.Size Do file.Open("WSN") Do file.WriteLine("This is a line of text")'})," Note that this class is a fairly simple wrapper around the ObjectScript file commands. For simply reading/writing to a file it is suggested that you look at the %Stream.FileCharacter and %Stream.FileBinary classes. These open the file using the correct mode automatically in order to read or write to the file and so are simpler to use."]}),"\n",(0,r.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(t.h3,{id:"sqlpublicsecurity",children:"SQLPUBLICSECURITY"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter SQLPUBLICSECURITY = "{""File_DriveList"":""Requires:%Development:USE"",""File_FileSet"":""Requires:%Development:USE"",""File_ParseDirectory"":""E""}";\n'})}),"\n",(0,r.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(t.h3,{id:"name",children:"Name"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property Name As %String(MAXLEN = 5000);\n"})}),"\n",(0,r.jsx)(t.p,{children:"The name of this file."}),"\n",(0,r.jsx)(t.h3,{id:"canonicalname",children:"CanonicalName"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property CanonicalName As %String(MAXLEN = 5000) [ Calculated ];\n"})}),"\n",(0,r.jsx)(t.p,{children:'Read only property that returns the canonical filename if the file is open and "" if the file is not open.'}),"\n",(0,r.jsx)(t.h3,{id:"datecreated",children:"DateCreated"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property DateCreated As %Date [ Calculated ];\n"})}),"\n",(0,r.jsx)(t.p,{children:'The creation date for this file (rounded to the millisecond). Only Windows maintains the created date; other operating systems return the date of the last file "status" change.'}),"\n",(0,r.jsx)(t.h3,{id:"datemodified",children:"DateModified"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property DateModified As %Date [ Calculated ];\n"})}),"\n",(0,r.jsx)(t.p,{children:"The last modified date for this file (rounded to the millisecond)."}),"\n",(0,r.jsx)(t.h3,{id:"isopen",children:"IsOpen"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property IsOpen As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,r.jsx)(t.p,{children:"True (1) if this file is currently open, false (0) otherwise."}),"\n",(0,r.jsx)(t.h3,{id:"openmode",children:"openmode"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property openmode As %String(MAXLEN = 5000) [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(t.h3,{id:"canonicalnameget",children:"CanonicalNameGet"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method CanonicalNameGet() As %String\n"})}),"\n",(0,r.jsx)(t.h3,{id:"load",children:"%Load"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Load(sid As %String) As %Status [ Private, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"deletedata",children:"%DeleteData"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %DeleteData(soid As %String, concurrency As %Integer) As %Status [ Private, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"savedata",children:"%SaveData"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SaveData(ByRef sid As %String) As %Status [ Private, ProcedureBlock = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"exists",children:"Exists"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Exists(filename As %String, Output return As %Integer) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Returns true (1) if filename exists. Pass return by reference to obtain the low level return value in case of errors which is the negative value of the operating system return code."}),"\n",(0,r.jsx)(t.h3,{id:"directoryexists",children:"DirectoryExists"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DirectoryExists(filename As %String) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Tests if filename is a directory. returns 1 if it is a directory, otherwise, returns 0."}),"\n",(0,r.jsx)(t.h3,{id:"normalizedirectory",children:"NormalizeDirectory"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod NormalizeDirectory(directory As %String, absolutedirectory As %String = "", addnull As %Boolean) As %String\n'})}),"\n",(0,r.jsx)(t.p,{children:"Returns a normalized absolute directory from the directory that is passed in including any trailing directory delimiter."}),"\n",(0,r.jsx)(t.p,{children:'If the directory is a relative path (rather than an absolute path) then the absolutedirectory parameter determines what we normalize the directory compoent relative to. If absolutedirectory is "" or not passed in then we normalize relative to the current default directory otherwise we will normalize relative to the passed in absolutedirectory.'}),"\n",(0,r.jsx)(t.p,{children:"addnull use is deprecated"}),"\n",(0,r.jsx)(t.h3,{id:"normalizefilename",children:"NormalizeFilename"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod NormalizeFilename(filename As %String, directory As %String = "") As %String\n'})}),"\n",(0,r.jsx)(t.p,{children:"Returns the normalized form of the filename. If you pass directory then it will normalize this filename relative to the provided directory, if no directory is supplied then it is relative to the current default directory. If the directory does not exist then this method will return the empty string. Otherwise, this method returns the normalized full path name of the specified file."}),"\n",(0,r.jsx)(t.h3,{id:"canonicalfilename",children:"CanonicalFilename"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CanonicalFilename(filename As %String) As %String\n"})}),"\n",(0,r.jsx)(t.p,{children:'Returns the canonical form of the filename. If the file can not be opened then it will return ""'}),"\n",(0,r.jsx)(t.h3,{id:"managerdirectory",children:"ManagerDirectory"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ManagerDirectory() As %String [ CodeMode = expression ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Returns the path of the manager directory."}),"\n",(0,r.jsx)(t.h3,{id:"delete",children:"Delete"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Delete(filename As %String, Output return As %Integer) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Deletes the file filename. Returns true if it succeeds and false otherwise. Pass return by reference to obtain the low level return value in case of errors which is the negative value of the operating system return code."}),"\n",(0,r.jsx)(t.h3,{id:"readonly",children:"ReadOnly"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ReadOnly(filename As %String) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Return true if the file is read only and false if it is writable"}),"\n",(0,r.jsx)(t.h3,{id:"complexdelete",children:"ComplexDelete"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ComplexDelete(filename As %String, Output return As %Integer) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Handle delete of cases where filename contains a wildcard. Note: this does not delete subdirectories in the given directory; only files are removed. Pass return by reference to obtain the low level return value in case of errors which is the negative value of the operating system return code."}),"\n",(0,r.jsx)(t.h3,{id:"computefulldbdir",children:"ComputeFullDBDir"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ComputeFullDBDir(filename As %String) As %String\n"})}),"\n",(0,r.jsx)(t.p,{children:"Return the canonical form of the directory name filename. When filename is a non-full path directory, it will prefix the filename with Manager Path instead of current directory."}),"\n",(0,r.jsx)(t.h3,{id:"createdirectory",children:"CreateDirectory"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CreateDirectory(name As %String, Output return As %Integer) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Creates a directory with name name. Returns true if it succeeds and false otherwise. Pass return by reference to obtain the low level return value in case of errors which is the negative value of the operating system return code."}),"\n",(0,r.jsx)(t.h3,{id:"createnewdir",children:"CreateNewDir"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CreateNewDir(directory As %String, name As %String, Output return As %Integer) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Given a directory name and the name of a new directory create this directory inside the given directory. Return true if it succeeds and false otherwise. Pass return by reference to obtain the low level return value in case of errors which is the negative value of the operating system return code."}),"\n",(0,r.jsx)(t.h3,{id:"createdirectorychain",children:"CreateDirectoryChain"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CreateDirectoryChain(name As %String, Output return As %Integer) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Create this directory and all the parent directories if they do not exist. This differs from CreateDirectory as that method only creates one new directory where as this will create the entire chain of directories. Returns true if it succeeds and false otherwise. Pass return by reference to obtain the low level return value in case of errors which is the negative value of the operating system return code."}),"\n",(0,r.jsx)(t.h3,{id:"subdirectoryname",children:"SubDirectoryName"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SubDirectoryName(directory As %String, name As %String, normalized As %Boolean = 0) As %String\n"})}),"\n",(0,r.jsx)(t.p,{children:"Given a directory name and the name of a sub directory create the name for the subdirectory inside the given directory. Return the new directory name. This is useful as the parsing of filenames on Unix/Windows is different."}),"\n",(0,r.jsx)(t.h3,{id:"parentdirectoryname",children:"ParentDirectoryName"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ParentDirectoryName(directory As %String) As %String\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Given a directory name, return the name of its parent directory.",(0,r.jsx)(t.br,{}),'\nIf the directory is already the root (e.g., "/" on Unix, "c:\\" on Windows), return the root.']}),"\n",(0,r.jsx)(t.h3,{id:"construct",children:"Construct"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Construct(dirs... As %String) As %String\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Pass in an array of paths you want to turn into a filename for the server platform, for example: ",(0,r.jsx)(t.code,{children:'Set dirs($i(dirs))=$system.Util.DataDirectory() Set dirs($i(dirs))="httpd" Set dirs($i(dirs))="logs" Set filename=##class(%File).Construct(dirs...)'})," If you want the name returned to be a directory terminated with a '/' or '\\' then pass in a null dirs entry as the last piece. You can also call Deconstruct with the returned filename to turn this back into an array like dirs. If you pass in a blank array it will return the default directory."]}),"\n",(0,r.jsx)(t.h3,{id:"deconstruct",children:"Deconstruct"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Deconstruct(filename As %String, ByRef dirs As %String)\n"})}),"\n",(0,r.jsx)(t.p,{children:"Pass in a full valid filename for the server platform and it will decompose it into the dirs array with each integer subscript being a part of the path, this array can then be passed into Construct to reconstruct the filename again. So on a Unix server you need to pass this a valid Unix filename and on a Windows server this should be passed a Windows filename."}),"\n",(0,r.jsx)(t.h3,{id:"getfilename",children:"GetFilename"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFilename(name As %String) As %String\n"})}),"\n",(0,r.jsx)(t.p,{children:"Given a full directory and filename this will return just the filename portion of this name. This is useful as the parsing of filenames on Unix/Windows is different."}),"\n",(0,r.jsx)(t.h3,{id:"getdirectory",children:"GetDirectory"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetDirectory(name As %String, keepterm As %Boolean = 0) As %String\n"})}),"\n",(0,r.jsx)(t.p,{children:"Given a full directory and filename this will return just the directory portion of this name. This is useful as the parsing of filenames on Unix/Windows is different."}),"\n",(0,r.jsx)(t.h3,{id:"getdirectorylength",children:"GetDirectoryLength"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetDirectoryLength(name As %String) As %Integer\n"})}),"\n",(0,r.jsx)(t.p,{children:"Return the number of pieces in this directory name"}),"\n",(0,r.jsx)(t.h3,{id:"getdirectorypiece",children:"GetDirectoryPiece"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetDirectoryPiece(name As %String, piece As %Integer, ByRef fullpath As %String, ByRef IsDrive As %Boolean) As %String\n"})}),"\n",(0,r.jsx)(t.p,{children:"Return the piece of a directory name"}),"\n",(0,r.jsx)(t.h3,{id:"getdirectoryspace",children:"GetDirectorySpace"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetDirectorySpace(Name As %String, ByRef FreeSpace As %String, ByRef TotalSpace As %String, Flag As %Integer = 1) As %Status\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Return the amount of total space and free space in either Bytes,MB,GB on a drive or directory",(0,r.jsx)(t.br,{}),"\nName = Valid Drive or directory specification",(0,r.jsx)(t.br,{}),"\nFlag = 0 - Return bytes",(0,r.jsx)(t.br,{}),"\nFlag = 1 - Return MB (Default)",(0,r.jsx)(t.br,{}),"\nFlag = 2 - Return GB"]}),"\n",(0,r.jsxs)(t.p,{children:["MB and GB returned are rounded to 2 decimal places.",(0,r.jsx)(t.br,{}),"\nAny error status returned is O/S level error. Note that on Windows only drives have a measurement for free space and directories can not so the FreeSpace is only returned for drives."]}),"\n",(0,r.jsx)(t.h3,{id:"parsedirectoryexecute",children:"ParseDirectoryExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ParseDirectoryExecute(ByRef QHandle As %Binary, directory As %String) As %Status\n"})}),"\n",(0,r.jsx)(t.p,{children:"Given a directory name return it pulled apart into individual subdirectories starting at the root node and working down to the last directory name"}),"\n",(0,r.jsx)(t.h3,{id:"parsedirectoryclose",children:"ParseDirectoryClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ParseDirectoryClose(ByRef QHandle As %Binary) As %Status\n"})}),"\n",(0,r.jsx)(t.h3,{id:"parsedirectoryfetch",children:"ParseDirectoryFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ParseDirectoryFetch(ByRef QHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status\n"})}),"\n",(0,r.jsx)(t.h3,{id:"removedirectory",children:"RemoveDirectory"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod RemoveDirectory(name As %String, Output return As %Integer) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Removes directory name. Returns true if it succeeds and false otherwise. Pass return by reference to obtain the low level return value in case of errors which is the negative value of the operating system return code."}),"\n",(0,r.jsx)(t.h3,{id:"removedirectorytree",children:"RemoveDirectoryTree"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod RemoveDirectoryTree(pTarget As %String) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Recursively remove directory pTarget. Returns true if it succeeds and false otherwise."}),"\n",(0,r.jsx)(t.h3,{id:"rename",children:"Rename"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Rename(oldname As %String, newname As %String, Output return As %Integer) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Rename file oldname to newname. Returns true if it succeeds and false otherwise. The rename subfunction is only intended for changing the name of a regular file, not directories or other types of files. In particular, renaming a file across filesystems results in copying and deleting the original file, but this will not work for a directory. Renaming a directory within a file system does work. Pass return by reference to obtain the low level return value in case of errors which is the negative value of the operating system return code."}),"\n",(0,r.jsx)(t.h3,{id:"copyfile",children:"CopyFile"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CopyFile(from As %String, to As %String, pDeleteBeforeCopy As %Boolean = 0, Output return As %Integer) As %Boolean\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Copy a host file from to host file to.",(0,r.jsx)(t.br,{}),"\nParameter pDeleteBeforeCopy may be used to specify that if the target file already exists then it should be deleted before being overwritten with the source file. The default is 0 or false.",(0,r.jsx)(t.br,{}),"\nThis method returns true if it succeeds and false otherwise. Pass return by reference to obtain the low level return value in case of errors which is the negative value of the operating system return code or of an IRIS simulated operating system return code.",(0,r.jsx)(t.br,{}),"\nAlso see $SYSTEM.Process.OSError()."]}),"\n",(0,r.jsx)(t.h3,{id:"copydir",children:"CopyDir"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CopyDir(pSource As %String, pTarget As %String, pOverlay As %Boolean = 0, ByRef pCreated = 0, pDeleteBeforeCopy As %Boolean = 0) As %Boolean\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Copy a host directory from pSource to pTarget.",(0,r.jsx)(t.br,{}),"\nParameter pOverlay Parameter pDeleteBeforeCopy may be used to specify that any file that already exists in the target directory should be deleted before being overwritten with the source file. The default is 0 or false.",(0,r.jsx)(t.br,{}),"\nThis method returns true if it succeeds and false otherwise.",(0,r.jsx)(t.br,{}),"\nNote: (1) If the target directory exists and pOverlay is false (default), then the operation fails. Also, if any of the target files exist and pDeleteBeforeCopy is false (default), then the operation may fail usually due to operating system characteristics. (2) The total number of files or directories created/copied during the operation can be gotten by passing a byref value in pCreated."]}),"\n",(0,r.jsx)(t.h3,{id:"getfilesize",children:"GetFileSize"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFileSize(filename As %String) As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Return the size of file filename in bytes."}),"\n",(0,r.jsx)(t.h3,{id:"getfiledatecreated",children:"GetFileDateCreated"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFileDateCreated(filename As %String, utc As %Boolean = 0) As %String [ CodeMode = expression ]\n"})}),"\n",(0,r.jsx)(t.p,{children:'Return the date created of file filename in $H format, if the operating system supports it. Windows is the only current platform that tracks the created date. Other systems return the date of the last file "status" change. By default this is local time. If you pass utc as true it returns it in UTC time. The value is rounded to millisecond precision.'}),"\n",(0,r.jsx)(t.h3,{id:"getfiledatemodified",children:"GetFileDateModified"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFileDateModified(filename As %String, utc As %Boolean = 0) As %String [ CodeMode = expression ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Return the date last modified of file filename in $H format. By default this is local time. If you pass utc as true it returns it in UTC time. The value is rounded to millisecond precision."}),"\n",(0,r.jsx)(t.h3,{id:"getfilesha256hash",children:"GetFileSHA256Hash"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFileSHA256Hash(filename As %String, ByRef sc = 0) As %String\n"})}),"\n",(0,r.jsx)(t.p,{children:"Return the SHA 256 hash of file filename."}),"\n",(0,r.jsx)(t.h3,{id:"writeable",children:"Writeable"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Writeable(filename As %String) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Return true if the file/directory is writable and false if it is not"}),"\n",(0,r.jsx)(t.h3,{id:"attributes",children:"Attributes"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Attributes(filename As %String) As %String [ ClientName = FileAttributes, CodeMode = expression ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Return the attributes of the file. The format of the returned value depends on the underlying operating system."}),"\n",(0,r.jsx)(t.p,{children:"Microsoft Windows\xae returns a value as a combination of bits whose meaning is:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"1: 0x00001 - Read-only"}),"\n",(0,r.jsx)(t.li,{children:"2: 0x00002 - Hidden"}),"\n",(0,r.jsx)(t.li,{children:"4: 0x00004 - System"}),"\n",(0,r.jsx)(t.li,{children:"8: 0x00008 - Unused"}),"\n",(0,r.jsx)(t.li,{children:"16: 0x00010 - Directory"}),"\n",(0,r.jsx)(t.li,{children:"32: 0x00020 - Archive"}),"\n",(0,r.jsx)(t.li,{children:"64: 0x00040 - Device"}),"\n",(0,r.jsx)(t.li,{children:"128: 0x00080 - Normal"}),"\n",(0,r.jsx)(t.li,{children:"256: 0x00100 - Temporary"}),"\n",(0,r.jsx)(t.li,{children:"512: 0x00200- Sparse File"}),"\n",(0,r.jsx)(t.li,{children:"1024: 0x00400 - Reparse Point"}),"\n",(0,r.jsx)(t.li,{children:"2048: 0x00800 - Compressed"}),"\n",(0,r.jsx)(t.li,{children:"4096: 0x01000 - Offline"}),"\n",(0,r.jsx)(t.li,{children:"8192: 0x02000 - Content Not Indexed"}),"\n",(0,r.jsx)(t.li,{children:"16384: 0x04000 - Encrypted"}),"\n",(0,r.jsx)(t.li,{children:"32768: 0x08000 - Unused"}),"\n",(0,r.jsx)(t.li,{children:"65536: 0x10000 - Virtual"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"In UNIX\xae, the returned value represents the mode map:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"1: 0x0001 - execute permission for others"}),"\n",(0,r.jsx)(t.li,{children:"2: 0x0002 - write permission for others"}),"\n",(0,r.jsx)(t.li,{children:"4: 0x0004 - read permission for others"}),"\n",(0,r.jsx)(t.li,{children:"7: 0x0007 - mask for others permissions"}),"\n",(0,r.jsx)(t.li,{children:"8: 0x0008 - execute permission for group"}),"\n",(0,r.jsx)(t.li,{children:"16: 0x0010 - write permission for group"}),"\n",(0,r.jsx)(t.li,{children:"32: 0x0020 - read permission for group"}),"\n",(0,r.jsx)(t.li,{children:"56: 0x0038 - mask for group permissions"}),"\n",(0,r.jsx)(t.li,{children:"64: 0x0040 - execute permission for owner"}),"\n",(0,r.jsx)(t.li,{children:"128: 0x0080 - write permission for owner"}),"\n",(0,r.jsx)(t.li,{children:"256: 0x0100 - read permission for owner"}),"\n",(0,r.jsx)(t.li,{children:"448: 0x01C0 - mask for file owner permissions"}),"\n",(0,r.jsx)(t.li,{children:"512: 0x0200 - sticky bit"}),"\n",(0,r.jsx)(t.li,{children:"1024: 0x0400 - set groupid"}),"\n",(0,r.jsx)(t.li,{children:"2048: 0x0800 - set userid"}),"\n",(0,r.jsx)(t.li,{children:"4096: 0x1000 - fifo"}),"\n",(0,r.jsx)(t.li,{children:"8192: 0x2000 - character device"}),"\n",(0,r.jsx)(t.li,{children:"16384: 0x4000 - directory"}),"\n",(0,r.jsx)(t.li,{children:"24576: 0x6000 - block device"}),"\n",(0,r.jsx)(t.li,{children:"32768: 0x8000 - regular file"}),"\n",(0,r.jsx)(t.li,{children:"40960: 0xA000 - symbolic link"}),"\n",(0,r.jsx)(t.li,{children:"49152: 0xC000 - socket"}),"\n",(0,r.jsx)(t.li,{children:"61440: 0xF000 - mask for file type"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Note: Individual Operating System vendor differences may exist. The relevant man/help pages or other associated documentation should be consulted for a definitive description of the file attributes on a given system."}),"\n",(0,r.jsx)(t.h3,{id:"setattributes",children:"SetAttributes"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetAttributes(filename As %String, attributes As %String, Output return As %Integer) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Set the OS specific attributes of the file. See the Attribute method in this class for file attribute values. Pass return by reference to obtain the low level return value in case of errors which is the negative value of the operating system return code."}),"\n",(0,r.jsx)(t.h3,{id:"getownergroup",children:"GetOwnerGroup"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetOwnerGroup(File As %String, ByRef OwnerGroup As %String) As %Status\n"})}),"\n",(0,r.jsx)(t.p,{children:"Return the Owner and Group of a file or directory in the format Owner:Group."}),"\n",(0,r.jsx)(t.h3,{id:"setownergroup",children:"SetOwnerGroup"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetOwnerGroup(filename, OwnerGroup) As %Status\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Set the Owner and Group of a file or directory.",(0,r.jsx)(t.br,{}),'\nThis uses the unix "chown" command to perform the operation, and is valid only on Unix platforms.']}),"\n",(0,r.jsx)(t.h3,{id:"setwriteable",children:"SetWriteable"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetWriteable(filename As %String, writeonly As %Boolean = 1, Output return As %Integer) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Make this file/directory writable (if we can). The writeonly defaults to true in which case this makes the file write only, if you just want to add writable to the existing permissions without modifying the other permissions pass writeonly=0. The writeonly has no effect on Windows so you do not need to pass this argument on this platform. Pass return by reference to obtain the low level return value in case of errors which is the negative value of the operating system return code."}),"\n",(0,r.jsx)(t.h3,{id:"setreadonly",children:"SetReadOnly"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetReadOnly(filename As %String, leaveexisting As %Boolean = 0, Output return As %Integer) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Make this file/directory read only (if we can). If leaveexisting is true then it will add read permissions to the file/directory without changing the existing permissions, by default it will remove all other permissions other than read only flags. The leaveexisting has no effect on Windows so you do not need to pass this argument on this platform. Pass return by reference to obtain the low level return value in case of errors which is the negative value of the operating system return code."}),"\n",(0,r.jsx)(t.h3,{id:"truncate",children:"Truncate"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Truncate(filename As %String, Output return As %Integer) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Truncate an existing file or create a new empty file. Pass return by reference to obtain the low level return value in case of errors which is the negative value of the operating system return code."}),"\n",(0,r.jsx)(t.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'Method %OnNew(initval As %String = "") As %Status [ Private ]\n'})}),"\n",(0,r.jsx)(t.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status [ Private ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"open",children:"Open"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'Method Open(mode As %String = "", timeout As %Integer = 0) As %Status\n'})}),"\n",(0,r.jsx)(t.p,{children:"Open the current file with mode mode."}),"\n",(0,r.jsx)(t.p,{children:"mode is a string containing one or more file modes including:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:(0,r.jsx)(t.strong,{children:"R"})}),(0,r.jsx)(t.th,{children:"Read"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"W"})}),(0,r.jsx)(t.td,{children:"Write"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"S"})}),(0,r.jsx)(t.td,{children:"Stream mode"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"N"})}),(0,r.jsx)(t.td,{children:"Create a new file (overwrite existing file)"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"Note that if the mode contains ':' characters this is a delimiter. For example if the mode=\"RN:/SHARED\" then it will open the file with the equivalent of the COS command 'Open name:(\"RN\":/SHARED):0'. The first piece before the ':' is quoted and the subsequent pieces are not."}),"\n",(0,r.jsxs)(t.p,{children:["A complete discussion of the available options for mode can be found in the online documentation in the book, ",(0,r.jsx)(t.strong,{children:"I/O Devices Guide"}),", specifically the chapter on Sequential File I/O."]}),"\n",(0,r.jsx)(t.h3,{id:"close",children:"Close"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method Close()\n"})}),"\n",(0,r.jsx)(t.p,{children:"Close the current file."}),"\n",(0,r.jsx)(t.h3,{id:"rewind",children:"Rewind"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method Rewind() As %Status\n"})}),"\n",(0,r.jsx)(t.p,{children:"Moves the current location to the beginning of the stream."}),"\n",(0,r.jsx)(t.h3,{id:"clear",children:"Clear"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method Clear() As %Status\n"})}),"\n",(0,r.jsx)(t.h3,{id:"read",children:"Read"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method Read(ByRef len As %Integer = 32000, ByRef sc As %Status) As %RawString\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Read up to len characters from this ",(0,r.jsx)(t.strong,{children:"File"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"write",children:"Write"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'Method Write(data As %RawString = "") As %Status\n'})}),"\n",(0,r.jsx)(t.p,{children:"Write data to this %File object."}),"\n",(0,r.jsx)(t.h3,{id:"writeline",children:"WriteLine"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'Method WriteLine(data As %RawString = "") As %Status\n'})}),"\n",(0,r.jsx)(t.p,{children:"Write data with a carriage return to this %File object."}),"\n",(0,r.jsx)(t.h3,{id:"isopenset",children:"IsOpenSet"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method IsOpenSet(%val As %Boolean) As %Status [ Private ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"datecreatedget",children:"DateCreatedGet"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method DateCreatedGet() As %Date [ CodeMode = expression ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"datemodifiedget",children:"DateModifiedGet"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method DateModifiedGet() As %Date [ CodeMode = expression ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"sizeget",children:"SizeGet"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method SizeGet() As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"drivelistexecute",children:"DriveListExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DriveListExecute(ByRef QHandle As %Binary, fullyqualified As %Boolean = 0) As %Status\n"})}),"\n",(0,r.jsx)(t.p,{children:"This query was originally created to return Windows drive letters, hence its name. Later it was extended to work on Unix."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Windows: return a list of available drives"}),"\n",(0,r.jsx)(t.li,{children:"Unix: return a list of mounted file systems\nOn Windows, if fullyqualified is true then the drive letters include the trailing '\\' character. The default is false; this is backward compatible and returns 'c:' on Windows. This does not affect the behavior on Unix."}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"drivelistclose",children:"DriveListClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DriveListClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,r.jsx)(t.h3,{id:"drivelistfetch",children:"DriveListFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DriveListFetch(ByRef QHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status\n"})}),"\n",(0,r.jsx)(t.h3,{id:"filesetexecute",children:"FileSetExecute"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod FileSetExecute(ByRef QHandle As %Binary, directory As %String, wildcards As %String, sortby As %String = "", includedirs As %Boolean = 0, delimiter As %String = ";") As %Status\n'})}),"\n",(0,r.jsx)(t.p,{children:"Return the list of files in directory matching the pattern wildcards. The sortby can be one of:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Name - the name of the file (the default)"}),"\n",(0,r.jsx)(t.li,{children:"Type - file type"}),"\n",(0,r.jsx)(t.li,{children:"DateCreated - the date the file was created (rounded to the millisecond)"}),"\n",(0,r.jsx)(t.li,{children:"DateModified - the date the file was last modified (rounded to the millisecond)"}),"\n",(0,r.jsx)(t.li,{children:'Size - the file size\nThe includedirs if true (default is 0) will force the list of all directories to be returned before any files, the directories will ignore the pattern you supplied so it returns them all. If it is false it will return any files that match the pattern you give it, this may include directories if they match the pattern as well. So true forces any directory to be included, but false does not exclude directories. You may also specify the delimiter that is used to separate the wildcards from each other, this defaults to ";".'}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"filesetclose",children:"FileSetClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod FileSetClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,r.jsx)(t.h3,{id:"filesetfetch",children:"FileSetFetch"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod FileSetFetch(ByRef QHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status\n"})}),"\n",(0,r.jsx)(t.h3,{id:"lastmodifiedget",children:"LastModifiedGet"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method LastModifiedGet() As %TimeStamp\n"})}),"\n",(0,r.jsx)(t.h3,{id:"setfiledatemodified",children:"SetFileDateModified"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method SetFileDateModified(filename As %String, ntime As %TimeStamp, utc As %Boolean = 0, Output return As %Integer) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Set the date last modified of file filename to be ntime in $H format. By default ntime is local time. If you pass utc as true, ntime will be treated as UTC time. Pass return by reference to obtain the low level return value in case of errors which is the negative value of the operating system return code."}),"\n",(0,r.jsx)(t.h3,{id:"copyfromandsave",children:"CopyFromAndSave"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method CopyFromAndSave(source As %AbstractStream) As %Status\n"})}),"\n",(0,r.jsx)(t.p,{children:"Method not implemented as it does not make sense in context of %File interface"}),"\n",(0,r.jsx)(t.h3,{id:"tempfilename",children:"TempFilename"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod TempFilename(ext As %String, dir As %String, Output return As %Integer) As %String\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Create an empty temporary file in the OS provided temp directory, or the directory specified by dir, and return the filename.",(0,r.jsx)(t.br,{}),"\nIf you specify ext the filename will have this extension.",(0,r.jsx)(t.br,{}),"\nYou should delete the file after using it.",(0,r.jsx)(t.br,{}),"\nPass return by reference to obtain the low level return value in case of an error. It will be the negative value of the operating system return code, or 0 if there is no error.",(0,r.jsx)(t.br,{}),"\nIn case of an error, the method returns an empty string."]}),"\n",(0,r.jsx)(t.h3,{id:"setumask",children:"SetUMask"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetUMask(NewMask As %Integer) As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Set umask to the given value and return the previous umask value. Does not affect directories, which are always created with permission 775 (UMask 002) by default."}),"\n",(0,r.jsx)(t.h3,{id:"compare",children:"Compare"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Compare(file1 As %String, file2 As %String) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Compare two files and return 1 if they are identical and 0 otherwise"}),"\n",(0,r.jsx)(t.h3,{id:"sha1hash",children:"SHA1Hash"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SHA1Hash(file As %String, type As %Integer = 0) As %String\n"})}),"\n",(0,r.jsx)(t.p,{children:"Return binary form of SHA1 hash on the file if type is 0 (the default). If you want the string version then pass in type as 1. Note that if you already have the file open in this process calling this function will close this file."}),"\n",(0,r.jsx)(t.h3,{id:"normalizefilenamewithspaces",children:"NormalizeFilenameWithSpaces"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod NormalizeFilenameWithSpaces(pathname As %String) As %String [ CodeMode = expression ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Normalize filenames containing spaces for the host platform."}),"\n",(0,r.jsxs)(t.p,{children:["Parameter",(0,r.jsx)(t.br,{}),"\npathname : A filename or pathname."]}),"\n",(0,r.jsxs)(t.p,{children:["Description",(0,r.jsx)(t.br,{}),"\nThe NormalizeFilenameWithSpaces class method handles spaces in pathnames as appropriate to the host platform."]}),"\n",(0,r.jsx)(t.p,{children:'If a pathname contains spaces NormalizeFilenameWithSpaces returns the pathname enclosed in double quotes ("path name"). If a pathname does not contain spaces, the method returns it unchanged. NormalizeFilenameWithSpaces performs no other pathname validation.'}),"\n",(0,r.jsx)(t.p,{children:"NormalizefilenameWithSpaces is commonly used with the $ZF() functions."}),"\n",(0,r.jsx)(t.p,{children:"Note that this method does not perform the normalization actions of NormalizeFilename."})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>l});var r=i(96540);const s={},n=r.createContext(s);function a(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);