"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[2428],{22407:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>l,default:()=>c,frontMatter:()=>i,toc:()=>r});var s=a(74848),n=a(28453);const i={pagination_prev:null,pagination_next:null},l="%REST.API",r=[{value:"Methods",id:"methods",level:2},{value:"GetAllRESTApps",id:"getallrestapps",level:3},{value:"GetRESTApps",id:"getrestapps",level:3},{value:"GetAllWebRESTApps",id:"getallwebrestapps",level:3},{value:"GetWebRESTApps",id:"getwebrestapps",level:3},{value:"GetApplication",id:"getapplication",level:3},{value:"CreateApplication",id:"createapplication",level:3},{value:"LoadDynamicObject",id:"loaddynamicobject",level:3},{value:"DeleteApplication",id:"deleteapplication",level:3},{value:"GetWebURLForApplication",id:"getweburlforapplication",level:3},{value:"GetWebRESTApplication",id:"getwebrestapplication",level:3},{value:"FilterApplication",id:"filterapplication",level:3},{value:"ListToArray",id:"listtoarray",level:3},{value:"LogStatusError",id:"logstatuserror",level:3}];function p(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"restapi",children:"%REST.API"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %REST.API Extends %RegisteredObject [ System = 3 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%REST.API is public interface to REST API Management"}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"getallrestapps",children:"GetAllRESTApps"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetAllRESTApps(Output appList As %ListOfObjects(ELEMENTTYPE="%REST.Application")) As %Status\n'})}),"\n",(0,s.jsx)(t.p,{children:"GetAllRESTApps returns a list of all REST applications in all namespaces. The return values are in these method arguments: appList, A list of %REST.Application objects. The name argument is the REST application name."}),"\n",(0,s.jsx)(t.h3,{id:"getrestapps",children:"GetRESTApps"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetRESTApps(namespace As %String = "", Output appList As %ListOfObjects(ELEMENTTYPE="%REST.Application")) As %Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:["GetRESTApps returns a list of all REST applications in the current namespace. These method arguments hold values:",(0,s.jsx)(t.br,{}),"\nnamespace, The optional IRIS namespace as an additional filter. If not specified, then current namespace used.",(0,s.jsx)(t.br,{}),"\nThe return values are in these method arguments: appList, A list of %REST.Application objects. The name argument is the REST application name."]}),"\n",(0,s.jsx)(t.p,{children:"This method returns only REST applications built spec-first. In contrast, GetWebRESTApps works for all REST applications, regardless of how they were built."}),"\n",(0,s.jsx)(t.h3,{id:"getallwebrestapps",children:"GetAllWebRESTApps"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetAllWebRESTApps(Output appList As %ListOfObjects(ELEMENTTYPE="%REST.Application")) As %Status\n'})}),"\n",(0,s.jsx)(t.p,{children:"GetAllWebRESTApps returns a list of all %CSP.REST based REST applications in all namespaces. The return values are in these method arguments: appList, A list of %REST.Application objects. The name argument is web application name."}),"\n",(0,s.jsx)(t.h3,{id:"getwebrestapps",children:"GetWebRESTApps"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetWebRESTApps(namespace As %String = "", Output appList As %ListOfObjects(ELEMENTTYPE="%REST.Application")) As %Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:["GetWebRESTApps returns a list of all %CSP.REST based REST applications in the specified namespace.",(0,s.jsx)(t.br,{}),"\nThese method arguments hold values:",(0,s.jsx)(t.br,{}),"\nnamespace, The optional IRIS namespace as an additional filter. If not specified, then current namespace used.",(0,s.jsx)(t.br,{}),"\nThe return values are in these method arguments: appList, A list of %REST.Application objects. The name argument is web application name."]}),"\n",(0,s.jsx)(t.h3,{id:"getapplication",children:"GetApplication"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetApplication(applicationName As %String, Output swagger As %DynamicObject) As %Status\n"})}),"\n",(0,s.jsxs)(t.p,{children:["GetApplication returns the OpenAPI 2.0 swagger description of this application as a %DynamicObject. The application must be defined in the current namespace.",(0,s.jsx)(t.br,{}),"\nThese method arguments hold values:",(0,s.jsx)(t.br,{}),"\napplicationName, The name of the REST application which is the package name for the classes defining and implementing the application.",(0,s.jsx)(t.br,{}),"\nThe return values are in these method arguments: swagger, The %DynamicObject containing the OpenAPI 2.0 swagger document."]}),"\n",(0,s.jsx)(t.p,{children:'This method works only for REST applications built spec-first. The applicationName argument must refer to the "spec" class name. In contrast, GetWebRESTApplication works for all REST applications, regardless of how they were built.'}),"\n",(0,s.jsx)(t.h3,{id:"createapplication",children:"CreateApplication"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod CreateApplication(applicationName As %String, swagger As %DynamicObject = "", ByRef features, Output newApplication As %Boolean, Output internalError As %Boolean) As %Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:['CreateApplication creates a REST application from the OpenAPI 2.0 swagger description of the application. CreateApplication replaces an existing REST application or creates a new REST application based from the specified OpenAPI 2.0 swagger definition. If the application does not exist, then a new default empty application is created. If the swagger argument = "", then the RESTSpec and dispatch classes are replaced with any empty application.',(0,s.jsx)(t.br,{}),"\nThe method arguments hold values for:",(0,s.jsx)(t.br,{}),"\napplicationName, The name of the REST application which is the package name for the classes defining and implementing the application.",(0,s.jsx)(t.br,{}),'\nswagger, swagger is a JSON object, a URL or a filename specifying the swagger definition for this application or "" to create a new application.',(0,s.jsx)(t.br,{}),'\nfeatures, features is a local of array of features which control application creation: features("addPing"), If the request body is empty, addPing determines if a ping method should be added to the empty swagger spec.',(0,s.jsx)(t.br,{}),'\nfeatures("strict"), If false, then only the swagger properties which are needed for code generation are checked. If true, then all swagger properties are checked. The default value is true.',(0,s.jsx)(t.br,{}),'\nfeatures("keep"), If true, then the generated classes will be kept even in the case of error. This feature is meant primarily for testing.',(0,s.jsx)(t.br,{}),"\nThe return values are in these method arguments: newApplication, newApplication is set to true if a new application case been created.",(0,s.jsx)(t.br,{}),"\ninternalError, internalError is set to true in the case of an internal server error."]}),"\n",(0,s.jsx)(t.h3,{id:"loaddynamicobject",children:"LoadDynamicObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod LoadDynamicObject(url As %String, object As %DynamicObject) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Load Dynamic object from file or URL."}),"\n",(0,s.jsx)(t.h3,{id:"deleteapplication",children:"DeleteApplication"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DeleteApplication(applicationName As %String) As %Status\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This request deletes an application by deleting the specification class and the dispatch class that represent the application. The implementation class is not deleted.",(0,s.jsx)(t.br,{}),"\nThe method arguments hold values for:",(0,s.jsx)(t.br,{}),"\napplicationName, The name of the REST application which is the package name for the classes defining and implementing the application."]}),"\n",(0,s.jsx)(t.h3,{id:"getweburlforapplication",children:"GetWebURLForApplication"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetWebURLForApplication(applicationName As %String) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:'This request returns the web application name to which this application is deployed. If the application is deployed to multiple web applications, then the name of the first web application is returned. If the application is not deployed, then "" is returned.'}),"\n",(0,s.jsx)(t.p,{children:"This method returns only REST applications built spec-first."}),"\n",(0,s.jsx)(t.h3,{id:"getwebrestapplication",children:"GetWebRESTApplication"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetWebRESTApplication(namespace As %String = "", webApplication As %String, Output swagger As %DynamicObject) As %Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:["GetWebRESTApplication returns the OpenAPI 2.0 swagger description based on the UrlMap of %CSP.REST subclass for this REST application.",(0,s.jsx)(t.br,{}),"\nThe method arguments hold values for:",(0,s.jsx)(t.br,{}),"\nwebApplication, The name of the web application which to which this %CSP.REST based application is deployed.",(0,s.jsx)(t.br,{}),"\nThe return values are in these method arguments: namespace, The IRIS namespace in which to perform the requested operation. The namespace defaults to web application's namespace.",(0,s.jsx)(t.br,{}),"\nswagger, The %DynamicObject containing the OpenAPI 2.0 swagger document."]}),"\n",(0,s.jsx)(t.h3,{id:"filterapplication",children:"FilterApplication"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod FilterApplication(namespace As %String, webApps As %DynamicArray, Output restApplications As %ListOfObjects) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Filter REST applications by namespace. Add web application deployment information to the REST application description. Return the application description as an instance of %REST.Application."}),"\n",(0,s.jsx)(t.h3,{id:"listtoarray",children:"ListToArray"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListToArray(list As %ListOfObjects, Output array As %DynamicArray) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Convert a list to a %DynamicArray"}),"\n",(0,s.jsx)(t.h3,{id:"logstatuserror",children:"LogStatusError"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod LogStatusError(methodName As %String, sc As %Status, data As %String) [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Log an API Management %Status error"})]})}function c(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>l,x:()=>r});var s=a(96540);const n={},i=s.createContext(n);function l(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);