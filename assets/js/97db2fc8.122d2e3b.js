"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[64584],{97481:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>a,default:()=>c,frontMatter:()=>i,toc:()=>l});var r=t(74848),n=t(28453);const i={pagination_prev:null,pagination_next:null},a="%SYS.Audit",l=[{value:"Parameters",id:"parameters",level:2},{value:"SOURCECONTROL",id:"sourcecontrol",level:3},{value:"Properties",id:"properties",level:2},{value:"AuditIndex",id:"auditindex",level:3},{value:"Authentication",id:"authentication",level:3},{value:"ClientExecutableName",id:"clientexecutablename",level:3},{value:"ClientIPAddress",id:"clientipaddress",level:3},{value:"CSPSessionID",id:"cspsessionid",level:3},{value:"Description",id:"description",level:3},{value:"Event",id:"event",level:3},{value:"EventData",id:"eventdata",level:3},{value:"EventSource",id:"eventsource",level:3},{value:"EventType",id:"eventtype",level:3},{value:"GroupName",id:"groupname",level:3},{value:"JobId",id:"jobid",level:3},{value:"JobNumber",id:"jobnumber",level:3},{value:"Namespace",id:"namespace",level:3},{value:"OSUsername",id:"osusername",level:3},{value:"Pid",id:"pid",level:3},{value:"Roles",id:"roles",level:3},{value:"RoutineSpec",id:"routinespec",level:3},{value:"StartupClientIPAddress",id:"startupclientipaddress",level:3},{value:"Status",id:"status",level:3},{value:"SystemID",id:"systemid",level:3},{value:"UserInfo",id:"userinfo",level:3},{value:"Username",id:"username",level:3},{value:"UTCTimeStamp",id:"utctimestamp",level:3},{value:"Methods",id:"methods",level:2},{value:"DescriptionLogicalToDisplay",id:"descriptionlogicaltodisplay",level:3},{value:"EventDataLogicalToDisplay",id:"eventdatalogicaltodisplay",level:3},{value:"NamespaceLogicalToDisplay",id:"namespacelogicaltodisplay",level:3},{value:"ApplyAuditHeader",id:"applyauditheader",level:3},{value:"CheckHeader",id:"checkheader",level:3},{value:"Convert",id:"convert",level:3},{value:"ConvertLocalHToUTC",id:"convertlocalhtoutc",level:3},{value:"ConvertUTCHToLocal",id:"convertutchtolocal",level:3},{value:"ConvertUTCToLocal",id:"convertutctolocal",level:3},{value:"Copy",id:"copy",level:3},{value:"CreateGlobals",id:"createglobals",level:3},{value:"Delete",id:"delete",level:3},{value:"Erase",id:"erase",level:3},{value:"Exists",id:"exists",level:3},{value:"Export",id:"export",level:3},{value:"Get",id:"get",level:3},{value:"GetAuditDatabase",id:"getauditdatabase",level:3},{value:"GetProperties",id:"getproperties",level:3},{value:"Import",id:"import",level:3},{value:"Modify",id:"modify",level:3},{value:"Stop",id:"stop",level:3},{value:"UpdateAuditFile",id:"updateauditfile",level:3},{value:"WriteToAuditFile",id:"writetoauditfile",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"ListFetch",id:"listfetch",level:3},{value:"ListClose",id:"listclose",level:3},{value:"ListByUserExecute",id:"listbyuserexecute",level:3},{value:"CheckAuthentication",id:"checkauthentication",level:3},{value:"ListByUserFetch",id:"listbyuserfetch",level:3},{value:"ListByUserClose",id:"listbyuserclose",level:3},{value:"ListByEventExecute",id:"listbyeventexecute",level:3},{value:"ListByEventFetch",id:"listbyeventfetch",level:3},{value:"ListByEventClose",id:"listbyeventclose",level:3},{value:"ListByPidExecute",id:"listbypidexecute",level:3},{value:"ListByPidFetch",id:"listbypidfetch",level:3},{value:"ListByPidClose",id:"listbypidclose",level:3},{value:"OpenAuditItem",id:"openaudititem",level:3},{value:"%OnOpen",id:"onopen",level:3}];function d(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"sysaudit",children:"%SYS.Audit"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Class %SYS.Audit Extends (%Persistent, %SYSTEM.Help, %XML.Adaptor) [ Inheritance = right, StorageStrategy = Audit, System = 4 ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"The auditing system allows the user to capture events which occur on the system, and log them to an audit file."}),"\n",(0,r.jsx)(s.p,{children:"When running SQL queries on the audit log, it is helpful to use the UTCTimestamp in the WHERE clause to speed up the query, and minimize the amount of data which is returned. For example:"}),"\n",(0,r.jsxs)(s.p,{children:["SELECT SystemID,AuditIndex,UTCTimeStamp,EventSource,EventType,Event,Pid,CSPSessionID,Username,Description",(0,r.jsx)(s.br,{}),"\nFROM %SYS.Audit",(0,r.jsx)(s.br,{}),"\nWHERE UTCTimeStamp BETWEEN :UTCBeginDateTime AND :UTCEndDateTime",(0,r.jsx)(s.br,{}),"\nORDER BY UTCTimeStamp DESC, SystemID DESC, AuditIndex DESC"]}),"\n",(0,r.jsx)(s.p,{children:"The UTCTimeStamp is the UTC time in ODBC format. To convert a local $H time to this format use the following:"}),"\n",(0,r.jsxs)(s.p,{children:["s x=##Class(%SYS.Audit).ConvertLocalHToUTC($H)",(0,r.jsx)(s.br,{}),"\nThe UTCTimeStamp which is returned as part of the record, can be converted to local time with the following:"]}),"\n",(0,r.jsx)(s.p,{children:"s x=##Class(%SYS.Audit).ConvertUTCToLocal(UTCTimeStamp)"}),"\n",(0,r.jsx)(s.p,{children:'Access to all the audit class methods require the %Admin_Secure:"Use" privilege.'}),"\n",(0,r.jsx)(s.p,{children:"If you wish to modify an audit record, use the Modify() class method. If you wish to modify it using direct object you must first use the OpenAuditRecord() class method and then the %Save() method. Note that saving the object in this way also requires that the user have write access to the Audit database resource."}),"\n",(0,r.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(s.h3,{id:"sourcecontrol",children:"SOURCECONTROL"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter SOURCECONTROL [ Internal ] = {"Revision path: $Id: //iris/latest/databases/sys/cls/Security/Users.xml#66 $"_$c(13,10)_"Last Change:   $DateTime: 2022/06/08 09:18:09 $"_$c(13,10)_"Changelist #:  $Change: 5432096 $"};\n'})}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.h3,{id:"auditindex",children:"AuditIndex"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property AuditIndex As %BigInt;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"authentication",children:"Authentication"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Authentication As Security.Datatype.Authentication;\n"})}),"\n",(0,r.jsx)(s.p,{children:"Authentication method process used."}),"\n",(0,r.jsx)(s.h3,{id:"clientexecutablename",children:"ClientExecutableName"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ClientExecutableName As %String(MAXLEN = 128);\n"})}),"\n",(0,r.jsx)(s.p,{children:"Executable name on the client machine."}),"\n",(0,r.jsx)(s.h3,{id:"clientipaddress",children:"ClientIPAddress"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ClientIPAddress As %String(MAXLEN = 128);\n"})}),"\n",(0,r.jsx)(s.p,{children:"IP address of the client, as passed from client. This corresponds to the ClientIPAddress in %SYS.ProcessQuery."}),"\n",(0,r.jsx)(s.h3,{id:"cspsessionid",children:"CSPSessionID"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property CSPSessionID As %String(MAXLEN = 16);\n"})}),"\n",(0,r.jsx)(s.p,{children:"Session ID of the process if a CSP process."}),"\n",(0,r.jsx)(s.h3,{id:"description",children:"Description"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Description As %SYS.AuditString(MAXLEN = 128);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Description of the audit event.",(0,r.jsx)(s.br,{}),"\nControl characters less than $c(32) are not allowed in this data except for CR,LF, and tab."]}),"\n",(0,r.jsx)(s.h3,{id:"event",children:"Event"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Event As %String(MAXLEN = 64);\n"})}),"\n",(0,r.jsx)(s.p,{children:"Name of the audit event."}),"\n",(0,r.jsx)(s.h3,{id:"eventdata",children:"EventData"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property EventData As %SYS.AuditString(MAXLEN = 16384);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["EventData -- arbitrary data associated with this event.",(0,r.jsx)(s.br,{}),"\nControl characters less than $c(32) are not allowed in this data except for CR,LF, and tab."]}),"\n",(0,r.jsx)(s.h3,{id:"eventsource",children:"EventSource"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property EventSource As %String(MAXLEN = 64);\n"})}),"\n",(0,r.jsx)(s.p,{children:'Event Source (system events all have "%System" here).'}),"\n",(0,r.jsx)(s.h3,{id:"eventtype",children:"EventType"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property EventType As %String(MAXLEN = 64);\n"})}),"\n",(0,r.jsx)(s.p,{children:"EventType."}),"\n",(0,r.jsx)(s.h3,{id:"groupname",children:"GroupName"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property GroupName As %String(MAXLEN = 64);\n"})}),"\n",(0,r.jsx)(s.p,{children:"Group of the audit event."}),"\n",(0,r.jsx)(s.h3,{id:"jobid",children:"JobId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property JobId As %String(MAXLEN = 16);\n"})}),"\n",(0,r.jsx)(s.p,{children:"Job ID"}),"\n",(0,r.jsx)(s.h3,{id:"jobnumber",children:"JobNumber"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property JobNumber As %Integer [ Calculated, SqlComputeCode = { set {*}=$zb({JobId},65535,1)}, SqlComputed, SqlFieldName = JobNumber ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"Job Number"}),"\n",(0,r.jsx)(s.h3,{id:"namespace",children:"Namespace"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Namespace As %String(MAXLEN = 128);\n"})}),"\n",(0,r.jsx)(s.p,{children:"Namespace process was executing in."}),"\n",(0,r.jsx)(s.h3,{id:"osusername",children:"OSUsername"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property OSUsername As %String(MAXLEN = 16);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Operating system username of process.",(0,r.jsx)(s.br,{}),"\nUsername given to the process by the operating system when the process is created. When displayed, it is truncated to 16 characters. Note that the real O/S username is only returned when connecting to UNIX or VMS systems; For Windows, it will return the O/S username for a console process, but for telnet it will return the $USERNAME of the process. For client connections, it contains the O/S username of the client."]}),"\n",(0,r.jsx)(s.h3,{id:"pid",children:"Pid"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Pid As %String(MAXLEN = 16);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Process ID.",(0,r.jsx)(s.br,{}),"\nNote that on VMS system, the Hex pid is stored internally as a decimal value, i.e. $zh(pid)."]}),"\n",(0,r.jsx)(s.h3,{id:"roles",children:"Roles"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Roles As %String(MAXLEN = 2048);\n"})}),"\n",(0,r.jsx)(s.p,{children:"$ROLES value that was active when the audit event occurred."}),"\n",(0,r.jsx)(s.h3,{id:"routinespec",children:"RoutineSpec"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property RoutineSpec As %String(MAXLEN = 512);\n"})}),"\n",(0,r.jsx)(s.p,{children:"Routine running including DB and System."}),"\n",(0,r.jsx)(s.h3,{id:"startupclientipaddress",children:"StartupClientIPAddress"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property StartupClientIPAddress As %String(MAXLEN = 128);\n"})}),"\n",(0,r.jsx)(s.p,{children:"IP address of the client, as detected on the TCP channel by the server process. This corresponds to the StartupClientIPAddress in %SYS.ProcessQuery."}),"\n",(0,r.jsx)(s.h3,{id:"status",children:"Status"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Status As %Status [ InitialExpression = 1 ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"Any %Status variable passed into the call."}),"\n",(0,r.jsx)(s.h3,{id:"systemid",children:"SystemID"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property SystemID As %String(MAXLEN = 128);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["SystemName:ConfigurationName of where the event was generated.",(0,r.jsx)(s.br,{}),"\nThis is useful when merging separate audit streams from different systems."]}),"\n",(0,r.jsx)(s.h3,{id:"userinfo",children:"UserInfo"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property UserInfo As %String(MAXLEN = 64);\n"})}),"\n",(0,r.jsx)(s.p,{children:"User info field"}),"\n",(0,r.jsx)(s.h3,{id:"username",children:"Username"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Username As %SYS.AuditString(MAXLEN = 160);\n"})}),"\n",(0,r.jsx)(s.p,{children:"Username from $Username that was active when audit event occurred."}),"\n",(0,r.jsx)(s.h3,{id:"utctimestamp",children:"UTCTimeStamp"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property UTCTimeStamp As %String(MAXLEN = 64);\n"})}),"\n",(0,r.jsx)(s.p,{children:"UTC $ZTIMESTAMP value when the audit event occurred."}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"descriptionlogicaltodisplay",children:"DescriptionLogicalToDisplay"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DescriptionLogicalToDisplay(Description As %String) As %String [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"eventdatalogicaltodisplay",children:"EventDataLogicalToDisplay"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod EventDataLogicalToDisplay(EventData As %String) As %String [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"namespacelogicaltodisplay",children:"NamespaceLogicalToDisplay"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NamespaceLogicalToDisplay(Namespace As %String) As %String [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"applyauditheader",children:"ApplyAuditHeader"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ApplyAuditHeader() As %Status [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Apply the audit header to the audit file.",(0,r.jsx)(s.br,{}),'\nRequires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"checkheader",children:"CheckHeader"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckHeader(EndDateTime As %String) As %Integer [ Internal, Private ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Determine if any records in the audit header are prior to EndDateTime."}),"\n",(0,r.jsx)(s.h3,{id:"convert",children:"Convert"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Convert(ByRef Count As %Integer) As %Status\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Converts Audit records to the current IRIS format.",(0,r.jsx)(s.br,{}),"\nThis is called before any of the Audit methods runs and also during an upgrade to make sure that the audit global is in the current format.",(0,r.jsx)(s.br,{}),"\nIt will also check if there are any audit records in Cache' format (stored in the ^CacheAuditD global) and merge those globals into the current IRIS audit global.",(0,r.jsx)(s.br,{}),"\nNote that journaling is turned off for the process during the conversion."]}),"\n",(0,r.jsxs)(s.p,{children:["Parameters:",(0,r.jsx)(s.br,{}),"\nCount (byref) - Returned count of number of audit records converted.",(0,r.jsx)(s.br,{}),"\n0 - Version already matches.",(0,r.jsx)(s.br,{}),'\nRequires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"convertlocalhtoutc",children:"ConvertLocalHToUTC"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ConvertLocalHToUTC(LocalH As %String) As %String\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Convert the local $H time to an ODBC format string in UTC.",(0,r.jsx)(s.br,{}),"\nWhen using SQL, use this function to convert a local time in $h to UTC time to use in your SELECT statement."]}),"\n",(0,r.jsx)(s.h3,{id:"convertutchtolocal",children:"ConvertUTCHToLocal"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ConvertUTCHToLocal(UTC As %String) As %String\n"})}),"\n",(0,r.jsx)(s.p,{children:"Convert a UTCTimeStamp in ODBC format to Local Time in ODBC format."}),"\n",(0,r.jsx)(s.h3,{id:"convertutctolocal",children:"ConvertUTCToLocal"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ConvertUTCToLocal(UTC As %String) As %String [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"copy",children:"Copy"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Copy(ByRef NumCopied As %Integer, Namespace As %String, Flags As %Integer = 0, BeginDateTime As %String = "", EndDateTime As %String = "", EventSources As %String = "*", EventTypes As %String = "*", Events As %String = "*", Usernames As %String = "*", SystemIDs As %String = "*") As %Status\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Copy matching audit records to a defined namespace.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),'\nBeginDateTime - $zdatetime($H,3) value of the first audit record to copy, "" = first record',(0,r.jsx)(s.br,{}),'\nEndDateTime - $zdatetime($H,3) value of the Last audit record to copy, "" = Last record',(0,r.jsx)(s.br,{}),"\nThe following parameters may be specified as a comma separated list as follows:",(0,r.jsx)(s.br,{}),'\n"*" - All records match',(0,r.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,r.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,r.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,r.jsx)(s.br,{}),"\nNote that these are all case insensitive matches",(0,r.jsx)(s.br,{}),"\nEventSources - Comma separated list of valid event sources",(0,r.jsx)(s.br,{}),"\nEventTypes - Comma separated list of valid event types",(0,r.jsx)(s.br,{}),"\nEvents - Comma separated list of event names",(0,r.jsx)(s.br,{}),"\nUsernames - Comma separated list of user names",(0,r.jsx)(s.br,{}),"\nSystemIDs - Comma separated list of System:Config names",(0,r.jsx)(s.br,{}),"\nNamespace - Valid namespace to copy audit records to",(0,r.jsx)(s.br,{}),"\nFlags - Bit 0 - Delete audit record after copy",(0,r.jsx)(s.br,{}),"\nReturn values:",(0,r.jsx)(s.br,{}),"\nNumCopied (byref) - Number of audit records copied",(0,r.jsx)(s.br,{}),'\nRequires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"createglobals",children:"CreateGlobals"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateGlobals(Directory As %String) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:'Creates the audit globals with the correct collation. Requires %Admin_Secure:"Use" privilege.'}),"\n",(0,r.jsx)(s.h3,{id:"delete",children:"Delete"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Delete(ByRef NumDeleted As %Integer, BeginDateTime As %String = "", EndDateTime As %String = "", EventSources As %String = "*", EventTypes As %String = "*", Events As %String = "*", Usernames As %String = "*", SystemIDs As %String = "*", JSONSearch As %String = "") As %Status\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Delete matching audit records.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),'\nBeginDateTime - $zdatetime($H,3) value of the first audit record to delete, use "" to begin with the first record',(0,r.jsx)(s.br,{}),'\nEndDateTime - $zdatetime($H,3) value of the Last audit record to delete. Audit records will be deleted up through, but not including, this value. Use "" to delete through last record',(0,r.jsx)(s.br,{}),"\nThe following parameters may be specified as a comma separated list as follows:",(0,r.jsx)(s.br,{}),'\n"*" - All records match',(0,r.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,r.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,r.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,r.jsx)(s.br,{}),"\nNote that these are all case insensitive matches",(0,r.jsx)(s.br,{}),"\nEventSources - Comma separated list of valid event sources",(0,r.jsx)(s.br,{}),"\nEventTypes - Comma separated list of valid event types",(0,r.jsx)(s.br,{}),"\nEvents - Comma separated list of event names",(0,r.jsx)(s.br,{}),"\nUsernames - Comma separated list of user names",(0,r.jsx)(s.br,{}),"\nSystemIDs - Comma separated list of System:Config names",(0,r.jsx)(s.br,{}),"\nJSONSearch - String to search for in the JSON Data field Return values:",(0,r.jsx)(s.br,{}),"\nNumDeleted (byref) - Number of audit records deleted",(0,r.jsx)(s.br,{}),'\nRequires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"erase",children:"Erase"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Erase(Flags As %Integer = 0) As %Status\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Erase the audit file.",(0,r.jsx)(s.br,{}),"\nFlags: 0 - Erase all contents",(0,r.jsx)(s.br,{}),"\n1 - Erase and create new audit file",(0,r.jsx)(s.br,{}),"\n2 - Erase and create new audit file, treat as encryption state changed",(0,r.jsx)(s.br,{}),"\nNote that bit 1 infers that ALL data in the audit database will be deleted, not just Audit data",(0,r.jsx)(s.br,{}),'\nRequires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"exists",children:"Exists"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Exists(UTCTimeStamp As %String = "", SystemID As %String = "", AuditIndex As %Integer = 0, ByRef Audit As %ObjectHandle, ByRef Status As %Status) As %Boolean\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Audit record exists.",(0,r.jsx)(s.br,{}),"\nThis method checks for the existence of an Audit record in the security database.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nUTCTimeStamp - UTC timestamp of the audit record",(0,r.jsx)(s.br,{}),"\nSystemID - System ID of the audit event, usually NODE:CFGNAME",(0,r.jsx)(s.br,{}),"\nAuditIndex - Index number of the audit record",(0,r.jsx)(s.br,{}),"\nReturn values:",(0,r.jsx)(s.br,{}),"\nIf Value of the method = 0 (Audit record does not exist, or some error occured)",(0,r.jsx)(s.br,{}),"\nAudit = Null",(0,r.jsx)(s.br,{}),'\nStatus = Audit "x" does not exist, or other error message']}),"\n",(0,r.jsxs)(s.p,{children:["If Value of the method = 1 (Audit record exists)",(0,r.jsx)(s.br,{}),"\nAudit = Object handle to Audit record",(0,r.jsx)(s.br,{}),'\nRequires %Admin_Secure:"Use" privilege.',(0,r.jsx)(s.br,{}),"\nIf you wish to modify the returned object, use the Modify() method."]}),"\n",(0,r.jsx)(s.h3,{id:"export",children:"Export"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Export(FileName As %String, ByRef NumExported As %Integer, Flags As %Integer = 0, BeginDateTime As %String = "", EndDateTime As %String = "", EventSources As %String = "*", EventTypes As %String = "*", Events As %String = "*", Usernames As %String = "*", SystemIDs As %String = "*") As %Status\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Export matching records to an xml file.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nFileName - Valid filename to copy audit records to",(0,r.jsx)(s.br,{}),"\nFlags - Bit 0 - Delete audit record after export",(0,r.jsx)(s.br,{}),'\nBeginDateTime - $zdatetime($H,3) value of the first audit record to copy, "" = first record',(0,r.jsx)(s.br,{}),'\nEndDateTime - $zdatetime($H,3) value of the Last audit record to copy, "" = Last record',(0,r.jsx)(s.br,{}),"\nThe following parameters may be specified as a comma separated list as follows:",(0,r.jsx)(s.br,{}),'\n"*" - All records match',(0,r.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,r.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,r.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,r.jsx)(s.br,{}),"\nNote that these are all case insensitive matches",(0,r.jsx)(s.br,{}),"\nEventSources - Comma separated list of valid event sources",(0,r.jsx)(s.br,{}),"\nEventTypes - Comma separated list of valid event types",(0,r.jsx)(s.br,{}),"\nEvents - Comma separated list of event names",(0,r.jsx)(s.br,{}),"\nUsernames - Comma separated list of user names",(0,r.jsx)(s.br,{}),"\nSystemIDs - Comma separated list of System:Config names",(0,r.jsx)(s.br,{}),'\nUsername - Comma separated list of user names to copy, "*" = All',(0,r.jsx)(s.br,{}),"\nReturn values:",(0,r.jsx)(s.br,{}),"\nNumCopied (byref) - Number of audit records exported.",(0,r.jsx)(s.br,{}),"\nNote: Two audit record will get written out when this is called in case the first one is deleted as part of the export operation.",(0,r.jsx)(s.br,{}),'\nRequires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"get",children:"Get"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Get(UTCTimeStamp As %String, SystemID As %String, AuditIndex As %Integer, ByRef Properties As %String) As %Status\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Get the Audit properties.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nSystemID - System ID of the audit event, usually NODE:CFGNAME",(0,r.jsx)(s.br,{}),"\nAuditIndex - Index number of the audit record",(0,r.jsx)(s.br,{}),"\nReturn values:",(0,r.jsx)(s.br,{}),"\nProperties - Array of properties",(0,r.jsx)(s.br,{}),'\nProperties("AuditIndex")',(0,r.jsx)(s.br,{}),'\nProperties("ClientExecutableName")',(0,r.jsx)(s.br,{}),'\nProperties("ClientIPAddress")',(0,r.jsx)(s.br,{}),'\nProperties("CSPSessionID")',(0,r.jsx)(s.br,{}),'\nProperties("Description")',(0,r.jsx)(s.br,{}),'\nProperties("Event")',(0,r.jsx)(s.br,{}),'\nProperties("EventData")',(0,r.jsx)(s.br,{}),'\nProperties("EventSource")',(0,r.jsx)(s.br,{}),'\nProperties("EventType")',(0,r.jsx)(s.br,{}),'\nProperties("JobId")',(0,r.jsx)(s.br,{}),'\nProperties("Namespace")',(0,r.jsx)(s.br,{}),'\nProperties("Pid")',(0,r.jsx)(s.br,{}),'\nProperties("Roles")',(0,r.jsx)(s.br,{}),'\nProperties("RoutineSpec")',(0,r.jsx)(s.br,{}),'\nProperties("StartupClientIPAddress")',(0,r.jsx)(s.br,{}),'\nProperties("SystemID")',(0,r.jsx)(s.br,{}),'\nProperties("Username")',(0,r.jsx)(s.br,{}),'\nProperties("UTCTimeStamp")',(0,r.jsx)(s.br,{}),'\nRequires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"getauditdatabase",children:"GetAuditDatabase"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetAuditDatabase() As %String [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:'Get audit database (directory) using $$$GetAuditDatabase or the name of the database where we would audit to if it were turned on. Code copied from ..Erase() for use by shadowing. Requires %Admin_Secure:"Use" privilege.'}),"\n",(0,r.jsx)(s.h3,{id:"getproperties",children:"GetProperties"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetProperties(Audit As %ObjectHandle, ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Get the Audit properties.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nAudit - Object handle to an audit record Properties Get the Audit properties.",(0,r.jsx)(s.br,{}),'\nRequires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"import",children:"Import"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Import(FileName As %String, ByRef NumImported As %Integer, Flags As %Integer = 0) As %Status\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Import audit records from an xml file.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nFileName - Valid filename to import audit records from",(0,r.jsx)(s.br,{}),"\nNumImported (byref) - Returns number of records imported",(0,r.jsx)(s.br,{}),"\nFlags - Control import",(0,r.jsx)(s.br,{}),"\nBit 0 - Do not import records, just return count",(0,r.jsx)(s.br,{}),"\nNote: On failure, no records will be imported",(0,r.jsx)(s.br,{}),"\nAudit records may not be imported into the %SYS namespace",(0,r.jsx)(s.br,{}),'\nRequires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"modify",children:"Modify"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Modify(UTCTimeStamp As %String, SystemID As %String, AuditIndex As %Integer, ByRef Properties As %String) As %Status\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Modify an Audit record's properties.",(0,r.jsx)(s.br,{}),"\nModifies an Audit records properties from the security database.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\nUTCTimeStamp - UTC timestamp of the audit record",(0,r.jsx)(s.br,{}),"\nSystemID - System ID of the audit event, usually NODE:CFGNAME",(0,r.jsx)(s.br,{}),"\nAuditIndex - Index number of the audit record",(0,r.jsx)(s.br,{}),"\nSee the Get() method for a description of the Properties parameter.",(0,r.jsx)(s.br,{}),"\nIf a specific property is not passed in the properties array, the value is not modified.",(0,r.jsx)(s.br,{}),'\nRequires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"stop",children:"Stop"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Stop() As %Status [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Stops auditing.",(0,r.jsx)(s.br,{}),'\nCalled when the system audit parameters change, and at shutdown. Do not call directly to stop auditing. Requires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"updateauditfile",children:"UpdateAuditFile"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UpdateAuditFile() As %Status [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Start/Stop/Switch the Audit file based on the contents of the audit configuration.",(0,r.jsx)(s.br,{}),'\nCalled only when the audit parameters are changed in the Security.System class. Requires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"writetoauditfile",children:"WriteToAuditFile"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod WriteToAuditFile(Source As %String, Type As %String, Name As %String, EventData As %String, Description As %String, Force As %Integer = 0) As %Boolean [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Write a record to the audit file.",(0,r.jsx)(s.br,{}),"\nUsed internally by the Config.* and Security.* methods."]}),"\n",(0,r.jsx)(s.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListExecute(ByRef %qHandle As %Binary, BeginDateTime As %String = "", EndDateTime As %String = "", EventSources As %String = "*", EventTypes As %String = "*", Events As %String = "*", Usernames As %String = "*", SystemIDs As %String = "*", Pids As %String = "*", Groups As %String = "*", Authentications As Security.Datatype.Authentication = "*", Flags As %Integer = 0, JSONSearch As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,r.jsxs)(s.p,{children:["List all audit records, brief display, reverse order.",(0,r.jsx)(s.br,{}),'\nParameters: BeginDateTime - $zdatetime($H,3) value of the first audit record, "" = first record',(0,r.jsx)(s.br,{}),'\nEndDateTime - $zdatetime($H,3) value of the last audit record, "" = Last record',(0,r.jsx)(s.br,{}),"\nThe following parameters may be specified as a comma separated list as follows:",(0,r.jsx)(s.br,{}),'\n"*" - All records match',(0,r.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,r.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,r.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,r.jsx)(s.br,{}),"\nNote that these are all case insensitive matches",(0,r.jsx)(s.br,{}),"\nEventSources - Comma separated list of valid event sources",(0,r.jsx)(s.br,{}),"\nEventTypes - Comma separated list of valid event types",(0,r.jsx)(s.br,{}),"\nEvents - Comma separated list of event names",(0,r.jsx)(s.br,{}),"\nUsernames - Comma separated list of user names",(0,r.jsx)(s.br,{}),"\nSystemIDs - Comma separated list of System:Config names",(0,r.jsx)(s.br,{}),"\nPids - Comma separated list of Pids,VMS systems passed in Hex",(0,r.jsx)(s.br,{}),"\nGroups - Comma separated list of Groups (currently unused)",(0,r.jsx)(s.br,{}),"\nAuthentication - Comma separated list of authentication types",(0,r.jsx)(s.br,{}),"\nFlags - 0=Descending (most recent first) 1=Ascending (earliest first)",(0,r.jsx)(s.br,{}),'\nJSONSearch - String to search for in the JSON Data field Requires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"listclose",children:"ListClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"listbyuserexecute",children:"ListByUserExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListByUserExecute(ByRef %qHandle As %Binary, BeginDateTime As %String = "", EndDateTime As %String = "", EventSources As %String = "*", EventTypes As %String = "*", Events As %String = "*", Usernames As %String = "*", SystemIDs As %String = "*", Pids As %String = "*", Groups As %String = "*", Authentications As Security.Datatype.Authentication = "*") As %Status [ Internal ]\n'})}),"\n",(0,r.jsxs)(s.p,{children:['List audit records ordered by Username. Parameters: BeginDateTime - $zdatetime($H,3) value of the first audit record, "" = first record',(0,r.jsx)(s.br,{}),'\nEndDateTime - $zdatetime($H,3) value of the Last audit record, "" = Last record',(0,r.jsx)(s.br,{}),"\nThe following parameters may be specified as a comma separated list as follows:",(0,r.jsx)(s.br,{}),'\n"*" - All records match',(0,r.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,r.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,r.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,r.jsx)(s.br,{}),"\nNote that these are all case insensitive matches",(0,r.jsx)(s.br,{}),"\nEventSources - Comma separated list of valid event sources",(0,r.jsx)(s.br,{}),"\nEventTypes - Comma separated list of valid event types",(0,r.jsx)(s.br,{}),"\nEvents - Comma separated list of event names",(0,r.jsx)(s.br,{}),"\nUsernames - Comma separated list of user names",(0,r.jsx)(s.br,{}),"\nSystemIDs - Comma separated list of System:Config names",(0,r.jsx)(s.br,{}),'\nRequires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"checkauthentication",children:"CheckAuthentication"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckAuthentication(Select, Data) As %Boolean [ Internal, SqlProc ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"listbyuserfetch",children:"ListByUserFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListByUserFetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListByUserExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"listbyuserclose",children:"ListByUserClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListByUserClose(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListByUserExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"listbyeventexecute",children:"ListByEventExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListByEventExecute(ByRef %qHandle As %Binary, BeginDateTime As %String = "", EndDateTime As %String = "", EventSources As %String = "*", EventTypes As %String = "*", Events As %String = "*", Usernames As %String = "*", SystemIDs As %String = "*", Pids As %String = "*", Groups As %String = "*", Authentications As Security.Datatype.Authentication = "*") As %Status [ Internal ]\n'})}),"\n",(0,r.jsxs)(s.p,{children:["List audit records ordered by Event Source, Event Type, and Event.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),'\nBeginDateTime - $zdatetime($H,3) value of the first audit record, "" = first record',(0,r.jsx)(s.br,{}),'\nEndDateTime - $zdatetime($H,3) value of the Last audit record, "" = Last record',(0,r.jsx)(s.br,{}),"\nThe following parameters may be specified as a comma separated list as follows:",(0,r.jsx)(s.br,{}),'\n"*" - All records match',(0,r.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,r.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,r.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,r.jsx)(s.br,{}),"\nNote that these are all case insensitive matches",(0,r.jsx)(s.br,{}),"\nEventSources - Comma separated list of valid event sources",(0,r.jsx)(s.br,{}),"\nEventTypes - Comma separated list of valid event types",(0,r.jsx)(s.br,{}),"\nEvents - Comma separated list of event names",(0,r.jsx)(s.br,{}),"\nUsernames - Comma separated list of user names",(0,r.jsx)(s.br,{}),"\nSystemIDs - Comma separated list of System:Config names",(0,r.jsx)(s.br,{}),'\nRequires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"listbyeventfetch",children:"ListByEventFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListByEventFetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListByEventExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"listbyeventclose",children:"ListByEventClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListByEventClose(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListByEventExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"listbypidexecute",children:"ListByPidExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListByPidExecute(ByRef %qHandle As %Binary, BeginDateTime As %String = "", EndDateTime As %String = "", EventSources As %String = "*", EventTypes As %String = "*", Events As %String = "*", Usernames As %String = "*", SystemIDs As %String = "*", Pids As %String = "*", Groups As %String = "*", Authentications As Security.Datatype.Authentication = "*") As %Status [ Internal ]\n'})}),"\n",(0,r.jsxs)(s.p,{children:["List audit records ordered by Pid.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),'\nBeginDateTime - $zdatetime($H,3) value of the first audit record, "" = first record',(0,r.jsx)(s.br,{}),'\nEndDateTime - $zdatetime($H,3) value of the Last audit record, "" = Last record',(0,r.jsx)(s.br,{}),"\nThe following parameters may be specified as a comma separated list as follows:",(0,r.jsx)(s.br,{}),'\n"*" - All records match',(0,r.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,r.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,r.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,r.jsx)(s.br,{}),"\nNote that these are all case insensitive matches",(0,r.jsx)(s.br,{}),"\nEventSources - Comma separated list of valid event sources",(0,r.jsx)(s.br,{}),"\nEventTypes - Comma separated list of valid event types",(0,r.jsx)(s.br,{}),"\nEvents - Comma separated list of event names",(0,r.jsx)(s.br,{}),"\nUsernames - Comma separated list of user names",(0,r.jsx)(s.br,{}),"\nSystemIDs - Comma separated list of System:Config names",(0,r.jsx)(s.br,{}),'\nRequires %Admin_Secure:"Use" privilege.']}),"\n",(0,r.jsx)(s.h3,{id:"listbypidfetch",children:"ListByPidFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListByPidFetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListByPidExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"listbypidclose",children:"ListByPidClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListByPidClose(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListByPidExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"openaudititem",children:"OpenAuditItem"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OpenAuditItem(UTCTimeStamp As %String, SystemID As %String, AuditIndex As %BigInt) As %SYS.Audit\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Open an Audit Log item, given its ID information (UTC date, system ID, and audit index).",(0,r.jsx)(s.br,{}),'\nRequires %Admin_Secure:"Use" privilege.',(0,r.jsx)(s.br,{}),"\nIf you wish to modify the returned object, use the Modify() method."]}),"\n",(0,r.jsx)(s.h3,{id:"onopen",children:"%OnOpen"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnOpen() As %Status [ Internal, Private, ServerOnly = 1 ]\n"})})]})}function c(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>l});var r=t(96540);const n={},i=r.createContext(n);function a(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);