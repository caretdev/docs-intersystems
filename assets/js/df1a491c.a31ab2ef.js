"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[26730],{72598:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>a,default:()=>l,frontMatter:()=>r,toc:()=>o});var n=t(74848),i=t(28453);const r={pagination_prev:null,pagination_next:null},a="%Library.ListOfBinary",o=[{value:"Parameters",id:"parameters",level:2},{value:"XSDTYPE",id:"xsdtype",level:3},{value:"JSONTYPE",id:"jsontype",level:3},{value:"Methods",id:"methods",level:2},{value:"XSDToLogical",id:"xsdtological",level:3},{value:"LogicalToXSD",id:"logicaltoxsd",level:3}];function c(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"librarylistofbinary",children:"%Library.ListOfBinary"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class %Library.ListOfBinary Extends %Library.List [ ClientDataType = LIST, System = 2 ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.strong,{children:"%ListOfBinary"})," data type class is used to represent data that is in ",(0,n.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$List"})," format. The logical value for ",(0,n.jsx)(s.strong,{children:"%List"})," is a list of elements in ",(0,n.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$List"})," format. %ListOfBinary adds to its superclass, %List, a comma separated base64 encoded XML export format."]}),"\n",(0,n.jsxs)(s.p,{children:["When a ",(0,n.jsx)(s.strong,{children:"%ListOfBinary"})," data type value is projected to a client application, it exposes it as a ",(0,n.jsx)(s.strong,{children:"syslist"})," object. This allows the client application to efficiently manipulate the contents of the list."]}),"\n",(0,n.jsxs)(s.p,{children:["Note that ",(0,n.jsx)(s.code,{children:"$List"})," format is a compressed binary format; for this reason, a property of type of ",(0,n.jsx)(s.strong,{children:"%List"})," cannot be set through SQL nor can its value be queried through SQL (such as with a WHERE clause)."]}),"\n",(0,n.jsxs)(s.p,{children:["Refer to the documentation on ",(0,n.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$List"})," in the ",(0,n.jsx)(s.em,{children:"ObjectScript Reference"})," for more information."]}),"\n",(0,n.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(s.h3,{id:"xsdtype",children:"XSDTYPE"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter XSDTYPE = "string";\n'})}),"\n",(0,n.jsx)(s.p,{children:"Declares the XSD type used when projecting XML Schemas."}),"\n",(0,n.jsx)(s.h3,{id:"jsontype",children:"JSONTYPE"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter JSONTYPE = "string";\n'})}),"\n",(0,n.jsx)(s.p,{children:"JSONTYPE is JSON type used for this datatype."}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"xsdtological",children:"XSDToLogical"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod XSDToLogical(%val As %String) As %List [ CodeMode = generator ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Converts the SOAP encoded input list value into a ObjectScript $list value."}),"\n",(0,n.jsx)(s.h3,{id:"logicaltoxsd",children:"LogicalToXSD"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToXSD(%val As %List) As %String [ CodeMode = generator ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Converts the ObjectScript $list value to the canonical SOAP encoded value."})]})}function l(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>o});var n=t(96540);const i={},r=n.createContext(i);function a(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);