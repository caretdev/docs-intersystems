"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[29302],{29467:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>c,frontMatter:()=>o,toc:()=>l});var s=t(74848),r=t(28453);const o={pagination_prev:null,pagination_next:null},a="Config.CPF",l=[{value:"Parameters",id:"parameters",level:2},{value:"CPFCURRENTVERSION",id:"cpfcurrentversion",level:3},{value:"DOMAIN",id:"domain",level:3},{value:"SOURCECONTROL",id:"sourcecontrol",level:3},{value:"Methods",id:"methods",level:2},{value:"ActivateOne",id:"activateone",level:3},{value:"Activate",id:"activate",level:3},{value:"Recover",id:"recover",level:3},{value:"CPFFileNeedsActivation",id:"cpffileneedsactivation",level:3},{value:"PendingRestart",id:"pendingrestart",level:3},{value:"Load",id:"load",level:3},{value:"CreateDefault",id:"createdefault",level:3},{value:"Convert",id:"convert",level:3},{value:"RemoveDuplicates",id:"removeduplicates",level:3},{value:"UpdateLines",id:"updatelines",level:3},{value:"UpdateLinesAgain",id:"updatelinesagain",level:3},{value:"MergeMaps",id:"mergemaps",level:3},{value:"ConvertTo20082",id:"convertto20082",level:3},{value:"ConvertTo20090",id:"convertto20090",level:3},{value:"ConvertTo20091",id:"convertto20091",level:3},{value:"ConvertTo200915",id:"convertto200915",level:3},{value:"ConvertTo20101",id:"convertto20101",level:3},{value:"ConvertTo201011",id:"convertto201011",level:3},{value:"ConvertTo201015",id:"convertto201015",level:3},{value:"ConvertTo201016",id:"convertto201016",level:3},{value:"ConvertTo201017",id:"convertto201017",level:3},{value:"ConvertTo201018",id:"convertto201018",level:3},{value:"ConvertTo20102",id:"convertto20102",level:3},{value:"ConvertTo201021",id:"convertto201021",level:3},{value:"ConvertTo20105",id:"convertto20105",level:3},{value:"ConvertTo201101",id:"convertto201101",level:3},{value:"ConvertTo201102",id:"convertto201102",level:3},{value:"ConvertTo201103",id:"convertto201103",level:3},{value:"ConvertTo201104",id:"convertto201104",level:3},{value:"ConvertTo201105",id:"convertto201105",level:3},{value:"ConvertTo201106",id:"convertto201106",level:3},{value:"ConvertTo20122",id:"convertto20122",level:3},{value:"ConvertTo20131",id:"convertto20131",level:3},{value:"ConvertTo20141",id:"convertto20141",level:3},{value:"ConvertTo20151",id:"convertto20151",level:3},{value:"ConvertTo20152",id:"convertto20152",level:3},{value:"ConvertTo20153",id:"convertto20153",level:3},{value:"ConvertTo20164",id:"convertto20164",level:3},{value:"ConvertTo20171",id:"convertto20171",level:3},{value:"ConvertTo201715",id:"convertto201715",level:3},{value:"ConvertTo201716",id:"convertto201716",level:3},{value:"ConvertTo201719",id:"convertto201719",level:3},{value:"ConvertTo201721",id:"convertto201721",level:3},{value:"ConvertTo201722",id:"convertto201722",level:3},{value:"ConvertTo2017225",id:"convertto2017225",level:3},{value:"ConvertTo201723",id:"convertto201723",level:3},{value:"ConvertTo201724",id:"convertto201724",level:3},{value:"ConvertTo201725",id:"convertto201725",level:3},{value:"ConvertTo201726",id:"convertto201726",level:3},{value:"ConvertTo20181",id:"convertto20181",level:3},{value:"ConvertTo201811",id:"convertto201811",level:3},{value:"ConvertTo201812",id:"convertto201812",level:3},{value:"ConvertTo201813",id:"convertto201813",level:3},{value:"ConvertTo201814",id:"convertto201814",level:3},{value:"ConvertTo201815",id:"convertto201815",level:3},{value:"ConvertTo201816",id:"convertto201816",level:3},{value:"ConvertTo201817",id:"convertto201817",level:3},{value:"ConvertTo201818",id:"convertto201818",level:3},{value:"ConvertTo201819",id:"convertto201819",level:3},{value:"ConvertTo201820",id:"convertto201820",level:3},{value:"ConvertTo20191",id:"convertto20191",level:3},{value:"ConvertTo201915",id:"convertto201915",level:3},{value:"ConvertTo20192",id:"convertto20192",level:3},{value:"ConvertTo20193",id:"convertto20193",level:3},{value:"ConvertTo20201",id:"convertto20201",level:3},{value:"ConvertTo202015",id:"convertto202015",level:3},{value:"ConvertTo20204",id:"convertto20204",level:3},{value:"ConvertTo20211",id:"convertto20211",level:3},{value:"ConvertTo202116",id:"convertto202116",level:3},{value:"ConvertTo202117",id:"convertto202117",level:3},{value:"ConvertTo202118",id:"convertto202118",level:3},{value:"ConvertTo20212",id:"convertto20212",level:3},{value:"ConvertTo202121",id:"convertto202121",level:3},{value:"ConvertTo202122",id:"convertto202122",level:3},{value:"ConvertTo202123",id:"convertto202123",level:3},{value:"ConvertTo20221",id:"convertto20221",level:3},{value:"ConvertTo202215",id:"convertto202215",level:3},{value:"ConvertTo20222",id:"convertto20222",level:3},{value:"ConvertTo202221",id:"convertto202221",level:3},{value:"ConvertGateways",id:"convertgateways",level:3},{value:"ConvertTo202222",id:"convertto202222",level:3},{value:"ConvertTo202223",id:"convertto202223",level:3},{value:"ConvertTo20223",id:"convertto20223",level:3},{value:"ConvertTo202232",id:"convertto202232",level:3},{value:"ConvertTo202233",id:"convertto202233",level:3},{value:"ConvertTo20231",id:"convertto20231",level:3},{value:"ConvertTo202311",id:"convertto202311",level:3},{value:"ConvertTo202312",id:"convertto202312",level:3},{value:"ConvertTo20232",id:"convertto20232",level:3},{value:"ConvertTo202321",id:"convertto202321",level:3},{value:"ConvertTo20233",id:"convertto20233",level:3},{value:"ConvertTo202331",id:"convertto202331",level:3},{value:"ConvertTo202332",id:"convertto202332",level:3},{value:"ConvertTo202334",id:"convertto202334",level:3},{value:"ConvertTo202335",id:"convertto202335",level:3},{value:"ConvertTo202337",id:"convertto202337",level:3},{value:"ConvertTo20241",id:"convertto20241",level:3},{value:"ConvertTo202413",id:"convertto202413",level:3},{value:"ConvertTo202414",id:"convertto202414",level:3},{value:"ConvertTo202415",id:"convertto202415",level:3},{value:"ConvertTo202416",id:"convertto202416",level:3},{value:"ConvertTo20242",id:"convertto20242",level:3},{value:"ConvertTo202421",id:"convertto202421",level:3},{value:"ConvertTo20243",id:"convertto20243",level:3},{value:"LogCPFChange",id:"logcpfchange",level:3},{value:"FileToName",id:"filetoname",level:3},{value:"GetName",id:"getname",level:3},{value:"GetErrorText",id:"geterrortext",level:3},{value:"MoveToActive",id:"movetoactive",level:3},{value:"ReadCheck",id:"readcheck",level:3},{value:"MergeCmd",id:"mergecmd",level:3},{value:"Merge",id:"merge",level:3},{value:"Test",id:"test",level:3},{value:"MergeActions",id:"mergeactions",level:3},{value:"Actions",id:"actions",level:3},{value:"ReadActions",id:"readactions",level:3},{value:"ValidateActions",id:"validateactions",level:3},{value:"ExecuteActions",id:"executeactions",level:3},{value:"Action",id:"action",level:3},{value:"ReplaceMacro",id:"replacemacro",level:3},{value:"DefineActions",id:"defineactions",level:3},{value:"CreateDatabase",id:"createdatabase",level:3},{value:"ModifyDatabase",id:"modifydatabase",level:3},{value:"DeleteDatabase",id:"deletedatabase",level:3},{value:"ValidateDatabaseProperties",id:"validatedatabaseproperties",level:3},{value:"CollectProperties",id:"collectproperties",level:3},{value:"Read",id:"read",level:3},{value:"Reset",id:"reset",level:3},{value:"ValidateSection",id:"validatesection",level:3},{value:"Validate",id:"validate",level:3},{value:"Write",id:"write",level:3},{value:"WriteLastGood",id:"writelastgood",level:3}];function i(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"configcpf",children:"Config.CPF"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Class Config.CPF Extends Config.CommonMethods [ Abstract, System = 4 ]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(n.h3,{id:"cpfcurrentversion",children:"CPFCURRENTVERSION"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter CPFCURRENTVERSION = 2024.3;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"domain",children:"DOMAIN"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Parameter DOMAIN = "%Utility";\n'})}),"\n",(0,s.jsx)(n.h3,{id:"sourcecontrol",children:"SOURCECONTROL"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Parameter SOURCECONTROL [ Internal ] = {"Revision path: $Id: //iris/2024.3.0/databases/sys/cls/Config/CPF.xml#3 $"_$c(13,10)_"Last Change:   $DateTime: 2024/10/18 10:38:24 $"_$c(13,10)_"Changelist #:  $Change: 7293289 $"_$c(13,10)_"Checked in by: $Author: build $"};\n'})}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"activateone",children:"ActivateOne"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ActivateOne(Properties) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Write out the CPF file from the object, then activate it"}),"\n",(0,s.jsx)(n.h3,{id:"activate",children:"Activate"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Activate() As %Status\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Read and activate the current CPF file.",(0,s.jsx)(n.br,{}),"\nThis method will read the currently active CPF file if it has been updated on disk but not yet read in. After the current settings have been read in, they are activated."]}),"\n",(0,s.jsx)(n.h3,{id:"recover",children:"Recover"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Recover() As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"If the system is in a state where none of the namespaces work (e.g.  when trying to execute a routine which should be there in %SYS), this call will reset the system with the values currently in the CPF file. This is primarily used for debugging EMS when you have downloaded a bad namespace map."}),"\n",(0,s.jsx)(n.h3,{id:"cpffileneedsactivation",children:"CPFFileNeedsActivation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod CPFFileNeedsActivation(ByRef Msg As %String) As %Boolean\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Returns 0/1 if the CPF file has been modified but not activated.",(0,s.jsx)(n.br,{}),"\nIf it has been modified by an editor, an activation must occur before any of the Config methods can be called to activate any additional changes."]}),"\n",(0,s.jsx)(n.h3,{id:"pendingrestart",children:"PendingRestart"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod PendingRestart(ByRef Reasons As %String) As %Boolean\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Determines if a restart of the system is required in order to activate modified CPF parameters.",(0,s.jsx)(n.br,{}),"\nReturn Values:",(0,s.jsx)(n.br,{}),"\n0 - Restart is not required",(0,s.jsx)(n.br,{}),"\n1 - Restart is required",(0,s.jsx)(n.br,{}),"\nReasons - If a restart is required, an array of reasons why in the following format.",(0,s.jsx)(n.br,{}),"\nReasons=1",(0,s.jsx)(n.br,{}),'\nReasons(1,"New")=New value',(0,s.jsx)(n.br,{}),'\nReasons(1,"Old")=Old Value',(0,s.jsx)(n.br,{}),'\nReasons(1,"Property")=Property name',(0,s.jsx)(n.br,{}),'\nReasons(1,"Section")=Section name',(0,s.jsx)(n.br,{}),'\nReasons(1)="Restart required because section [xxx], property yyy modified, new value:zzz, old value:zzz"',(0,s.jsx)(n.br,{}),"\nNote that if the CPF file has been modified, but not yet activated, this method will return 1, and the following array:",(0,s.jsx)(n.br,{}),"\nReasons=1",(0,s.jsx)(n.br,{}),'\nReasons(1)="Restart or reactivation required because the CPF file xxxx has been modified, but not activated"',(0,s.jsx)(n.br,{}),'\nReasons(1,"New")=""',(0,s.jsx)(n.br,{}),'\nReasons(1,"Old")=""',(0,s.jsx)(n.br,{}),'\nReasons(1,"Property")=""',(0,s.jsx)(n.br,{}),'\nReasons(1,"Section")=""']}),"\n",(0,s.jsx)(n.h3,{id:"load",children:"Load"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Load() As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Load the various sections of the CPF file which can be reactivated."}),"\n",(0,s.jsx)(n.h3,{id:"createdefault",children:"CreateDefault"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod CreateDefault(Directory As %String = "", Overview As %String, Type As %String) As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Create a default iris.cpf file."}),"\n",(0,s.jsx)(n.h3,{id:"convert",children:"Convert"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod Convert(ByRef CPFFile As %String = "", Flags As %Integer = 0) As %Status\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert a CPF file to the current version.",(0,s.jsx)(n.br,{}),"\nThis method will take a CPF file and convert it to the current version. Note that it will not do any validation on the file, it will simply convert it.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Flags"})," - Internal use only, do not pass."]}),"\n",(0,s.jsx)(n.h3,{id:"removeduplicates",children:"RemoveDuplicates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod RemoveDuplicates(CPFFile As %String, Flags As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"updatelines",children:"UpdateLines"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod UpdateLines(CPFFile As %String = "", ByRef Lines As %String, Flags As %Integer) As %Status [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Update lines in the CPF file.",(0,s.jsx)(n.br,{}),"\nThis method will take an array of error messages generated by the Validate method(), and determine if there any of these messages are related to overlapping range mappings. If there are, it will take the range overlaps and generate non-overlapping ranges. For example if you had the following mappings:"]}),"\n",(0,s.jsxs)(n.p,{children:["A:C -> DB1",(0,s.jsx)(n.br,{}),"\nB:D -> DB2"]}),"\n",(0,s.jsx)(n.p,{children:"it would generate the following mappings instead:"}),"\n",(0,s.jsxs)(n.p,{children:["A:C -> DB1",(0,s.jsx)(n.br,{}),"\nC:D -> DB2"]}),"\n",(0,s.jsxs)(n.p,{children:["Parameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Lines (by ref)"})," - Array of line numbers to update in the CPF file. Each line contains the error message about how that line overlaps with some previous line. For example:"]}),"\n",(0,s.jsxs)(n.p,{children:['Lines(186)="Overlapped mapping "_$c(0)_"(Note):(Notf)"_$c(0)_" mapping overlaps with a prior mapping "_$c(0)_"(Notes)"_$c(0)_" , LINE:\'Global_Note*=DOCBOOK,5\' at line 186 "',(0,s.jsx)(n.br,{}),'\nLines(187)="Overlapped mapping "_$c(0)_"(Not):(Nou)"_$c(0)_" mapping overlaps with a prior mapping "_$c(0)_"(Notes)"_$c(0)_" , LINE:\'Global_Not*=DOCBOOK,5\' at line 187 "']}),"\n",(0,s.jsx)(n.h3,{id:"updatelinesagain",children:"UpdateLinesAgain"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod UpdateLinesAgain(CPFFile As %String = "", ByRef UpdateLinesAgain As %String, Flags As %Integer) As %Status [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Update lines in the CPF file.",(0,s.jsx)(n.br,{}),"\nThis method is used by the CPF file converter to help convert overlaping mappings from 2008.2 or previous version CPF files to 2009.1 non-overlapped mappings.",(0,s.jsx)(n.br,{}),"\nThis is part of the handling when we have a mapping of the form:"]}),"\n",(0,s.jsxs)(n.p,{children:["Line 1) A:C -> DB1",(0,s.jsx)(n.br,{}),"\nLine 2) A -> DB2",(0,s.jsx)(n.br,{}),'\nLine 3) A("r"):A("S") -> DB3']}),"\n",(0,s.jsx)(n.p,{children:"converts to"}),"\n",(0,s.jsxs)(n.p,{children:["Line 1) A.:C -> DB1",(0,s.jsx)(n.br,{}),'\nLine 2) A -> DB1 ; Note that the rest of this mapping is "hidden" by A.:C',(0,s.jsx)(n.br,{}),'\nLine 3) A("r"):A("S") -> DB3']}),"\n",(0,s.jsxs)(n.p,{children:["This method handles resolving and fixing up of line 1 and 2 (line 3 was resolved by UpdateLines() )",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"UpdateLinesAgain(by ref)"})," - Array of information to update mappings, generated by the UpdateLines() method."]}),"\n",(0,s.jsx)(n.h3,{id:"mergemaps",children:"MergeMaps"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod MergeMaps(CPFFile As %String = "", Flags As %Integer) As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Merge map ranges back into wildcards."}),"\n",(0,s.jsx)(n.h3,{id:"convertto20082",children:"ConvertTo20082"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20082(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2008.2.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto20090",children:"ConvertTo20090"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20090(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2009.0.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto20091",children:"ConvertTo20091"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20091(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2009.1.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto200915",children:"ConvertTo200915"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo200915(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2009.15.",(0,s.jsx)(n.br,{}),"\nThis is the start of the conversion to 2010.1 format. Parameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto20101",children:"ConvertTo20101"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20101(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2010.1.",(0,s.jsx)(n.br,{}),"\nThis continues the conversion to 2010.1 format, started by ConvertTo200915.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201011",children:"ConvertTo201011"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201011(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2010.11.",(0,s.jsx)(n.br,{}),"\nThis finishes the conversion to version 2010.1 format, started by ConvertTo200915.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201015",children:"ConvertTo201015"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201015(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2010.15.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2010.2 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201016",children:"ConvertTo201016"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201016(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2010.16.",(0,s.jsx)(n.br,{}),"\nThis continues the conversion to 2010.2 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201017",children:"ConvertTo201017"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201017(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2010.17.",(0,s.jsx)(n.br,{}),"\nThis continues the conversion to 2010.2 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201018",children:"ConvertTo201018"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201018(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2010.18.",(0,s.jsx)(n.br,{}),"\nThis continues the conversion to 2010.2 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto20102",children:"ConvertTo20102"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20102(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2010.2.",(0,s.jsx)(n.br,{}),"\nThis finishes the conversion to 2010.2 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201021",children:"ConvertTo201021"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201021(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto20105",children:"ConvertTo20105"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20105(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto201101",children:"ConvertTo201101"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201101(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2011.01.",(0,s.jsx)(n.br,{}),"\nThis continues the conversion to 2011.1 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201102",children:"ConvertTo201102"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201102(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2011.02.",(0,s.jsx)(n.br,{}),"\nThis continues the conversion to 2011.1 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201103",children:"ConvertTo201103"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201103(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2011.03.",(0,s.jsx)(n.br,{}),"\nThis continues the conversion to 2011.1 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201104",children:"ConvertTo201104"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201104(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2011.04.",(0,s.jsx)(n.br,{}),"\nThis finishes the conversion to version 2011.1.x. Note: 2011.1.x and 2012.1.x CPF file formats are the same. Parameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201105",children:"ConvertTo201105"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201105(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto201106",children:"ConvertTo201106"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201106(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2011.06.",(0,s.jsx)(n.br,{}),"\nThis continues the conversion to 2012.2 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto20122",children:"ConvertTo20122"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20122(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2012.2.",(0,s.jsx)(n.br,{}),"\nThis finishes the conversion to 2012.2 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto20131",children:"ConvertTo20131"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20131(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2013.1.",(0,s.jsx)(n.br,{}),"\nThis finishes the conversion to 2013.1 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto20141",children:"ConvertTo20141"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20141(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2014.1.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2014.1 format.",(0,s.jsx)(n.br,{}),"\nNote that there was no version 2013.2. 2013.2 is the same version as 2013.1 Parameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto20151",children:"ConvertTo20151"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20151(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2015.1.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2015.1 format.",(0,s.jsx)(n.br,{}),"\nNote that there was no version 2014.2. 2014.2 is the same version as 2014.1. Parameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto20152",children:"ConvertTo20152"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20152(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2015.2.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2015.2 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto20153",children:"ConvertTo20153"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20153(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2015.3.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2015.3 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto20164",children:"ConvertTo20164"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20164(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2016.4.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2016.4 format.",(0,s.jsx)(n.br,{}),"\n(Note that 2016.4 was not a released product).",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto20171",children:"ConvertTo20171"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20171(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2017.1.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2017.1 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201715",children:"ConvertTo201715"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201715(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2017.15.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2017.15 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201716",children:"ConvertTo201716"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201716(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2017.16.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2017.16 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201719",children:"ConvertTo201719"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201719(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2017.19.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2017.19 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201721",children:"ConvertTo201721"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201721(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2017.21.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2017.21 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201722",children:"ConvertTo201722"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201722(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2017.22.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2017.22 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto2017225",children:"ConvertTo2017225"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo2017225(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2017.225.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2017.225 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201723",children:"ConvertTo201723"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201723(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2017.23.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2017.23 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201724",children:"ConvertTo201724"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201724(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["THIS IS WHERE IRIS DIVERGES FROM CACHE. Start of IRIS 2018.1 changes through 2018.15 This only gets run for Cache->IRIS conversions Convert the CPFFile to version 2017.24.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2017.24 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201725",children:"ConvertTo201725"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201725(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2017.25.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2017.25 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201726",children:"ConvertTo201726"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201726(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2017.26.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2017.26 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto20181",children:"ConvertTo20181"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20181(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2018.1.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2018.1 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201811",children:"ConvertTo201811"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201811(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2018.11.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2018.11 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201812",children:"ConvertTo201812"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201812(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2018.12.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2018.12 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201813",children:"ConvertTo201813"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201813(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert the CPFFile to version 2018.13.",(0,s.jsx)(n.br,{}),"\nThis starts the conversion to 2018.13 format.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert."]}),"\n",(0,s.jsx)(n.h3,{id:"convertto201814",children:"ConvertTo201814"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201814(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto201815",children:"ConvertTo201815"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201815(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"This completes the IRIS 2018.1 CPF conversion"}),"\n",(0,s.jsx)(n.h3,{id:"convertto201816",children:"ConvertTo201816"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201816(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"THIS IS THE START OF CHANGES IN IRIS 2018.2 Note that EnableVSSBackup was added to Cache 2018.1 kits,and must be catered for here."}),"\n",(0,s.jsx)(n.h3,{id:"convertto201817",children:"ConvertTo201817"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201817(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto201818",children:"ConvertTo201818"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201818(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto201819",children:"ConvertTo201819"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201819(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"This is the end of the 2018.1 to 2018.2 IRIS upgrade changes"}),"\n",(0,s.jsx)(n.h3,{id:"convertto201820",children:"ConvertTo201820"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201820(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"THis is the start of the IRIS 2018.2 to 2019.1 CPF conversion"}),"\n",(0,s.jsx)(n.h3,{id:"convertto20191",children:"ConvertTo20191"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20191(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"This is the end of the 2019.1 conversion"}),"\n",(0,s.jsx)(n.h3,{id:"convertto201915",children:"ConvertTo201915"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo201915(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"This is the start of the 2019.1 to 2019.2 conversion"}),"\n",(0,s.jsx)(n.h3,{id:"convertto20192",children:"ConvertTo20192"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20192(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"This is the end of the 2019.1 to 2019.2 conversion"}),"\n",(0,s.jsx)(n.h3,{id:"convertto20193",children:"ConvertTo20193"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20193(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"This is the end of the 2019.2 to 2019.3 conversion"}),"\n",(0,s.jsx)(n.h3,{id:"convertto20201",children:"ConvertTo20201"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20201(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202015",children:"ConvertTo202015"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202015(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto20204",children:"ConvertTo20204"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20204(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto20211",children:"ConvertTo20211"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20211(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202116",children:"ConvertTo202116"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202116(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202117",children:"ConvertTo202117"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202117(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202118",children:"ConvertTo202118"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202118(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto20212",children:"ConvertTo20212"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20212(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202121",children:"ConvertTo202121"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202121(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202122",children:"ConvertTo202122"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202122(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202123",children:"ConvertTo202123"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202123(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto20221",children:"ConvertTo20221"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20221(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202215",children:"ConvertTo202215"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202215(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto20222",children:"ConvertTo20222"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20222(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202221",children:"ConvertTo202221"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202221(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertgateways",children:"ConvertGateways"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertGateways(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202222",children:"ConvertTo202222"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202222(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202223",children:"ConvertTo202223"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202223(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto20223",children:"ConvertTo20223"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20223(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202232",children:"ConvertTo202232"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202232(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202233",children:"ConvertTo202233"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202233(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto20231",children:"ConvertTo20231"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20231(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202311",children:"ConvertTo202311"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202311(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202312",children:"ConvertTo202312"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202312(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto20232",children:"ConvertTo20232"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20232(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202321",children:"ConvertTo202321"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202321(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto20233",children:"ConvertTo20233"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20233(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202331",children:"ConvertTo202331"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202331(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202332",children:"ConvertTo202332"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202332(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202334",children:"ConvertTo202334"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202334(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202335",children:"ConvertTo202335"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202335(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202337",children:"ConvertTo202337"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202337(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto20241",children:"ConvertTo20241"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20241(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202413",children:"ConvertTo202413"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202413(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202414",children:"ConvertTo202414"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202414(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202415",children:"ConvertTo202415"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202415(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202416",children:"ConvertTo202416"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202416(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto20242",children:"ConvertTo20242"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20242(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto202421",children:"ConvertTo202421"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo202421(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"convertto20243",children:"ConvertTo20243"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ConvertTo20243(ByRef CPFFile As %String = "", Flags As %Integer = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"logcpfchange",children:"LogCPFChange"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod LogCPFChange(Message As %String, Flags As %Integer = 3) [ Internal ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:['----------------------------------------------------------- CPF CONVERSIONS MUST BE ADDED BEFORE THIS DOCUMENTATION SECTION. BEFORE ADDING A CPF CONVERSION PLEASE CHECK WITH STEVE CLAY, AND READ THE DOCUMENTATION SECTION BELOW. ----------------------------------------------------------- New CPF conversions should only be done in the /iris/latest branch and then ported to private branches in order to prevent version collision. New CPF conversions should not be added in maintenance versions (e.g. 2019.1.x), only /iris/latest. The sequence of conversion between major releases should be as follows; This illustrates what methods should be added between version 2019.1 and 2019.2. The same procedure would be used between 2019.2 and 2019.3, and 2019.3 and 2020.1. Please see the changes in STC2916 which demonstrates the code changes in the procedure described here. 1) Assume the current CPF version is 2019.1. The last conversion method is named ConvertTo20191 which got us to this point. 2) Update the relevant Config.* class. In this case, I added a new data type to the Config.SqlSysDatatypes class. This meant adding a line in the Default() method. Other classes may require a property addition and a storage definition change. Make sure you add new storage definitions for new properties at the end of the list. 3) The first time a parameter is added post 2019.1, create a method ConvertTo201915() (add a 5 to name). It is usually easiest to copy a previous conversion method and modify it. This is the first method called in a 2019.2 upgrade. In this method you need to save off the existing 2019.1 CPF file with this line: if \'##Class(%Library.File).CopyFile(CPFFile,CPFFile_"_BeforeConvertTo2019.2") { QUIT $$$ERROR($$$FileCanNotCopy,CPFFile,CPFFile_"_BeforeConvertTo2019.2") } 4) Make the code changes in ConvertTo201915() to add the new parameter to the file. In this case I added the parameter [SqlSysDatatypes] MEDIUMTEXT=%Stream.GlobalCharacter. You can add 1 or more parameters each time you convert. 5) Update the Convert() method to add a call to ConvertTo201915 i Version<2019.15 { s Status=..ConvertTo201915(CPFFile, Flags) i \'$$$ISOK(Status) g Exit } Also update the CPFCURRENTVERSION parameter value defined at the beginning of this class to the current version: Parameter CPFCURRENTVERSION As String = "2019.15"; 6) Now add a ConvertTo20192 method. In this method add the code: if Nameup="LASTCONVERTTIME" { write "LastConvertTime="_$zdatetime($h,3),! do ..LogCPFChange("----------CPF conversion detail------------") do ..LogCPFChange("Changes in format between 2019.1 and 2019.2") do ..LogCPFChange("Add [SqlSysDatatypes] MEDIUMTEXT=%Stream.GlobalCharacter") continue } And make the version 2019.2: if (Sectionup="CONFIGFILE"),(Nameup="VERSION") { write "Version=2019.2",! continue } Do NOT add a call to the ConvertTo20192() method in Convert() at this time. This will be added later. 7) You can test by taking an existing 2019.1 CPF file (not the one in your working configuration) and calling the following: s Status=##Class(Config.CPF).Convert("c:\\test\\iris.cpf") Examine the CPF file and verify that the version is 2019.15, and your parameter is added/modified. 8) You are now ready to test on your existing system. Call the following from a terminal in your instance: s Status=##Class(Config.CPF).Validate() Validate() performs a test conversion on your instances CPF file, and validates that the resulting CPF file is syntactically correct, and reports any errors. 9) Once you are satisfied that the conversion is correct, shut the system down, then restart. It should start, and your CPF file should be converted to the new version 2019.15, and the parameters added/modified. If the system does not start, examine the messages.log file for errors. Confirm that the previous CPF file was copied to IRIS.CPF_BeforeConvertTo2019.2. If necessary use emergency startup, fix any issues with your code, and restart. 10) Now check in your code to /iris/latest. You can then sync your private branch with /iris/latest to get this and all the previous CPF file changes. 11) It is at this point that you can introduce code to your private branch which actually uses the updated information from the CPF file. 12) Now to add the next set of parameters to 2019.2, create a method called ConvertTo201916() (easiest to copy CopyTo201915() and modify it.) (bump last number by 1, until you get to 201919. Then go 2019191, 2019192,...) Add your conversion code here, and bump the version to 2019.16. Make sure you do NOT add the line to save off the existing CPF file as you had previously saved off the 2019.1 file. 13) Add a line to the ConvertTo20192() method at the end of the Nameup="LASTCONVERTTIME" section describing what was modified. if Nameup="LASTCONVERTTIME" { write "LastConvertTime="_$zdatetime($h,3),! do ..LogCPFChange("----------CPF conversion detail------------") do ..LogCPFChange("Changes in format between 2019.1 and 2019.2") do ..LogCPFChange("Add [SqlSysDatatypes] MEDIUMTEXT=%Stream.GlobalCharacter") do ..LogCPFChange("Add NEW STUFF HERE") continue } 14) Add a line to the Convert() method to call ConvertTo201916() 15) Go to Step 7 to validate your conversion. 16) You can continue adding conversions by following steps 11-15. 17) Now when you are done adding parameters to 2019.2, add a call to ConvertTo20192() in the Convert() method (this should be done near release.) This will bump the version to 2019.2, and list all the changes between 2019.1 and 2019.2 at the bottom of the CPF file. 18) If you need to add an additional parameter for 2019.2 after you have already bumped the version number to 2019.2 (e.g. a late in the release change), use 2019.21. 19) The end result of a conversion procedure between major versions should be the following: A) An IRIS.CPF_BeforeConvertTo2019.2 file is created which is the 2019.1 format CPF file. B) All conversions included in the 2019.2 CPF file. C) A record of all the conversions in the [Conversions] section. They should be sub-divided into a list of CPF conversions between each major version. D) A clean upgrade stream for developers as new conversions are added between major releases. NOTES: Sometimes an experimental CPF parameter is added using the "PROPERTIESMAYBEINCPF" mechanism. In this case the parameter may or may not exist in the CPF file, and is usually added by hand. If the property becomes "non-experimental", the CPF conversion needs to decide whether to add it or not to the CPF file depending on whether it was already added or not. The conversion code should create a GetOldParams() subroutine and determine if the parameter already exists or not in the CPF file. See this tag and its usage in the ConvertTo20191() method. Another case where this subroutine may become necessary is if a CPF parameter was added in a project branch, and then promoted to /iris/latest. =============================================================================== Log the conversion details in the CPF file, and also to the messages.log file if not running the validator. Note that the Temp file must be open and the current device if called in order to log to the CPF file.',(0,s.jsx)(n.br,{}),"\nFlags - Bit string of options.",(0,s.jsx)(n.br,{}),"\nBit 0 - Log to messages.log",(0,s.jsx)(n.br,{}),"\nBit 1 - Log to CPF file"]}),"\n",(0,s.jsx)(n.h3,{id:"filetoname",children:"FileToName"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod FileToName(ByRef CPFFile As %String = "", ByRef CPFName As %String = "", ByRef CPFMapFile As %String = "", ByRef CPFMapName As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Convert a CPF file name to an internal name.",(0,s.jsx)(n.br,{}),"\nBasically, this strips off the directory specification and the .CPF file extension, and uses the resulting name as part of the index. On windows and VMS, the name is uppercased, on unix it is not. For example:"]}),"\n",(0,s.jsxs)(n.p,{children:["c:\\abc\\iris.cpf ---\x3e IRIS",(0,s.jsx)(n.br,{}),"\n/abc/iris.cpf ---\x3e iris",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to convert its name.",(0,s.jsx)(n.br,{}),"\nReturn Values:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," by ref - Normalized CPF file name",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFName"})," by ref - Converted name to use in the index",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFMapFile"})," by ref - Used as temporary storage when creating global/routine/package mappings ",(0,s.jsx)(n.strong,{children:"CPFName by ref - Used as temporary storage name"})]}),"\n",(0,s.jsx)(n.h3,{id:"getname",children:"GetName"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod GetName(CPFFile As %String = "") As %String [ Internal ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Convert a CPF file name to an internal name."}),"\n",(0,s.jsx)(n.h3,{id:"geterrortext",children:"GetErrorText"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetErrorText(Status As %Status, Flags As %Integer = {$$$ErrorTextToScreen}, ByRef ErrorText As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Convert a multiple entry %Status variable to text and output it.",(0,s.jsx)(n.br,{}),"\nThis method should be used on a %Status variable returned from the Read() method. ",(0,s.jsx)(n.strong,{children:"Flags"})," - Options for error text",(0,s.jsx)(n.br,{}),"\nBit $$$ErrorTextToScreen - Write error text to terminal",(0,s.jsx)(n.br,{}),"\nBit $$$ErrorTextToConsole - Write error text to messages.log",(0,s.jsx)(n.br,{}),"\nBit $$$ErrorTextToArray - Return error text in ErrorText array"]}),"\n",(0,s.jsx)(n.h3,{id:"movetoactive",children:"MoveToActive"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod MoveToActive(Obj As %ObjectHandle = "", Flags As %Integer = 1) As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Move the entire config object to the ^CONFIG global."}),"\n",(0,s.jsx)(n.h3,{id:"readcheck",children:"ReadCheck"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod ReadCheck(ByRef CPFFile As %String = "", Flags As %Integer = 0, ByRef CPFName As %String = "", ByRef WillRead As %Boolean) [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"mergecmd",children:"MergeCmd"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod MergeCmd(CPFFile As %String = "", CPFMergeFile As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"merge",children:"Merge"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod Merge(CPFFile As %String = "", CPFMergeFile As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Merge two CPF files into one CPF file.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - Valid CPF file to be used for base of the merge.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFMergeFile"})," - Set of valid CPF file sections and parameters use to override parameters in the CPFFile.",(0,s.jsx)(n.br,{}),"\nReturn Values:",(0,s.jsx)(n.br,{}),"\nStatus - Success or list of errors in the MergeCPFFile from the Validate() method.",(0,s.jsx)(n.br,{}),"\nCPFFile will contain the merged fields."]}),"\n",(0,s.jsx)(n.h3,{id:"test",children:"Test"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod Test(File = "MERGE.CPF") As %Status [ Internal, ProcedureBlock = 0 ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"mergeactions",children:"MergeActions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod MergeActions(ActionsFile As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"actions",children:"Actions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Actions(ActionsFile As %String, ByRef Index As %Integer, ActionsOutFile As %String, Flags As %Integer = {$$$ActionRead+$$$ActionValidate+$$$ActionExecute}, DisplayFlags As %Integer = {$$$ErrorTextToConsole}, ByRef ErrorText As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"readactions",children:"ReadActions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ReadActions(File As %String, ByRef Index As %Integer, OutFile As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"validateactions",children:"ValidateActions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ValidateActions(Index As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Validate Actions.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Index"}),' - ^SYS("CPFMerge",Index) to validate.']}),"\n",(0,s.jsx)(n.h3,{id:"executeactions",children:"ExecuteActions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ExecuteActions(Index As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"action",children:"Action"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Action(Index As %Integer, Flags As %Integer, Order As %Integer, Action As %String, ByRef Actions As %String) [ Internal ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"replacemacro",children:"ReplaceMacro"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ReplaceMacro(Value) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"defineactions",children:"DefineActions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod DefineActions(ByRef Actions As %String) [ Internal ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"This method defines the actions which are valid, and in what order they are executed."}),"\n",(0,s.jsx)(n.h3,{id:"createdatabase",children:"CreateDatabase"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod CreateDatabase(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.p,{children:'This method combines the "CreateOne" methods for both SYS.Database and Config.Datatabases, allowing the user to specify a single "CreateDatabase" directive in their [Actions] block, e.g.: [Actions] CreateDatabase:Name=irisdm,Directory=irisdm If only a logical database is desired, for example when configuring an ECP Client, one can suppress the SYS.Database call using property "LogicalOnly": [Actions] CreateDatabase:Name=irisdm,Directory=irisdm,LogicalOnly=1 To copy the contents of a pre-existing database into a new one, include property "Seed": [Actions] CreateDatabase:Name=irisdm,Directory=irisdm,Seed=/path/to/some-db Properties may pertain to SYS.Database, Config.Databases, or both; properties which don\'t apply will be ignored.'}),"\n",(0,s.jsx)(n.h3,{id:"modifydatabase",children:"ModifyDatabase"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ModifyDatabase(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"deletedatabase",children:"DeleteDatabase"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod DeleteDatabase(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"validatedatabaseproperties",children:"ValidateDatabaseProperties"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ValidateDatabaseProperties(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Validate that all of the properties passed in belong to at least one of SYS.Database or Config.Databases"}),"\n",(0,s.jsx)(n.h3,{id:"collectproperties",children:"CollectProperties"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod CollectProperties(ClassName As %String, ByRef Properties As %String) [ Internal ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Add properties from the passed-in class to a list of properties."}),"\n",(0,s.jsx)(n.h3,{id:"read",children:"Read"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod Read(ByRef CPFFile As %String = "", Flags As %Integer = 0, ByRef CPFName As %String = "", ByRef WasRead As %Boolean, ByRef Updates As %String) [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Read a CPF file into a config object.",(0,s.jsx)(n.br,{}),"\nThe CPF file is only read in if it has been modified with an editor since the last time it was read.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to read.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Flags"}),(0,s.jsx)(n.br,{}),"\nBit $$$CPFReadValidateOnly - Validate CPFFile but don't import.",(0,s.jsx)(n.br,{}),"\nBit $$$CPFReadForceRead - Force read of file even if file hash is the same",(0,s.jsx)(n.br,{}),"\nReturn values:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," by ref - Normalized CPF file name.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFName"})," by ref - Converted name.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"WasRead"})," by ref - 0/1 if file was actually read into the object.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Updates"})," by ref - Internal use only. Array used to pass in the Super Server, Web server ports and Utility WQM Category's MaxActiveWorkers and DefaultWorkers during installation.",(0,s.jsx)(n.br,{}),"\nNote that if we pass the Validate flag, the file will be modified to change the format of it to the current version."]}),"\n",(0,s.jsx)(n.h3,{id:"reset",children:"Reset"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Reset() [ Internal ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"This method forces a reset of the CPF file such that the next time the system restarts, it will be read in, and the new config objects and ^CONFIG global is populated and activated."}),"\n",(0,s.jsx)(n.h3,{id:"validatesection",children:"ValidateSection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ValidateSection(ByRef Section As %String, ByRef ID As %String, ByRef Sections As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Validate that the section name read in from the CPF file is a valid section, and in the right order in the file.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Section"})," - Name of the section we just read.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Sections"})," by ref - Comma separated list of valid sections. Return Values:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Section"}),' - Normalized name of the section we just read. If a [Map.XXXX] section return "Map" piece.',(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Namespace"})," by ref - If a [Map.XXXX] section, returns the XXX (namespace) piece. ",(0,s.jsx)(n.strong,{children:"Sections"})," by ref - Comma separated list of valid sections, with the section just read removed from the list."]}),"\n",(0,s.jsx)(n.h3,{id:"validate",children:"Validate"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod Validate(ByRef CPFFile As %String = "", Flags As %Integer = {$$$ErrorTextToScreen}, ByRef ErrorText As %String) As %Status\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Validate a CPFFile.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to validate.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Flags"})," - Options for error text. Macros defined in %syConfig.inc.",(0,s.jsx)(n.br,{}),"\nBit $$$ErrorTextToScreen - Write error text to terminal",(0,s.jsx)(n.br,{}),"\nBit $$$ErrorTextToConsole - Write error text to messages.log",(0,s.jsx)(n.br,{}),"\nBit $$$ErrorTextToArray - Return error text in ErrorText array"]}),"\n",(0,s.jsx)(n.h3,{id:"write",children:"Write"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod Write(ByRef CPFFile As %String = "")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Write to the CPF file from the config object.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"CPFFile"})," - CPF file to write, default is currently active one."]}),"\n",(0,s.jsx)(n.h3,{id:"writelastgood",children:"WriteLastGood"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod WriteLastGood() [ Internal ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Write the active CPF file to the _lastgood_.cpf file"})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(96540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);