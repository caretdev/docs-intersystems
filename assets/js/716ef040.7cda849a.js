"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[48082],{92053:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>a,default:()=>c,frontMatter:()=>i,toc:()=>o});var t=n(74848),r=n(28453);const i={pagination_prev:null,pagination_next:null},a="%SYSTEM.Process",o=[{value:"Methods",id:"methods",level:2},{value:"ThrowError",id:"throwerror",level:3},{value:"CallingRoutine",id:"callingroutine",level:3},{value:"CallingDatabase",id:"callingdatabase",level:3},{value:"ParentRoutine",id:"parentroutine",level:3},{value:"ParentDatabase",id:"parentdatabase",level:3},{value:"RandomSeed",id:"randomseed",level:3},{value:"StepInfo",id:"stepinfo",level:3},{value:"LanguageMode",id:"languagemode",level:3},{value:"SetNamespace",id:"setnamespace",level:3},{value:"MemoryAutoExpandStatus",id:"memoryautoexpandstatus",level:3},{value:"IODollarTest",id:"iodollartest",level:3},{value:"GetCPUTime",id:"getcputime",level:3},{value:"StoreErrorReason",id:"storeerrorreason",level:3},{value:"KillAllPrivateGlobals",id:"killallprivateglobals",level:3},{value:"Undefined",id:"undefined",level:3},{value:"NullSubscripts",id:"nullsubscripts",level:3},{value:"OpenMode",id:"openmode",level:3},{value:"FileMode",id:"filemode",level:3},{value:"BreakMode",id:"breakmode",level:3},{value:"RefInKind",id:"refinkind",level:3},{value:"LineRecall",id:"linerecall",level:3},{value:"DisconnectErr",id:"disconnecterr",level:3},{value:"SynchCommit",id:"synchcommit",level:3},{value:"DX",id:"dx",level:3},{value:"BatchFlag",id:"batchflag",level:3},{value:"GlobalKillDisabled",id:"globalkilldisabled",level:3},{value:"PopError",id:"poperror",level:3},{value:"ZDateNull",id:"zdatenull",level:3},{value:"AsynchError",id:"asyncherror",level:3},{value:"SetZEOF",id:"setzeof",level:3},{value:"NodeNameInPid",id:"nodenameinpid",level:3},{value:"OldZU5",id:"oldzu5",level:3},{value:"TruncateOverflow",id:"truncateoverflow",level:3},{value:"SwitchOSdir",id:"switchosdir",level:3},{value:"AsyncDisconnectErr",id:"asyncdisconnecterr",level:3},{value:"ScientificNotation",id:"scientificnotation",level:3},{value:"TelnetNUL",id:"telnetnul",level:3},{value:"ExceptionLog",id:"exceptionlog",level:3},{value:"IEEEError",id:"ieeeerror",level:3},{value:"IPv6Format",id:"ipv6format",level:3},{value:"MVUndefined",id:"mvundefined",level:3},{value:"PrivateGlobalLocation",id:"privategloballocation",level:3},{value:"KillPrivateGlobals",id:"killprivateglobals",level:3},{value:"FixedDate",id:"fixeddate",level:3},{value:"Broadcast",id:"broadcast",level:3},{value:"CurrentDirectory",id:"currentdirectory",level:3},{value:"TerminalPrompt",id:"terminalprompt",level:3},{value:"ErrorLine",id:"errorline",level:3},{value:"OSError",id:"oserror",level:3},{value:"UserRoutinePath",id:"userroutinepath",level:3},{value:"SysRoutinePath",id:"sysroutinepath",level:3},{value:"IsGhost",id:"isghost",level:3},{value:"IsProgrammerMode",id:"isprogrammermode",level:3},{value:"State",id:"state",level:3},{value:"Routine",id:"routine",level:3},{value:"NameSpace",id:"namespace",level:3},{value:"CurrentDevice",id:"currentdevice",level:3},{value:"LinesExecuted",id:"linesexecuted",level:3},{value:"GlobalReferences",id:"globalreferences",level:3},{value:"EnableDiskReadTiming",id:"enablediskreadtiming",level:3},{value:"DisableDiskReadTiming",id:"disablediskreadtiming",level:3},{value:"ResetDiskReadTiming",id:"resetdiskreadtiming",level:3},{value:"DiskReadMilliseconds",id:"diskreadmilliseconds",level:3},{value:"JobType",id:"jobtype",level:3},{value:"UserName",id:"username",level:3},{value:"ClientNodeName",id:"clientnodename",level:3},{value:"ClientExecutableName",id:"clientexecutablename",level:3},{value:"CSPSessionID",id:"cspsessionid",level:3},{value:"ClientIPAddress",id:"clientipaddress",level:3},{value:"Terminate",id:"terminate",level:3},{value:"FrameStackSize",id:"framestacksize",level:3},{value:"FrameStackExpanded",id:"framestackexpanded",level:3},{value:"AppFrameInfo",id:"appframeinfo",level:3},{value:"GetAppFrameInfo",id:"getappframeinfo",level:3},{value:"TimeZone",id:"timezone",level:3},{value:"ListFormat",id:"listformat",level:3},{value:"TransactionsSuspended",id:"transactionssuspended",level:3},{value:"PipeExitCode",id:"pipeexitcode",level:3}];function l(e){const s={br:"br",code:"code",directory:"directory",diver:"diver",divide:"divide",dscon:"dscon",endoffile:"endoffile",framestack:"framestack",funct:"funct",function:"function",h1:"h1",h2:"h2",h3:"h3",header:"header",illegal:"illegal",language:"language",li:"li",lineref:"lineref",maxnumber:"maxnumber",p:"p",pre:"pre",src:"src",srcoffset:"srcoffset",stacklevel:"stacklevel",store:"store",strong:"strong",subscript:"subscript",syntx:"syntx",ul:"ul",undef:"undef",undefined:"undefined",unimplemented:"unimplemented",value:"value",xeclevel:"xeclevel",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"systemprocess",children:"%SYSTEM.Process"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %SYSTEM.Process Extends %SYSTEM.Help [ System = 4 ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"The %SYSTEM.Process class allows manipulation and display of the current process. Some of the class methods defined here have restrictions on where they may be called. Read the descriptions carefully."}),"\n",(0,t.jsxs)(s.p,{children:["There are two different syntaxes that can be used to call the class methods in this package: one uses the usual ##class syntax and the other uses $system. Here are two examples of calling ThrowError to signal the ",(0,t.jsxs)(s.unimplemented,{children:[" error. ",(0,t.jsx)(s.code,{children:"do $system.Process.ThrowError(22) do ##class(%SYSTEM.Process).ThrowError(22)"})]})]}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"throwerror",children:"ThrowError"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ThrowError(errnum As %Integer) As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"ThrowError(errnum)"})," class method signals the error message that corresponds to the value of ",(0,t.jsx)(s.strong,{children:"errnum"}),". The error message occurs at the first stack level above the level that was pushed onto the stack by the invocation of a user-defined command. Refer to %ZLANG for further information on user-defined commands in ObjectScript."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"errnum"})," -- A system error number, specified as an expression that resolves to a positive integer. This parameter is optional and if the parameter is missing then the most recently thrown system error number is thrown again."]}),"\n",(0,t.jsx)(s.h3,{id:"callingroutine",children:"CallingRoutine"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CallingRoutine() As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"CallingRoutine()"})," class method returns the name of the routine that made the last DO or user-defined call to the current routine invoking this function.",(0,t.jsx)(s.br,{}),"\nIf no calling routine exists, CallingRoutine() returns the null string."]}),"\n",(0,t.jsx)(s.h3,{id:"callingdatabase",children:"CallingDatabase"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CallingDatabase() As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"CallingDatabase()"})," class method returns the directory name of the database that contains the routine that made the last DO or user-defined call to the current routine invoking this function.",(0,t.jsx)(s.br,{}),"\nIf no calling routine exists, CallingDatabase() returns the null string."]}),"\n",(0,t.jsx)(s.h3,{id:"parentroutine",children:"ParentRoutine"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ParentRoutine() As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"ParentRoutine()"})," class method returns the name of the routine that issued the JOB command to start this process.",(0,t.jsx)(s.br,{}),"\nIf no parent routine exists, ParentRoutine() returns the null string.",(0,t.jsx)(s.br,{}),"\nThe routine name must be retrieved before the process throws an error. It will be the null string if there has been an error."]}),"\n",(0,t.jsx)(s.h3,{id:"parentdatabase",children:"ParentDatabase"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ParentDatabase() As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"ParentDatabase()"})," class method returns the directory name of the database that contains the routine that issued the JOB command to start this process.",(0,t.jsx)(s.br,{}),"\nIf no parent routine exists, ParentDatabase() returns the null string.",(0,t.jsx)(s.br,{}),"\nThe database name must be retrieved before the process throws an error. It will be the null string if there has been an error."]}),"\n",(0,t.jsx)(s.h3,{id:"randomseed",children:"RandomSeed"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RandomSeed(seed As %Integer) As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"RandomSeed(seed)"})," class method provides a way to modify the current random seed value of $Random."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"seed"})," -- the new random seed value for $Random. Legal values are any 64-bit signed integer (-9223372036854775808 to 9223372036854775807)"]}),"\n",(0,t.jsx)(s.p,{children:"Invoking RandomSeed() without specifying the seed parameter returns the current random seed value of $Random."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the previous random seed value prior to calling the RandomSeed method."]}),"\n",(0,t.jsx)(s.h3,{id:"stepinfo",children:"StepInfo"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod StepInfo() As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"StepInfo()"})," class method is invoked during debugging and returns information about the location of the last single step entered."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Return Values"})}),"\n",(0,t.jsxs)(s.p,{children:["This function returns the following information about the last single step entered:",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.stacklevel,{children:(0,t.jsx)(s.xeclevel,{children:(0,t.jsx)(s.lineref,{children:(0,t.jsx)(s.srcoffset,{children:(0,t.jsxs)(s.src,{children:[(0,t.jsx)(s.br,{}),"\nwhere:"]})})})})})]}),"\n",(0,t.jsxs)(s.p,{children:["stacklevel -- $STACK level of the breakpoint.",(0,t.jsx)(s.br,{}),"\nxeclevel -- XECUTE level of the breakpoint.",(0,t.jsx)(s.br,{}),"\nlineref -- Line reference of the breakpoint.",(0,t.jsx)(s.br,{}),"\nsrcoffset -- 0-based offset to the location in the source line where the break has occurred.",(0,t.jsx)(s.br,{}),"\nsrc -- Source line of the breakpoint."]}),"\n",(0,t.jsx)(s.p,{children:'This function is a useful primitive in the development of trace capabilities beyond what is offered by the "T" action.'}),"\n",(0,t.jsxs)(s.p,{children:["You can invoke StepInfo() only in the condition expression or the execute code associated with a",(0,t.jsx)(s.br,{}),"\nZBREAK $::condition:execute",(0,t.jsx)(s.br,{}),"\nbreakpoint, or in routines and functions invoked from these contexts."]}),"\n",(0,t.jsx)(s.p,{children:"You must have the %Development:Use privilege to execute the StepInfo function."}),"\n",(0,t.jsx)(s.h3,{id:"languagemode",children:"LanguageMode"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LanguageMode(mode As %Integer) As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"LanguageMode(mode)"})," class method returns or changes the current language mode."]}),"\n",(0,t.jsx)(s.p,{children:"You can use LanguageMode to change the language mode at the programmer prompt."}),"\n",(0,t.jsx)(s.p,{children:"When the system executes a routine, it automatically changes the language mode to the routine's language mode. A DO command or a $$ extrinsic function temporarily changes the language mode to that of the called routine. The system then restores the previous language mode when the routine terminates. Therefore, you need not (and cannot) change the language mode during runtime execution of a routine."}),"\n",(0,t.jsx)(s.p,{children:"The ZLOAD command changes the language mode to the loaded routine's language mode. However, ZLOAD does not restore the previous language mode upon termination of the routine. One use of LanguageMode is to set the language mode following a ZLOAD operation."}),"\n",(0,t.jsx)(s.p,{children:"LanguageMode can change the process' language mode at any time. However, when executing a routine you should only do this under XECUTE, and restore before leaving the XECUTE operation. This technique is commonly used to set language mode when compiling a routine."}),"\n",(0,t.jsx)(s.p,{children:"The object code (tokens, mcode, and so on) for a routine is generated at compile time according to the language mode in effect at that time. This language mode determines the routine's runtime behavior, except for a few cases where language mode is tested at runtime."}),"\n",(0,t.jsx)(s.p,{children:"Any form of indirection (for example, an XECUTE command, or the @ indirection operator) is evaluated at runtime according to the current language mode. This language mode may not be the same as the language mode of the running routine."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"mode"})," -- Optional -- A numeric code specifying what language mode to set."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Language Mode Codes"})}),"\n",(0,t.jsxs)(s.p,{children:["0 -- Set language mode to ObjectScript. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- Set language mode to DSM-11.",(0,t.jsx)(s.br,{}),"\n2 -- Set language mode to Open M [DTM].",(0,t.jsx)(s.br,{}),"\n5 -- Set language mode to DSM for OpenVMS.",(0,t.jsx)(s.br,{}),"\n6 -- Set language mode to DSM-J (Japanese) for OpenVMS.",(0,t.jsx)(s.br,{}),"\n7 -- Set language mode to DTM-J (Japanese) for OpenVMS.",(0,t.jsx)(s.br,{}),"\n8 -- Set language mode to MSM. MSM mode changes the use of the $ZC ($ZCHILD) special variable."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Notes:"})}),"\n",(0,t.jsxs)(s.p,{children:["If you change the language mode with the LanguageMode class method so that it does not match that of the loaded routine, and then attempt to do a ZINSERT, you will get a ",(0,t.jsx)(s.language,{mismatch:"",children:" error message."})]}),"\n",(0,t.jsxs)(s.p,{children:["In language modes 1 (DSM-11) and 8 (MSM) five-character error codes are used: ",(0,t.jsxs)(s.funct,{children:[", ",(0,t.jsxs)(s.undef,{children:[", ",(0,t.jsxs)(s.syntx,{children:[", ",(0,t.jsx)(s.diver,{children:" (division error), and so forth."})]})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"Invoking LanguageMode() without specifying any parameter codes returns the language mode code as an integer."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the language mode integer code prior to calling the LanguageMode method."]}),"\n",(0,t.jsx)(s.h3,{id:"setnamespace",children:"SetNamespace"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SetNamespace(namespace As %String = "") As %String\n'})}),"\n",(0,t.jsx)(s.p,{children:"Sets the current namespace to the given namespace."}),"\n",(0,t.jsx)(s.h3,{id:"memoryautoexpandstatus",children:"MemoryAutoExpandStatus"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod MemoryAutoExpandStatus() As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"MemoryAutoExpandStatus()"})," class method returns a value that allows the caller to determine the reason for the last ",(0,t.jsx)(s.store,{children:" error that has been thrown."})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- one of the following values can be returned:"]}),"\n",(0,t.jsxs)(s.p,{children:["0 -- The job has never had a ",(0,t.jsxs)(s.store,{children:[" error thrown.",(0,t.jsx)(s.br,{}),"\n1 -- The ",(0,t.jsxs)(s.store,{children:[" error was thrown because the process exceeded the $ZSTORAGE value. An additional 1M was temporarily allocated for recovery.",(0,t.jsx)(s.br,{}),"\n2 -- The ",(0,t.jsxs)(s.store,{children:[" error was thrown because the process exceeded the the extra 1M. The process will likely be terminated before this status can be seen.",(0,t.jsx)(s.br,{}),"\n3 -- The ",(0,t.jsx)(s.store,{children:" error was thrown because of reasons other than exceeding the $ZSTORAGE value."})]})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"Return value 3 is typically returned when the operating system refuses to give more memory to the process. Typical reasons (but not an exhaustive list) can be because the operating system has run out of swap space. On Unix based systems it could be because you have exceeded a system enforced limit (for example 'ulimit -v' on some platforms sets a limit on the maximum virtual memory size)."}),"\n",(0,t.jsx)(s.h3,{id:"iodollartest",children:"IODollarTest"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IODollarTest(flag As %Boolean) As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"IODollarTest(flag)"})," class method specifies how to handle the $TEST special variable on return from I/O redirection by issuing this function. By default, the value of $TEST is preserved (stored and restored) across a call to extrinsic code, such as I/O redirection code. However, you may wish to return the setting of $TEST from I/O redirection code. For example, if application code invokes a READ command with I/O redirection, and the READ times out, this timeout sets $TEST in your application. To preserve this setting of $TEST upon returning from I/O redirection code, you must invoke LanguageMode within the I/O redirection code."]}),"\n",(0,t.jsxs)(s.p,{children:["Note: LanguageMode can only be invoked from extrinsic code. It cannot be called directly from the terminal. Attempting to do so results in a ",(0,t.jsx)(s.function,{children:" error."})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"flag"})," -- boolean value used to set the $TEST special variable upon return from I/O redirection code.",(0,t.jsx)(s.br,{}),"\n0 -- Clears $TEST (sets to 0) on return from the redirected READ.",(0,t.jsx)(s.br,{}),"\n1 -- Sets $TEST (sets to 1) on return from the redirected READ."]}),"\n",(0,t.jsx)(s.h3,{id:"getcputime",children:"GetCPUTime"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetCPUTime() As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Get CPU time used for current process."}),"\n",(0,t.jsx)(s.p,{children:'Returns two comma-delimited pieces, "system" CPU time and "user" CPU time (except on VMS where no separate times are available). Time is returned as milliseconds of CPU time.'}),"\n",(0,t.jsx)(s.h3,{id:"storeerrorreason",children:"StoreErrorReason"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod StoreErrorReason() As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns the possible reasons for the last ",(0,t.jsx)(s.store,{children:" error as follows."})]}),"\n",(0,t.jsxs)(s.p,{children:["0 - No ",(0,t.jsxs)(s.store,{children:[" error has yet occurred for this proces.",(0,t.jsx)(s.br,{}),"\n1 - The value of $STORAGE went negative.",(0,t.jsx)(s.br,{}),"\n2 - The value of $STORAGE went below its emergency margin of -1048576 (-1MB).",(0,t.jsx)(s.br,{}),"\n3 - The OS refused to give any more memory resources to the process.",(0,t.jsx)(s.br,{}),"\n4 - Attempt to set $ZSTORAGE to a value that would cause $STORAGE to become negative."]})]}),"\n",(0,t.jsx)(s.h3,{id:"killallprivateglobals",children:"KillAllPrivateGlobals"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KillAllPrivateGlobals() As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Kill all process private globals for the calling process."}),"\n",(0,t.jsx)(s.h3,{id:"undefined",children:"Undefined"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Undefined(switch As %Integer) As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Undefined(switch)"})," is a class method used to specify the default behavior for the current process when handling undefined variables. Setting the Undefined switch changes this behavior for local variables, process-private globals, and global variables system-wide; it has no effect on special variables."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a numeric code that specifies how ObjectScript treats an undefined variable. It takes on the following values:",(0,t.jsx)(s.br,{}),"\n0 -- Issues the ",(0,t.jsxs)(s.undefined,{children:[" error for any undefined variable. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- Returns a null string for a reference to an undefined variable with subscripts, and issues the ",(0,t.jsxs)(s.undefined,{children:[" error for undefined variables without subscripts.",(0,t.jsx)(s.br,{}),"\n2 -- Returns a null string (instead of issuing an ",(0,t.jsx)(s.undefined,{children:" error) for any undefined variable."})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"Invoking Undefined() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the Undefined method."]}),"\n",(0,t.jsx)(s.h3,{id:"nullsubscripts",children:"NullSubscripts"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NullSubscripts(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"NullSubscripts(switch)"})," class method allows setting and referencing globals with null subscripts within the current process."]}),"\n",(0,t.jsxs)(s.p,{children:['If null subscripted globals are not enabled (switch=0), attempting to set a null subscripted variable, such as SET ^x("")=99, or to reference a null subscript, such as WRITE ^x(""), results in a ',(0,t.jsx)(s.subscript,{children:" error."})]}),"\n",(0,t.jsxs)(s.p,{children:['If null subscripted globals are enabled (switch=1), you can set a null subscripted variable, such as SET ^x("")=99, just like any other variable. Referencing an undefined null subscripted variable results in a ',(0,t.jsx)(s.undefined,{children:" error."})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies the null subscript mode setting for the current process:",(0,t.jsx)(s.br,{}),"\n0 -- Disables setting/referencing null subscripted globals. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- Enables setting/referencing null subscripted globals."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking NullSubscripts() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the NullSubscripts method."]}),"\n",(0,t.jsx)(s.h3,{id:"openmode",children:"OpenMode"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OpenMode(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"OpenMode(switch)"})," is a class method that specifies the open mode for sequential files opened by the current process. When the current process issues an OPEN command for a sequential file, that file is opened either in read-only mode (R) or read/write mode (RW). Calling OpenMode(switch) specifies this open mode for the current process, overriding the system-wide default setting."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies the default mode for sequential files on OPEN for the current process:",(0,t.jsx)(s.br,{}),"\n0 -- read-only (R) is the OPEN default. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- read and write (RW) is the OPEN default."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking OpenMode() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the OpenMode method."]}),"\n",(0,t.jsx)(s.h3,{id:"filemode",children:"FileMode"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod FileMode(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"FileMode(switch)"}),' class method specifies if a sequential file is created automatically in response to an OPEN command that specifies a file that does not already exist. If you attempt to open a file in "W" or "RW" mode, but that file does not yet exist, the default behavior is platform-dependent. On Windows and Unix systems, the default is for the process to hang until the file is actually created, or until the process is resolved by a timeout expiration or by calling the RESJOB utility. On OpenVMS systems, the default is to create a new sequential file.']}),"\n",(0,t.jsx)(s.p,{children:'Calling FileMode(switch) can override the default. Calling FileMode(1) causes the system to create a sequential file automatically when you issue the OPEN command in "W" or "RW" mode for a file that does not already exist; calling FileMode(0) prevents the OPEN command from automatically creating a sequential file when the file does not already exist. This FileMode setting governs all sequential file opens in the current process.'}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies whether or not a file is created when the process attempts to open a nonexistent file for writing:",(0,t.jsx)(s.br,{}),"\n0 -- automatic new file creation is disabled. (0 is the usual default for Unix and Windows systems)",(0,t.jsx)(s.br,{}),"\n1 -- automatic new file creation is enabled. (1 is the usual default for VMS systems)"]}),"\n",(0,t.jsx)(s.p,{children:"Invoking FileMode() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the FileMode method."]}),"\n",(0,t.jsx)(s.h3,{id:"breakmode",children:"BreakMode"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod BreakMode(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"BreakMode(switch)"})," class method enables or disables the processing of argumentless ",(0,t.jsx)(s.strong,{children:"BREAK"})," commands by the current process."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies the default behavior of argumentless ",(0,t.jsx)(s.strong,{children:"BREAK"}),":",(0,t.jsx)(s.br,{}),"\n0 -- Treats an argumentless ",(0,t.jsx)(s.strong,{children:"BREAK"})," as a no-op.",(0,t.jsx)(s.br,{}),"\n1 -- Executes ",(0,t.jsx)(s.strong,{children:"BREAK"})," on an argumentless ",(0,t.jsx)(s.strong,{children:"BREAK"}),". (1 is the usual default)"]}),"\n",(0,t.jsx)(s.p,{children:"Invoking BreakMode() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the BreakMode method."]}),"\n",(0,t.jsx)(s.h3,{id:"refinkind",children:"RefInKind"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RefInKind(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsx)(s.p,{children:"The RefInKind(switch) class method specifies whether $QUERY and $NAME return an extended global reference when the first argument of $QUERY or $NAME contains an extended global reference. A switch value of 0 returns the extended global reference. A switch value of 1 strips the extended global reference before returning the global. Invoking the ZWRITE command returns the extended global reference regardless of the RefInKind setting."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies whether $QUERY or $NAME return an extended global reference:",(0,t.jsx)(s.br,{}),"\n0 -- Retains the extended global reference; this enables reference-in-kind. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- Strips the extended global reference and returns just the global; this disables reference-in-kind."]}),"\n",(0,t.jsx)(s.p,{children:"The 1 value for the switch is provided for backward compatibility."}),"\n",(0,t.jsx)(s.p,{children:"Invoking RefInKind() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the RefInKind method."]}),"\n",(0,t.jsx)(s.h3,{id:"linerecall",children:"LineRecall"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LineRecall(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"LineRecall(switch)"})," class method enables or disables read line recall for terminal devices opened by the current process. Read line recall is only used by terminal devices. The current LineRecall setting is only applied when a terminal device is explicitly opened using the OPEN command."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that controls read line recall mode:",(0,t.jsx)(s.br,{}),"\n0 -- Disables read line recall mode.",(0,t.jsx)(s.br,{}),"\n1 -- Enables read line recall mode. (1 is the usual default)"]}),"\n",(0,t.jsx)(s.p,{children:"Invoking LineRecall() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the LineRecall method."]}),"\n",(0,t.jsx)(s.h3,{id:"disconnecterr",children:"DisconnectErr"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DisconnectErr(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"DisconnectErr(switch)"})," class method determines how the system responds to the disconnection of the principal I/O device being accessed from the current process. When set to 1, the process receives a ",(0,t.jsx)(s.dscon,{children:' error when a disconnect is detected during an ObjectScript READ or WRITE command to the device. This is known as "error on disconnect." When set to 0, the process exits without reporting an error to the application when a disconnect is detected.'})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies whether the system detects I/O device disconnection:",(0,t.jsx)(s.br,{}),"\n0 -- Disables disconnection detection. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- Enables disconnection detection."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking DisconnectErr() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- The switch state prior to calling the DisconnectErr method."]}),"\n",(0,t.jsx)(s.h3,{id:"synchcommit",children:"SynchCommit"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SynchCommit(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"SynchCommit(switch)"})," class method sets the synchronous transaction commit mode for the current process. This enables or disables synchronizing TCOMMIT with the corresponding journal write operation. Every TCOMMIT command requests a flush of the journal data involved in that transaction to disk. When SynchCommit is enabled (set to 1) a TCOMMIT does not complete until the journal data write operation completes. When set to 0, TCOMMIT does not wait for the write operation to complete."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies the default mode for synchronous transaction commit:",(0,t.jsx)(s.br,{}),"\n0 -- TCOMMIT completion does not wait for journal file write completion. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- TCOMMIT completion waits for the journal file write operation to complete."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking SynchCommit() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the SynchCommit method."]}),"\n",(0,t.jsx)(s.h3,{id:"dx",children:"DX"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DX(switch As %Integer) As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"DX(switch)"})," class method specifies how the current process handles escape sequences when updating the $X special variable. When reading a string containing an escape sequence, various InterSystems products handle updating the $X special variable differently. You can control the way the system updates $X when writing a string containing an escape sequence. Default behaviors for various implementations are:"]}),"\n",(0,t.jsx)(s.p,{children:"Unix parses the ANSI-standard escape sequence and counts the rest of the non-escape characters in the string against $X."}),"\n",(0,t.jsx)(s.p,{children:"Open M [DSM] counts all characters in a string, including the escape character, against $X."}),"\n",(0,t.jsx)(s.p,{children:"MSM counts all characters in the string, except for the escape character, against $X."}),"\n",(0,t.jsx)(s.p,{children:"Alpha OpenVMS does not count any more characters in the string against $X after encountering an escape character ($CHAR(27))."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- an integer that specifies the method of updating $X for an individual process:",(0,t.jsx)(s.br,{}),"\n0 -- Specifies Unix and Windows default behavior.",(0,t.jsx)(s.br,{}),"\n1 -- Specifies Open M [DSM] default behavior.",(0,t.jsx)(s.br,{}),"\n2 -- Specifies MSM default behavior.",(0,t.jsx)(s.br,{}),"\n3 -- Specifies Alpha/VAX default behavior."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking DX() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the DX method."]}),"\n",(0,t.jsx)(s.h3,{id:"batchflag",children:"BatchFlag"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod BatchFlag(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"BatchFlag(switch)"})," class function specifies either batch or interactive status for the current process. This allows you to balance resources more effectively."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that controls the status of the issuing process:",(0,t.jsx)(s.br,{}),"\n0 -- Clears batch status and gives the process interactive status. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- Gives the process batch status."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking BatchFlag() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the BatchFlag method."]}),"\n",(0,t.jsx)(s.h3,{id:"globalkilldisabled",children:"GlobalKillDisabled"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GlobalKillDisabled(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"GlobalKillDisabled(switch)"})," class function specifies whether a Kill of a root-level global node is disabled as a command to an interactive terminal session. This switch does not affect the Kill command applied interactively to a subscripted global nor does it affect any Kill used as a command within a routine."]}),"\n",(0,t.jsxs)(s.p,{children:["Setting the ",(0,t.jsx)(s.strong,{children:"GlobalKillDisabled()"}),' switch provides some minimal protection against certain typing errors involving the KILL command while directly entering interactive commands to a InterSystems IRIS terminal session. It does not prevent a user from entering the XECUTE "KILL ^a" command to kill all of global variable ^a. The switch also has no effect on commands typed interactively to other command shells, such as the MV (MultiValue) shell.']}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a Boolean value that specifies whether the current process allows a Kill of a root-level global node as an interactive terminal command:",(0,t.jsx)(s.br,{}),"\n0 -- Root-level global node kills are allowed. (0 is the default)",(0,t.jsx)(s.br,{}),"\n1 -- Root-level global node kills are not allowed from the command line, but are allowed from routines."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking GlobalKillDisabled() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return Value"})," -- the switch state prior to calling the GlobalKillDisabled method."]}),"\n",(0,t.jsx)(s.h3,{id:"poperror",children:"PopError"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PopError(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"PopError(switch)"})," class function specifies whether a process uses InterSystems IRIS-style error handling (the default) or legacy (DSM) error handling."]}),"\n",(0,t.jsx)(s.p,{children:"When a InterSystems IRIS-style error handler is invoked, that error handler remains on the stack of established error handlers. Therefore, if an error occurs while the InterSystems IRIS-style error handler is executing, that error handler attempts to invoke itself, receives the same error again and enters an infinite loop, unless that error handler explicitly sets the $ZTRAP special variable to a new value."}),"\n",(0,t.jsx)(s.p,{children:"When an error handler is invoked in DSM, the DSM-style error handler is unwound from the stack. Therefore, if an error occurs while the DSM-style error handler is executing, that error is handled by the previous error handler on the stack."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies whether or not a process uses InterSystems IRIS-style error handling:",(0,t.jsx)(s.br,{}),"\n0 -- specifies InterSystems IRIS-style behavior. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- specifies DSM-style behavior."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking PopError() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the PopError method."]}),"\n",(0,t.jsx)(s.h3,{id:"zdatenull",children:"ZDateNull"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ZDateNull(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"ZDateNull"})," class method performs two process-specific operations:"]}),"\n",(0,t.jsx)(s.p,{children:"It specifies how the $ZDATE function behaves when it receives invalid input."}),"\n",(0,t.jsx)(s.p,{children:"It specifies the default range of valid dates for $ZDATE. (This provides backward-compatibility with ISM.)"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Setting the Behavior for Invalid Dates"})}),"\n",(0,t.jsx)(s.p,{children:"An invalid date is either not a positive integer, or is not a value within the range of valid dates."}),"\n",(0,t.jsxs)(s.p,{children:["ZDateNull(0) causes $ZDATE to issue the error message ",(0,t.jsxs)(s.illegal,{value:"",children:[" or ",(0,t.jsx)(s.value,{out:"",of:"",range:"",children:" if you submit an invalid date. The behavior can be overridden by supplying an erropt parameter to the $ZDATE call."})]})]}),"\n",(0,t.jsx)(s.p,{children:"ZDateNull(1) causes $ZDATE to return the null string if you submit an invalid date. This behavior is set for any $ZDATE function call, regardless of the number of parameters."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Setting the Range of Valid Dates"})}),"\n",(0,t.jsx)(s.p,{children:"ZDateNull(0) sets the default range of valid dates to be the default. This range is from 0 through 2980013, inclusive, which corresponds to dates from 12/31/1840 through 12/31/9999. This range can be restricted by setting the $ZDATE mindate and maxdate parameters."}),"\n",(0,t.jsx)(s.p,{children:"ZDateNull(1) sets the default range of valid dates for ISM compatibility. This range is from 1 through 94232, inclusive, which corresponds to dates from 01/01/1841 through 12/30/2098. This date range is set for any $ZDATE function call which has three or fewer parameters. If a $ZDATE function call has more than three parameters, the valid date range is taken either from the $ZDATE mindate and maxdate parameters (if specified) or from the date range established for the current locale."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," a boolean value that specifies $ZDATE behavior:",(0,t.jsx)(s.br,{}),"\n0 -- specifies InterSystems IRIS-style behavior. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- specifies ISM-style behavior."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking ZDateNull() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the ZDateNull method."]}),"\n",(0,t.jsx)(s.h3,{id:"asyncherror",children:"AsynchError"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AsynchError(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"AsynchError(switch)"})," class method specifies whether asynchronous errors can interrupt the current process."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies the process behavior in response to asynchronous errors:",(0,t.jsx)(s.br,{}),"\n0 -- disables the reception of asynchronous errors.",(0,t.jsx)(s.br,{}),"\n1 -- enables the reception of asynchronous errors. (1 is the usual default)"]}),"\n",(0,t.jsx)(s.p,{children:"Invoking AsynchError() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the AsynchError method."]}),"\n",(0,t.jsx)(s.h3,{id:"setzeof",children:"SetZEOF"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetZEOF(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"SetZEOF(switch)"})," class method specifies end-of-file flagging format. This function is provided to support interoperability, and the porting of MSM routines that use the MSM $ZC function to check for end of file on sequential file reads. This MSM function should not be confused with the ObjectScript $ZC function (which is an abbreviation for $ZCHILD)."]}),"\n",(0,t.jsxs)(s.p,{children:["A switch value of 1 eliminates the ",(0,t.jsx)(s.endoffile,{children:' error for sequential files for the current process. Instead, when the end of a file is reached, the READ command returns a null string, the $ZPOS special variable is set to "" (the null string), and the $ZEOF special variable is set to -1.'})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies end-of-file handling for the current process:",(0,t.jsx)(s.br,{}),"\n0 -- default format.",(0,t.jsx)(s.br,{}),"\n1 -- end-of-file flagging format."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking SetZEOF() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the SetZEOF method."]}),"\n",(0,t.jsx)(s.h3,{id:"nodenameinpid",children:"NodeNameInPid"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NodeNameInPid(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"NodeNameInPid(switch)"})," class method specifies the format that the $JOB special variable returns for the current process."]}),"\n",(0,t.jsx)(s.p,{children:"This function provides for a unique value for $JOB on networked systems. This is useful when using $JOB to index globals accessed by more than one networked system. In the form NodeNameInPid(1), the $JOB special variable returns a string of the format processid:nodename."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies the string format that $JOB returns:",(0,t.jsx)(s.br,{}),"\n0 -- specifies the standard $JOB format. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- specifies the format as processid:nodename."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking NodeNameInPid() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the NodeNameInPid method."]}),"\n",(0,t.jsx)(s.h3,{id:"oldzu5",children:"OldZU5"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OldZU5(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"OldZU5(switch)"})," class method specifies whether or not issuing the $namespace function with the current namespace clears global vectors for the current process."]}),"\n",(0,t.jsx)(s.p,{children:"OldZU5(1) provides compatibility with $namespace behavior before Cache version 3.1; this call enables the clearing of global vectors for the current process when $namespace is issued with the current namespace."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies whether or not there is global vector clearing:",(0,t.jsx)(s.br,{}),"\n0 -- (default behavior) disables global vector clearing. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- (legacy behavior) clears global vectors."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking OldZU5() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the OldZU5 method."]}),"\n",(0,t.jsx)(s.h3,{id:"truncateoverflow",children:"TruncateOverflow"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TruncateOverflow(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"TruncateOverflow(switch)"})," class method specifies whether or not the current process truncates very large numbers. The default behavior is not to truncate numbers."]}),"\n",(0,t.jsxs)(s.p,{children:["Normally, when the system encounters a numeric string larger than 9223372036854775807E127 it converts the number to an IEEE double-precision number. This conversion only occurs during string-to-number conversions. A ",(0,t.jsxs)(s.maxnumber,{children:[" error can still occur during arithmetic operations. This conversion extends the numeric range available to literal numbers, but reduces the numeric precision by roughly 3 decimal digits. When the system encounters a number too large to be represented by an IEEE double-precision number, it either issues a ",(0,t.jsx)(s.maxnumber,{children:" error or returns INF, depending on the setting of ##class(%SYSTEM.Process).IEEEError()."})]})]}),"\n",(0,t.jsxs)(s.p,{children:["When the TruncateOverflow switch is set, this automatic conversion of large numeric strings to the $DOUBLE type does not occur nor does an error occur. Instead, the largest positive decimal value, 9223372036854775807E127, or the largest negative decimal, -9223372036854775808E127, as appropriate, is returned. In addition, setting the TruncateOverflow switch will cause an overflow that occurs during decimal arithmetic operations to return these largest values rather than issuing a ",(0,t.jsx)(s.maxnumber,{children:" error."})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies whether number truncation occurs:",(0,t.jsx)(s.br,{}),"\n0 -- preserves large numbers and performs IEEE double-precision conversion on these numbers when necessary. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- truncates large numbers during the string-to-number conversion and suppresses IEEE conversion and ",(0,t.jsx)(s.maxnumber,{children:" errors."})]}),"\n",(0,t.jsx)(s.p,{children:"Invoking TruncateOverflow() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the TruncateOverflow method."]}),"\n",(0,t.jsx)(s.h3,{id:"switchosdir",children:"SwitchOSdir"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SwitchOSdir(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"SwitchOSdir(switch)"})," class method specifies whether changing the namespace also changes the default directory. By default, changing to a new namespace causes InterSystems IRIS to change the directory at the operating system level to the default directory for that namespace."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies the default behavior when changing namespaces:",(0,t.jsx)(s.br,{}),"\n0 -- Changing the namespace automatically changes the default directory to the directory for that namespace. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- Changing the namespace does not change the default directory."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking SwitchOSdir() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the SwitchOSdir method."]}),"\n",(0,t.jsx)(s.h3,{id:"asyncdisconnecterr",children:"AsyncDisconnectErr"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AsyncDisconnectErr(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"AsyncDisconnectErr(switch)"})," class method specifies the asynchronous disconnect error handling for the current process. AsyncDisconnectErr is only applicable to Telnet connections on Windows. It has no effect on any other device type or operating system."]}),"\n",(0,t.jsx)(s.p,{children:"For the asynchronous disconnect error switch to be operational, the DisconnectErr() class method must set disconnect error switch to 1 for the current process."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies the default mode for asynchronous disconnect errors:",(0,t.jsx)(s.br,{}),"\n0 -- the process receives a ",(0,t.jsxs)(s.dscon,{children:[" error at the next READ or WRITE command.",(0,t.jsx)(s.br,{}),"\n1 -- The process receives an asynchronous ",(0,t.jsx)(s.dscon,{children:" error immediately when a disconnect occurs on the device. This error occurs at the next command executed. HANG commands will be interrupted."})]})]}),"\n",(0,t.jsx)(s.p,{children:"Invoking AsyncDisconnectErr() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the AsyncDisconnectErr method."]}),"\n",(0,t.jsx)(s.h3,{id:"scientificnotation",children:"ScientificNotation"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ScientificNotation(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"ScientificNotation(switch)"}),' class method specifies the evaluation of the lowercase letter "e" as a scientific notation exponent symbol for the current process. ScientificNotation has no effect on the evaluation of uppercase "E" as an exponent symbol.']}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"}),' -- a boolean value that specifies whether or not a process should treat lowercase "e" as a scientific notation base-10 exponent symbol:',(0,t.jsx)(s.br,{}),'\n0 -- do not evaluate "e" as an exponent symbol.',(0,t.jsx)(s.br,{}),'\n1 -- evaluate "e" as an exponent symbol. (1 is the usual default)']}),"\n",(0,t.jsx)(s.p,{children:"Invoking ScientificNotation() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the ScientificNotation method."]}),"\n",(0,t.jsx)(s.h3,{id:"telnetnul",children:"TelnetNUL"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TelnetNUL(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"TelnetNUL(switch)"})," class method specifies the issuance of a NUL character (ASCII 0) following a CR character (ASCII 13) at end-of-line during Telnet transmission. On output, a Telnet network virtual terminal (NVT) performs the following default end-of-line behavior: either issues a CR (carriage return character) followed by a LF (linefeed character), or issues a CR (carriage return character) followed by a NUL character (if no LF is issued). TelnetNUL(switch) affects the issuance of the NUL character in this second case."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies whether or not the system should suppress NUL following a CR at end-of-line:",(0,t.jsx)(s.br,{}),"\n0 -- do not suppress NUL. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- suppress NUL."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking TelnetNUL() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the TelnetNUL method."]}),"\n",(0,t.jsx)(s.h3,{id:"exceptionlog",children:"ExceptionLog"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ExceptionLog(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"ExceptionLog(switch)"})," class method specifies the display of a Windows message box. When enabled, this box displays stack and register usage information when a cache.exe process encounters an exception. Because processing cannot proceed until the user responds to this message box, ExceptionLog(switch) provides the option to suppress the display of this message box to facilitate unattended system operation, such as scripted shutdown and restart."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies whether or not the system should display or suppress the Windows stack and register usage box for the current process when it encounters an exception:",(0,t.jsx)(s.br,{}),"\n0 -- suppress display of the message box. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- enable display of the message box."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking ExceptionLog() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the ExceptionLog method."]}),"\n",(0,t.jsx)(s.h3,{id:"ieeeerror",children:"IEEEError"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IEEEError(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"IEEEError(switch)"})," class method specifies the issuing of INF, -INF, and NAN when a $DOUBLE numeric operation encounters an overflow, divide-by-zero or invalid-operation exception. It does not control the issuing of INF, -INF, and NAN in all cases. Regardless of the ExceptionLog() setting, $DOUBLE operations return INF, -INF, or NAN when you supply one of these values as an operand and an overflow, divide-by-zero or invalid-operation exception does not occur. Operations that can generate IEEE Exceptions when encountering $DOUBLE values include conversions from a numeric string, arithmetic operations, exponentiation, and logarithmic and trigonometric functions."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies the $DOUBLE exception mode setting for the current process:",(0,t.jsx)(s.br,{}),"\n0 -- $DOUBLE operations return INF, -INF, or NAN when encountering an IEEE exception.",(0,t.jsx)(s.br,{}),"\n1 -- $DOUBLE operations generate ",(0,t.jsxs)(s.maxnumber,{children:[", ",(0,t.jsxs)(s.illegal,{value:"",children:[", and ",(0,t.jsx)(s.divide,{children:" errors when encountering an IEEE exception. (1 is the usual default)"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"Invoking IEEEError() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the IEEEError method."]}),"\n",(0,t.jsx)(s.h3,{id:"ipv6format",children:"IPv6Format"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IPv6Format(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"IPv6Format(switch)"})," class method specifies the types of IP address formats supported by the current process. When IPv6 is enabled, the system accepts an IP address on the OPEN command in either IPv6 or IPv4 format, or as a host name, with or without domain qualifiers. The system first checks for an IPv4 format address, then for an IPv6 format address; it accepts the first successful connection."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies IP address format:",(0,t.jsx)(s.br,{}),"\n0 -- IPv6 format disabled--IPv4 only. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- IPv6 format enabled--both IPv4 and IPv6 supported."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking IPv6Format() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the IPv6Format method."]}),"\n",(0,t.jsx)(s.h3,{id:"mvundefined",children:"MVUndefined"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod MVUndefined(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"MVUndefined(switch)"})," class method specifies MVBasic behavior for the current process when it encounters a reference to an undefined variable. By default, if the current MVBasic routine references an undefined variable, the system generates an ",(0,t.jsx)(s.undefined,{children:" error. You can change this default behavior to have the system substitute an empty string for an undefined variable, without signaling an error."})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies whether or not the system should issue an error when the current MVBasic routine references an undefined variable:",(0,t.jsx)(s.br,{}),"\n0 -- issue an ",(0,t.jsxs)(s.undefined,{children:[" error for an undefined variable. (0 is the usual default)",(0,t.jsx)(s.br,{}),"\n1 -- substitute the empty string for an undefined variable."]})]}),"\n",(0,t.jsx)(s.p,{children:"Invoking MVUndefined() without specifying the switch parameter returns the current switch setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch state prior to calling the MVUndefined method."]}),"\n",(0,t.jsx)(s.h3,{id:"privategloballocation",children:"PrivateGlobalLocation"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PrivateGlobalLocation() As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"PrivateGlobalLocation()"})," class method returns the location of the process-private globals database in the form sfn^dir. If no process-private globals are defined, this defaults to 15999^0."]}),"\n",(0,t.jsx)(s.h3,{id:"killprivateglobals",children:"KillPrivateGlobals"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KillPrivateGlobals() As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"KillPrivateGlobals()"})," class method deletes all process-private globals defined for the current process. It returns 1 upon successful completion, 0 upon error. KillPrivateGlobals returns 1 even if no process-private globals were defined."]}),"\n",(0,t.jsx)(s.p,{children:"KillPrivateGlobals() is a legacy function that should no longer be used by customers. The function KillAllPrivateGlobals() is the preferred way to do this and KillPrivateGlobals() has been redfined to be identical to KillAllPrivateGlobals()."}),"\n",(0,t.jsx)(s.h3,{id:"fixeddate",children:"FixedDate"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod FixedDate(date As %Integer) As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"FixedDate(date)"})," class method sets the date internally stored in the $HOROLOG special variable to a specified fixed value for the current process. Calling FixedDate(0) turns off this function, restoring $HOROLOG to the current local date."]}),"\n",(0,t.jsx)(s.p,{children:"Using this function to set a fixed value for the date causes all subsequent calls to $HOROLOG from that process to return that fixed value as the date. A date set using FixedDate(date) is a fixed date; it does not increment at midnight."}),"\n",(0,t.jsx)(s.p,{children:"FixedDate(date) has no effect on the time portion of $HOROLOG, which continues to represent the current time."}),"\n",(0,t.jsx)(s.p,{children:"To restore $HOROLOG to the current date, issue FixedDate(0). This call reverts $HOROLOG to the current date."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"date"})," -- A positive integer that represents a date in $HOROLOG format. An integer that falls between 1 (January 1, 1841) and 2980013 (December 31, 9999) inclusive fixes that date. A date parameter of 0 turns off this function."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking FixedDate() without specifying the date parameter returns the current FixedDate value with no effect on $HOROLOG. FixedDate() returns zero if $HOROLOG is not set to a fixed value"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the FixedDate value prior to calling the FixedDate method."]}),"\n",(0,t.jsx)(s.h3,{id:"broadcast",children:"Broadcast"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Broadcast(pid As %Integer, message As %String, timeout As %Integer, noxy As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"Broadcast(pid,message,timeout,noxy)"})," class method sends a message to the principal device of the process you indicate."]}),"\n",(0,t.jsx)(s.p,{children:"Broadcast passes the message to the target process. The target process then writes the message to its principal output device. The target process must be running the InterSystems IRIS kernel. If you send a message to your own process, you do not see the message on the screen of your principal device."}),"\n",(0,t.jsx)(s.p,{children:"Broadcast does not add any carriage controls to the message it sends. To include any carriage control (carriage returns or line feeds), you must include them in the message, using $CHAR(13) and $CHAR(10)."}),"\n",(0,t.jsx)(s.p,{children:"%SYSTEM.Process.Broadcast complements %Library.Device.Broadcast. %Library.Device.Broadcast sends a message to a specified device while %SYSTEM.Process.Broadcast sends a message to the principal device of a specified process. Be sure that you use the right function for the right purpose."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- The Process ID of the target process. The System Management Portal provides a Processes option, which list the pids of all running processes. Select [Home] > [Processes].",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"message"})," -- The message to send, specified as a string.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"timeout"})," -- Optional -- An integer specifying the number of seconds to wait before timeout. If omitted, no timeout occurs.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"noxy"})," -- Optional -- If 0, $X and $Y are updated in the receiving process to indicate the location of the end of the broadcast message. If 1, $X and $Y are not updated. The default is 0. This parameter does not apply to OpenVMS systems, which do not update $X and $Y following a broadcast message."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- 1 if pid belongs to an InterSystems IRIS process and the message was sent to that process; 0 otherwise."]}),"\n",(0,t.jsx)(s.h3,{id:"currentdirectory",children:"CurrentDirectory"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CurrentDirectory(dir As %String) As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"CurrentDirectory(dir)"})," class method sets your current working directory for sequential file output to the directory named by the parameter. If the directory cannot be set as the current working directory, CurrentDirectory issues a ",(0,t.jsx)(s.directory,{children:" error, and ^SYSLOG will show the cause of the error. This directory should not be confused with the default directory for globals in the current namespace."})]}),"\n",(0,t.jsx)(s.p,{children:"Note: On Windows systems, CurrentDirectory(dir) sets as the current directory a directory name entirely in lowercase letters, regardless of the case of dir. Because Windows and ObjectScript are not case-sensitive, this is usually irrelevant. However, this may affect some Windows applications (such as Java) which are case-sensitive."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"dir"})," -- Name of directory to set as working directory for sequential file output."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking CurrentDirectory() without specifying the dir parameter returns the current working directory setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the working directory prior to calling the CurrentDirectory method."]}),"\n",(0,t.jsx)(s.h3,{id:"terminalprompt",children:"TerminalPrompt"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TerminalPrompt(p1 As %Integer, p2 As %Integer, p3 As %Integer, p4 As %Integer, p5 As %Integer, p6 As %Integer, p7 As %Integer, p8 As %Integer) As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"TerminalPrompt(p1,p2,...)"})," class method specifies what information should appear in the programmer-mode prompt for InterSystems IRIS Terminal."]}),"\n",(0,t.jsx)(s.p,{children:"Issuing TerminalPrompt() (with no arguments) does not change the terminal prompt but it does return the current state of the prompt setting as a comma-separated list of integer codes."}),"\n",(0,t.jsx)(s.p,{children:"Issuing TerminalPrompt(0) clears the setting, so that no prompt information is displayed."}),"\n",(0,t.jsx)(s.p,{children:"Issuing TerminalPrompt(p1,...), where none of the parameters are 0, sets the prompt to include the information specified by the parameter codes. The order of the parameter codes is the order the information appears in the prompt."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"p1"})," -- Optional -- Code for the 1st field of the terminal prompt.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"p2"})," -- Optional -- Code for the 2nd field of the terminal prompt.",(0,t.jsx)(s.br,{}),"\n...",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"p8"})," -- Optional -- Code for the 8th field of the terminal prompt."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Prompt Codes"})}),"\n",(0,t.jsxs)(s.p,{children:["0 -- Reset the prompt.",(0,t.jsx)(s.br,{}),"\n1 -- Host name, also known as the current system name. The name assigned to your computer. For example, LABLAPTOP>. This is the same for all of your terminal processes.",(0,t.jsx)(s.br,{}),"\n2 -- Namespace name. For example, %SYS>. The current namespace name is contained in the $NAMESPACE special variable. It can be an explicit namespace name or an implied namespace name.",(0,t.jsx)(s.br,{}),"\n3 -- Config name. The name of your system installation. For example, DEVELOPMENT>. This is the same for all of your terminal processes.",(0,t.jsx)(s.br,{}),"\n4 -- Current time, expressed as local time in 24-hour format with whole seconds. For example, 15:59:36>. This is the static time value for when the prompt was returned. This value changes for each prompt.",(0,t.jsx)(s.br,{}),"\n5 -- pid. The Process ID for your terminal. For example, 2336>. This is different for each terminal process. This value can also be returned from the $JOB special variable.",(0,t.jsx)(s.br,{}),"\n6 -- Username. For example, fred&gr;. This is the same for all of your terminal processes.",(0,t.jsx)(s.br,{}),"\n7 -- Elapsed time executing the last command, in seconds.milliseconds. For example, .000495>. Leading and trailing zeros are suppressed. This changes for each prompt.",(0,t.jsx)(s.br,{}),"\n8 -- Transaction Level. For example, TL1>."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking TerminalPrompt() without specifying any parameter codes returns the current prompt codes."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the prompt codes prior to calling the TerminalPrompt method. This return value is a list of comma separated integers. It consists of the single integer 0 if no prompt codes are set."]}),"\n",(0,t.jsx)(s.h3,{id:"errorline",children:"ErrorLine"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ErrorLine() As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"ErrorLine()"})," class method returns source file and line of code for last ObjectScript error. The source file and line number usually refer to the kernel code that was written by InterSystems. This information is useful when requesting InterSystems support for help recovering from an error."]}),"\n",(0,t.jsx)(s.p,{children:"The name of the last ObjectScript error that occurred is contained in the $ZERROR special variable."}),"\n",(0,t.jsx)(s.h3,{id:"oserror",children:"OSError"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OSError() As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"OSError()"})," class method returns the operating system error code for a sequential file error."]}),"\n",(0,t.jsx)(s.p,{children:"When a sequential file I/O operation fails, the operating system returns an error code to InterSystems IRIS. InterSystems IRIS, in turn, issues its own corresponding error code. OSError() returns the operating system error code number (in angle brackets) followed by the operating system error message. These operating system errors are specific to the operating system being used."}),"\n",(0,t.jsx)(s.h3,{id:"userroutinepath",children:"UserRoutinePath"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UserRoutinePath(primary As %String, second As %String, third As %String) As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"UserRoutinePath()"})," class method specifies the namespace(s) that contains the routine dataset."]}),"\n",(0,t.jsx)(s.p,{children:"To change the source from which you want to draw routines, use UserRoutinePath to specify the namespace that contains the routine dataset in which the routines you want to use are located."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"primary"})," -- Optional -- Specify the primary namespace that contains the routine dataset. If used alone, this is the namespace that will be searched for all routines. If used in conjunction with second and third, primary will be the first namespace searched for routines.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"second"})," -- Optional -- Specify the second namespace to search for routines. If InterSystems IRIS does not find a routine in primary, it will search for it in second.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"third"})," -- Optional -- Specify the third namespace to search for routines. If InterSystems IRIS does not find a routine in primary or second, it will search for it in third."]}),"\n",(0,t.jsx)(s.p,{children:"If there are no parameters passed to UserRoutinePath() then the method returns the current primary namespace as a string and the User Routine Path is unchanged. If there are parameters then the entire User Routine Path is replaced with the newly specified path."}),"\n",(0,t.jsx)(s.p,{children:'Calling UserRoutinePath("") with a null string as a parameter resets the current namespace for routine access to the default namespace.'}),"\n",(0,t.jsx)(s.p,{children:"The namespace strings you specify can be either an explicit namespace or an implied namespace (a directory path or OpenVMS file specification preceded by two caret characters (^^))."}),"\n",(0,t.jsx)(s.p,{children:"To understand UserRoutinePath, you need to keep the following in mind. When a process starts, it uses routines in the current namespace. After you issue $system.Process.UserRoutinePath(new), all subsequent routines come from new."}),"\n",(0,t.jsx)(s.p,{children:"If you issue $system.Process.UserRoutinePath(new,second,third), all subsequent routines located in namespace new will come from new. If the system does not find a routine in new, the system looks for the routine in namespace second. If the system does not find the routine in second, the system looks for the routine in namespace third."}),"\n",(0,t.jsx)(s.p,{children:"Note: Using routines in second is VERY slow! You should use second as an aid to program development, not as a normal running procedure."}),"\n",(0,t.jsx)(s.p,{children:"To use UserRoutinePath as a development aid, make new your development area and use second as a storage area of routines that work. When you issue ZSAVE, the routine you save always goes into new, even if you loaded it from second. As you edit and file routines, they appear in new without affecting the library in second, and subsequent calls for the routines get the new version from new."}),"\n",(0,t.jsx)(s.p,{children:"The method does not affect globals; the original namespace still defines access privileges for globals. Your process uses globals in the current namespace unless you make explicit or implicit references to globals in other namespaces. In other words, the routines come from primary (or from second or third), while the globals come from the process's current namespace."}),"\n",(0,t.jsx)(s.p,{children:"This method does not affect system routines whose names begin with a per cent (%). For % routines see the SysRoutinePath method."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the primary namespace for user routine access that was set before you called UserRoutinePath."]}),"\n",(0,t.jsx)(s.h3,{id:"sysroutinepath",children:"SysRoutinePath"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SysRoutinePath(primary As %String, second As %String, third As %String) As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"SysRoutinePath()"})," class method specifies the namespace(s) that contains the routine dataset for system routines that begin with per cent (%)."]}),"\n",(0,t.jsx)(s.p,{children:"To change the source from which you want to draw system routines, use SysRoutinePath to specify the namespace that contains the routine dataset in which the system routines you want to use are located."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"primary"})," -- Optional -- Specify the primary namespace that contains the system routine dataset. If used alone, this is the namespace that will be searched for all system routines. If used in conjunction with second and third, primary will be the first namespace searched for system routines.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"second"})," -- Optional -- Specify the second namespace to search for system routines. If the system does not find a system routine in primary, it will search for it in second.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"third"})," -- Optional -- Specify the third namespace to search for system routines. If the system does not find a system routine in primary or second, it will search for it in third."]}),"\n",(0,t.jsx)(s.p,{children:"If there are no parameters passed to SysRoutinePath() then the method returns the current primary namespace as a string and the System Routine Path is unchanged. If there are parameters then the entire System Routine Path is replaced with the newly specified path."}),"\n",(0,t.jsx)(s.p,{children:'Calling SysRoutinePath("") with a null string as a parameter resets the current namespace for system routine access to the default namespace.'}),"\n",(0,t.jsx)(s.p,{children:"The namespace strings you specify can be either an explicit namespace or an implied namespace (a directory path or OpenVMS file specification preceded by two caret characters (^^))."}),"\n",(0,t.jsx)(s.p,{children:"To understand SysRoutinePath, you need to keep the following in mind. When a process starts, it uses routines in the current namespace. After you issue $system.Process.SysRoutinePath(new), all subsequent system routines come from new."}),"\n",(0,t.jsx)(s.p,{children:"If you issue $system.Process.SysRoutinePath(new,second,third), all subsequent system routines located in namespace new will come from new. If the system does not find a system routine in new, the system looks for the routine in namespace second. If the system does not find the system routine in second, the system looks for the routine in namespace third."}),"\n",(0,t.jsx)(s.p,{children:"Note: Using routines in second is VERY slow! You should use second as an aid to program development, not as a normal running procedure."}),"\n",(0,t.jsx)(s.p,{children:"To use SysRoutinePath as a development aid, make new your development area and use second as a storage area of routines that work. When you issue ZSAVE, the system routine you save always goes into new, even if you loaded it from second. As you edit and file system routines, they appear in new without affecting the library in second, and subsequent calls for the system routines get the new version from new."}),"\n",(0,t.jsx)(s.p,{children:"The method does not affect globals; the original namespace still defines access privileges for globals. Your process uses globals in the current namespace unless you make explicit or implicit references to globals in other namespaces. In other words, the system routines come from primary (or from second or third), while the globals come from the process's current namespace."}),"\n",(0,t.jsx)(s.p,{children:"This method does not affect user routines whose names do not begin with a per cent (%). For user routines see the UserRoutinePath method."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the primary namespace for system routine access that was set before you called SysRoutinePath."]}),"\n",(0,t.jsx)(s.h3,{id:"isghost",children:"IsGhost"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsGhost(pid As %Integer) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"IsGhost(pid)"})," class method returns 1 if a specified process has been killed at the O/S level and has not yet been cleaned by the CLNDMN process. Until the process is cleaned, their may be outstanding locks or resources which may be unavailable to other processes. Otherwise, this method returns 0."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- Process id of the process being queried"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- 1 if the specified process is a Ghost process;",(0,t.jsx)(s.br,{}),"\n0 otherwise"]}),"\n",(0,t.jsx)(s.h3,{id:"isprogrammermode",children:"IsProgrammerMode"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsProgrammerMode() As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"IsProgrammerMode()"})," class method returns 1 if the current process started in programmer mode, zero otherwise. Equivalent to $zjob#2."]}),"\n",(0,t.jsx)(s.h3,{id:"state",children:"State"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod State(pid As %Integer) As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"State(pid)"})," class method returns the current state of a specified process."]}),"\n",(0,t.jsxs)(s.p,{children:["The current state of a process is determined by the processes state bits.",(0,t.jsx)(s.br,{}),"\nThe following are all the different states a process can be in. The process may also have a number of different flags within these states which are appended to the end of the state name:",(0,t.jsx)(s.br,{}),"\nLOCK - Executing a Lock command",(0,t.jsx)(s.br,{}),"\nOPEN - Opening a device",(0,t.jsx)(s.br,{}),"\nCLOS - Closing a device",(0,t.jsx)(s.br,{}),"\nUSE - Using a device",(0,t.jsx)(s.br,{}),"\nREAD - Read command",(0,t.jsx)(s.br,{}),"\nWRT - Write command",(0,t.jsx)(s.br,{}),"\nGGET - Executing a $Get on a global",(0,t.jsx)(s.br,{}),"\nGSET - Setting a global",(0,t.jsx)(s.br,{}),"\nGKLL - Killing a global",(0,t.jsx)(s.br,{}),"\nGORD - $Order on a global",(0,t.jsx)(s.br,{}),"\nGQRY - $Query on a global",(0,t.jsx)(s.br,{}),"\nGDEF - $Data on a global",(0,t.jsx)(s.br,{}),"\nZF - Executing a $ZF command",(0,t.jsx)(s.br,{}),"\nHANG - Executing a Hang command",(0,t.jsx)(s.br,{}),"\nJOB - Executing a Job command",(0,t.jsx)(s.br,{}),"\nEXAM - Executing a variable exam",(0,t.jsx)(s.br,{}),"\nBRD - Executing a broadcast",(0,t.jsx)(s.br,{}),"\nSUSP - Process is suspended",(0,t.jsx)(s.br,{}),"\nINCR - Executing a $Increment",(0,t.jsx)(s.br,{}),"\nBSET - Global Set $Bit",(0,t.jsx)(s.br,{}),"\nBGET - Global $Bit",(0,t.jsx)(s.br,{}),"\nEVT - Waiting on event",(0,t.jsx)(s.br,{}),"\nSLCT - Waiting on Socket Select",(0,t.jsx)(s.br,{}),"\nSEM - Waiting on Semaphore",(0,t.jsx)(s.br,{}),"\nIPQ - Waiting on IPQ",(0,t.jsx)(s.br,{}),"\nDEQ - Waiting on De-queue or Queue Move",(0,t.jsx)(s.br,{}),"\nRUN - Process is running"]}),"\n",(0,t.jsx)(s.p,{children:"Here are the flags which can be appended to the state:"}),"\n",(0,t.jsxs)(s.p,{children:["CS - cluster slave job waiting for net answer",(0,t.jsx)(s.br,{}),"\nNL - Net lock waiting",(0,t.jsx)(s.br,{}),"\nDT - The dead job has open transaction",(0,t.jsx)(s.br,{}),"\nS - Suspension requested",(0,t.jsx)(s.br,{}),"\nGW - Global Wait",(0,t.jsx)(s.br,{}),"\nNR - Net Read",(0,t.jsx)(s.br,{}),"\nD - Dead",(0,t.jsx)(s.br,{}),"\nH - Halting",(0,t.jsx)(s.br,{}),"\nNH - Netharden",(0,t.jsx)(s.br,{}),"\nN - Remote network",(0,t.jsx)(s.br,{}),"\nW - Hibernating"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- Process id of the process being queried"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the process state string described above"]}),"\n",(0,t.jsx)(s.h3,{id:"routine",children:"Routine"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Routine(pid As %Integer = "") As %String\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"Routine(pid)"})," class method returns the routine name of a specified process."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- Process id of the process being queried",(0,t.jsx)(s.br,{}),"\nCurrent process, $JOB, if parameter is missing"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the routine name of the specified process."]}),"\n",(0,t.jsx)(s.h3,{id:"namespace",children:"NameSpace"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod NameSpace(pid As %Integer = "") As %String\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"NameSpace(pid)"})," class method returns the namespace name of a specified process."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- Process id of the process being queried",(0,t.jsx)(s.br,{}),"\nCurrent process, $JOB, if parameter is missing"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the namespace name of the specified process."]}),"\n",(0,t.jsx)(s.h3,{id:"currentdevice",children:"CurrentDevice"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CurrentDevice(pid As %Integer = "") As %String\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"CurrentDevice(pid)"})," class method returns the device name of a specified process."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- Process id of the process being queried",(0,t.jsx)(s.br,{}),"\nCurrent process, $JOB, if parameter is missing"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the device name of the specified process."]}),"\n",(0,t.jsx)(s.h3,{id:"linesexecuted",children:"LinesExecuted"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod LinesExecuted(pid As %Integer = "") As %Integer\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"LinesExecuted(pid)"})," class method returns the number of lines executed by a specified process."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- Process id of the process being queried",(0,t.jsx)(s.br,{}),"\nCurrent process, $JOB, if parameter is missing"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the number of lines executed by the specified process."]}),"\n",(0,t.jsx)(s.h3,{id:"globalreferences",children:"GlobalReferences"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GlobalReferences(pid As %Integer = "", exrtns As %Integer = 0) As %Integer\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"GlobalReferences(pid)"})," class method returns the number of global references made by a specified process."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- Process id of the process being queried",(0,t.jsx)(s.br,{}),"\nCurrent process, $JOB, if parameter is missing"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"exrtns"})," -- When invoked by the current job, and the passed exclude param is non zero, it will not include global refcounts associated with routines and classes."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the number of global references made by the specified process."]}),"\n",(0,t.jsx)(s.h3,{id:"enablediskreadtiming",children:"EnableDiskReadTiming"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod EnableDiskReadTiming()\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"EnableDiskReadTiming"})," class method enables timing of disk reads for the current process."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- none"]}),"\n",(0,t.jsx)(s.h3,{id:"disablediskreadtiming",children:"DisableDiskReadTiming"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DisableDiskReadTiming()\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"DisableDiskReadTiming"})," class method disables timing of disk reads for the current process."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- none"]}),"\n",(0,t.jsx)(s.h3,{id:"resetdiskreadtiming",children:"ResetDiskReadTiming"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ResetDiskReadTiming()\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"ResetDiskReadTiming"})," class method resets the recorded time of disk reads for the current process to 0."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- none"]}),"\n",(0,t.jsx)(s.h3,{id:"diskreadmilliseconds",children:"DiskReadMilliseconds"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DiskReadMilliseconds(pid As %Integer = "") As %Integer\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"DiskReadMilliseconds"})," class method returns the total recorded time spent in disk reads for a given process ID."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- Process id of the process being queried",(0,t.jsx)(s.br,{}),"\nCurrent process, $JOB, if parameter is missing"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the total recorded time spent in disk reads for that process, in milliseconds"]}),"\n",(0,t.jsx)(s.h3,{id:"jobtype",children:"JobType"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod JobType(pid As %Integer = "") As %Integer\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"JobType(pid)"})," class method returns the job type of a specified process. The job type is a number which tells what type of process it is. See the %syPidtab.inc include file for a definition of macros for these fields. Only use the defined macros in %syPidtab when referencing these fields. For example:"]}),"\n",(0,t.jsx)(s.p,{children:'If $SYSTEM.Process.JobType(pid)=$$$WDTYPE {    w !,"Process ",pid," is the write daemon" }'}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- Process id of the process being queried",(0,t.jsx)(s.br,{}),"\nCurrent process, $JOB, if parameter is missing"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the job type of the specified process."]}),"\n",(0,t.jsx)(s.h3,{id:"username",children:"UserName"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod UserName(pid As %Integer = "") As %String\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"UserName(pid)"})," class method returns the user name of a specified process."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- Process id of the process being queried",(0,t.jsx)(s.br,{}),"\nCurrent process, $JOB, if parameter is missing"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the user name of the specified process."]}),"\n",(0,t.jsx)(s.h3,{id:"clientnodename",children:"ClientNodeName"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ClientNodeName(pid As %Integer = "") As %String\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"ClientNodeName(pid)"})," class method returns the name of the client system that connected to, or initiated the connection to, a process."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- Process id of the process being queried",(0,t.jsx)(s.br,{}),"\nCurrent process, $JOB, if parameter is missing"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the system name for the client that connected to, or initiated the connection to, the specified process"]}),"\n",(0,t.jsx)(s.h3,{id:"clientexecutablename",children:"ClientExecutableName"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ClientExecutableName(pid As %Integer = "") As %String\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"ClientExecutableName(pid)"})," class method returns the name of the executable that called a process."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- Process id of the process being queried",(0,t.jsx)(s.br,{}),"\nCurrent process, $JOB, if parameter is missing"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the executable name of the client that initiated the connection to the specified process"]}),"\n",(0,t.jsx)(s.h3,{id:"cspsessionid",children:"CSPSessionID"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CSPSessionID(pid As %Integer = "") As %String\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"CSPSessionID(pid)"})," class method returns the CSP session ID of the client that initiated the connection to a process."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- Process id of the process being queried",(0,t.jsx)(s.br,{}),"\nCurrent process, $JOB, if parameter is missing"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the CSP session ID of the client that initiated the connection to the specified process."]}),"\n",(0,t.jsx)(s.h3,{id:"clientipaddress",children:"ClientIPAddress"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ClientIPAddress(pid As %Integer = "") As %String\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"ClientIPAddress(pid)"})," class method returns the IP address of the system that initiated the connection a specified process."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- Process id of the process being queried",(0,t.jsx)(s.br,{}),"\nCurrent process, $JOB, if parameter is missing"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the IP Address of the system that initiated the connection to the specified process."]}),"\n",(0,t.jsx)(s.h3,{id:"terminate",children:"Terminate"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Terminate(pid As %Integer = "", ExitStatus As %Integer = 1) As %Integer\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"Terminate(pid, ExitStatus)"})," class method terminates a specified process and causes it to return a specified exit status to the O/S."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Parameters"})," ",(0,t.jsx)(s.strong,{children:"pid"})," -- Process id of the process being terminated",(0,t.jsx)(s.br,{}),"\nDefaults to current process, $JOB, if parameter is missing"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"ExitStatus"})," A nonnegative parameter value is the exit status returned to the O/S by the terminated process. Negative values are reserved to InterSystems except that -65 can be used to terminate a InterSystems IRIS instance daemon or a process in an unresolved transaction state.",(0,t.jsx)(s.br,{}),"\nDefaults to 1 if the ExitStatus parameter is missing."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Return values"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"1 -- Success"}),"\n",(0,t.jsx)(s.li,{children:"0 -- Failure - Process exempt from termination (eg. GARCOL/DAEMON). It can only be terminated if you specify an ExitStatus parameter value of -65."}),"\n",(0,t.jsx)(s.li,{children:"-1 -- Failure - Process is non-responsive"}),"\n",(0,t.jsx)(s.li,{children:'-2 -- Failure - Process is inactive, a ghost or a "dead" process'}),"\n",(0,t.jsx)(s.li,{children:"-3 -- Failure - Process pid does not reference an InterSystems IRIS process"}),"\n",(0,t.jsx)(s.li,{children:"-4 -- Failure -- The process has an open transaction that is currently in a halt or rollback state. The process cannot be terminated unless you specify an ExitStatus parameter value of -65."}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"framestacksize",children:"FrameStackSize"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod FrameStackSize() As %Integer\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the frame stack size, in bytes, for the current process."}),"\n",(0,t.jsx)(s.h3,{id:"framestackexpanded",children:"FrameStackExpanded"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod FrameStackExpanded() As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Indicates whether the frame stack has been expanded following a ",(0,t.jsxs)(s.framestack,{children:[" error.",(0,t.jsx)(s.br,{}),"\nIf it is 1, another ",(0,t.jsxs)(s.framestack,{children:[" will terminate the process without running any error trap.",(0,t.jsx)(s.br,{}),"\nIt will automatically return to 0 after enough stack entries are popped to return to normal operation."]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"appframeinfo",children:"AppFrameInfo"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AppFrameInfo(info As %String, enable As %Integer) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Sets the Application Metadata Information string for the current execution level."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"info"})," -- the text describing the current level.",(0,t.jsx)(s.br,{}),"\nIf not specified, any existing Metadata for the current level is removed."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"enable"})," -- whether to enable external interrupts.",(0,t.jsx)(s.br,{}),"\n0 - the state of external interrupts will not be changed (the default).",(0,t.jsx)(s.br,{}),"\n1 - external interrupts will be enabled. When this Metadata is removed, the interrupt status will be restored to its previous value."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the previous value, if any, of Meadata for the current execution level."]}),"\n",(0,t.jsx)(s.h3,{id:"getappframeinfo",children:"GetAppFrameInfo"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetAppFrameInfo(pid As %Integer) As %List\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the entire Application Metadata Information for the specified process."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"pid"})," -- The Process ID of the process to inspect."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- The application frame information in $LIST form."]}),"\n",(0,t.jsx)(s.h3,{id:"timezone",children:"TimeZone"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TimeZone(newTZ As %String) As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"TimeZone(newTZ)"})," class method changes the time zone for the process."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"newTZ"})," -- string specifying the time zone that will be assigned to the environment variable TZ. The time zone is usually specified in POSIX or Olson format. Check the OS manuals to see the appropriate syntax."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking TimeZone() without an argument just returns the previous value of TZ."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the previous value of the TZ environment variable or -1 if it was undefined."]}),"\n",(0,t.jsx)(s.h3,{id:"listformat",children:"ListFormat"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFormat(newFormat As %Integer) As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"ListFormat"})," class method returns the current value of the switch that determines whether new $LIST values are compressed or not, and it can specify a new value for the switch."]}),"\n",(0,t.jsx)(s.p,{children:"Existing lists, whether compressed or not, can be read regardless of the switch value."}),"\n",(0,t.jsxs)(s.p,{children:["The switch consists of two bit values which may be specified separately or combined.",(0,t.jsx)(s.br,{}),"\n1 - IEEE ($DOUBLE(nn)) values should be compressed.",(0,t.jsx)(s.br,{}),"\n2 - Unicode strings should be compressed.",(0,t.jsx)(s.br,{}),"\n3 - Both IEEE and Unicode values should be compressed."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"newFormat"})," -- integer specifying the new value for the switch. If it is omitted, the current value is not changed."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the switch value prior to calling this method."]}),"\n",(0,t.jsx)(s.h3,{id:"transactionssuspended",children:"TransactionsSuspended"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TransactionsSuspended(switch As %Boolean) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"TransactionsSuspended(switch)"})," class method controls a switch that will allow a process to temporarily suspend transactions."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Warning:"})," Changing a global variable during a transaction, then changing that same global while the transaction is suspended, can result in an error being logged if the transaction is ultimately rolled back. A global variable modification during the transaction suspension is not rolled back. This may prevent rolling back an earlier modification of that same variable that occured while the transaction was not suspended."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"switch"})," -- a boolean value that specifies whether transactions are to be suspended or are to be resumed",(0,t.jsx)(s.br,{}),"\n1 -- Transactions are to be suspended.",(0,t.jsx)(s.br,{}),"\n0 -- Transactions are to be resumed."]}),"\n",(0,t.jsx)(s.p,{children:"Invoking TransactionsSuspended() without specifying the switch parameter returns the current switch setting without changing that setting."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- the TransactionsSuspended switch state prior to calling the TransactionsSuspended method."]}),"\n",(0,t.jsx)(s.h3,{id:"pipeexitcode",children:"PipeExitCode"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PipeExitCode(device As %String, ByRef status As %Status)\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"PipeExitCode(device,.status)"})," class method returns the process exit code for a CPIPE device."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"device"}),' -- the command pipe device name, such as "|CPIPE|".']}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"status"})," -- Optional -- a variable to receive a %Status value if the exit code can not be obtained."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"}),' -- the integer exit code of the process started by the CPIPE device, or "" if the exit code is not available.']})]})}function c(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var t=n(96540);const r={},i=t.createContext(r);function a(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);