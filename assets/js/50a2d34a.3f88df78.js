"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[88155],{12699:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>a,default:()=>o,frontMatter:()=>r,toc:()=>l});var s=n(74848),i=n(28453);const r={pagination_prev:null,pagination_next:null},a="%Library.Persistent",l=[{value:"Parameters",id:"parameters",level:2},{value:"DEFAULTGLOBAL",id:"defaultglobal",level:3},{value:"DATALOCATIONGLOBAL",id:"datalocationglobal",level:3},{value:"DSTIME",id:"dstime",level:3},{value:"DSINTERVAL",id:"dsinterval",level:3},{value:"DSCONDITION",id:"dscondition",level:3},{value:"EXTENTQUERYSPEC",id:"extentqueryspec",level:3},{value:"EXTENTSIZE",id:"extentsize",level:3},{value:"GUIDENABLED",id:"guidenabled",level:3},{value:"IDENTIFIEDBY",id:"identifiedby",level:3},{value:"MANAGEDEXTENT",id:"managedextent",level:3},{value:"READONLY",id:"readonly",level:3},{value:"ROWLEVELSECURITY;",id:"rowlevelsecurity",level:3},{value:"%XCOMPACTANCESTRY",id:"xcompactancestry",level:3},{value:"STORAGEDEFAULT",id:"storagedefault",level:3},{value:"USEEXTENTSET",id:"useextentset",level:3},{value:"VERSIONPROPERTY",id:"versionproperty",level:3},{value:"VERSIONCLIENTNAME;",id:"versionclientname",level:3},{value:"masterClassName;",id:"masterclassname",level:3},{value:"Properties",id:"properties",level:2},{value:"%Concurrency",id:"concurrency",level:3},{value:"Triggers",id:"triggers",level:2},{value:"%OBJJRNIU",id:"objjrniu",level:3},{value:"%OBJJRND",id:"objjrnd",level:3},{value:"%OBJGUID",id:"objguid",level:3},{value:"Methods",id:"methods",level:2},{value:"%ConcurrencySet",id:"concurrencyset",level:3},{value:"%Delete",id:"delete",level:3},{value:"%DeleteOID",id:"deleteoid",level:3},{value:"%DeleteId",id:"deleteid",level:3},{value:"%DeleteExtent",id:"deleteextent",level:3},{value:"%DowngradeConcurrency",id:"downgradeconcurrency",level:3},{value:"%ExecuteBeforeTriggers",id:"executebeforetriggers",level:3},{value:"%ExecuteAfterTriggers",id:"executeaftertriggers",level:3},{value:"%Id",id:"id",level:3},{value:"%IdSet",id:"idset",level:3},{value:"%GetSwizzleObject",id:"getswizzleobject",level:3},{value:"%Oid",id:"oid",level:3},{value:"%ComposeOid",id:"composeoid",level:3},{value:"%Open",id:"open",level:3},{value:"%ObjectIsNull",id:"objectisnull",level:3},{value:"%LoadInit",id:"loadinit",level:3},{value:"%OpenId",id:"openid",level:3},{value:"%Reload",id:"reload",level:3},{value:"%RollBack",id:"rollback",level:3},{value:"%Save",id:"save",level:3},{value:"%OnDeleteFinally",id:"ondeletefinally",level:3},{value:"%OnOpenFinally",id:"onopenfinally",level:3},{value:"%OnSaveFinally",id:"onsavefinally",level:3},{value:"%UpgradeConcurrency",id:"upgradeconcurrency",level:3},{value:"%AcquireLock",id:"acquirelock",level:3},{value:"%ReleaseLock",id:"releaselock",level:3},{value:"%LockExtent",id:"lockextent",level:3},{value:"%UnlockExtent",id:"unlockextent",level:3},{value:"%LockId",id:"lockid",level:3},{value:"%UnlockId",id:"unlockid",level:3},{value:"%GetLock",id:"getlock",level:3},{value:"%BuildIndices",id:"buildindices",level:3},{value:"%BuildIndicesAsync",id:"buildindicesasync",level:3},{value:"%BuildIndicesAsyncResponse",id:"buildindicesasyncresponse",level:3},{value:"%BuildDeferredIndices",id:"builddeferredindices",level:3},{value:"%BMEBuilt",id:"bmebuilt",level:3},{value:"%CheckConstraintsForExtent",id:"checkconstraintsforextent",level:3},{value:"%CheckConstraints",id:"checkconstraints",level:3},{value:"%Exists",id:"exists",level:3},{value:"%ExistsId",id:"existsid",level:3},{value:"%1Check",id:"1check",level:3},{value:"%FileIndices",id:"fileindices",level:3},{value:"%GUID",id:"guid",level:3},{value:"%GUIDSet",id:"guidset",level:3},{value:"%KillExtent",id:"killextent",level:3},{value:"%SaveIndices",id:"saveindices",level:3},{value:"%AddJrnObjToSyncSet",id:"addjrnobjtosyncset",level:3},{value:"%BuildIndexInternal",id:"buildindexinternal",level:3},{value:"%DeleteData",id:"deletedata",level:3},{value:"%InitExtentData",id:"initextentdata",level:3},{value:"%KillExtentData",id:"killextentdata",level:3},{value:"%LoadData",id:"loaddata",level:3},{value:"%PurgeIndices",id:"purgeindices",level:3},{value:"%SaveData",id:"savedata",level:3},{value:"%SaveDirect",id:"savedirect",level:3},{value:"%SortBegin",id:"sortbegin",level:3},{value:"%SortEnd",id:"sortend",level:3},{value:"%OnBeforeBuildIndices",id:"onbeforebuildindices",level:3},{value:"%OnAfterBuildIndices",id:"onafterbuildindices",level:3},{value:"%OnDelete",id:"ondelete",level:3},{value:"%OnAfterDelete",id:"onafterdelete",level:3},{value:"%OnBeforeSave",id:"onbeforesave",level:3},{value:"%OnAfterSave",id:"onaftersave",level:3},{value:"%OnOpen",id:"onopen",level:3},{value:"%OnBeforePurgeIndices",id:"onbeforepurgeindices",level:3},{value:"%OnAfterPurgeIndices",id:"onafterpurgeindices",level:3},{value:"%OnReload",id:"onreload",level:3},{value:"%OnRollBack",id:"onrollback",level:3},{value:"%OnDetermineClass",id:"ondetermineclass",level:3}];function d(e){const t={a:"a",br:"br",candidatekey:"candidatekey",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",key:"key",li:"li",oid:"oid",ol:"ol",p:"p",pre:"pre",property:"property",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"librarypersistent",children:"%Library.Persistent"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Library.Persistent Extends %SwizzleObject [ Abstract, ClassType = persistent, NoExtent, PropertyClass = %Library.PersistentProperty, System = 2 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"For information on this class"}),", see ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+%25Library.Persistent",children:"Working with Persistent Objects"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The sample class mentioned here (Sample.Person) is part of ",(0,s.jsx)(t.a,{href:"https://github.com/intersystems/Samples-Data",children:"https://github.com/intersystems/Samples-Data."})," See ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?FIND=landing+githubsamples",children:"Downloading Samples"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"The %Persistent class provides the basic mechanism by which objects are stored to and retrieved from a database."}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(t.h3,{id:"defaultglobal",children:"DEFAULTGLOBAL"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter DEFAULTGLOBAL As STRING;\n"})}),"\n",(0,s.jsx)(t.p,{children:'If a persistent class uses %Storage.Persistent then the DEFAULTGLOBAL parameter is used as the default global root for the values of the storage keywords COUNTERLOCATION, DATALOCATION, IDLOCATION, INDEXLOCATION and STREAMLOCATION in the active storage definition. DEFAULTGLOBAL is only used to generate location keyword values that are not already defined. The location value is constructed by adding a location type to the end of DEFAULTGLOBAL. For example, if DEFAULTGLOBAL = "^GL.Account" the compiler will generate DATALOCATION = ^GL.AccountD.'}),"\n",(0,s.jsx)(t.p,{children:"If USEEXTENTSET is true, then DEFAULTGLOBAL is used as the default extent location."}),"\n",(0,s.jsx)(t.p,{children:"The location types are:"}),"\n",(0,s.jsx)(t.p,{children:"| Location       | Type |  | COUNTERLOCATION | C |\n| -------------- | ---- |  | --------------- | - |\n| DATALOCATION   | D    |  |                 |   |\n| IDLOCATION     | D    |  |                 |   |\n| INDEXLOCATION  | I    |  |                 |   |\n| STREAMLOCATION | S    |  |                 |   |"}),"\n",(0,s.jsx)(t.h3,{id:"datalocationglobal",children:"DATALOCATIONGLOBAL"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter DATALOCATIONGLOBAL As STRING = {$$storageGbl^%qarmac(%classname)};\n"})}),"\n",(0,s.jsx)(t.p,{children:'Global name containing master map data for this class. Used in creating the oref to oid table so we can determine where the data for this class is located. Will normally be set automatically during compile for both default and SQL storage classes so normally there is no need to modify this setting unless you have custom storage and wish to point this at a specific global name. If the value is "" then we will not insert a data global location into the oid->obj table and so will assume if the same class (mapped from a common location) opens the same id in two different namespaces these are referring to the same instance and so the second open will return the first oref.'}),"\n",(0,s.jsx)(t.h3,{id:"dstime",children:"DSTIME"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter DSTIME As STRING [ Constraint = ",AUTO,MANUAL,CONDITIONAL", Flags = ENUM ];\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If the DSTIME parameter is set to AUTO then the most recent filing operation in the current DSTIME value for each object will be recorded in a global, ^OBJ.DSTIME:",(0,s.jsx)(t.br,{}),"\n^OBJ.DSTIME(ExtentName,DSTIME,objectID) = filing operation",(0,s.jsx)(t.br,{}),"\nFor DSTIME=AUTO the DSTIME value is recorded in ^OBJ.DSTIME and is set by the consumer of DSTIME data.",(0,s.jsx)(t.br,{}),"\nRefer to %DeepSee documentation for more information on how DSTIME is used by %DeepSee.",(0,s.jsx)(t.br,{}),"\nThe filing operations are:"]}),"\n",(0,s.jsx)(t.p,{children:'| Code                                                                                                                                                                                                                                                                                                                                | Operation |  | 0 | Update |\n| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |  | - | ------ |\n| 1                                                                                                                                                                                                                                                                                                                                   | Insert    |  |   |        |\n| 2                                                                                                                                                                                                                                                                                                                                   | Delete    |  |   |        |\n| If the DSTIME parameter is set to MANUAL then the user is responsible for journaling object filing operations. If DSTIME is set to "CONDITIONAL", the user is expected to define the parameter DSCONDITION setting it to an expression which will determine if the actions performed when DSTIME is set to AUTO will execute or not |           |  |   |        |'}),"\n",(0,s.jsx)(t.h3,{id:"dsinterval",children:"DSINTERVAL"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter DSINTERVAL As INTEGER;\n"})}),"\n",(0,s.jsx)(t.p,{children:"DSINTERVAL is the number of seconds between one DSTIME value and the next. The DSTIME value for DSINTERVAL > 0 is computed from $ZTIMESTAMP and is the number of seconds from day 0, time 0 to the nearest interval, rounded down. Using an interval has the effect of grouping all DSTIME entries for the class in some number of seconds."}),"\n",(0,s.jsx)(t.h3,{id:"dscondition",children:"DSCONDITION"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter DSCONDITION As STRING;\n"})}),"\n",(0,s.jsx)(t.p,{children:"DSCONDITION is the expression that will be evaluated before deciding whether certain actions must be taken. These actions are the same as those performed when DSTIME is set to AUTO - for instance updating ^OBJ.DSTIME on modifying a record."}),"\n",(0,s.jsx)(t.h3,{id:"extentqueryspec",children:"EXTENTQUERYSPEC"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter EXTENTQUERYSPEC As ROWSPEC [ Flags = LIST ];\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The EXTENTQUERYSPEC parameter defines the properties to be retrieved in addition to the IDKEY value for the built-in ",(0,s.jsx)(t.strong,{children:"Extent"})," query."]}),"\n",(0,s.jsxs)(t.p,{children:["Persistent classes should define a value of for EXTENTQUERYSPEC if they wish to include additional properties in their built-in ",(0,s.jsx)(t.strong,{children:"Extent"})," query."]}),"\n",(0,s.jsxs)(t.p,{children:["For example: ",(0,s.jsx)(t.code,{children:'parameter EXTENTQUERYSPEC = "Name,SSN,Age";'})]}),"\n",(0,s.jsx)(t.h3,{id:"extentsize",children:"EXTENTSIZE"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter EXTENTSIZE As INTEGER = 100000;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The EXTENTSIZE parameter is used to inform the ",(0,s.jsx)(t.em,{children:"SQL Query Optimizer"})," of the approximate number of instances in the extent containing instances of this class."]}),"\n",(0,s.jsxs)(t.p,{children:["For example, a class that expects to have about 1,000,000 instances should define: ",(0,s.jsx)(t.code,{children:"parameter EXTENTSIZE = 1000000;"})]}),"\n",(0,s.jsx)(t.h3,{id:"guidenabled",children:"GUIDENABLED"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter GUIDENABLED = 0;\n"})}),"\n",(0,s.jsx)(t.p,{children:"If this parameter is set to 1 then a GUID will be assigned (to the %GUID property) to each new object. When the object is saved for the first time this GUID value will be recorded in a namespace index which will allow GUID to be resolved to OIDs."}),"\n",(0,s.jsx)(t.h3,{id:"identifiedby",children:"IDENTIFIEDBY"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter IDENTIFIEDBY [ Deprecated ];\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The IDENTIFIEDBY parameter can optionally be set to the name of a required property whose type is a reference to another class (not a literal). This property's IDKEY is then used as the prefix for the IDKEY of this class.",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.em,{children:"Deprecated parameter, use parent/child relationships instead"})]}),"\n",(0,s.jsx)(t.h3,{id:"managedextent",children:"MANAGEDEXTENT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter MANAGEDEXTENT As INTEGER [ Constraint = "0,1", Flags = ENUM ] = 1;\n'})}),"\n",(0,s.jsx)(t.p,{children:"The MANAGEDEXTENT parameter can be set to 0 (zero) to cause the Extent Manager to ignore this class. If set to 1 then the Extent Manager will register globals used by the class and detect collisions. Unmanaged extents (MANAGEDEXTENT = 0) are not checked. Currently, only classes using default storage (%Storage.Persistent) can be managed."}),"\n",(0,s.jsx)(t.h3,{id:"readonly",children:"READONLY"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter READONLY = 0;\n"})}),"\n",(0,s.jsx)(t.p,{children:"READONLY = 1 means that objects can be created, opened but not saved or deleted. Tables are projected to SQL as READONLY."}),"\n",(0,s.jsx)(t.h3,{id:"rowlevelsecurity",children:"ROWLEVELSECURITY;"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter ROWLEVELSECURITY;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["ROWLEVELSECURITY = 1 | ",(0,s.jsx)(t.property,{children:" means that row level security is active and the list of users/roles for a given instance/row is contained in a generated property. If the value of this parameter is a valid property name then that property will be used as the reader list and only generated if not already defined."})]}),"\n",(0,s.jsx)(t.h3,{id:"xcompactancestry",children:"%XCOMPACTANCESTRY"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter %XCOMPACTANCESTRY As STRING;\n"})}),"\n",(0,s.jsx)(t.p,{children:"%XCOMPACTANCESTRY can be set to a string to replace the value of the %%CLASSNAME property (x__classname field) with a more compact value that will reduce the size of the data on disk stored for each record."}),"\n",(0,s.jsx)(t.h3,{id:"storagedefault",children:"STORAGEDEFAULT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter STORAGEDEFAULT [ Constraint = ",columnar" ];\n'})}),"\n",(0,s.jsx)(t.p,{children:'STORAGEDEFAULT defines the default storage allocation to use for properties in this class. The Storage Generator will use this value when building the initial Storage Definition or amending it when new properties have been added to a class. Allowed values are "column" and "". Leaving it undefined ("") means the overall system default row-based storage model will be used when persisting this extent. This value can be overridden for individual properties with the corresponding property-level parameter, where additional values are available for specific property types.'}),"\n",(0,s.jsx)(t.h3,{id:"useextentset",children:"USEEXTENTSET"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter USEEXTENTSET = 0;\n"})}),"\n",(0,s.jsx)(t.p,{children:"If a persistent class uses %Storage.Persistent then the USEEXTENTSET parameter is used to specify the global naming strategy used by the default storage class (%Storage.Persistent). If TRUE, then global names are generated for each index that is not already allocated a LOCATION in the active storage definition."}),"\n",(0,s.jsx)(t.p,{children:"If the storage definition specifies EXTENTLOCATION then that value is used as the base reference for all globals assigned to indices that do not have an explicit LOCATION assigned."}),"\n",(0,s.jsx)(t.p,{children:"The global name generator for USEEXTENTSET = TRUE honors the package prefix defined in the Package Definition. If none is defined then the package prefix is generated using a based-62 encoded integer produced from CRC32 of the package name. The specific class identifier is generated from the unqualified class name using the same hash (class->crc32->base62) to form EXTENTLOCATION. Specific index suffixes are produced using a generated offset that is local to the first persistent class with an enumerated extent in which the index appears (either defined or inherited)."}),"\n",(0,s.jsx)(t.p,{children:"There are several factors that influence the generation of EXTENTLOCATION:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"If the EXTENTLOCATION keyword is defined then its value is used,"}),"\n",(0,s.jsx)(t.li,{children:"If the DEFAULTGLOBAL class parameter is defined then its value is used,"}),"\n",(0,s.jsx)(t.li,{children:"otherwise, the value is generated as two dot delimited segments. The first segment is either the defined package prefix retrieved from the package definition global or, if none is defined, a hash of the package name. The second segment is generated by a hash of the unqualified class name. The hash used is a base 62 encoded CRC32 of the value. For example, Sample.Person produces ^EW3K.wPC9 if no package prefix is defined.\nThe EXTENTLOCATION value is used as the base for specific globals allocated to indices. Each index is assigned an offset that is incremented from 1 by 1, offset = 1 is reserved for the IDKEY index."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"EXTENTLOCATION is specific to each class. When a persistent class extends another persistent class, forming a subextent, then the subclass's EXTENTLOCATION is specific to that subclass. The index location for any inherited index is already defined specifically in the superclass so the subclass's EXTENTLOCATION will only be used as the base for any index that originates in the subclass. For example, Sample.Employee extends Sample.Person. The EXTENTLOCATION generated for Sample.Person is ^EW3K.wPC9 and the EXTENTLOCATION for Sample.Employee is ^EW3K.D1Ex. Since Sample.Employee inherits several indices from Sample.Person, the global name assigned to each of those indices is already defined and inherited by Sample.Employee. However, any index defined in Sample.Employee and not inherited from Sample.Person will be assigned a global name based on Sample.Employee's EXTENTLOCATION, not on Sample.Person's EXTENTLOCATION. In other words, the EXTENTLOCATION storage keyword is not inherited."}),"\n",(0,s.jsx)(t.p,{children:"The following tables show the indices and locations for Sample.Person and Sample.Employee. Notice the last index in the Sample.Employee table:"}),"\n",(0,s.jsx)(t.p,{children:"Class = Sample.Person"}),"\n",(0,s.jsx)(t.p,{children:"Index"}),"\n",(0,s.jsx)(t.p,{children:"Location"}),"\n",(0,s.jsx)(t.p,{children:"IDKEY"}),"\n",(0,s.jsx)(t.p,{children:"^EW3K.wPC9.1"}),"\n",(0,s.jsx)(t.p,{children:"$Person"}),"\n",(0,s.jsx)(t.p,{children:"^EW3K.wPC9.2"}),"\n",(0,s.jsx)(t.p,{children:"NameIDX"}),"\n",(0,s.jsx)(t.p,{children:"^EW3K.wPC9.3"}),"\n",(0,s.jsx)(t.p,{children:"SSNKey"}),"\n",(0,s.jsx)(t.p,{children:"^EW3K.wPC9.4"}),"\n",(0,s.jsx)(t.p,{children:"ZipCode"}),"\n",(0,s.jsx)(t.p,{children:"^EW3K.wPC9.5"}),"\n",(0,s.jsx)(t.p,{children:"Class = Sample.Employee extends Sample.Person"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsx)(t.table,{children:(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Index"}),(0,s.jsx)(t.th,{children:"Location"}),(0,s.jsx)(t.th,{children:"IDKEY"}),(0,s.jsx)(t.th,{children:"^EW3K.wPC9.1"}),(0,s.jsx)(t.th,{children:"$Person"}),(0,s.jsx)(t.th,{children:"^EW3K.wPC9.2"}),(0,s.jsx)(t.th,{children:"NameIDX"}),(0,s.jsx)(t.th,{children:"^EW3K.wPC9.3"}),(0,s.jsx)(t.th,{children:"SSNKey"}),(0,s.jsx)(t.th,{children:"^EW3K.wPC9.4"}),(0,s.jsx)(t.th,{children:"ZipCode"}),(0,s.jsx)(t.th,{children:"^EW3K.wPC9.5"}),(0,s.jsx)(t.th,{children:"$Employee"}),(0,s.jsx)(t.th,{children:"^EW3K.D1Ex.2"})]})})}),"\n",(0,s.jsx)(t.p,{children:"Any generated global index locations and EXTENTLOCATION are updated back into the active storage definition after the class is compiled."}),"\n",(0,s.jsx)(t.p,{children:'If USEEXTENTSET is FALSE, then global names are generated using the package-hash.class-hashSuffix strategy. For example, ^Sample.PersonD and ^Sample.PersonI("SSNKey") are globals used by Sample.Person and specific index structures are all stored in ^Sample.PersonI with the index name used as the first subscript.'}),"\n",(0,s.jsx)(t.h3,{id:"versionproperty",children:"VERSIONPROPERTY"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter VERSIONPROPERTY As STRING;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["VERSIONPROPERTY = ",(0,s.jsxs)(t.property,{children:[" means that the ",(0,s.jsxs)(t.property,{children:[" in memory will be compared to the ",(0,s.jsx)(t.property,{children:" on disk during an update. If different a concurrency conflict error will be reported and the save will fail."})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"versionclientname",children:"VERSIONCLIENTNAME;"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter VERSIONCLIENTNAME;\n"})}),"\n",(0,s.jsx)(t.p,{children:"VERSIONCLIENTNAME can be set to a valid CLIENTNAME (see property CLIENTNAME) value. This value will be used for client projections of the %Version property."}),"\n",(0,s.jsx)(t.h3,{id:"masterclassname",children:"masterClassName;"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter masterClassName;\n"})}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"concurrency",children:"%Concurrency"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %Concurrency As %RawString [ Final, InitialExpression = {$zu(115,10)}, Internal, Transient ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"%Concurrency holds the value of the concurrency setting for this object."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"0:"}),(0,s.jsx)(t.th,{children:"None"}),(0,s.jsx)(t.th,{children:"Suppress all concurrency controls for this object. No locks are used."}),(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"1:"}),(0,s.jsx)(t.td,{children:"Atomic Read"}),(0,s.jsx)(t.td,{children:"When an object is loaded, %LoadData will read the entire object from disk without the possibility that another process will write any data to this object before the read operation is complete. If necessary, a shared lock will be acquired on the object to guarantee an atomic read. Any locks acquired during the read operation are released after the read operation is completed. No locks are acquired for a new object. %SaveData will acquire an exclusive lock during the course of the save.  2:"}),(0,s.jsx)(t.td,{children:"Shared"}),(0,s.jsx)(t.td,{children:"When an object is loaded, %LoadData will acquire a shared lock on the object and read the entire object from disk. The lock is released after the read operation is completed. No locks are acquired for a new object. %SaveData will acquire an exclusive lock during the course of the save.  3:"}),(0,s.jsx)(t.td,{children:"Shared/Retained"}),(0,s.jsx)(t.td,{children:"When an object is loaded, %LoadData will acquire a shared lock for the object. The lock is released when the object is destructed (removed from memory). No locks are initially acquired for a new object. %SaveData will acquire an exclusive lock during the course of the save. %SaveData will also acquire a shared lock when saving a new object. This lock is retained until the object is destructed (removed from memory).  4:"}),(0,s.jsx)(t.td,{children:"Exclusive"}),(0,s.jsx)(t.td,{children:"When an object is loaded, %LoadData will acquire an exclusive lock for the object. The lock is released when the object is destructed (removed from memory). %SaveData will acquire an exclusive lock when saving a new object. This lock is retained until the object is destructed (removed from memory). The only difference between Shared (2) and Atomic Read (1) settings is that Shared concurrency triggers a shared lock to always be acquired during read while Atomic Read will only acquire a shared lock when required to ensure an atomic read."})]})})]}),"\n",(0,s.jsx)(t.h2,{id:"triggers",children:"Triggers"}),"\n",(0,s.jsx)(t.h3,{id:"objjrniu",children:"%OBJJRNIU"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Trigger %OBJJRNIU [ CodeMode = generator, Event = INSERT/UPDATE, Foreach = row, Order = 2, Time = AFTER ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"objjrnd",children:"%OBJJRND"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Trigger %OBJJRND [ CodeMode = generator, Event = DELETE, Foreach = row, Order = 1 ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"objguid",children:"%OBJGUID"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Trigger %OBJGUID [ CodeMode = generator, Event = INSERT, Foreach = row, Order = 1, Time = AFTER ]\n"})}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"concurrencyset",children:"%ConcurrencySet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ConcurrencySet(val As %RawString) As %Status [ Internal, Private ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"delete",children:"%Delete"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %Delete(oid As %ObjectIdentity = "", concurrency As %Integer = -1) As %Status [ CodeMode = generator, Final, GenerateAfter = (%OnDelete, %OnDeleteFinally, %OnJournalObject), ServerOnly = 0 ]\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Deletes the stored version of the object with OID oid from the database. It does not remove any in-memory versions of the object that may be present. Refer to ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ%5Fconcurrency",children:"Object Concurrency Options"})," for more details on the optional concurrency argument. For classes defined as Sharded=1, concurrency=0 is always used."]}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.p,{children:"Internally, %Delete initiates a transaction and then invokes the storage interface method %DeleteData. If %DeleteData succeeds, the transaction is committed, otherwise it is rolled back. No transaction is initiated if this class is defined as Sharded=1"}),"\n",(0,s.jsx)(t.h3,{id:"deleteoid",children:"%DeleteOID"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %DeleteOID() As %Status [ Internal, Private ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Internal method to remove a previously assigned oid only to be used when deleting an object that is also in memory."}),"\n",(0,s.jsx)(t.h3,{id:"deleteid",children:"%DeleteId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %DeleteId(id As %String, concurrency As %Integer = -1) As %Status [ CodeMode = expression, Final, ServerOnly = 0 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Deletes the stored version of the object with ID id from the database."}),"\n",(0,s.jsxs)(t.p,{children:["%DeleteId is identical in operation to the %Delete method except that it uses an Id value instead of an OID value to find an object. Refer to ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ%5Fconcurrency",children:"Object Concurrency Options"})," for more details on the optional concurrency argument. For classes defined as Sharded=1, concurrency=0 is always used."]}),"\n",(0,s.jsx)(t.h3,{id:"deleteextent",children:"%DeleteExtent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %DeleteExtent(concurrency As %Integer = -1, ByRef deletecount, ByRef instancecount, pInitializeExtent As %Integer = 1, Output errorLog As %Status) As %Status [ ServerOnly = 0 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Delete all instances of this class from its extent. On exit instancecount contains the original number of instances while deletecount contains the number of instances actually deleted."}),"\n",(0,s.jsxs)(t.p,{children:["Internally, %DeleteExtent iterates over the set of instances in the collection and invokes the %Delete method.",(0,s.jsx)(t.br,{}),"\nRefer to ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ%5Fconcurrency",children:"Object Concurrency Options"})," for more details on the optional concurrency argument.",(0,s.jsx)(t.br,{}),"\nThe option pInitializeExtent argument allows the user to override the default behavior of calling %KillExtent when all instances are successfully deleted. %KillExtent is called by default when the extent is empty so that empty globals can be killed. If %KillExtent is not called then some empty globals can remain as well as the ID counter if it exists. The default value for pInitializeExtent is 1. Unless the caller specifies a false value for pInitializeExtent the globals used by the extent will be killed. If the process' GlobalKillDisabled flag is enabled and not the default of false the process' GlobalKillDisabled flag will be changed temporarily to false to allow the operation to complete without a possible  error. In some cases, the globals used by the extent are not used exclusively by the extent. In those cases it is possible that some globals will still be defined even when pInitializeExtent is true. By default this call to %KillExtent will not delete default stream storage global, but if you pass '2' in pInitializeExtent and if the entire extent was deleted we will call %KillExtent passing the 'killstreams' flag to ask it to remove kill the default storage global. Returns a %Status value indicating success or failure."]}),"\n",(0,s.jsx)(t.h3,{id:"downgradeconcurrency",children:"%DowngradeConcurrency"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %DowngradeConcurrency(concurrency As %Integer(MINVAL=0,MAXVAL=4) = 0) As %Status [ Final, Internal, ServerOnly = 0 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Changes the concurrency level of an instance in memory to a lower level by changing the lock type specified in the %Open method for the object's instance. Fails if it cannot lower the concurrency level. Refer to ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ%5Fconcurrency",children:"Object Concurrency Options"})," for more details on the concurrency argument."]}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"executebeforetriggers",children:"%ExecuteBeforeTriggers"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ExecuteBeforeTriggers(%oper, pOid As %Library.ObjectIdentity = "", ByRef pNew As %String(MAXLEN=""), ByRef pOld As %Library.Binary) As %Status [ CodeMode = generator, Internal, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value"}),"\n",(0,s.jsx)(t.h3,{id:"executeaftertriggers",children:"%ExecuteAfterTriggers"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ExecuteAfterTriggers(%oper, pOid As %Library.ObjectIdentity = "", ByRef pNew As %String(MAXLEN=""), ByRef pOld As %Library.Binary) As %Status [ CodeMode = generator, Internal, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value"}),"\n",(0,s.jsx)(t.h3,{id:"id",children:"%Id"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Id() As %String [ CodeMode = expression, Final, ServerOnly = 0 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the persistent object Id, if there is one, of this object."}),"\n",(0,s.jsx)(t.p,{children:"Returns a null string if there is no object Id."}),"\n",(0,s.jsx)(t.h3,{id:"idset",children:"%IdSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %IdSet(id As %String) As %Status [ Final, Internal, Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Assigns a persistent object Id value for this object. This method fails if the object already has an Id value assigned to it."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"getswizzleobject",children:"%GetSwizzleObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetSwizzleObject(force As %Integer = 0, ByRef oid As %ObjectIdentity) As %Status [ Final, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%GetSwizzleObject is used to obtain a state of the object that can later be used to restore the object. In the case of a persistent object, it returns the OID."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"oid",children:"%Oid"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Oid() As %ObjectIdentity [ CodeMode = expression, Final, ServerOnly = 0 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the OID of this object."}),"\n",(0,s.jsx)(t.h3,{id:"composeoid",children:"%ComposeOid"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ComposeOid(id As %String(MAXLEN="")) [ CodeMode = generator ]\n'})}),"\n",(0,s.jsx)(t.p,{children:'%ComposeOid() This class method accepts an ID and returns a fully qualified OID, containing the most specific type class of the object identified by the id argument. If default storage is used then the %%CLASSNAME value is used to determine the most specific type class, otherwise call %OnDetermineClass to determine the most specific type class. If neither case is true then the current class is used. If there is a problem determining the most specific type class then null ("") is returned.'}),"\n",(0,s.jsx)(t.h3,{id:"open",children:"%Open"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %Open(oid As %ObjectIdentity, concurrency As %Integer = -1, ByRef sc As %Status = {$$$OK}) As %ObjectHandle [ Final, ServerOnly = 0 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Loads an object from the database into memory and returns an OREF referring to the object. oid is the OID value of the object to load. If oid is a partially-formed OID, that is it does not include a class name, then %Open does the following: a) calls the method, %OnDetermineClass, to determine the class name, otherwise b) it assumes the class name is the same as the object class on which %Open was called."}),"\n",(0,s.jsxs)(t.p,{children:["If a version of the specified object is already in memory, then %Open increments the object's reference count and returns the OREF value referring to this version. %Open also has an optional concurrency argument which specifies the concurrency setting for this object (and sets the value of the %Concurrency attribute). If the concurrency argument is omitted then the system default value (1: ",(0,s.jsx)(t.em,{children:"Atomic"}),") is used. Refer to ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ%5Fconcurrency",children:"Object Concurrency Options"})," for more details on the optional concurrency argument. For classes defined as Sharded=1, concurrency=0 is always used."]}),"\n",(0,s.jsx)(t.p,{children:"%Open returns an OREF value that refers to the in-memory object instance or a null reference ($$$NULLOREF) if it cannot find or otherwise load the object."}),"\n",(0,s.jsx)(t.h3,{id:"objectisnull",children:"%ObjectIsNull"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %ObjectIsNull(pOID As %ObjectIdentity) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return true if pOID is a null object and false if the object is not null"}),"\n",(0,s.jsx)(t.h3,{id:"loadinit",children:"%LoadInit"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %LoadInit(oid As %ObjectIdentity = "", concurrency As %Integer = "", reset As %Boolean = 0) As %Status [ CodeMode = generator, Final, Internal, Private ]\n'})}),"\n",(0,s.jsx)(t.h3,{id:"openid",children:"%OpenId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %OpenId(id As %String = "", concurrency As %Integer = -1, ByRef sc As %Status = {$$$OK}) As %ObjectHandle [ CodeMode = expression, Final, ServerOnly = 0 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Loads an object from the database into memory or finds existing reference and returns an OREF referring to the object. id is the Id (not a full OID) value of the object to load."}),"\n",(0,s.jsxs)(t.p,{children:["If a version of the specified object is already in memory, then %Open increments the object's reference count and returns the OREF value referring to this version. %Open also has an optional concurrency argument which specifies the concurrency setting for this object (and sets the value of the %Concurrency attribute). If the concurrency argument is omitted then the system default value (1: ",(0,s.jsx)(t.em,{children:"Atomic"}),") is used. Refer to ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ%5Fconcurrency",children:"Object Concurrency Options"})," for more details on the optional concurrency argument. For classes defined as Sharded=1, concurrency=0 is always used."]}),"\n",(0,s.jsx)(t.p,{children:"%OpenId returns an OREF value that refers to the in-memory object instance or a null reference ($$$NULLOREF) if it cannot find or otherwise load the object."}),"\n",(0,s.jsx)(t.h3,{id:"reload",children:"%Reload"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Reload() As %Status [ ServerOnly = 0 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%Reload is an instance method that re-reads an object from disk into the current instance. Calling %Reload is similar to closing the OREF and then %Open, but it uses the same OREF. %Open is not called and no %Open callbacks are called."}),"\n",(0,s.jsx)(t.p,{children:"After %Reload is called, there are no swizzled references for the object, and %IsModified returns 0."}),"\n",(0,s.jsx)(t.p,{children:"%Reload performs the following steps. First, all swizzled objects for the instance are unswizzled. Then the object is reloaded from disk, using the %Id of the current object. Finally, the modified bit for each property is cleared."}),"\n",(0,s.jsx)(t.h3,{id:"rollback",children:"%RollBack"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %RollBack() As %Status [ ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This method is called by %Save when a transaction is rolled back. It will invoke a user-supplied %OnRollBack method if it exists."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"save",children:"%Save"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Save(related As %Integer = 1) As %Status [ CodeMode = generator, Final, GenerateAfter = (%OnBeforeSave, %OnAfterSave), ServerOnly = 0 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Stores an in-memory version of an object to disk. If the object was stored previously (and thus, already has an OID), %Save updates the on-disk version. Otherwise, %Save assigns a new OID to the object and saves it."}),"\n",(0,s.jsx)(t.p,{children:"The related argument specifies how %Save handles references to other objects. It can take the following values:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.th,{children:["0: ",(0,s.jsx)(t.em,{children:"Shallow Save"})]}),(0,s.jsx)(t.th,{children:"If this object has been modified then save it. Only save related objects if they have never been saved (do not have an OID value) and must be saved in order to serialize this object's property values."})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["1: ",(0,s.jsx)(t.em,{children:"Deep Save"})]}),(0,s.jsx)(t.td,{children:'Save this object and all "related" objects that have been edited. In this case, "related" means any in-memory objects it refers to, and any in-memory objects they in turn refer to, and so on. However, only objects that have been changed (%IsModified returns true) will actually be saved to the database, including the object upon which %Save was initially called.'})]})})]}),"\n",(0,s.jsx)(t.p,{children:"%Save automatically detects and handles circular references between objects. For example, %Save will detect if object A refers to object B and object B likewise refers to object A. In this case it will avoid falling into an infinite, recursive loop."}),"\n",(0,s.jsx)(t.p,{children:"Note that either reference attribute, A to B or B to A, can be specified as a required attribute but not both of them. If both reference attributes are required then %Save will fail."}),"\n",(0,s.jsxs)(t.p,{children:["By default %Save automatically manages transactions. You can enable and disable automatic transaction support using the ",(0,s.jsx)(t.code,{children:"$$SetTransactionMode^%apiOBJ()"})," routine."]}),"\n",(0,s.jsx)(t.p,{children:"When %Save saves an object to the database, it initiates one transaction (by calling TSTART) for the entire set of saves, including the original object and any related objects. If the save operation is successful, %Save will issue a TCOMMIT command to commit the transaction and write the data to the database. If %Save encounters a problem when saving the original object or any of its related objects, it rolls back the entire transaction and performs the following actions:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"It issues a TROLLBACK command to rollback any changes to the database that may have occurred. (In the case of the %Storage.Persistent class, changes to the on-disk counter value, used to determine the next available object id number, are not rolled back.)"}),"\n",(0,s.jsx)(t.li,{children:'It restores the in-memory state of all the objects involved in the transaction to their pre-transaction state. This includes restoring any modified flags, and restoring to null ("") any OID values that have been assigned during the course of the transaction. Additional property values changed during the course of the transaction are not restored, however.'}),"\n",(0,s.jsx)(t.li,{children:"It calls the %RollBack method on each object involved with the transaction. The order in which the %RollBack methods are called is undefined. %RollBack will call a user-written %OnRollback method if it is present."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"ondeletefinally",children:"%OnDeleteFinally"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnDeleteFinally(oid As %ObjectIdentity, status As %Status) [ Abstract ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%OnDeleteFinally is an optional user implemented callback. There is no return value and any exceptions are trapped and discarded."}),"\n",(0,s.jsx)(t.h3,{id:"onopenfinally",children:"%OnOpenFinally"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnOpenFinally(oid As %ObjectIdentity, status As %Status)\n"})}),"\n",(0,s.jsx)(t.p,{children:"%OnOpenFinally is an optional user implemented callback. There is no return value and any exceptions are trapped and discarded."}),"\n",(0,s.jsx)(t.h3,{id:"onsavefinally",children:"%OnSaveFinally"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnSaveFinally(oref As %ObjectHandle, status As %Status) [ Abstract ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%OnSaveFinally is an optional user implemented callback. There is no return value and any exceptions are trapped and discarded."}),"\n",(0,s.jsx)(t.h3,{id:"upgradeconcurrency",children:"%UpgradeConcurrency"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %UpgradeConcurrency(concurrency As %Integer(MINVAL=0,MAXVAL=4) = 0) As %Status [ CodeMode = generator, Final, Internal, ServerOnly = 0 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Elevates the concurrency level of an instance in memory to a higher level by changing the lock type specified in the %Open method for the object's instance. Fails if it cannot elevate the concurrency level. Refer to ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ%5Fconcurrency",children:"Object Concurrency Options"})," for more details on the concurrency argument."]}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"acquirelock",children:"%AcquireLock"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %AcquireLock(locktype As %String = "") As %Status [ CodeMode = expression, Private, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Acquires a lock for the current instance."}),"\n",(0,s.jsx)(t.p,{children:"The locktype argument specifies the type of lock to acquire. It can take the following values:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.th,{children:['"e": ',(0,s.jsx)(t.em,{children:"Exclusive"})]}),(0,s.jsx)(t.th,{children:"An exclusive lock will prevent any other process from acquiring any type of lock on this object."})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:['"s": ',(0,s.jsx)(t.em,{children:"Shared"})]}),(0,s.jsx)(t.td,{children:"A shared lock will allow other processes to acquire shared locks but will prevent other processes from acquiring an exclusive lock."})]})})]}),"\n",(0,s.jsx)(t.p,{children:"Fails if the locktype parameter is not one of the values described above."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"releaselock",children:"%ReleaseLock"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %ReleaseLock(locktype As %String = "") As %Status [ CodeMode = expression, Private, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Releases a lock for the current instance."}),"\n",(0,s.jsx)(t.p,{children:"The locktype argument specifies the type of lock to release. It can take the following values:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.th,{children:['"e": ',(0,s.jsx)(t.em,{children:"Exclusive"})]}),(0,s.jsx)(t.th,{children:"An exclusive lock will prevent any other process from acquiring any type of lock on this object."})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:['"s": ',(0,s.jsx)(t.em,{children:"Shared"})]}),(0,s.jsx)(t.td,{children:"A shared lock will allow other processes to acquire shared locks but will prevent other processes from acquiring an exclusive lock."})]})})]}),"\n",(0,s.jsx)(t.p,{children:"Fails if the locktype parameter is not one of the values described above."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"lockextent",children:"%LockExtent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %LockExtent(shared As %Boolean = 0) As %Status [ PlaceAfter = %LockId, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%LockExtent acquires a lock on the entire extent of the class. If shared is true then a shared lock is acquired, otherwise an exclusive lock is acquired. If the requested lock cannot be acquired then a failure %Status value is returned. The default implementation returns an error indicating that the method is not implemented. This method is automatically generated for persistent classes using %Storage.Persistent or %Storage.SQL."}),"\n",(0,s.jsx)(t.h3,{id:"unlockextent",children:"%UnlockExtent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %UnlockExtent(shared As %Boolean = 0, immediate As %Boolean = 0) As %Status [ PlaceAfter = %LockExtent, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%UnlockExtent releases a lock on the entire extent of the class. The type of lock released is determined by shared. The default implementation returns an error indicating that the method is not implemented. This method is automatically generated for persistent classes using %Storage.Persistent or %Storage.SQL."}),"\n",(0,s.jsx)(t.h3,{id:"lockid",children:"%LockId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %LockId(id As %String, shared As %Boolean = 0, timeout As %Integer) As %Status [ ServerOnly = 0 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Obtain an exclusive or shared lock on the object identified by id. The type of lock obtained is determined by shared. This method is normally generated by the storage class for persistent classes using %Storage.Persistent or %Storage.SQL."}),"\n",(0,s.jsx)(t.h3,{id:"unlockid",children:"%UnlockId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %UnlockId(id As %String, shared As %Boolean = 0, immediate As %Boolean = 0) As %Status [ ServerOnly = 0 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Release an exclusive or shared lock on the object identified by id. The type of lock released is determined by shared. If this method is not overridden then the default implementation returns an error. This method is normally generated by the storage class for persistent classes using %Storage.Persistent or %Storage.SQL."}),"\n",(0,s.jsx)(t.h3,{id:"getlock",children:"%GetLock"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetLock(id As %String, shared As %Boolean = 0) As %Integer [ ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This method acquires a lock on the object identified by 'id'. If the number of locks already taken out for this extent is greater than the configured maximum then the lock will be escalated to an extent-level lock. If the lock is successfully obtained a 1 will be returned, 2 will be returned if the lock was escalated to an extent-level lock. A zero, '0', is returned if the method failed to obtain a lock."}),"\n",(0,s.jsx)(t.h3,{id:"buildindices",children:"%BuildIndices"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %BuildIndices(pIndexList As %RawString = "", pAutoPurge As %Integer = 1, pLockFlag As %Integer = 0, pJournalFlag As %Integer = "", pStartID As %RawString = "", pEndID As %RawString = "", pIgnoreIndexList As %RawString = "", pKeepSelectability As %Integer = 0, pNumberJobs As %Integer = "") As %Status [ ProcedureBlock = 1, ServerOnly = 0 ]\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Builds entries for each index specified in the pIndexList argument. If pIndexList is empty then all indices that originate in the class are rebuilt. If not empty you can specify a ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"}),' of indexes to build, e.g. $lb("MyIndex1","MyIndex2"). If there are other bitmap indexes specified in pIndexList and there is a bitmap extent index defined for the class then it will be implicitly included in pIndexList. If the bitmap extent index is included then the bitmap extent index for each subextent is also built.']}),"\n",(0,s.jsx)(t.p,{children:"If pAutoPurge is true then the indices contained in pIndexList will be purged before they are built as long as no range is specified, if a range is specified we will skip any purge. The default is TRUE (1)."}),"\n",(0,s.jsx)(t.p,{children:"If pLockFlag is one (1) then an extent lock will be acquired before the indices are built. If the lock cannot be acquired then an error is returned. The lock is released after the index build is completed. If pLockFlag is two (2) then a lock is acquired prior to filing indices for that instance and it is released as soon the indices for that instance are filed. If it is zero (0) then no locks are used while filing the indices. If it is three (3) then a shared extent lock will be acquired before the indices are built and released upon completion."}),"\n",(0,s.jsx)(t.p,{children:'If pJournalFlag is 0 then journaling is disabled for the processes used to build the indices (except where the database is in a Mirror). If this flag is 1 then the journaling is enabled for the process used to build the indicies. The default value of this argument is "" meaning use the current process setting.'}),"\n",(0,s.jsx)(t.p,{children:"pStartID and pEndID define a range of IDs for which indices will be built. The range is inclusive. If the starting ID is null then the range begins at the first ID defined in the extent. If the ending ID is null then the range ends at the last ID defined in the extent."}),"\n",(0,s.jsxs)(t.p,{children:["If pIgnoreIndexList is defined, it should be a ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"}),' of index names that should not be built. This argument allows you to build all indices except those defined in pIgnoreIndexList. The default value of this argument is "", which means all indices, or all indices specified in pIndexList, will be built.']}),"\n",(0,s.jsx)(t.p,{children:"If pKeepSelectability is 1, any index maps defined as Not Selectable prior to the %BuildIndices call will remain Not Selectable after the %BuildIndices call. If pKeepSelectability is 0 any index maps defined as Not Selectable prior to the %BuildIndices call will be set to Selectable after the successful %BuildIndices call."}),"\n",(0,s.jsx)(t.p,{children:'If pNumberJobs is defined, the system should use this explicitly specify the number of workers to run %BuildIndices. The default value of this argument is "", which means the system should calculate how many jobs to run %BuildIndices'}),"\n",(0,s.jsx)(t.p,{children:"If %OnBeforeBuildIndices is implemented and is runnable then it will be called just prior to purging and building any index structures. Refer to %OnBeforeBuildIndices for more information."}),"\n",(0,s.jsx)(t.p,{children:"If %OnAfterBuildIndices is implemented and is runnable then it will be called after all index structures have been built completely. Refer to %OnAfterBuildIndices for more information."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure. This method is normally generated by the storage class for persistent classes using %Storage.Persistent or %Storage.SQL."}),"\n",(0,s.jsx)(t.p,{children:"If your index is corrupt running this function will not fix the corruption unless you rebuild the entire index and purge the existing indexes. If you have inserted some new items but have deferred building the index for these new items then you can run %BuildIndices on this range of IDs to add the index entries for these new items."}),"\n",(0,s.jsx)(t.h3,{id:"buildindicesasync",children:"%BuildIndicesAsync"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %BuildIndicesAsync(Output queueToken As %String, pIndexList As %RawString = "", pAutoPurge As %Integer = 1, pLockFlag As %Integer = 0, pJournalFlag As %Integer = "", pStartID As %RawString = "", pEndID As %RawString = "", pIgnoreIndexList As %RawString = "", pTimeout As %Integer = 86400, pKeepSelectability As %Integer = 0) As %Status [ ProcedureBlock = 1, ServerOnly = 0 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"%BuildIndicesAsync() instantiates a work queue and queues a %BuildIndices() call. The argument list after the output queueToken is the same as for %BuildIndices."}),"\n",(0,s.jsx)(t.p,{children:"This method returns a work queue token as the first argument (output) that can be used to retrieve the status of the %BuildIndices() worker using %BuildIndicesAsyncResponse."}),"\n",(0,s.jsx)(t.p,{children:"The return value is a %Status value indicating success or failure."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"queueToken"}),(0,s.jsx)(t.th,{children:"output"}),(0,s.jsx)(t.th,{children:"The token identifying the %BuildIndices task. This argument must be passed by reference as it is the identifier of the work queue and it is needed to retrieve the completion status using %BuildIndicesAsyncResponse."})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pIndexList"}),(0,s.jsx)(t.td,{children:"input"}),(0,s.jsxs)(t.td,{children:["The names of the indexes to be built. If empty then all indices that originate in the class are built. If not empty you can specify a ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"}),' of index names to build, e.g. $lb("MyIndex1","MyIndex2"). If there are other bitmap indexes specified and there is a bitmap extent index defined for the class then it will be implicitly included in the list of indexes to build. If the bitmap extent index is included then the bitmap extent index for each subextent is also built.']})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pAutoPurge"}),(0,s.jsx)(t.td,{children:"input"}),(0,s.jsx)(t.td,{children:"If true then the indices contained in pIndexList will be purged before they are built as long as no range is specified, if a range is specified we will skip any purge. The default is TRUE (1)."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pLockFlag"}),(0,s.jsx)(t.td,{children:"input"}),(0,s.jsx)(t.td,{children:"If one (1) then an extent lock will be acquired before the indexes are built. If the lock cannot be acquired then an error is returned. The lock is released after the index build is completed. If pLockFlag is two (2) then a lock is acquired prior to filing indices for that instance and it is released as soon the indices for that instance are filed. If it is zero (0) then no locks are used while filing the indices. If it is three (3) then a shared extent lock will be acquired before the indices are built and released upon completion."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pJournalFlag"}),(0,s.jsx)(t.td,{children:"input"}),(0,s.jsx)(t.td,{children:'If false then journaling is disabled for the processes used to build the indices (except where the database is in a Mirror). If this flag is true then the journaling is enabled for the process used to build the indicies. The default value of this argument is "" meaning use the current process setting.'})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pStartID"}),(0,s.jsx)(t.td,{children:"input"}),(0,s.jsx)(t.td,{children:"The starting ID for the range of ID's for which indices will be built, inclusive. If the starting ID is null then the range begins at the first ID defined in the extent."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pEndID"}),(0,s.jsx)(t.td,{children:"input"}),(0,s.jsx)(t.td,{children:"Then ending ID for the range of ID's for which indexes will be built, inclusive. If the ending ID is null then the range ends at the last ID defined in the extent."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pIgnoreIndexList"}),(0,s.jsx)(t.td,{children:"input"}),(0,s.jsx)(t.td,{children:'A list of index names that should not be built. This argument allows you to build all indices except those defined in pIgnoreIndexList. The default value of this argument is "", which means all indices, or all indices specified in pIndexList, will be built.'})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pTimeout"}),(0,s.jsx)(t.td,{children:"input"}),(0,s.jsx)(t.td,{children:"pTimeout is the number of seconds to pass for the %SYSTEM.WorkMgr.Detach() method's timeout argument. The default timeout is 86400s (24 hours). If the %BuildIndices time is expected to be more than 24 hours and you don't want the build to timeout, increase this value to an appropriate number of seconds."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pKeepSelectability"}),(0,s.jsx)(t.td,{children:"input"}),(0,s.jsx)(t.td,{children:"If pKeepSelectability is 1, any index maps defined as Not Selectable prior to the %BuildIndices call will remain Not Selectable after the %BuildIndices call. If pKeepSelectability is 0 any index maps defined as Not Selectable prior to the %BuildIndices call will be set to Selectable after the successful %BuildIndices call."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"return"}),(0,s.jsx)(t.td,{children:"The %Status value indicates success or failure. If queueToken is null then the return status value can indicate an error involving the work queue or it can be the completion status from the %BuildIndicesAsync task."}),(0,s.jsx)(t.td,{})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"buildindicesasyncresponse",children:"%BuildIndicesAsyncResponse"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %BuildIndicesAsyncResponse(ByRef queueToken, wait As %Boolean = 1) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return the completion status of a %BuildIndicesAsync task, identified by queueToken. The global array node reference is defined by a globalName and a variable number of subscripts."}),"\n",(0,s.jsx)(t.p,{children:"This method returns a %Status value."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"queueToken"}),(0,s.jsx)(t.th,{children:"byref"}),(0,s.jsx)(t.th,{children:"The token identifying the %BuildIndicesAsync task. This argument must be passed by reference as it is the identifier of the work queue and it can be changed by this method. If the returned queueToken is not null (should only happen if wait is false) then the task is not yet complete and the new token value can be used to call this method again to check and possibly return the completion status. If this value is null on return then the task has completed or cannot be located and the return status value is the final status (completion status)."})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"wait"}),(0,s.jsx)(t.td,{children:"input"}),(0,s.jsx)(t.td,{children:"A boolean value indicating whether or not %BuildIndicesAsyncResponse should wait for the %BuildIndicesAsync task to complete before returning. If this value is true then this method will wait until the task identified by queueToken is complete before returning.  If it is false, then this method will return as quickly as possible. In that case, if the task is not yet complete then queueToken will not be null on return and can be used to invoke this method again.  If this method detects an error reported by the task identified by the token then this method will wait for the final completion of the task before returning."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"return"}),(0,s.jsx)(t.td,{children:"The %Status value indicating success or failure. If queueToken is null then the return status value can indicate an error involving the work queue or it can be the completion status from the %BuildIndicesAsync task."}),(0,s.jsx)(t.td,{})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"builddeferredindices",children:"%BuildDeferredIndices"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %BuildDeferredIndices(pLockFlag As %Integer = 0, pJournalFlag As %Integer = "") As %Status [ ProcedureBlock = 1, ServerOnly = 0 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Builds index entries for all defined indexes for each object contained in the Deferred Indexing Index."}),"\n",(0,s.jsx)(t.p,{children:"If pLockFlag is one (1) then an extent lock will be acquired before the indices are built. If the lock cannot be acquired then an error is returned. The lock is released after the index build is completed. If pLockFlag is two (2) then a lock is acquired prior to filing indices for that instance and it is released as soon the indices for that instance are filed. If it is zero (0) then no locks are used while filing the indices. If it is three (3) then a shared extent lock will be acquired before the indices are built and released upon completion."}),"\n",(0,s.jsx)(t.p,{children:'If pJournalFlag is 0 then journaling is disabled for the processes used to build the indices (except where the database is in a Mirror). If this flag is 1 then the journaling is enabled for the process used to build the indices. The default value of this argument is "" meaning use the current process setting.'}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure. This method is normally generated by the storage class for persistent classes using %Storage.Persistent or %Storage.SQL."}),"\n",(0,s.jsx)(t.p,{children:"If your index is corrupt running this function will not fix the corruption unless you rebuild the entire index and purge the existing indexes."}),"\n",(0,s.jsx)(t.h3,{id:"bmebuilt",children:"%BMEBuilt"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %BMEBuilt(ByRef bmeName As %String) As %Boolean [ CodeMode = expression, Internal, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"On return, bmeName contains the name of the bitmap extent index for this class."}),"\n",(0,s.jsx)(t.p,{children:"Returns %Boolean TRUE is the bitmap extent has been built, FALSE if not."}),"\n",(0,s.jsx)(t.h3,{id:"checkconstraintsforextent",children:"%CheckConstraintsForExtent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %CheckConstraintsForExtent(pConstraintList As %String(MAXLEN="") = "", pCheckDisabled As %Integer = 0, Output pErrorLog As %String(MAXLEN="")) As %Status [ CodeMode = generator, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This method will loop over each object in the extent of the current class and invoke %CheckConstraints. If only selected constraints are to be checked then pConstraintList can be passed as a ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"})," of the names of the constraints to be checked. All constraint failures are included in the returned %Status value, subject to the maximum %Status size. In addition, the output parameter pErrorLog contains up to 1,000 entries containing the object ID and the values of all properties that are referenced by constraints defined for the current class. The error log also adds the %Status value returned by %CheckConstraints() as the last $list element."]}),"\n",(0,s.jsxs)(t.p,{children:['SAMPLES>set status = ##class(Sample.Person).%CheckConstraintsForExtent(,,.errorlog)  SAMPLES>do $system.OBJ.DisplayError(status)  ERROR #5808: Key not unique: Sample.Person.SSNKey ERROR #5808: Key not unique: Sample.Person.SSNKey SAMPLES>zw errorlog errorlog=2 errorlog(1)=$lb(1,"798-92-1974","0 "',(0,s.jsx)(t.em,{children:'$lb($lb(5808,"Sample.Person.SSNKey",,,,,,,,"%CheckConstraints+7^Sample.Person.1:SAMPLES"))/* ERROR #5808: Key not unique: Sample.Person.SSNKey [%CheckConstraints+7^Sample.Person.1:SAMPLES] */) errorlog(2)=$lb(100,"798-92-1974","0 "'}),'$lb($lb(5808,"Sample.Person.SSNKey",,,,,,,,"%CheckConstraints+7^Sample.Person.1:SAMPLES"))/* ERROR #5808: Key not unique: Sample.Person.SSNKey [%CheckConstraints+7^Sample.Person.1:SAMPLES] */)']}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Parameters"}),(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Name"}),(0,s.jsx)(t.td,{children:"Direction"}),(0,s.jsx)(t.td,{children:"Description"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pConstraintList"}),(0,s.jsx)(t.td,{children:"Input"}),(0,s.jsxs)(t.td,{children:["A ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"})," of constraints to be checked. If null then all constraints defined for the most specific type class of each object will be checked."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pCheckDisabled"}),(0,s.jsx)(t.td,{children:"Input"}),(0,s.jsx)(t.td,{children:"If this value is passed as a true value (1) then %CheckConstraints will also check any constraints that are defined as %NOCHECK."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pErrorLog"}),(0,s.jsx)(t.td,{children:"Output"}),(0,s.jsx)(t.td,{children:"This is an array of up to 1,000 entries containing error information reported by %CheckConstraints."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Return"}),(0,s.jsx)(t.td,{children:"%Status return value. This value contains %Status values for each constraint that failed. If no errors are reported then %Status will be $$$OK."}),(0,s.jsx)(t.td,{})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"checkconstraints",children:"%CheckConstraints"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %CheckConstraints(pID As %String(MAXLEN=""), pConstraintList As %List = "", pCheckDisabled As %Integer = 0, Output pErrorInfo As %List) As %Status [ CodeMode = generator, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This method checks the constraints defined in the current class for one object, identified by pID. If only selected constraints are to be checked, then pConstraintList can be passed as a ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"})," of the names of the constraints to be checked. If any constraint fails then the failure status will be included in the returned %Status value. In addition, the output parameter pErrorInfo will contain the object ID and the values of all properties that are referenced by constraints defined for the current class."]}),"\n",(0,s.jsx)(t.p,{children:"If the current class is not the most specific type class (MSTC) of the object identified by pID, then this method will dispatch to the object's most specific type class. Note that if you do not pass a constraint list then all constraints present for the MSTC are checked, which may include others in addition to those present for the current class."}),"\n",(0,s.jsx)(t.p,{children:'SAMPLES>set status = ##class(Sample.Person).%CheckConstraints(1,,,.errorinfo)  SAMPLES>do $system.OBJ.DisplayError(status)  ERROR #5808: Key not unique: Sample.Person.SSNKey SAMPLES>zw errorinfo errorinfo=$lb(1,"798-92-1974")'}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Parameters"}),(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Name"}),(0,s.jsx)(t.td,{children:"Direction"}),(0,s.jsx)(t.td,{children:"Description"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pID"}),(0,s.jsx)(t.td,{children:"Input"}),(0,s.jsx)(t.td,{children:"The ID of the object to be checked."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pConstraintList"}),(0,s.jsx)(t.td,{children:"Input"}),(0,s.jsxs)(t.td,{children:["A ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"})," of constraints to be checked. If null then all constraints defined for this class will be checked."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pCheckDisabled"}),(0,s.jsx)(t.td,{children:"Input"}),(0,s.jsx)(t.td,{children:"If this value is passed as a true value (1) then %CheckConstraints will also check any constraints that are defined as %NOCHECK."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"pErrorInfo"}),(0,s.jsx)(t.td,{children:"Output"}),(0,s.jsx)(t.td,{children:"If an error is reported then pErrorInfo will contain the object's ID and all property values that are referenced by constraints defined for this class."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Return"}),(0,s.jsx)(t.td,{children:"%Status return value. This value contains %Status values for each constraint that failed. If no errors are reported then %Status will be $$$OK."}),(0,s.jsx)(t.td,{})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"exists",children:"%Exists"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %Exists(oid As %ObjectIdentity) As %Boolean [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Checks to see if the object identified by the OID oid exists in the extent."}),"\n",(0,s.jsx)(t.p,{children:"Returns %Boolean TRUE if it exists, FALSE if it does not."}),"\n",(0,s.jsx)(t.h3,{id:"existsid",children:"%ExistsId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %ExistsId(id As %String) As %Boolean [ ServerOnly = 0 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Checks to see if the object identified by the ID id exists in the extent."}),"\n",(0,s.jsx)(t.p,{children:"Returns %Boolean TRUE is it exists, FALSE if it does not."}),"\n",(0,s.jsx)(t.h3,{id:"1check",children:"%1Check"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %1Check(id As %String = "", lockonly As %Boolean = 0, concurrency As %Integer = -1) As %Status [ CodeMode = generator, Internal, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsxs)(t.p,{children:["%1Check() This is a method that corresponds the the '%1' key (a convention introduced in the SQL filer). The '%1' key is a synonym for the %Id() value. The general description of ",(0,s.jsxs)(t.candidatekey,{children:["Check() ",(0,s.jsx)(t.key,{children:"Check() This method checks for the existence of the key and locks the object associated with that key. The lock is released but will be retained for the duration of the transaction. The optional lockonly parameter is used by callers wishing only to validate the key. If lockonly is true then success is returned if the key does not exists. If the key exists then an attempt is made to lock the corresponding object. That status from the lock call is then returned. If lockonly is false then an error is returned if the key does not exist. If the key does exist then the corresponding object is locked and released. If the lock cannot be acquired then an error is returned. Otherwise the key is checked for existence again and an error is returned if it doesn't exist."})]})]}),"\n",(0,s.jsx)(t.h3,{id:"fileindices",children:"%FileIndices"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %FileIndices(id As %String(MAXLEN=""), ByRef pIndexHandle As %Binary) As %Status [ Internal, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Files each index for the object identified by id. pIndexHandle is for internal use only."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure. This method is normally generated by the storage class for persistent classes using %Storage.Persistent or %Storage.SQL."}),"\n",(0,s.jsx)(t.h3,{id:"guid",children:"%GUID"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GUID(oid As %ObjectIdentity, pDeepSearch As %Integer = 0) As %String [ ServerOnly = 1 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This method returns the GUID assigned to ",(0,s.jsx)(t.oid,{children:". This method is only runnable if the GUIDENABLED parameter is TRUE. This method will dispatch polymorphically and will determine the most-specific-type class if the oid does not contain that information. If pDeepSearch is true and no GUID is found for the object then a deep search of the GUID registry will be performed, starting with the current class. This is useful if the most specific type class cannot be determined, such as in the case of an object that has been deleted."})]}),"\n",(0,s.jsx)(t.h3,{id:"guidset",children:"%GUIDSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %GUIDSet(oid As %ObjectIdentity, guid As %String = "") As %String [ ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(t.h3,{id:"killextent",children:"%KillExtent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %KillExtent(pDirect As %Integer = 1, killstreams As %Boolean = 0) As %Status [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["%KillExtent performs a physical kill of the extent. No constraints are enforced. This method should not be used in place of %DeleteExtent. Only physical storage occupied by this extent will be killed. If this extent is a subextent of another class then no data is killed. Indexes that originate with this extent will be killed. %KillExtent will be called on any subextents and on any child extents (the extent of the type class of a relationship whose cardinality = children is a 'child' extent) of this extent.",(0,s.jsx)(t.br,{}),"\nThis method is not meant for production applications. It is meant to be a development utility to quickly clear extent physical data. Also this will not remove stream data associated with these instances.",(0,s.jsx)(t.br,{}),"\nIf killstreams is true (default is false) it will also kill the default stream storage global."]}),"\n",(0,s.jsx)(t.h3,{id:"saveindices",children:"%SaveIndices"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %SaveIndices(pStartId As %String(MAXLEN="") = "", pEndId As %String(MAXLEN="") = "", lockExtent As %Boolean = 0) As %Status [ Internal, ServerOnly = 0 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Files the indices for all objects whose ID is in the range defined by pStartId and pEndId. If pEndId is null then it defaults to pStartId. If pStartId is null then the range is empty and no filing will occur. If lockExtent is true then an extent lock will be acquired before the indices are built. If the lock cannot be acquired then an error is returned. The lock is released after the index filing is completed."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"addjrnobjtosyncset",children:"%AddJrnObjToSyncSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %AddJrnObjToSyncSet(objSS As %SYNC.SyncSet, fileop As %Integer = 0, oid As %ObjectIdentity, ByRef object As %String, changed As %List = "", guid As %String = "", originSystem As %String = "", originNS As %String = "") As %Integer [ Internal, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(t.h3,{id:"buildindexinternal",children:"%BuildIndexInternal"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %BuildIndexInternal(pLockFlag, pAutoPurge, pStartID, pEndID, pIndexList, pBuildFlags, pGLVN, pBMEIndexPtr, pJournalFlag, pCompositeKey, pUseBME = 0, pKeepSelectability = 0, pNumberJobs = "") As %Status [ Internal, Private ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Internal helper method for %BuildIndicies"}),"\n",(0,s.jsx)(t.h3,{id:"deletedata",children:"%DeleteData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %DeleteData(id As %String, concurrency As %Integer) As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This method is normally generated by the storage class for persistent classes using %Storage.Persistent or %Storage.SQL. Persistent classes using some other storage class, such as %Library.CustomStorage must override this method."}),"\n",(0,s.jsx)(t.h3,{id:"initextentdata",children:"%InitExtentData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %InitExtentData() As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:'%InitExtentData() - Initializes extent data in storage. This method is implemented by the storage class. It simply sets the root node of the data global to ""'}),"\n",(0,s.jsx)(t.h3,{id:"killextentdata",children:"%KillExtentData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %KillExtentData(killstreams As %Boolean = 0, reinitialize As %Boolean = 0) As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%KillExtentData() - kills extent data in storage. This method is implemented by the storage class. If killstreams is true (default is false) it will also kill the default stream storage global. If reinitialize is true (default is false) it will also call %InitExtent to re-define the globals."}),"\n",(0,s.jsx)(t.h3,{id:"loaddata",children:"%LoadData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %LoadData(id As %String) As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%LoadData() - loads an object from storage. This method is implemented by the storage class."}),"\n",(0,s.jsx)(t.h3,{id:"purgeindices",children:"%PurgeIndices"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %PurgeIndices(idxlist As %List = "", lockExtent As %Boolean = 0, pIgnoreIndexList As %RawString = "", pJournalFlag As %Library.Integer = "") As %Status [ ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Deletes all entries from each index specified in the idxlist argument. If idxlist is empty then all indices that originate in the class are purged. The index definition remains intact."}),"\n",(0,s.jsxs)(t.p,{children:["If pIgnoreIndexList is defined, it should be a ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"}),' of index names that should not be purged. This argument allows you to purge all indices except those defined in pIgnoreIndexList. The default value of this argument is "", which means all indices, or all indices specified in pIndexList, will be purged.']}),"\n",(0,s.jsx)(t.p,{children:'If pJournalFlag is set to 1, journaling will be enabled (if not already) for the duration of the purge. If it is set to 0, journaling will be disabled (if not already) for the duration of the purge. The default value of this argument is "", which means journaling behavior will not be altered.'}),"\n",(0,s.jsx)(t.p,{children:"If %OnBeforePurgeIndices is implemented and is runnable, then it will be called just after acquiring the extent lock, if one is requested, and just prior to performing the purge. If %OnBeforePurgeIndices returns an error status then %PurgeIndices will exit immediately, no indices will be purged and that error status will be returned to the caller of %PurgeIndices."}),"\n",(0,s.jsx)(t.p,{children:"If %OnAfterPurgeIndices is implemented and is runnable, then it will be called just prior to releasing the extent lock, if one is requested. cAll index structures have been purged prior to calling %OnAfterPurgeIndices. If %OnAfterPurgeIndices returns and error status then that status will be returned to the caller of %PurgeIndices but all structures will still have been purged."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure. This method is normally generated by the storage class for persistent classes using %Storage.Persistent or %Storage.SQL. Persistent classes using some other storage class, such as %Library.CustomStorage must override this method."}),"\n",(0,s.jsx)(t.h3,{id:"savedata",children:"%SaveData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SaveData(id As %String) As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%SaveData() - saves an object to disk, checks uniqueness and referential integrity constraints, and maintains index structures. This method is implemented by the storage class."}),"\n",(0,s.jsx)(t.h3,{id:"savedirect",children:"%SaveDirect"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %SaveDirect(ByRef id As %String = "", idList As %List = "", ByRef data As %Binary, concurrency As %Integer = -1) As %Status [ ServerOnly = 1 ]\n'})}),"\n",(0,s.jsxs)(t.p,{children:["%SaveDirect() - saves an object to disk, checks uniqueness and referential integrity constraints, and maintains index structures. The state of the object is passed to this method in three arguments. id contains the ID value if the object has been previously saved. idList is a ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"})," value containing the IDKEY components. If the class is a child class (contains a relationship with CARDINALITY = PARENT) then the first value in the list is the parent reference. If the ID is system assigned the next value (or only value if the class is not a child class) is the system assigned ID value. If the ID is based on a user-defined IDKEY, then there is a $list element corresponding to each property in the same order as defined in the IDKEY index.",(0,s.jsx)(t.br,{}),"\ndata is a structure that mirrors the disk structure of the object. The root value (unsubscripted) contains the properties stored in the data node from the storage definition with a null subscript. Additional entries in the data structure correspond to any additional data nodes defined in the storage definition.",(0,s.jsx)(t.br,{}),"\nThis method is not commonly called directly.",(0,s.jsx)(t.br,{}),"\nThis method is implemented by the storage class."]}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"sortbegin",children:"%SortBegin"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %SortBegin(idxlist As %List = "", excludeunique As %Integer = 0) As %Status [ CodeMode = expression, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Executes a $SortBegin for the base global reference of each index specified in the idxlist argument. If idxlist is empty then a $SortBegin is executed for all indices that originate in the class."}),"\n",(0,s.jsx)(t.p,{children:"The excludeunique argument, if TRUE, causes any index defined as UNIQUE or PRIMARY KEY to be ignored."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"sortend",children:"%SortEnd"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %SortEnd(idxlist As %List = "", commit As %Integer = 1, excludeunique As %Integer = 0) As %Status [ CodeMode = expression, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Executes a $SortEnd for the base global reference of each index specified in the idxlist argument. If idxlist is empty then a $SortEnd is executed for all indices that originate in the class."}),"\n",(0,s.jsx)(t.p,{children:"The commit argument, if FALSE, causes the data to be discarded. Otherwise, all data placed in the global since the $SortBegin is committed."}),"\n",(0,s.jsx)(t.p,{children:"The excludeunique argument, if TRUE, causes any index defined as UNIQUE or PRIMARY KEY to be ignored."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"onbeforebuildindices",children:"%OnBeforeBuildIndices"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %OnBeforeBuildIndices(ByRef indexlist As %String(MAXLEN="") = "") As %Status [ Abstract, Private, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"This is a system provided query that returns a row for each instance within this extent. The first column of the row is the object ID. Additional columns can be included in the select list by adding the desired columns to the EXTENTQUERYSPEC parameter."}),"\n",(0,s.jsx)(t.p,{children:"The Extent query default implementation is generated by %Library.ExtentSQLQuery. That class supports the COMPILEMODE parameter with possible values of IMMEDIATE and DYNAMIC. If DYNAMIC is specified then the SQL statement used to implement the query will be generated as a dynamic SQL statement. If IMMEDIATE is specified then the statement is generated as an embedded SQL statement."}),"\n",(0,s.jsx)(t.p,{children:"This query can be overridden by a subclass so long as two requirements are met. The list of columns must include %ID as the first column and it must return a row corresponding to each instance/row in the extent."}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %BuildIndices method."}),"\n",(0,s.jsx)(t.p,{children:"It is called prior to modifying any index structures. If an extent lock is requested by the %BuildIndices caller then %OnBeforeBuildIndices is called after the extent lock is acquired."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then %BuildIndices will exit immediately without purging and building any index structures, returning the error to the caller of %BuildIndices."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Parameters"}),(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Name"}),(0,s.jsx)(t.td,{children:"Type"}),(0,s.jsx)(t.td,{children:"Description"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"indexlist"}),(0,s.jsx)(t.td,{children:"Input/output"}),(0,s.jsxs)(t.td,{children:["A ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"})," value containing the names of the indexes to be built. This parameter is passed by reference. If the implementation of %OnBeforeBuildIndices alters this value, then %BuildIndices will honor those changes."]})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"onafterbuildindices",children:"%OnAfterBuildIndices"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %OnAfterBuildIndices(indexlist As %String(MAXLEN="") = "") As %Status [ Abstract, Private, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %BuildIndices method after all work is completed."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then %BuildIndices will return that error but all normal processing is completed. This call occurs just prior to releasing the extent lock if one was requested by the %BuildIndices caller. All index structures have been built and SortEnd executed."}),"\n",(0,s.jsx)(t.h3,{id:"ondelete",children:"%OnDelete"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnDelete(oid As %ObjectIdentity) As %Status [ Abstract, Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %Delete method to provide notification that the object specified by oid is being deleted."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then the object will not be deleted."}),"\n",(0,s.jsx)(t.h3,{id:"onafterdelete",children:"%OnAfterDelete"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnAfterDelete(oid As %ObjectIdentity) As %Status [ Abstract, Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %Delete method to provide notification that the object specified by oid has been deleted. The callback occurs immediately after %DeleteData has been called. If %DeleteData returns an error then %OnAfterDelete is not called."}),"\n",(0,s.jsx)(t.p,{children:"If %OnAfterDelete returns an error (%Status) then the transaction is rolled back."}),"\n",(0,s.jsx)(t.h3,{id:"onbeforesave",children:"%OnBeforeSave"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnBeforeSave(insert As %Boolean) As %Status [ Abstract, Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %Save method to provide notification that the object is being saved. It is called before any data is written to disk."}),"\n",(0,s.jsx)(t.p,{children:"insert will be set to 1 if this object is being saved for the first time."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then the call to %Save will fail."}),"\n",(0,s.jsx)(t.h3,{id:"onaftersave",children:"%OnAfterSave"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnAfterSave(insert As %Boolean) As %Status [ Abstract, Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %Save method to provide notification that the object is being saved. It is called after the object's data has been successfully written to disk."}),"\n",(0,s.jsx)(t.p,{children:"insert will be set to 1 if this object is being saved for the first time."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then the call to %Save will fail."}),"\n",(0,s.jsx)(t.h3,{id:"onopen",children:"%OnOpen"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnOpen() As %Status [ Abstract, Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %Open method to provide notification that the object specified by oid is being opened."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then the object will not be opened."}),"\n",(0,s.jsx)(t.h3,{id:"onbeforepurgeindices",children:"%OnBeforePurgeIndices"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %OnBeforePurgeIndices(ByRef indexlist As %String(MAXLEN="") = "") As %Status [ Abstract, Private, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %PurgeIndices method."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then %PurgeIndices will exit immediately without purging any index structures, returning the error to the caller of %PurgeIndices."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Parameters"}),(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Name"}),(0,s.jsx)(t.td,{children:"Type"}),(0,s.jsx)(t.td,{children:"Description"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"indexlist"}),(0,s.jsx)(t.td,{children:"Input/output"}),(0,s.jsxs)(t.td,{children:["A ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"})," value containing the names of the indexes to be built. This parameter is passed by reference. If the implementation of %OnBeforePurgeIndices alters this value, then %PurgeIndices will honor those changes."]})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"onafterpurgeindices",children:"%OnAfterPurgeIndices"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %OnAfterPurgeIndices(indexlist As %String(MAXLEN="") = "") As %Status [ Abstract, Private, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %PurgeIndices method after all work is completed."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then %PurgeIndices will return that error but all normal processing is completed. This call occurs just prior to releasing the extent lock."}),"\n",(0,s.jsx)(t.h3,{id:"onreload",children:"%OnReload"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnReload() As %Status [ Abstract, Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %Reload method to provide notification that the object specified by oid was reloaded. %Reload is invoked by %Open when the object identified by the OID is already in memory."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then the object will not be opened."}),"\n",(0,s.jsx)(t.h3,{id:"onrollback",children:"%OnRollBack"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnRollBack() As %Status [ Abstract, Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %Save method to provide notification that a save transaction is being rolled back."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then the rollback operation will be aborted."}),"\n",(0,s.jsx)(t.h3,{id:"ondetermineclass",children:"%OnDetermineClass"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnDetermineClass(oid As %ObjectIdentity, ByRef class As %String) As %Status [ ServerOnly = 1 ]\n"})})]})}function o(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var s=n(96540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);