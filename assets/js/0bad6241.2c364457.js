"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[55907],{11518:(e,n,s)=>{s.r(n),s.d(n,{contentTitle:()=>o,default:()=>h,frontMatter:()=>i,toc:()=>a});var t=s(74848),r=s(28453);const i={pagination_prev:null,pagination_next:null},o="INFORMATION.SCHEMA.CURRENTCONNECTIONS",a=[{value:"Parameters",id:"parameters",level:2},{value:"READONLY",id:"readonly",level:3},{value:"Methods",id:"methods",level:2},{value:"GetStatement",id:"getstatement",level:3}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"informationschemacurrentconnections",children:"INFORMATION.SCHEMA.CURRENTCONNECTIONS"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Class INFORMATION.SCHEMA.CURRENTCONNECTIONS [ ClassType = view, CompileAfter = %SYS.ProcessQuery, Final, Owner = {_PUBLIC}, SqlTableName = CURRENT_CONNECTIONS, System = 4, ViewQuery = {\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns one row for each xDBC server process currently running on this instance"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Column Descriptions:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"Pid"})})," - Process ID. Process ID ($J) given to the process by the O/S, decimal form on all platforms."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"Username"})})," - $Username of process."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"Roles"})})," - Roles a process currently has."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"LoginRoles"})})," - Roles a process has when it initially logs in."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"Routine"})})," - Name of the routine which the process is currently executing."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"InTransaction"})})," - In a transaction. If 0, the process is not in a transaction. If >0, the process has executed a tstart command, is in a transaction, and the value is the offset in the journal file where the transaction has started."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"ClientNodeName"})})," - Node name of the client which initiated the connection. It is passed down to the process as part of the initial connection message. This property may be set by the end-user if they are managing their own connections."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"ClientIPAddress"})})," - IP address of the client which initiated the connection. It is passed down to the process as part of the initial connection message. This property may be set by the end-user if they are managing their own connections."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"ClientExecutableName"})})," - The name of the Executable or DLL on the client which initiated the connection. It is passed down to the process as part of the initial connection message. This property may be set by the end-user if they are managing their own connections."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"MemoryAllocated"})})," - Maximum amount of memory in KB that the process is allowed to use. This property requires a mailbox message to be sent to the process being examined."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"MemoryUsed"})})," - Memory used in KB (Current $s). Current amount of memory the process has used in KB. This property requires a mailbox message to be sent to the process being examined."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"MemoryPeak"})})," - Peak memory allocated in KB. This property requires a mailbox message to be sent to the process being examined."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"StatementId"})})," - Statement hash ID from the SQL Statement Index (if the process is currently executing an SQL Statement)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"Statement"})})," - SQL Statement Text currently being executed (if the caller has permission for this statement)."]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(n.h3,{id:"readonly",children:"READONLY"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter READONLY = 1;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"getstatement",children:"GetStatement"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetStatement(statementHash As %String, namespace As %String) As %String(MAXLEN=262144) [ Internal, SqlName = GetStatement, SqlProc ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Given an SQL Statement Hash and a namespace, return the SQL Statement Text"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(96540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);