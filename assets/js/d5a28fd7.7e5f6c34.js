"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[94286],{89445:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>i,default:()=>c,frontMatter:()=>a,toc:()=>l});var n=s(74848),r=s(28453);const a={pagination_prev:null,pagination_next:null},i="%iKnow.Classification.IKnowBuilder",l=[{value:"Properties",id:"properties",level:2},{value:"DomainId",id:"domainid",level:3},{value:"TrainingSet",id:"trainingset",level:3},{value:"TestSet",id:"testset",level:3},{value:"MetadataField",id:"metadatafield",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"%LoadMetadataCategories",id:"loadmetadatacategories",level:3},{value:"%GetCategoryFilters",id:"getcategoryfilters",level:3},{value:"%OnReset",id:"onreset",level:3},{value:"%TestClassifier",id:"testclassifier",level:3},{value:"%PopulateTerms",id:"populateterms",level:3},{value:"%GetTermIDs",id:"gettermids",level:3},{value:"%GetTermInfo",id:"getterminfo",level:3},{value:"GetCoocSpread",id:"getcoocspread",level:3},{value:"%OnCreateExportTable",id:"oncreateexporttable",level:3},{value:"%OnExportTable",id:"onexporttable",level:3},{value:"%OnGenerateClassifier",id:"ongenerateclassifier",level:3},{value:"TrainingSetSet",id:"trainingsetset",level:3},{value:"TestSetSet",id:"testsetset",level:3},{value:"%GetCategoryInfo",id:"getcategoryinfo",level:3},{value:"%GetRecordCount",id:"getrecordcount",level:3},{value:"%GetCandidateTerms",id:"getcandidateterms",level:3},{value:"%DropDictionary",id:"dropdictionary",level:3}];function o(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"iknowclassificationiknowbuilder",children:"%iKnow.Classification.IKnowBuilder"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %iKnow.Classification.IKnowBuilder Extends Builder [ Deprecated, System = 4 ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Parent class for any iKnow-based %iKnow.Classification.Builder implementations, providing common infrastructure abstracting a few iKnow API calls. IKnowBuilder implementations assume category specs are %iKnow.Filters.Filter instances in their string representation."}),"\n",(0,n.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(t.h3,{id:"domainid",children:"DomainId"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property DomainId As %Integer;\n"})}),"\n",(0,n.jsx)(t.p,{children:"The iKnow domain this categorization model is built from"}),"\n",(0,n.jsx)(t.h3,{id:"trainingset",children:"TrainingSet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property TrainingSet As %iKnow.Filters.Filter;\n"})}),"\n",(0,n.jsx)(t.p,{children:"The sample set of the domain to be used for training this model"}),"\n",(0,n.jsx)(t.h3,{id:"testset",children:"TestSet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property TestSet As %iKnow.Filters.Filter;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"metadatafield",children:"MetadataField"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property MetadataField As %String;\n"})}),"\n",(0,n.jsx)(t.p,{children:"If set, this metadata field contains the actual category value for each source"}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %OnNew(pDomainName As %String = "", pTrainingSet As %iKnow.Filters.Filter = "", pMethod As %String = "naiveBayes") As %Status [ Internal, ServerOnly = 1 ]\n'})}),"\n",(0,n.jsx)(t.h3,{id:"loadmetadatacategories",children:"%LoadMetadataCategories"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %LoadMetadataCategories(pFieldName As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Creates (appends) categories for each of the available values of a given metadata field pFieldName in the full domain (thus ignoring TrainingSet)."}),"\n",(0,n.jsx)(t.p,{children:"Note: as category names are case sensitive, it is highly recommended to use a case-sensitive metadata field."}),"\n",(0,n.jsx)(t.h3,{id:"getcategoryfilters",children:"%GetCategoryFilters"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %GetCategoryFilters(Output pFilters, pIntersectWithFilter As %iKnow.Filters.Filter = "", pCheckIfEmpty As %Boolean = 0) As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Builds an array of %iKnow.Filters.Filter objects for the categories registered in this Builder instance."}),"\n",(0,n.jsx)(t.h3,{id:"onreset",children:"%OnReset"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnReset() As %Status [ Private ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"testclassifier",children:"%TestClassifier"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %TestClassifier(pTestSet As %RawString = "", Output pResult, Output pAccuracy As %Double, pCategorySpec As %String = "", pVerbose As %Boolean = 0) As %Status\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Utility method to batch-test the classifier against a test set pTestSet, which can be supplied as an %iKnow.Filters.Filter object or its serialized form. Per-record results are returned through pResult:",(0,n.jsx)(t.br,{}),"\npResult(n) = $lb([record ID], [actual category], [predicted category])"]}),"\n",(0,n.jsx)(t.p,{children:"pAccuracy will contain the raw accuracy (# of records predicted correctly) of the current model. Use %iKnow.Classificaton.Utils for more advanced model testing."}),"\n",(0,n.jsx)(t.p,{children:"If the current model's category options were added through %AddCategory without providing an appropriate category filter specification, rather than through a call to %LoadMetadataCategories (which sets MetadataField), supply a metadata field through pCategorySpec where the actual category values to test against can be found."}),"\n",(0,n.jsx)(t.h3,{id:"populateterms",children:"%PopulateTerms"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %PopulateTerms(pCount As %Integer = 100, pType As %String = "entity", pMetric As %String = "BM25", pPerCategory As %Boolean = 0) As %Status\n'})}),"\n",(0,n.jsx)(t.p,{children:'This %PopulateTerms implementation accepts "BM25" and "TFIDF" as acceptable values for pMetric. See also the class reference for this method in %iKnow.Classification.Builder.'}),"\n",(0,n.jsx)(t.h3,{id:"gettermids",children:"%GetTermIDs"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetTermIDs(Output pTermInfo, Output pDictId As %Integer, Output pDictMap) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:'Returns an array for the current builder terms: pTermInfo(i, "id", n) = entity ID / crc ID / cooc entity IDs / dictItemId'}),"\n",(0,n.jsx)(t.h3,{id:"getterminfo",children:"%GetTermInfo"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %GetTermInfo(Output pTermInfo, pIncludeCategoryDetails As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:'Returns an array for the current builder terms: pTermInfo(i, "spread") = [spread in training set] pTermInfo(i, "spread", j) = [spread in training set for category j] pTermInfo(i, "frequency", j) = [freq in training set for category j]'}),"\n",(0,n.jsx)(t.h3,{id:"getcoocspread",children:"GetCoocSpread"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method GetCoocSpread(pDomainId As %Integer, pIDs As %List, pTrainingFilter As %iKnow.Filters.Filter = "", pMode As %String(VALUELIST=",spread,freq") = "spread", Output pSC As %Status) As %Integer [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Helper method to retrieve the Cooccurrence spread for a set of sources defined by pTrainingFilter"}),"\n",(0,n.jsx)(t.h3,{id:"oncreateexporttable",children:"%OnCreateExportTable"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnCreateExportTable(pClassDef As %Dictionary.ClassDefinition, pVerbose As %Boolean) As %Status [ Private ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"onexporttable",children:"%OnExportTable"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnExportTable(pClassName As %String, pVerbose As %Boolean, pTracking As %Boolean) As %Status [ Private ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"ongenerateclassifier",children:"%OnGenerateClassifier"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnGenerateClassifier(ByRef pDefinition As %iKnow.Classification.Definition.Classifier, pVerbose As %Boolean = 1, pIncludeBuilderInfo As %Boolean = 0) As %Status [ Private ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"trainingsetset",children:"TrainingSetSet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method TrainingSetSet(pFilter As %iKnow.Filters.Filter) As %Status [ Internal, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"testsetset",children:"TestSetSet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method TestSetSet(pFilter As %iKnow.Filters.Filter) As %Status [ Internal, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getcategoryinfo",children:"%GetCategoryInfo"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetCategoryInfo(Output pCategories) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Returns all categories added so far: pCategories(n) = $lb([name], [record count])"}),"\n",(0,n.jsx)(t.h3,{id:"getrecordcount",children:"%GetRecordCount"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetRecordCount(Output pSC As %Status) As %Integer\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getcandidateterms",children:"%GetCandidateTerms"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %GetCandidateTerms(pType As %String = "entity") As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"^||%IK.TermCandidates(id) = $lb(value, spread) ^||%IK.TermCandidates(id, j) = [spread in category j]"}),"\n",(0,n.jsx)(t.h3,{id:"dropdictionary",children:"%DropDictionary"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %DropDictionary(pDictId) As %Status [ Internal ]\n"})})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>l});var n=s(96540);const r={},a=n.createContext(r);function i(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);