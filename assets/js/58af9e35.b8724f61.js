"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[65239],{20852:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>a,default:()=>c,frontMatter:()=>l,toc:()=>r});var i=s(74848),n=s(28453);const l={pagination_prev:null,pagination_next:null},a="%SYS.PTools.UtilSQLAnalysisDB",r=[{value:"Properties",id:"properties",level:2},{value:"OptionName",id:"optionname",level:3},{value:"Counter",id:"counter",level:3},{value:"SQLPointer",id:"sqlpointer",level:3},{value:"SchemaName",id:"schemaname",level:3},{value:"TableName",id:"tablename",level:3},{value:"ModuleName",id:"modulename",level:3},{value:"MapType",id:"maptype",level:3},{value:"ExtentSize",id:"extentsize",level:3},{value:"BlockCount",id:"blockcount",level:3},{value:"IndexName",id:"indexname",level:3},{value:"UsageCount",id:"usagecount",level:3},{value:"IndexFields",id:"indexfields",level:3},{value:"DataValues",id:"datavalues",level:3},{value:"JoinIndexFlag",id:"joinindexflag",level:3},{value:"JoinFields",id:"joinfields",level:3},{value:"OutlierField",id:"outlierfield",level:3},{value:"BiasQueriesAsOutlier",id:"biasqueriesasoutlier",level:3},{value:"OutlierSelectivity",id:"outlierselectivity",level:3},{value:"OutlierValue",id:"outliervalue",level:3},{value:"OutlierIndexFlag",id:"outlierindexflag",level:3},{value:"OutlierCondFields",id:"outliercondfields",level:3},{value:"WhereOperator",id:"whereoperator",level:3},{value:"WhereValue",id:"wherevalue",level:3},{value:"WhereCondition",id:"wherecondition",level:3},{value:"Triggers",id:"triggers",level:2},{value:"OnDelete",id:"ondelete",level:3},{value:"Methods",id:"methods",level:2},{value:"clearSQLAnalysisDB",id:"clearsqlanalysisdb",level:3},{value:"version",id:"version",level:3}];function o(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"sysptoolsutilsqlanalysisdb",children:"%SYS.PTools.UtilSQLAnalysisDB"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Class %SYS.PTools.UtilSQLAnalysisDB Extends %Persistent [ System = 4 ]\n"})}),"\n",(0,i.jsx)(t.p,{children:'Class: %SYS.PTools.UtilSQLAnalysisDB Replaces: %SYS.PTools.SQLUtilResults [DEPRECATED] Purpose: This class is used by the following Methods and Queries, defined in the abstract interface class %SYS.PTools.UtilSQLAnalysis, to Analyze and Store the SQL Analysis details collected against the SQL Statements stored in the %SYS.PTools.UtilSQLStatements class: Methods Queries ------------------------------- ----------------------------------- - indexUsage - indexUsage - tableScans - tableScans - tempIndices - tempIndices - joinIndices - joinIndices - outlierIndices - outlierIndices - exportSQLUtilStmts - exportSQLUtilStmtRslts - exportSQLUtilities - clearSQLAnalysisDB Data Storage: ^%sqlcq("SAMPLES","PTools","util","SQLAnlsys","{C|D|I|S}") Error Storage: ^%sqlcq($NAMESPACE,"PTools","Error"[...])=$LIST Info -------------------------------------------------------------------------------'}),"\n",(0,i.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(t.h3,{id:"optionname",children:"OptionName"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:'Property OptionName As %String(VALUELIST = ",IU,TS,TI,JI,OI,");\n'})}),"\n",(0,i.jsx)(t.p,{children:"1st piece of the IDKey The value for this property indicates the SQL Statement Analysis Method producinc the result row: IndexUsage() => 'IU' TableScans() => 'TS' TempIndices() => 'TI' JoinIndices() => 'JI' OutlierIndices() => 'OI'"}),"\n",(0,i.jsx)(t.h3,{id:"counter",children:"Counter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:'Property Counter As %Integer [ InitialExpression = {$I(^%sqlcq($NAMESPACE,"PTools","util","SQLAnlsys","D"))} ];\n'})}),"\n",(0,i.jsx)(t.p,{children:"2nd piece of the IDKey A unique ID counter which comprises the data row's IDKey"}),"\n",(0,i.jsx)(t.h3,{id:"sqlpointer",children:"SQLPointer"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property SQLPointer As %SYS.PTools.UtilSQLStatements;\n"})}),"\n",(0,i.jsx)(t.p,{children:"Set in the following methods: tableScans(), tempIndices(), joinIndices(), outlierIndices() This is a Pointer Reference to the %SYS.PTools.UtilSQLStatements class which contains the SQL Statements found within InterSystems IRIS"}),"\n",(0,i.jsx)(t.h3,{id:"schemaname",children:"SchemaName"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property SchemaName As %String(MAXLEN = 2000);\n"})}),"\n",(0,i.jsx)(t.p,{children:"The schema of the table being queried in the SQL Statement"}),"\n",(0,i.jsx)(t.h3,{id:"tablename",children:"TableName"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property TableName As %String(MAXLEN = 2000);\n"})}),"\n",(0,i.jsx)(t.p,{children:"The table being queried in the SQL Statement"}),"\n",(0,i.jsx)(t.h3,{id:"modulename",children:"ModuleName"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property ModuleName As %String(MAXLEN = 2000);\n"})}),"\n",(0,i.jsx)(t.p,{children:"Set by the TableScan class method Name of the Module that is doing the Table Scan"}),"\n",(0,i.jsx)(t.h3,{id:"maptype",children:"MapType"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property MapType As %String(MAXLEN = 100);\n"})}),"\n",(0,i.jsx)(t.p,{children:'Set by the following methods: tableScans(), tempIndices(), joinIndices(), outlierIndices() One of the following Map Types: { "master map " | "extent bitmap " | "bitmap index " | "index map " }'}),"\n",(0,i.jsx)(t.h3,{id:"extentsize",children:"ExtentSize"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property ExtentSize As %Integer;\n"})}),"\n",(0,i.jsx)(t.p,{children:"Set by the follow methods: tableScans(), tempIndices(), joinIndices(), outlierIndices() The Number of Rows in the Table Based on TuneTable Data or set by the user"}),"\n",(0,i.jsx)(t.h3,{id:"blockcount",children:"BlockCount"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property BlockCount As %Integer;\n"})}),"\n",(0,i.jsx)(t.p,{children:"The approximate numbers of map blocks used by each SQL map NOTE: The size of all SQL map blocks is 2048 bytes (2K bytes)."}),"\n",(0,i.jsx)(t.h3,{id:"indexname",children:"IndexName"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property IndexName As %String(MAXLEN = 2000);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"usagecount",children:"UsageCount"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property UsageCount As %Integer;\n"})}),"\n",(0,i.jsx)(t.p,{children:"Used by both IndexUsage() and TempIndices() class methods Number of times the index was used in the sql."}),"\n",(0,i.jsx)(t.h3,{id:"indexfields",children:"IndexFields"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property IndexFields As list Of %String(MAXLEN = 2000);\n"})}),"\n",(0,i.jsx)(t.p,{children:"$LISTBUILD of the Properties that will make up the Subscripts of the {IndexName} Every Index will have ID as the final subscript"}),"\n",(0,i.jsx)(t.h3,{id:"datavalues",children:"DataValues"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property DataValues As list Of %String(MAXLEN = 2000);\n"})}),"\n",(0,i.jsx)(t.p,{children:"$LISTBUILD of the Properties that will be the data node of the {IndexName} The extra data is stored as part of the index to avoid reading from the Data Map"}),"\n",(0,i.jsx)(t.h3,{id:"joinindexflag",children:"JoinIndexFlag"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property JoinIndexFlag As %Integer;\n"})}),"\n",(0,i.jsx)(t.p,{children:"Set by joinIndices() method to one of the following values: Flag has 5 values: 4 = Exact Match: An index exists where its fields match all fields from the JOIN conditions 3 = Leading Match: An index exists where its leading fields match all fields from the JOIN conditions, but there are additional fields in the index 2 = Contains Match: An index exists where its fields contains all fields from the JOIN conditions, but not the leading fields 1 = Partial Match: An index exists where its fields contains some of the fields from the JOIN conditions, but not the leading field 0 = No Match: No index exists to support the fields from the JOIN conditions"}),"\n",(0,i.jsx)(t.h3,{id:"joinfields",children:"JoinFields"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property JoinFields As list Of %String(MAXLEN = 2000);\n"})}),"\n",(0,i.jsx)(t.p,{children:"Set by joinIndices() Method $LISTBUILD of the Properties/Fields that comprise the Join Conditions This $LIST is used as a comparison against the the {IndexFields} $LIST in order to determine the viability of the specified {IndexName} and represented by the {JoinIndexFlag} field"}),"\n",(0,i.jsx)(t.h3,{id:"outlierfield",children:"OutlierField"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property OutlierField As %String(MAXLEN = 2000);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"biasqueriesasoutlier",children:"BiasQueriesAsOutlier"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property BiasQueriesAsOutlier As %Library.Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,i.jsx)(t.p,{children:"Set this flag { 0 | 1 } in the following location of the 'Storage' section of the class: {BiasQueriesAsOutlier}  If this flag is set to zero (0), the query optimizer assumes that queries will not normally select on a outlier value. If this flag is set to one (1), the query optimizer will assume that queries selecting on a outlier are not rare."}),"\n",(0,i.jsx)(t.h3,{id:"outlierselectivity",children:"OutlierSelectivity"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property OutlierSelectivity As %Float;\n"})}),"\n",(0,i.jsx)(t.p,{children:"Set this value in the following location of the 'Storage' section of the class or via $SYSTEM.SQLTuneTable(...): {OutlierSelectivity}:{OutlierValue}  This is a percentage for a single property value that appears much more frequently than the other data values within the whole set of rows. Normal selectivity is still the percentage of each non-outlier data value within the whole set of rows. For example, if the outlier selectivity is 80% and the regular selectivity is 1%, then in addition to the outlier value, you can expect to find about 20 ((10-.80)/.01) additional non-outlier values. NOTE: This value represented the percentage of outliers, but without the percent sign. Hence, if the outlier value is 75%, then it should be represented at .75"}),"\n",(0,i.jsx)(t.h3,{id:"outliervalue",children:"OutlierValue"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property OutlierValue As %String(MAXLEN = 1000);\n"})}),"\n",(0,i.jsx)(t.p,{children:"Set this value in the following location of the 'Storage' section of the class or via $SYSTEM.SQLTuneTable(...): {OutlierSelectivity}:{OutlierValue}  This is the value that should be used to compare against for  conditions. If this Outlier Value is  (represented in this context as the empty string \"\") and the  conditions is  IS NULL, then the Query Optimizer will use the {OutlierSelectivity} when constructing the Query Plan."}),"\n",(0,i.jsx)(t.h3,{id:"outlierindexflag",children:"OutlierIndexFlag"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property OutlierIndexFlag As %Integer;\n"})}),"\n",(0,i.jsx)(t.p,{children:"Set by outlierIndices() Method Flag has 5 values: 4 = Exact Match: An index exists where its fields match all fields from the Outlier conditions 3 = Leading Match: An index exists where its leading fields match all fields from the Outlier conditions, but there are additional fields in the index 2 = Contains Match: An index exists where its fields contains all fields from the Outlier conditions, but not the leading fields 1 = Partial Match: An index exists where its fields contains some of the fields from the Outlier conditions, but not the leading field 0 = No Match: No index exists to support the fields from the Outlier conditions"}),"\n",(0,i.jsx)(t.h3,{id:"outliercondfields",children:"OutlierCondFields"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property OutlierCondFields As list Of %String(MAXLEN = 2000);\n"})}),"\n",(0,i.jsx)(t.p,{children:"Set by outlierIndices() Method $LISTBUILD of the Properties/Fields that comprise the Outlier Conditions This $LIST is used as a comparison against the the {IndexFields} $LIST in order to determine the viability of the specified {IndexName} and represented by the {OutlierIndexFlag} field"}),"\n",(0,i.jsx)(t.h3,{id:"whereoperator",children:"WhereOperator"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property WhereOperator As %String(MAXLEN = 100);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"wherevalue",children:"WhereValue"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property WhereValue As %String(MAXLEN = 1000);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"wherecondition",children:"WhereCondition"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Property WhereCondition As %String(MAXLEN = 2000);\n"})}),"\n",(0,i.jsx)(t.h2,{id:"triggers",children:"Triggers"}),"\n",(0,i.jsx)(t.h3,{id:"ondelete",children:"OnDelete"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Trigger OnDelete [ Event = DELETE, Time = AFTER ]\n"})}),"\n",(0,i.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(t.h3,{id:"clearsqlanalysisdb",children:"clearSQLAnalysisDB"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod clearSQLAnalysisDB(ns As %String = "", clearErrs As %Integer = 0, returnType As %Integer = 0, ByRef ptInfo As %RawString) As %Status [ SqlProc ]\n'})}),"\n",(0,i.jsx)(t.p,{children:"Method: clearSQLAnalysisDB Replaces: ClearResults (%SYS.PTools.SQLUtilities) [DEPRECATED] Status: New Method to replicate Backward-Compatible Method it 'Replaces' Purpose: Delete all of the data stored in the '%SYS.PTools.UtilSQLAnalysisDB' class, based on the specified parameters... Invocation: This method can be invoked in the following ways: ObjectScript: ##class(%SYS.PTools.UtilSQLAnalysisDB).clearSQLAnalysisDB(...) SQL: CALL %SYS_PTools.UtilSQLAnalysisDB_clearSQLAnalysisDB(...) SELECT %SYS_PTools.UtilSQLAnalysisDB_clearSQLAnalysisDB(...) NOTE: This 'SqlProc' method can be invoked with either the CALL-interface or the SELECT-interface. Both interfaces execute the method: the CALL-interface does not return any resulting value, while the SELECT-interface does. Examples: The following examples shows the use of this method: #1 Delete all of the data stored in the '%SYS.PTools.UtilSQLAnalysisDB' class in the current namespace: set status=##class(%SYS.PTools.UtilSQLAnalysisDB).clearSQLAnalysisDB() Data Storage: ^%sqlcq($NAMESPACE,\"PTools\",\"util\",\"SQLAnlsys\") Parameters: ns - The namespace in which to clear SQL Index/Analysis Statstics [DEFAULT: Current Namespace] clearErrs - 0 = Don't delete the 'PTools' Application Errors 1 = Delete all of the 'PTools' Application Errors [DEFAULT: 0] returnType - 0 = Return a %Status code of either $$$OK or $$$ERROR() 1 = Return the number of Stats rows deleted from the following class: %SYS.PTools.UtilSQLAnalysisDB [DEFAULT: 0] ptInfo - A Pass By Reference information array that returns detailed information to the user in the following format: ptInfo(category,variable)=value OR $LB(val1,...,valn) Where category = { \"cnt\" | \"curr\" | \"term\" | ... } variable = A var corresponding to the given 'category' Example: ptInfo(\"cnt\",\"clearSQLAnalysisDB\")=The number of rows deleted via this method RETURN Value: Based on the value of the 'returnType' parameter, return one of the following: 0: Return a %Status code of either $$$OK or $$$ERROR() 1: Return the number of Stats rows deleted from the following class; Otherwise, return an error message if an error occurred: %SYS.PTools.UtilSQLAnalysisDB"}),"\n",(0,i.jsx)(t.h3,{id:"version",children:"version"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod version() As %String [ SqlName = UtilSQLAnalysisDB_version, SqlProc ]\n"})}),"\n",(0,i.jsx)(t.p,{children:"Query/View: UtilSQLAnalysisDBView Replaces: SQLUtilStmtResultsView (%SYS.PTools.SQLUtilResults) [DEPRECATED] Status: New Query/View to replicate Backward-Compatible Query/View it 'Replaces' Purpose: Class View which returns all of the SQL Statements information stored in the '%SYS.PTools.UtilSQLAnalysisDB' class/table"}),"\n",(0,i.jsx)(t.p,{children:"Provide the current version for the UtilSQLAnalysisDB class/section of the Performance Tools (PTools) Application"})]})}function c(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>r});var i=s(96540);const n={},l=i.createContext(n);function a(e){const t=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(l.Provider,{value:t},e.children)}}}]);