"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[73533],{79560:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>a,default:()=>c,frontMatter:()=>i,toc:()=>l});var n=s(74848),r=s(28453);const i={pagination_prev:null,pagination_next:null},a="%Net.FtpSession",l=[{value:"Properties",id:"properties",level:2},{value:"Callback",id:"callback",level:3},{value:"Connected",id:"connected",level:3},{value:"IsIPV6",id:"isipv6",level:3},{value:"ServerAddr",id:"serveraddr",level:3},{value:"ReturnCode",id:"returncode",level:3},{value:"ReturnMessage",id:"returnmessage",level:3},{value:"SSLConfiguration",id:"sslconfiguration",level:3},{value:"SSLCheckServerIdentity",id:"sslcheckserveridentity",level:3},{value:"LegacySSL",id:"legacyssl",level:3},{value:"SSLUseSessionResumption",id:"sslusesessionresumption",level:3},{value:"Timeout",id:"timeout",level:3},{value:"Type",id:"type",level:3},{value:"UsePASV",id:"usepasv",level:3},{value:"AutoDetectPrivate",id:"autodetectprivate",level:3},{value:"ServerName",id:"servername",level:3},{value:"UseExtensions",id:"useextensions",level:3},{value:"TranslateTable",id:"translatetable",level:3},{value:"CommandTranslateTable",id:"commandtranslatetable",level:3},{value:"device",id:"device",level:3},{value:"transferType",id:"transfertype",level:3},{value:"serverIP",id:"serverip",level:3},{value:"Methods",id:"methods",level:2},{value:"CommandTranslateTableSet",id:"commandtranslatetableset",level:3},{value:"%OnClose",id:"onclose",level:3},{value:"Append",id:"append",level:3},{value:"Ascii",id:"ascii",level:3},{value:"Binary",id:"binary",level:3},{value:"Connect",id:"connect",level:3},{value:"Features",id:"features",level:3},{value:"ChangeUser",id:"changeuser",level:3},{value:"Delete",id:"delete",level:3},{value:"GetDirectory",id:"getdirectory",level:3},{value:"List",id:"list",level:3},{value:"Logout",id:"logout",level:3},{value:"MakeDirectory",id:"makedirectory",level:3},{value:"NameList",id:"namelist",level:3},{value:"RemoveDirectory",id:"removedirectory",level:3},{value:"Rename",id:"rename",level:3},{value:"Retrieve",id:"retrieve",level:3},{value:"RetryRetrieve",id:"retryretrieve",level:3},{value:"SetDirectory",id:"setdirectory",level:3},{value:"SetToParentDirectory",id:"settoparentdirectory",level:3},{value:"Size",id:"size",level:3},{value:"MDTM",id:"mdtm",level:3},{value:"Status",id:"status",level:3},{value:"Store",id:"store",level:3},{value:"StoreFiles",id:"storefiles",level:3},{value:"System",id:"system",level:3},{value:"TypeGet",id:"typeget",level:3},{value:"error",id:"error",level:3},{value:"genericRetrieve",id:"genericretrieve",level:3},{value:"genericStore",id:"genericstore",level:3},{value:"getPath",id:"getpath",level:3},{value:"readResponse",id:"readresponse",level:3},{value:"returnStatus",id:"returnstatus",level:3},{value:"sendCommand",id:"sendcommand",level:3},{value:"setupPASV",id:"setuppasv",level:3},{value:"isPrivate",id:"isprivate",level:3},{value:"setupPORT",id:"setupport",level:3},{value:"setupIPV6",id:"setupipv6",level:3},{value:"GetDevice",id:"getdevice",level:3}];function o(e){const t={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"netftpsession",children:"%Net.FtpSession"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Net.FtpSession Extends %RegisteredObject [ System = 3 ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"For information on using this class"}),", see ",(0,n.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?FIND=CLASSES+%25Net.FtpSession",children:"Using FTP"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"The %Net.FtpSession class provides a way of interacting with a FTP server so you can send/receive files, get a list of the files on the server, rename files, delete files, etc."}),"\n",(0,n.jsx)(t.p,{children:"All the methods will return a boolean that is true if the method succeeded and false if it failed. They will also set the two properties ReturnCode and ReturnMessage with information from the ftp server you are connected to. This often contains useful information if a method fails. You should at the very least check the return value from each of the methods after every call."}),"\n",(0,n.jsx)(t.p,{children:"Once you have created an object of this class you need to login to the server you wish to communicate with before you can do anything else, this is done with the Connect method. You can tell if you are connected to a server by looking at the property Connected."}),"\n",(0,n.jsxs)(t.p,{children:["If an ftp server at 'TestMachine' had a binary file called 'test.exe' in the root ftp directory then the following example will pull this file into InterSystems IRIS.",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.code,{children:'Set ftp=##class(%Net.FtpSession).%New() If \'ftp.Connect("TestMachine","ftp","username@domain.com") Write "Not connected",! Quit Write "Ftp server messsage:",!,ftp.ReturnMessage,! Set stream=##class(%GlobalCharacterStream).%New() If \'ftp.Binary() Write "Can not swap to binary mode",! Quit Write "Mode now: ",ftp.Type,! If \'ftp.Retrieve("test.exe",stream) Write "Failed to get file",! Quit Write "Length of file received: ",stream.Size,! If \'ftp.Logout() Write "Failed to logout",! Quit'})]}),"\n",(0,n.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(t.h3,{id:"callback",children:"Callback"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property Callback As %Net.FtpCallback;\n"})}),"\n",(0,n.jsx)(t.p,{children:"The Callback property is designed to allow user code in the class %Net.FtpCallback to be called at regular intervals during an ftp Store or Retrieve. This can display the progress of the ftp operation to the user and could allow the user to abort the transfer."}),"\n",(0,n.jsx)(t.h3,{id:"connected",children:"Connected"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property Connected As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"True if we are currently connected to an ftp server and false if not."}),"\n",(0,n.jsx)(t.h3,{id:"isipv6",children:"IsIPV6"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property IsIPV6 As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"True if the connection is IPV6 protocol."}),"\n",(0,n.jsx)(t.h3,{id:"serveraddr",children:"ServerAddr"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property ServerAddr As %String;\n"})}),"\n",(0,n.jsx)(t.p,{children:"Server's IP address to be used in EPSV mode with IPV6 protocol."}),"\n",(0,n.jsx)(t.h3,{id:"returncode",children:"ReturnCode"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property ReturnCode As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"ReturnCode is a the three digit number that the ftp server reponds to commands with. This can be used to determine if the command completed or if there were problems. See the rfc on ftp for more information on these codes."}),"\n",(0,n.jsx)(t.h3,{id:"returnmessage",children:"ReturnMessage"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property ReturnMessage As %String;\n"})}),"\n",(0,n.jsx)(t.p,{children:"ReturnMessage is set to the text message that the ftp server responds with, this often contains useful information if a method failed, or useful information such as the text banner you get when you first login to an ftp server."}),"\n",(0,n.jsx)(t.h3,{id:"sslconfiguration",children:"SSLConfiguration"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property SSLConfiguration As %String;\n"})}),"\n",(0,n.jsx)(t.p,{children:"The name of the activated TLS configuration to use for ftp requests. If specified then we use TLS on the FTP connection as specified in RFC4217. Both the data and the command channel will be secured with TLS after the initial connect on the command channel tells the remote server to switch to TLS mode."}),"\n",(0,n.jsx)(t.h3,{id:"sslcheckserveridentity",children:"SSLCheckServerIdentity"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property SSLCheckServerIdentity As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"When making an SSL connection check the server identity in the server certificate matches the name of the system we are connecting to. This defaults to being off and matches based on the rules layed out in section 3.1 of RFC 2818."}),"\n",(0,n.jsx)(t.h3,{id:"legacyssl",children:"LegacySSL"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property LegacySSL As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"If true and you specify a SSLConfiguration then this class will use non-standard implied SSL on the data and command channel rather than using RFC4217. Depending on the configuration of the server you are talking to it may be needed to also send 'PBSZ 0' and 'PROT P' before you can communicate, this can be done with 'Set rc=ftp.sendCommand(\"PBSZ 0\"),rc2=ftp.sendCommand(\"PROT P\")'."}),"\n",(0,n.jsx)(t.h3,{id:"sslusesessionresumption",children:"SSLUseSessionResumption"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property SSLUseSessionResumption As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"When making the SSL connection for the data channel, reuse session parameters from the command channel. This feature requires OpenSSL v1.1.x+."}),"\n",(0,n.jsx)(t.h3,{id:"timeout",children:"Timeout"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property Timeout As %Integer [ InitialExpression = 10 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Timeout is the amount of time to wait for a response from the ftp server before assuming that the server is not responding or the network connection is not working. The default value is 10 seconds."}),"\n",(0,n.jsx)(t.h3,{id:"type",children:"Type"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property Type As %String [ Calculated ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Type returns the transfer mode the ftp server is currently set to. This can be either Ascii or Binary. The methods Ascii and Binary change the mode the server is currently set to."}),"\n",(0,n.jsx)(t.h3,{id:"usepasv",children:"UsePASV"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property UsePASV As %Boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Ftp connections are formed from two TCP/IP connections to the remote server, a command channel where the ftp commands are sent down and command responses are retrieved and a data channel for streaming large pieces of data. The way the data channel is connected is determined by this property. In PASV mode, the default, this ftp client asks the server where to connect for the data channel and it then initiates this connection to the remote server. If PASV mode is not used then the client tells the remote server where to connect to and the remote server initiates the data connection to this client machine. PASV mode is turned on by default because when going through a firewall having the remote ftp server initiate the data channel often does not work, but PASV mode will work in this case."}),"\n",(0,n.jsx)(t.h3,{id:"autodetectprivate",children:"AutoDetectPrivate"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property AutoDetectPrivate As %Integer [ InitialExpression = 1 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"When using PASV mode (see UsePASV) the remote server supplies the IP address and port to connect to. On misconfigured servers it is possible this may report a private IP address when we are connecting to it from a public IP address so the PASV connection fails. We automatically detect this and use the initial IP address we had connected to in this case, but if you set this property =0 it turns this detection off. If this property is 2 then we never use the PASV supplied server IP and always use the original server address."}),"\n",(0,n.jsx)(t.h3,{id:"servername",children:"ServerName"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property ServerName As %String [ Internal, Private ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Internal name of the ftp server we connected to"}),"\n",(0,n.jsx)(t.h3,{id:"useextensions",children:"UseExtensions"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property UseExtensions As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Indicates whether to use FTP Extensions for IPv6 and NATs. When set, the extension commands EPRT and EPSV will be used in place of the PORT and PASV commands. The default value is 0, but UseExtentions is automatically set to 1 when an IPV6 address is used. The FTP Extension commmands are useful to avoid problems using FTPS with Network Address Translation (NAT) as when traversing firewalls."}),"\n",(0,n.jsx)(t.h3,{id:"translatetable",children:"TranslateTable"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property TranslateTable As %String;\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The translate table to be used when reading or writing files. See ",(0,n.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=LANDING+TRANSLATETABLES",children:"Translation Tables"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"commandtranslatetable",children:"CommandTranslateTable"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property CommandTranslateTable As %String;\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The translate table to use for the command channel, specifically for the filename/pathnames. See ",(0,n.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=LANDING+TRANSLATETABLES",children:"Translation Tables"}),".",(0,n.jsx)(t.br,{}),"\nNormally this should not be specified in which case if the ftp server supports UTF-8 then we will use that for the filename/pathnames, if the server does not support UTF-8 then we will use RAW mode and just read the bytes as sent."]}),"\n",(0,n.jsx)(t.h3,{id:"device",children:"device"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property device As %String [ Private ];\n"})}),"\n",(0,n.jsx)(t.h3,{id:"transfertype",children:"transferType"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property transferType As %Integer [ InitialExpression = 1, Private ];\n"})}),"\n",(0,n.jsx)(t.h3,{id:"serverip",children:"serverIP"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property serverIP As %String [ Private ];\n"})}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"commandtranslatetableset",children:"CommandTranslateTableSet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method CommandTranslateTableSet(table As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status [ Private ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"append",children:"Append"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Append(Filename As %String, Stream As %AbstractStream) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Append the data contained in Stream to the file named in Filename."}),"\n",(0,n.jsx)(t.h3,{id:"ascii",children:"Ascii"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Ascii() As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Switch the ftp server transfer type to Ascii. This will for example convert Cr/Lf to Lf for Unix systems. When transfering text files you should use this mode. The current mode can be found by looking at the property Type."}),"\n",(0,n.jsx)(t.h3,{id:"binary",children:"Binary"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Binary() As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Switch the ftp server transfer type to Binary. This will store the data in exactly the same format it is sent in. When transfering any binary files you should use this mode. The current mode can be found by looking at the property Type."}),"\n",(0,n.jsx)(t.h3,{id:"connect",children:"Connect"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Connect(Server As %String, Username As %String, Password As %String, Port As %Integer = 21) As %Boolean\n"})}),"\n",(0,n.jsxs)(t.p,{children:['Connect to an Ftp server. You should supply the server IP address or domain name to connect to as the Server parameter. Also most Ftp server will require a Username and a Password in order to allow you to login. To login to an anonymous Ftp server use the Username="anonymous" and the Password is your email address.',(0,n.jsx)(t.br,{}),"\nPort is an optional parameter that specifies the IP port number to connect on if it is not the standard port of 21."]}),"\n",(0,n.jsx)(t.h3,{id:"features",children:"Features"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Features() As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"See which features the ftp server supports"}),"\n",(0,n.jsx)(t.h3,{id:"changeuser",children:"ChangeUser"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method ChangeUser(Username As %String, Password As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Change the user that we are logged in as. This assumes you are already connected to the ftp server at this point."}),"\n",(0,n.jsx)(t.h3,{id:"delete",children:"Delete"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Delete(Filename As %String) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Delete the file Filename on the Ftp server."}),"\n",(0,n.jsx)(t.h3,{id:"getdirectory",children:"GetDirectory"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetDirectory(ByRef Path As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the current directory the Ftp server is in the parameter Path that is passed by reference."}),"\n",(0,n.jsx)(t.h3,{id:"list",children:"List"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method List(Pattern As %String, ByRef Stream As %AbstractStream) As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Read in the files that match the Pattern in a human readable format into Stream. The Pattern can include a path as well pattern to search for, and if no pattern is specified then it will list all the files in this directory. The information returned contains server information like the file size, permissions modification time as well as the filename. The format of this is server specific."}),"\n",(0,n.jsx)(t.h3,{id:"logout",children:"Logout"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Logout() As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Logoff and disconnect from the Ftp server."}),"\n",(0,n.jsx)(t.h3,{id:"makedirectory",children:"MakeDirectory"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method MakeDirectory(ByRef Path As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Create a new directory on the Ftp server. Path should be passed by reference and it will return the name of the directory created. The Ftp server will translate the path you give it into its own format (which may be different) and is the value returned by in Path."}),"\n",(0,n.jsx)(t.h3,{id:"namelist",children:"NameList"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method NameList(Path As %String, ByRef FileArray As %ArrayOfDataTypes) As %Boolean\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Given a Path this will return an array of filenames including their path in the parameter FileArray, this parameter should be passed by reference and if not already created it will create a new %ArrayOfDataTypes. An example of its use assuming is: ",(0,n.jsx)(t.code,{children:'New fileArray,key If \'ftp.NameList("",.fileArray) Write "Failed to get name list",! Set key="" Write "List of Files:",! For Write fileArray.GetNext(.key),! Quit:(key="")'})]}),"\n",(0,n.jsx)(t.h3,{id:"removedirectory",children:"RemoveDirectory"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method RemoveDirectory(Path As %String) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Delete the directory passed in Path from the Ftp server."}),"\n",(0,n.jsx)(t.h3,{id:"rename",children:"Rename"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Rename(OldFilename As %String, NewFilename As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Rename a file from OldFilename to NewFilename."}),"\n",(0,n.jsx)(t.h3,{id:"retrieve",children:"Retrieve"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Retrieve(Filename As %String, ByRef Stream As %AbstractStream) As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Retrieve the file specified by Filename into Stream. If Stream is not specified it will be created, in which case you should pass it by reference so it can be returned to the caller."}),"\n",(0,n.jsx)(t.h3,{id:"retryretrieve",children:"RetryRetrieve"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method RetryRetrieve(Filename As %String, Stream As %AbstractStream) As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"If a Retrieve failed because the connection was lost this allows you to retry getting the file. So if you have got 1/2 of the original file in the first attempt for Filename you pass the Stream with this half into this method and it will start where the other transfer left off."}),"\n",(0,n.jsx)(t.h3,{id:"setdirectory",children:"SetDirectory"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method SetDirectory(Path As %String) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Set the directory on the Ftp server to Path."}),"\n",(0,n.jsx)(t.h3,{id:"settoparentdirectory",children:"SetToParentDirectory"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method SetToParentDirectory() As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Move to parent directory on the Ftp server."}),"\n",(0,n.jsx)(t.h3,{id:"size",children:"Size"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Size(Filename As %String, ByRef Size As %Integer) As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"If the FTP server supports it then this will return a files size based on the current transfer type in the Size output argument. Returns true if it completed correctly."}),"\n",(0,n.jsx)(t.h3,{id:"mdtm",children:"MDTM"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method MDTM(Filename As %String, ByRef Time As %Float) As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"If the FTP server supports it then this will return a files modification time based on GMT as a float value in the Time output argument. Returns true if it completed correctly."}),"\n",(0,n.jsx)(t.h3,{id:"status",children:"Status"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Status(ByRef Status As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the status of the Ftp server in the Status parameter which should be passed by reference."}),"\n",(0,n.jsx)(t.h3,{id:"store",children:"Store"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Store(Filename As %String, Stream As %AbstractStream) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Store the data in Stream in the Filename on the Ftp server."}),"\n",(0,n.jsx)(t.h3,{id:"storefiles",children:"StoreFiles"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method StoreFiles(Directory As %String, Wildcards As %String, Delimiter As %String = ";") As %Boolean\n'})}),"\n",(0,n.jsxs)(t.p,{children:['Upload the files in Directory matching the set of Wildcards to the Server. Multiple Wildcards can be passed. In this case, each wildcard must be separated by the Delimiter. The default Delimiter is ";". StoreFiles ignores subdirectories. All files will be uploaded using the current transfer mode (Type). This means that binary and ASCII files cannot be uploaded together in a single call. If mixed file types are needed, separate the upload into batches, for example: ',(0,n.jsx)(t.code,{children:'If \'ftp.Ascii() Write "Can not swap to Ascii mode",! Quit If \'ftp.StoreFiles("/myfiles","*.txt;*.csv") Write "Failed to store text files",! Quit If \'ftp.Binary() Write "Failed to swap to Binary mode",! Quit If \'ftp.StoreFiles("/myfiles","*.bin") Write "Failed to store binary files",! Quit'})]}),"\n",(0,n.jsx)(t.h3,{id:"system",children:"System"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method System(ByRef System As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return information about the type of computer you are connected to in the by reference parameter System."}),"\n",(0,n.jsx)(t.h3,{id:"typeget",children:"TypeGet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method TypeGet() As %String [ CodeMode = expression ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"error",children:"error"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method error(ReturnCode As %Integer, ReturnMessage As %String) As %Integer [ Private ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"genericretrieve",children:"genericRetrieve"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method genericRetrieve(Command As %String, ByRef Stream As %AbstractStream, Table As %String = "", Retry As %Boolean = 0) As %Boolean [ Private ]\n'})}),"\n",(0,n.jsx)(t.h3,{id:"genericstore",children:"genericStore"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method genericStore(Command As %String, Stream As %AbstractStream, Table As %String = "") As %Boolean [ Private ]\n'})}),"\n",(0,n.jsx)(t.h3,{id:"getpath",children:"getPath"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod getPath(Path As %String) As %String [ Private ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"readresponse",children:"readResponse"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method readResponse(Quick As %Boolean = 0) As %Boolean [ Private ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"returnstatus",children:"returnStatus"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method returnStatus() As %Boolean [ CodeMode = expression, Private ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"sendcommand",children:"sendCommand"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method sendCommand(Command As %String, noread As %Boolean = 0) As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Generic method to send a command to the ftp server and read the response. It returns true if the command worked and false if there was an error status returned. See ReturnStatus for the returned status and ReturnMessage for the returned message."}),"\n",(0,n.jsx)(t.h3,{id:"setuppasv",children:"setupPASV"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method setupPASV(ByRef Device As %String, Output ServerName As %String) As %Boolean [ Private ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"isprivate",children:"isPrivate"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod isPrivate(address As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return true if this IPv4 address is a private address"}),"\n",(0,n.jsx)(t.h3,{id:"setupport",children:"setupPORT"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method setupPORT(ByRef Device As %String, Output ServerName As %String) As %Boolean [ Private ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"setupipv6",children:"setupIPV6"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method setupIPV6() As %Boolean [ Private ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getdevice",children:"GetDevice"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetDevice() As %String\n"})})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>l});var n=s(96540);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);