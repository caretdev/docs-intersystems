"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[78302],{52443:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>i,default:()=>l,frontMatter:()=>a,toc:()=>o});var r=t(74848),n=t(28453);const a={pagination_prev:null,pagination_next:null},i="%Api.DocDB",o=[{value:"Parameters",id:"parameters",level:2},{value:"CHARSET",id:"charset",level:3},{value:"CONVERTINPUTSTREAM",id:"convertinputstream",level:3},{value:"CONTENTTYPE",id:"contenttype",level:3},{value:"HandleCorsRequest",id:"handlecorsrequest",level:3},{value:"UseSession",id:"usesession",level:3},{value:"XDatas",id:"xdatas",level:2},{value:"UrlMap",id:"urlmap",level:3},{value:"Methods",id:"methods",level:2},{value:"OnPreDispatch",id:"onpredispatch",level:3},{value:"AccessCheck",id:"accesscheck",level:3},{value:"GetServer",id:"getserver",level:3},{value:"HeadServer",id:"headserver",level:3}];function c(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"apidocdb",children:"%Api.DocDB"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Class %Api.DocDB Extends %DocDB.REST\n"})}),"\n",(0,r.jsx)(s.p,{children:"Routing class for the DocDB REST services"}),"\n",(0,r.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(s.h3,{id:"charset",children:"CHARSET"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter CHARSET = "utf-8";\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Specifies the default character set for the page. This can be overriden using the <CSP:CONTENT CHARSET=> tag, or by setting the ",(0,r.jsx)(s.strong,{children:"%response"}),".CharSet property in the OnPreHTTP method. If this parameter is not specified, then for the default charset is utf-8."]}),"\n",(0,r.jsx)(s.h3,{id:"convertinputstream",children:"CONVERTINPUTSTREAM"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter CONVERTINPUTSTREAM = 1;\n"})}),"\n",(0,r.jsx)(s.p,{children:"Specifies if input %request.Content or %request.MimeData values are converted from their original character set on input. By default (0) we do not modify these and receive them as a binary stream which may need to be converted manually later. If 1 then if there is a 'charset' value in the request Content-Type or mime section we will convert from this charset when the input data is text based. For either json or xml data with no charset this will convert from utf-8 or honor the BOM if one is present."}),"\n",(0,r.jsx)(s.h3,{id:"contenttype",children:"CONTENTTYPE"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter CONTENTTYPE = "application/json";\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Specifies the default content type for the page. This can be overriden using the <CSP:CONTENT TYPE=> tag, or by setting the ",(0,r.jsx)(s.strong,{children:"%response"}),".ContentType property in the OnPreHTTP method. The default value if this parameter is not set is text/html."]}),"\n",(0,r.jsx)(s.h3,{id:"handlecorsrequest",children:"HandleCorsRequest"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter HandleCorsRequest = 1;\n"})}),"\n",(0,r.jsx)(s.p,{children:"This parameter influences the CORS support. The default is an empty string meaning 'not specified'. If set to true (1) then CORS processing is ON. If set to false (0) then CORS processing is OFF. If left unset \"\" then the decision to process CORS is delegated to the setting on the URL map route."}),"\n",(0,r.jsx)(s.h3,{id:"usesession",children:"UseSession"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter UseSession As Integer = 1;\n"})}),"\n",(0,r.jsx)(s.p,{children:"This parameter controls the CSP session support. By default the CSP session will be ended after each request in accordance with the spirit of REST. However this CAN be overridden by the user. To use a session, it's necessary to manage the CSPSESSION cookie. Browsers do this automatically but command line tools such as CURL require the setting of options."}),"\n",(0,r.jsx)(s.p,{children:"Note that if you choose to use a session then this will use a CSP license until the session is ended or expires and the grace period has been satisfied. If you use the default of no session then this will be the same behavior as SOAP requests of holding a license for ten seconds."}),"\n",(0,r.jsx)(s.h2,{id:"xdatas",children:"XDatas"}),"\n",(0,r.jsx)(s.h3,{id:"urlmap",children:"UrlMap"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'XData UrlMap [ XMLNamespace = "http://www.intersystems.com/urlmap" ]\n'})}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"onpredispatch",children:"OnPreDispatch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OnPreDispatch(pUrl As %String, pMethod As %String, ByRef pContinue As %Boolean) As %Status\n"})}),"\n",(0,r.jsx)(s.p,{children:"This method gets called prior to dispatch of the request. Put any common code here that you want to be executed for EVERY request. If pContinue is set to 0, the request will NOT be dispatched according to the UrlMap. In this case it's the responsibility of the user to return a response. HTTP Codes returned:- HTTP 406 will be returned if the Accepts header does not contain */* or application/json HTTP 404 will be returned in the namespace specified does not exist"}),"\n",(0,r.jsx)(s.h3,{id:"accesscheck",children:"AccessCheck"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AccessCheck(Output pAuthorized As %Boolean = 0) As %Status\n"})}),"\n",(0,r.jsx)(s.p,{children:"This method performs a basic access check. You can override this to add additional checks."}),"\n",(0,r.jsx)(s.h3,{id:"getserver",children:"GetServer"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetServer() As %Status\n"})}),"\n",(0,r.jsxs)(s.p,{children:["This method returns information about the server. GET ",(0,r.jsx)(s.a,{href:"http://localhost:57772/api/DocDB/",children:"http://localhost:57772/api/DocDB/"}),' HTTP Codes returned:- HTTP 200 if OK HTTP 500 if an error occurs (details will be in status error array) Returned content is a server descriptor. { "status": { "errors": [], "summary": "" }, "console": [], "result": { "content": { "version": "IRIS for UNIX (Apple Mac OS X for x86-64) 2081.1 (Build 513U) Fri Jan 26 2018 18:21:02 EST", "id": "6D1CB774-B314-11E5-888C-38C986213273", "api": 1, "features": [ { "name": "ENSEMBLE", "enabled": true } ], "namespaces": [ "%SYS", "DOCBOOK", "ENSDEMO", "ENSEMBLE", "SAMPLES", "USER" ] } } }']}),"\n",(0,r.jsx)(s.h3,{id:"headserver",children:"HeadServer"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod HeadServer() As %Status\n"})}),"\n",(0,r.jsxs)(s.p,{children:["This method returns information about the server. HEAD ",(0,r.jsx)(s.a,{href:"http://localhost:57772/api/DocDB/",children:"http://localhost:57772/api/DocDB/"})," HTTP Codes returned:- HTTP 200 if OK HTTP 500 if an error occurs (details will be in status error array) No returned content"]})]})}function l(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>o});var r=t(96540);const n={},a=r.createContext(n);function i(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);