"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[20500],{27463:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>c,frontMatter:()=>a,toc:()=>r});var s=n(74848),l=n(28453);const a={pagination_prev:null,pagination_next:null},i="%ZEN.Component.dataListBox",r=[{value:"Properties",id:"properties",level:2},{value:"multiColumn",id:"multicolumn",level:3},{value:"choiceColumn",id:"choicecolumn",level:3},{value:"valueColumn",id:"valuecolumn",level:3},{value:"displayColumns",id:"displaycolumns",level:3},{value:"contentType",id:"contenttype",level:3},{value:"sqlLookup",id:"sqllookup",level:3},{value:"itemCount",id:"itemcount",level:3},{value:"parameters",id:"parameters",level:3},{value:"OnDrawItem",id:"ondrawitem",level:3},{value:"XDatas",id:"xdatas",level:2},{value:"Style",id:"style",level:3},{value:"Methods",id:"methods",level:2},{value:"%SetDefaultValues",id:"setdefaultvalues",level:3},{value:"%GetDisplayValue",id:"getdisplayvalue",level:3},{value:"%DrawListContents",id:"drawlistcontents",level:3},{value:"%DrawItem",id:"drawitem",level:3},{value:"executeQuery",id:"executequery",level:3},{value:"getOptionCount",id:"getoptioncount",level:3},{value:"getOptionValue",id:"getoptionvalue",level:3},{value:"getOptionText",id:"getoptiontext",level:3},{value:"setProperty",id:"setproperty",level:3}];function o(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"zencomponentdatalistbox",children:"%ZEN.Component.dataListBox"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %ZEN.Component.dataListBox Extends (abstractListBox, querySource) [ Deprecated, Inheritance = right, System = 3 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This is a listBox that gets its list from an SQL query.",(0,s.jsx)(t.br,{}),"\nRefer to the %ZEN.Component.querySource class for a description of how to provide data for this component.",(0,s.jsx)(t.br,{}),"\nThe dataListBox control will support both drag and drop. If dragEnabled is true, then the user can drag values from the list box and drop them on other drop-enabled components.",(0,s.jsx)(t.br,{}),"\nIf dropEnabled is true, then values can be dropped onto the list. The value of the list box will be set to the value of the dropped data."]}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"multicolumn",children:"multiColumn"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property multiColumn As %ZEN.Datatype.boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"If true (the default), then display multiple columns in the data list if the result set contains more than 2 columns."}),"\n",(0,s.jsx)(t.h3,{id:"choicecolumn",children:"choiceColumn"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property choiceColumn As %ZEN.Datatype.integer(MINVAL = 1, ZENSETTING = 0) [ InitialExpression = 2 ];\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If there are multiple data columns displayed within the data list this is the column number (1-based) of the column that will provide the display value for this control.",(0,s.jsx)(t.br,{}),"\nIf this value is greater than the number of columns in the query then the second column will be used."]}),"\n",(0,s.jsx)(t.h3,{id:"valuecolumn",children:"valueColumn"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property valueColumn As %ZEN.Datatype.integer(MINVAL = 1, ZENSETTING = 0) [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If there are multiple data columns displayed in the data list this is the column number (1-based) of the column that will provide the logical value for this control.",(0,s.jsx)(t.br,{}),"\nIf this value is greater than the number of columns in the query then the first column will be used."]}),"\n",(0,s.jsx)(t.h3,{id:"displaycolumns",children:"displayColumns"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property displayColumns As %ZEN.Datatype.csv(ZENSETTING = 0);\n"})}),"\n",(0,s.jsx)(t.p,{children:"If there are multiple data columns displayed in the data list, this optional property defines a comma-delimited list of the column numbers of the column that should be displayed."}),"\n",(0,s.jsx)(t.h3,{id:"contenttype",children:"contentType"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property contentType As %ZEN.Datatype.string(VALUELIST = ",text,html") [ InitialExpression = "text" ];\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Indicates how display values should be rendered:",(0,s.jsx)(t.br,{}),'\nIf contentType is "text" (the default) then the display values will be HTML-escaped before being rendered.',(0,s.jsx)(t.br,{}),'\nIf contentType is "html" then the display values will not be HTML-escaped before being rendered. Use this when your display values contain HTML markup that you do not want escaped.']}),"\n",(0,s.jsx)(t.h3,{id:"sqllookup",children:"sqlLookup"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property sqlLookup As %ZEN.Datatype.sql;\n"})}),"\n",(0,s.jsx)(t.p,{children:"(optional) SQL statement that, given a value, finds a display value. If present, this is used to find the initial display value for cases where the logical and display values are different."}),"\n",(0,s.jsx)(t.h3,{id:"itemcount",children:"itemCount"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property itemCount As %ZEN.Datatype.integer(XMLPROJECTION = "none");\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Number of options within the list.",(0,s.jsx)(t.br,{}),"\nThis is calculated when the query for this component is run."]}),"\n",(0,s.jsx)(t.h3,{id:"parameters",children:"parameters"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property parameters As list Of %ZEN.Auxiliary.parameter(XMLNAME = "parameter", XMLPROJECTION = "ELEMENT");\n'})}),"\n",(0,s.jsxs)(t.p,{children:["User-defined list of query parameters.",(0,s.jsx)(t.br,{}),"\nThese values are passed on to the user callback function that provides the query for this component in order to provide values for any run-time query parameters."]}),"\n",(0,s.jsx)(t.h3,{id:"ondrawitem",children:"OnDrawItem"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property OnDrawItem As %ZEN.Datatype.delegator(FORMALSPEC = "pRS:%SQL.StatementResult,pValue:%String,pText:%String", RETURNTYPE = "%String");\n'})}),"\n",(0,s.jsxs)(t.p,{children:["(optional) Name of Server-side callback method that is called for each item in the list before it is displayed. This callback is passed the logical and display value for the current item. It returns the HTML that is to be displayed within the cell for the given item.",(0,s.jsx)(t.br,{}),"\nThis must be the name of a server-only method in the page class that contains this dataListBox. Note: If using multi-column output, it is being called individually for each column"]}),"\n",(0,s.jsx)(t.h2,{id:"xdatas",children:"XDatas"}),"\n",(0,s.jsx)(t.h3,{id:"style",children:"Style"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"XData Style\n"})}),"\n",(0,s.jsx)(t.p,{children:"defines style sheet used by this component"}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"setdefaultvalues",children:"%SetDefaultValues"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetDefaultValues()\n"})}),"\n",(0,s.jsx)(t.p,{children:"This method fills in reasonable default values for this control. Used by tools (such as Control Tester) to dynamically create controls."}),"\n",(0,s.jsx)(t.h3,{id:"getdisplayvalue",children:"%GetDisplayValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetDisplayValue(pValue As %String) As %String\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Lookup up the display value for the combobox given a logical value.",(0,s.jsx)(t.br,{}),'\nThis is called when the control is initially drawn. A logical value of "", must have a display value of "".']}),"\n",(0,s.jsx)(t.h3,{id:"drawlistcontents",children:"%DrawListContents"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %DrawListContents()\n"})}),"\n",(0,s.jsx)(t.p,{children:"Server-side method to provide contents of the list box."}),"\n",(0,s.jsx)(t.h3,{id:"drawitem",children:"%DrawItem"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %DrawItem(pRS As %SQL.StatementResult, pValue As %String, pText As %String) As %Text [ Internal ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Internal method.",(0,s.jsx)(t.br,{}),"\nInvoke the OnDrawItem callback, if present."]}),"\n",(0,s.jsx)(t.h3,{id:"executequery",children:"executeQuery"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod executeQuery() [ Language = javascript ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Execute the server-side associated with this dataListBox.",(0,s.jsx)(t.br,{}),"\nThe query is executed asynchronously, so results may not be available immediately."]}),"\n",(0,s.jsx)(t.h3,{id:"getoptioncount",children:"getOptionCount"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getOptionCount() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return number of items in list."}),"\n",(0,s.jsx)(t.h3,{id:"getoptionvalue",children:"getOptionValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getOptionValue(idx) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return the logical value of the given item (0-based) in the list."}),"\n",(0,s.jsx)(t.h3,{id:"getoptiontext",children:"getOptionText"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getOptionText(idx) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return the display text for the given item (0-based) in the list."}),"\n",(0,s.jsx)(t.h3,{id:"setproperty",children:"setProperty"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod setProperty(property, value, value2) [ Language = javascript ]\n"})})]})}function c(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var s=n(96540);const l={},a=s.createContext(l);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);