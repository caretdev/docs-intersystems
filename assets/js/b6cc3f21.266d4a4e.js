"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[2845],{78423:(e,s,r)=>{r.r(s),r.d(s,{contentTitle:()=>i,default:()=>c,frontMatter:()=>a,toc:()=>o});var t=r(74848),n=r(28453);const a={pagination_prev:null,pagination_next:null},i="%OAuth2.Login",o=[{value:"Parameters",id:"parameters",level:2},{value:"APPLICATION",id:"application",level:3},{value:"SCOPE",id:"scope",level:3},{value:"RESPONSEMODE",id:"responsemode",level:3},{value:"SessionQueryParameter",id:"sessionqueryparameter",level:3},{value:"Methods",id:"methods",level:2},{value:"OnPreHTTP",id:"onprehttp",level:3},{value:"DefineParameters",id:"defineparameters",level:3},{value:"DefineProperties",id:"defineproperties",level:3},{value:"OnPage",id:"onpage",level:3}];function l(e){const s={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"oauth2login",children:"%OAuth2.Login"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %OAuth2.Login Extends %CSP.Login\n"})}),"\n",(0,t.jsx)(s.p,{children:"%OAuth2.Login is the base class for login pages which use OAuth 2.0 or OpenID Connect. The usual login class will only override the APPLICATION and SCOPE parameters. Additional customization may be done by overriding the RESPONSEMODE parameter and DefineProperties method."}),"\n",(0,t.jsxs)(s.p,{children:["The login page will directly log in the session using delegated authentication. For an example ZAUTHENTICATE routine, see the ",(0,t.jsx)(s.a,{href:"https://github.com/intersystems/Samples-Security",children:"Samples-Security"})," repo in GitHub."]}),"\n",(0,t.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(s.h3,{id:"application",children:"APPLICATION"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter APPLICATION As STRING;\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The application name for the application being logged into.",(0,t.jsx)(s.br,{}),"\nThe actual login page will need to override this parameter."]}),"\n",(0,t.jsx)(s.h3,{id:"scope",children:"SCOPE"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter SCOPE As STRING;\n"})}),"\n",(0,t.jsx)(s.p,{children:"The blank separated scope list to be used for the access token request. The actual login page will need to override this parameter."}),"\n",(0,t.jsx)(s.h3,{id:"responsemode",children:"RESPONSEMODE"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter RESPONSEMODE As STRING;\n"})}),"\n",(0,t.jsx)(s.p,{children:"The RESPONSEMODE parameter specifies the mode of the response as either query, fragment or form_post. The default is query."}),"\n",(0,t.jsx)(s.h3,{id:"sessionqueryparameter",children:"SessionQueryParameter"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter SessionQueryParameter [ Internal ] = "CSPOAUTH2";\n'})}),"\n",(0,t.jsx)(s.p,{children:"The name of the query parameter used to carry the access token hash."}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"onprehttp",children:"OnPreHTTP"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OnPreHTTP() As %Boolean [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"defineparameters",children:"DefineParameters"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DefineParameters(Output application As %String, Output scope As %String, Output responseMode As %String)\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Callback to allow the overriding login subclass to define the class parameter values at run-time",(0,t.jsx)(s.br,{}),"\nThe default to use the class parameter values."]}),"\n",(0,t.jsx)(s.h3,{id:"defineproperties",children:"DefineProperties"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DefineProperties(Output properties As %String)\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Callback to allow the overriding login subclass to define the properties list for the GetAccessTokenAuthorizationCode call.",(0,t.jsx)(s.br,{}),'\nproperties is a local array specifying additional properties to be included in a token request in the form properties(name)=value. To add a request parameter which is a JSON object, you may either create a properties element which is a %DynamicObject or is a string that is the UTF-8 encoded serialized object. For example the claims parameter that is defined by OpenID Connect. If the request or request_uri request parameters are to be used, then the %SYS.OAuth2.Request class is used to create the JWT. The the JWT is assigned to properties("request") or the URL for the JWT is assigned to properties("request_uri")']}),"\n",(0,t.jsx)(s.h3,{id:"onpage",children:"OnPage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OnPage() As %Status [ Internal ]\n"})})]})}function c(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>o});var t=r(96540);const n={},a=t.createContext(n);function i(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);