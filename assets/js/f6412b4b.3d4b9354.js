"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[3536],{54099:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>c,default:()=>a,frontMatter:()=>o,toc:()=>i});var n=s(74848),l=s(28453);const o={pagination_prev:null,pagination_next:null},c="%SYS.LockQuery",i=[{value:"Methods",id:"methods",level:2},{value:"AnyRemoteOwnedLocks",id:"anyremoteownedlocks",level:3},{value:"ClientSysNameToSysNum",id:"clientsysnametosysnum",level:3},{value:"ClientSysNumToSysName",id:"clientsysnumtosysname",level:3},{value:"CommonExecute",id:"commonexecute",level:3},{value:"GetLockSysNameTable",id:"getlocksysnametable",level:3},{value:"TranslateID",id:"translateid",level:3},{value:"DetailExecute",id:"detailexecute",level:3},{value:"DetailFetch",id:"detailfetch",level:3},{value:"DetailClose",id:"detailclose",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"ListFetch",id:"listfetch",level:3},{value:"ListClose",id:"listclose",level:3},{value:"WebListExecute",id:"weblistexecute",level:3},{value:"WebListFetch",id:"weblistfetch",level:3},{value:"WebListClose",id:"weblistclose",level:3},{value:"WebListFilterExecute",id:"weblistfilterexecute",level:3},{value:"WebListFilterFetch",id:"weblistfilterfetch",level:3},{value:"WebListFilterClose",id:"weblistfilterclose",level:3},{value:"ConflictsExecute",id:"conflictsexecute",level:3},{value:"ConflictsFetch",id:"conflictsfetch",level:3},{value:"ConflictsClose",id:"conflictsclose",level:3}];function r(e){const t={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"syslockquery",children:"%SYS.LockQuery"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Class %SYS.LockQuery Extends %SYSTEM.Help [ Abstract, Final, SqlTableName = "", StorageStrategy = "", System = 4 ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Provide Interface for users to read lock table information in the system. SYS.Lock is used to perform management operations."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Filter Specification"})}),"\n",(0,n.jsx)(t.p,{children:"The argument to the Rset.Execute() method selects which subset of the current locks to return. The first character of the 'id' argument determines the category of the locks to be collected. This has various forms as described below."}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:['Null String or "*" - All locks. When the \'id\' is a null string (default value when no id specified) or "*", it collects all locks in the lock table. Example: ',(0,n.jsx)(t.code,{children:'Set Rset=##class(%ResultSet).%New("%SYS.LockQuery:List") //Collect all locks in lock table. Do Rset.Execute("") Set Rset=##class(%ResultSet).%New("%SYS.LockQuery:List") //Collect all locks in lock table. Do Rset.Execute()'})," 2) 'P' or numeric - Process ID. Collect all locks owned by the job with the specified process ID. If the 'id' is a numeric value without a leading 'P', it is treated as a process ID.",(0,n.jsx)(t.br,{}),"\nFor all systems the process ID is in decimal form.",(0,n.jsx)(t.br,{}),"\nExample: ",(0,n.jsx)(t.code,{children:'Set Rset=##class(%ResultSet).%New("%SYS.LockQuery:List") //Collect all locks owned by a process whose process ID is 2004. Do Rset.Execute("P2004") Set Rset=##class(%ResultSet).%New("%SYS.LockQuery:List") //Collect all locks owned by a process whose process ID is 2004. Do Rset.Execute("2004")'})," 3) 'J' - Internal job number. Collect all locks owned by the job with the specified internal job number.",(0,n.jsx)(t.br,{}),"\nExample: ",(0,n.jsx)(t.code,{children:'Set Rset=##class(%ResultSet).%New("%SYS.LockQuery:List") //Collect all locks owned by a process whose internal job number is 20. Do Rset.Execute("J20")'})," 4) 'C' - Remote client system Name. Collect all locks owned by the remote client system with the specified name.",(0,n.jsx)(t.br,{}),"\nThe Name can be one of the names displayed in the 'Process ID' column of the ^LOCKTAB utility.",(0,n.jsx)(t.br,{}),"\nWhen the string following the leading 'C' is empty, it collects all locks owned by jobs of the local system.",(0,n.jsx)(t.br,{}),"\nExample: ",(0,n.jsx)(t.code,{children:'Set Rset=##class(%ResultSet).%New("%SYS.LockQuery:List") //Collect all locks owned by jobs of local system. Do Rset.Execute("C") Set Rset=##class(%ResultSet).%New("%SYS.LockQuery:List") //Collect all locks owned by remote client named \'SystemA\'. Do Rset.Execute("CSystemA")'})," 5) 'S' - Remote server system Name. Collect all locks sent to the specified remote system.",(0,n.jsx)(t.br,{}),"\nWhen the string following the leading 'S' is empty then it collects all locks kept on the local system.",(0,n.jsx)(t.br,{}),"\nExample: ",(0,n.jsx)(t.code,{children:'Set Rset=##class(%ResultSet).%New("%SYS.LockQuery:List") //Collect all locks on the local system. Do Rset.Execute("S") Set Rset=##class(%ResultSet).%New("%SYS.LockQuery:List") //Collect all locks sent to remote server named \'SystemA\'. Do Rset.Execute("SSystemA")'})," 6) 'N' - Network Protocol. Collect all locks owned by the remote client system through the network protocol. The protocol can be:"]}),"\n"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:'"ECP" - The owner is an ECP remote client system.'}),"\n",(0,n.jsxs)(t.li,{children:['"" - The owner is a remote client system of any protocol.\nExample: ',(0,n.jsx)(t.code,{children:'Set Rset=##class(%ResultSet).%New("%SYS.LockQuery:List") //Collect all locks owned by remote ECP clients. Do Rset.Execute("NECP") Set Rset=##class(%ResultSet).%New("%SYS.LockQuery:List") //Collect all locks owned by remote clients. Do Rset.Execute("N")'})]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"anyremoteownedlocks",children:"AnyRemoteOwnedLocks"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod AnyRemoteOwnedLocks(NetType As %String = "") As %Boolean\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Check if any remote system owns any lock in the system.",(0,n.jsx)(t.br,{}),"\nReturn TRUE(1) if there is any lock owned by the specified network type, otherwise return FALSE(0)."]}),"\n",(0,n.jsxs)(t.p,{children:["The NetType argument specifies the network type of the remote system.",(0,n.jsx)(t.br,{}),"\nIt has following value:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:'"NECP" - The remote system owned the lock through ECP network.'}),"\n",(0,n.jsxs)(t.li,{children:['"N" or "" - The null string (Default) means any network type.\nFor un-recognized network type this method will return FALSE.',(0,n.jsx)(t.br,{}),"\nExample: ",(0,n.jsx)(t.code,{children:'// Return 1 if any lock is owned by remote ECP client. Set rc=##Class(%SYS.LockQuery).AnyRemoteOwnedLocks("NECP") // Return 1 if any lock is owned by any remote client. Set rc=##Class(%SYS.LockQuery).AnyRemoteOwnedLocks("N")'})]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"clientsysnametosysnum",children:"ClientSysNameToSysNum"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ClientSysNameToSysNum(SysName As %String = "") As %Integer [ Internal, Private ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Convert a remote client system name to internal system number."}),"\n",(0,n.jsx)(t.h3,{id:"clientsysnumtosysname",children:"ClientSysNumToSysName"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ClientSysNumToSysName(SysNum As %Integer = 0) As %String [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Convert a remote client system number to client system name."}),"\n",(0,n.jsx)(t.h3,{id:"commonexecute",children:"CommonExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CommonExecute(ByRef qHandle As %Binary, id As %String, Flag As %Integer) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Common Execute codes for List and Detail query."}),"\n",(0,n.jsx)(t.h3,{id:"getlocksysnametable",children:"GetLockSysNameTable"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetLockSysNameTable(ByRef SYSTEMS As %String, ByRef BYTES2 As %String, ByRef SYSN2 As %String) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Get lock system number and name translation table."}),"\n",(0,n.jsx)(t.h3,{id:"translateid",children:"TranslateID"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod TranslateID(id As %String) As %String [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Translate the input ID string and return four values separated by commas."}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"pid : The process ID, 0 - all processes."}),"\n",(0,n.jsx)(t.li,{children:"clin: The remote client system number, -1 - all remote systems."}),"\n",(0,n.jsx)(t.li,{children:"ntype: The network protocol from remote client, 100 - all network protocols."}),"\n",(0,n.jsx)(t.li,{children:"svrn: The remote server system number, -1 - all remote systems."}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"detailexecute",children:"DetailExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod DetailExecute(ByRef qHandle As %Binary, id As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Get detail columns for lock table entries."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"DelKey"}),": A key to be used for SYS.Lock.DeleteOneLock to remove the lock (row)."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Owner"}),": Owner of the lock item. For local system owner it is Process ID (in decimal form). For remote client owner, it is the client system name. For share lock there can be more than one owner, and they are separated by ','."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Mode"}),": Lock mode of the lock item. It can be:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"'X' - exclusive lock."}),"\n",(0,n.jsx)(t.li,{children:"'S' - share lock."}),"\n",(0,n.jsxs)(t.li,{children:["'ZAX' - ZALLOCATE type lock.\n",(0,n.jsx)(t.strong,{children:"Flags"}),": Attribute of the lock item. It can be:"]}),"\n",(0,n.jsx)(t.li,{children:"'*' - to remote server."}),"\n",(0,n.jsx)(t.li,{children:"'D' - Lock is in Delock Pending state, waiting for server to release the lock."}),"\n",(0,n.jsx)(t.li,{children:"'P' - Lock is in Lock Pending state, waiting for server to grant the lock."}),"\n",(0,n.jsx)(t.li,{children:"'L' - Lock is lost due to network reset."}),"\n",(0,n.jsxs)(t.li,{children:["'Z' - Lock granted by ZA command. The ZA and ZD commands are obsolete, though the network daemons still grant the locks for remote client with the ZA lock mode internally.\n",(0,n.jsx)(t.strong,{children:"Counts"}),": Lock count of the lock item. The format depends on the lock mode:"]}),"\n",(0,n.jsx)(t.li,{children:"For 'X' mode - it is the lock count for the exclusive lock. If the owner also locked it with share mode, the share lock count will be separated with '|' from exclusive lock count, for example, \"2|1\" means 2 'X' count and 1 'S' count."}),"\n",(0,n.jsx)(t.li,{children:"For 'S' mode - it is the lock count for the share lock. There can be more than one owner for share lock, so the lock count is separated with ',' between each owner. For example, \"1,3,4\" means first owner has lock count 1, second owner has lock count 3 and third owner has lock count 4."}),"\n",(0,n.jsxs)(t.li,{children:["For 'ZAX' mode - the Counts will be null string if the owner does not own it with share mode. Otherwise the share lock count will be separated by '|'. For example, \"|3\" the owner locked it with 'ZAX' mode and 'S' mode with lock count 3.\n",(0,n.jsx)(t.strong,{children:"Sfn"}),": System File Number of the lock item. It tells in which database this lock is located, in internal system file number form."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"LockString"}),": Lock reference string of the lock item. This does not include the database name."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"FullReference"}),": Full lock reference string of the lock item. This includes the database and system name (if remote lock)."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"WaiterPID"}),": Waiter of the lock item. This has the same format as ",(0,n.jsx)(t.strong,{children:"Owner"}),". There can be more than one waiter of the lock and they are separated by ','."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"WaiterMode"}),": Lock mode the waiter is waiting for. It can be:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"'X' - Waiting for exclusive lock mode."}),"\n",(0,n.jsx)(t.li,{children:"'S' - Waiting for share lock mode."}),"\n",(0,n.jsxs)(t.li,{children:["'Z' - Waiting for ZALLOCATE lock mode.\n",(0,n.jsx)(t.strong,{children:"WaiterType"}),": Which node the waiter is waiting for. It can be:"]}),"\n",(0,n.jsx)(t.li,{children:"'E' - Exact node. It is waiting for the same lock node."}),"\n",(0,n.jsx)(t.li,{children:"'P' - Parent node. It is waiting for a parent node."}),"\n",(0,n.jsxs)(t.li,{children:["'C' - Child node. It is waiting for a child node.\n",(0,n.jsx)(t.strong,{children:"RemoteOwner"}),": A boolean value, TRUE means one of the lock owner(s) is remote."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"EscalateInfo"}),": A series of counters if the lock node involved lock escalation. A null string if no lock escalation is involved. Each owner has its own set of counters separated by ','. The counters are for internal use."]}),"\n",(0,n.jsx)(t.h3,{id:"detailfetch",children:"DetailFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DetailFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = DetailExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"detailclose",children:"DetailClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DetailClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = DetailExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ListExecute(ByRef qHandle As %Binary, id As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Get short information of each lock entry.",(0,n.jsx)(t.br,{}),"\nSee the Detail query description for each column."]}),"\n",(0,n.jsx)(t.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"listclose",children:"ListClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"weblistexecute",children:"WebListExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod WebListExecute(ByRef qHandle As %Binary, id As %String = "", NoLineRoutine As %Boolean = 0) As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Query for Web Lock display utility to use."}),"\n",(0,n.jsx)(t.p,{children:"This query returns a row for each lock owner and lock waiter. So if one lock is owned by more than one process, it will return one row for each owner. It also returns one row for each waiter for one lock item."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"ProcessClient"}),": Owner's or waiter's Process ID. It can be a client system name if it is owned by a remote client. There is only one owner or waiter for each row."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"ModeCount"}),": Lock mode and count of the lock item. If the lock count is 1 the count will not be displayed, otherwise a '/",(0,n.jsx)(t.em,{children:"count"}),"' will follow. A '->Delock' will be appended if the lock is in 'Deferred Delock' state (delocked within a transaction). The column can be:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"'Exclusive' - Exclusive lock mode."}),"\n",(0,n.jsx)(t.li,{children:"'Shared' - Share lock mode."}),"\n",(0,n.jsx)(t.li,{children:"'LockZA' - ZALLOCATE lock mode."}),"\n",(0,n.jsx)(t.li,{children:"'WaitExclusive' - Waiting for exclusive lock mode."}),"\n",(0,n.jsx)(t.li,{children:"'WaitShared' - Waiting for share lock mode."}),"\n",(0,n.jsxs)(t.li,{children:["'WaitLockZA' - Waiting for ZALLOCATE lock mode.",(0,n.jsx)(t.br,{}),"\nThe Wait modes are followed by 'Exact', 'Parent', or 'Child'"]}),"\n",(0,n.jsx)(t.li,{children:"'LockPending' - Exclusive lock Pending, waiting for server to grant the exclusive lock."}),"\n",(0,n.jsx)(t.li,{children:"'SharePending' - Share lock Pending, waiting for server to grant the share lock."}),"\n",(0,n.jsx)(t.li,{children:"'DelockPending' - Delock Pending, waiting for server to release the lock."}),"\n",(0,n.jsxs)(t.li,{children:["'Lost' - Lock lost due to network reset.\n",(0,n.jsx)(t.strong,{children:"Reference"}),": Lock reference string of the lock item. This does not include the database name."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Directory"}),": The database where the lock item is located."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"System"}),": The system name where the lock is located. If it is the local system the column will be a null string."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Removable"}),": Flag indicates whether this lock (row) can be removed or not. Value 1 -> Removable, 0 -> Not removable, 2 -> Removable, but needs special warning because it is in 'DelockPending' state."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"DeleteID"}),": Delete key that can be used to call SYS.Lock.DeleteOneLock to delete the lock of the specific owner (that is the row)."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"CanBeExamined"}),": Flag to tell whether the owner job can be examined or not."]}),"\n",(0,n.jsx)(t.h3,{id:"weblistfetch",children:"WebListFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod WebListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = WebListExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"weblistclose",children:"WebListClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod WebListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = WebListExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"weblistfilterexecute",children:"WebListFilterExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod WebListFilterExecute(ByRef qHandle As %Binary, Filter As %String = "", NoLineRoutine As %Boolean = 0) As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.h3,{id:"weblistfilterfetch",children:"WebListFilterFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod WebListFilterFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = WebListExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"weblistfilterclose",children:"WebListFilterClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod WebListFilterClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = WebListExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"conflictsexecute",children:"ConflictsExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ConflictsExecute(ByRef qHandle As %Binary, LockRef As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Gets all lock entries that may conflict with the lock reference specified in LockRef if an exclusive lock on that reference were to be attempted."}),"\n",(0,n.jsx)(t.p,{children:"LockRef is a string that contains the quoted lock reference (quoted by the $NAME function if desired), and is taken as a reference in the current namespace. Extended reference may also be used to specify a different namespace or system^directory."}),"\n",(0,n.jsx)(t.p,{children:"The output columns are similar to the output column in Detail query except 'EscalateInfo' is not included. See the Detail query description for each column."}),"\n",(0,n.jsx)(t.p,{children:"Notes:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"If the lock reference is subject to subscript level mapping, then the result set may include results from multiple databases due to the implicit duplication of locks to multiple subscript level mapping targets."}),"\n",(0,n.jsx)(t.li,{children:"The result set will include locks owned by the calling process itself."}),"\n",(0,n.jsx)(t.li,{children:'The result set can include locks that are both lower or higher than LockRef in the lock tree (ancestors and descendants), as well as an exact match.\nThe result set can also include locks that are not direct descendants of LockRef if there are waiters waiting for a parent. For example, if LockRef = $NAME(^X("abc",1)) and there is a waiter waiting for ^X("abc") due to a lock held on ^X("abc",2), then ^X("abc",2) will be included in the result set with a waiter of type "P". As with the other queries, ^X("abc") itself is not returned in the results because it has not yet been acquired.'}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"conflictsfetch",children:"ConflictsFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ConflictsFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ConflictsExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"conflictsclose",children:"ConflictsClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ConflictsClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ConflictsExecute ]\n"})})]})}function a(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(r,{...e})}):r(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>c,x:()=>i});var n=s(96540);const l={},o=n.createContext(l);function c(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);