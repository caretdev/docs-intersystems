"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[36976],{71497:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>n,default:()=>c,frontMatter:()=>a,toc:()=>o});var s=r(74848),i=r(28453);const a={pagination_prev:null,pagination_next:null},n="%DeepSee.REST.v2",o=[{value:"XDatas",id:"xdatas",level:2},{value:"UrlMap",id:"urlmap",level:3},{value:"Methods",id:"methods",level:2},{value:"%ValidateRequest",id:"validaterequest",level:3}];function l(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"deepseerestv2",children:"%DeepSee.REST.v2"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %DeepSee.REST.v2 Extends %DeepSee.REST.REST\n"})}),"\n",(0,s.jsx)(t.p,{children:"This class provides validation and dispatch for version 2 of the DeepSee REST services For /Command calls, required arguments are expected in the request body. Every request is treated as a POST request (including those that only fetch values) This is to prevent running into the error where the number of characters in the URL exceeds the limit. For /Data and /Info calls, required arguments are expected in the URL. The exceptions to this rule are /Data/MDXExecute and /Data/PivotExecute, which require an argument POSTed to the the body of the request. For some services, the client may POST additional parameters in the body of the request. The description for each service outlines the parameters accepted for that particular service. In all services, unknown parameters that are included in the request body are ignored."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Example:"})," Execute an MDX query using an HTTP POST request, sent to a web application with Dispatch class ",(0,s.jsx)(t.strong,{children:"%DeepSee.REST.v2"}),". ",(0,s.jsx)(t.code,{children:" var request = {}; var mdx = 'SELECT ' + ' NON EMPTY [Product].[P1].[Product Category].Members ON 0,' + ' NON EMPTY [Outlet].[H1].[Region].Members ON 1 ' + 'FROM [HoleFoods]' request.method = 'POST'; request.user = 'user'; request.passwd = 'pass'; request.acceptType = 'JSON'; request.contentType = 'JSON'; request.body = '{\"MDX\":\"' + mdx + '\"}'; request.callback = custom.queryCallBack request.async = true; request.url = 'http://host/port/restApplication/v2/Data/MDX'; // run the query var xhr = new XMLHttpRequest(); xhr.open(request.method,request.url,request.async); // kick off the request xhr.send(contents);"})," Requests may be sent to the following services:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"/Data/TestConnection or /Info/TestConnection - get test info to confirm connection to the server."}),"\n",(0,s.jsxs)(t.li,{children:['/Data/MDXExecute - get result in JSON format for MDX query. POST the query in the required property "MDX". The server will assume the client wishes to wait for complete results before sending a response. The default timeout for this wait is 2 seconds less than the session\'s timeout setting. This can be set using the TIMEOUT property in the request.',(0,s.jsx)(t.br,{}),'\nThe client can optionally instruct the server to send partial results by POSTing "WAIT":0. ',(0,s.jsx)(t.code,{children:" request.body = '{ \"MDX\": \"SELECT FROM PATIENTS\",' + ' \"FILTERS\": [' + ' \"[HomeD].[H1].[ZIP].&[32006]\",' + ' \"%OR({[PatGrpD].[H1].[Patient Group].&[Group A],[PatGrpD].[H1].[Patient Group].&[Group B]})\"' + ' ]' + ' \"WAIT\":1' + ' \"TIMEOUT\":30' + '};'"})]}),"\n",(0,s.jsxs)(t.li,{children:['/Data/PivotExecute - get result in JSON format for a stored pivot table. POST the full name (Folder/SubFolder/Name) of the table in the required property "PIVOT". Filters may be optionally be POSTed in the FILTERS property of the request. These filters take the identical form as described in /Data/MDXExecute. This service also supports the WAIT and TIMEOUT options. A pivot table that supports pivot variables may have those variables set using the VARIABLES array in the request. ',(0,s.jsx)(t.code,{children:" request.body = '{ \"PIVOT\":\"Pivot Variables/Commission Calculator\",' + ' \"VARIABLES\": [' + ' \"name\":\"commissionpercentage\",' + ' \"value\":15' + ' ]' + '};'"})]}),"\n",(0,s.jsxs)(t.li,{children:['/Data/KPIExecute - execute a KPI. POST the logical name of KPI in "KPI". Filters may be added as an array of objects in "FILTER". Each of the filter objects must provide a "name" and a "value" property. ',(0,s.jsx)(t.code,{children:' request.body = \'{ "KPI": "DemoMDX",\' + \' "FILTERS": [ {\' + \' "name" : "[aged].[h1].[age group]",\' + \' "value" : "&[0 to 29]" }\' + \' ]\' + \'};\''})]}),"\n",(0,s.jsxs)(t.li,{children:['/Data/MDXDrillthrough - execute a detail listing on the cube\'s source class. POST the query in "MDX". DRILLTHROUGH requests will support a list of RETURN fields in the request, or a choice of LISTING. Attempting to post both will result in an error. ',(0,s.jsx)(t.code,{children:' request.body = \'{ "MDX": "DRILLTHROUGH SELECT FROM [PATIENTS]",\' + \' "LISTING":"Doctor details"\' + \'};\''})," ",(0,s.jsx)(t.code,{children:' request.body = \'{ "MDX": "DRILLTHROUGH SELECT FROM [PATIENTS]",\' + \' "RETURN":"Age,BirthDate"\' + \'};\''})]}),"\n",(0,s.jsx)(t.li,{children:"/Data/MDXCancelQuery/:queryID - if a previous query has not completed, it can be canceled."}),"\n",(0,s.jsx)(t.li,{children:"/Data/MDXUpdateResults/:queryID - given a previous query response with ResultsComplete = 0, the client can request an update to the results using the cubeKey and queryKey."}),"\n",(0,s.jsx)(t.li,{children:"/Info/Filters/:dataSource - to get a list of filters available for a particular cube."}),"\n",(0,s.jsxs)(t.li,{children:["/Info/FilterMembers/:dataSource/:filterSpec/ - get a list of values for a particular filter. Supported dataSources are cubes and KPIs. Values can be limited by POSTing values of other filters or a search key in the request.",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.code,{children:"request.body = '{ \"RELATED\": [' + ' {' + ' \"spec\": \"[DateOfSale].[Actual].[YearSold]\",' + ' \"value\": \"&[2013]:&[2016]\"' + ' }' + ' ],' + ' \"SEARCHKEY\":\"Jan\"' + '}';"})]}),"\n",(0,s.jsx)(t.li,{children:"/Info/Cubes/ - get a list of cubes available in the namespace."}),"\n",(0,s.jsxs)(t.li,{children:["/Info/Pivots/ - get a list of pivots available. The listing can be limited to pivots based on a particular cube by POST to the BASECUBE property in the request. ",(0,s.jsx)(t.code,{children:'request.body = \'{"BASECUBE":"HOLEFOODS"}\''})]}),"\n",(0,s.jsx)(t.li,{children:"/Info/Dashboards/ - get a list of available dashboards."}),"\n",(0,s.jsx)(t.li,{children:"/Info/Listings/:cube - get a list of available listings for a particular cube."}),"\n",(0,s.jsx)(t.li,{children:"/Info/Measures/:cube - get a list of measures available for a particular cube."}),"\n",(0,s.jsx)(t.li,{children:"/Info/ListingFields/:cube - get the list of listing fields defined for a particular cube, for user-defined custom listings."}),"\n",(0,s.jsx)(t.li,{children:"/Info/NamedFilters/:cube - get a list of named filters defined for a cube."}),"\n",(0,s.jsx)(t.li,{children:"/Info/PivotVariables/:cube - get a list of pivot variables defined a cube."}),"\n",(0,s.jsx)(t.li,{children:"/Info/PivotVariableDetails/:cube/:variable - get the details for a single pivot variable."}),"\n",(0,s.jsx)(t.li,{children:"/Info/QualityMeasures/:cube - get a list of quality measures available for the cube."}),"\n",(0,s.jsx)(t.li,{children:"/Command/BuildCube - A wrapper for %DeepSee.Utils.%BuildCube which records cube event information when building the cube."}),"\n",(0,s.jsx)(t.li,{children:"/Command/RepairBuild - This method provides a means of doing an unscheduled repair build of a registered cube."}),"\n",(0,s.jsx)(t.li,{children:"/Command/BuildAllRegisteredGroups - This is a utility method which executes a complete build of all currently registered cubes in the current cube registry."}),"\n",(0,s.jsx)(t.li,{children:"/Command/BuildOneRegisteredGroup - This is a utility method which executes a complete build of one registered cube group in the current cube registry."}),"\n",(0,s.jsx)(t.li,{children:"/Command/SynchronizeCube - A wrapper for %DeepSee.Utils.%SynchronizeCube which records cube event information when building the cube."}),"\n",(0,s.jsx)(t.li,{children:"/Command/GetLastUpdate - Retrieves the timestamp of the the last registered data update for the cube. Updates performed outside of the Cube Manager will not be recognized in this check."}),"\n",(0,s.jsx)(t.li,{children:"/Command/GetActiveRegistry - Retrieve the name of the Cube Registry currently marked Active"}),"\n",(0,s.jsx)(t.li,{children:"/Command/SetActiveRegistry - Change which Cube Registry is currently active. The Active Registry is the only one that is visible to the updater tasks."}),"\n",(0,s.jsx)(t.li,{children:'/Command/BuildRegistryMap - Retrieve the map that describes the current state of the Cube Registry and all other unregistered cubes on the system. For the lookup variable in the output JSON, for each array in the "cubes" object, the first value corresponds to that the GroupIdx value and the second the CubeIdx value for that cube. The Cube can then be retrieved as follows: Set Cube = Map.Groups.GetAt(GroupIdx).Cubes.GetAt(CubeIdx) Currently GroupIdx and CubeIdx are 1-indexed. Subtract 1 from GroupIdx asnd CubeIdx to make them work for a 0-indexed system'}),"\n",(0,s.jsx)(t.li,{children:"/Command/WriteToRegistry - Walk through a CubeManager.RegistryMap object and register the cubes."}),"\n",(0,s.jsx)(t.li,{children:"/Command/ScheduleUpdaterTasks - Schedule the build and synch tasks according to the settings in a CubeManager.RegistryMap object."}),"\n",(0,s.jsx)(t.li,{children:"/Command/GetSynchScheduleParameters - Convenience method -- takes the number of seconds between synchs and sets the parameters for the call to ##class(%DeepSee.CubeManager.Task.Synch).Schedule"}),"\n",(0,s.jsx)(t.li,{children:"/Command/GetCubeSize - Given the logical name, pCubeName of a DeepSee cube, return the number of rows within its fact table."}),"\n",(0,s.jsx)(t.li,{children:"/Command/IsValidGroup - Boolean test which returns 1 if the group supplied as the argument is no less than the union of the natural groups of each of its members."}),"\n",(0,s.jsx)(t.li,{children:"/Command/IsValidCubeSchedule - Validation for the current cube settings."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"xdatas",children:"XDatas"}),"\n",(0,s.jsx)(t.h3,{id:"urlmap",children:"UrlMap"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"XData UrlMap\n"})}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"validaterequest",children:"%ValidateRequest"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %ValidateRequest(pUrl As %String, pMethod As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Verfies required Converts request body"})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>n,x:()=>o});var s=r(96540);const i={},a=s.createContext(i);function n(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);