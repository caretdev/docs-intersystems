"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[57285],{74267:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>a,default:()=>c,frontMatter:()=>r,toc:()=>i});var l=t(74848),n=t(28453);const r={pagination_prev:null,pagination_next:null},a="%ZEN.Component.listControl",i=[{value:"Properties",id:"properties",level:2},{value:"valueList",id:"valuelist",level:3},{value:"displayList",id:"displaylist",level:3},{value:"queryClass",id:"queryclass",level:3},{value:"queryName",id:"queryname",level:3},{value:"choiceColumn",id:"choicecolumn",level:3},{value:"valueColumn",id:"valuecolumn",level:3},{value:"sql",id:"sql",level:3},{value:"parameters",id:"parameters",level:3},{value:"maxRows",id:"maxrows",level:3},{value:"Methods",id:"methods",level:2},{value:"%BuildValueLists",id:"buildvaluelists",level:3},{value:"setProperty",id:"setproperty",level:3}];function o(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.header,{children:(0,l.jsx)(s.h1,{id:"zencomponentlistcontrol",children:"%ZEN.Component.listControl"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Class %ZEN.Component.listControl Extends control [ Abstract, Deprecated, System = 3 ]\n"})}),"\n",(0,l.jsx)(s.p,{children:"Base class for controls that display a list of values."}),"\n",(0,l.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,l.jsx)(s.h3,{id:"valuelist",children:"valueList"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Property valueList As %ZEN.Datatype.csv;\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Defines set of values for choices for this select control as a csv-list.",(0,l.jsx)(s.br,{}),'\nIf your data include commas, escape them with "\\,".']}),"\n",(0,l.jsx)(s.h3,{id:"displaylist",children:"displayList"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Property displayList As %ZEN.Datatype.csv(ZENLOCALIZE = 1);\n"})}),"\n",(0,l.jsxs)(s.p,{children:["(optional) Defines set of displayed choices for this select control as a csv-list.",(0,l.jsx)(s.br,{}),"\nThe entire list is a localized value.",(0,l.jsx)(s.br,{}),'\nIf your data include commas, escape them with "\\,".']}),"\n",(0,l.jsx)(s.h3,{id:"queryclass",children:"queryClass"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Property queryClass As %ZEN.Datatype.className;\n"})}),"\n",(0,l.jsx)(s.p,{children:"(optional) Name of the class containing the query that will provide contents of this table."}),"\n",(0,l.jsx)(s.h3,{id:"queryname",children:"queryName"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:'Property queryName As %ZEN.Datatype.classMember(MEMBERTYPE = "QUERY");\n'})}),"\n",(0,l.jsx)(s.p,{children:"(optional) Name of the class containing the query that will provide contents of this table."}),"\n",(0,l.jsx)(s.h3,{id:"choicecolumn",children:"choiceColumn"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Property choiceColumn As %ZEN.Datatype.integer(MINVAL = 1, ZENSETTING = 0) [ InitialExpression = 2 ];\n"})}),"\n",(0,l.jsxs)(s.p,{children:["(optional) If there are multiple data columns returned by the class query this is the column number (1-based) of the column that will provide the display value for this control.",(0,l.jsx)(s.br,{}),"\nIf this value is greater than the number of columns in the query or unspecified then the second column will be used.",(0,l.jsx)(s.br,{}),"\nThis property is only used if queryClass and queryName are specified."]}),"\n",(0,l.jsx)(s.h3,{id:"valuecolumn",children:"valueColumn"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Property valueColumn As %ZEN.Datatype.integer(MINVAL = 1, ZENSETTING = 0) [ InitialExpression = 1 ];\n"})}),"\n",(0,l.jsxs)(s.p,{children:["(optional) If there are multiple data columns returned by the class query this is the column number (1-based) of the column that will provide the logical value for this control.",(0,l.jsx)(s.br,{}),"\nIf this value is greater than the number of columns in the query or unspecified then the first column will be used.",(0,l.jsx)(s.br,{}),"\nThis property is only used if queryClass and queryName are specified."]}),"\n",(0,l.jsx)(s.h3,{id:"sql",children:"sql"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Property sql As %ZEN.Datatype.sql;\n"})}),"\n",(0,l.jsxs)(s.p,{children:["(optional) SQL SELECT statement that, if present, provides values for the select list. The first column of the results provides the value, and the second column, if present, provides the display value.",(0,l.jsx)(s.br,{}),"\nIf defined, this takes precedence over queryClass and queryName."]}),"\n",(0,l.jsx)(s.h3,{id:"parameters",children:"parameters"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:'Property parameters As list Of %ZEN.Auxiliary.parameter(XMLNAME = "parameter", XMLPROJECTION = "ELEMENT");\n'})}),"\n",(0,l.jsxs)(s.p,{children:["User-defined list of query parameters.",(0,l.jsx)(s.br,{}),"\nIf this control uses a query, these values are used to provide values for any run-time query parameters."]}),"\n",(0,l.jsx)(s.h3,{id:"maxrows",children:"maxRows"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Property maxRows As %ZEN.Datatype.integer [ InitialExpression = 500 ];\n"})}),"\n",(0,l.jsx)(s.p,{children:"If a query is used to provide data, this is the maximum number of items that will be displayed."}),"\n",(0,l.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(s.h3,{id:"buildvaluelists",children:"%BuildValueLists"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Method %BuildValueLists(Output pValueList As %List, Output pDisplayList As %List) As %Status\n"})}),"\n",(0,l.jsx)(s.p,{children:"Called at draw-time to get the ($List) of values and display values."}),"\n",(0,l.jsx)(s.h3,{id:"setproperty",children:"setProperty"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClientMethod setProperty(property, value, value2) [ Language = javascript ]\n"})}),"\n",(0,l.jsx)(s.p,{children:"Set the value of a named property."})]})}function c(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>i});var l=t(96540);const n={},r=l.createContext(n);function a(e){const s=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),l.createElement(r.Provider,{value:s},e.children)}}}]);