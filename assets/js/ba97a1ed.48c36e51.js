"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[61357],{56063:(e,n,s)=>{s.r(n),s.d(n,{contentTitle:()=>r,default:()=>d,frontMatter:()=>a,toc:()=>l});var t=s(74848),i=s(28453);const a={pagination_prev:null,pagination_next:null},r="%iKnow.DeepSee.CubeUtils",l=[{value:"Parameters",id:"parameters",level:2},{value:"CHECKSUMFIELDNAME",id:"checksumfieldname",level:3},{value:"Methods",id:"methods",level:2},{value:"GetDomainId",id:"getdomainid",level:3},{value:"GetDeepSeeDomainName",id:"getdeepseedomainname",level:3},{value:"CreateDomain",id:"createdomain",level:3},{value:"%OnKillFacts",id:"onkillfacts",level:3},{value:"%ProcessIKnowFact",id:"processiknowfact",level:3},{value:"%StartIKnowBatch",id:"startiknowbatch",level:3},{value:"%SyncAdditionalIndices",id:"syncadditionalindices",level:3},{value:"%BuildAdditionalIndices",id:"buildadditionalindices",level:3},{value:"%BuildAdditionalIndexDIJob",id:"buildadditionalindexdijob",level:3},{value:"%EndIKnowBatch",id:"endiknowbatch",level:3},{value:"CreateEOCube",id:"createeocube",level:3},{value:"CreateMRCube",id:"createmrcube",level:3},{value:"UpdateDictionary",id:"updatedictionary",level:3},{value:"LoadTermListAsDictionary",id:"loadtermlistasdictionary",level:3},{value:"LoadTermListAsSkipList",id:"loadtermlistasskiplist",level:3},{value:"LoadTermListAsBlackList",id:"loadtermlistasblacklist",level:3},{value:"GetIKnowMeasures",id:"getiknowmeasures",level:3},{value:"GetSummary",id:"getsummary",level:3},{value:"GetFactId",id:"getfactid",level:3},{value:"GetSourceObjectId",id:"getsourceobjectid",level:3},{value:"GetMeasureInfo",id:"getmeasureinfo",level:3},{value:"GetMeasureInfoInternal",id:"getmeasureinfointernal",level:3},{value:"TranslateIKnowBitstring",id:"translateiknowbitstring",level:3},{value:"RenameDomain",id:"renamedomain",level:3},{value:"DropDomain",id:"dropdomain",level:3},{value:"DropDictionary",id:"dropdictionary",level:3},{value:"GetDictionaryIds",id:"getdictionaryids",level:3},{value:"UpdateMatching",id:"updatematching",level:3},{value:"UpdateMatchingInternal",id:"updatematchinginternal",level:3}];function o(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"iknowdeepseecubeutils",children:"%iKnow.DeepSee.CubeUtils"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Class %iKnow.DeepSee.CubeUtils Extends %RegisteredObject [ Deprecated, System = 4 ]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The InterSystems IRIS NLP iKnow technology is now deprecated. Please see the ",(0,t.jsx)(n.a,{href:"https://docs.intersystems.com/irislatest/csp/docbook/DocBook.UI.Page.cls?KEY=GIKNOW",children:"product documentation"})," for more detail."]}),"\n",(0,t.jsx)(n.p,{children:"This class offers a number of utility options for interacting with DeepSee-managed domains."}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(n.h3,{id:"checksumfieldname",children:"CHECKSUMFIELDNAME"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Parameter CHECKSUMFIELDNAME [ Internal ] = "CheckSum";\n'})}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"getdomainid",children:"GetDomainId"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetDomainId(pCube As %String, pMeasure As %String, Output pSC As %Status = {$$$OK}) As %Integer [ SqlProc ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns the domain ID for the supplied combination of cube name (pCube) and iKnow measure name (pMeasure)."}),"\n",(0,t.jsx)(n.h3,{id:"getdeepseedomainname",children:"GetDeepSeeDomainName"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetDeepSeeDomainName(pCube As %String, pMeasure As %String) As %String [ Internal ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns the default generated domain name for a DeepSee-managed domain"}),"\n",(0,t.jsx)(n.h3,{id:"createdomain",children:"CreateDomain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod CreateDomain(pCube As %String, pMeasure As %String, pParams As %String, pDictionaries As %String, ByRef pDomainName As %String = "", Output pSC As %Status = {$$$OK}) As %Integer [ Internal ]\n'})}),"\n",(0,t.jsx)(n.p,{children:"This method will create a DeepSee-managed iKnow domain for storing the indexation results of an iKnow measure (pMeasure) in a DeepSee cube (pCube). Apart from the default DeepSee-driven parameters, pParams can contain a semicolon- delimited list of additional parameters supplied through the cube definition, but these should be parameters a user is allowed to configure through the SetParameter method in the %iKnow.Domain class."}),"\n",(0,t.jsx)(n.p,{children:"If a domain for this iKnow measure already exists, both the default DeepSee parameters and the user-defined parameters supplied through pParams will be applied, regardless of any existing settings that have been made outside of DeepSee."}),"\n",(0,t.jsx)(n.p,{children:"Warning: this method should never be called by custom code!"}),"\n",(0,t.jsx)(n.h3,{id:"onkillfacts",children:"%OnKillFacts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod %OnKillFacts(pCube As %String, ByRef pMsrList As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Notification that our cube has been killed."}),"\n",(0,t.jsx)(n.p,{children:"NOTE: This method is called from generated cube code and should never be invoked by custom code."}),"\n",(0,t.jsx)(n.h3,{id:"processiknowfact",children:"%ProcessIKnowFact"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod %ProcessIKnowFact(pCube As %String, pBatchMode As %Boolean, pFlag As %String, pFactId As %String, pMeasure As %String, pValue As %String = "", pSourceType As %String = "string") As %Status [ Internal ]\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This method is called when a fact within a DeepSee cube is inserted, updated, or deleted.",(0,t.jsx)(n.br,{}),"\npCube is the name of the DeepSee cube.",(0,t.jsx)(n.br,{}),"\npBatchMode is true for batch mode.",(0,t.jsx)(n.br,{}),'\npFlag is "I" for insert, "U" for update, "D" for delete, and "K" when the entire cube is killed.',(0,t.jsx)(n.br,{}),"\npFactId is the ID of the current record in the fact table.",(0,t.jsx)(n.br,{}),'\npSourceType is "string","file", or "stream".',(0,t.jsx)(n.br,{}),"\npProp is the name of the property.",(0,t.jsx)(n.br,{}),"\npValue is the value of the property."]}),"\n",(0,t.jsx)(n.p,{children:"NOTE: This method is called from generated cube code and should never be invoked by custom code."}),"\n",(0,t.jsx)(n.h3,{id:"startiknowbatch",children:"%StartIKnowBatch"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod %StartIKnowBatch(pCube As %String, ByRef pMsrList As %String, pVerbose As %Boolean = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(n.p,{children:'Notification at the start of a "batch of updates".'}),"\n",(0,t.jsx)(n.p,{children:"NOTE: This method is called from generated cube code and should never be invoked by custom code."}),"\n",(0,t.jsx)(n.h3,{id:"syncadditionalindices",children:"%SyncAdditionalIndices"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod %SyncAdditionalIndices(pCube As %String, pMeasure As %String, pDomainId As %Integer, pDomainType As %String, pDictionaries As %String, pFactId As %Integer, pSrcId As %Integer, pFlag As %String) As %Status [ Internal, Private ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Per-record version of %BuildAdditionalIndices()"}),"\n",(0,t.jsx)(n.h3,{id:"buildadditionalindices",children:"%BuildAdditionalIndices"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod %BuildAdditionalIndices(pCube As %String, pMeasure As %String, pDomainId As %Integer, pDomainType As %String, pDictionaries As %String = "") As %Status [ Internal, Private ]\n'})}),"\n",(0,t.jsx)(n.p,{children:'Builds the following additional indices - $$$DeepSeeIndexGLVN(pCube, "%ikDI", pMeasure, [tDictItemId], [factIdOffset]) = $bitstring([factId])'}),"\n",(0,t.jsx)(n.h3,{id:"buildadditionalindexdijob",children:"%BuildAdditionalIndexDIJob"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod %BuildAdditionalIndexDIJob(pCube, pMeasure, pDomainId, pDomainType, pDictIdList, pSrcIdOffset) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"endiknowbatch",children:"%EndIKnowBatch"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod %EndIKnowBatch(pCube As %String, ByRef pMsrList As %String, pVerbose As %Boolean = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(n.p,{children:'This method is called after a large number of facts has been processed in batch mode, to execute any queued iKnow processing in a single iKnow batch Notification at the end of a "batch of updates".'}),"\n",(0,t.jsx)(n.p,{children:"NOTE: This method is called from generated cube code and should never be invoked by custom code."}),"\n",(0,t.jsx)(n.h3,{id:"createeocube",children:"CreateEOCube"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod CreateEOCube(pCube As %String, pIKnowMeasure As %String, pBuild As %Boolean = 1) As %Status\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This method creates a new DeepSee Cube definition representing the entities occurring in the textual contents of an iKnow measure pIKnowMeasure in cube pCube. The generated cube will have a set of meaningful dimensions for this ",(0,t.jsx)(n.em,{children:"entity occurrence"}),' level as well as a relationship to pCube, so all of its dimensions are also available for the new cube. The name of this cube will be "pCube > pIKnowMeasure > ',(0,t.jsx)(n.em,{children:"Entity Occurrences"}),'" and can be used or modified just like any other DeepSee cube after creation.']}),"\n",(0,t.jsx)(n.p,{children:"Setting pBuild to 1 will automatically build the cube."}),"\n",(0,t.jsx)(n.p,{children:"NOTE: some of the functionality exposed by this cube can be achieved by using the iKnow plugin exposing numerical query results %DeepSee.PlugIn.iKnow as a calculated measure, without the need to create any additional cubes."}),"\n",(0,t.jsx)(n.h3,{id:"createmrcube",children:"CreateMRCube"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod CreateMRCube(pCube As %String, pIKnowMeasure As %String, pBuild As %Boolean = 1) As %Status\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This method creates a new DeepSee Cube definition representing the matching results occurring in the textual contents of an iKnow measure pIKnowMeasure in cube pCube. The generated cube will have a set of meaningful dimensions for this ",(0,t.jsx)(n.em,{children:"dictionary match"}),' level as well as a relationship to pCube, so all of its dimensions are also available for the new cube. The name of this cube will be "pCube > pIKnowMeasure > ',(0,t.jsx)(n.em,{children:"Matching Results"}),'" and can be used or modified just like any other DeepSee cube after creation.']}),"\n",(0,t.jsx)(n.p,{children:"Setting pBuild to 1 will automatically build the cube."}),"\n",(0,t.jsx)(n.p,{children:"NOTE: most of the functionality exposed by this cube can be achieved by using the iKnow plugin for Dictionaries %DeepSee.PlugIn.iKnowDictionary as a calculated measure, without the need to create any additional cubes."}),"\n",(0,t.jsx)(n.h3,{id:"updatedictionary",children:"UpdateDictionary"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod UpdateDictionary(pTermList As %String, pCube As %String = "", pMeasure As %String = "", pClearFirst As %Boolean = 0) As %Status\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This method will update matching results for the Term List identified by pTermList to reflect the changes made to the Term List entries. If pCube is left blank, this method will be invoked for all cubes in this namespace. If pMeasure is left blank, it will be called for all ",(0,t.jsx)(n.em,{children:"iKnow measures"})," in pCube."]}),"\n",(0,t.jsx)(n.p,{children:"Using pClearFirst, the user can specify whether or not the existing dictionary should first be dropped before reloading it from the Term List. Leave pClearFirst at 0 if you only appended to the Term List and use 1 if any existing terms were changed or removed."}),"\n",(0,t.jsx)(n.h3,{id:"loadtermlistasdictionary",children:"LoadTermListAsDictionary"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod LoadTermListAsDictionary(pCube As %String, pMeasure As %String, pTermList As %String, pMatch As %Integer = 1, pClear As %Integer = 1) As %Status\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Loads the elements of a TermList as Dictionary Terms into a given iKnow measures domain, taking the key as the Term string and value as the items name. The Terms will all be added to a single dictionary named after this TermList.",(0,t.jsx)(n.br,{}),"\nThe following fields will be interpreted along the way, if present:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:['"URI": the unique identifier for the Item level the value field refers to. If not present, a URI of the form :pTermList:',(0,t.jsx)(n.em,{children:"value"})," will be created."]}),"\n",(0,t.jsx)(n.li,{children:'"language": the two-letter language code to use for this term. Defaults to English ("en") if not present.'}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"If pMatch is 1, the newly created dictionary will be matched against the contents of the domain. If set to 2, all existing dictionaries will be matched and if set to 0, no matching will occur as part of this method invocation."}),"\n",(0,t.jsx)(n.p,{children:"If pClear is 1, any existing dictionary named pTermList will be deleted prior to loading this Term List. If set to 0, none will be dropped. The option to clear all dictionaries using the value 2 is discontinued as from 2013.2."}),"\n",(0,t.jsx)(n.h3,{id:"loadtermlistasskiplist",children:"LoadTermListAsSkipList"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod LoadTermListAsSkipList(pCube As %String, pMeasure As %String, pTermList As %String = "") As %Status\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Loads the elements of a Term List as a SkipList into a given iKnow measures domain, using just the key as a string to be Skiplisted. The Terms will all be added to a single Skiplist named after this Term List.",(0,t.jsx)(n.br,{}),"\nIf a SkipList with the given name already exists, its contents will be replaced by the contents of the supplied Term List. If no value is supplied for pTermList, its value will be derived from the value of the domain parameter $$$IKPDSSKIPLIST."]}),"\n",(0,t.jsx)(n.h3,{id:"loadtermlistasblacklist",children:"LoadTermListAsBlackList"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod LoadTermListAsBlackList(pCube As %String, pMeasure As %String, pTermList As %String = "") As %Status [ Deprecated, Internal ]\n'})}),"\n",(0,t.jsx)(n.h3,{id:"getiknowmeasures",children:"GetIKnowMeasures"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetIKnowMeasures(pCube As %String, Output pList, pIncludeRelatedToOne As %Boolean = 0, pIncludeRelatedToMany As %Boolean = 0) As %Status\n"})}),"\n",(0,t.jsx)(n.p,{children:"Returns all iKnow Measures for cube pCube in the form pList(n) = $lb(measureName, iKnowSourceType, cubeCaption)"}),"\n",(0,t.jsx)(n.h3,{id:"getsummary",children:"GetSummary"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetSummary(pCube As %String, pMeasure As %String, pSourceObjectId As %String, pLength As %Integer = 5) As %String [ SqlProc ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Shorthand method to retrieve a summary of the iKnow measure value for pMeasure in cube pCube for the record identified by pSourceObjectId. Using pLength, the user can supply a desired summary length (in sentences)."}),"\n",(0,t.jsx)(n.p,{children:"This method is available as a SQL stored procedure and can be invoked in a Listing through using the $$$IKSUMMARY keyword."}),"\n",(0,t.jsx)(n.h3,{id:"getfactid",children:"GetFactId"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod GetFactId(pCube As %String, pSourceObjectId As %String, pRelations As %String = "", pSC As %Status = {$$$OK}) As %Integer [ Internal ]\n'})}),"\n",(0,t.jsx)(n.p,{children:"This method translates the source objects OID into the corresponding Fact ID, which is identical to the iKnow source ID for a DeepSee-managed domain."}),"\n",(0,t.jsx)(n.h3,{id:"getsourceobjectid",children:"GetSourceObjectId"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetSourceObjectId(pCube As %String, pFactId As %Integer) As %Integer [ Internal ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This method translates a fact ID (= iKnow source ID in a DeepSee-managed domain) into the corresponding source object OID."}),"\n",(0,t.jsx)(n.h3,{id:"getmeasureinfo",children:"GetMeasureInfo"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod GetMeasureInfo(pCube As %String, pMeasure As %String, Output pSourceType As %String = "", Output pDomainId As %Integer = "", Output pDomainName As %Integer = "", Output pDomainType As %String = "", Output pParams As %String = "", Output pDictionaries As %String = "") As %Status\n'})}),"\n",(0,t.jsx)(n.p,{children:"Fetches measure info from the cube definition:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"pSourceType: the value of the iKnowSource attribute"}),"\n",(0,t.jsx)(n.li,{children:"pDomainId: the iKnow domain (ID) containing the data for this measure"}),"\n",(0,t.jsx)(n.li,{children:"pDomainName: the iKnow domain (name) containing the data for this measure"}),"\n",(0,t.jsx)(n.li,{children:'pDomainType: "iKnow" for an iKnow-managed domain, "DeepSee" for a DeepSee-managed one'}),"\n",(0,t.jsx)(n.li,{children:"pParams: the semicolon-delimited list of domain parameter name/value pairs to use apply to the domain instantiated for this measure"}),"\n",(0,t.jsx)(n.li,{children:"pDictionaries: the comma-delimited list of Term Lists to match against."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"getmeasureinfointernal",children:"GetMeasureInfoInternal"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod GetMeasureInfoInternal(pCube As %String, pMeasure As %String, Output pSourceType As %String = "", Output pDomainId As %Integer = "", Output pDomainName As %Integer = "", Output pDomainType As %String = "", Output pParams As %String = "", Output pDictionaries As %String = "") As %Status [ Internal, Private ]\n'})}),"\n",(0,t.jsx)(n.h3,{id:"translateiknowbitstring",children:"TranslateIKnowBitstring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod TranslateIKnowBitstring(pCubeName As %String, pMeasureName As %String, pGlobFrom As %String, pGlobTo As %String = "", pToFactIDs As %Boolean = 1) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(n.p,{children:"Translates a bitstring based on iKnow source IDs into one based on DeepSee fact IDs for an iKnow-managed domain when pToFactIDs = 1, or vice versa otherwise."}),"\n",(0,t.jsx)(n.h3,{id:"renamedomain",children:"RenameDomain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod RenameDomain(pFrom As %String, pTo As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Wrapper method to support domains managed solely by DeepSee"}),"\n",(0,t.jsx)(n.h3,{id:"dropdomain",children:"DropDomain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod DropDomain(pDomainName As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Wrapper method to support domains managed solely by DeepSee"}),"\n",(0,t.jsx)(n.h3,{id:"dropdictionary",children:"DropDictionary"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod DropDictionary(pTermList As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Wrapper method to support cross-domain dictionaries managed through a Term List"}),"\n",(0,t.jsx)(n.h3,{id:"getdictionaryids",children:"GetDictionaryIds"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetDictionaryIds(pDictionaries As %String) As %List [ Internal, Private ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Given the names of the term lists to match against, return a %List containing the corresponding dictionary IDs to supply to MatchSource[s]() Note: assumes version >= 3 (for cross-domain dictionary use)!"}),"\n",(0,t.jsx)(n.h3,{id:"updatematching",children:"UpdateMatching"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod UpdateMatching(pCubeName As %String, pMeasureName As %String) As %Status\n"})}),"\n",(0,t.jsx)(n.h3,{id:"updatematchinginternal",children:"UpdateMatchingInternal"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod UpdateMatchingInternal(pDomainId As %Integer, pDictionaries As %String, pFactId As %Integer = "") As %Status [ Internal ]\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(96540);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);