"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[240],{95876:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>r,default:()=>i,frontMatter:()=>o,toc:()=>c});var l=t(74848),n=t(28453);const o={pagination_prev:null,pagination_next:null},r="SYS.Lock",c=[{value:"Methods",id:"methods",level:2},{value:"ClientSysNameToSysNum",id:"clientsysnametosysnum",level:3},{value:"ClientSysNumToSysName",id:"clientsysnumtosysname",level:3},{value:"DeleteAllLocks",id:"deletealllocks",level:3},{value:"DeleteOneLock",id:"deleteonelock",level:3},{value:"GetLockSpaceInfo",id:"getlockspaceinfo",level:3},{value:"GetLockSysNameTable",id:"getlocksysnametable",level:3},{value:"GetMaxLockTableSize",id:"getmaxlocktablesize",level:3},{value:"GetNodeInfo",id:"getnodeinfo",level:3},{value:"SetMaxLockTableSize",id:"setmaxlocktablesize",level:3},{value:"TranslateID",id:"translateid",level:3}];function a(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.header,{children:(0,l.jsx)(s.h1,{id:"syslock",children:"SYS.Lock"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:'Class SYS.Lock Extends %SYSTEM.Help [ Abstract, Final, SqlTableName = "", StorageStrategy = "", System = 4 ]\n'})}),"\n",(0,l.jsxs)(s.p,{children:["Interface to remove locks and query and adjust lock table parameters.",(0,l.jsx)(s.br,{}),"\nUse %SYS.LockQuery to query the contents of the lock table."]}),"\n",(0,l.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(s.h3,{id:"clientsysnametosysnum",children:"ClientSysNameToSysNum"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ClientSysNameToSysNum(SysName As %String = "") As %Integer [ Internal ]\n'})}),"\n",(0,l.jsx)(s.p,{children:"Convert a remote client system name to internal system number. This is used by LOCKTAB as well as by this class."}),"\n",(0,l.jsx)(s.h3,{id:"clientsysnumtosysname",children:"ClientSysNumToSysName"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ClientSysNumToSysName(SysNum As %Integer = 0) As %String [ Internal ]\n"})}),"\n",(0,l.jsx)(s.p,{children:"Convert a remote client system number to client system name. This is used by LOCKTAB as well as by this class."}),"\n",(0,l.jsx)(s.h3,{id:"deletealllocks",children:"DeleteAllLocks"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DeleteAllLocks(id As %String = "") As %Status\n'})}),"\n",(0,l.jsxs)(s.p,{children:["Remove all locks from lock table.",(0,l.jsx)(s.br,{}),"\nThis returns number of locks been removed from lock table.",(0,l.jsx)(s.br,{}),"\nThe argument 'id' specified the category of lock entries to be deleted. See the 'Filter Specification' at the top of %SYS.LockQuery.",(0,l.jsx)(s.br,{}),"\nExample: ",(0,l.jsx)(s.code,{children:'// Delete all locks in lock table. Set rc=##Class(SYS.Lock).DeleteAllLocks() // Delete locks owned by process 2004. Set rc=##Class(SYS.Lock).DeleteAllLocks(2004) // Delete locks owned by remote client system named \'SystemA\'. Set rc=##Class(SYS.Lock).DeleteAllLocks("CSystemA") // Delete locks owned by remote client systems. Set rc=##Class(SYS.Lock).DeleteAllLocks("N") // Delete locks owned by remote DDP clients. Set rc=##Class(SYS.Lock).DeleteAllLocks("NDDP")'})]}),"\n",(0,l.jsx)(s.h3,{id:"deleteonelock",children:"DeleteOneLock"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DeleteOneLock(LockRef As %String, id As %String = "", LockRefType As %Integer = 0) As %Integer\n'})}),"\n",(0,l.jsxs)(s.p,{children:["Delete One Lock item in the lock table.",(0,l.jsx)(s.br,{}),"\nThis returns 1 if the lock delete operation succeeds, otherwise returns 0."]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:"'LockRef' - could be a lock reference string or a DelKey depends on the 'LockRefType' parameter."}),"\n",(0,l.jsx)(s.li,{children:"'id' - the owner of the lock entry to be deleted. See the 'Filter Specification' at the top of %SYS.LockQuery for the 'id'."}),"\n",(0,l.jsx)(s.li,{children:"'LockRefType' - 0: the 'LockRef' is lock reference string, this is the default value. 1: the 'LockRef' is the DelKey for deleting the lock entry.\nThe 'DelKey' is usually used when the lock's 'DelKey' value is retrieved from a query."}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:["Example: ",(0,l.jsx)(s.code,{children:'// Delete ^|"^^c:\\intersystemsdb\\mgr\\user"|a(1) lock. Set rc=##Class(SYS.Lock).DeleteOneLock("^|""^^c:\\intersystemsdb\\mgr\\user""|a(1)") // Delete ^|"^^c:\\intersystemdb\\mgr\\user"|a(1) lock owned by process 2004. Set rc=##Class(SYS.Lock).DeleteOneLock("^|""^^c:\\intersystemsdb\\mgr\\user""|a(1)",2004) // Look through the lock table and remove all locks // to the directory with System File Number equal 2. Set Rset=##class(%ResultSet).%New("%SYS.LockQuery:List") Do Rset.Execute("") While Rset.Next() { If Rset.Data("Sfn")=2 { s rc=##Class(SYS.Lock).DeleteOneLock(Rset.Data("DelKey"),"",1) } }'})]}),"\n",(0,l.jsx)(s.h3,{id:"getlockspaceinfo",children:"GetLockSpaceInfo"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetLockSpaceInfo() As %String\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Get lock space information.",(0,l.jsx)(s.br,{}),"\nThis method returns three numbers and they are separated by ',' in the following format:"]}),"\n",(0,l.jsx)(s.p,{children:'"AvailableSpace,UsableSpace,UsedSpace"'}),"\n",(0,l.jsxs)(s.p,{children:["The amounts are number of bytes.",(0,l.jsx)(s.br,{}),"\nAvailableSpace: Available memory for lock, it is total configured lock memory minus UsedSpace.",(0,l.jsx)(s.br,{}),"\nUsableSpace: Estimated size of memory could be used; some of the AvailableSpace is reserved for each process. They include two LRB, one LHB and one lock reference string. They could not be used by other processes until the job released it to the free pool. So the UsableSpace is less than the AvailableSpace.",(0,l.jsx)(s.br,{}),"\nUsedSpace: Currently used memory space by lock. Note that the value of UsedSpace may be temporarily inaccurate when the system is busy, such as with heavy lock activity on many jobs; this may include having a negative value. You may need to run GetLockSpaceInfo() repeatedly to obtain a more accurate value."]}),"\n",(0,l.jsx)(s.h3,{id:"getlocksysnametable",children:"GetLockSysNameTable"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetLockSysNameTable(ByRef SYSTEMS As %String, ByRef BYTES2 As %String, ByRef SYSN2 As %String) As %Status [ Internal, Private ]\n"})}),"\n",(0,l.jsx)(s.p,{children:"Get lock system number and name translation table."}),"\n",(0,l.jsx)(s.h3,{id:"getmaxlocktablesize",children:"GetMaxLockTableSize"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetMaxLockTableSize() As %Integer\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Get the maximum number of bytes been configured for lock system to use.",(0,l.jsx)(s.br,{}),"\nThe value returned is in number of bytes."]}),"\n",(0,l.jsx)(s.h3,{id:"getnodeinfo",children:"GetNodeInfo"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetNodeInfo() As %String\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Get node information.",(0,l.jsx)(s.br,{}),"\nThis method returns the node information of current system.",(0,l.jsx)(s.br,{}),"\nThis returns the following information who are separated by $C(0) in sequence."]}),"\n",(0,l.jsxs)(s.ol,{children:["\n",(0,l.jsx)(s.li,{children:"Node Name - node name of the current system."}),"\n",(0,l.jsx)(s.li,{children:"Joined Cluster - 1: this system is a cluster member, 0: otherwise."}),"\n",(0,l.jsx)(s.li,{children:"Cluster Master - 1: this system is a cluster master node, 0: otherwise."}),"\n",(0,l.jsx)(s.li,{children:"Cluster Master Node Name - The Node Name of the cluster master node."}),"\n"]}),"\n",(0,l.jsx)(s.h3,{id:"setmaxlocktablesize",children:"SetMaxLockTableSize"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetMaxLockTableSize(NewSize As %Integer) As %Integer\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Set new maximum number of bytes for lock system to use.",(0,l.jsx)(s.br,{}),"\nThe 'NewSize' is in bytes, it will be round up to 64 KB."]}),"\n",(0,l.jsx)(s.h3,{id:"translateid",children:"TranslateID"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TranslateID(id As %String) As %String [ Internal, Private ]\n"})}),"\n",(0,l.jsx)(s.p,{children:"Translate the input ID string and return three values. 1) pid : The process ID, 0 - all processes. 2) clin: The remote client system number, -1 - all remote system. 3) ntype: The network protocol from remote client, 100 - all network protocol. 4) svrn: The remote server system number, -1 - all remote system."})]})}function i(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>c});var l=t(96540);const n={},o=l.createContext(n);function r(e){const s=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),l.createElement(o.Provider,{value:s},e.children)}}}]);