"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[73534],{15458:(e,a,s)=>{s.r(a),s.d(a,{contentTitle:()=>l,default:()=>c,frontMatter:()=>n,toc:()=>i});var t=s(74848),r=s(28453);const n={pagination_prev:null,pagination_next:null},l="SYS.Database",i=[{value:"Parameters",id:"parameters",level:2},{value:"DOMAIN",id:"domain",level:3},{value:"DEFAULTCONCURRENCY",id:"defaultconcurrency",level:3},{value:"Properties",id:"properties",level:2},{value:"BlockFormat",id:"blockformat",level:3},{value:"Blocks",id:"blocks",level:3},{value:"BlockSize",id:"blocksize",level:3},{value:"BlocksPerMap",id:"blockspermap",level:3},{value:"ClusterMounted",id:"clustermounted",level:3},{value:"ClusterMountMode",id:"clustermountmode",level:3},{value:"CurrentMaps",id:"currentmaps",level:3},{value:"Directory",id:"directory",level:3},{value:"DirectoryBlock",id:"directoryblock",level:3},{value:"EncryptedDB",id:"encrypteddb",level:3},{value:"EncryptionKeyID",id:"encryptionkeyid",level:3},{value:"Expanding",id:"expanding",level:3},{value:"ExpansionSize",id:"expansionsize",level:3},{value:"Full",id:"full",level:3},{value:"LastExpansionTime",id:"lastexpansiontime",level:3},{value:"LastVolumeDirectory",id:"lastvolumedirectory",level:3},{value:"LastVolumeSize",id:"lastvolumesize",level:3},{value:"MaxSize",id:"maxsize",level:3},{value:"Mirrored",id:"mirrored",level:3},{value:"MirrorSetName",id:"mirrorsetname",level:3},{value:"MirrorDBName",id:"mirrordbname",level:3},{value:"MirrorNoWrite",id:"mirrornowrite",level:3},{value:"MirrorActivationRequired",id:"mirroractivationrequired",level:3},{value:"MirrorObsolete",id:"mirrorobsolete",level:3},{value:"MirrorFailoverDB",id:"mirrorfailoverdb",level:3},{value:"MirrorDBCreatedNew",id:"mirrordbcreatednew",level:3},{value:"MirrorDBCatchup",id:"mirrordbcatchup",level:3},{value:"MirrorDBPaused",id:"mirrordbpaused",level:3},{value:"InActiveMirror",id:"inactivemirror",level:3},{value:"Mounted",id:"mounted",level:3},{value:"NewGlobalCollation",id:"newglobalcollation",level:3},{value:"NewGlobalGrowthBlock",id:"newglobalgrowthblock",level:3},{value:"NewGlobalIsKeep",id:"newglobaliskeep",level:3},{value:"NewVolumeDirectory",id:"newvolumedirectory",level:3},{value:"NewVolumeThreshold",id:"newvolumethreshold",level:3},{value:"NumberOfConfigDB",id:"numberofconfigdb",level:3},{value:"RunCatchupDBOnCreate",id:"runcatchupdboncreate",level:3},{value:"ROReasonCode",id:"roreasoncode",level:3},{value:"ROReasonText",id:"roreasontext",level:3},{value:"GlobalJournalState",id:"globaljournalstate",level:3},{value:"NewGlobalPointerBlock",id:"newglobalpointerblock",level:3},{value:"ReadOnly",id:"readonly",level:3},{value:"ReadOnlyMounted",id:"readonlymounted",level:3},{value:"Reinitialize",id:"reinitialize",level:3},{value:"ReCreate",id:"recreate",level:3},{value:"RequestSize",id:"requestsize",level:3},{value:"Resource",id:"resource",level:3},{value:"ResourceName",id:"resourcename",level:3},{value:"SFN",id:"sfn",level:3},{value:"Size",id:"size",level:3},{value:"Skeleton",id:"skeleton",level:3},{value:"SparseDB",id:"sparsedb",level:3},{value:"MultiVolume",id:"multivolume",level:3},{value:"VolumeInfoBlock",id:"volumeinfoblock",level:3},{value:"VolumeDirectoryList",id:"volumedirectorylist",level:3},{value:"Methods",id:"methods",level:2},{value:"DisableJournaling",id:"disablejournaling",level:3},{value:"EnableJournaling",id:"enablejournaling",level:3},{value:"ReadOnlySet",id:"readonlyset",level:3},{value:"%OnValidateObject",id:"onvalidateobject",level:3},{value:"%LoadData",id:"loaddata",level:3},{value:"%SaveData",id:"savedata",level:3},{value:"GetStatus",id:"getstatus",level:3},{value:"AuditJournalStateChange",id:"auditjournalstatechange",level:3},{value:"BlockSizePrompt",id:"blocksizeprompt",level:3},{value:"CheckBlockSizeAllowed",id:"checkblocksizeallowed",level:3},{value:"CheckBlockSizeAvailable",id:"checkblocksizeavailable",level:3},{value:"CheckIntegrity",id:"checkintegrity",level:3},{value:"CheckForWideCharacters",id:"checkforwidecharacters",level:3},{value:"CheckpointVolumes",id:"checkpointvolumes",level:3},{value:"ClusterMountModePrompt",id:"clustermountmodeprompt",level:3},{value:"Compact",id:"compact",level:3},{value:"CompactDatabase",id:"compactdatabase",level:3},{value:"Copy",id:"copy",level:3},{value:"JobCompactDatabase",id:"jobcompactdatabase",level:3},{value:"JobCompact",id:"jobcompact",level:3},{value:"DBCompactStatus",id:"dbcompactstatus",level:3},{value:"CreateOne",id:"createone",level:3},{value:"Create",id:"create",level:3},{value:"CreateDatabase",id:"createdatabase",level:3},{value:"CreateDefaultGlobals",id:"createdefaultglobals",level:3},{value:"FixDefaultGlobalCollation",id:"fixdefaultglobalcollation",level:3},{value:"CreateGlobal",id:"createglobal",level:3},{value:"Delete",id:"delete",level:3},{value:"DeleteDatabase",id:"deletedatabase",level:3},{value:"DeleteOne",id:"deleteone",level:3},{value:"DirectorySet",id:"directoryset",level:3},{value:"Dismount",id:"dismount",level:3},{value:"DismountDatabase",id:"dismountdatabase",level:3},{value:"EncryptDatabase",id:"encryptdatabase",level:3},{value:"DecryptDatabase",id:"decryptdatabase",level:3},{value:"EncryptedDBPrompt",id:"encrypteddbprompt",level:3},{value:"ExpansionSizeIsValid",id:"expansionsizeisvalid",level:3},{value:"ExpansionSizePrompt",id:"expansionsizeprompt",level:3},{value:"FindMapBlock",id:"findmapblock",level:3},{value:"GetDatabaseFreeSpace",id:"getdatabasefreespace",level:3},{value:"GetDirectory",id:"getdirectory",level:3},{value:"GetFreeSpace",id:"getfreespace",level:3},{value:"IntegrityCheck",id:"integritycheck",level:3},{value:"LoadFields",id:"loadfields",level:3},{value:"NewVolumeThresholdPrompt",id:"newvolumethresholdprompt",level:3},{value:"MaxSizeIsValid",id:"maxsizeisvalid",level:3},{value:"MaxSizePrompt",id:"maxsizeprompt",level:3},{value:"ModifyDatabase",id:"modifydatabase",level:3},{value:"Modify",id:"modify",level:3},{value:"ModifyOne",id:"modifyone",level:3},{value:"ModifyVolumeDirectoryList",id:"modifyvolumedirectorylist",level:3},{value:"UseVolumeDirectory",id:"usevolumedirectory",level:3},{value:"Mount",id:"mount",level:3},{value:"MountDatabase",id:"mountdatabase",level:3},{value:"Defragment",id:"defragment",level:3},{value:"DefragmentCheck",id:"defragmentcheck",level:3},{value:"FileCompact",id:"filecompact",level:3},{value:"NewVolume",id:"newvolume",level:3},{value:"CheckVolumeDirectoryMax",id:"checkvolumedirectorymax",level:3},{value:"ReturnUnusedSpace",id:"returnunusedspace",level:3},{value:"NewGlobalCollationPrompt",id:"newglobalcollationprompt",level:3},{value:"NewGlobalIsKeepPrompt",id:"newglobaliskeepprompt",level:3},{value:"GlobalJournalStateGet",id:"globaljournalstateget",level:3},{value:"GlobalJournalStatePrompt",id:"globaljournalstateprompt",level:3},{value:"MirrorDBNamePrompt",id:"mirrordbnameprompt",level:3},{value:"MirrorSetNamePrompt",id:"mirrorsetnameprompt",level:3},{value:"NewGlobalPointerBlockPrompt",id:"newglobalpointerblockprompt",level:3},{value:"NewGlobalGrowthBlockPrompt",id:"newglobalgrowthblockprompt",level:3},{value:"PackZU27Error",id:"packzu27error",level:3},{value:"ReadOnlyPrompt",id:"readonlyprompt",level:3},{value:"ResourceNamePrompt",id:"resourcenameprompt",level:3},{value:"SilentIntegrityCheck",id:"silentintegritycheck",level:3},{value:"SizePrompt",id:"sizeprompt",level:3},{value:"ViewIntegrityLog",id:"viewintegritylog",level:3},{value:"DetailExecute",id:"detailexecute",level:3},{value:"DetailFetch",id:"detailfetch",level:3},{value:"DetailClose",id:"detailclose",level:3},{value:"FreeSpaceExecute",id:"freespaceexecute",level:3},{value:"FreeSpaceFetch",id:"freespacefetch",level:3},{value:"FreeSpaceClose",id:"freespaceclose",level:3},{value:"IntegrityExecute",id:"integrityexecute",level:3},{value:"IntegrityFetch",id:"integrityfetch",level:3},{value:"IntegrityClose",id:"integrityclose",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"ListFetch",id:"listfetch",level:3},{value:"ListClose",id:"listclose",level:3},{value:"RemoteDatabaseListExecute",id:"remotedatabaselistexecute",level:3},{value:"RemoteDatabaseListFetch",id:"remotedatabaselistfetch",level:3},{value:"RemoteDatabaseListClose",id:"remotedatabaselistclose",level:3},{value:"RemoteDatabaseListSMPExecute",id:"remotedatabaselistsmpexecute",level:3},{value:"RemoteDatabaseListSMPFetch",id:"remotedatabaselistsmpfetch",level:3},{value:"RemoteDatabaseListSMPClose",id:"remotedatabaselistsmpclose",level:3},{value:"RemoteGlobalListExecute",id:"remotegloballistexecute",level:3},{value:"RemoteGlobalListFetch",id:"remotegloballistfetch",level:3},{value:"RemoteGlobalListClose",id:"remotegloballistclose",level:3},{value:"FormatSizes",id:"formatsizes",level:3},{value:"CompactLocalListExecute",id:"compactlocallistexecute",level:3},{value:"CompactLocalListFetch",id:"compactlocallistfetch",level:3},{value:"CompactLocalListClose",id:"compactlocallistclose",level:3},{value:"VolumeFilesGetArray",id:"volumefilesgetarray",level:3},{value:"VolumeFilesExecute",id:"volumefilesexecute",level:3},{value:"VolumeFilesFetch",id:"volumefilesfetch",level:3},{value:"VolumeFilesClose",id:"volumefilesclose",level:3},{value:"CanDatabaseBeMirrored",id:"candatabasebemirrored",level:3},{value:"IsSystemDB",id:"issystemdb",level:3},{value:"ClearMirrorFailoverDB",id:"clearmirrorfailoverdb",level:3},{value:"ParseZU49Info",id:"parsezu49info",level:3},{value:"Clone",id:"clone",level:3}];function o(e){const a={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"sysdatabase",children:"SYS.Database"})}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Class SYS.Database Extends (%Persistent, %SYSTEM.Help) [ Final, Inheritance = right, StorageStrategy = DBStorage, System = 4 ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Manages Database Operations."}),"\n",(0,t.jsx)(a.p,{children:"To Create a new database with the system defaults do the following:"}),"\n",(0,t.jsxs)(a.p,{children:["Set db=##Class(SYS.Database).%New()",(0,t.jsx)(a.br,{}),"\nSet db.Directory=Directory",(0,t.jsx)(a.br,{}),"\nSet status=db.%Save()"]}),"\n",(0,t.jsxs)(a.p,{children:["To modify an existing Database, do the following:",(0,t.jsx)(a.br,{}),"\nSet db=##Class(SYS.Database).%OpenId(Directory)",(0,t.jsx)(a.br,{}),"\n//Set the property you want to modify:",(0,t.jsx)(a.br,{}),"\nSet db.ExpansionSize=100",(0,t.jsx)(a.br,{}),"\nSet status=db.%Save()"]}),"\n",(0,t.jsxs)(a.p,{children:["Properties which can be set for database creation are:",(0,t.jsx)(a.br,{}),"\nDirectory",(0,t.jsx)(a.br,{}),"\nBlockSize",(0,t.jsx)(a.br,{}),"\nEncryptedDB",(0,t.jsx)(a.br,{}),"\nEncryptionKeyID",(0,t.jsx)(a.br,{}),"\nSize",(0,t.jsx)(a.br,{}),"\nExpansionSize",(0,t.jsx)(a.br,{}),"\nMaxSize",(0,t.jsx)(a.br,{}),"\nMirrorDBName",(0,t.jsx)(a.br,{}),"\nMirrorSetName",(0,t.jsx)(a.br,{}),"\nGlobalJournalState",(0,t.jsx)(a.br,{}),"\nNewGlobalCollation",(0,t.jsx)(a.br,{}),"\nNewGlobalIsKeep",(0,t.jsx)(a.br,{}),"\nNewGlobalGrowthBlock",(0,t.jsx)(a.br,{}),"\nNewGlobalPointerBlock",(0,t.jsx)(a.br,{}),"\nClusterMountMode",(0,t.jsx)(a.br,{}),"\nResourceName"]}),"\n",(0,t.jsxs)(a.p,{children:["Properties which can be modified for an already created database are:",(0,t.jsx)(a.br,{}),"\nReadOnly",(0,t.jsx)(a.br,{}),"\nSize",(0,t.jsx)(a.br,{}),"\nExpansionSize",(0,t.jsx)(a.br,{}),"\nMaxSize",(0,t.jsx)(a.br,{}),"\nGlobalJournalState",(0,t.jsx)(a.br,{}),"\nNewGlobalCollation",(0,t.jsx)(a.br,{}),"\nNewGlobalIsKeep",(0,t.jsx)(a.br,{}),"\nNewGlobalGrowthBlock",(0,t.jsx)(a.br,{}),"\nNewGlobalPointerBlock",(0,t.jsx)(a.br,{}),"\nClusterMountMode",(0,t.jsx)(a.br,{}),"\nResourceName"]}),"\n",(0,t.jsxs)(a.p,{children:["Read-only properties which are managed by the system and cannot be modified are:",(0,t.jsx)(a.br,{}),"\nExpanding",(0,t.jsx)(a.br,{}),"\nLastExpansionTime",(0,t.jsx)(a.br,{}),"\nMounted",(0,t.jsx)(a.br,{}),"\nReadOnlyMounted",(0,t.jsx)(a.br,{}),"\nClusterMounted",(0,t.jsx)(a.br,{}),"\nMirrored",(0,t.jsx)(a.br,{}),"\nMirrorNoWrite",(0,t.jsx)(a.br,{}),"\nMirrorActivationRequired",(0,t.jsx)(a.br,{}),"\nMirrorFailoverDB",(0,t.jsx)(a.br,{}),"\nInActiveMirror",(0,t.jsx)(a.br,{}),"\nMirrorObsolete"]}),"\n",(0,t.jsxs)(a.p,{children:["The maximum value of the 'MaxSize' property depends on the block size of the database, as follows:",(0,t.jsx)(a.br,{}),"\n17 TB (16777080 MB) for 4K database.",(0,t.jsx)(a.br,{}),"\n34 TB (33553904 MB) for 8K database.",(0,t.jsx)(a.br,{}),"\n67 TB (67106832 MB) for 16K database.",(0,t.jsx)(a.br,{}),"\n134 TB (134202016 MB) for 32K database.",(0,t.jsx)(a.br,{}),"\n268 TB (268392960 MB) for 64K database."]}),"\n",(0,t.jsx)(a.p,{children:"When 'MaxSize' or 'Size' peoperty is modified InterSystems IRIS instance internally adjusts the 'MaxSize' and 'Size' peoperties when:"}),"\n",(0,t.jsxs)(a.ol,{children:["\n",(0,t.jsx)(a.li,{children:"Setting 'MaxSize' which is over the maximum value then it is set with the maximum value."}),"\n",(0,t.jsx)(a.li,{children:"Setting 'MaxSize' which is less than 'Size' then it is set with the value of 'Size'."}),"\n",(0,t.jsx)(a.li,{children:"Setting 'Size' which is greater than 'MaxSize' then the 'Size' is increased to the value of 'MaxSize'."}),"\n"]}),"\n",(0,t.jsx)(a.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(a.h3,{id:"domain",children:"DOMAIN"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'Parameter DOMAIN = "%Utility";\n'})}),"\n",(0,t.jsx)(a.p,{children:"Default Localization Domain"}),"\n",(0,t.jsx)(a.h3,{id:"defaultconcurrency",children:"DEFAULTCONCURRENCY"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter DEFAULTCONCURRENCY = 0;\n"})}),"\n",(0,t.jsx)(a.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(a.h3,{id:"blockformat",children:"BlockFormat"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property BlockFormat As %Integer [ InitialExpression = 2, Internal ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"1 for old version 2KB block size database format, 2 for current format"}),"\n",(0,t.jsx)(a.h3,{id:"blocks",children:"Blocks"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property Blocks As %Integer [ InitialExpression = 0, Internal, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Current number of blocks"}),"\n",(0,t.jsx)(a.h3,{id:"blocksize",children:"BlockSize"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'Property BlockSize As %Integer(VALUELIST = ",2048,4096,8192,16384,32768,65536") [ InitialExpression = {$$$8k} ];\n'})}),"\n",(0,t.jsxs)(a.p,{children:["Block size in bytes of the database.",(0,t.jsx)(a.br,{}),"\nEither 2048, 4096, 8192, 16384, 32768, or 65536"]}),"\n",(0,t.jsx)(a.h3,{id:"blockspermap",children:"BlocksPerMap"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property BlocksPerMap As %Integer [ InitialExpression = 0, Internal, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Number of blocks per map"}),"\n",(0,t.jsx)(a.h3,{id:"clustermounted",children:"ClusterMounted"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property ClusterMounted As %Boolean [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Database is currently cluster mounted"}),"\n",(0,t.jsx)(a.h3,{id:"clustermountmode",children:"ClusterMountMode"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property ClusterMountMode As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsxs)(a.p,{children:["Database is configured to be mounted in cluster mode",(0,t.jsx)(a.br,{}),"\nIf this property is set then this database has to be mounted explicitly."]}),"\n",(0,t.jsx)(a.h3,{id:"currentmaps",children:"CurrentMaps"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property CurrentMaps As %Integer [ Internal, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.h3,{id:"directory",children:"Directory"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property Directory As %SysPath;\n"})}),"\n",(0,t.jsx)(a.p,{children:"Directory containing the database"}),"\n",(0,t.jsx)(a.h3,{id:"directoryblock",children:"DirectoryBlock"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property DirectoryBlock As %Integer [ InitialExpression = 3, Internal, ReadOnly ];\n"})}),"\n",(0,t.jsxs)(a.p,{children:["Block where Global directory starts.",(0,t.jsx)(a.br,{}),"\n3 for >2k pages",(0,t.jsx)(a.br,{}),"\n2 or other for 2k pages. New 2k db's can only be 2."]}),"\n",(0,t.jsx)(a.h3,{id:"encrypteddb",children:"EncryptedDB"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property EncryptedDB As Security.Datatype.BooleanYN [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Database is encrypted"}),"\n",(0,t.jsx)(a.h3,{id:"encryptionkeyid",children:"EncryptionKeyID"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property EncryptionKeyID As %String(MAXLEN = 64, MINLEN = 1);\n"})}),"\n",(0,t.jsx)(a.p,{children:"Database encryption key ID"}),"\n",(0,t.jsx)(a.h3,{id:"expanding",children:"Expanding"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property Expanding As %Boolean [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Database is expanding."}),"\n",(0,t.jsx)(a.h3,{id:"expansionsize",children:"ExpansionSize"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property ExpansionSize As %Integer(MINVAL = 0) [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsxs)(a.p,{children:["Size in MB to Expand by.",(0,t.jsx)(a.br,{}),"\n0 - Use system defaults (recommended)"]}),"\n",(0,t.jsx)(a.h3,{id:"full",children:"Full"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property Full As %Boolean [ InitialExpression = 0, Internal ];\n"})}),"\n",(0,t.jsxs)(a.p,{children:["0 - Database is not marked as full",(0,t.jsx)(a.br,{}),"\n1 - Database is marked as full"]}),"\n",(0,t.jsx)(a.h3,{id:"lastexpansiontime",children:"LastExpansionTime"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property LastExpansionTime As %String [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Last time database expanded, converted to local time."}),"\n",(0,t.jsx)(a.h3,{id:"lastvolumedirectory",children:"LastVolumeDirectory"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property LastVolumeDirectory As %SysPath [ Internal, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Null if not mounted, else the directory containing the last volume."}),"\n",(0,t.jsx)(a.h3,{id:"lastvolumesize",children:"LastVolumeSize"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property LastVolumeSize As %Integer [ Internal, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Zero if not mounted, else the size of the last volume in MB"}),"\n",(0,t.jsx)(a.h3,{id:"maxsize",children:"MaxSize"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property MaxSize As %Integer(MINVAL = 0) [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Maximum size in MB, 0=unlimited (recommended)."}),"\n",(0,t.jsx)(a.h3,{id:"mirrored",children:"Mirrored"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property Mirrored As %Boolean [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Database is marked as mirrored"}),"\n",(0,t.jsx)(a.h3,{id:"mirrorsetname",children:"MirrorSetName"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property MirrorSetName As %String;\n"})}),"\n",(0,t.jsx)(a.p,{children:"Mirror set name of this mirrored database."}),"\n",(0,t.jsx)(a.h3,{id:"mirrordbname",children:"MirrorDBName"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property MirrorDBName As %String;\n"})}),"\n",(0,t.jsx)(a.p,{children:"Database name identified in mirror set"}),"\n",(0,t.jsx)(a.h3,{id:"mirrornowrite",children:"MirrorNoWrite"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property MirrorNoWrite As %Boolean [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Database has a status of mirrored-no-write which means it is mounted read-only so it cannot be written to."}),"\n",(0,t.jsx)(a.h3,{id:"mirroractivationrequired",children:"MirrorActivationRequired"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property MirrorActivationRequired As %Boolean [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Database has a status of activation-required which means it is mounted but there is a problem or it needs to be activated before use."}),"\n",(0,t.jsx)(a.h3,{id:"mirrorobsolete",children:"MirrorObsolete"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property MirrorObsolete As %Boolean [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Mirror Database is obsolete due to the database's GUID mismatched with GUID in mirror journal file directory block during dejournaling."}),"\n",(0,t.jsx)(a.h3,{id:"mirrorfailoverdb",children:"MirrorFailoverDB"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property MirrorFailoverDB As %Boolean [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Mirrored Database is on failover members"}),"\n",(0,t.jsx)(a.h3,{id:"mirrordbcreatednew",children:"MirrorDBCreatedNew"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property MirrorDBCreatedNew As %Boolean [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Mirrored Database is created by %New instead of 'Added' to existing DB."}),"\n",(0,t.jsx)(a.h3,{id:"mirrordbcatchup",children:"MirrorDBCatchup"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property MirrorDBCatchup As %Boolean [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Mirrored Database is running for CatchupDB."}),"\n",(0,t.jsx)(a.h3,{id:"mirrordbpaused",children:"MirrorDBPaused"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property MirrorDBPaused As %Boolean [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Mirrored Database is paused for dejournaling."}),"\n",(0,t.jsx)(a.h3,{id:"inactivemirror",children:"InActiveMirror"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property InActiveMirror As %Boolean [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Database has a status of InActiveMirror which means either we're the primary and the db is read/write and available for use or we're an active backup and the db is being replayed to by the mirror dejournal jobs to keep it updated with changes occurring on the primary."}),"\n",(0,t.jsx)(a.h3,{id:"mounted",children:"Mounted"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property Mounted As %Boolean [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Database is mounted."}),"\n",(0,t.jsx)(a.h3,{id:"newglobalcollation",children:"NewGlobalCollation"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property NewGlobalCollation As %Library.Collate [ InitialExpression = {##Class(%Library.Collate).GetSystemDefaultNumber()} ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Default collation for new globals."}),"\n",(0,t.jsx)(a.h3,{id:"newglobalgrowthblock",children:"NewGlobalGrowthBlock"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property NewGlobalGrowthBlock As %Integer(MINVAL = 50) [ InitialExpression = 50 ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Default growth block for new globals."}),"\n",(0,t.jsx)(a.h3,{id:"newglobaliskeep",children:"NewGlobalIsKeep"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property NewGlobalIsKeep As Security.Datatype.BooleanYN [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Default Keep value for New globals."}),"\n",(0,t.jsx)(a.h3,{id:"newvolumedirectory",children:"NewVolumeDirectory"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property NewVolumeDirectory As %SysPath;\n"})}),"\n",(0,t.jsx)(a.p,{children:"If expansion creates a new volume as described in VolumeSize), it will be created in this directory. Defaults to Directory (the same directory as IRIS.DAT) and if this property is null on creation, it will be set to Directory. If set to a different directory and that directory is not already in the VolumeDirectoryList, it will be added on save."}),"\n",(0,t.jsx)(a.h3,{id:"newvolumethreshold",children:"NewVolumeThreshold"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property NewVolumeThreshold As %Integer(MINVAL = 0) [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"If 0, expansion of this database will never create a new volume. If non-zero, when the current last volume expands past this size in MB, a new database volume will be created instead."}),"\n",(0,t.jsx)(a.h3,{id:"numberofconfigdb",children:"NumberOfConfigDB"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property NumberOfConfigDB As %Integer [ InitialExpression = 0, Internal, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Number of DB configured to this DB diretcory. Only used by Cluster platforms."}),"\n",(0,t.jsx)(a.h3,{id:"runcatchupdboncreate",children:"RunCatchupDBOnCreate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property RunCatchupDBOnCreate As %Boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Run CatchupDB when this mirrored DB is created."}),"\n",(0,t.jsx)(a.h3,{id:"roreasoncode",children:"ROReasonCode"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property ROReasonCode As %Integer [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Read-Only reason code"}),"\n",(0,t.jsx)(a.h3,{id:"roreasontext",children:"ROReasonText"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property ROReasonText As %String [ ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Read-Only reason text."}),"\n",(0,t.jsx)(a.h3,{id:"globaljournalstate",children:"GlobalJournalState"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property GlobalJournalState As %Library.JournalState;\n"})}),"\n",(0,t.jsxs)(a.p,{children:["Journal setting for database.",(0,t.jsx)(a.br,{}),"\n2 - No",(0,t.jsx)(a.br,{}),"\n3 - Yes"]}),"\n",(0,t.jsx)(a.h3,{id:"newglobalpointerblock",children:"NewGlobalPointerBlock"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property NewGlobalPointerBlock As %Integer(MINVAL = 6) [ InitialExpression = 16 ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Block where the index pointer starts."}),"\n",(0,t.jsx)(a.h3,{id:"readonly",children:"ReadOnly"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property ReadOnly As Security.Datatype.BooleanYN [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Database attribute in label says Read Only."}),"\n",(0,t.jsx)(a.h3,{id:"readonlymounted",children:"ReadOnlyMounted"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property ReadOnlyMounted As %Boolean [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Database is mounted for read only"}),"\n",(0,t.jsx)(a.h3,{id:"reinitialize",children:"Reinitialize"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property Reinitialize As %Boolean [ InitialExpression = 0, Internal ];\n"})}),"\n",(0,t.jsxs)(a.p,{children:["0 - Do not reinitialize an existing database.",(0,t.jsx)(a.br,{}),"\n1 - Reinitialize an existing db"]}),"\n",(0,t.jsx)(a.h3,{id:"recreate",children:"ReCreate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property ReCreate As %Boolean [ InitialExpression = 0, Internal ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"0 - This is not recreating a mirrored DB. 1 - Recreating a mirrored DB."}),"\n",(0,t.jsx)(a.h3,{id:"requestsize",children:"RequestSize"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property RequestSize As %Integer [ InitialExpression = 0, Internal ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Requesting Size of the DB, though the DB might be created with smaller size."}),"\n",(0,t.jsx)(a.h3,{id:"resource",children:"Resource"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property Resource As %String [ Internal, Transient ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Only used for Merge command property validation."}),"\n",(0,t.jsx)(a.h3,{id:"resourcename",children:"ResourceName"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property ResourceName As %String [ InitialExpression = {$$$DBDEFAULTResourceName} ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Resource name for the database."}),"\n",(0,t.jsx)(a.h3,{id:"sfn",children:"SFN"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property SFN As %Integer [ Internal, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"System File number."}),"\n",(0,t.jsx)(a.h3,{id:"size",children:"Size"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property Size As %Integer(MINVAL = 1) [ InitialExpression = 1 ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Size in MB."}),"\n",(0,t.jsx)(a.h3,{id:"skeleton",children:"Skeleton"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property Skeleton As %Boolean [ InitialExpression = 0, Internal, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Database is created but not formatted."}),"\n",(0,t.jsx)(a.h3,{id:"sparsedb",children:"SparseDB"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property SparseDB As %Boolean [ InitialExpression = 0, Internal ];\n"})}),"\n",(0,t.jsxs)(a.p,{children:["0 - Force allocation of unused blocks.",(0,t.jsx)(a.br,{}),"\n1 - Do not force allocation of unused blocks (used by temp database)"]}),"\n",(0,t.jsx)(a.h3,{id:"multivolume",children:"MultiVolume"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property MultiVolume As %Integer [ InitialExpression = 0, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Number of additional volume files beyond the IRIS.DAT file that comprise this database. 0 if the database is not multi-volume (just an IRIS.DAT)"}),"\n",(0,t.jsx)(a.h3,{id:"volumeinfoblock",children:"VolumeInfoBlock"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property VolumeInfoBlock As %Integer [ InitialExpression = 0, Internal, ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"Block number of the Volume Information Block; 0 if not multi-volume enabled"}),"\n",(0,t.jsx)(a.h3,{id:"volumedirectorylist",children:"VolumeDirectoryList"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Property VolumeDirectoryList As %List [ ReadOnly ];\n"})}),"\n",(0,t.jsx)(a.p,{children:"List of additional directories (beyond Directory) where volumes of this database may be located."}),"\n",(0,t.jsx)(a.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(a.h3,{id:"disablejournaling",children:"DisableJournaling"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method DisableJournaling() As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Disable journaling for Database."}),"\n",(0,t.jsx)(a.h3,{id:"enablejournaling",children:"EnableJournaling"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method EnableJournaling(val As %Integer) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Enable journaling for Database."}),"\n",(0,t.jsx)(a.h3,{id:"readonlyset",children:"ReadOnlySet"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method ReadOnlySet(val As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"onvalidateobject",children:"%OnValidateObject"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method %OnValidateObject() As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"loaddata",children:"%LoadData"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method %LoadData(id As %String, flag As %Boolean) As %Status [ Internal, Private ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Overrides the default %LoadData method."}),"\n",(0,t.jsx)(a.h3,{id:"savedata",children:"%SaveData"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method %SaveData(id As %String) As %Status [ Internal, Private ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Overrides the default %SaveData method."}),"\n",(0,t.jsx)(a.h3,{id:"getstatus",children:"GetStatus"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method GetStatus(Internal As %Boolean = 1) As %String\n"})}),"\n",(0,t.jsxs)(a.p,{children:["Return the status of the database.",(0,t.jsx)(a.br,{}),"\nParameters:",(0,t.jsx)(a.br,{}),"\nInternal - True(default): return plan text of the status. False: return text with current language setting (for displaying)."]}),"\n",(0,t.jsxs)(a.p,{children:["Possible returned texts:",(0,t.jsx)(a.br,{}),"\nUnmounted",(0,t.jsx)(a.br,{}),"\nDismounted",(0,t.jsx)(a.br,{}),"\nExpanding",(0,t.jsx)(a.br,{}),"\nClusterMounted/R",(0,t.jsx)(a.br,{}),"\nClusterMounted/RW",(0,t.jsx)(a.br,{}),"\nMounted/R",(0,t.jsx)(a.br,{}),"\nMounted/RW"]}),"\n",(0,t.jsx)(a.h3,{id:"auditjournalstatechange",children:"AuditJournalStateChange"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod AuditJournalStateChange(db As SYS.Database) As %Status\n"})}),"\n",(0,t.jsx)(a.h3,{id:"blocksizeprompt",children:"BlockSizePrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod BlockSizePrompt(Prompt, Obj) [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Prompt for block size."}),"\n",(0,t.jsx)(a.h3,{id:"checkblocksizeallowed",children:"CheckBlockSizeAllowed"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod CheckBlockSizeAllowed(Size As %String) As %Boolean\n"})}),"\n",(0,t.jsx)(a.p,{children:"This checks to see if this configuration allows creating block sizes other than the default, which is 8k."}),"\n",(0,t.jsx)(a.h3,{id:"checkblocksizeavailable",children:"CheckBlockSizeAvailable"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod CheckBlockSizeAvailable(Size As %String) As %Boolean [ Internal ]\n"})}),"\n",(0,t.jsxs)(a.p,{children:["This checks to see if this configuration can enable a certain block size.",(0,t.jsx)(a.br,{}),"\nvalid sizes are:",(0,t.jsx)(a.br,{}),"\n4096,8192,16384,32768,65536"]}),"\n",(0,t.jsx)(a.h3,{id:"checkintegrity",children:"CheckIntegrity"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method CheckIntegrity() As %Status\n"})}),"\n",(0,t.jsx)(a.h3,{id:"checkforwidecharacters",children:"CheckForWideCharacters"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod CheckForWideCharacters(Directory As %String, Mask As %String = "*", ByRef GlobalNodes) As %Status\n'})}),"\n",(0,t.jsxs)(a.p,{children:["Scans a database for any wide characters.",(0,t.jsx)(a.br,{}),"\nThis method is useful if you have a database mounted on a 16 bit system, and you wish to move that database to an 8 bit system. Scanning the database before you move it for wide characters (16 bit characters) will allow you to fix the global references so you can avoid  errors after you move the database to the 8 bit system.",(0,t.jsx)(a.br,{}),"\nParameters:",(0,t.jsx)(a.br,{}),"\nDirectory - Database directory to check for wide characters",(0,t.jsx)(a.br,{}),'\nGlobal - Mask of globals to check, "*"=default.',(0,t.jsx)(a.br,{}),"\nValid masks are as follows:",(0,t.jsx)(a.br,{}),"\nABC* - All globals starting with ABC",(0,t.jsx)(a.br,{}),"\nA:D - All globals between A and D",(0,t.jsx)(a.br,{}),"\nA:D,Y* - All globals between A and D, and all globals starting with Y",(0,t.jsx)(a.br,{}),"\nA:D,'C* - All globals between A and D, except those starting with C Return Values:",(0,t.jsx)(a.br,{}),"\nGlobals (byref) - Array of global nodes which contain wide characters.",(0,t.jsx)(a.br,{}),"\nNote: The maximum number of nodes returned is 5,000 so  errors can be avoided."]}),"\n",(0,t.jsx)(a.h3,{id:"checkpointvolumes",children:"CheckpointVolumes"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod CheckpointVolumes(dblist As %String = "*") As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(a.p,{children:"For all databases selected, if the database has multiple volumes and is mounted in a state that is writeable by the system, triggers an internal update to the metadata in each volume used to validate consistency upon mounting. If, due to operator error or another problem, volume files of a database are incorrectly copied/restored from a point in time before such a metadata update, while others volumes are from a point after it, then mounting the database will fail in order to prevent the application from running on an inconsistent/damaged/degraded multi-volume database. The checkpoint is separate for each database and the consistency check is only for consistency of volumes comprising a multi-volume database, not for cross-database consistency."}),"\n",(0,t.jsx)(a.p,{children:"Internally, this is done by generating a nonce that is unique for each database and storing it in the volume information block for each volume."}),"\n",(0,t.jsx)(a.p,{children:"This method may be called periodically and by functions that prepare databases for being copied externally, such as backup, dismount and shutdown."}),"\n",(0,t.jsx)(a.p,{children:"On return, the metadata is not updated on disk, but will be written in the next database write cycle (which, in the case of backup, dismount and shutdown, will be forced in as part of the caller). Returns an error status and logs the error to messages.log if unexpected errors occurred on any of the databases. Databases that cannot be updated because they are not mounted in a state that's writeable by the system are not treated as error."}),"\n",(0,t.jsx)(a.p,{children:'Parameters: dblist - "*" for all currently mounted databases OR $list of database directories, implicitly mounting if needed.'}),"\n",(0,t.jsx)(a.h3,{id:"clustermountmodeprompt",children:"ClusterMountModePrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod ClusterMountModePrompt(Prompt, Obj) [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Prompt for changing explicit mounting attribute"}),"\n",(0,t.jsx)(a.h3,{id:"compact",children:"Compact"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method Compact(PercentFull As %Integer = 90, ByRef MbProcessed As %Integer, ByRef MbCompressed As %Integer, Display As %Boolean, Device As %String, ByRef GloSel As %String) As %Status\n"})}),"\n",(0,t.jsxs)(a.p,{children:["Compact all or selected globals in a database.",(0,t.jsx)(a.br,{}),"\nWhen GloSel does not exist ($D(GloSel)=0) all globals in the database will be compacted. Otherwise the array of GloSel contains the globals to be compacted."]}),"\n",(0,t.jsx)(a.p,{children:"If a global that was selected for compaction is deleted before that global is processed, the global is ignored as if it had not been specified. If detailed progress information is being displayed (global names and compaction level), the global name will be displayed on a blank line, without any compaction details."}),"\n",(0,t.jsx)(a.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"PercentFull Target percentage full for the blocks at the data level. Defaults to 90% if omitted."}),"\n",(0,t.jsx)(a.li,{children:"MbProcessed (by reference) returns how many MB of data was processed"}),"\n",(0,t.jsx)(a.li,{children:"MbCompressed (by reference) returns how many MB the data processed occupies at the end of the operation"}),"\n",(0,t.jsx)(a.li,{children:"Display True(1) or False(0) as to whether the method should display status output on a per-global basis as it executes. Defaults to False. If True, then Device controls where the output is displayed. If Device is omitted, output is written to the current device."}),"\n",(0,t.jsx)(a.li,{children:"Device When Display is true, this is where the output is displayed. This must already be open although it does not have to be the current I/O device. If omitted and Display is true, output is written to the current device."}),"\n",(0,t.jsx)(a.li,{children:"GloSel (by reference) If present this is an array passed by reference where the subscripts are the names of the globals to be processed. If omitted, all globals are processed."}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"compactdatabase",children:"CompactDatabase"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod CompactDatabase(Directory As %String, PercentFull As %Integer = 90, ByRef MbProcessed As %Integer, ByRef MbCompressed As %Integer, Display As %Boolean = 0, Device As %String) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compact all globals in a database."}),"\n",(0,t.jsx)(a.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Directory Directory specification of the database to compact."}),"\n",(0,t.jsx)(a.li,{children:"PercentFull Target percentage full for the blocks at the data level. Defaults to 90% if omitted."}),"\n",(0,t.jsx)(a.li,{children:"MbProcessed (by reference) returns how many MB of data was processed"}),"\n",(0,t.jsx)(a.li,{children:"MbCompressed (by reference) returns how many MB the data processed occupies at the end of the operation"}),"\n",(0,t.jsx)(a.li,{children:"Display True(1) or False(0) as to whether the method should display status output on a per-global basis as it executes. Defaults to False. If True, then Device controls where the output is displayed. If Device is omitted, output is written to the current device."}),"\n",(0,t.jsx)(a.li,{children:"Device When Display is true, this is where the output is displayed. This must already be open although it does not have to be the current I/O device. If omitted and Display is true, output is written to the current device."}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"copy",children:"Copy"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod Copy(SrcDir As %String, DstDir As %String = "", BlockSize As %Integer = 0, ByRef Msg As %String, Flags As %Integer = 0, Collation As %Integer = 5) As %Status\n'})}),"\n",(0,t.jsxs)(a.p,{children:["Copy a database to another directory.",(0,t.jsx)(a.br,{}),"\nThis method will copy a source database to a newly created destination database, and optionally replace the source database with the destination database after the copy completes. The main use of this method is to change the blocksize of a database. The destination database which is created will be created with its pages fully packed, all free space removed, and blocks re-ordered. Globals which were created with old ISM collation values of 0-4 will be created with collation 5 (Standard) when they are copied. Globals which have old ISM collations of 128 and 129 will be created with a collation of 133."]}),"\n",(0,t.jsx)(a.p,{children:"Mirrored databases can be copied however the resulting copy will not be mirrored."}),"\n",(0,t.jsx)(a.p,{children:"NOTE: This method is only for use with a local database, it does not work across ECP or on cluster mounted databases. If the database is a cluster mounted database, it must be mounted privately before using this method on it."}),"\n",(0,t.jsxs)(a.p,{children:["Parameters:",(0,t.jsx)(a.br,{}),"\nSrcDir - Source database directory to copy. This must be a valid database which is mounted on the system. During the copy operation, the Source database will be set to read only.",(0,t.jsx)(a.br,{}),'\nDstDir - New destination database directory to be created. This must be a valid directory specification for the system. If the directory does not exist, it will be created. If DstDir is not specified, then a directory named "cvt" will be created under the source directory. The device where the destination directory specified must have enough free space on it to accommodate the copy. If the destination database already exists, the method will return a failure.',(0,t.jsx)(a.br,{}),"\nBlockSize - If the block size is specified, the newly created database will be created with this size of database blocks. If the block size is not specified, the new database will be created with the same block size of the source database. If the source database is a 2KB database, the destination database will be created with the system default size. The block size specified must be a valid database block size allowed by the system as specified in the Config.Startup.AllowedBlockSizes property, and must have global buffers allocated for that size or larger in the Config.config class.",(0,t.jsx)(a.br,{}),"\nMsg (by ref) - Array of success and error messages returned by the method.",(0,t.jsx)(a.br,{}),"\nFlags - Bit string specifying the following options (Default = 0):",(0,t.jsx)(a.br,{}),"\nBit 0 - Display progress messages.",(0,t.jsx)(a.br,{}),"\nBit 1 - Do not set the source directory to read only.",(0,t.jsx)(a.br,{}),"\nBit 2 - If the destination database already exists, do not generate an error.",(0,t.jsx)(a.br,{}),"\nBit 3 - Unused.",(0,t.jsx)(a.br,{}),"\nBit 4 - Replace the source database with the destination database after the copy completes. If the source database is cluster mounted or mirrored, this option is not allowed.",(0,t.jsx)(a.br,{}),"\nWARNING: If you are replacing the source database with the destination database, you MUST make a backup of your source database before running this method.",(0,t.jsx)(a.br,{}),"\nBit 5 - Set switch 10 (freeze reads and write on the system) for the duration of the copy. Setting this bit will allow the source database to be copied and replaced by the destination database while avoiding having any processes trying to write to the database error with a protect error.",(0,t.jsx)(a.br,{}),"\nBit 6 - Write the global sets to the journal file. If the Source database is set to not be journaled, then the sets will not be journaled even if this bit is set.",(0,t.jsx)(a.br,{}),"\nBit 7 - If the original database is encrypted, do not encrypt the copy.",(0,t.jsx)(a.br,{}),"\nBit 8 - Create the destination database and all the copied globals with the passed in collation.",(0,t.jsx)(a.br,{}),"\nCollation - The destination database is created with this collation if bit 8 is set in the Flags parameter. All globals which are copied here will be created with this collation. The globals collation in the source database will be ignored. The ^COLLATE routine will give a list of the available collations on the system. The collation must be loaded and active on the system to use this parameter. Note that the system globals such as the routine and objects globals will contain to be set to collation 5 (Standard.)"]}),"\n",(0,t.jsxs)(a.p,{children:["Examples:",(0,t.jsx)(a.br,{}),"\nMake a copy of the prod database into the test directory.",(0,t.jsx)(a.br,{}),'\ns x=##Class(SYS.Database).Copy("c:\\prod\\","c:\\test\\")']}),"\n",(0,t.jsxs)(a.p,{children:["Make a copy of the prod database into the prod\\cvt directory with a block size of 16384. Messages and errors are returned in the Msg array.",(0,t.jsx)(a.br,{}),'\ns x=##Class(SYS.Database).Copy("c:\\prod\\",,16384,.Msg)']}),"\n",(0,t.jsxs)(a.p,{children:["Make a copy of the prod database into the prod\\cvt directory with a block size of 16384. After the database is copied, delete the prod database and replace it with the prod\\cvt database. Success and error messages are displayed to the screen.",(0,t.jsx)(a.br,{}),'\ns x=##Class(SYS.Database).Copy("c:\\prod\\",,16384,.Msg,1+16)']}),"\n",(0,t.jsxs)(a.p,{children:["Make a copy of the prod database into the prod\\cvt directory with a block size of 16384. Write all the global sets into the journal.",(0,t.jsx)(a.br,{}),'\ns x=##Class(SYS.Database).Copy("c:\\prod\\","c:\\test\\,16384,.Msg,64)']}),"\n",(0,t.jsxs)(a.p,{children:["Combine 2 different databases into one test database.",(0,t.jsx)(a.br,{}),'\ns x=##Class(SYS.Database).Copy("c:\\prod\\","c:\\test\\,,.Msg,4)',(0,t.jsx)(a.br,{}),'\ns x=##Class(SYS.Database).Copy("c:\\prod1\\","c:\\test\\,,.Msg,4)']}),"\n",(0,t.jsxs)(a.p,{children:["Copy the source to the destination, change the blocksize to 32768, then replace the source with the destination. Processes on the system will be frozen while the copy runs. This is useful if you want to do this and not have any processes which write to the database error with a protect error.",(0,t.jsx)(a.br,{}),'\ns x=##Class(SYS.Database).Copy("c:\\prod\\","c:\\test\\,32768,.Msg,16+32)']}),"\n",(0,t.jsxs)(a.p,{children:["Change the system database to use an 8192 block size. Freeze the system while the database is copied. This is useful to convert the system database while the system is up and running.",(0,t.jsx)(a.br,{}),"\ns x=##Class(SYS.Database).Copy($zu(12),,8192,.Msg,16+32)"]}),"\n",(0,t.jsxs)(a.p,{children:["Change the collation of all the globals to Danish.",(0,t.jsx)(a.br,{}),'\ns x=##Class(SYS.Database).Copy("c:\\prod\\","c:\\test\\",8192,.Msg,256,15)']}),"\n",(0,t.jsx)(a.h3,{id:"jobcompactdatabase",children:"JobCompactDatabase"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod JobCompactDatabase(Directory As %String, PercentFull As %Integer = 90, ByRef LogFile As %String) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compact all globals in a database, using a background job."}),"\n",(0,t.jsx)(a.h3,{id:"jobcompact",children:"JobCompact"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod JobCompact(Directory As %String, PercentFull As %Integer = 90, LogFile As %String) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Background routine for compacting a database."}),"\n",(0,t.jsx)(a.h3,{id:"dbcompactstatus",children:"DBCompactStatus"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod DBCompactStatus(Directory As %String, ByRef State As %Integer, ByRef LogFile As %String) As %Status\n"})}),"\n",(0,t.jsxs)(a.p,{children:["Check the state of a background database compaction.",(0,t.jsx)(a.br,{}),"\nState = 0-(in progress), 1-(finished), 2-(no compaction logged)"]}),"\n",(0,t.jsx)(a.h3,{id:"createone",children:"CreateOne"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod CreateOne(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"create",children:"Create"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod Create(Directory As %String, ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(a.p,{children:["Create a database using a Properties() array.",(0,t.jsx)(a.br,{}),"\nIf the directory does not exist, it will first create it.",(0,t.jsx)(a.br,{}),"\nif the directory and database already exists, it will return success."]}),"\n",(0,t.jsx)(a.h3,{id:"createdatabase",children:"CreateDatabase"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod CreateDatabase(Directory As %String, Size As %Integer = 1, BlockSize As %Integer = {$$$DefaultDatabaseBlockSize}, EncryptedDB As %Boolean = 0, Resource As %String = {$$$DBDEFAULTResourceName}, GlobalJournalState As %Integer, MirrorDBName As %String = "", MirrorSetName As %String = "", RunCatchupDB As %Boolean = 1, MaxSize = 0, ExpansionSize = 0, NewGlobalIsKeep = 0, NewGlobalCollation = {##Class(%Library.Collate).GetSystemDefaultNumber()}, NewVolumeThreshold = 0) As %Status\n'})}),"\n",(0,t.jsx)(a.p,{children:"Create a database. This assumes the Directory has been created. The Directory can be a relative or absolute path. The Size is in MB. Only the Directory is required."}),"\n",(0,t.jsx)(a.h3,{id:"createdefaultglobals",children:"CreateDefaultGlobals"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod CreateDefaultGlobals(Directory As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Create all the necessary system globals in a database."}),"\n",(0,t.jsx)(a.h3,{id:"fixdefaultglobalcollation",children:"FixDefaultGlobalCollation"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FixDefaultGlobalCollation(Directory As %String, Flags As %Integer = 0, ByRef Messages As %String) As %Status\n"})}),"\n",(0,t.jsxs)(a.p,{children:["Set the default system globals in a database to have the correct Standard collation.",(0,t.jsx)(a.br,{}),"\nBit 0 - If not set, only diagnose errors and do not modify the database Bit 1 - Do not set switch 10 during the operation Bit 2 - Do not print message array to principal device"]}),"\n",(0,t.jsx)(a.h3,{id:"createglobal",children:"CreateGlobal"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod CreateGlobal(Directory As %String, Name As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Create a global in a directory with the default unicode collation."}),"\n",(0,t.jsx)(a.h3,{id:"delete",children:"Delete"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method Delete() As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Delete a database."}),"\n",(0,t.jsx)(a.h3,{id:"deletedatabase",children:"DeleteDatabase"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod DeleteDatabase(Directory As %String) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Delete a database."}),"\n",(0,t.jsx)(a.h3,{id:"deleteone",children:"DeleteOne"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod DeleteOne(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"directoryset",children:"DirectorySet"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method DirectorySet(Arg As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Overrides the directory set method"}),"\n",(0,t.jsx)(a.h3,{id:"dismount",children:"Dismount"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method Dismount() As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Dismount a database."}),"\n",(0,t.jsx)(a.h3,{id:"dismountdatabase",children:"DismountDatabase"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod DismountDatabase(Directory As %String) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Dismount a database."}),"\n",(0,t.jsx)(a.h3,{id:"encryptdatabase",children:"EncryptDatabase"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod EncryptDatabase(Directory As %String) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"This method encrypts a database using the default key for encrypting new databases. The database must be dismounted, and the default database encryption key must be activated. If the database is already encrypted, it will be re-encrypted."}),"\n",(0,t.jsxs)(a.p,{children:["Input parameters:",(0,t.jsx)(a.br,{}),"\nDirectory - the database's directory path (either absolute or relative to the installation directory)"]}),"\n",(0,t.jsx)(a.p,{children:"Return value: Return status."}),"\n",(0,t.jsx)(a.h3,{id:"decryptdatabase",children:"DecryptDatabase"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod DecryptDatabase(Directory As %String) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"This method decrypts a database. The database must be dismounted, and the database encryption key that was used to encrypt the database must be activated."}),"\n",(0,t.jsxs)(a.p,{children:["Input parameters:",(0,t.jsx)(a.br,{}),"\nDirectory - the database's directory path (either absolute or relative to the installation directory)"]}),"\n",(0,t.jsx)(a.p,{children:"Return value: Return status."}),"\n",(0,t.jsx)(a.h3,{id:"encrypteddbprompt",children:"EncryptedDBPrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod EncryptedDBPrompt(Prompt, Obj) [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Prompt for changing encrypted database attribute"}),"\n",(0,t.jsx)(a.h3,{id:"expansionsizeisvalid",children:"ExpansionSizeIsValid"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod ExpansionSizeIsValid(Value, BlockSize = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"expansionsizeprompt",children:"ExpansionSizePrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod ExpansionSizePrompt(Prompt, Obj) [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Prompt for expansion size."}),"\n",(0,t.jsx)(a.h3,{id:"findmapblock",children:"FindMapBlock"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method FindMapBlock(map, bigval) As %Integer [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"getdatabasefreespace",children:"GetDatabaseFreeSpace"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod GetDatabaseFreeSpace(Directory As %String, ByRef FreeSpace As %Float) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Return number of MB of free space in a database."}),"\n",(0,t.jsx)(a.h3,{id:"getdirectory",children:"GetDirectory"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod GetDirectory(Prompt, Value, Obj, Min, Max, Help, Flag, Timeout) As %Integer\n"})}),"\n",(0,t.jsx)(a.p,{children:"Prompt for a directory."}),"\n",(0,t.jsx)(a.h3,{id:"getfreespace",children:"GetFreeSpace"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod GetFreeSpace(Directory As %String, ByRef FreeSpace As %Float, ByRef FreeBlocks As %Integer) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Return number of MB of free space in a database, and the number of FreeBlocks"}),"\n",(0,t.jsx)(a.h3,{id:"integritycheck",children:"IntegrityCheck"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod IntegrityCheck(Dirnames As %String) As %String\n"})}),"\n",(0,t.jsx)(a.p,{children:"This runs an integrity check on all or selected databases. For selected databases pass a list of directory names."}),"\n",(0,t.jsx)(a.h3,{id:"loadfields",children:"LoadFields"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod LoadFields(Field, Obj, Old) [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Load field info for editing."}),"\n",(0,t.jsx)(a.h3,{id:"newvolumethresholdprompt",children:"NewVolumeThresholdPrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod NewVolumeThresholdPrompt(Prompt, Obj) As %Integer [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"maxsizeisvalid",children:"MaxSizeIsValid"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod MaxSizeIsValid(Value) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"maxsizeprompt",children:"MaxSizePrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod MaxSizePrompt(Prompt, Obj) [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"prompt for max size."}),"\n",(0,t.jsx)(a.h3,{id:"modifydatabase",children:"ModifyDatabase"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod ModifyDatabase(Directory As %String, Size As %Integer, Resource As %String, GlobalJournalState As %Integer) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Modifies parameters of a database."}),"\n",(0,t.jsx)(a.h3,{id:"modify",children:"Modify"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod Modify(Directory As %String, ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"modifyone",children:"ModifyOne"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod ModifyOne(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"modifyvolumedirectorylist",children:"ModifyVolumeDirectoryList"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod ModifyVolumeDirectoryList(Directory As %String, VolDirs As %List, NewVolDirNum As %Integer = 0) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Writes a new VolumeDirectoryList to a dismounted multi-volume database."}),"\n",(0,t.jsx)(a.p,{children:"This method is to be used when the directories used to store volumes of the database have changed in order to allow the database to be mounted, such as when a copy of the database volumes are restored to a different directory structure (perhaps on a different system). This method can also be used when volumes of the databases are consolidated from multiple directories back into a smaller number of directories, to remove the unneeded directories from the list. Note: the primary database directory (the directory containing the IRIS.DAT) is never needed in the VolumeDirectoryList, as that directory is implictly included in the search for volumes."}),"\n",(0,t.jsx)(a.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Directory - primary database directory (location of the IRIS.DAT)"}),"\n",(0,t.jsx)(a.li,{children:"VolDirs - the new value of VolumeDirectoryList to write\nNewVolDirNum - the number corresponding to the list element in the VolDirs parameter that is to be the new NewVolumeDirectory, or 0 for the primary directory"}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"The database must be dismounted and must have been configured for multiple volumes in the past (e.g. it has multiple volumes or has a non-null VolumeDirectoryList). Otherwise and error is returned"}),"\n",(0,t.jsx)(a.p,{children:"The directories in the VolDirs parameter must have no duplicates and must be different than the primary database directory or an error is returned. If any directory in the list already contains an iris.dbdir file indicating the primary volume directory for volumes in that directory, then it must match the primary volume directory or its an error. A new iris.dbdir file will be written to each directory that doesn't have one."}),"\n",(0,t.jsx)(a.h3,{id:"usevolumedirectory",children:"UseVolumeDirectory"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod UseVolumeDirectory(Directory As %String, VolDir As %String, Mode As %Integer = 0, EnforceNoVol As %Boolean = 1, Output Already As %Boolean) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Manages claiming a directory for use as an additional volume directory for a given database. This is done via the iris.dbdir file, which users may also control externally when moving / copying / restoring multi-volume databases."}),"\n",(0,t.jsx)(a.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Directory - primary database directory (location of the IRIS.DAT)"}),"\n",(0,t.jsx)(a.li,{children:"VolDir - the additional volume directory to act on"}),"\n",(0,t.jsx)(a.li,{children:"Mode - see below"}),"\n",(0,t.jsx)(a.li,{children:"EnforceNoVol - True(default): enforce that 'VolDir' must not already contain any volumes, and if it does it's an error. False: no enforcement is done. This parameter is ignored when 'Mode' is 3.\nAlready - set to true upon returning $$$OK if and only if the volume directory was found to have been claimed for this database already.  'Mode' parameter is one of:"}),"\n",(0,t.jsx)(a.li,{children:"0 - Check: returns $$$OK if the volume directory is already claimed as for this database; else error."}),"\n",(0,t.jsx)(a.li,{children:"1 - IsAvailable?: returns $$$OK if the volume directory is already claimed for this database or is unclaimed; else error."}),"\n",(0,t.jsx)(a.li,{children:"2 - Claim: claims the directory if unclaimed and returns $$$OK on success or if it was already claimed for this database; else error.\n3 - Disclaim: removes the claim and returns $$$OK on success or if the directory was unclaimed; else error."}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"mount",children:"Mount"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method Mount(readonly As %Boolean = 0, cluster As %Boolean = 0, mirrorcatchup As %Boolean = 1) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Mount a database"}),"\n",(0,t.jsx)(a.p,{children:"Uses Readonly, ClusterMountMode and Mirrored properties"}),"\n",(0,t.jsx)(a.p,{children:"Input Parameters:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"readonly defaults to 0 (not readonly). When True causes the database which would normally be mounted read-write to be mounted read-only. Normally a database is only mounted read-only if is not writeable (due to protection or filesystem issues) or if the internal database read-only property is set."}),"\n",(0,t.jsx)(a.li,{children:"cluster defaults to 0 (private mount). This is ignored on non-cluster members. On a cluster member setting this to 1 causes the database to be mounted for clustered (shared) access. If the system is not a cluster member, this will cause the system to try to join the cluster."}),"\n",(0,t.jsx)(a.li,{children:'mirrorcatchup defaults to 1 (start catchup). This parameter is ignored if the system is not a mirror member or if the database being mounted is not a mirrored database. When set to 1 database catchup is started when a mirrored database is successfully mounted. If the current system is an async member which has stopped dejournaling, catchup will run up to the point that dejournaling was stopped (for example, the database will be made "as current" as the other mirrored databases). Otherwise catchup will apply as much journal data as possible and try to link the database into the active dejournaling system. When set to 0 catchup is not started after the mount and must be started manually later. When mounting several mirrored databases it is best to not start catchup as part of the mount but rather start catchup for all the databases using the ^MIRROR utility after they have all been mounted. This is much more efficient as catchup will make a single pass through the journal files to cover all the databases rather than running though the journal files for each database.'}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"mountdatabase",children:"MountDatabase"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod MountDatabase(Directory As %String, readonly As %Boolean = 0, cluster As %Boolean = 0, mirrorcatchup As %Boolean = 1) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Mount a database."}),"\n",(0,t.jsx)(a.h3,{id:"defragment",children:"Defragment"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod Defragment(Directory As %String) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Rearranges global blocks within the database specified by Directory so that all of the data blocks for a given global are in consecutive sequence and packed to at least 70% full. The operation does not place big string blocks or pointer blocks from a global in sequence, but it does locate them in a contiguous area."}),"\n",(0,t.jsx)(a.p,{children:"Defragment requires enough free space at the end of the database file to temporarily store all data blocks. If there is insufficient free space at the end, the database will expand as necessary. The amount of free space required is equal to the space in use plus 20MB working space. You may be able to create additional free space at the end by first running FileCompact. Following the defragmentation you can return unused space at the end of the database file with ReturnUnusedSpace."}),"\n",(0,t.jsx)(a.p,{children:"This method is not available on VMS"}),"\n",(0,t.jsx)(a.h3,{id:"defragmentcheck",children:"DefragmentCheck"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod DefragmentCheck(Directory, Output dbobj, Output datasize, Output endfree, Output freespace, Output expreq, Output overmax) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Helper method to evaluate the viability of defragmenting a database. Returns an error status if the database is not elligible or the user doesn't have enough privilege."}),"\n",(0,t.jsx)(a.p,{children:"Upon success, output variables contain database size statistics related to defragmentation. The UI should check 'overmax'; if true, there probably isn't enough expansion space available for defragmentation to succeed. In either case, 'expreq' indicates the amount by which defragmentation is expected to need to expand the database. If (freespace-endfree) is a substantial number of MB, then a FileCompact call could make more free space available at the end for defragmentation to use, thus reducing or eliminating the expansion requirement."}),"\n",(0,t.jsx)(a.p,{children:"Output parameters:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"dbobj - SYS.Database oref"}),"\n",(0,t.jsx)(a.li,{children:"datasize - MB of space used"}),"\n",(0,t.jsx)(a.li,{children:"endfree - MB of space free at the end of the database"}),"\n",(0,t.jsx)(a.li,{children:"freespace - total free space in the database"}),"\n",(0,t.jsx)(a.li,{children:"expreq - the approximate (worst case) amount of expansion that defragment will cause"}),"\n",(0,t.jsx)(a.li,{children:"overmax - the amount by which 'expreq' exceeds the available expansion space"}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"filecompact",children:"FileCompact"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FileCompact(Directory As %String, TargetFree As %Integer = 0, ByRef ActualFree As %Integer) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Moves free space distributed throughout the database file to its end. You can then return the free space to the file system using ReturnUnusedSpace."}),"\n",(0,t.jsx)(a.p,{children:"FileCompact starts at the end of the database file, moving in-use blocks into free space at the beginning. It stops when there is no more free space available, or there is at least TargetFree MB of free space at the end of the file. Specifying 0 for TargetFree reports the amount of free space located at the end of the file without moving any blocks."}),"\n",(0,t.jsx)(a.p,{children:"This method is not available on VMS"}),"\n",(0,t.jsx)(a.p,{children:"Input Parameters:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Directory - the database directory"}),"\n",(0,t.jsx)(a.li,{children:"TargetFree - the desired amount of free space (in MB) at the end of the database."}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"Output Parameters:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"ActualFree - returns the total amount of space (in MB) at the end of the database which can be returned by truncation. The amount of space available for data storage may be slightly smaller as there are internal control structures which can be freed by trunction but are required if the space is used for data storage."}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"newvolume",children:"NewVolume"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod NewVolume(Directory As %String, NewVolDir As %String, InitialSize As %Integer) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Expands a database into a new volume in a specified directory. This may be used to expand the database into another storage device with more space, preventing further expansion of the current last volume in the storage device where it resides. It can also be used to create a new volume in the same directory to limit individual file sizes (though the NewVolumeThreshold can be used to perform that function automatically)."}),"\n",(0,t.jsx)(a.p,{children:"The directory where the new volume is created must be specified in the 'NewVolDir' parameter. The directory may be the same directory as the IRIS.DAT file, another directory that already contains volumes of this database, or a different directory. If the directory doesn't exist, it will be created. This directory will also be set as the NewVolumeDirectory and it will therefore be used for any further volumes created automatically due to the NewVolumeThreshold."}),"\n",(0,t.jsx)(a.p,{children:"The 'InitialSize' parameter specifies the initial size of the volume in MB. If NewVolumeThreshold is non-zero, it is taken as an upper bound to InitialSize."}),"\n",(0,t.jsx)(a.h3,{id:"checkvolumedirectorymax",children:"CheckVolumeDirectoryMax"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method CheckVolumeDirectoryMax(NormalizedNewVolDir As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Returns $$$OK if there's room in the volume directory list to store a volume direcotry, or if it's already used by this database. This is a helper used to screen a volume directory prior to taking action. NormalizedNewVolDir must have already been normalized by the caller."}),"\n",(0,t.jsx)(a.h3,{id:"returnunusedspace",children:"ReturnUnusedSpace"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod ReturnUnusedSpace(Directory As %String, TargetSize As %Integer = 0, ByRef ReturnSize As %Integer) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"Free blocks at the end of the database file are returned to the physical filesystem, and the file is shortened."}),"\n",(0,t.jsx)(a.p,{children:"TargetSize is the desired size in MB of the resulting file. Specify 0 to return all available freespace at the end of the file. On success, ReturnSize is set to the new file size in MB."}),"\n",(0,t.jsx)(a.p,{children:"Fails and returns error status if a conflicting database operation is in progress in the same database. Conflicting operations include expansion, backup, defragmentation, compaction and ReturnUnusedSpace."}),"\n",(0,t.jsx)(a.p,{children:"Note: Since freespace is not returned all at once when a global is killed, but rather done in the background, there may be a delay following the kill before the space is available to be returned."}),"\n",(0,t.jsx)(a.p,{children:"This method is not available on VMS"}),"\n",(0,t.jsx)(a.h3,{id:"newglobalcollationprompt",children:"NewGlobalCollationPrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod NewGlobalCollationPrompt(Prompt, Obj) [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"prompt for default collation."}),"\n",(0,t.jsx)(a.h3,{id:"newglobaliskeepprompt",children:"NewGlobalIsKeepPrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod NewGlobalIsKeepPrompt(Prompt, Obj) [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Prompt to preserver global attributes on deletion."}),"\n",(0,t.jsx)(a.h3,{id:"globaljournalstateget",children:"GlobalJournalStateGet"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method GlobalJournalStateGet() As %JournalState [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"globaljournalstateprompt",children:"GlobalJournalStatePrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod GlobalJournalStatePrompt(Prompt, Obj)\n"})}),"\n",(0,t.jsx)(a.p,{children:"prompt for global journal state."}),"\n",(0,t.jsx)(a.h3,{id:"mirrordbnameprompt",children:"MirrorDBNamePrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod MirrorDBNamePrompt(Prompt, Obj) [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"prompt for mirror database name"}),"\n",(0,t.jsx)(a.h3,{id:"mirrorsetnameprompt",children:"MirrorSetNamePrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod MirrorSetNamePrompt(Prompt, Obj) [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"prompt for mirror set name"}),"\n",(0,t.jsx)(a.h3,{id:"newglobalpointerblockprompt",children:"NewGlobalPointerBlockPrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod NewGlobalPointerBlockPrompt(Prompt, Obj) [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Prompt for new global's pointer block."}),"\n",(0,t.jsx)(a.h3,{id:"newglobalgrowthblockprompt",children:"NewGlobalGrowthBlockPrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod NewGlobalGrowthBlockPrompt(Prompt, Obj) [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Prompt for new global's pointer block."}),"\n",(0,t.jsx)(a.h3,{id:"packzu27error",children:"PackZU27Error"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod PackZU27Error(rc As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Packages the errors from $zu(27)"}),"\n",(0,t.jsx)(a.h3,{id:"readonlyprompt",children:"ReadOnlyPrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod ReadOnlyPrompt(Prompt, Obj) [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Prompt for changing read only attribute"}),"\n",(0,t.jsx)(a.h3,{id:"resourcenameprompt",children:"ResourceNamePrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod ResourceNamePrompt(Prompt, Obj) [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"prompt for database resource name"}),"\n",(0,t.jsx)(a.h3,{id:"silentintegritycheck",children:"SilentIntegrityCheck"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod SilentIntegrityCheck(Filename As %String, dirlist As %String, gbllist As %String = "", StopAfterAnyError As %Boolean = 0) As %Status\n'})}),"\n",(0,t.jsx)(a.p,{children:"This class method starts a job that checks the integrity of globals in one or more databases."}),"\n",(0,t.jsx)(a.p,{children:"The parameters are:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Filename - File to store results in"}),"\n",(0,t.jsx)(a.li,{children:"dirlist - Optional $list of directories that contain databases to check, by default all databases are checked."}),"\n",(0,t.jsx)(a.li,{children:"gbllist - Optional $list of globals to check,if specified then dirlist must contain a single database."}),"\n",(0,t.jsx)(a.li,{children:"StopAfterAnyError - set true to stop on error."}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"sizeprompt",children:"SizePrompt"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod SizePrompt(Prompt, Obj) [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Prompt for database size."}),"\n",(0,t.jsx)(a.h3,{id:"viewintegritylog",children:"ViewIntegrityLog"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod ViewIntegrityLog(Filename As %String) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"This displays the contents of a file containing the output from a previous call to ##class(SYS.Database).SilentIntegrityCheck(filename) on the current device"}),"\n",(0,t.jsx)(a.h3,{id:"detailexecute",children:"DetailExecute"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod DetailExecute(ByRef qHandle As %Binary, Mask As %String = "*", Unused As %Boolean = 0) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(a.p,{children:"Provides detail of all local databases (mounted or dismounted) in the systems SFN table."}),"\n",(0,t.jsxs)(a.p,{children:["Parameters:",(0,t.jsx)(a.br,{}),'\nMask="*" or $lb(directory1,directory2,...)',(0,t.jsx)(a.br,{}),"\nNotes:",(0,t.jsx)(a.br,{}),"\nDatabases which are never mounted are not returned by this query. For example, if the databases in Config.Databases were not mounted at startup, they won't be returned in this query.",(0,t.jsx)(a.br,{}),'\nThe Status field is the mount status of the database, and how it is mounted, e.g. "Mounted/RW"']}),"\n",(0,t.jsx)(a.h3,{id:"detailfetch",children:"DetailFetch"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod DetailFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"detailclose",children:"DetailClose"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod DetailClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = DetailExecute ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"freespaceexecute",children:"FreeSpaceExecute"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod FreeSpaceExecute(ByRef qHandle As %Binary, Mask As %String = "*", Unused As %Boolean = 0) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(a.p,{children:"Provides a freespace list of all local databases mounted in this configuration."}),"\n",(0,t.jsxs)(a.p,{children:["Note that calculating the free space may take a while.",(0,t.jsx)(a.br,{}),"\nParameters:",(0,t.jsx)(a.br,{}),'\nMask="*" or $lb(directory1,directory2,...)',(0,t.jsx)(a.br,{}),"\nFor the FreeSpace Report, You can also enter the following in order to select by database name:",(0,t.jsx)(a.br,{}),'\n"String,String1" - Any name matching one of these elements',(0,t.jsx)(a.br,{}),'\n"String*" - Any Name starting with "String"',(0,t.jsx)(a.br,{}),'\n"String,String1*,String2" - Any Name matching one of these elements, or starting with "String1"',(0,t.jsx)(a.br,{}),"\nNotes: Databases which are not mounted are not returned by this query."]}),"\n",(0,t.jsx)(a.h3,{id:"freespacefetch",children:"FreeSpaceFetch"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FreeSpaceFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"freespaceclose",children:"FreeSpaceClose"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FreeSpaceClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = FreeSpaceExecute ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"integrityexecute",children:"IntegrityExecute"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod IntegrityExecute(ByRef qHandle As %Binary, Mask As %String, Filename As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"This runs an integrity check of all local databases mounted in this configuration."}),"\n",(0,t.jsxs)(a.p,{children:["Note that calculating the integrity may take a while.",(0,t.jsx)(a.br,{}),"\nParameters:",(0,t.jsx)(a.br,{}),'\nMask="*" or $lb(directory1,directory2,...)',(0,t.jsx)(a.br,{}),"\nFilename - Filename to write Integrity output to",(0,t.jsx)(a.br,{}),"\nNotes: Databases which are not mounted are not returned by this query."]}),"\n",(0,t.jsx)(a.h3,{id:"integrityfetch",children:"IntegrityFetch"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod IntegrityFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = IntegrityExecute ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"integrityclose",children:"IntegrityClose"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod IntegrityClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = IntegrityExecute ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod ListExecute(ByRef qHandle As %Binary, Mask As %String = "*", Unused As %Boolean = 0, Flag As %Integer = 0, Filename As %String) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(a.p,{children:"Provides a list of all local databases (mounted or dismounted) in the systems SFN table."}),"\n",(0,t.jsxs)(a.p,{children:["Parameters:",(0,t.jsx)(a.br,{}),'\nMask="*" or $lb(directory1,directory2,...)',(0,t.jsx)(a.br,{}),"\nNotes:",(0,t.jsx)(a.br,{}),'\nThe Status field is the mount status of the database, and how it is mounted, e.g. "Mounted/RW"',(0,t.jsx)(a.br,{}),"\nDatabases which are never mounted are not returned by this query. For example, if the databases in Config.Databases were not mounted at startup, they won't be returned in this query.",(0,t.jsx)(a.br,{}),"\nCommon routine for database queries."]}),"\n",(0,t.jsxs)(a.p,{children:["Parameters:",(0,t.jsx)(a.br,{}),'\nMask="*" or $lb(directory names)',(0,t.jsx)(a.br,{}),"\nFlag - Internal use only",(0,t.jsx)(a.br,{}),"\nFlag=0 - Return List columns",(0,t.jsx)(a.br,{}),"\nFlag=1 - Return FreeSpace columns (this may take a while to execute)",(0,t.jsx)(a.br,{}),"\nFlag=2 - Return Detail columns",(0,t.jsx)(a.br,{}),"\nFlag=3 - Return Integrity columns (this may take a while to execute)",(0,t.jsx)(a.br,{}),"\nFlag=4 - Return Compact columns",(0,t.jsx)(a.br,{}),"\nFilename - Used for Integrity Query only"]}),"\n",(0,t.jsx)(a.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"listclose",children:"ListClose"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"remotedatabaselistexecute",children:"RemoteDatabaseListExecute"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod RemoteDatabaseListExecute(ByRef qHandle As %Binary, Server As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(a.p,{children:"Returns a list of all remote databases for the passed server mounted on this configuration."}),"\n",(0,t.jsx)(a.h3,{id:"remotedatabaselistfetch",children:"RemoteDatabaseListFetch"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod RemoteDatabaseListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = RemoteDatabaseListExecute ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"remotedatabaselistclose",children:"RemoteDatabaseListClose"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod RemoteDatabaseListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = RemoteDatabaseListExecute ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"remotedatabaselistsmpexecute",children:"RemoteDatabaseListSMPExecute"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod RemoteDatabaseListSMPExecute(ByRef qHandle As %Binary, RemoteServer As %String, HowToLoad As %Integer = 1) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"remotedatabaselistsmpfetch",children:"RemoteDatabaseListSMPFetch"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod RemoteDatabaseListSMPFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = RemoteDatabaseListSMPExecute ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"remotedatabaselistsmpclose",children:"RemoteDatabaseListSMPClose"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod RemoteDatabaseListSMPClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = RemoteDatabaseListSMPExecute ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"remotegloballistexecute",children:"RemoteGlobalListExecute"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod RemoteGlobalListExecute(ByRef qHandle As %Binary, Server As %String = "", Dir As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(a.p,{children:"Returns a list of globals on the passed server and directory."}),"\n",(0,t.jsx)(a.h3,{id:"remotegloballistfetch",children:"RemoteGlobalListFetch"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod RemoteGlobalListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = RemoteDatabaseListExecute ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"remotegloballistclose",children:"RemoteGlobalListClose"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod RemoteGlobalListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = RemoteDatabaseListExecute ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"formatsizes",children:"FormatSizes"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FormatSizes(val As %Float, RoundDown As %Integer = 0) As %Float\n"})}),"\n",(0,t.jsx)(a.p,{children:"Used for formatting database and global sizes in MB, GB, or TB"}),"\n",(0,t.jsx)(a.h3,{id:"compactlocallistexecute",children:"CompactLocalListExecute"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod CompactLocalListExecute(ByRef qHandle As %Binary, Mask As %String = "*") As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(a.p,{children:"This is a quick query for list of databases."}),"\n",(0,t.jsxs)(a.p,{children:['Mask="*" or $lb(directory1,directory2,...)',(0,t.jsx)(a.br,{}),"\nReturns SFN, directory, Read Only status, Resource Name, Block size and Collation."]}),"\n",(0,t.jsx)(a.h3,{id:"compactlocallistfetch",children:"CompactLocalListFetch"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod CompactLocalListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = CompactLocalListExecute ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"compactlocallistclose",children:"CompactLocalListClose"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod CompactLocalListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = CompactLocalListExecute ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"volumefilesgetarray",children:"VolumeFilesGetArray"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod VolumeFilesGetArray(ByRef qHandle As %Binary, Directory As %SysPath, ByRef ExFlags As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Returns information about each volume that comprise a particular database. If the database is mounted in a normal state, information is returned from memory; otherwise it is fetched from disk."}),"\n",(0,t.jsxs)(a.p,{children:["Parameters:",(0,t.jsx)(a.br,{}),"\nDirectory - database directory",(0,t.jsx)(a.br,{}),'\nByVolDir - 0/1: If 1 and VolumeDirectoryList is not null then the results will ordered by VolumeDirectory (starting with the primary directory), and any directory that has no volumes will be returned in a row with File="*None*" (for display purposes) and VolumeNumber=-1. If 0 then rows are returned in volume order, and any empty VolumeDirectory is ignored.']}),"\n",(0,t.jsx)(a.p,{children:"Each row returned contains:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:'VolumeNumber - 0 for IRIS.DAT, 1..n for additional volumes, or -1 when File is "*None*" (see below)'}),"\n",(0,t.jsx)(a.li,{children:'VolumeDirectory - Either Directory, one of the directories in the VolumeDirectoryList, or "*Unknown*" if a volume is missing and its location is uncertain (see below).'}),"\n",(0,t.jsx)(a.li,{children:'File - File name for the volume or a special value beginning with "*" as described below'}),"\n",(0,t.jsx)(a.li,{children:"Size - Size of volume in MB"}),"\n",(0,t.jsx)(a.li,{children:"VolumeDirectoryTotalSize - Size in MB of all volumes in the VolumeDirectory\nDiskFree - Free space on disk containing the volume in MB; -1 on error."}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"Special Flags"}),"\n",(0,t.jsx)(a.p,{children:'File="*None*" and VolumeNumber=-1 indicates a row being returned where VolumeDirectory is a directory in the VolumeDirectoryList that contains no volumes.'}),"\n",(0,t.jsx)(a.p,{children:'File contains "*Missing*" followed by the file name if the volume wasn\'t found. In that case, VolumeDirectory="*Unknown*" if there are more than one directory where it could be found (because VolumeDirectoryList is non-null).'}),"\n",(0,t.jsx)(a.p,{children:'File contains "*Conflict*" followed by the file name if the file appears in more than one directory. Build up array of the following form'}),"\n",(0,t.jsxs)(a.p,{children:['qHandle("d",voldir#) = $lb(voldir,totalsizeinMB,numvols,diskfreespaceinMB)',(0,t.jsx)(a.br,{}),'\nqHandle("d",voldir#,vol#) = ""',(0,t.jsx)(a.br,{}),'\nqHandle("v",vol#,voldir#) = $lb(sizeinMB,flag)']}),"\n",(0,t.jsx)(a.p,{children:"Exceptional cases:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:'If the volume couldn\'t be found (when returning info from disk) sizeinMB will be 0, flag will be "m" for missing, and voldir# will be 0 if there are no additional directories, or 1 beyond the last, with voldir="*Unknown*" if the directory is unknown.\nIf a volume is found in more than one directory (when returning info from disk), flag will be "c" to indicate the conflict, the volume will appear under multiple "v" and "d" array nodes.'}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"volumefilesexecute",children:"VolumeFilesExecute"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod VolumeFilesExecute(ByRef qHandle As %Binary, Directory As %SysPath, ByVolDir As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"volumefilesfetch",children:"VolumeFilesFetch"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod VolumeFilesFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PublicList = qHandle ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"volumefilesclose",children:"VolumeFilesClose"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod VolumeFilesClose(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"candatabasebemirrored",children:"CanDatabaseBeMirrored"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod CanDatabaseBeMirrored(Directory As %String) As %Boolean [ Internal ]\n"})}),"\n",(0,t.jsx)(a.h3,{id:"issystemdb",children:"IsSystemDB"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod IsSystemDB(Directory As %String) As %Boolean\n"})}),"\n",(0,t.jsx)(a.p,{children:"Check whether the database directory path is configured as a system database (the DB name as IRISSYS, IRISLIB, IRISLOCALDATA, IRISTEMP, IRISAUDIT, IRISMETRICS)."}),"\n",(0,t.jsx)(a.h3,{id:"clearmirrorfailoverdb",children:"ClearMirrorFailoverDB"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod ClearMirrorFailoverDB(Directory As %String) As %Status\n"})}),"\n",(0,t.jsx)(a.p,{children:"This method will clear the MirrorFailoverDB flag in this mirrored DB."}),"\n",(0,t.jsx)(a.h3,{id:"parsezu49info",children:"ParseZU49Info"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Method ParseZU49Info(x As %String, setupMirrorFields As %Boolean) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"This method takes the return string from $ZU(49) and populates the various class parameters with the values. This method only processes zu(49) parameters which come from the characteristics of the database, not its current state. For instance, the sfn is set to SFN_UNDEF, the cluster mount mode is not processed, the mirror state is not considered. This is because depending on who calls this method, we may or may not want that information (yet) so we leave it to the caller to deal with."}),"\n",(0,t.jsx)(a.h3,{id:"clone",children:"Clone"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod Clone(srcDir As %String, destDir As %String, mirrorDBname As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(a.p,{children:'Copy the contents of the non-mirror database at "srcDir" into a new database "destDir". If "mirrorDBname" is provided, the instance is mirrored, and this member is the primary when this method is invoked, the new database will be added to the mirror prior to the copy, ensuring that the contents will be replicated on the backup member if it joins the mirror before journals are flushed.'})]})}function c(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},28453:(e,a,s)=>{s.d(a,{R:()=>l,x:()=>i});var t=s(96540);const r={},n=t.createContext(r);function l(e){const a=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(n.Provider,{value:a},e.children)}}}]);