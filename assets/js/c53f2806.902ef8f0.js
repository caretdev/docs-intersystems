"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[89572],{43224:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>r,default:()=>l,frontMatter:()=>a,toc:()=>o});var s=t(74848),i=t(28453);const a={pagination_prev:null,pagination_next:null},r="%SYSTEM.ECP",o=[{value:"Methods",id:"methods",level:2},{value:"Sync",id:"sync",level:3},{value:"GetClientIndex",id:"getclientindex",level:3}];function c(e){const n={br:"br",code:"code",em:"em",function:"function",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"systemecp",children:"%SYSTEM.ECP"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Class %SYSTEM.ECP Extends Help [ Abstract, System = 4 ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"This class contains special runtime functions for interacting with ECP. The management-related API is found in SYS.ECP."}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"sync",children:"Sync"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Sync(index As %Integer) As %Integer\n"})}),"\n",(0,s.jsx)(n.p,{children:"Forces synchronization of this application server's cache with the data server. This method can be used in special cases where an application requires the latest data to be visible without the use of normal synchronization mechanisms such as locking."}),"\n",(0,s.jsxs)(n.p,{children:["Upon successful completion, all updates from this application server will be visible on the data server, and any updates visible on the data server as of the time of the Sync request will be visible on this application server. Note that the data made visible is ",(0,s.jsx)(n.strong,{children:"not"})," guaranteed to be durable on disk. For more info, see ",(0,s.jsx)(n.em,{children:"ECP Recovery Guarantees and Limitations"})," in the ",(0,s.jsx)(n.em,{children:"Distributed Data Management Guide"}),', "Dirty Data Reads without Locking" limitation. Due to the "ECP Lock Guarantee", the Sync method is not typically needed.']}),"\n",(0,s.jsx)(n.p,{children:"As an example, consider a scenario where process A inserts data and then sends a message to process B. Upon receiving the message, process B expects to read the data inserted by A. The Sync method can be used to ensure that B can see the data set by A as follows. Process A calls Sync after inserting the data and before sending the message; Process B calls Sync after receiving the message and before accessing the data."}),"\n",(0,s.jsxs)(n.p,{children:["In the example scenario given, if ",(0,s.jsx)(n.strong,{children:"any"})," of the following conditions apply, the Sync call is ",(0,s.jsx)(n.strong,{children:"not"})," needed:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'If locks are used to coordinate access to the data in question, then Sync is not needed (due to the "ECP Lock Guarantee").'}),"\n",(0,s.jsx)(n.li,{children:'If Processes A and B both run on the same application server (or on the data server) Sync is not needed. Updates are always visible on the server where they originated.\nIf the message from A to B is itself stored on the data server, for example by A setting a message into a global and B polling that global, then the Sync is not necessary. If B can see the message in the database, it can also see the data that A set the message global (the "In-Order Updates Guarantee").'}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Additionally, in the example above, if either process is running on the data server itself, then that process does not need to issue its Sync call."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters:"}),(0,s.jsx)(n.br,{}),"\n(Optional) The connection index for the data server to be synchronized. Call with no parameters to synchronizes this application server with all connected data servers (or the only data server in the case of a single data server). The connection index for a configured server can be found by name via GetClientIndex."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Return Value:"}),(0,s.jsx)(n.br,{}),"\nReturns the number of servers synchronized. If a server connection is not yet established, then it will not be synchronized. However, since it will implicitly synchronize on connecting, the return value can typically be ignored. Throws ",(0,s.jsx)(n.function,{children:" if an invalid connection index is specified."})]}),"\n",(0,s.jsx)(n.h3,{id:"getclientindex",children:"GetClientIndex"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetClientIndex(servername As %String) As %Integer\n"})}),"\n",(0,s.jsx)(n.p,{children:"Given the data server connection name configured on this client, returns a numeric index for use in other ECP client-side methods. Returns -1 if not found."})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(96540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);