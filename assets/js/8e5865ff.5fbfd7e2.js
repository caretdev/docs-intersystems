"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[20126],{62146:(e,l,n)=>{n.r(l),n.d(l,{contentTitle:()=>t,default:()=>d,frontMatter:()=>r,toc:()=>c});var s=n(74848),a=n(28453);const r={pagination_prev:null,pagination_next:null},t="%ZEN.Component.dynaGrid",c=[{value:"Parameters",id:"parameters",level:2},{value:"SYSMODULE;",id:"sysmodule",level:3},{value:"DEFAULTGRIDCLASS",id:"defaultgridclass",level:3},{value:"DEFAULTGRIDLABEL",id:"defaultgridlabel",level:3},{value:"DEFAULTROWLABELWIDTH",id:"defaultrowlabelwidth",level:3},{value:"DEFAULTCOLUMNWIDTH",id:"defaultcolumnwidth",level:3},{value:"DEFAULTSHOWARROWS",id:"defaultshowarrows",level:3},{value:"Properties",id:"properties",level:2},{value:"gridClass",id:"gridclass",level:3},{value:"dataSet",id:"dataset",level:3},{value:"columns",id:"columns",level:3},{value:"rows",id:"rows",level:3},{value:"cells",id:"cells",level:3},{value:"gridLabel",id:"gridlabel",level:3},{value:"editLabels",id:"editlabels",level:3},{value:"showColumnLabels",id:"showcolumnlabels",level:3},{value:"rowLabelWidth",id:"rowlabelwidth",level:3},{value:"columnWidth",id:"columnwidth",level:3},{value:"showRowLabels",id:"showrowlabels",level:3},{value:"showArrows",id:"showarrows",level:3},{value:"onarrowclick",id:"onarrowclick",level:3},{value:"currRow",id:"currrow",level:3},{value:"currColumn",id:"currcolumn",level:3},{value:"selectedRange",id:"selectedrange",level:3},{value:"multiSelect",id:"multiselect",level:3},{value:"currPage",id:"currpage",level:3},{value:"scrollIntoView",id:"scrollintoview",level:3},{value:"nowrap",id:"nowrap",level:3},{value:"oneditcell",id:"oneditcell",level:3},{value:"ondrawcell",id:"ondrawcell",level:3},{value:"onchangecell",id:"onchangecell",level:3},{value:"onclickrow",id:"onclickrow",level:3},{value:"onclickcolumn",id:"onclickcolumn",level:3},{value:"onclicklabel",id:"onclicklabel",level:3},{value:"onselectcell",id:"onselectcell",level:3},{value:"ongetcellvalue",id:"ongetcellvalue",level:3},{value:"onrender",id:"onrender",level:3},{value:"ondblclick",id:"ondblclick",level:3},{value:"oneditkeyup",id:"oneditkeyup",level:3},{value:"oneditkeydown",id:"oneditkeydown",level:3},{value:"onchangepage",id:"onchangepage",level:3},{value:"OnCreateDataSet",id:"oncreatedataset",level:3},{value:"format",id:"format",level:3},{value:"style",id:"style",level:3},{value:"columnHeaderStyle",id:"columnheaderstyle",level:3},{value:"rowHeaderStyle",id:"rowheaderstyle",level:3},{value:"borders",id:"borders",level:3},{value:"showZebra",id:"showzebra",level:3},{value:"selectedRangeBackground",id:"selectedrangebackground",level:3},{value:"selectedCellBackground",id:"selectedcellbackground",level:3},{value:"selectedCellColor",id:"selectedcellcolor",level:3},{value:"XDatas",id:"xdatas",level:2},{value:"Style",id:"style-1",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"renderContents",id:"rendercontents",level:3},{value:"getEdgeWidth",id:"getedgewidth",level:3},{value:"getCSSWidthSpec",id:"getcsswidthspec",level:3},{value:"adjustSizes",id:"adjustsizes",level:3},{value:"getRowInfo",id:"getrowinfo",level:3},{value:"getColumnInfo",id:"getcolumninfo",level:3},{value:"getCellInfo",id:"getcellinfo",level:3},{value:"getCellContents",id:"getcellcontents",level:3},{value:"%CreateDataSet",id:"createdataset",level:3},{value:"onCreate",id:"oncreate",level:3},{value:"notifyViewHandler",id:"notifyviewhandler",level:3},{value:"getDataSet",id:"getdataset",level:3},{value:"getCurrRow",id:"getcurrrow",level:3},{value:"getCurrColumn",id:"getcurrcolumn",level:3},{value:"editCell",id:"editcell",level:3},{value:"getEditCellHTML",id:"geteditcellhtml",level:3},{value:"stopEditCell",id:"stopeditcell",level:3},{value:"getCellEditor",id:"getcelleditor",level:3},{value:"isCellEditable",id:"iscelleditable",level:3},{value:"isCellVisible",id:"iscellvisible",level:3},{value:"getRowCount",id:"getrowcount",level:3},{value:"getColumnCount",id:"getcolumncount",level:3},{value:"getPageCount",id:"getpagecount",level:3},{value:"getCellValue",id:"getcellvalue",level:3},{value:"setCellValue",id:"setcellvalue",level:3},{value:"setLabelValue",id:"setlabelvalue",level:3},{value:"%OnAddToPageAfter",id:"onaddtopageafter",level:3},{value:"focus",id:"focus",level:3},{value:"%ApplyDefaultLabels",id:"applydefaultlabels",level:3},{value:"%SetDefaultValues",id:"setdefaultvalues",level:3},{value:"cellClickHandler",id:"cellclickhandler",level:3},{value:"cellDblClickHandler",id:"celldblclickhandler",level:3},{value:"gridLabelHandler",id:"gridlabelhandler",level:3},{value:"rowLabelHandler",id:"rowlabelhandler",level:3},{value:"rowLabelDblClickHandler",id:"rowlabeldblclickhandler",level:3},{value:"columnLabelHandler",id:"columnlabelhandler",level:3},{value:"columnLabelDblClickHandler",id:"columnlabeldblclickhandler",level:3},{value:"setProperty",id:"setproperty",level:3},{value:"getCellProperty",id:"getcellproperty",level:3},{value:"setCellProperty",id:"setcellproperty",level:3},{value:"getColumnProperty",id:"getcolumnproperty",level:3},{value:"setColumnProperty",id:"setcolumnproperty",level:3},{value:"getRowProperty",id:"getrowproperty",level:3},{value:"setRowProperty",id:"setrowproperty",level:3},{value:"nextPage",id:"nextpage",level:3},{value:"previousPage",id:"previouspage",level:3},{value:"moveToCell",id:"movetocell",level:3},{value:"cellEditKeyUpHandler",id:"celleditkeyuphandler",level:3},{value:"cellEditKeyHandler",id:"celleditkeyhandler",level:3},{value:"gridKeyDownHandler",id:"gridkeydownhandler",level:3},{value:"gridKeyPressHandler",id:"gridkeypresshandler",level:3},{value:"selectCell",id:"selectcell",level:3},{value:"selectCellHandler",id:"selectcellhandler",level:3},{value:"gridKeyFocus",id:"gridkeyfocus",level:3},{value:"gridKeyBlur",id:"gridkeyblur",level:3},{value:"getSelectedRange",id:"getselectedrange",level:3},{value:"selectCellRange",id:"selectcellrange",level:3},{value:"arrowHandler",id:"arrowhandler",level:3}];function i(e){const l={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(l.header,{children:(0,s.jsx)(l.h1,{id:"zencomponentdynagrid",children:"%ZEN.Component.dynaGrid"})}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Class %ZEN.Component.dynaGrid Extends (control, dataView) [ Deprecated, System = 3 ]\n"})}),"\n",(0,s.jsxs)(l.p,{children:["An editable grid control.",(0,s.jsx)(l.br,{}),"\nThe data and size of the grid is provided by the %ZEN.Auxiliary.dataSet associated with the grid.",(0,s.jsx)(l.br,{}),'\nThe first dimension of the dataSet supplies rows, the second supplies columns. The third dimension, if present, supplies "pages" for the grid. (One page is visible at a time).']}),"\n",(0,s.jsx)(l.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(l.h3,{id:"sysmodule",children:"SYSMODULE;"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Parameter SYSMODULE;\n"})}),"\n",(0,s.jsx)(l.p,{children:'Do not include in "form" module.'}),"\n",(0,s.jsx)(l.h3,{id:"defaultgridclass",children:"DEFAULTGRIDCLASS"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:'Parameter DEFAULTGRIDCLASS As STRING = "dynaGrid";\n'})}),"\n",(0,s.jsx)(l.p,{children:"Subclasses can set this to change default css class used for grids."}),"\n",(0,s.jsx)(l.h3,{id:"defaultgridlabel",children:"DEFAULTGRIDLABEL"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Parameter DEFAULTGRIDLABEL As STRING;\n"})}),"\n",(0,s.jsx)(l.p,{children:"Default value for the gridLabel property."}),"\n",(0,s.jsx)(l.h3,{id:"defaultrowlabelwidth",children:"DEFAULTROWLABELWIDTH"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Parameter DEFAULTROWLABELWIDTH As INTEGER = 100;\n"})}),"\n",(0,s.jsx)(l.p,{children:"Default value for the rowLabelWidth property in pixels."}),"\n",(0,s.jsx)(l.h3,{id:"defaultcolumnwidth",children:"DEFAULTCOLUMNWIDTH"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Parameter DEFAULTCOLUMNWIDTH As INTEGER = 100;\n"})}),"\n",(0,s.jsx)(l.p,{children:"Default value for the columnWidth property in pixels."}),"\n",(0,s.jsx)(l.h3,{id:"defaultshowarrows",children:"DEFAULTSHOWARROWS"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Parameter DEFAULTSHOWARROWS As BOOL = 0;\n"})}),"\n",(0,s.jsx)(l.p,{children:"Default value for the showArrows property."}),"\n",(0,s.jsx)(l.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(l.h3,{id:"gridclass",children:"gridClass"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property gridClass As %ZEN.Datatype.cssClass [ InitialExpression = {..#DEFAULTGRIDCLASS} ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"Optional CSS class for the table containing the grid."}),"\n",(0,s.jsx)(l.h3,{id:"dataset",children:"dataSet"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property dataSet As %ZEN.Auxiliary.dataSet(ZENSETTING = 0);\n"})}),"\n",(0,s.jsx)(l.p,{children:"Data displayed by this grid control."}),"\n",(0,s.jsx)(l.h3,{id:"columns",children:"columns"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:'Property columns As list Of %ZEN.Auxiliary.gridColumn(XMLPROJECTION = "ELEMENT", XMLREF = 1, XMLTYPECONSTRAINT = "CHOICE", ZENSETTING = 0);\n'})}),"\n",(0,s.jsx)(l.p,{children:"Additional specification for columns within the grid."}),"\n",(0,s.jsx)(l.h3,{id:"rows",children:"rows"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:'Property rows As list Of %ZEN.Auxiliary.gridRow(XMLPROJECTION = "ELEMENT", XMLREF = 1, XMLTYPECONSTRAINT = "CHOICE", ZENSETTING = 0);\n'})}),"\n",(0,s.jsx)(l.p,{children:"Additional specification for rows within the grid."}),"\n",(0,s.jsx)(l.h3,{id:"cells",children:"cells"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:'Property cells As list Of %ZEN.Auxiliary.gridCell(XMLPROJECTION = "ELEMENT", XMLREF = 1, XMLTYPECONSTRAINT = "CHOICE", ZENSETTING = 0);\n'})}),"\n",(0,s.jsx)(l.p,{children:"Additional specification for cells within the grid. This allows cell-by-cell overrides of formats and styles."}),"\n",(0,s.jsx)(l.h3,{id:"gridlabel",children:"gridLabel"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property gridLabel As %ZEN.Datatype.caption [ InitialExpression = {..#DEFAULTGRIDLABEL} ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"Caption to display in upper, left label cell."}),"\n",(0,s.jsx)(l.h3,{id:"editlabels",children:"editLabels"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property editLabels As %ZEN.Datatype.boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"If true, the user can double-click on row and column labels and edit their value."}),"\n",(0,s.jsx)(l.h3,{id:"showcolumnlabels",children:"showColumnLabels"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property showColumnLabels As %ZEN.Datatype.boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"Specifies whether column labels should be displayed."}),"\n",(0,s.jsx)(l.h3,{id:"rowlabelwidth",children:"rowLabelWidth"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property rowLabelWidth As %ZEN.Datatype.length [ InitialExpression = {..#DEFAULTROWLABELWIDTH} ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"Width used for row labels. This may be specified as either a fixed width in pixels or as a percentage of the total space allocated for the component."}),"\n",(0,s.jsx)(l.h3,{id:"columnwidth",children:"columnWidth"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property columnWidth As %ZEN.Datatype.length [ InitialExpression = {..#DEFAULTCOLUMNWIDTH} ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"This is the default width (in pixels) used for columns that do not supply a width."}),"\n",(0,s.jsx)(l.h3,{id:"showrowlabels",children:"showRowLabels"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property showRowLabels As %ZEN.Datatype.boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"Specifies whether row labels should be displayed."}),"\n",(0,s.jsx)(l.h3,{id:"showarrows",children:"showArrows"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property showArrows As %ZEN.Datatype.boolean [ InitialExpression = {..#DEFAULTSHOWARROWS} ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"Specifies whether the add rows and columns arrows should be displayed."}),"\n",(0,s.jsx)(l.h3,{id:"onarrowclick",children:"onarrowclick"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property onarrowclick As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(l.p,{children:"onarrowclick event handler: If defined, this event is fired when the user clicks on a row or column arrow. The variable which will indicate which arrow is clicked."}),"\n",(0,s.jsx)(l.h3,{id:"currrow",children:"currRow"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property currRow As %ZEN.Datatype.integer [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"This is the row number (1-based) of the current selected cell."}),"\n",(0,s.jsx)(l.h3,{id:"currcolumn",children:"currColumn"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property currColumn As %ZEN.Datatype.integer [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"This is the column number (1-based) of the current selected cell."}),"\n",(0,s.jsx)(l.h3,{id:"selectedrange",children:"selectedRange"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property selectedRange As %ZEN.Datatype.csv;\n"})}),"\n",(0,s.jsxs)(l.p,{children:["This specifies the current selected range of cells as a comma-separated list of integers. The list is of the form:",(0,s.jsx)(l.br,{}),"\nstartRow,startCol,endRow,endCol",(0,s.jsx)(l.br,{}),"\nAll cells numbers are 1-based.",(0,s.jsx)(l.br,{}),'\nIf the range is equal to "", then no cells are selected.',(0,s.jsx)(l.br,{}),"\nThis is only used if multiSelect is true."]}),"\n",(0,s.jsx)(l.h3,{id:"multiselect",children:"multiSelect"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property multiSelect As %ZEN.Datatype.boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"If true, users can select a range of cells in the grid."}),"\n",(0,s.jsx)(l.h3,{id:"currpage",children:"currPage"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property currPage As %ZEN.Datatype.integer [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsx)(l.p,{children:'In case of 3-dimensional dataSet, this is the current "page" (third dimension) being displayed. (1-based).'}),"\n",(0,s.jsx)(l.h3,{id:"scrollintoview",children:"scrollIntoView"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property scrollIntoView As %ZEN.Datatype.boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"If true, use the zenScrollIntoView function to try and make the current cell visible."}),"\n",(0,s.jsx)(l.h3,{id:"nowrap",children:"nowrap"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property nowrap As %ZEN.Datatype.boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"If true (the default), then the contents of cells within the grid will not word wrap (by setting the nowrap attribute for the cell's td element)."}),"\n",(0,s.jsx)(l.h3,{id:"oneditcell",children:"oneditcell"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property oneditcell As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(l.p,{children:"oneditcell event handler: If defined, this event is fired when a cell is about to be edited. If this event handler returns a value, then it is used as DHTML to render the cell editor."}),"\n",(0,s.jsx)(l.h3,{id:"ondrawcell",children:"ondrawcell"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property ondrawcell As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(l.p,{children:"ondrawcell event handler: If defined, this event is fired when a cell is about to be drawn. If this event handler returns a value, then it is used as DHTML to render the cell contents."}),"\n",(0,s.jsx)(l.h3,{id:"onchangecell",children:"onchangecell"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property onchangecell As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(l.p,{children:"onchangecell event handler: If defined, this event is fired when the user changes the value of a cell."}),"\n",(0,s.jsx)(l.h3,{id:"onclickrow",children:"onclickrow"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property onclickrow As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(l.p,{children:"onclickrow event handler: If defined, this event is fired when the user clicks on a row label."}),"\n",(0,s.jsx)(l.h3,{id:"onclickcolumn",children:"onclickcolumn"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property onclickcolumn As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(l.p,{children:"onclickcolumn event handler: If defined, this event is fired when the user clicks on a column label."}),"\n",(0,s.jsx)(l.h3,{id:"onclicklabel",children:"onclicklabel"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property onclicklabel As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(l.p,{children:"onclicklabel event handler: If defined, this event is fired when the user clicks on grid label cell in the upper left."}),"\n",(0,s.jsx)(l.h3,{id:"onselectcell",children:"onselectcell"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property onselectcell As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsxs)(l.p,{children:["onselectcell event handler: If defined, this event is fired when the user navigates to a new cell.",(0,s.jsx)(l.br,{}),"\nThe current cell row and column number is updated before this call is made.",(0,s.jsx)(l.br,{}),"\nThe event handler is passed 2 variables, row and col, which contain the row and column number of the current cell (1-based)."]}),"\n",(0,s.jsx)(l.h3,{id:"ongetcellvalue",children:"ongetcellvalue"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property ongetcellvalue As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsxs)(l.p,{children:["ongetcellvalue event handler: If defined, this event is fired to get the value to display in the current cell.",(0,s.jsx)(l.br,{}),"\nThe current cell row and column number is updated before this call is made.",(0,s.jsx)(l.br,{}),"\nThe event handler is passed 3 variables, row and col, which contain the row and column number of the current cell (1-based); and data, which is the value for the cell provided by the grid's data set.",(0,s.jsx)(l.br,{}),"\nIf not defined or if this event return handler returns null, then the value from the grid's data set is used.",(0,s.jsx)(l.br,{}),"\nThis callback is also invoked when the value of a cell is directly set by the setCellValue method.",(0,s.jsx)(l.br,{}),"\nThis is different than the ondrawcell event, which returns the actual HTML to display within a cell."]}),"\n",(0,s.jsx)(l.h3,{id:"onrender",children:"onrender"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property onrender As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(l.p,{children:"onrender event handler: If defined, this event is fired just before the grid is rendered."}),"\n",(0,s.jsx)(l.h3,{id:"ondblclick",children:"ondblclick"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property ondblclick As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(l.p,{children:"ondblclick event handler: This event is fired when the mouse is double-clicked on the control."}),"\n",(0,s.jsx)(l.h3,{id:"oneditkeyup",children:"oneditkeyup"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property oneditkeyup As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(l.p,{children:"onkeyup event handler for default cell edit control."}),"\n",(0,s.jsx)(l.h3,{id:"oneditkeydown",children:"oneditkeydown"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property oneditkeydown As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(l.p,{children:"onkeydown event handler for default cell edit control."}),"\n",(0,s.jsx)(l.h3,{id:"onchangepage",children:"onchangepage"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property onchangepage As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(l.p,{children:"onchangepage event handler: If defined, this event is fired when the user clicks on the next or previous page buttons for a 3D grid. If this callback returns false, the page change will not happen."}),"\n",(0,s.jsx)(l.h3,{id:"oncreatedataset",children:"OnCreateDataSet"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:'Property OnCreateDataSet As %ZEN.Datatype.delegator(FORMALSPEC = "pGrid:%ZEN.Component.dynaGrid,pDataSet:%ZEN.Auxiliary.dataSet", RETURNTYPE = "%Status");\n'})}),"\n",(0,s.jsxs)(l.p,{children:["Name of Server-side callback method to call to information for each node of this tree.",(0,s.jsx)(l.br,{}),"\nThis must be the name of a server-only method in the page class that contains this component."]}),"\n",(0,s.jsx)(l.h3,{id:"format",children:"format"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property format As %ZEN.Datatype.string;\n"})}),"\n",(0,s.jsxs)(l.p,{children:["Default format to apply to cells in this grid.",(0,s.jsx)(l.br,{}),'\nThis is a DeepSee format string: e.g., "###.##" This is overridden by row and column-level formatting.']}),"\n",(0,s.jsx)(l.h3,{id:"style",children:"style"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property style As %ZEN.Datatype.style;\n"})}),"\n",(0,s.jsxs)(l.p,{children:["Additional style to apply to cells in this grid.",(0,s.jsx)(l.br,{}),"\nThis is applied before any row and column-level styles."]}),"\n",(0,s.jsx)(l.h3,{id:"columnheaderstyle",children:"columnHeaderStyle"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property columnHeaderStyle As %ZEN.Datatype.style;\n"})}),"\n",(0,s.jsx)(l.p,{children:"Additional style to apply to column headers in this grid."}),"\n",(0,s.jsx)(l.h3,{id:"rowheaderstyle",children:"rowHeaderStyle"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property rowHeaderStyle As %ZEN.Datatype.style;\n"})}),"\n",(0,s.jsx)(l.p,{children:"Additional style to apply to row headers in this grid."}),"\n",(0,s.jsx)(l.h3,{id:"borders",children:"borders"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:'Property borders As %ZEN.Datatype.string(VALUELIST = ",all,none") [ InitialExpression = "all" ];\n'})}),"\n",(0,s.jsx)(l.p,{children:'Specify whether cell borders should be "all" (the default) or "none".'}),"\n",(0,s.jsx)(l.h3,{id:"showzebra",children:"showZebra"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property showZebra As %ZEN.Datatype.boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"Specify whether zebra striping should be applied to the grid."}),"\n",(0,s.jsx)(l.h3,{id:"selectedrangebackground",children:"selectedRangeBackground"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:'Property selectedRangeBackground As %ZEN.Datatype.style [ InitialExpression = "rgb(87,138,168)" ];\n'})}),"\n",(0,s.jsx)(l.p,{children:"Background color applied to the selected cell range."}),"\n",(0,s.jsx)(l.h3,{id:"selectedcellbackground",children:"selectedCellBackground"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:'Property selectedCellBackground As %ZEN.Datatype.style [ InitialExpression = "rgb(47,98,128)" ];\n'})}),"\n",(0,s.jsx)(l.p,{children:"Background color applied to the selected cell."}),"\n",(0,s.jsx)(l.h3,{id:"selectedcellcolor",children:"selectedCellColor"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:'Property selectedCellColor As %ZEN.Datatype.style [ InitialExpression = "white" ];\n'})}),"\n",(0,s.jsx)(l.p,{children:"Color applied to the selected cell range."}),"\n",(0,s.jsx)(l.h2,{id:"xdatas",children:"XDatas"}),"\n",(0,s.jsx)(l.h3,{id:"style-1",children:"Style"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"XData Style\n"})}),"\n",(0,s.jsx)(l.p,{children:"defines style sheet used by this component."}),"\n",(0,s.jsx)(l.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(l.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method %OnNew(initvalue As %RawString) As %Status [ Private, ProcedureBlock = 1 ]\n"})}),"\n",(0,s.jsx)(l.h3,{id:"rendercontents",children:"renderContents"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod renderContents() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Client-side method to render this component."}),"\n",(0,s.jsx)(l.h3,{id:"getedgewidth",children:"getEdgeWidth"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getEdgeWidth(node, margins, borders, padding) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Calculate the pixels needed to render the edge of a given cell, including (potentially) the space needed for the margins, borders and padding"}),"\n",(0,s.jsx)(l.h3,{id:"getcsswidthspec",children:"getCSSWidthSpec"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getCSSWidthSpec(node) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Get the defined width of a node as specified in the CSS"}),"\n",(0,s.jsx)(l.h3,{id:"adjustsizes",children:"adjustSizes"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod adjustSizes() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Adjust the column sizes of this grid."}),"\n",(0,s.jsx)(l.h3,{id:"getrowinfo",children:"getRowInfo"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getRowInfo(r) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Return an object containing display information for row r (0-based)."}),"\n",(0,s.jsx)(l.h3,{id:"getcolumninfo",children:"getColumnInfo"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getColumnInfo(c) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Return an object containing display information for column c (0-based)."}),"\n",(0,s.jsx)(l.h3,{id:"getcellinfo",children:"getCellInfo"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getCellInfo(page, row, col) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Return the cell descriptor for the given cell (if any). (0-based)."}),"\n",(0,s.jsx)(l.h3,{id:"getcellcontents",children:"getCellContents"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getCellContents(data, r, c) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Prepares data for display within a given cell. If there is an ondrawcell callback, it is invoked. This callback has a chance to chance the contents that will be displayed within the cell."}),"\n",(0,s.jsx)(l.h3,{id:"createdataset",children:"%CreateDataSet"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method %CreateDataSet() As %Status\n"})}),"\n",(0,s.jsx)(l.p,{children:"This callback provides a way to fill in the dataSet object used to provide values for this grid."}),"\n",(0,s.jsx)(l.h3,{id:"oncreate",children:"onCreate"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod onCreate() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Initialize additional client-side values"}),"\n",(0,s.jsx)(l.h3,{id:"notifyviewhandler",children:"notifyViewHandler"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod notifyViewHandler(reason, data1, data2, data3) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Notification that the dataController associated with this dataView has raised an event."}),"\n",(0,s.jsx)(l.h3,{id:"getdataset",children:"getDataSet"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getDataSet() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Return the dataSet object associated with this grid."}),"\n",(0,s.jsx)(l.h3,{id:"getcurrrow",children:"getCurrRow"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getCurrRow() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Return row number (1-based) of the most recently selected row."}),"\n",(0,s.jsx)(l.h3,{id:"getcurrcolumn",children:"getCurrColumn"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getCurrColumn() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Return column number (1-based) of the most recently selected column."}),"\n",(0,s.jsx)(l.h3,{id:"editcell",children:"editCell"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod editCell(defval, which) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:'Display edit control in the current cell. If defval is defined, then use it as the initial value in the editor. which indicates what type of cell is being edited: "row" (row label), "column" (column label), otherwise a data cell.'}),"\n",(0,s.jsx)(l.h3,{id:"geteditcellhtml",children:"getEditCellHTML"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getEditCellHTML(r, c, value, which) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Return the HTML that renders the cell editor for the given cell. r and c are 1-based. If r is 0, then we are editing a column header; If c is 0, then we are editing a row header; which indicates what is being edited (see editCell)."}),"\n",(0,s.jsx)(l.h3,{id:"stopeditcell",children:"stopEditCell"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod stopEditCell(cancel) [ Language = javascript ]\n"})}),"\n",(0,s.jsxs)(l.p,{children:["Stop editing of the current cell.",(0,s.jsx)(l.br,{}),"\nIf cancel is true, then do not save current control value."]}),"\n",(0,s.jsx)(l.h3,{id:"getcelleditor",children:"getCellEditor"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getCellEditor() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Return the html element for the current cell editor, if there is one."}),"\n",(0,s.jsx)(l.h3,{id:"iscelleditable",children:"isCellEditable"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod isCellEditable(r, c) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Return whether a given cell can be edited; Row and column are 1-based."}),"\n",(0,s.jsx)(l.h3,{id:"iscellvisible",children:"isCellVisible"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod isCellVisible(r, c) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Return whether a given cell is visible; Row and column are 1-based."}),"\n",(0,s.jsx)(l.h3,{id:"getrowcount",children:"getRowCount"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getRowCount() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Return number of rows in this grid."}),"\n",(0,s.jsx)(l.h3,{id:"getcolumncount",children:"getColumnCount"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getColumnCount() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Return number of columns in this grid."}),"\n",(0,s.jsx)(l.h3,{id:"getpagecount",children:"getPageCount"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getPageCount() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:'Return number of "pages" in this grid.'}),"\n",(0,s.jsx)(l.h3,{id:"getcellvalue",children:"getCellValue"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getCellValue(r, c) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Return value of grid cell; Row and column are 1-based."}),"\n",(0,s.jsx)(l.h3,{id:"setcellvalue",children:"setCellValue"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod setCellValue(value, r, c) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Set the value of grid cell; Row and column are 1-based."}),"\n",(0,s.jsx)(l.h3,{id:"setlabelvalue",children:"setLabelValue"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod setLabelValue(value, which, index) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:'Set the value of grid label; index is 1-based. which is "row" or "column".'}),"\n",(0,s.jsx)(l.h3,{id:"onaddtopageafter",children:"%OnAddToPageAfter"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method %OnAddToPageAfter() As %Status\n"})}),"\n",(0,s.jsx)(l.p,{children:"If implemented, this callback method is called at page render-time when this component is added to a page."}),"\n",(0,s.jsx)(l.h3,{id:"focus",children:"focus"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod focus() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Client-side method to input focus to this control."}),"\n",(0,s.jsx)(l.h3,{id:"applydefaultlabels",children:"%ApplyDefaultLabels"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method %ApplyDefaultLabels()\n"})}),"\n",(0,s.jsx)(l.p,{children:"Applies the row and column labels defined by the rows and columns collections."}),"\n",(0,s.jsx)(l.h3,{id:"setdefaultvalues",children:"%SetDefaultValues"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method %SetDefaultValues()\n"})}),"\n",(0,s.jsx)(l.p,{children:"This method fills in reasonable default values for this control. Used by tools (such as Control Tester) to dynamically create controls."}),"\n",(0,s.jsx)(l.h3,{id:"cellclickhandler",children:"cellClickHandler"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod cellClickHandler(row, col, evt) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"User has clicked on a cell."}),"\n",(0,s.jsx)(l.h3,{id:"celldblclickhandler",children:"cellDblClickHandler"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod cellDblClickHandler(row, col, evt) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"User has dbl-clicked on a cell."}),"\n",(0,s.jsx)(l.h3,{id:"gridlabelhandler",children:"gridLabelHandler"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod gridLabelHandler() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"User has clicked on the grid label."}),"\n",(0,s.jsx)(l.h3,{id:"rowlabelhandler",children:"rowLabelHandler"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod rowLabelHandler(row) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"User has clicked on a row label."}),"\n",(0,s.jsx)(l.h3,{id:"rowlabeldblclickhandler",children:"rowLabelDblClickHandler"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod rowLabelDblClickHandler(row) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"User has double-clicked on a row label."}),"\n",(0,s.jsx)(l.h3,{id:"columnlabelhandler",children:"columnLabelHandler"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod columnLabelHandler(col) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"User has clicked on a column label."}),"\n",(0,s.jsx)(l.h3,{id:"columnlabeldblclickhandler",children:"columnLabelDblClickHandler"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod columnLabelDblClickHandler(col) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"User has double-clicked on a column label."}),"\n",(0,s.jsx)(l.h3,{id:"setproperty",children:"setProperty"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod setProperty(property, value, value2) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Set the value of a named property."}),"\n",(0,s.jsx)(l.h3,{id:"getcellproperty",children:"getCellProperty"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getCellProperty(pageno, rowno, colno, property) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Get the value of a property for a cell descriptor of this grid. pageno, rowno, and colno are 1-based."}),"\n",(0,s.jsx)(l.h3,{id:"setcellproperty",children:"setCellProperty"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod setCellProperty(pageno, rowno, colno, property, value) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Set the value of a property for a cell descriptor of this grid. pageno, rowno, and colno are 1-based."}),"\n",(0,s.jsx)(l.h3,{id:"getcolumnproperty",children:"getColumnProperty"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getColumnProperty(colno, property) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Get the value of a property for a column descriptor of this grid."}),"\n",(0,s.jsx)(l.h3,{id:"setcolumnproperty",children:"setColumnProperty"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod setColumnProperty(colno, property, value) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Set the value of a property for a column descriptor of this grid."}),"\n",(0,s.jsx)(l.h3,{id:"getrowproperty",children:"getRowProperty"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getRowProperty(rowno, property) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Get the value of a property for a row descriptor of this grid."}),"\n",(0,s.jsx)(l.h3,{id:"setrowproperty",children:"setRowProperty"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod setRowProperty(rowno, property, value) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Set the value of a property for a row descriptor of this grid."}),"\n",(0,s.jsx)(l.h3,{id:"nextpage",children:"nextPage"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod nextPage() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"For 3-D grid, move to the next page of the grid."}),"\n",(0,s.jsx)(l.h3,{id:"previouspage",children:"previousPage"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod previousPage() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"For 3-D grid, move to the previous page of the grid."}),"\n",(0,s.jsx)(l.h3,{id:"movetocell",children:"moveToCell"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod moveToCell(dir) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:'Move to a new, editable, cell. dir is "up","down","left","right" Returns true if move was successful.'}),"\n",(0,s.jsx)(l.h3,{id:"celleditkeyuphandler",children:"cellEditKeyUpHandler"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod cellEditKeyUpHandler(evt) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Process key up event within the grid's cell edit control."}),"\n",(0,s.jsx)(l.h3,{id:"celleditkeyhandler",children:"cellEditKeyHandler"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod cellEditKeyHandler(evt) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Process keys pressed within the grid's cell edit control."}),"\n",(0,s.jsx)(l.h3,{id:"gridkeydownhandler",children:"gridKeyDownHandler"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod gridKeyDownHandler(evt) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Process keydown event within the grid's invisible edit control."}),"\n",(0,s.jsx)(l.h3,{id:"gridkeypresshandler",children:"gridKeyPressHandler"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod gridKeyPressHandler(evt) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Process keypress event within the grid's invisible edit control."}),"\n",(0,s.jsx)(l.h3,{id:"selectcell",children:"selectCell"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod selectCell(r, c, notify) [ Language = javascript ]\n"})}),"\n",(0,s.jsxs)(l.p,{children:["Make the specified cell the current cell.",(0,s.jsx)(l.br,{}),"\nr and c are 1-based.",(0,s.jsx)(l.br,{}),"\nIf notify is true, then raise an onSelectCell event."]}),"\n",(0,s.jsx)(l.h3,{id:"selectcellhandler",children:"selectCellHandler"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod selectCellHandler(r, c) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Notification that user is about to move to a new cell."}),"\n",(0,s.jsx)(l.h3,{id:"gridkeyfocus",children:"gridKeyFocus"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod gridKeyFocus() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Focus passed to the grid's invisible edit control."}),"\n",(0,s.jsx)(l.h3,{id:"gridkeyblur",children:"gridKeyBlur"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod gridKeyBlur() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Focus taken from the grid's invisible edit control."}),"\n",(0,s.jsx)(l.h3,{id:"getselectedrange",children:"getSelectedRange"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod getSelectedRange() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Return the range of selected cells or null if nothing selected. The range is returned as an array of startRow,startCol,endRow,endCol."}),"\n",(0,s.jsx)(l.h3,{id:"selectcellrange",children:"selectCellRange"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod selectCellRange(startRow, startCol, endRow, endCol) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Set the selected cell range. Addresses are 1-based."}),"\n",(0,s.jsx)(l.h3,{id:"arrowhandler",children:"arrowHandler"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClientMethod arrowHandler(which) [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Click handler for arrows."})]})}function d(e={}){const{wrapper:l}={...(0,a.R)(),...e.components};return l?(0,s.jsx)(l,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}},28453:(e,l,n)=>{n.d(l,{R:()=>t,x:()=>c});var s=n(96540);const a={},r=s.createContext(a);function t(e){const l=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function c(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(r.Provider,{value:l},e.children)}}}]);