"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[51036],{73034:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>a,default:()=>c,frontMatter:()=>i,toc:()=>o});var t=n(74848),r=n(28453);const i={pagination_prev:null,pagination_next:null},a="%SYSTEM.Util",o=[{value:"Methods",id:"methods",level:2},{value:"InstallDirectory",id:"installdirectory",level:3},{value:"ManagerDirectory",id:"managerdirectory",level:3},{value:"BinaryDirectory",id:"binarydirectory",level:3},{value:"DataDirectory",id:"datadirectory",level:3},{value:"JavaHomeDirectory",id:"javahomedirectory",level:3},{value:"JavaExe",id:"javaexe",level:3},{value:"GetEnviron",id:"getenviron",level:3},{value:"SetBatch",id:"setbatch",level:3},{value:"CreateGUID",id:"createguid",level:3},{value:"CreateDecimalGUID",id:"createdecimalguid",level:3},{value:"UUIDv1RandomMacMode",id:"uuidv1randommacmode",level:3},{value:"NumberOfCPUs",id:"numberofcpus",level:3},{value:"JobPrio",id:"jobprio",level:3},{value:"GetPrio",id:"getprio",level:3},{value:"SetPrio",id:"setprio",level:3},{value:"GlobalBuffers",id:"globalbuffers",level:3},{value:"GetSwitch",id:"getswitch",level:3},{value:"SetSwitch",id:"setswitch",level:3},{value:"CheckSwitch",id:"checkswitch",level:3},{value:"RoutineBufferSize",id:"routinebuffersize",level:3},{value:"RoutineBuffers",id:"routinebuffers",level:3},{value:"Compress",id:"compress",level:3},{value:"Decompress",id:"decompress",level:3},{value:"CompressionNameToID",id:"compressionnametoid",level:3},{value:"CompressionIDToName",id:"compressionidtoname",level:3},{value:"GetCompressionEngineFlags",id:"getcompressionengineflags",level:3},{value:"CompressionNameList",id:"compressionnamelist",level:3},{value:"IsDST",id:"isdst",level:3},{value:"UTCtoLocalWithZTIMEZONE",id:"utctolocalwithztimezone",level:3},{value:"LocalWithZTIMEZONEtoUTC",id:"localwithztimezonetoutc",level:3},{value:"Collation",id:"collation",level:3},{value:"RevCollation",id:"revcollation",level:3},{value:"PurgeSYSLOG",id:"purgesyslog",level:3},{value:"GetOSErrorText",id:"getoserrortext",level:3},{value:"GetOSVersionInfo",id:"getosversioninfo",level:3},{value:"GetPhysicalMemory",id:"getphysicalmemory",level:3},{value:"GetPrivateVariables",id:"getprivatevariables",level:3},{value:"GetSessionId",id:"getsessionid",level:3},{value:"HexToDecimal",id:"hextodecimal",level:3},{value:"DecimalToHex",id:"decimaltohex",level:3},{value:"mpadd",id:"mpadd",level:3},{value:"mpaddx",id:"mpaddx",level:3},{value:"mp2dec",id:"mp2dec",level:3},{value:"mp2hex",id:"mp2hex",level:3},{value:"CoreCountForNoFreezeDBERR",id:"corecountfornofreezedberr",level:3},{value:"GetFrameStackSize",id:"getframestacksize",level:3},{value:"SetFrameStackSize",id:"setframestacksize",level:3},{value:"ValidateRoutineBuffers",id:"validateroutinebuffers",level:3},{value:"CheckName",id:"checkname",level:3},{value:"CheckNameContains",id:"checknamecontains",level:3},{value:"CheckAuditJSONString",id:"checkauditjsonstring",level:3},{value:"DatabaseLatency",id:"databaselatency",level:3},{value:"ZBOOLEAN",id:"zboolean",level:3},{value:"&quot;RoundToCFloat",id:"roundtocfloat",level:3}];function l(e){const s={br:"br",code:"code",database:"database",directory:"directory",h1:"h1",h2:"h2",h3:"h3",header:"header",illegal:"illegal",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"systemutil",children:"%SYSTEM.Util"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %SYSTEM.Util Extends Help [ Abstract, System = 4 ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"The %SYSTEM.Util class provides an interface for managing utility functions."}),"\n",(0,t.jsxs)(s.p,{children:["You can use it via the special ",(0,t.jsx)(s.strong,{children:"$SYSTEM"})," object:"]}),"\n",(0,t.jsx)(s.p,{children:"You can call help to get a list of all entrypoints:"}),"\n",(0,t.jsx)(s.p,{children:"Do $SYSTEM.Util.Help()"}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"installdirectory",children:"InstallDirectory"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod InstallDirectory() As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the location of where IRIS is installed."}),"\n",(0,t.jsx)(s.h3,{id:"managerdirectory",children:"ManagerDirectory"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ManagerDirectory() As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the location of the manager directory, where the IRISSYS database (mgr) is located."}),"\n",(0,t.jsx)(s.h3,{id:"binarydirectory",children:"BinaryDirectory"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod BinaryDirectory() As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the location of the binaries directory (bin), where executables, DLL's, shared libraries, scripts, etc are kept."}),"\n",(0,t.jsx)(s.h3,{id:"datadirectory",children:"DataDirectory"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DataDirectory() As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the location of the data directory, where the CPF file is located."}),"\n",(0,t.jsx)(s.h3,{id:"javahomedirectory",children:"JavaHomeDirectory"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod JavaHomeDirectory() As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns the location of the Java Home directory.",(0,t.jsx)(s.br,{}),"\nThis method returns the location of the Java Home directory on your system. The return value has been normalized, and is suitable for passing to $zf(-1) or $zf(-2).",(0,t.jsx)(s.br,{}),"\nThe location of the Java Home directory which is returned is determined in the following order:"]}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"The directory location returned by the configuration parameter JavaHome in the cache.cpf file."}),"\n",(0,t.jsx)(s.li,{children:'The directory location returned by the environment variable "JAVA_HOME".'}),"\n",(0,t.jsxs)(s.li,{children:["If none of the above, a null string.",(0,t.jsx)(s.br,{}),"\nExample:",(0,t.jsx)(s.br,{}),"\ns JavaHome=$SYSTEM.Util.JavaHomeDirectory()"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"javaexe",children:"JavaExe"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod JavaExe() As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns the path name of the Java executable, which can be used to build a command line.",(0,t.jsx)(s.br,{}),"\nThis method returns the pathname of the Java executable, which can be used to build a command line on your system. The return value has been normalized, and is suitable for passing to $zf(-1) or $zf(-2).",(0,t.jsx)(s.br,{}),'\nThe method uses the return value from the JavaHomeDirectory() method, appends the subdirectory "bin" to it, and then adds the Java executable name to the end. If the JavaHomeDirectory() method returns "", then it is assumed that the Java executable location is in the process path, and the return value of the method is simply the Java executable name.']}),"\n",(0,t.jsxs)(s.p,{children:["Notes:",(0,t.jsx)(s.br,{}),'\nThis method does not test for the existence of the Java executable. It assumes it is located in the "bin" directory if JavaHomeDirectory() returns a non-null value, otherwise it must be in the path of the process executing the method.',(0,t.jsx)(s.br,{}),"\nExample:",(0,t.jsx)(s.br,{}),"\ns JavaExe=$SYSTEM.Util.JavaExe()",(0,t.jsx)(s.br,{}),'\ns Status=$zf(-1,JavaExe_" -version")']}),"\n",(0,t.jsx)(s.h3,{id:"getenviron",children:"GetEnviron"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetEnviron(VariableName As %String) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the value of an environment variable."}),"\n",(0,t.jsx)(s.h3,{id:"setbatch",children:"SetBatch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SetBatch(flag As %Integer, pid As %Integer = "") As %Integer [ Deprecated ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"Sets or clears batch mode for the calling process, or the one identified by pid"}),"\n",(0,t.jsx)(s.p,{children:"Processes that will access large portions of a database may be set into batch mode to limit their impact on other (non-batch mode) processes running on the system. In particular, batch mode processes are prevented from overwhelming the database cache with the database blocks that they read or modify."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsx)(s.p,{children:"flag : 1 sets batch mode; 0 clears batch mode"}),"\n",(0,t.jsx)(s.p,{children:"pid : (optional) target pid; if null or omitted target is the calling process"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Return Value"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the old value of the batch flag, or -1 if error"}),"\n",(0,t.jsx)(s.h3,{id:"createguid",children:"CreateGUID"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateGUID(version As %Integer) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Creates and returns a 128 bit globally unique identifier (GUID), also known as universally unique identifier (UUID)."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"version"})," -- an optional argument specifying the UUID version used to generate an identifier. Currently supports version 4 (random based) and version 1 (mac based). All output characters will be in lower-case if a version number argument is passed in, according to RFC4122."]}),"\n",(0,t.jsx)(s.p,{children:"Values for version:"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"default"}),': Generate a v1 UUID for non-Windows or a v4 UUID for Windows. For non-Windows platforms, if the config section of the cpf has UUIDv1RandomMac=1, generate the UUID as in "1r", else generate the UUID as in "1o".',(0,t.jsx)(s.br,{}),"\nAll the output characters are in upper case for code compatibility reasons."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:'"1o"'}),': Generate a v1 UUID. Ignore the cpf UUIDv1RandomMac setting. "o" is for original. Note the quotes.',(0,t.jsx)(s.br,{}),"\nThe original behavior of IRIS is to try and detect one of your ethernet connections and use the mac from that. If the detection doesn't happen (rare), a combined value of several things is used for the mac address."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:'"1r"'}),': Generate a v1 UUID. Ignore the cpf UUIDv1RandomMac setting. "r" is for random. Note the quotes.',(0,t.jsx)(s.br,{}),"\nThe mac is generated randomly as per RFC4122 section 4.5. See below for why you may need this."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"1"}),': Generate a v1 UUID. If the config section of the cpf has UUIDv1RandomMac=1, generate the mac as in "1r", else generate the mac as in "1o".']}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"4"}),": Generate a v4 UUID."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Why should you set UUIDv1RandomMac=1 in the [config] section of the cpf?"})}),"\n",(0,t.jsxs)(s.p,{children:["A large part of UUID v1 uniqueness depends on having a mac address that is unique in the particular domain where you wish things to be unique.",(0,t.jsx)(s.br,{}),"\nThe domain could be one IRIS instance, or a multi-instance IRIS host, or the whole world."]}),"\n",(0,t.jsxs)(s.p,{children:["You have to consider which domain you need, to see if the overall UUID v1 uniqueness is enough. In the situation where you have multiple IRIS instances on a host (i.e. they have the same mac), and wish the UUID to be unique for that host, you will be protected by less than 14 bits (only the UUID v1 clock seq field and not the mac) of randomness when creating UUIDs at the same time in 2 instances on your host.",(0,t.jsx)(s.br,{}),"\nThis could definitely cause non uniqueness during a large deployment."]}),"\n",(0,t.jsx)(s.p,{children:"In the situation where you wish your UUIDs to be unique across all your deployments in the world and you stand up virtual instances where the mac address is the same, you may have only 14 random bits of protection against other instances creating UUIDs at the same time. Note the IP address might be the same, but maybe the mac is different."}),"\n",(0,t.jsx)(s.p,{children:"If you set UUIDv1RandomMac=1 in the [config] section of the cpf, you always get 14+47=61 bits of random protection, which should be enough even for a large deployment."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Return value"})," -- a 128 bit GUID/UUID string. It may be upper or lower case."]}),"\n",(0,t.jsx)(s.h3,{id:"createdecimalguid",children:"CreateDecimalGUID"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateDecimalGUID() As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Creates and returns the decimal representation of a globally unique identifier (CreateGUID() without any arguments).",(0,t.jsx)(s.br,{}),"\nA GUID is a 16 byte (128 bit) globally unique identifier."]}),"\n",(0,t.jsx)(s.h3,{id:"uuidv1randommacmode",children:"UUIDv1RandomMacMode"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UUIDv1RandomMacMode(random As %Integer) As %String [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Used by stu.mac",(0,t.jsx)(s.br,{}),"\nSets UUID v1 random mac ",(0,t.jsx)(s.strong,{children:"mode"})," in global memory (it applies to all UUID v1 created)"]}),"\n",(0,t.jsx)(s.h3,{id:"numberofcpus",children:"NumberOfCPUs"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NumberOfCPUs() As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns the number of virtual CPUs (also known as logical CPUs or threads) on the system.",(0,t.jsx)(s.br,{}),"\nFor more details see %SYSTEM.CPU."]}),"\n",(0,t.jsx)(s.h3,{id:"jobprio",children:"JobPrio"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod JobPrio(jprio As %Integer) As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Sets the system-wide job priority delta to the specified number.",(0,t.jsx)(s.br,{}),"\nThe priority of any jobbed process on the system = priority of parent + system job priority.",(0,t.jsx)(s.br,{}),"\nThe new jobprio value is returned"]}),"\n",(0,t.jsx)(s.p,{children:"Note: changing priority is almost never needed and can compromise system stability"}),"\n",(0,t.jsx)(s.h3,{id:"getprio",children:"GetPrio"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetPrio(pid As %Integer = "") As %Integer\n'})}),"\n",(0,t.jsx)(s.p,{children:"Returns the priority of the current process or another process."}),"\n",(0,t.jsx)(s.h3,{id:"setprio",children:"SetPrio"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SetPrio(delta As %Integer, pid As %Integer = "") As %String\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Adjusts the priority of the current process or another process up or down by delta amount.",(0,t.jsx)(s.br,{}),"\nThe new priority is returned."]}),"\n",(0,t.jsx)(s.p,{children:"Note: changing process priority is almost never needed and can compromise system stability"}),"\n",(0,t.jsx)(s.h3,{id:"globalbuffers",children:"GlobalBuffers"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GlobalBuffers() As %List\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns a list of the number of global buffers for each buffer size."}),"\n",(0,t.jsx)(s.h3,{id:"getswitch",children:"GetSwitch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetSwitch(SwitchNumber As %Integer) As %Integer\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the value of one system switch, or the values of all switches."}),"\n",(0,t.jsxs)(s.p,{children:["When the SwitchNumber is not specified, GetSwitch returns one value containing the state of all system switches.",(0,t.jsx)(s.br,{}),"\nEach system switch is represented by a bit in this value, with switch 0 as the least significant bit and switch 31 as the most significant.",(0,t.jsx)(s.br,{}),"\nFor example:",(0,t.jsx)(s.br,{}),"\nSwitch 0 -> 1",(0,t.jsx)(s.br,{}),"\nSwitch 1 -> 2",(0,t.jsx)(s.br,{}),"\nSwitch 2 -> 4",(0,t.jsx)(s.br,{}),"\n...",(0,t.jsx)(s.br,{}),"\nSwitch 31 -> 0x80000000"]}),"\n",(0,t.jsxs)(s.p,{children:["When the SwitchNumber is specified (0 to 31), GetSwitch returns the state of the specific switch represented by SwitchNumber.",(0,t.jsx)(s.br,{}),"\nThe return value is 1 if this switch is set, or 0 if it is cleared.",(0,t.jsx)(s.br,{}),"\nFor switch 10 and 11, it also returns the PID of the job that set this switch in the '1,PID' format."]}),"\n",(0,t.jsx)(s.p,{children:"Switch Definitions -"}),"\n",(0,t.jsxs)(s.p,{children:["Switches 0 to 7 are not used by the system and are reserved for the user.",(0,t.jsx)(s.br,{}),"\nSwitch 8 (0x100) : Inhibits responding to network request for DCP, DDP and DTM. It does not block ECP traffic.",(0,t.jsx)(s.br,{}),"\nSwitch 9 (0x200) : Inhibits new network signons, this only apply for DCP.",(0,t.jsx)(s.br,{}),"\nSwitch 10(0x400) : Inhibits all global and lock access except by the job setting this switch.",(0,t.jsx)(s.br,{}),"\nSwitch 11(0x800) : Inhibits all global and lock access except by the job setting this switch. This overrides switch 10 and is reserved for use by the system (should only be set by the system).",(0,t.jsx)(s.br,{}),"\nSwitch 12(0x1000) : Inhibits new users/JOB commands to signon the system.",(0,t.jsx)(s.br,{}),"\nSwitch 13(0x2000) : Inhibits sets, kills, and zsaves.",(0,t.jsx)(s.br,{}),"\nSwitch 14(0x4000) : Inhibits access to globals and routines.",(0,t.jsx)(s.br,{}),"\nSwitch 15(0x8000) : Allow network references from peers, even if switch 10,13, or 14 would normally prevent the access.",(0,t.jsx)(s.br,{}),"\nSwitch 16(0x10000) : Used in ^SHUTDOWN only.",(0,t.jsx)(s.br,{}),"\nSwitch 17(0x20000) : Used internally by system to skip waiting in journal synch.",(0,t.jsx)(s.br,{}),"\nSwitch 18(0x40000) : Used internally by system to disable pausing processes in gblkrd() if the queue for a block gets too long.",(0,t.jsx)(s.br,{}),"\nSwitch 19(0x80000) : Inhibits TSTART."]}),"\n",(0,t.jsx)(s.h3,{id:"setswitch",children:"SetSwitch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetSwitch(SwitchNumber As %Integer, SwitchValue As %Integer) As %Integer\n"})}),"\n",(0,t.jsx)(s.p,{children:"Sets the value of a system switch."}),"\n",(0,t.jsxs)(s.p,{children:["When one parameter is specified, SetSwitch(SwitchValue) sets the value of all system switches to SwitchValue.",(0,t.jsx)(s.br,{}),"\nIt returns the original value of all switches.",(0,t.jsx)(s.br,{}),"\nThis is not recommended to be used by users."]}),"\n",(0,t.jsxs)(s.p,{children:["When two parameters are specified, SetSwitch(SwitchNumber,SwitchValue) sets the value of the specific switch SwitchNumber to SwitchValue.",(0,t.jsx)(s.br,{}),"\nIt returns the original switch value.",(0,t.jsx)(s.br,{}),"\nTo set switch 10 or (11 in cluster), if the switch was set then the SetSwitch won't do anything and the original value with the owner PID is returned in '1,PID' format..",(0,t.jsx)(s.br,{}),"\nTo clear switch 10 or (11 in cluster), if the switch was cleared or was set by different process then the SetSwitch won't do anything and the original value is returned."]}),"\n",(0,t.jsx)(s.p,{children:"See GetSwitch for a definition of the switches."}),"\n",(0,t.jsx)(s.h3,{id:"checkswitch",children:"CheckSwitch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckSwitch(SwitchNumber As %Integer) As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Check if this job could be blocked by the specific switch represented by 'SwitchNumber'.",(0,t.jsx)(s.br,{}),"\nReturns 1 if the job could pass this check (not blocked), returns 0 if this job will be blocked.",(0,t.jsx)(s.br,{}),"\nFor switch 10 and 11, if the job could not pass this test it also returns the PID of the job who set this switch in the '0,PID' format."]}),"\n",(0,t.jsx)(s.h3,{id:"routinebuffersize",children:"RoutineBufferSize"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RoutineBufferSize() As %Integer\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the largest routine buffer size that been configured."}),"\n",(0,t.jsx)(s.h3,{id:"routinebuffers",children:"RoutineBuffers"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RoutineBuffers(Arg As %Integer) As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns information about the routine buffers that have been allocated.",(0,t.jsx)(s.br,{}),"\nThe return value is a comma-delimited string with a value for each possible buffer size. The pieces correspond to buffer sizes 2K,4K,8K,16K,32K,64K."]}),"\n",(0,t.jsxs)(s.p,{children:["If Arg is 0 or is omitted, the values are the amount of memory, in MegaBytes, allocated for each buffer size.",(0,t.jsx)(s.br,{}),"\nIf Arg is 1, the values are the number of buffers allocated for each buffer size."]}),"\n",(0,t.jsx)(s.h3,{id:"compress",children:"Compress"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Compress(OriginalString As %String, Type As %String) As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns the compressed form of a given string.",(0,t.jsx)(s.br,{}),'\nWhen Type is specified, it is the compress algorithm used to compress the data. Its value can be "zlib", "zstd" or "lz4". If Type is not specified then the "zlib" compression algorithm is used. A compressed string is a compressed data block with a customized wrapper. Use Decompress to decompress it.']}),"\n",(0,t.jsx)(s.h3,{id:"decompress",children:"Decompress"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Decompress(CompressedString As %String) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the original form of a compressed string (see Compress)."}),"\n",(0,t.jsx)(s.h3,{id:"compressionnametoid",children:"CompressionNameToID"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CompressionNameToID(EngineName As %String) As %Integer\n"})}),"\n",(0,t.jsx)(s.p,{children:'Converts a compression engine name to an internal id #. ID #\'s are zero based. Returns -1 if the name is not a known engine. Passing "" for the name argument returns highest compression engine id. Names are lowercased for comparison purposes.'}),"\n",(0,t.jsx)(s.h3,{id:"compressionidtoname",children:"CompressionIDToName"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CompressionIDToName(EngineID As %Integer) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Converts an internal compression engine id to an engine name. ID #'s range from zero up to the # of engines-1. ID numbers which are out of range will return a null string. Engine Names are lowercase."}),"\n",(0,t.jsx)(s.h3,{id:"getcompressionengineflags",children:"GetCompressionEngineFlags"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetCompressionEngineFlags(EngineID As %Integer) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns a string representing the flags set for the specified compression engine ID. The 1st character of each name is in uppercase and every name including the last one is followed by a comma"}),"\n",(0,t.jsx)(s.h3,{id:"compressionnamelist",children:"CompressionNameList"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CompressionNameList(ByRef EngineNames As %String) As %Integer\n"})}),"\n",(0,t.jsx)(s.p,{children:'Returns an array of the valid Compression Engine Names currently supported which are not marked hidden. The count of the # of engines is returned as the value of the method. The value returned from the method call is the number of compression engines in the array. The format of the array is each engine\'s name is used as a subscript with the value set to "".'}),"\n",(0,t.jsx)(s.h3,{id:"isdst",children:"IsDST"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsDST(TimeStamp As %String) As %Integer\n"})}),"\n",(0,t.jsx)(s.p,{children:"Determines whether $HOROLOG includes a daylight saving time adjustment."}),"\n",(0,t.jsx)(s.p,{children:"TimeStamp is a UTC time stamp value (same format as $ZTIMESTAMP). If TimeStamp is not specified, the current time is used with $HOROLOG adjusted by the $ZTIMEZONE special variable."}),"\n",(0,t.jsx)(s.p,{children:"The return value reports whether the corresponding $HOROLOG time is adjusted by an additional DST hour."}),"\n",(0,t.jsx)(s.p,{children:"Changes to $ZTIMEZONE will change the value of $HOROLOG but the time zone rules do not change. The time zone rules are always those used by the operating system on which the process is running. The time zone rules of the process will be applied to the local time."}),"\n",(0,t.jsxs)(s.p,{children:["The UTC time stamp is converted to a time_t value (taking into account adjustments to $ztimezone) which is then used as input to call the C Programming Language standard library routine localtime(). The tm_isdst element of the returned tm struct is examined to determine if the daylight savings time is in effect.",(0,t.jsx)(s.br,{}),"\nReturn Values:",(0,t.jsx)(s.br,{}),"\n0 - DST is not in effect.",(0,t.jsx)(s.br,{}),"\n1 - DST is in effect.",(0,t.jsx)(s.br,{}),"\n-1 - It cannot be determined if DST is in effect."]}),"\n",(0,t.jsx)(s.h3,{id:"utctolocalwithztimezone",children:"UTCtoLocalWithZTIMEZONE"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UTCtoLocalWithZTIMEZONE(TimeStamp As %String) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Converts UTC time to Local time."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsx)(s.p,{children:"TimeStamp : A string representing a UTC time in the same format as that returned by $ZTIMESTAMP."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Return Value"})}),"\n",(0,t.jsx)(s.p,{children:"A string representing the corresponding Local time in the same format as that returned by $HOROLOG."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note:"})," This method only supports dates between January 1, 1970 and January 18, 2038. Dates outside this range will give an ",(0,t.jsx)(s.illegal,{value:"",children:" error."})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Note: $ZTIMEZONE Warning"})}),"\n",(0,t.jsx)(s.p,{children:"This function is unusual in that it adjusts the Local time by any changes made to the $ZTIMEZONE special variable. Use of the $ZTIMEZONE variable is limited to a few special situations. $ZTIMEZONE affects the value returned by $HOROLOG but most other date/time features and functions (including $ZDATETIME and $ZDATETIMEH) ignore $ZTIMEZONE changes. Even though changing $ZTIMEZONE will change the value of returned by $HOROLOG, the time zone rules do not change. The time zone rules are always those used by the operating system on which the process is running. The $ZTIMEZONE special variable will probably become a legacy feature in future versions of the system. If possible, applications should avoid changing $ZTIMEZONE and should use $ZDATETIMEH(timestamp,-3) to convert UTC time to Local time."}),"\n",(0,t.jsx)(s.h3,{id:"localwithztimezonetoutc",children:"LocalWithZTIMEZONEtoUTC"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LocalWithZTIMEZONEtoUTC(h As %String) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Converts Local time to UTC time."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameter"})}),"\n",(0,t.jsx)(s.p,{children:"h : A string representing Local time in the same format as that returned by $HOROLOG."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Return Value"})}),"\n",(0,t.jsx)(s.p,{children:"A string representing the corresponding UTC time in the same format as that returned by $ZTIMESTAMP."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note:"})," This method only supports dates between December 31, 1969 and January 18, 2038. Dates outside this range will give an ",(0,t.jsx)(s.illegal,{value:"",children:" error."})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Note: $ZTIMEZONE Warning"})}),"\n",(0,t.jsx)(s.p,{children:"This method is unusual in that it adjusts the Local time by any changes made to the $ZTIMEZONE special variable. Use of the $ZTIMEZONE variable is limited to a few special situations. $ZTIMEZONE affects the value returned by $HOROLOG but most other date/time features and functions (including $ZDATETIME and $ZDATETIMEH) ignore $ZTIMEZONE changes. Even though changing $ZTIMEZONE will change the value returned by $HOROLOG, the time zone rules do not change. The time zone rules are always those used by the operating system on which the process is running. The $ZTIMEZONE special variable will probably become a legacy feature in future versions of the system. If possible, applications should avoid changing $ZTIMEZONE and should use $ZDATETIME(h,-3) to convert Local time to UTC time."}),"\n",(0,t.jsx)(s.h3,{id:"collation",children:"Collation"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Collation(String As %String, flag As %Integer, len As %Integer) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Performs collation conversion."}),"\n",(0,t.jsx)(s.p,{children:"Parameters"}),"\n",(0,t.jsx)(s.p,{children:"String : An expression specifying a string or number to be converted to a specified collation type."}),"\n",(0,t.jsx)(s.p,{children:"flag : An integer code used to specify the desired collation type. Valid values are 0 through 9."}),"\n",(0,t.jsx)(s.p,{children:"len : Optional -- The truncation length in characters, specified as an integer. Truncation is performed on the collation-converted string. This option can only be used with flag values of 7, 8, or 9. A decimal len value is truncated to its integer part. A negative or nonnumeric len value is treated as 0."}),"\n",(0,t.jsx)(s.p,{children:"Description"}),"\n",(0,t.jsx)(s.p,{children:"Collation applies the collation type specified in flag to string. The following flag values are supported:"}),"\n",(0,t.jsx)(s.p,{children:"0 - EXACT : Returns string unchanged. Does not convert NULLs. Corresponds to the SQL %EXACT function."}),"\n",(0,t.jsx)(s.p,{children:"1 - SPACE : Appends a blank to beginning of string."}),"\n",(0,t.jsx)(s.p,{children:"2 - MVR : Returns its argument converted to the MultiValue collation sequence. It is used when a string contains both numeric and non-numeric characters. It divides the expression string into substrings, each substring containing either all numeric or all non-numeric characters. The numeric substrings are sorted in signed numeric order. The non-numeric substrings are sorted in case-sensitive ASCII collation sequence."}),"\n",(0,t.jsx)(s.p,{children:"3 - PLUS : Converts numerics and numeric strings to canonical numbers. A nonnumeric string is returned as 0."}),"\n",(0,t.jsx)(s.p,{children:"4 - MINUS : Converts numerics and numeric strings to canonical numbers and prepends a minus sign. A nonnumeric string is returned as 0."}),"\n",(0,t.jsx)(s.p,{children:"5 - UPPER : Converts letters to uppercase. Corresponds to the SQL %UPPER function."}),"\n",(0,t.jsx)(s.p,{children:"6 - ALPHAUP : Removes leading, trailing, and embedded blanks. Removes all punctuation characters, except commas (,) and question marks (?). Converts letters to uppercase. Corresponds to the SQL %ALPHAUP function."}),"\n",(0,t.jsx)(s.p,{children:"7 - SQLUPPER : Removes trailing blanks. Converts letters to uppercase. Appends a blank to beginning of string. Corresponds to the SQL %SQLUPPER function."}),"\n",(0,t.jsx)(s.p,{children:"8 - SQLSTRING : Removes trailing blanks. Appends a blank to beginning of string. Corresponds to the SQL %SQLSTRING function."}),"\n",(0,t.jsx)(s.p,{children:"9 - STRING : Removes leading, trailing, and embedded blanks. Removes all punctuation characters, except commas (,). Converts letters to uppercase. Appends a blank to beginning of string. Corresponds to the SQL %STRING function."}),"\n",(0,t.jsx)(s.p,{children:"Several of these collation conversions append a blank to the string. This forces numerics and the empty string to be collated as strings."}),"\n",(0,t.jsx)(s.p,{children:"Numerics are converted to canonical form: leading and trailing zeros are removed, as is a trailing decimal point. Multiple plus and minus signs are resolved; if the resulting sign is a plus sign, it is removed."}),"\n",(0,t.jsx)(s.p,{children:'The MINUS collation type appends a minus sign to the supplied sign before canonical resolution. Thus the MINUS collation of a negative number is a positive number. PLUS and MINUS resolve mixed numeric strings (such as "7dwarves") by truncating the string at the first nonnumeric character. PLUS and MINUS resolve nonnumeric strings by assigning them a value of 0.'}),"\n",(0,t.jsx)(s.h3,{id:"revcollation",children:"RevCollation"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RevCollation(String As %String, flag As %Integer) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Performs reverse collation conversion."}),"\n",(0,t.jsx)(s.p,{children:"Parameters"}),"\n",(0,t.jsx)(s.p,{children:"String : An expression specifying a collated string to be converted back to POSSIBLE original value."}),"\n",(0,t.jsx)(s.p,{children:"flag : An integer code used to specify the desired collation type. Valid value is 2."}),"\n",(0,t.jsx)(s.p,{children:"Description"}),"\n",(0,t.jsx)(s.p,{children:"RevCollation applies the collation type specified in flag to string. The following flag values are supported:"}),"\n",(0,t.jsx)(s.p,{children:"2 - MVR : Returns its argument converted from the MultiValue collation sequence. It is used when a string contains both numeric and non-numeric characters. It divides the expression string into substrings, each substring containing either all numeric or all non-numeric characters. The numeric substrings are sorted in signed numeric order. The non-numeric substrings are sorted in case-sensitive ASCII collation sequence. The result can differ from the original due to sign and leading zero suppression applied during the conversion to MVR collation."}),"\n",(0,t.jsx)(s.h3,{id:"purgesyslog",children:"PurgeSYSLOG"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PurgeSYSLOG() As %Numeric\n"})}),"\n",(0,t.jsx)(s.p,{children:"Purges existing error report records from SYSLOG."}),"\n",(0,t.jsx)(s.h3,{id:"getoserrortext",children:"GetOSErrorText"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetOSErrorText(ErrorCode As %Integer) As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the text string corresponding to the given OS error code."}),"\n",(0,t.jsx)(s.h3,{id:"getosversioninfo",children:"GetOSVersionInfo"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetOSVersionInfo() As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns MajorVersion.MinorVersion.BuildNumber on Windows.",(0,t.jsx)(s.br,{}),"\nReturns an unimplemented error on Unix or VMS."]}),"\n",(0,t.jsx)(s.h3,{id:"getphysicalmemory",children:"GetPhysicalMemory"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetPhysicalMemory() As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns total physical memory on Windows.",(0,t.jsx)(s.br,{}),"\nReturns an unimplemented error on Unix."]}),"\n",(0,t.jsx)(s.h3,{id:"getprivatevariables",children:"GetPrivateVariables"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetPrivateVariables(ProcEntry As %String, ByRef OutArray) As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Get a list of all the private variables referenced in a procedure.",(0,t.jsx)(s.br,{}),"\nThe procedure name is given by the entry reference label^routine.",(0,t.jsx)(s.br,{}),"\nThe variable names are returned as subscripts of the OutArray argument.",(0,t.jsx)(s.br,{}),"\nThe return value of the method is the number of variables in the output array.",(0,t.jsx)(s.br,{}),"\nNegative return values indicate an error with the ProcEntry:",(0,t.jsx)(s.br,{}),"\n-1 if the routine is not found",(0,t.jsx)(s.br,{}),"\n-2 if the label is not found",(0,t.jsx)(s.br,{}),"\n-3 if the label is not a procedure",(0,t.jsx)(s.br,{}),"\n-4 if a syntax error"]}),"\n",(0,t.jsx)(s.h3,{id:"getsessionid",children:"GetSessionId"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetSessionId(arg As %Integer) As %Numeric\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns the session Id on Windows.",(0,t.jsx)(s.br,{}),"\nIf arg = 0 or no argument, returns the physical console Session Id or 0xffffffff if there is no session attached to the physical console. The physical console is the monitor, keyboard, and mouse.",(0,t.jsx)(s.br,{}),"\nIf arg = 1, returns the session Id of the current process. On error, returns -GetLastError().",(0,t.jsx)(s.br,{}),"\nReturns an unimplemented error on Unix or VMS."]}),"\n",(0,t.jsx)(s.h3,{id:"hextodecimal",children:"HexToDecimal"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod HexToDecimal(hex As %String) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Converts a hexadecimal string to a decimal string."}),"\n",(0,t.jsx)(s.h3,{id:"decimaltohex",children:"DecimalToHex"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DecimalToHex(decimal As %String) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Converts a decimal string to a hexadecimal string."}),"\n",(0,t.jsx)(s.h3,{id:"mpadd",children:"mpadd"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod mpadd(x, y) [ Internal, Private ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Add two multiple-precision integers, represented as a list of base 1,000,000,000 integers, least significant first"}),"\n",(0,t.jsx)(s.h3,{id:"mpaddx",children:"mpaddx"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod mpaddx(x, y) [ Internal, Private ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Add two multiple-precision hex integers, represented as a list of base 0x1000000 integers, least significant first"}),"\n",(0,t.jsx)(s.h3,{id:"mp2dec",children:"mp2dec"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod mp2dec(x) [ Internal, Private ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Convert multiple-precision integer to decimal string"}),"\n",(0,t.jsx)(s.h3,{id:"mp2hex",children:"mp2hex"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod mp2hex(x) [ Internal, Private ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Convert multiple-precision hex integer to hex string"}),"\n",(0,t.jsx)(s.h3,{id:"corecountfornofreezedberr",children:"CoreCountForNoFreezeDBERR"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CoreCountForNoFreezeDBERR(newvalue As %Integer) As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Configures the collection of core files from ",(0,t.jsx)(s.database,{children:" errors which would not otherwise freeze the system."})]}),"\n",(0,t.jsx)(s.p,{children:"Parameters"}),"\n",(0,t.jsx)(s.p,{children:"newvalue: An optional parameter which specifies the number of core files to capture from this type of problem. Negative values are treated as zero. If omitted the value is not changed."}),"\n",(0,t.jsx)(s.p,{children:"Returns: The current value, before applying the optional new value."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsxs)(s.database,{children:[" errors which result in a system freeze generate core files based on the dumpstyle system parameter. These can be disabled by setting this to NONE. Generally the system will generate either a FULL or PARTIAL dump file in this situation. This parameter controls whether we also generate core files (for use in dignaosing the cause of the trouble) from ",(0,t.jsx)(s.database,{children:" which do not freeze the system. This is implemented as a counter of the # of files to collect. If this is set to zero we do not collect any. The default value is 1."})]})}),"\n",(0,t.jsx)(s.h3,{id:"getframestacksize",children:"GetFrameStackSize"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetFrameStackSize() As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns the configured frame stack size, in bytes.",(0,t.jsx)(s.br,{}),"\nThis is the size that will be used for any new processes that are created."]}),"\n",(0,t.jsx)(s.h3,{id:"setframestacksize",children:"SetFrameStackSize"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetFrameStackSize(size As %Integer) As %Integer\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Sets the configured frame stack size, in bytes, for new processes.",(0,t.jsx)(s.br,{}),"\nIf size is 0, the system default size is set.",(0,t.jsx)(s.br,{}),"\nReturns the previous configured value."]}),"\n",(0,t.jsx)(s.h3,{id:"validateroutinebuffers",children:"ValidateRoutineBuffers"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ValidateRoutineBuffers(flag As %Integer, numbuf As %Integer)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Performs validation of the routine buffers in memory"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Parameters"})}),"\n",(0,t.jsx)(s.p,{children:"flag : 1 = stop if an error is found. Default is 0."}),"\n",(0,t.jsx)(s.p,{children:"numbuf : For a big-endian system, specifies the number of buffers to allocate as a work area. Routines larger than this will not be checked. Default is 8. Little-endian systems do not allocate a work area."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Return value"})}),"\n",(0,t.jsxs)(s.p,{children:["The return value is a $LIST with at least one element.",(0,t.jsx)(s.br,{}),"\nThe first element is the number of buffers (routines) that were checked.",(0,t.jsx)(s.br,{}),"\nIf errors are found, there will be one list element for each error.",(0,t.jsx)(s.br,{}),"\nIf numbuf is specified, there will be one element with the size of the largest routine found. If this value is larger than numbuf on a big-endian system then at least one routine was skipped."]}),"\n",(0,t.jsx)(s.p,{children:"Each error is itself a $LIST with these elements:"}),"\n",(0,t.jsx)(s.p,{children:"The buffer number."}),"\n",(0,t.jsx)(s.p,{children:"The routine name."}),"\n",(0,t.jsx)(s.p,{children:"The error code."}),"\n",(0,t.jsx)(s.p,{children:"Additional information specific to the error code.  Error code 1 is a crc error. The additional information is the expected crc value and the actual value."}),"\n",(0,t.jsx)(s.h3,{id:"checkname",children:"CheckName"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckName(Select As %String, Data As %String, Case As %Boolean = 0) As %Boolean [ Internal, SqlProc ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Used by Config and Security classes.",(0,t.jsx)(s.br,{}),"\n'Case' determines if this is case sensitive (not case sensitive by default)"]}),"\n",(0,t.jsx)(s.h3,{id:"checknamecontains",children:"CheckNameContains"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckNameContains(Select As %String, Data As %String) As %Boolean [ Internal, SqlProc ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Used by Config and Security classes."}),"\n",(0,t.jsx)(s.h3,{id:"checkauditjsonstring",children:"CheckAuditJSONString"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckAuditJSONString(SearchString As %String, EventDataString As %String) As %Boolean [ Internal, SqlProc ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["This method checks if the JSON string generated for an audit entry contains a particular search string.",(0,t.jsx)(s.br,{}),"\nThe string we are looking for is the SearchString input.",(0,t.jsx)(s.br,{}),"\nThe EventDataString input should contain the Event Data for the audit entry,",(0,t.jsx)(s.br,{}),"\nwhich will subsequently contain the JSON String that we are to search through, if there is one present."]}),"\n",(0,t.jsx)(s.h3,{id:"databaselatency",children:"DatabaseLatency"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DatabaseLatency(Directory As %String = "") As %Decimal\n'})}),"\n",(0,t.jsx)(s.p,{children:"Returns a value that describes the health of the mounted database residing in the specified directory. If the Directory argument is missing or is the empty string then the returned value describes the health of the database that holds the data for the current default namespace."}),"\n",(0,t.jsxs)(s.p,{children:["If the specified directory does not exist or does not contain a mounted database then the ",(0,t.jsx)(s.directory,{children:" error is signaled."})]}),"\n",(0,t.jsx)(s.p,{children:"If the directory does exist and the directory contains a mounted database then the method will return a value representing the number of milliseconds required to access block 1 of the database file."}),"\n",(0,t.jsx)(s.p,{children:"NOTE: On many lightly loaded platforms a call on this method will often return a very small value. On most systems there is high speed RAM memory built into the disk drive hardware in order to speed up disk operations. This is followed by some disk cache blocks in the system memory managed by the operating system. The existence of these levels of cache memory means that reading block 1 of a database file will often be done by copying data from one of these levels of cache memory rather than reading data from the spinning platters of the disk drive."}),"\n",(0,t.jsxs)(s.p,{children:["NOTE: Certain database files may not support this method. For example, specifying a database directory which is cluster mounted may signal the ",(0,t.jsx)(s.directory,{children:" error."})]}),"\n",(0,t.jsx)(s.h3,{id:"zboolean",children:"ZBOOLEAN"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ZBOOLEAN(a, b) As %Boolean [ Internal, SqlProc ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Used by Config and Security classes."}),"\n",(0,t.jsx)(s.h3,{id:"roundtocfloat",children:'"RoundToCFloat'}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod "RoundToCFloat()"() [ Internal ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"Takes the input, coerces it to a $double, casts it to C float, and returns as a $double. Used to sanity check situations where IRIS converts $double data to float internally."})]})}function c(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var t=n(96540);const r={},i=t.createContext(r);function a(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);