"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[61056],{37158:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>o,frontMatter:()=>r,toc:()=>l});var s=t(74848),i=t(28453);const r={pagination_prev:null,pagination_next:null},a="%Atelier.v2.Utils.General",l=[{value:"Methods",id:"methods",level:2},{value:"ValidType",id:"validtype",level:3},{value:"ValidLANG",id:"validlang",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"atelierv2utilsgeneral",children:"%Atelier.v2.Utils.General"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Class %Atelier.v2.Utils.General Extends %RegisteredObject\n"})}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"validtype",children:"ValidType"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ValidType(pType As %String, ByRef pKeywords As %String) As %String\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ValidType"}),"(pType,pKeyword) checks that a Type attribute is valid. If the type is valid then it is changed to upper case, inserted into the pKeywords array (passsed by reference) and returned as the result of ",(0,s.jsx)(n.strong,{children:"ValidType"})]}),"\n",(0,s.jsxs)(n.p,{children:["If the type is invalid then ",(0,s.jsx)(n.strong,{children:"ValidType"}),' returns "".']}),"\n",(0,s.jsx)(n.p,{children:"Note: If the pKeywords array contains a conflicting Type value or a conflicting LanguageMode value then the Type attribute is invalid."}),"\n",(0,s.jsx)(n.h3,{id:"validlang",children:"ValidLANG"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ValidLANG(pMode As %String, ByRef pKeywords As %String) As %String\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ValidLANG"}),"(pMode,pKeyword) checks that a LanguageMode attribute is valid. If the mode is valid then it is inserted into the pKeywords array (passed by reference) and returned as the result of ",(0,s.jsx)(n.strong,{children:"ValidLANG"})]}),"\n",(0,s.jsxs)(n.p,{children:["If the mode is invalid then ",(0,s.jsx)(n.strong,{children:"ValidLANG"}),' returns "".']}),"\n",(0,s.jsx)(n.p,{children:"Note: If the pKeywords array contains a conflicting Type value or a conflicting LanguageMode value then the mode attribute is invalid."})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);