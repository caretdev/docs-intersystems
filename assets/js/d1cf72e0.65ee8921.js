"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[5575],{83035:(e,s,r)=>{r.r(s),r.d(s,{contentTitle:()=>o,default:()=>c,frontMatter:()=>i,toc:()=>l});var t=r(74848),n=r(28453);const i={pagination_prev:null,pagination_next:null},o="%DeepSee.Query.expression",l=[{value:"Properties",id:"properties",level:2},{value:"operator",id:"operator",level:3},{value:"isScalarFunction",id:"isscalarfunction",level:3},{value:"scalarArgCount",id:"scalarargcount",level:3},{value:"label",id:"label",level:3},{value:"formatString",id:"formatstring",level:3},{value:"solveOrder",id:"solveorder",level:3},{value:"Methods",id:"methods",level:2},{value:"%GetType",id:"gettype",level:3},{value:"%ToString",id:"tostring",level:3},{value:"%ProcessAxes",id:"processaxes",level:3},{value:"%ProcessFilter",id:"processfilter",level:3}];function a(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"deepseequeryexpression",children:"%DeepSee.Query.expression"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %DeepSee.Query.expression Extends group [ System = 3 ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["This class defines an expression within a DeepSee query.",(0,t.jsx)(s.br,{}),"\nAn expression belongs to a set. Though an expression is a group, it only makes use of its first two children."]}),"\n",(0,t.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(s.h3,{id:"operator",children:"operator"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property operator As %DeepSee.Datatype.string(MAXLEN = 25, XMLPROJECTION = "attribute");\n'})}),"\n",(0,t.jsx)(s.p,{children:'Logical operator that is applied to the children of this expression. This can be an operator (such as "+", or a SCALAR function, such as "SQRT").'}),"\n",(0,t.jsx)(s.h3,{id:"isscalarfunction",children:"isScalarFunction"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property isScalarFunction As %Boolean(XMLPROJECTION = "attribute") [ InitialExpression = 0 ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"Set true if this operator is a scalar function."}),"\n",(0,t.jsx)(s.h3,{id:"scalarargcount",children:"scalarArgCount"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property scalarArgCount As %String(XMLPROJECTION = "attribute") [ InitialExpression = 0 ];\n'})}),"\n",(0,t.jsx)(s.p,{children:'If this operator is a scalar function, this is the number of expected arguments. This takes the form "arguments:optional arguments".'}),"\n",(0,t.jsx)(s.h3,{id:"label",children:"label"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property label As %DeepSee.Datatype.string(XMLPROJECTION = "attribute") [ InitialExpression = "Expression" ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"Axis label used for this expression."}),"\n",(0,t.jsx)(s.h3,{id:"formatstring",children:"formatString"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property formatString As %String(MAXLEN = 255, XMLPROJECTION = "attribute");\n'})}),"\n",(0,t.jsx)(s.p,{children:"Format string to apply to this member."}),"\n",(0,t.jsx)(s.h3,{id:"solveorder",children:"solveOrder"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property solveOrder As %Integer(MINVAL = 0, XMLPROJECTION = "attribute");\n'})}),"\n",(0,t.jsx)(s.p,{children:"Solve order to apply to this expression (applied from outer calcMember)."}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"gettype",children:"%GetType"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %GetType() As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return the type of this node."}),"\n",(0,t.jsx)(s.h3,{id:"tostring",children:"%ToString"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ToString(Output pSC As %Status) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Convert this node to its text representation."}),"\n",(0,t.jsx)(s.h3,{id:"processaxes",children:"%ProcessAxes"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ProcessAxes(pCube As %String, pKey As %String, ByRef pNodeNo As %Integer, Output pNewNodeNo As %Integer, pParent As %Integer, pVisible As %Boolean = 1) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Execute and build the axes output for this expression."}),"\n",(0,t.jsx)(s.h3,{id:"processfilter",children:"%ProcessFilter"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ProcessFilter(ByRef pFilterTree As %List, pCube As %String, ByRef pNodeNo As %Integer, Output pNewNodeNo As %Integer, pParent As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Process the filter output for this expression."})]})}function c(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>o,x:()=>l});var t=r(96540);const n={},i=t.createContext(n);function o(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);