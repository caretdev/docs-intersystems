"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[15019],{38175:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>c,frontMatter:()=>r,toc:()=>o});var s=t(74848),i=t(28453);const r={pagination_prev:null,pagination_next:null},a="SYS.ECP",o=[{value:"Parameters",id:"parameters",level:2},{value:"DOMAIN",id:"domain",level:3},{value:"Methods",id:"methods",level:2},{value:"AskUserForRemoteDir",id:"askuserforremotedir",level:3},{value:"ChangeToNotConnected",id:"changetonotconnected",level:3},{value:"DisplayDatabases",id:"displaydatabases",level:3},{value:"GetClientConnState",id:"getclientconnstate",level:3},{value:"GetServerConnState",id:"getserverconnstate",level:3},{value:"GetSFNFromName",id:"getsfnfromname",level:3},{value:"ServerAction",id:"serveraction",level:3},{value:"StorageDBName",id:"storagedbname",level:3},{value:"RemoveFromPendingList",id:"removefrompendinglist",level:3},{value:"RemoveAuthorizedCN",id:"removeauthorizedcn",level:3},{value:"AddAuthorizedCN",id:"addauthorizedcn",level:3},{value:"UpdateSSL",id:"updatessl",level:3},{value:"GetRemoteDBMountStatus",id:"getremotedbmountstatus",level:3},{value:"DatabaseListExecute",id:"databaselistexecute",level:3},{value:"DatabaseListFetch",id:"databaselistfetch",level:3},{value:"DatabaseListClose",id:"databaselistclose",level:3},{value:"ClientListExecute",id:"clientlistexecute",level:3},{value:"ClientListFetch",id:"clientlistfetch",level:3},{value:"ClientListClose",id:"clientlistclose",level:3},{value:"ServerListExecute",id:"serverlistexecute",level:3},{value:"ServerListFetch",id:"serverlistfetch",level:3},{value:"ServerListClose",id:"serverlistclose",level:3},{value:"SSLPendingConnectionsExecute",id:"sslpendingconnectionsexecute",level:3},{value:"SSLPendingConnectionsClose",id:"sslpendingconnectionsclose",level:3},{value:"SSLPendingConnectionsFetch",id:"sslpendingconnectionsfetch",level:3},{value:"SSLAuthorizedConnectionsExecute",id:"sslauthorizedconnectionsexecute",level:3},{value:"SSLAuthorizedConnectionsClose",id:"sslauthorizedconnectionsclose",level:3},{value:"SSLAuthorizedConnectionsFetch",id:"sslauthorizedconnectionsfetch",level:3}];function l(e){const n={a:"a",br:"br",code:"code",directory:"directory",error:"error",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",sys:"sys",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"sysecp",children:"SYS.ECP"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Class SYS.ECP [ Abstract ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Enterprise Cache Protocol Notes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A Server Connection is a connection from this system as a client to a remote server."}),"\n",(0,s.jsx)(n.li,{children:"A Client Connection is a connection from a remote client to this system as a server."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(n.h3,{id:"domain",children:"DOMAIN"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Parameter DOMAIN = "%Utility";\n'})}),"\n",(0,s.jsx)(n.p,{children:"Default Localization Domain"}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"askuserforremotedir",children:"AskUserForRemoteDir"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod AskUserForRemoteDir() As %Integer [ Internal ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Asks the user to enter a remote directory nameand returns the SFN of that database or 0 if they didn't chose one. (sfn #0 cannot be a remote directory)."}),"\n",(0,s.jsx)(n.h3,{id:"changetonotconnected",children:"ChangeToNotConnected"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ChangeToNotConnected(ConnectionName As %String) As %Boolean\n"})}),"\n",(0,s.jsx)(n.p,{children:"Changes an ECP connection state to not connected. Connection name is as specified in the network panel. Returns zero if the connection name is invalid"}),"\n",(0,s.jsx)(n.h3,{id:"displaydatabases",children:"DisplayDatabases"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod DisplayDatabases()\n"})}),"\n",(0,s.jsx)(n.p,{children:'Display the list of database remote databases this client has "mounted"'}),"\n",(0,s.jsx)(n.h3,{id:"getclientconnstate",children:"GetClientConnState"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetClientConnState(ConnectionName As %String) As %Integer\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Returns the state of an ECP Client Connection.",(0,s.jsx)(n.br,{}),"\nConnection name is as specified in the network panel.",(0,s.jsx)(n.br,{}),"\nReturn value:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"-1 - Invalid connection name"}),"\n",(0,s.jsx)(n.li,{children:"0 - Free"}),"\n",(0,s.jsx)(n.li,{children:"1 - Normal"}),"\n",(0,s.jsx)(n.li,{children:"2 - Trouble"}),"\n",(0,s.jsx)(n.li,{children:"3 - Recovering"}),"\n",(0,s.jsx)(n.li,{children:"4 - Restart"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"getserverconnstate",children:"GetServerConnState"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetServerConnState(ConnectionName As %String) As %Integer\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Returns the state of an ECP Server Connection.",(0,s.jsx)(n.br,{}),"\nConnection name is as specified in the network panel.",(0,s.jsx)(n.br,{}),"\nReturn value:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"-2 - Invalid connection name"}),"\n",(0,s.jsx)(n.li,{children:"-1 - Invalid"}),"\n",(0,s.jsx)(n.li,{children:"0 - Initializing"}),"\n",(0,s.jsx)(n.li,{children:"1 - Not Connected"}),"\n",(0,s.jsx)(n.li,{children:"2 - Connection in Progress"}),"\n",(0,s.jsx)(n.li,{children:"3 - Connection Failed"}),"\n",(0,s.jsx)(n.li,{children:"4 - Disabled"}),"\n",(0,s.jsx)(n.li,{children:"5 - Normal"}),"\n",(0,s.jsx)(n.li,{children:"6 - Trouble"}),"\n",(0,s.jsx)(n.li,{children:"7 - Recovery"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"getsfnfromname",children:"GetSFNFromName"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetSFNFromName(dbname As %String) [ Internal ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"dbname"})," is a mounted remote database in the form ^",(0,s.jsxs)(n.sys,{children:["^",(0,s.jsxs)(n.directory,{children:['. This method returns the sfn of the database or "0,',(0,s.jsx)(n.error,{text:"",children:'" if the database does not appear to be a valid remote database for the specified system.'})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"serveraction",children:"ServerAction"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ServerAction(ConnectionName As %String, Action As %Integer, Wait As %Boolean = 1) As %Status\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Performs Action on an ECP Server Connection.",(0,s.jsx)(n.br,{}),"\nConnection name is as specified in the network panel.",(0,s.jsx)(n.br,{}),"\nAction:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"1 - Change to Not Connected"}),"\n",(0,s.jsx)(n.li,{children:"2 - Change to Disabled"}),"\n",(0,s.jsxs)(n.li,{children:["3 - Change to Normal",(0,s.jsx)(n.br,{}),"\nWait: 1=wait for answer, 0=do not wait"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"storagedbname",children:"StorageDBName"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod StorageDBName() As %String [ Internal ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Return the DB name for of the temporary database which is where we store the blocks that form the client cache of a ECP server."}),"\n",(0,s.jsx)(n.h3,{id:"removefrompendinglist",children:"RemoveFromPendingList"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod RemoveFromPendingList(SSLComputerName As %String, Authorize As %Integer = 0) As %Status [ Final ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Remove an entry from the ECP SSL pending list.",(0,s.jsx)(n.br,{}),"\nThis is called to authorize or reject an incoming ECP connection pending for authorization, and remove the pending connection from the pending list."]}),"\n",(0,s.jsx)(n.p,{children:"Input Parameters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SSLComputerName is the Distinguished Name of the certificate on remote client side."}),"\n",(0,s.jsx)(n.li,{children:"Authorize is non-zero to authorize the connection, otherwise the pending connection is rejected.\nThis method always returned 'OK' even if the specified SSLComputerName does not exist."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"removeauthorizedcn",children:"RemoveAuthorizedCN"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod RemoveAuthorizedCN(SSLComputerName As %String) As %Status [ Final ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Remove an entry from the ECP SSL authorized list.",(0,s.jsx)(n.br,{}),"\nThis is called to reject an authorized ECP connection. So the remote client needs to be re-authorized when it re-connects. But this won't affect the currently connected ECP connection."]}),"\n",(0,s.jsx)(n.p,{children:"Input Parameters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SSLComputerName is the Distinguished Name of the certificate on remote client side.\nThis method always returned 'OK' even if the specified SSLComputerName does not exist."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"addauthorizedcn",children:"AddAuthorizedCN"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod AddAuthorizedCN(SSLComputerName As %String) As %Status [ Final ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Add an entry to the ECP SSL authorized list.",(0,s.jsx)(n.br,{}),"\nWhen users want to pre-authorize a remote ECP client connection, they can use this method to add the remote connection the to authorized list, so when it connects to this data server, it does not need to be authorized."]}),"\n",(0,s.jsx)(n.p,{children:"Input Parameters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SSLComputerName is the Distinguished Name of the certificate on remote client side.\nThis method always returned 'OK' even if the specified SSLComputerName does not exist."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"updatessl",children:"UpdateSSL"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod UpdateSSL(ByRef SSLInfo As %String, Server As %Integer = 1) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Method to create or modify ECP SSL configuration which can be %ECPServer or %ECPClient SSL configurations. Input Parameters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["SSLInfo Array of properties to create the ECP SSL configurations. For creating the configuration if the property is not specified, a default value will be assigned to the property. For modifying the configuration if the property is not specified, the property won't be changed. This is a pass-by-reference parameter. You could see more detail of each property in Security.SSLConfigs.\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'SSLInfo("CAFile") File containing X.509 certificate(s) of trusted Certificate Authorities. This must not be a null string.'}),"\n",(0,s.jsx)(n.li,{children:'SSLInfo("CRLFile") File containing X.509 Certificate Revocation List for trusted Certificate Authorities. Default is a null string.'}),"\n",(0,s.jsx)(n.li,{children:'SSLInfo("CertificateFile") File containing this configuration\'s X.509 certificate. Default is a null string. If not null, PrivateKeyFile must also be specified.'}),"\n",(0,s.jsx)(n.li,{children:'SSLInfo("CipherList") Colon-delimited list of enabled ciphersuites. Default is "ALL:!aNULL:!eNULL:!SSLv2".'}),"\n",(0,s.jsx)(n.li,{children:'SSLInfo("CipherSuites") Colon-delimited list of enabled ciphersuitesfor TLSv1.3. Default is "TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256".'}),"\n",(0,s.jsx)(n.li,{children:'SSLInfo("PrivateKeyFile") File containing this configuration\'s private key. Default is a null string. If not null, CertificateFile must also be specified.'}),"\n",(0,s.jsx)(n.li,{children:'SSLInfo("PrivateKeyPassword") Optional password used to decrypt this configuration\'s private key. Default is a null string. If not null, PrivateKeyFile and CertificateFile must also be specified.'}),"\n",(0,s.jsx)(n.li,{children:'SSLInfo("PrivateKeyType") Private key type. 1 - DSA, 2 - RSA. Default value is 2.'}),"\n",(0,s.jsx)(n.li,{children:'SSLInfo("TLSMinVersion") Minimum TLS protocol version enabled. The value can be 2 - SSLv3, 4 - TLSv1.0, 8 - TLSv1.1, 16 - TLSv1.2, 32 - TLSv1.3. Default value is 8 (TLSv1.1) for OpenSSL 1.0, 16 (TLSv1.2) for OpenSSL 1.1 and later. Note that the TLSv1.3 is not supported in OpenSSL 1.0 and earlier.'}),"\n",(0,s.jsx)(n.li,{children:'SSLInfo("TLSMaxVersion") Maximum TLS protocol version enabled. The value can be 2 - SSLv3, 4 - TLSv1.0, 8 - TLSv1.1, 16 - TLSv1.2, 32 - TLSv1.3. Default value is 16 (TLSv1.2) for OpenSSL 1.0, 32 (TLSv1.3) for OpenSSL 1.1 and later. Note that the TLSv1.3 is not supported in OpenSSL 1.0 and earlier.'}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Server is non-zero for setting up %ECPServer SSL, otherwise setting up %ECPClient."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"getremotedbmountstatus",children:"GetRemoteDBMountStatus"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetRemoteDBMountStatus(ServerName As %String, Directory As %String) As %Integer\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Given the data server connection name and the remote directory name on this client, returns the mount status codes of the remote database.",(0,s.jsx)(n.br,{}),"\nThe Status Codes are:",(0,s.jsx)(n.br,{}),"\n0 - Remote database has not been mounted yet.",(0,s.jsx)(n.br,{}),"\n1 - Remote database is dismounted.",(0,s.jsx)(n.br,{}),"\n2 - Remote database is mounted read-only.",(0,s.jsx)(n.br,{}),"\n3 - Remote database is mounted read-write."]}),"\n",(0,s.jsx)(n.h3,{id:"databaselistexecute",children:"DatabaseListExecute"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod DatabaseListExecute(ByRef qHandle As %Binary, DBNames As %String = "*", ServerName As %String = "*", Directory As %String = "*") As %Status [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Query to list configured remote databases. Returned database's configuration name, server name, directory and mount status codes.",(0,s.jsx)(n.br,{}),"\nThe Status Codes are:",(0,s.jsx)(n.br,{}),"\n0 - Remote database has not been mounted yet.",(0,s.jsx)(n.br,{}),"\n1 - Remote database is dismounted.",(0,s.jsx)(n.br,{}),"\n2 - Remote database is mounted read-only.",(0,s.jsx)(n.br,{}),"\n3 - Remote database is mounted read-write."]}),"\n",(0,s.jsx)(n.h3,{id:"databaselistfetch",children:"DatabaseListFetch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod DatabaseListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ClientListExecute ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"databaselistclose",children:"DatabaseListClose"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod DatabaseListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ClientListExecute ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"clientlistexecute",children:"ClientListExecute"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ClientListExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Query to list remote app server connections. Returned app server's client name, status, IP address and port number."}),"\n",(0,s.jsxs)(n.p,{children:["The Client Name is in ConnectName:CliSysName:InstanceName formart:",(0,s.jsx)(n.br,{}),"\nConnectName - Connection name as defined in the app server's ECPServers configuration.",(0,s.jsx)(n.br,{}),"\nCliSysName - CliSysName in ",(0,s.jsx)(n.a,{href:"%25CSP.Documatic.cls?PAGE=CLASS&LIBRARY=%25SYS&CLASSNAME=Config.Startup",children:"Config.Startup"})," of the app server if defined. If not defined, defaults to app server's hostname..",(0,s.jsx)(n.br,{}),"\nInstanceName - App server's instance name."]}),"\n",(0,s.jsxs)(n.p,{children:["The Status can be:",(0,s.jsx)(n.br,{}),"\nNormal - Node is actively in use.",(0,s.jsx)(n.br,{}),"\nTrouble - Node failed, waiting for recovering.",(0,s.jsx)(n.br,{}),"\nRecovering - Node is in process of recovering.",(0,s.jsx)(n.br,{}),"\nRestart - Server has restarted, but this connection is awaiting for recovery.",(0,s.jsx)(n.br,{}),"\nDeadCleanup - Server is in the process of cleaning dead dmns..",(0,s.jsx)(n.br,{}),"\nInvalid - Node has an invalid status code."]}),"\n",(0,s.jsx)(n.h3,{id:"clientlistfetch",children:"ClientListFetch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ClientListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ClientListExecute ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"clientlistclose",children:"ClientListClose"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ClientListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ClientListExecute ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"serverlistexecute",children:"ServerListExecute"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ServerListExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"serverlistfetch",children:"ServerListFetch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ServerListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ServerListExecute ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"serverlistclose",children:"ServerListClose"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod ServerListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ServerListExecute ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sslpendingconnectionsexecute",children:"SSLPendingConnectionsExecute"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod SSLPendingConnectionsExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Query to get list of pending incoming ECP connections to be authorized."}),"\n",(0,s.jsx)(n.p,{children:"The returned columns are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SSLComputerName is the Distinguished Name of the certificate on remote client side."}),"\n",(0,s.jsx)(n.li,{children:"ClientIP is the IP address of remote client."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"sslpendingconnectionsclose",children:"SSLPendingConnectionsClose"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod SSLPendingConnectionsClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = PendingNewMembersExecute ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sslpendingconnectionsfetch",children:"SSLPendingConnectionsFetch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod SSLPendingConnectionsFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = PendingNewMembersExecute ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sslauthorizedconnectionsexecute",children:"SSLAuthorizedConnectionsExecute"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod SSLAuthorizedConnectionsExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Query to get list of authorized incoming ECP connections.",(0,s.jsx)(n.br,{}),"\nThe returned column is:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SSLComputerName is the Distinguished Name of the certificate on remote client side."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"sslauthorizedconnectionsclose",children:"SSLAuthorizedConnectionsClose"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod SSLAuthorizedConnectionsClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = PendingNewMembersExecute ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sslauthorizedconnectionsfetch",children:"SSLAuthorizedConnectionsFetch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod SSLAuthorizedConnectionsFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = PendingNewMembersExecute ]\n"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);