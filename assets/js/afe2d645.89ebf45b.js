"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[71840],{95028:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>a,default:()=>c,frontMatter:()=>o,toc:()=>l});var t=n(74848),i=n(28453);const o={pagination_prev:null,pagination_next:null},a="%CSP.SessionEvents",l=[{value:"Methods",id:"methods",level:2},{value:"OnEndSession",id:"onendsession",level:3},{value:"OnTimeout",id:"ontimeout",level:3},{value:"OnStartSession",id:"onstartsession",level:3},{value:"OnApplicationChange",id:"onapplicationchange",level:3},{value:"OnLogin",id:"onlogin",level:3},{value:"OnLogout",id:"onlogout",level:3},{value:"OnStartRequest",id:"onstartrequest",level:3},{value:"OnEndRequest",id:"onendrequest",level:3}];function r(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"cspsessionevents",children:"%CSP.SessionEvents"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %CSP.SessionEvents Extends %RegisteredObject [ Abstract, Not ProcedureBlock, System = 3 ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Abstract class which defines the interfaces that are called during the lifetime of a %CSP.Session object. In order to use this you should subclass this and implement the method code you wish to be executed. Then within the CSP application configuration set the event class to the class you have created."}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"onendsession",children:"OnEndSession"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OnEndSession()\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Called when the session is about to be deleted, either because of a timeout (in which case OnTimeout is called first) or because the application has explicitly closed this session. Use the %session object to examine this session. If you wish to abort this deletion then: ",(0,t.jsx)(s.code,{children:"Set %session.EndSession=0"})]}),"\n",(0,t.jsx)(s.h3,{id:"ontimeout",children:"OnTimeout"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OnTimeout()\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Called when the CSP Daemon times out out this session before calling EndSession. Use the %session object to examine this session. If you wish to abort this deletion then: ",(0,t.jsx)(s.code,{children:"Set %session.EndSession=0"})]}),"\n",(0,t.jsx)(s.h3,{id:"onstartsession",children:"OnStartSession"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OnStartSession()\n"})}),"\n",(0,t.jsx)(s.p,{children:"Called when a new session is created and its values are initialised."}),"\n",(0,t.jsxs)(s.p,{children:["This is called before the license for this session is allocated, and if you wish to abort this session and return the standard out of licenses error page then: ",(0,t.jsx)(s.code,{children:"Set %session.EndSession=1"})]}),"\n",(0,t.jsx)(s.h3,{id:"onapplicationchange",children:"OnApplicationChange"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OnApplicationChange(oldapp As %String, newapp As %String) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Called when a session that was in CSP application oldapp is now going to run a page in CSP application newapp. If this returns an error value then instead of running the page in the new application it will redirect to the error page (error page looked up from old application)."}),"\n",(0,t.jsx)(s.h3,{id:"onlogin",children:"OnLogin"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OnLogin() As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Called when a login occurs that changed the $username or the roles this user is running with. If this returns an error status then this is reported via the standard error page."}),"\n",(0,t.jsx)(s.h3,{id:"onlogout",children:"OnLogout"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OnLogout() As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Called when a logout. The current authentication for the session is invalidated. occurs that changed the $username or the roles this user is running with. If this returns an error status then the logout will be stopped. If you wish to end the session after the logout then: ",(0,t.jsx)(s.code,{children:"Set %session.EndSession=1"})]}),"\n",(0,t.jsx)(s.h3,{id:"onstartrequest",children:"OnStartRequest"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OnStartRequest() As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Called when we start getting data from the CSP gateway for a request"}),"\n",(0,t.jsx)(s.h3,{id:"onendrequest",children:"OnEndRequest"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OnEndRequest() As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Called when we have finished processing this request"})]})}function c(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>l});var t=n(96540);const i={},o=t.createContext(i);function a(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);