"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[77335],{70531:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>r,default:()=>o,frontMatter:()=>a,toc:()=>d});var n=t(74848),i=t(28453);const a={pagination_prev:null,pagination_next:null},r="%Library.GUID",d=[{value:"Parameters",id:"parameters",level:2},{value:"GUIDENABLED",id:"guidenabled",level:3},{value:"Methods",id:"methods",level:2},{value:"Filter",id:"filter",level:3},{value:"%GUIDFind",id:"guidfind",level:3},{value:"%GUIDGetNextOp",id:"guidgetnextop",level:3},{value:"%GUIDGetLastOp",id:"guidgetlastop",level:3},{value:"AssignGUID",id:"assignguid",level:3},{value:"%FindGUID",id:"findguid",level:3}];function l(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"libraryguid",children:"%Library.GUID"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class %Library.GUID [ Abstract, System = 3 ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"For information on this class"}),", see ",(0,n.jsx)(s.a,{href:"/csp/docbook/DocBook.UI.Page.cls?FIND=CLASSES+%25Library.GUID",children:"Using Object Synchronization"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"This class implements utility methods for GUIDs."}),"\n",(0,n.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(s.h3,{id:"guidenabled",children:"GUIDENABLED"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter GUIDENABLED = 1;\n"})}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"filter",children:"Filter"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Filter(guid As %String, FilterObject As %RegisteredObject = "", trn As %Integer) As %Integer\n'})}),"\n",(0,n.jsx)(s.p,{children:"This method should be implemented by the user. This method is invoked by %SYNC.SyncSet.AddJournaledObject when the Filter is not null. Non zero return value means that the object should be excluded"}),"\n",(0,n.jsx)(s.h3,{id:"guidfind",children:"%GUIDFind"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GUIDFind(guid As %String) As %RawString [ CodeMode = expression ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"guidgetnextop",children:"%GUIDGetNextOp"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GUIDGetNextOp(guid As %String, ByRef num As %String) As %RawString\n"})}),"\n",(0,n.jsx)(s.h3,{id:"guidgetlastop",children:"%GUIDGetLastOp"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GUIDGetLastOp(guid As %String, ByRef num As %String) As %RawString\n"})}),"\n",(0,n.jsx)(s.h3,{id:"assignguid",children:"AssignGUID"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AssignGUID(class As %String, nOutput As %Integer = 0) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method will assign a GUID to all objects that don't already have one."}),"\n",(0,n.jsx)(s.h3,{id:"findguid",children:"%FindGUID"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %FindGUID(pClassName As %String(MAXLEN=""), pID As %Binary) As %String\n'})}),"\n",(0,n.jsx)(s.p,{children:'%FindGUID() attempts to locate the GUID of object for which we do not know the most specific type class. This can happen when resolving the ID for an object that has been deleted, as sometimes occurs when dealing with objects retrieved from the system journal for the purpose of synchronizing with another system. This method assumes that the normal GUID resolution has failed and that if another object of a different MSTC exists within the same root extent then it is the same object (same GUID). For example, class A is persistent and it has two sub classes - B and C. An instance of B is created and assigned a GUID. At some future time, that instance of B is deleted and recreated as an instance of C using the same ID value. The premise of %FindGUID is that the object having an OID of (id,"B") is the same object as that with an OID of (id,"C").'})]})}function o(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>d});var n=t(96540);const i={},a=n.createContext(i);function r(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);