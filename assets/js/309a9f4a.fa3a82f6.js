"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[18788],{97528:(e,n,a)=>{a.r(n),a.d(n,{contentTitle:()=>s,default:()=>d,frontMatter:()=>r,toc:()=>l});var t=a(74848),i=a(28453);const r={pagination_prev:null,pagination_next:null},s="%Library.InformixTimeStamp",l=[{value:"Parameters",id:"parameters",level:2},{value:"XMLTIMEZONE",id:"xmltimezone",level:3},{value:"XSDTYPE",id:"xsdtype",level:3},{value:"JSONTYPE",id:"jsontype",level:3},{value:"LARGEQUAL;",id:"largequal",level:3},{value:"SMALLQUAL;",id:"smallqual",level:3},{value:"Methods",id:"methods",level:2},{value:"XSDToLogical",id:"xsdtological",level:3},{value:"LogicalToXSD",id:"logicaltoxsd",level:3},{value:"Normalize",id:"normalize",level:3},{value:"IsValid",id:"isvalid",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"libraryinformixtimestamp",children:"%Library.InformixTimeStamp"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Class %Library.InformixTimeStamp Extends %DataType [ ClientDataType = TIMESTAMP, OdbcType = TIMESTAMP, Not ProcedureBlock, SqlCategory = TIMESTAMP, System = 2 ]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"%Library.InformixTimeStamp"})," data type class represents a time stamp value."]}),"\n",(0,t.jsxs)(n.p,{children:["The logical value of the ",(0,t.jsx)(n.strong,{children:"%Library.InformixTimeStamp"})," data type is in ",(0,t.jsx)(n.code,{children:"YYYY-MM-DD HH:MM:SS.nnnnnnnnn"})," format."]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(n.h3,{id:"xmltimezone",children:"XMLTIMEZONE"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Parameter XMLTIMEZONE [ Constraint = "IGNORE,UTC", Flags = ENUM ] = "UTC";\n'})}),"\n",(0,t.jsx)(n.p,{children:'XMLTIMEZONE specifies the handling of timezone part of the XML format dateTime. "UTC" means convert to UTC on input. "IGNORE means ignore the timezone.'}),"\n",(0,t.jsx)(n.h3,{id:"xsdtype",children:"XSDTYPE"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Parameter XSDTYPE = "dateTime";\n'})}),"\n",(0,t.jsx)(n.p,{children:"Declares the XSD type used when projecting XML Schemas."}),"\n",(0,t.jsx)(n.h3,{id:"jsontype",children:"JSONTYPE"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Parameter JSONTYPE = "string";\n'})}),"\n",(0,t.jsx)(n.h3,{id:"largequal",children:"LARGEQUAL;"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter LARGEQUAL;\n"})}),"\n",(0,t.jsx)(n.p,{children:"The %Library.InformixTimeStamp data type is composed of a contiguous sequence of fields that represents each component of time you want to record and uses the following syntax: DATETIME largest_qualifier TO smallest_qualifier The largest_qualifier and smallest_qualifier can be any one of the fields: Qualifier Field Valid Entries YEAR A year numbered from 1 to 9,999 (A.D.) MONTH A month numbered from 1 to 12 DAY A day numbered from 1 to 31, as appropriate to the month HOUR An hour numbered from 0 (midnight) to 23 MINUTE A minute numbered from 0 to 59 SECOND A second numbered from 0 to 59 FRACTION A decimal fraction of a second with up to 5 digits of precision. The default precision is 3 digits (a thousandth of a second). Other precisions are indicated explicitly by writing FRACTION(n), where n is the desired number of digits from 1 to 5. ."}),"\n",(0,t.jsx)(n.h3,{id:"smallqual",children:"SMALLQUAL;"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter SMALLQUAL;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"xsdtological",children:"XSDToLogical"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod XSDToLogical(%val As %String) As %TimeStamp [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Converts the SOAP encoded input dateTime value into a %TimeStamp value."}),"\n",(0,t.jsx)(n.h3,{id:"logicaltoxsd",children:"LogicalToXSD"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToXSD(%val As %TimeStamp) As %String [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Converts the %TimeStamp value to the canonical SOAP encoded value."}),"\n",(0,t.jsx)(n.h3,{id:"normalize",children:"Normalize"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Normalize(%val As %RawString) As %TimeStamp [ CodeMode = expression, ServerOnly = 1 ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Transforms integer values into timestamp."}),"\n",(0,t.jsx)(n.h3,{id:"isvalid",children:"IsValid"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod IsValid(%val As %RawString) As %Status [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Tests if the logical value %val, which represents an Informix Timestamp value in ",(0,t.jsx)(n.code,{children:"YYYY-MM-DD HH:MM:SS[.nnnnn]"})," format, is valid. Valid formats include: - TimeStamp value in the format YYYY-MM-DD HH:MI:SS[.nnnnn] - Integer value that represents +$Horolog, will be converted to the date portion of the Informix TimeStamp value - Time value of the form HH:MM:SS[.nnnnn], will default the date portion of the Informix Timestamp to today's date - Date value in the format YYYY-MM-DD, , will be converted to the date portion of the Informix TimeStamp value"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>l});var t=a(96540);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);