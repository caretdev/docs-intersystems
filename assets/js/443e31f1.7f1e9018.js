"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[20012],{60753:(e,s,r)=>{r.r(s),r.d(s,{contentTitle:()=>i,default:()=>o,frontMatter:()=>a,toc:()=>l});var t=r(74848),n=r(28453);const a={pagination_prev:null,pagination_next:null},i="%DeepSee.Query.query",l=[{value:"Properties",id:"properties",level:2},{value:"cube",id:"cube",level:3},{value:"queryType",id:"querytype",level:3},{value:"%target",id:"target",level:3},{value:"%targetKey",id:"targetkey",level:3},{value:"useCache",id:"usecache",level:3},{value:"%isCompound",id:"iscompound",level:3},{value:"%isCompoundMember",id:"iscompoundmember",level:3},{value:"parentCube",id:"parentcube",level:3},{value:"%mustCompute",id:"mustcompute",level:3},{value:"%recomputeAxes",id:"recomputeaxes",level:3},{value:"%removeEmpty",id:"removeempty",level:3},{value:"recompute",id:"recompute",level:3},{value:"useAgents",id:"useagents",level:3},{value:"showPlan",id:"showplan",level:3},{value:"axes",id:"axes",level:3},{value:"parentQueryKey",id:"parentquerykey",level:3},{value:"parentWITHText",id:"parentwithtext",level:3},{value:"subqueries",id:"subqueries",level:3},{value:"slicer",id:"slicer",level:3},{value:"filters",id:"filters",level:3},{value:"filterAxis",id:"filteraxis",level:3},{value:"measureAxis",id:"measureaxis",level:3},{value:"%WITHText",id:"withtext",level:3},{value:"namedSets",id:"namedsets",level:3},{value:"calculatedMembers",id:"calculatedmembers",level:3},{value:"%QueryKey",id:"querykey",level:3},{value:"%Statistics",id:"statistics",level:3},{value:"%returnList",id:"returnlist",level:3},{value:"%orderList",id:"orderlist",level:3},{value:"%listing",id:"listing",level:3},{value:"%listingSource",id:"listingsource",level:3},{value:"%NamedParameters",id:"namedparameters",level:3},{value:"%ParameterValues",id:"parametervalues",level:3},{value:"%hasRelations",id:"hasrelations",level:3},{value:"%hasRelationship",id:"hasrelationship",level:3},{value:"%hasSqlRestrict",id:"hassqlrestrict",level:3},{value:"%MaxListingRows",id:"maxlistingrows",level:3},{value:"compoundQueries",id:"compoundqueries",level:3},{value:"compoundDrillthroughs",id:"compounddrillthroughs",level:3},{value:"%originalAxisText",id:"originalaxistext",level:3},{value:"%originalWITHContents",id:"originalwithcontents",level:3},{value:"%variables",id:"variables",level:3},{value:"%LockKeys",id:"lockkeys",level:3},{value:"Methods",id:"methods",level:2},{value:"%QueryTrace",id:"querytrace",level:3},{value:"%PrintNode",id:"printnode",level:3},{value:"%Prepare",id:"prepare",level:3},{value:"%HasOrder",id:"hasorder",level:3},{value:"%HasSubsetFunction",id:"hassubsetfunction",level:3},{value:"%CompleteAxes",id:"completeaxes",level:3},{value:"%HasCurrentMember",id:"hascurrentmember",level:3},{value:"%HasCrossJoin",id:"hascrossjoin",level:3},{value:"%IsAggFunc",id:"isaggfunc",level:3},{value:"%RewriteForCurrentMember",id:"rewriteforcurrentmember",level:3},{value:"%RewriteForCrossJoin",id:"rewriteforcrossjoin",level:3},{value:"%RewriteForOrder",id:"rewritefororder",level:3},{value:"%GetMeasureFromSpec",id:"getmeasurefromspec",level:3},{value:"%PushDownCurrentMember",id:"pushdowncurrentmember",level:3},{value:"%ProcessSlicerRestrictions",id:"processslicerrestrictions",level:3},{value:"%FlattenSlicer",id:"flattenslicer",level:3},{value:"%CombineFiltersWithSlicer",id:"combinefilterswithslicer",level:3},{value:"%TestSubQueryCache",id:"testsubquerycache",level:3},{value:"%CheckSubqueryResultsCache",id:"checksubqueryresultscache",level:3},{value:"%CheckResultsCache",id:"checkresultscache",level:3},{value:"%InitializeResultsCache",id:"initializeresultscache",level:3},{value:"%PrepareResultsCache",id:"prepareresultscache",level:3},{value:"%GetParameterInfo",id:"getparameterinfo",level:3},{value:"%PreProcessQuery",id:"preprocessquery",level:3},{value:"%ExecuteAsynch",id:"executeasynch",level:3},{value:"%ExecuteParameters",id:"executeparameters",level:3},{value:"%ExecuteAxes",id:"executeaxes",level:3},{value:"%ReserveAxes",id:"reserveaxes",level:3},{value:"%ReleaseReservedAxes",id:"releasereservedaxes",level:3},{value:"%MakeReserveAxisKey",id:"makereserveaxiskey",level:3},{value:"%InitializeAxisCache",id:"initializeaxiscache",level:3},{value:"%ExecuteCells",id:"executecells",level:3},{value:"%ExecuteIntermediateCells",id:"executeintermediatecells",level:3},{value:"%ToString",id:"tostring",level:3},{value:"%WITHToString",id:"withtostring",level:3},{value:"%LookupNamedSet",id:"lookupnamedset",level:3},{value:"%LookupCalculatedMember",id:"lookupcalculatedmember",level:3},{value:"%GetCalculatedMembers",id:"getcalculatedmembers",level:3},{value:"%RegisterSubQuery",id:"registersubquery",level:3},{value:"%CreateSubQueryResultSet",id:"createsubqueryresultset",level:3},{value:"%GetSubQuery",id:"getsubquery",level:3},{value:"%ClearStatistics",id:"clearstatistics",level:3},{value:"%PrintStatistics",id:"printstatistics",level:3},{value:"%ResolveNamedParm",id:"resolvenamedparm",level:3},{value:"%ComputeAxisCRC",id:"computeaxiscrc",level:3},{value:"%FoldCompoundQueries",id:"foldcompoundqueries",level:3},{value:"%RewriteCompoundQuery",id:"rewritecompoundquery",level:3},{value:"%RewriteWITH",id:"rewritewith",level:3},{value:"%RewriteGroup",id:"rewritegroup",level:3},{value:"%GetLanguage",id:"getlanguage",level:3},{value:"%CompressTimeRange",id:"compresstimerange",level:3},{value:"%SplitDateRange",id:"splitdaterange",level:3},{value:"%GetLastDay",id:"getlastday",level:3},{value:"%GetLastDayHorolog",id:"getlastdayhorolog",level:3},{value:"%GetFirstDayHorolog",id:"getfirstdayhorolog",level:3},{value:"%SplitDate",id:"splitdate",level:3},{value:"%RewriteForTimeFolding",id:"rewritefortimefolding",level:3},{value:"%FindMemberInfo",id:"findmemberinfo",level:3},{value:"%IsMeasure",id:"ismeasure",level:3},{value:"%IsMember",id:"ismember",level:3},{value:"%HasMeasure",id:"hasmeasure",level:3},{value:"%HasRelations",id:"hasrelations-1",level:3},{value:"%AddLabel",id:"addlabel",level:3},{value:"%RemoveLabel",id:"removelabel",level:3},{value:"%RemoveLabelsInFilterExpression",id:"removelabelsinfilterexpression",level:3},{value:"%IsCrossjoinSwapExempt",id:"iscrossjoinswapexempt",level:3},{value:"%RewriteNodeAsSubquery",id:"rewritenodeassubquery",level:3},{value:"%SetVariables",id:"setvariables",level:3},{value:"%ResolveVariablesInText",id:"resolvevariablesintext",level:3},{value:"%NullifyAxis",id:"nullifyaxis",level:3},{value:"%CreateResultKey",id:"createresultkey",level:3},{value:"%CreateAxisKey",id:"createaxiskey",level:3},{value:"%ClearQueryResults",id:"clearqueryresults",level:3},{value:"%IsExecutable",id:"isexecutable",level:3}];function c(e){const s={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"deepseequeryquery",children:"%DeepSee.Query.query"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %DeepSee.Query.query Extends node [ System = 3 ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"This class holds run-time information for a DeepSee MDX statement and provides the machinery to prepare and execute it (via the %DeepSee.ResultSet interface."}),"\n",(0,t.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(s.h3,{id:"cube",children:"cube"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property cube As %DeepSee.Datatype.string(XMLPROJECTION = "attribute");\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Name of the cube this query is based on.",(0,t.jsx)(s.br,{}),"\nThis is the FROM clause of the query."]}),"\n",(0,t.jsx)(s.h3,{id:"querytype",children:"queryType"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property queryType As %DeepSee.Datatype.string(VALUELIST = ",SELECT,DRILLTHROUGH,CREATE,DROP,%BITSET", XMLPROJECTION = "attribute") [ InitialExpression = "SELECT" ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"This indicates what type of MDX statement this is."}),"\n",(0,t.jsx)(s.h3,{id:"target",children:"%target"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %target As %DeepSee.Datatype.string(VALUELIST = ",SET,MEMBER", XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"For CREATE or DROP statements this specifies the target of the command."}),"\n",(0,t.jsx)(s.h3,{id:"targetkey",children:"%targetKey"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %targetKey As %DeepSee.Datatype.string(XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"For DROP statements this specifies the key of the item to be dropped."}),"\n",(0,t.jsx)(s.h3,{id:"usecache",children:"useCache"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property useCache As %Boolean(XMLPROJECTION = "attribute") [ InitialExpression = 1 ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"If true, then use results caching for this query."}),"\n",(0,t.jsx)(s.h3,{id:"iscompound",children:"%isCompound"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %isCompound As %Boolean(XMLPROJECTION = "attribute") [ InitialExpression = 0 ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"If true, then this is a query on a compound cube."}),"\n",(0,t.jsx)(s.h3,{id:"iscompoundmember",children:"%isCompoundMember"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property %isCompoundMember As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"If true, this query is being run as a subquery in a compound cube."}),"\n",(0,t.jsx)(s.h3,{id:"parentcube",children:"parentCube"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property parentCube As %String;\n"})}),"\n",(0,t.jsx)(s.p,{children:"Contains the parent cube name if query is a member of a subquery."}),"\n",(0,t.jsx)(s.h3,{id:"mustcompute",children:"%mustCompute"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %mustCompute As %Boolean(XMLPROJECTION = "none") [ InitialExpression = 0, Internal ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"If true, then the query must be recomputed-- the cached results are not guaranteed to be up-to-date."}),"\n",(0,t.jsx)(s.h3,{id:"recomputeaxes",children:"%recomputeAxes"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %recomputeAxes As %Boolean(XMLPROJECTION = "none") [ InitialExpression = 0, Internal ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"If true, then the axes for the query must be recomputed."}),"\n",(0,t.jsx)(s.h3,{id:"removeempty",children:"%removeEmpty"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %removeEmpty As %Boolean(XMLPROJECTION = "none") [ Internal, MultiDimensional ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"Indicates, by axis, if empty value needs to be removed after processing. This is used by compound queries."}),"\n",(0,t.jsx)(s.h3,{id:"recompute",children:"recompute"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property recompute As %Boolean(XMLPROJECTION = "none") [ InitialExpression = 1 ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"If true recompute previously run queries whose data has been updated. otherwise return old values."}),"\n",(0,t.jsx)(s.h3,{id:"useagents",children:"useAgents"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property useAgents As %Boolean(XMLPROJECTION = "none") [ InitialExpression = 0 ];\n'})}),"\n",(0,t.jsxs)(s.p,{children:["If true, execute using background agents.",(0,t.jsx)(s.br,{}),"\nThis is set when using async mode."]}),"\n",(0,t.jsx)(s.h3,{id:"showplan",children:"showPlan"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property showPlan As %Boolean(XMLPROJECTION = "none") [ InitialExpression = 0 ];\n'})}),"\n",(0,t.jsx)(s.p,{children:'If true, execute this query in "plan" mode.'}),"\n",(0,t.jsx)(s.h3,{id:"axes",children:"axes"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Relationship axes As %DeepSee.Query.axis(XMLELEMENTREF = 1, XMLPROJECTION = "ELEMENT", XMLTYPECONSTRAINT = "CHOICE") [ Cardinality = many, Inverse = query ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"Axes defined for this query."}),"\n",(0,t.jsx)(s.h3,{id:"parentquerykey",children:"parentQueryKey"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property parentQueryKey As %String(XMLPROJECTION = "none");\n'})}),"\n",(0,t.jsx)(s.p,{children:"For subqueries, remember which parent query initiated it."}),"\n",(0,t.jsx)(s.h3,{id:"parentwithtext",children:"parentWITHText"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property parentWITHText As %String(XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"Canonic form of WITH clause. Used internally to create hash keys."}),"\n",(0,t.jsx)(s.h3,{id:"subqueries",children:"subqueries"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property subqueries As list Of %DeepSee.ResultSet(XMLPROJECTION = "NONE");\n'})}),"\n",(0,t.jsx)(s.p,{children:"Collection of all subqueries associated with this query."}),"\n",(0,t.jsx)(s.h3,{id:"slicer",children:"slicer"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property slicer As %DeepSee.Query.axis(XMLPROJECTION = "ELEMENT");\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Slicer defined for this query.",(0,t.jsx)(s.br,{}),"\nThis is the WHERE clause of the query.",(0,t.jsx)(s.br,{}),"\nFrom a definition perspective this is no different than any other axis."]}),"\n",(0,t.jsx)(s.h3,{id:"filters",children:"filters"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property filters As list Of %DeepSee.Query.axis(XMLPROJECTION = "ELEMENT");\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Filter(s) defined for this query.",(0,t.jsx)(s.br,{}),"\nThis is the ISC extension %FILTER clause of the query."]}),"\n",(0,t.jsx)(s.h3,{id:"filteraxis",children:"filterAxis"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property filterAxis As %DeepSee.Query.axis(XMLPROJECTION = "NONE");\n'})}),"\n",(0,t.jsx)(s.p,{children:"Used to hold cube/subjectArea level filter."}),"\n",(0,t.jsx)(s.h3,{id:"measureaxis",children:"measureAxis"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property measureAxis As %Integer [ InitialExpression = -1 ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Used as an indicator as to which axis supplies the measure information for this query. The slicer is denoted by a 0, other axes are logged as their 1-based number. A value of -1 for this property indicates the default measure will be used."}),"\n",(0,t.jsx)(s.h3,{id:"withtext",children:"%WITHText"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %WITHText As %String(XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"Canonic form of WITH clause. Used internally to create hash keys."}),"\n",(0,t.jsx)(s.h3,{id:"namedsets",children:"namedSets"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property namedSets As array Of %DeepSee.Query.namedSet(XMLKEYNAME = "setName", XMLPROJECTION = "ELEMENT");\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Collection of ",(0,t.jsx)(s.em,{children:"Named Sets"})," defined within the WITH clause of the query."]}),"\n",(0,t.jsx)(s.h3,{id:"calculatedmembers",children:"calculatedMembers"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property calculatedMembers As array Of %DeepSee.Query.calculatedMember(XMLKEYNAME = "memberName", XMLPROJECTION = "ELEMENT");\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Collection of ",(0,t.jsx)(s.em,{children:"Calculated Members"})," defined within the WITH clause of the query. These are indexed by Dimension.MemberName."]}),"\n",(0,t.jsx)(s.h3,{id:"querykey",children:"%QueryKey"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %QueryKey As %String(XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"Hash key used to address the results for this query. This allows a query to be prepared and later restored."}),"\n",(0,t.jsx)(s.h3,{id:"statistics",children:"%Statistics"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property %Statistics As %DeepSee.Datatype.string [ Internal, MultiDimensional ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Array of timing and performance statistics for this query."}),"\n",(0,t.jsx)(s.h3,{id:"returnlist",children:"%returnList"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %returnList As %String(MAXLEN = 2000, XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"List of fields in RETURN clause for DRILLTHROUGH statement."}),"\n",(0,t.jsx)(s.h3,{id:"orderlist",children:"%orderList"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %orderList As %String(MAXLEN = 2000, XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"List of fields in %ORDER BY clause for DRILLTHROUGH statement."}),"\n",(0,t.jsx)(s.h3,{id:"listing",children:"%listing"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %listing As %String(MAXLEN = 255, XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"Name of listing specified by %LISTING statement in query."}),"\n",(0,t.jsx)(s.h3,{id:"listingsource",children:"%listingSource"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %listingSource As %String(VALUELIST = "source,facts", XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"For a drillthrough, this indicates whether the listing query is against the source table or the fact table."}),"\n",(0,t.jsx)(s.h3,{id:"namedparameters",children:"%NamedParameters"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property %NamedParameters As %String [ Internal, MultiDimensional ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Array of named parameters with current values."}),"\n",(0,t.jsx)(s.h3,{id:"parametervalues",children:"%ParameterValues"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property %ParameterValues As %String [ Internal, MultiDimensional ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Array of named parameter values supplied when this query was executed."}),"\n",(0,t.jsx)(s.h3,{id:"hasrelations",children:"%hasRelations"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %hasRelations As %Boolean(XMLPROJECTION = "none") [ InitialExpression = 0, Internal ];\n'})}),"\n",(0,t.jsxs)(s.p,{children:["If true, this query contains references to related cubes.",(0,t.jsx)(s.br,{}),"\nThis is set during the axis prepare phase."]}),"\n",(0,t.jsx)(s.h3,{id:"hasrelationship",children:"%hasRelationship"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %hasRelationship As %Boolean(XMLPROJECTION = "none") [ InitialExpression = 0, Internal ];\n'})}),"\n",(0,t.jsxs)(s.p,{children:["If true, this query contains references to related cubes.",(0,t.jsx)(s.br,{}),"\nSet during the parse phase, might replace %hasRelations."]}),"\n",(0,t.jsx)(s.h3,{id:"hassqlrestrict",children:"%hasSqlRestrict"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property %hasSqlRestrict As %Boolean(XMLPROJECTION = "none") [ InitialExpression = 0, Internal ];\n'})}),"\n",(0,t.jsxs)(s.p,{children:["If true, this query contains an %SQLRESTRIICT statement.",(0,t.jsx)(s.br,{}),"\nSet during the parse phase."]}),"\n",(0,t.jsx)(s.h3,{id:"maxlistingrows",children:"%MaxListingRows"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property %MaxListingRows As %Integer [ InitialExpression = 1000, Internal ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Maximum number of rows returned by a DRILLTHROUGH query. This is set by the MAXROWS directive within a DRILLTHROUGH query."}),"\n",(0,t.jsx)(s.h3,{id:"compoundqueries",children:"compoundQueries"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property compoundQueries As list Of %String(XMLPROJECTION = "NONE");\n'})}),"\n",(0,t.jsx)(s.p,{children:"For queries on compound cubes, this is the set of keys for the subqueries that have to be executed and then joined."}),"\n",(0,t.jsx)(s.h3,{id:"compounddrillthroughs",children:"compoundDrillthroughs"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property compoundDrillthroughs As list Of %String(XMLPROJECTION = "NONE");\n'})}),"\n",(0,t.jsx)(s.p,{children:"For DRILLTHROUGH queries on compound cubes, this is the MDX DRILLTHROUGH statements for each leg of the compound query."}),"\n",(0,t.jsx)(s.h3,{id:"originalaxistext",children:"%originalAxisText"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property %originalAxisText As %String [ Internal, MultiDimensional ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Original text for each axis. Used as part of the axis key."}),"\n",(0,t.jsx)(s.h3,{id:"originalwithcontents",children:"%originalWITHContents"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property %originalWITHContents As %String;\n"})}),"\n",(0,t.jsx)(s.p,{children:"Original components of the WITH clause. Order is not necessarily preserved from the original query text."}),"\n",(0,t.jsx)(s.h3,{id:"variables",children:"%variables"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property %variables As %String [ MultiDimensional ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Current pivot variable settings for this query."}),"\n",(0,t.jsx)(s.h3,{id:"lockkeys",children:"%LockKeys"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property %LockKeys As %String [ MultiDimensional ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"This holds a copy of all lock keys protecting this execution."}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"querytrace",children:"%QueryTrace"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %QueryTrace(pMethod As %String, pCubeName As %String, pMessage As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"Log a step within the execution of this query. This is an internal diagnostic."}),"\n",(0,t.jsx)(s.h3,{id:"printnode",children:"%PrintNode"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %PrintNode(pLevel As %Integer = 0)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Diagnostic. Print value of this node to the console."}),"\n",(0,t.jsx)(s.h3,{id:"prepare",children:"%Prepare"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %Prepare() As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Prepare this query.",(0,t.jsx)(s.br,{}),"\nThis is the first step in executing a query."]}),"\n",(0,t.jsx)(s.h3,{id:"hasorder",children:"%HasOrder"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %HasOrder(pMember, Output pHasOrder, Output pGroup) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Check if pMember has an ORDER() function in it (or in one of its children)."}),"\n",(0,t.jsx)(s.h3,{id:"hassubsetfunction",children:"%HasSubsetFunction"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %HasSubsetFunction(ByRef pMember, Output pGroup, Output pHasSubsetFunction) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Check if a given group has a subset function (HEAD, TAIL, SUBSET) in it and, if so, return the first such subgroup with output pGroup."}),"\n",(0,t.jsx)(s.h3,{id:"completeaxes",children:"%CompleteAxes"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %CompleteAxes() As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Make sure this query has an executable set of axes. Axes 0 and 1 (COLUMNS, ROWS) are required, axis 2 is optional. If either Rows or Columns are missing, insert a placeholder %SEARCH term"}),"\n",(0,t.jsx)(s.h3,{id:"hascurrentmember",children:"%HasCurrentMember"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %HasCurrentMember(pGroup As %DeepSee.Query.group) As %Boolean [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Test if a group has a current member in it."}),"\n",(0,t.jsx)(s.h3,{id:"hascrossjoin",children:"%HasCrossJoin"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %HasCrossJoin(pGroup As %DeepSee.Query.group) As %Boolean [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Test if a group has a crossjoin in it (with an aggregate or expression as its first child)."}),"\n",(0,t.jsx)(s.h3,{id:"isaggfunc",children:"%IsAggFunc"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %IsAggFunc(pFunc As %String) As %Boolean\n"})}),"\n",(0,t.jsx)(s.p,{children:"Test if pFunc is an aggregate function"}),"\n",(0,t.jsx)(s.h3,{id:"rewriteforcurrentmember",children:"%RewriteForCurrentMember"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %RewriteForCurrentMember(pParentGroup As %DeepSee.Query.group, pGroup As %DeepSee.Query.group, Output pNewGroup As %DeepSee.Query.group, ByRef pCmbrIndex, ByRef pCmbrID, Output pCmbrList, pLevel As %Integer = 0, pTreatAsExpr As %Boolean = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:['Rewrite a group and clean up the current member functions within it. On return pCmbrIndex contains the list of cmbr substitutions: pCmbrIndex("$$CMBRn$$") = spec',(0,t.jsx)(s.br,{}),"\npCmbrID and pCmbrList are used to track state as this function recurses."]}),"\n",(0,t.jsx)(s.h3,{id:"rewriteforcrossjoin",children:"%RewriteForCrossJoin"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %RewriteForCrossJoin(pParentGroup As %DeepSee.Query.group, pGroup As %DeepSee.Query.group, Output pNewGroup As %DeepSee.Query.group, pLevel As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Rewrite a group and rewrite any CJOIN(agg(a),b) to CJOIN(b,agg(a))). Do the same for expression in the first child."}),"\n",(0,t.jsx)(s.h3,{id:"rewritefororder",children:"%RewriteForOrder"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %RewriteForOrder(pAxis As %DeepSee.Query.axis, pOppAxis As %DeepSee.Query.axis) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Rewrite a group if necessary to sort the members of pOppAxis."}),"\n",(0,t.jsx)(s.h3,{id:"getmeasurefromspec",children:"%GetMeasureFromSpec"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetMeasureFromSpec(pSpec As %String, Output pMeasure) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Utility. See if this spec is for a measure. If so return the measure name."}),"\n",(0,t.jsx)(s.h3,{id:"pushdowncurrentmember",children:"%PushDownCurrentMember"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %PushDownCurrentMember(Output pNewGroup As %DeepSee.Query.group, pCurrMember As %DeepSee.Query.group, pExpr As %DeepSee.Query.group, pLevel As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Push a current member down into an expression tree."}),"\n",(0,t.jsx)(s.h3,{id:"processslicerrestrictions",children:"%ProcessSlicerRestrictions"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ProcessSlicerRestrictions(Output pBranches, Output pNoData As %Boolean) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Build member restriction data from the materialized slicer axis. This is called by %GetMembers to prune the results based on the current slicer."}),"\n",(0,t.jsx)(s.h3,{id:"flattenslicer",children:"%FlattenSlicer"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %FlattenSlicer(pNode As %DeepSee.Query.group, pLevel As %Integer = 0, Output pMoveAll As %Boolean) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Walk down a given node within the slicer and flatten expressions and aggregate functions."}),"\n",(0,t.jsx)(s.h3,{id:"combinefilterswithslicer",children:"%CombineFiltersWithSlicer"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %CombineFiltersWithSlicer() As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Combine all filters into the slicer."}),"\n",(0,t.jsx)(s.h3,{id:"testsubquerycache",children:"%TestSubQueryCache"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %TestSubQueryCache(pCubeName As %String, pQueryKey As %String, pTimestamp As %String, Output pCurrent As %Boolean, pQueryCube As %String) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Given a cube, subquery key, and timestamp, determine if there is an up-to-date result cache for the query. Return true (1) if this is the case.",(0,t.jsx)(s.br,{}),"\nAs a side effect, remove any out-of-date portions of the result cache for this query."]}),"\n",(0,t.jsx)(s.h3,{id:"checksubqueryresultscache",children:"%CheckSubqueryResultsCache"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %CheckSubqueryResultsCache(pMainCube, pCubeName, pQueryKey, ByRef pUpToDate = 1) As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"checkresultscache",children:"%CheckResultsCache"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %CheckResultsCache(pCubeName, pQueryKey, ByRef pUpToDate = 1) As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"initializeresultscache",children:"%InitializeResultsCache"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %InitializeResultsCache() As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Prepare the results cache for this query so that it can contain the axis and cell values.",(0,t.jsx)(s.br,{}),"\nIf the query is already in the results cache, then this method may decide to re-use the previous results."]}),"\n",(0,t.jsx)(s.h3,{id:"prepareresultscache",children:"%PrepareResultsCache"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %PrepareResultsCache() As %Status [ Internal, Private ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Called after the axes are ready, this method does the final check to determine if the query results can be re-used and if not, fills in the starting values for the result cache."}),"\n",(0,t.jsx)(s.h3,{id:"getparameterinfo",children:"%GetParameterInfo"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %GetParameterInfo(Output pParms) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return the set of named parameters values defined by this query."}),"\n",(0,t.jsx)(s.h3,{id:"preprocessquery",children:"%PreProcessQuery"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %PreProcessQuery() As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Execute the pre-processing logic for this node."}),"\n",(0,t.jsx)(s.h3,{id:"executeasynch",children:"%ExecuteAsynch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method %ExecuteAsynch(pWait As %Boolean = 0, Output pTaskGroupId As %String, pAxesOnly As %Boolean = 0, pAxisQuery As %String = "", ByRef pParms) As %Status\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Execute this query using background agents.",(0,t.jsx)(s.br,{}),"\nIf pWait is true (1) then do not return until the background agents are finished.",(0,t.jsx)(s.br,{}),"\nIf pWait is false, then pTaskGroupId will return the task group id used to execute the query."]}),"\n",(0,t.jsx)(s.h3,{id:"executeparameters",children:"%ExecuteParameters"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ExecuteParameters(ByRef pParms) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Apply the set of named parameters values to this query and then make sure the result cache is ready to accept values."}),"\n",(0,t.jsx)(s.h3,{id:"executeaxes",children:"%ExecuteAxes"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ExecuteAxes() As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Execute this query and materialize the contents of the result axes.",(0,t.jsx)(s.br,{}),"\nThe results are written to the results cache."]}),"\n",(0,t.jsx)(s.h3,{id:"reserveaxes",children:"%ReserveAxes"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ReserveAxes(Output pAxesAvailable) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"releasereservedaxes",children:"%ReleaseReservedAxes"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ReleaseReservedAxes(pCubeName, pQueryKey) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Utility method to remove the zprocessing node for reserved axes"}),"\n",(0,t.jsx)(s.h3,{id:"makereserveaxiskey",children:"%MakeReserveAxisKey"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method %MakeReserveAxisKey(pType As %String, pAxis As axis, Output pReserveKey As %String, pOriginalSpec As %String = "") As %String [ Internal ]\n'})}),"\n",(0,t.jsx)(s.h3,{id:"initializeaxiscache",children:"%InitializeAxisCache"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method %InitializeAxisCache(pType As %String, pAxis As axis, Output pAxisKey As %String, Output pUpToDate As %Integer, pOriginalSpec As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Set up the axis cache for the given axis. Also test if the axis already exists and is up-to-date.",(0,t.jsx)(s.br,{}),"\nOn return, pUpToDate is 1 if the axis is up-to-date, 0 if it is not, and -1 if it is a reference axis that needs further checking."]}),"\n",(0,t.jsx)(s.h3,{id:"executecells",children:"%ExecuteCells"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ExecuteCells(pTrace As %Boolean = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Execute this query and calculate the contents of the resulting cells.",(0,t.jsx)(s.br,{}),"\nNote that this may be called on a partially constructed query object if a ResultSet was prepared using an existing query key."]}),"\n",(0,t.jsx)(s.h3,{id:"executeintermediatecells",children:"%ExecuteIntermediateCells"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ExecuteIntermediateCells(pCubeName As %String, pQueryKey As %String, pUseAgents As %Boolean = 1, pTrace As %Boolean = 0, ByRef pStats) As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["This does the actual work of splitting the cells into buckets and sections and executing them.",(0,t.jsx)(s.br,{}),"\nThis may be called from a background agent."]}),"\n",(0,t.jsx)(s.h3,{id:"tostring",children:"%ToString"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ToString(Output pSC As %Status) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Convert this node to its text representation."}),"\n",(0,t.jsx)(s.h3,{id:"withtostring",children:"%WITHToString"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %WITHToString() As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Convert the WITH clause for this query (named sets and calculated members) to a canonic text representation."}),"\n",(0,t.jsx)(s.h3,{id:"lookupnamedset",children:"%LookupNamedSet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %LookupNamedSet(pName As %String, ByRef pSet As %DeepSee.Query.set, Output pSC As %Status) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["See if the specified named set is defined.",(0,t.jsx)(s.br,{}),"\npName should not have [ ] characters around it."]}),"\n",(0,t.jsx)(s.h3,{id:"lookupcalculatedmember",children:"%LookupCalculatedMember"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %LookupCalculatedMember(ByRef pMemberSpec As %String, pCount As %Integer, ByRef pSet As %DeepSee.Query.set, Output pSC As %Status, Output pIsFunc As %Boolean, pUseKey As %Boolean = 0) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["See if the specified calculated member is defined.",(0,t.jsx)(s.br,{}),"\npMemberSpec is an array of the names making up the member spec. pCount is the number of names to look at in the list. None of the names in the list should have [ ] characters around them.",(0,t.jsx)(s.br,{}),"\nIf the last item in the list is the name of one of the few functions allowed on calculated dimensions, then pIsFunc is set."]}),"\n",(0,t.jsx)(s.h3,{id:"getcalculatedmembers",children:"%GetCalculatedMembers"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %GetCalculatedMembers(pDimName As %String, ByRef pList As %String) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Find the list of calculated members in the given dimension. Return a list of their names: pList(UNAME) = name"}),"\n",(0,t.jsx)(s.h3,{id:"registersubquery",children:"%RegisterSubQuery"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method %RegisterSubQuery(pMDX As %String, Output pKey As %Integer, pAxis As axis = "", pSkipWITH As %Boolean = 0) As %Status\n'})}),"\n",(0,t.jsx)(s.p,{children:"Add the given subquery to the list of subqueries and return its key (for subsequent lookup)."}),"\n",(0,t.jsx)(s.h3,{id:"createsubqueryresultset",children:"%CreateSubQueryResultSet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %CreateSubQueryResultSet(pMDX As %String, Output pRS As %DeepSee.ResultSet, pSkipWITH As %Boolean = 0) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Create and prepare a result set for a subquery within this query."}),"\n",(0,t.jsx)(s.h3,{id:"getsubquery",children:"%GetSubQuery"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %GetSubQuery(pKey As %Integer, Output pRS As %DeepSee.ResultSet) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Retrieve a ResultSet from the set of registered subqueries."}),"\n",(0,t.jsx)(s.h3,{id:"clearstatistics",children:"%ClearStatistics"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ClearStatistics()\n"})}),"\n",(0,t.jsx)(s.p,{children:"Clear out current statistics for this query."}),"\n",(0,t.jsx)(s.h3,{id:"printstatistics",children:"%PrintStatistics"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %PrintStatistics()\n"})}),"\n",(0,t.jsx)(s.p,{children:"Write out current statistics for this query."}),"\n",(0,t.jsx)(s.h3,{id:"resolvenamedparm",children:"%ResolveNamedParm"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ResolveNamedParm(pParmName As %String, Output pValue As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Evaluate the given named parameter and return its value."}),"\n",(0,t.jsx)(s.h3,{id:"computeaxiscrc",children:"%ComputeAxisCRC"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ComputeAxisCRC(pCube As %String, pAxisKey As %String, Output pCRC) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Compute a CRC on the given query axis.<br/ This is used to determine if a cached axis is still valid."}),"\n",(0,t.jsx)(s.h3,{id:"foldcompoundqueries",children:"%FoldCompoundQueries"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %FoldCompoundQueries() As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Combine the results of a set of subqueries against the components of a compound cube."}),"\n",(0,t.jsx)(s.h3,{id:"rewritecompoundquery",children:"%RewriteCompoundQuery"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %RewriteCompoundQuery(Output pMDX As %String, pPrimaryCube As %String, pSubCube As %String, Output pNonEmptyInfo) As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Rewrite this query for use by a leg of a compound query.",(0,t.jsx)(s.br,{}),"\npNonEmptyInfo indicates which axes are NON EMPTY; this is because the rewritten query does not have NON EMPTY-- it is applied at the end of the query."]}),"\n",(0,t.jsx)(s.h3,{id:"rewritewith",children:"%RewriteWITH"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %RewriteWITH(pWithText As %String, pPrimaryCube As %String, pSubCube As %String, Output pText As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"rewritegroup",children:"%RewriteGroup"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %RewriteGroup(Output pNewGroup As %DeepSee.Query.group, pIsSlicer As %Boolean, pPrimaryCube As %String, pSubCube As %String, pGroup As group, ByRef pCalcMbrNames As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Rewrite part of a query for use by a compound query."}),"\n",(0,t.jsx)(s.h3,{id:"getlanguage",children:"%GetLanguage"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetLanguage() As %String [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return the RFC 1766 code of the current language. Used to ensure that cached values preserve localization."}),"\n",(0,t.jsx)(s.h3,{id:"compresstimerange",children:"%CompressTimeRange"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %CompressTimeRange(pNode As %DeepSee.Query.range) As %DeepSee.Query.node [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"See if a time range can be compressed into smaller units."}),"\n",(0,t.jsx)(s.h3,{id:"splitdaterange",children:"%SplitDateRange"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %SplitDateRange(pStartDate As %Date, pEndDate As %Date, Output pRange, pCalendar As %String = "gregorian") As %Boolean [ Internal ]\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Given a start and end of a date range, return a set of ranges that cover the original range with as few members as possible. The higher level units are months and years. Return an array of ranges:",(0,t.jsx)(s.br,{}),'\npRange(n) = $LB("day|month|year",start,end)']}),"\n",(0,t.jsx)(s.h3,{id:"getlastday",children:"%GetLastDay"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetLastDay(pYear As %Integer, pMonth As %Integer, pCalendar As %String) As %Integer [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return the last day (number) of the given year and month."}),"\n",(0,t.jsx)(s.h3,{id:"getlastdayhorolog",children:"%GetLastDayHorolog"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetLastDayHorolog(pYear As %Integer, pMonth As %Integer, pCalendar As %String = "gregorian") As %Integer [ Internal ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"Return the last day (number) of the given year and month."}),"\n",(0,t.jsx)(s.h3,{id:"getfirstdayhorolog",children:"%GetFirstDayHorolog"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetFirstDayHorolog(pYear As %Integer, pMonth As %Integer, pCalendar As %String = "gregorian") As %Integer [ Internal ]\n'})}),"\n",(0,t.jsx)(s.h3,{id:"splitdate",children:"%SplitDate"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %SplitDate(pDate As %Date, pCalendar As %String = "gregorian", Output pYear, Output pMonth, Output pDay) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"Return the last day (number) of the given year and month."}),"\n",(0,t.jsx)(s.h3,{id:"rewritefortimefolding",children:"%RewriteForTimeFolding"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %RewriteForTimeFolding(pParentGroup As %DeepSee.Query.group, pGroup As %DeepSee.Query.group, Output pNewGroup As %DeepSee.Query.group, pLevel As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Rewrite a group and rewrite any SUM(timeRange) as SUM(foldedTimeRange). Also applies to %OR()."}),"\n",(0,t.jsx)(s.h3,{id:"findmemberinfo",children:"%FindMemberInfo"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %FindMemberInfo(pNode As %DeepSee.Query.node, Output pMember As %DeepSee.Query.member) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Utility method. Try to find the dimension info assoiciated with the provided query object."}),"\n",(0,t.jsx)(s.h3,{id:"ismeasure",children:"%IsMeasure"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %IsMeasure(pNode As %DeepSee.Query.node, Output pStatus) As %String [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:'Utility Method. Determine whether the current node can be considered a measure. Returns: "cell" - This node is a spreadsheet function and is exempt 1 - This node functions as a measure 0 - This node does not function as a measure'}),"\n",(0,t.jsx)(s.h3,{id:"ismember",children:"%IsMember"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %IsMember(pNode As %DeepSee.Query.node, Output pStatus) As %Boolean [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Utility Method. Determine whether the current node can be considered a member"}),"\n",(0,t.jsx)(s.h3,{id:"hasmeasure",children:"%HasMeasure"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %HasMeasure(pNode As %DeepSee.Query.node, ByRef pStatus As %Status) As %Boolean [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Test for an existence of a measure in pNode."}),"\n",(0,t.jsx)(s.h3,{id:"hasrelations-1",children:"%HasRelations"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %HasRelations(pCube, pNode As %DeepSee.Query.node, ByRef pStatus As %Status) As %Boolean\n"})}),"\n",(0,t.jsx)(s.p,{children:"Utility method to test for related cube terms in a %DeepSee.Query.node object"}),"\n",(0,t.jsx)(s.h3,{id:"addlabel",children:"%AddLabel"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %AddLabel(pReferenceGroup As %DeepSee.Query.group, pLabel As %DeepSee.Query.group = "", Output pLabeledGroup As %DeepSee.Query.group) As %Status\n'})}),"\n",(0,t.jsx)(s.p,{children:"Add a %LABEL to pReferenceGroup. The label is supplied to the method as an abstracted %LABEL object pLabel. The input group is placed in the first argument of a %LABEL which contains all the same parameters that are defined in pLabel. The newly labeled group is returned in pLabeledGroup."}),"\n",(0,t.jsx)(s.h3,{id:"removelabel",children:"%RemoveLabel"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %RemoveLabel(pReferenceGroup As %DeepSee.Query.group, Output pLabelGroup As %DeepSee.Query.group, Output pInnerGroup As %DeepSee.Query.group) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Remove the %LABEL and expose the group is is acting upon. The abstracted contents of the %LABEL are returned as the pLabelGroup."}),"\n",(0,t.jsx)(s.h3,{id:"removelabelsinfilterexpression",children:"%RemoveLabelsInFilterExpression"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %RemoveLabelsInFilterExpression(pReferenceGroup As %DeepSee.Query.group, Output pOutputGroup As %DeepSee.Query.group, pCubeName As %String = "") As %Status\n'})}),"\n",(0,t.jsx)(s.h3,{id:"iscrossjoinswapexempt",children:"%IsCrossjoinSwapExempt"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %IsCrossjoinSwapExempt(pNode1, pNode2) As %Boolean [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Test to determine if the two provided crossjoin terms are swap-exempt"}),"\n",(0,t.jsx)(s.h3,{id:"rewritenodeassubquery",children:"%RewriteNodeAsSubquery"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %RewriteNodeAsSubquery(pNode) As %DeepSee.Query.node\n"})}),"\n",(0,t.jsx)(s.p,{children:"Write the node as the columns clause in an %MDX subquery."}),"\n",(0,t.jsx)(s.h3,{id:"setvariables",children:"%SetVariables"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %SetVariables(ByRef pVariables) As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"resolvevariablesintext",children:"%ResolveVariablesInText"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ResolveVariablesInText(pMDX As %String, ByRef pVariables) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:'Resolve any instances of "$variable.Name" in the text pMDX using values in the lookup array pVariables.'}),"\n",(0,t.jsx)(s.h3,{id:"nullifyaxis",children:"%NullifyAxis"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %NullifyAxis(pAxisKey) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Set the axis to a literal null"}),"\n",(0,t.jsx)(s.h3,{id:"createresultkey",children:"%CreateResultKey"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method %CreateResultKey(Output pStatus As %Status = {$$$OK}, Output pFinalText = "", pRefreshKey As %Boolean = 0, pMDXRequest As %String = "") As %String\n'})}),"\n",(0,t.jsx)(s.p,{children:"Generate the result key for the current query object."}),"\n",(0,t.jsx)(s.h3,{id:"createaxiskey",children:"%CreateAxisKey"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method %CreateAxisKey(Output pStatus As %Status = {$$$OK}, pType = "", pAxis As %DeepSee.Query.axis = {$$$NULLOREF}, pOriginalSpec = "", Output pFinalText = "", pRefreshKey As %Boolean = 0) As %String\n'})}),"\n",(0,t.jsx)(s.p,{children:"Generate an axis key for a %DeepSee.Query.axis object."}),"\n",(0,t.jsx)(s.h3,{id:"clearqueryresults",children:"%ClearQueryResults"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %ClearQueryResults(pCubeName As %String = "", pQueryKey As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,t.jsxs)(s.p,{children:["This method provides a means for safely killing previously cached results without destroying the",(0,t.jsx)(s.br,{}),'\n^DeepSee.Cache.Results(CUBEKEY,QueryKey,"query")',(0,t.jsx)(s.br,{}),"\nnode. Primarily this allows %PrepareKey to function if an execution determines the remainder of the cache is stale and cannot be reused."]}),"\n",(0,t.jsx)(s.h3,{id:"isexecutable",children:"%IsExecutable"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method %IsExecutable(Output pStatus = {$$$OK}, Output pReason As %String = "") As %Boolean\n'})}),"\n",(0,t.jsx)(s.p,{children:"Test the current query object for enabled dimensions, measures, and relationships as aplicable. If all items have completed a build process and contain queryable data, the query is executable."})]})}function o(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>l});var t=r(96540);const n={},a=t.createContext(n);function i(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);