"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[67533],{2415:(e,l,a)=>{a.r(l),a.d(l,{contentTitle:()=>t,default:()=>o,frontMatter:()=>r,toc:()=>c});var s=a(74848),n=a(28453);const r={pagination_prev:null,pagination_next:null},t="%SYS.Journal.SetKillRecord",c=[{value:"Parameters",id:"parameters",level:2},{value:"READONLY",id:"readonly",level:3},{value:"Properties",id:"properties",level:2},{value:"ClusterSequence",id:"clustersequence",level:3},{value:"DatabaseName",id:"databasename",level:3},{value:"MirrorDatabaseName",id:"mirrordatabasename",level:3},{value:"GlobalReference",id:"globalreference",level:3},{value:"GlobalNode",id:"globalnode",level:3},{value:"NumberOfValues",id:"numberofvalues",level:3},{value:"NewValue",id:"newvalue",level:3},{value:"OldValue",id:"oldvalue",level:3},{value:"Collation",id:"collation",level:3},{value:"Methods",id:"methods",level:2},{value:"%LoadData",id:"loaddata",level:3},{value:"ClusterSequenceGet",id:"clustersequenceget",level:3},{value:"DatabaseNameGet",id:"databasenameget",level:3},{value:"MirrorDatabaseNameGet",id:"mirrordatabasenameget",level:3},{value:"GlobalReferenceGet",id:"globalreferenceget",level:3},{value:"GlobalNodeGet",id:"globalnodeget",level:3},{value:"NumberOfValuesGet",id:"numberofvaluesget",level:3},{value:"ExistsNewValue",id:"existsnewvalue",level:3},{value:"ExistsOldValue",id:"existsoldvalue",level:3},{value:"NewValueGet",id:"newvalueget",level:3},{value:"OldValueGet",id:"oldvalueget",level:3},{value:"CollationGet",id:"collationget",level:3},{value:"Restore",id:"restore",level:3},{value:"Fetch",id:"fetch",level:3}];function d(e){const l={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(l.header,{children:(0,s.jsx)(l.h1,{id:"sysjournalsetkillrecord",children:"%SYS.Journal.SetKillRecord"})}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Class %SYS.Journal.SetKillRecord Extends %SYS.Journal.Record [ System = 4 ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Journal SET/KILL record related API"}),"\n",(0,s.jsx)(l.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(l.h3,{id:"readonly",children:"READONLY"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Parameter READONLY = 1;\n"})}),"\n",(0,s.jsx)(l.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(l.h3,{id:"clustersequence",children:"ClusterSequence"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property ClusterSequence As %Integer [ Calculated ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"Cluster journal sequence number of the record on a clustered system or 0 otherwise"}),"\n",(0,s.jsx)(l.h3,{id:"databasename",children:"DatabaseName"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property DatabaseName As %SysPath [ Calculated ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"Directory path of the database updated by the SET or KILL"}),"\n",(0,s.jsx)(l.h3,{id:"mirrordatabasename",children:"MirrorDatabaseName"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property MirrorDatabaseName As %String [ Calculated ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"Mirror database name of the database updated by the SET or KILL if it is a mirrored database"}),"\n",(0,s.jsx)(l.h3,{id:"globalreference",children:"GlobalReference"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property GlobalReference As %VarString [ Calculated ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"Extended global reference of the SET or KILL"}),"\n",(0,s.jsx)(l.h3,{id:"globalnode",children:"GlobalNode"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property GlobalNode As %VarString [ Calculated ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"Global node of the SET or KILL (GlobalReference minus the namespace)"}),"\n",(0,s.jsx)(l.h3,{id:"numberofvalues",children:"NumberOfValues"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property NumberOfValues As %Integer [ Calculated ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"Number of data values stored in the record. It can be 0, 1 or 2 depending on whether the record is a SET or KILL and whether it is in a transaction."}),"\n",(0,s.jsx)(l.h3,{id:"newvalue",children:"NewValue"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property NewValue As %VarString [ Calculated ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"(For SET record only) The value the global node was set to"}),"\n",(0,s.jsx)(l.h3,{id:"oldvalue",children:"OldValue"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property OldValue As %VarString [ Calculated ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"(For InTransaction record only) The value of the global node prior to the SET or KILL"}),"\n",(0,s.jsx)(l.h3,{id:"collation",children:"Collation"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Property Collation As %Integer [ Calculated ];\n"})}),"\n",(0,s.jsx)(l.p,{children:"The collation of the subscripts in GlobalNode"}),"\n",(0,s.jsx)(l.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(l.h3,{id:"loaddata",children:"%LoadData"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method %LoadData(Offset As %String, flag As %Boolean) As %Status [ Private ]\n"})}),"\n",(0,s.jsx)(l.h3,{id:"clustersequenceget",children:"ClusterSequenceGet"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method ClusterSequenceGet() As %Integer\n"})}),"\n",(0,s.jsx)(l.h3,{id:"databasenameget",children:"DatabaseNameGet"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method DatabaseNameGet() As %String\n"})}),"\n",(0,s.jsx)(l.h3,{id:"mirrordatabasenameget",children:"MirrorDatabaseNameGet"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method MirrorDatabaseNameGet() As %String [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(l.h3,{id:"globalreferenceget",children:"GlobalReferenceGet"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method GlobalReferenceGet() As %String\n"})}),"\n",(0,s.jsx)(l.h3,{id:"globalnodeget",children:"GlobalNodeGet"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method GlobalNodeGet() As %String\n"})}),"\n",(0,s.jsx)(l.h3,{id:"numberofvaluesget",children:"NumberOfValuesGet"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method NumberOfValuesGet() As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(l.h3,{id:"existsnewvalue",children:"ExistsNewValue"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method ExistsNewValue() As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(l.p,{children:'TRUE if there is a NewValue (including "") in the record'}),"\n",(0,s.jsx)(l.h3,{id:"existsoldvalue",children:"ExistsOldValue"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method ExistsOldValue() As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(l.p,{children:'TRUE if there is an OldValue (including "") in the record'}),"\n",(0,s.jsx)(l.h3,{id:"newvalueget",children:"NewValueGet"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method NewValueGet() As %String [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(l.h3,{id:"oldvalueget",children:"OldValueGet"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method OldValueGet() As %String [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(l.h3,{id:"collationget",children:"CollationGet"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method CollationGet() As %Integer\n"})}),"\n",(0,s.jsx)(l.h3,{id:"restore",children:"Restore"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Method Restore(Detail As %Integer) As %Status\n"})}),"\n",(0,s.jsx)(l.p,{children:"Restore a SET or KILL"}),"\n",(0,s.jsx)(l.h3,{id:"fetch",children:"Fetch"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:'Method Fetch(ByRef Row As %List, ByRef Columns As %String, Match As %List = "") As %Boolean [ Internal, PublicList = (col, match, Row, Columns) ]\n'})})]})}function o(e={}){const{wrapper:l}={...(0,n.R)(),...e.components};return l?(0,s.jsx)(l,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,l,a)=>{a.d(l,{R:()=>t,x:()=>c});var s=a(96540);const n={},r=s.createContext(n);function t(e){const l=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function c(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),s.createElement(r.Provider,{value:l},e.children)}}}]);