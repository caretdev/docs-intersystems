"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[86791],{71012:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>l,frontMatter:()=>s,toc:()=>r});var a=t(74848),i=t(28453);const s={pagination_prev:null,pagination_next:null},o="%iKnow.Utils.UpgradeUtils",r=[{value:"Methods",id:"methods",level:2},{value:"UpgradeDomain",id:"upgradedomain",level:3},{value:"%OnSystemStartup",id:"onsystemstartup",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"iknowutilsupgradeutils",children:"%iKnow.Utils.UpgradeUtils"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-objectscript-class",children:"Class %iKnow.Utils.UpgradeUtils Extends %RegisteredObject [ Deprecated, System = 4 ]\n"})}),"\n",(0,a.jsx)(n.p,{children:"This class allows users to upgrade a domain created in an older version of InterSystems IRIS to the latest version, enabling all new features available in this current version."}),"\n",(0,a.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(n.h3,{id:"upgradedomain",children:"UpgradeDomain"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod UpgradeDomain(pDomainId As %Integer, pDropOldDomain As %Boolean = 0, pLockOldDomain As %Boolean = 1, pPickupNewSources As %Boolean = 0, pUseConfiguration As %String = "", pRename As %String(VALUELIST="OLD,NEW") = "OLD", Output pUpgradedDomainId As %Integer = 0) As %Status\n'})}),"\n",(0,a.jsx)(n.p,{children:"This method will upgrade a domain from a previous iKnow data structure version to the latest version and take advantage of the new features available in this newer version."}),"\n",(0,a.jsxs)(n.p,{children:["This operation involves ",(0,a.jsx)(n.strong,{children:"re-indexing"})," all sources currently in the domain into a new one and therefore requires appropriate storage capacity for the duration of the upgrade process. The data will be read as it is stored in the current domain, which means the original files, tables or other sources of information do not have to be accessible, but also the upgraded domain will automatically incorporate any changes made by using User Dictionaries as part of their initial load. See also %iKnow.Utils.CopyUtils."]}),"\n",(0,a.jsx)(n.p,{children:"Please note the upgraded domain will have a new domain ID, but still has the same name as the old domain, which is dropped automatically based on the value of pDropOldDomain. Also, while any external identifiers in the new domain will be exactly the same as in the old domain, some internal IDs might differ."}),"\n",(0,a.jsxs)(n.p,{children:["If pLockOldDomain is 1, no sources can be added to the domain while the upgrade process is running. Otherwise, if pPickupNewSources is set to 1, any ",(0,a.jsx)(n.em,{children:"new sources"})," added to the old domain while the upgrade process was running will be copied to the new domain as well. This does not include any source deletions or updates made to metadata of existing sources."]}),"\n",(0,a.jsx)(n.p,{children:"While a domain upgrade process is running, no other domain elements such as dictionaries and black lists can be added, removed or updated."}),"\n",(0,a.jsx)(n.p,{children:"If required, a specific iKnow Configuration name (cf %iKnow.Configuration) can be supplied through pUseConfiguration to use while re-indexing the data. If this parameter is left blank (default), the default configuration of the original domain (configured using the $$$IKPDEFAULTCONFIG domain parameter) or $$$DEFAULTCONFIG will be used."}),"\n",(0,a.jsx)(n.p,{children:'The pRename argument identifies whether the old domain should be renamed to "[domain name] - archived" (if pRename="OLD") with the newly created (upgraded) one getting the existing domain name, or vice versa, with the old domain retaining its name and the new one being renamed to "[domain name] - upgraded" (if pRename="NEW"). In either case, an integer might be added to the new name to prevent duplicate domain names if another domain would already carry that name.'}),"\n",(0,a.jsx)(n.p,{children:"Please read the output produced by this utility method carefully."}),"\n",(0,a.jsx)(n.h3,{id:"onsystemstartup",children:"%OnSystemStartup"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod %OnSystemStartup(pFirstSinceInstall As %Boolean = 0, pIsPrimary As %Boolean = 1) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Internal method called by STU.mac when the system starts. This method performs post-install operations when all databases are mounted."})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var a=t(96540);const i={},s=a.createContext(i);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);