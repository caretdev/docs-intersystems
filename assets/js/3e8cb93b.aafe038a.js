"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[88604],{69322:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>c,frontMatter:()=>r,toc:()=>a});var s=n(74848),i=n(28453);const r={pagination_prev:null,pagination_next:null},l="%iKnow.Queries.CcAPI",a=[{value:"Parameters",id:"parameters",level:2},{value:"GetByEntitiesRT",id:"getbyentitiesrt",level:3},{value:"GetByEntityIdsRT",id:"getbyentityidsrt",level:3},{value:"Methods",id:"methods",level:2},{value:"GetValue",id:"getvalue",level:3},{value:"GetValueInternal",id:"getvalueinternal",level:3},{value:"GetId",id:"getid",level:3},{value:"GetIdInternal",id:"getidinternal",level:3},{value:"GetInverse",id:"getinverse",level:3},{value:"GetFrequency",id:"getfrequency",level:3},{value:"GetSpread",id:"getspread",level:3},{value:"GetByEntities",id:"getbyentities",level:3},{value:"GetByEntityIds",id:"getbyentityids",level:3},{value:"GetByEntitiesInternal",id:"getbyentitiesinternal",level:3},{value:"GetByEntitiesInternal20121",id:"getbyentitiesinternal20121",level:3},{value:"GetCountByEntities",id:"getcountbyentities",level:3},{value:"GetCountByEntityIds",id:"getcountbyentityids",level:3},{value:"GetCountByEntitiesInternal",id:"getcountbyentitiesinternal",level:3},{value:"GetCountByEntitiesInternal20121",id:"getcountbyentitiesinternal20121",level:3},{value:"GetCountBySource",id:"getcountbysource",level:3}];function o(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"iknowqueriesccapi",children:"%iKnow.Queries.CcAPI"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %iKnow.Queries.CcAPI Extends %iKnow.Queries.AbstractAPI [ Deprecated, System = 4 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The InterSystems IRIS NLP iKnow technology is now deprecated. Please see the ",(0,s.jsx)(t.a,{href:"https://docs.intersystems.com/irislatest/csp/docbook/DocBook.UI.Page.cls?KEY=GIKNOW",children:"product documentation"})," for more detail."]}),"\n",(0,s.jsx)(t.p,{children:"This is the main Query API to get access to Concept-Concept pairs (CCs). CCs are an abstraction of CRCs, aggregating them across relationships to focus only on those concepts that are in a direct relationship with one another, without caring about the actual relationship linking the two."}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(t.h3,{id:"getbyentitiesrt",children:"GetByEntitiesRT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetByEntitiesRT = "HeadEntUniId:%Integer,HeadEntity:%String,TailEntUniId:%Integer,TailEntity:%String,frequency:%Integer,spread:%Integer,ccUniId:%Integer";\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getbyentityidsrt",children:"GetByEntityIdsRT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetByEntityIdsRT [ Internal ] = "HeadEntUniId:%Integer,HeadEntity:%String,TailEntUniId:%Integer,TailEntity:%String,frequency:%Integer,spread:%Integer,ccUniId:%Integer";\n'})}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"getvalue",children:"GetValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetValue(pDomainId As %Integer, pCcId As %Integer, vSrcId As %Integer = 0, Output pSC As %Status = {$$$OK}) As %List\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the entity values this CC is composed of."}),"\n",(0,s.jsx)(t.p,{children:"When specifying a Virtual Source ID, it will treat the ccid as a virtual one, in the context of that vSrcId."}),"\n",(0,s.jsx)(t.h3,{id:"getvalueinternal",children:"GetValueInternal"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetValueInternal(pDomainId As %Integer, pCcId As %Integer, vSrcId As %Integer = 0, Output pSC As %Status = {$$$OK}) As %List [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Internal version of GetValue, skipping security checks."}),"\n",(0,s.jsx)(t.h3,{id:"getid",children:"GetId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetId(pDomainId As %Integer, pHead As %String, pTail As %String, vSrcId As %Integer = 0, Output pSC As %Status = {$$$OK}) As %Integer\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns, if any, the CC ID for the combination of head and tail specified."}),"\n",(0,s.jsx)(t.p,{children:"When specifying a Virtual Source ID, it will treat the heads and tails as virtual entities, in the context of that vSrcId."}),"\n",(0,s.jsx)(t.h3,{id:"getidinternal",children:"GetIdInternal"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetIdInternal(pDomainId As %Integer, ByRef pHead As %String, ByRef pTail As %String, vSrcId As %Integer = 0, Output pSC As %Status = {$$$OK}, pStripPunctuation As %Boolean = 1) As %Integer [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Internal version of GetId"}),"\n",(0,s.jsx)(t.h3,{id:"getinverse",children:"GetInverse"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetInverse(domainId As %Integer, ccUniId As %Integer, Output sc As %Status = {$$$OK}) As %Integer\n"})}),"\n",(0,s.jsx)(t.p,{children:'Returns the "inverse" of a CC pair, which means the CC composed of the same head and tail entity, but at inverted positions.'}),"\n",(0,s.jsx)(t.h3,{id:"getfrequency",children:"GetFrequency"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetFrequency(domainId As %Integer, ccUniId As %Integer, vSrcId As %Integer = 0, filter As %iKnow.Filters.Filter = "", Output sc As %Status = {$$$OK}) As %Integer\n'})}),"\n",(0,s.jsx)(t.p,{children:"Returns the frequency of the CC corresponding to the supplied crcUniId."}),"\n",(0,s.jsx)(t.p,{children:"When specifying a Virtual Source ID, the frequency within the virtual source will be returned."}),"\n",(0,s.jsx)(t.h3,{id:"getspread",children:"GetSpread"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetSpread(domainId As %Integer, ccUniId As %Integer, filter As %iKnow.Filters.Filter = "", Output sc As %Status = {$$$OK}) As %Integer\n'})}),"\n",(0,s.jsx)(t.p,{children:"Returns the spread of the CC corresponding to the supplied ccUniId."}),"\n",(0,s.jsx)(t.h3,{id:"getbyentities",children:"GetByEntities"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetByEntities(ByRef result, domainid As %Integer, entitylist As %List, page As %Integer = 1, pagesize As %Integer = 10, filter As %iKnow.Filters.Filter = "", filtermode As %Integer = {$$$FILTERONLY}, positionstomatch As %Integer = {$$$USEPOSHT}, sorttype As %Integer = {$$$SORTBYDOMAINDEFAULT}, pActualFormOnly As %Boolean = 0) As %Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This method will return all CC pairs in which any (if ",(0,s.jsx)(t.em,{children:"setop"})," = $$$UNION) or all (if ",(0,s.jsx)(t.em,{children:"setop"})," = $$$INTERSECT) of the entities supplied in the ",(0,s.jsx)(t.em,{children:"entitylist"})," participate, within the boundaries of the supplied domain."]}),"\n",(0,s.jsxs)(t.p,{children:["The scope of this query can be limited through supplying a %iKnow.Filters.Filter object for the ",(0,s.jsx)(t.em,{children:"filter"})," parameter to restrict the result to those CCs occurring in any source satisfying the filter criteria. When using a filter, the ",(0,s.jsx)(t.em,{children:"filtermode"})," parameter will control whether or not the frequency and spread of returned records should be recalculated and whether results should be resorted along these recalculated numbers."]}),"\n",(0,s.jsxs)(t.p,{children:["Specifying a value for ",(0,s.jsx)(t.em,{children:"positionstomatch"})," will limit the result to those CCs in which the supplied entities are on the Head (with ",(0,s.jsx)(t.em,{children:"positionstomatch"})," = $$$USEPOSH) or Tail (with ",(0,s.jsx)(t.em,{children:"positionstomatch"})," = $$$USEPOST) side rather than either of the two (with ",(0,s.jsx)(t.em,{children:"positionstomatch"})," = $$$USEPOSHT, default setting)."]}),"\n",(0,s.jsx)(t.p,{children:"If stemming is enabled for this domain through $$$IKPSTEMMING, CCs containing any actual form of the entities in entityList will be returned. Use pActualFormOnly=1 to retrieve only those CCs containing the actual forms in entitylist. This argument is ignored if stemming is not enabled."}),"\n",(0,s.jsx)(t.h3,{id:"getbyentityids",children:"GetByEntityIds"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetByEntityIds(ByRef result, domainid As %Integer, entityidlist As %List, page As %Integer = 1, pagesize As %Integer = 10, filter As %iKnow.Filters.Filter = "", filtermode As %Integer = {$$$FILTERONLY}, positionstomatch As %Integer = {$$$USEPOSHT}, sorttype As %Integer = {$$$SORTBYDOMAINDEFAULT}, pActualFormOnly As %Boolean = 0) As %Status\n'})}),"\n",(0,s.jsx)(t.p,{children:"This method looks up CCs based on a list of Entity IDs."}),"\n",(0,s.jsx)(t.p,{children:"See also GetByEntities for a description of the parameters."}),"\n",(0,s.jsx)(t.h3,{id:"getbyentitiesinternal",children:"GetByEntitiesInternal"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetByEntitiesInternal(ByRef result, domainid As %Integer, ByRef entIdList, page As %Integer, pagesize As %Integer, filter As %iKnow.Filters.Filter, filtermode As %Integer, positionstomatch As %Integer, sorttype As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getbyentitiesinternal20121",children:"GetByEntitiesInternal20121"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetByEntitiesInternal20121(ByRef result, domainid As %Integer, ByRef entIdList, page As %Integer, pagesize As %Integer, filter As %iKnow.Filters.Filter, filtermode As %Integer, positionstomatch As %Integer, sorttype As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getcountbyentities",children:"GetCountByEntities"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetCountByEntities(domainid As %Integer, entitylist As %List, filter As %iKnow.Filters.Filter = "", positionstomatch As %Integer = {$$$USEPOSHT}, Output sc As %Status = {$$$OK}, pActualFormOnly As %Boolean = 0) As %Integer\n'})}),"\n",(0,s.jsx)(t.p,{children:"This method returns the number of CC pairs based on a list of entities."}),"\n",(0,s.jsx)(t.p,{children:"See also GetByEntities for a description of the parameters."}),"\n",(0,s.jsx)(t.h3,{id:"getcountbyentityids",children:"GetCountByEntityIds"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetCountByEntityIds(domainid As %Integer, entityidlist As %List, filter As %iKnow.Filters.Filter = "", positionstomatch As %Integer = {$$$USEPOSHT}, Output sc As %Status = {$$$OK}, pActualFormOnly As %Boolean = 0) As %Integer\n'})}),"\n",(0,s.jsx)(t.p,{children:"This method returns the number of CC pairs based on a list of entity ids."}),"\n",(0,s.jsx)(t.p,{children:"See also GetByEntities for a description of the parameters."}),"\n",(0,s.jsx)(t.h3,{id:"getcountbyentitiesinternal",children:"GetCountByEntitiesInternal"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetCountByEntitiesInternal(domainid As %Integer, ByRef entityIdList, filter As %iKnow.Filters.Filter, positionstomatch As %Integer, Output sc As %Status = {$$$OK}) As %Integer [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getcountbyentitiesinternal20121",children:"GetCountByEntitiesInternal20121"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetCountByEntitiesInternal20121(domainid As %Integer, ByRef entityIdList, filter As %iKnow.Filters.Filter, positionstomatch As %Integer, Output sc As %Status = {$$$OK}) As %Integer [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getcountbysource",children:"GetCountBySource"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetCountBySource(domainid As %Integer, sourceidlist As %List, setop As %Integer = {$$$UNION}, Output sc As %Status = {$$$OK}) As %Integer\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the total number of unique CCs appearing in either (if setop = $$$UNION) or all (if setop = $$$INTERSECT) of the sources specified by ID in sourceidlist."}),"\n",(0,s.jsx)(t.p,{children:"To get the unique CCs of a virtual source, only a single virtual source can be supplied using its negative ID value (otherwise, -1 is returned)."})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var s=n(96540);const i={},r=s.createContext(i);function l(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);