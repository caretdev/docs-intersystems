"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[97122],{30487:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>a,default:()=>o,frontMatter:()=>i,toc:()=>l});var n=t(74848),r=t(28453);const i={pagination_prev:null,pagination_next:null},a="Config.Devices",l=[{value:"Properties",id:"properties",level:2},{value:"Alias",id:"alias",level:3},{value:"AlternateDevice",id:"alternatedevice",level:3},{value:"Description",id:"description",level:3},{value:"OpenParameters",id:"openparameters",level:3},{value:"PhysicalDevice",id:"physicaldevice",level:3},{value:"Prompt",id:"prompt",level:3},{value:"SubType",id:"subtype",level:3},{value:"Type",id:"type",level:3},{value:"Methods",id:"methods",level:2},{value:"CreateCallBack",id:"createcallback",level:3},{value:"Default",id:"default",level:3},{value:"Load",id:"load",level:3},{value:"%OnValidateObject",id:"onvalidateobject",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"ListFetch",id:"listfetch",level:3},{value:"ListClose",id:"listclose",level:3}];function c(e){const s={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"configdevices",children:"Config.Devices"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class Config.Devices Extends (%Persistent, Config.CommonMultipleMethods, Config.CommonProperties, %SYSTEM.Help) [ Final, Inheritance = right, System = 4 ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This class allows you to modify and view the [Devices] section of the CPF file through programatic APIs. While properties are usually modified through the System Management portal, there may be some occasion where modifying them through the API's is best for your system. In all the Config methods, if you do not specify the CPFFile parameter, the currently active CPF file is used. If you wish to modify a CPF file which is not the currently active one, then specify the CPFFile you wish to modify in the method call.",(0,n.jsx)(s.br,{}),"\nThe Flags parameter does not normally need to be specified; the defaults are usually sufficient for most cases.",(0,n.jsx)(s.br,{}),"\nYou can use either the provided API's (Create/Get/Modify/Delete) to modify the properties by passing in the correct parameters, or use Object syntax to open and directly manipulate the config objects (Open() and Exists()). Most objects created here need only to specify the Name of the object, and 1 or 2 properties since the the defaults are what are commonly used for most cases."]}),"\n",(0,n.jsx)(s.p,{children:"EXAMPLE:"}),"\n",(0,n.jsxs)(s.p,{children:['; Use class methods to create an instance %SYS>s Name="NewDevice" %SYS>s Properties("PhysicalDevice")=0 %SYS>s Properties("SubType")="C-InterSystems IRIS Terminal" %SYS>s Properties("Type")="TRM" %SYS>s Status=##Class(Config.Devices).Create(Name,.Properties) %SYS>i \'Status w !,"Error="',(0,n.jsx)(s.em,{children:'$SYSTEM.Status.GetErrorText(Status) ; Use class methods to modify properties %SYS>s Status=##Class(Config.Devices).Get(Name,.Properties) %SYS>i \'Status w !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status) %SYS>zw Properties("SubType") Properties("SubType")="C-InterSystems IRIS Terminal" %SYS>s Properties("SubType")="C-VT220" %SYS>s Status=##Class(Config.Devices).Modify(Name,.Properties) %SYS>i \'Status w !,"Error="',(0,n.jsx)(s.em,{children:'$SYSTEM.Status.GetErrorText(Status) ; Now use Objects to modify properties %SYS>s Obj=##Class(Config.Devices).Open(Name) ; We could have used i ##Class(Config.Devices).Exists(Name,.Obj) instead of Open() %SYS>w Obj.SubType C-VT220 %SYS>s Obj.SubType="C-VT440" %SYS>s Status=Obj.%Save() %SYS>i \'Status w !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status) ; Now delete the object we just created %SYS>s Status=##Class(Config.Devices).Delete(Name) %SYS>i \'Status w !,"Error="_$SYSTEM.Status.GetErrorText(Status)']}),"\n",(0,n.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(s.h3,{id:"alias",children:"Alias"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Alias As %Integer(MINVAL = 1);\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Alternate device ID (number) for this device.",(0,n.jsx)(s.br,{}),"\nAll aliases must be unique. You can use this value to specify a device in an OPEN command, e.g 0PEN 210"]}),"\n",(0,n.jsx)(s.h3,{id:"alternatedevice",children:"AlternateDevice"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property AlternateDevice As %String(MAXLEN = 128, MINLEN = 0);\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Device ID of an alternate device.",(0,n.jsx)(s.br,{}),"\nThis allows a user using %IS to specify A as the device. The alternate device must be a defined mnemonic."]}),"\n",(0,n.jsx)(s.h3,{id:"description",children:"Description"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Description As %String(MAXLEN = 256, MINLEN = 0);\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Enter a description of where the device is located. This field is for your",(0,n.jsx)(s.br,{}),"\nown reference to help you identify what machine you're configuring."]}),"\n",(0,n.jsx)(s.h3,{id:"openparameters",children:"OpenParameters"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property OpenParameters As %String(MAXLEN = 128, MINLEN = 0);\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Values that will be sent as the second argument for an OPEN command.",(0,n.jsx)(s.br,{}),"\nThis value allows you to specify more specific terminal information."]}),"\n",(0,n.jsx)(s.h3,{id:"physicaldevice",children:"PhysicalDevice"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property PhysicalDevice As %String(MAXLEN = 128, MINLEN = 1) [ Required ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"Physical device name used to refer to the device."}),"\n",(0,n.jsx)(s.h3,{id:"prompt",children:"Prompt"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Prompt As %Integer(MAXVAL = 2, MINVAL = 1);\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Number of the prompt option desired.",(0,n.jsx)(s.br,{}),"\nOptions:",(0,n.jsx)(s.br,{}),"\nNULL (blank) = user sees the device selection prompt with the default device defined",(0,n.jsx)(s.br,{}),"\n1 = automatically uses this device, if it is the current device",(0,n.jsx)(s.br,{}),"\n2 = automatically uses this device with predefined Right Margin and Parameter settings."]}),"\n",(0,n.jsx)(s.h3,{id:"subtype",children:"SubType"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property SubType As %String(MAXLEN = 128, MINLEN = 1) [ Required ];\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Options to refine the definition of your device SubTypes.",(0,n.jsx)(s.br,{}),"\nSubTypes specify terminal charactistics. They are used to create the appropriate OPEN command for the device. There should be SubType information for every terminal type."]}),"\n",(0,n.jsx)(s.h3,{id:"type",children:"Type"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Type As %String(MAXLEN = 3, MINLEN = 2) [ Required ];\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Enter the type of device.",(0,n.jsx)(s.br,{}),"\nOptions:",(0,n.jsx)(s.br,{}),"\nTRM = Terminal",(0,n.jsx)(s.br,{}),"\nSPL = Spooling device",(0,n.jsx)(s.br,{}),"\nMT = Magnetic Tape drive",(0,n.jsx)(s.br,{}),"\nBT = Cartridge tape drive",(0,n.jsx)(s.br,{}),"\nIPC = Interprocess communication",(0,n.jsx)(s.br,{}),"\nOTH = any other device including printers and sequential files.",(0,n.jsx)(s.br,{}),"\nDefault depends on the device type."]}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"createcallback",children:"CreateCallBack"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateCallBack(Obj As %ObjectHandle, Data As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Called by the Create method during import from a CPF file."}),"\n",(0,n.jsx)(s.h3,{id:"default",children:"Default"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Default(CPFFile As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Write a default Devices section in a CPF file.",(0,n.jsx)(s.br,{}),"\nThis method assumes that a CPF file has been opened, and that a U CPFFile command has been executed before this is called."]}),"\n",(0,n.jsx)(s.h3,{id:"load",children:"Load"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Load(Obj As %ObjectHandle = "", Flags As %Integer = 1) As %Status [ Internal ]\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Load the parameters into memory and activate.",(0,n.jsx)(s.br,{}),"\nParameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Obj"}),' = Handle to the object which caused the load. If "", then load everything, only called from STU.',(0,n.jsx)(s.br,{}),"\nIf a delete operation, then Obj is the NAME of the item which was deleted since the oject itself has already been deleted.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Flags"})," = Type of modification.",(0,n.jsx)(s.br,{}),"\n0 - Modify",(0,n.jsx)(s.br,{}),"\n1 - Create/Insert",(0,n.jsx)(s.br,{}),"\n2 - Delete"]}),"\n",(0,n.jsx)(s.h3,{id:"onvalidateobject",children:"%OnValidateObject"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnValidateObject() As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Called from %Save().",(0,n.jsx)(s.br,{}),"\nVerify that the property values are ok."]}),"\n",(0,n.jsx)(s.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListExecute(ByRef %qHandle As %Binary, Names As %String = "*", CPFFile As %String = "", Flags As %Integer = 0, Format As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(s.p,{children:"List Devices in a CPF file."}),"\n",(0,n.jsxs)(s.p,{children:["Parameters:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Names"})," - Comma separated list of Device names",(0,n.jsx)(s.br,{}),'\n"*" - All records match',(0,n.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,n.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,n.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"CPFFile"})," - Name of the CPF file to use. A null string means use the active CPF file.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Flags"})," - Currently ignored.",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Format"}),(0,n.jsx)(s.br,{}),"\n0 - Standard report list format",(0,n.jsx)(s.br,{}),"\n1 - ^CONFIG global format",(0,n.jsx)(s.br,{}),"\n2 - CPF file format format",(0,n.jsx)(s.br,{}),"\nNote: This query may change in future versions"]}),"\n",(0,n.jsx)(s.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listclose",children:"ListClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>l});var n=t(96540);const r={},i=n.createContext(r);function a(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);