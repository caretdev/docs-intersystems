"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[83267],{25650:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>c,default:()=>r,frontMatter:()=>o,toc:()=>a});var i=t(74848),n=t(28453);const o={pagination_prev:null,pagination_next:null},c="%Library.List",a=[{value:"Parameters",id:"parameters",level:2},{value:"ODBCDELIMITER",id:"odbcdelimiter",level:3},{value:"XSDTYPE",id:"xsdtype",level:3},{value:"JSONTYPE",id:"jsontype",level:3},{value:"Methods",id:"methods",level:2},{value:"XSDToLogical",id:"xsdtological",level:3},{value:"LogicalToXSD",id:"logicaltoxsd",level:3},{value:"LogicalToOdbc",id:"logicaltoodbc",level:3},{value:"OdbcToLogical",id:"odbctological",level:3}];function l(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"librarylist",children:"%Library.List"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"Class %Library.List [ ClassType = datatype, ClientDataType = LIST, System = 2 ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.strong,{children:"%List"})," data type class is used to represent data that is in ",(0,i.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$List"})," format. The logical value for ",(0,i.jsx)(s.strong,{children:"%List"})," is a list of elements in ",(0,i.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$List"})," format."]}),"\n",(0,i.jsxs)(s.p,{children:["When a ",(0,i.jsx)(s.strong,{children:"%List"})," data type value is projected to a client application, it exposes it as a ",(0,i.jsx)(s.strong,{children:"syslist"})," object. This allows the client application to efficiently manipulate the contents of the list."]}),"\n",(0,i.jsxs)(s.p,{children:["Note that ",(0,i.jsx)(s.code,{children:"$List"})," format is a compressed binary format; for this reason, a property of type of ",(0,i.jsx)(s.strong,{children:"%List"})," cannot be set through SQL nor can its value be queried through SQL (such as with a WHERE clause)."]}),"\n",(0,i.jsxs)(s.p,{children:["Refer to the documentation on ",(0,i.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$List"})," in the ",(0,i.jsx)(s.em,{children:"ObjectScript Reference"})," for more information."]}),"\n",(0,i.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsx)(s.h3,{id:"odbcdelimiter",children:"ODBCDELIMITER"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter ODBCDELIMITER = ",";\n'})}),"\n",(0,i.jsxs)(s.p,{children:["A ",(0,i.jsx)(s.strong,{children:"%List"})," value is converted to a delimited string when it is projected via ODBC. ODBCDELIMITER is the delimiter character used to construct the delimited string."]}),"\n",(0,i.jsx)(s.h3,{id:"xsdtype",children:"XSDTYPE"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter XSDTYPE = "string";\n'})}),"\n",(0,i.jsx)(s.p,{children:"Declares the XSD type used when projecting XML Schemas."}),"\n",(0,i.jsx)(s.h3,{id:"jsontype",children:"JSONTYPE"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter JSONTYPE = "string";\n'})}),"\n",(0,i.jsx)(s.p,{children:"JSONTYPE is JSON type used for this datatype."}),"\n",(0,i.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(s.h3,{id:"xsdtological",children:"XSDToLogical"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod XSDToLogical(val As %String) As %List [ CodeMode = generator ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Converts the SOAP encoded input list value into a ObjectScript $list value."}),"\n",(0,i.jsx)(s.h3,{id:"logicaltoxsd",children:"LogicalToXSD"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToXSD(val As %List) As %String [ CodeMode = generator ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Converts the ObjectScript $list value to the canonical SOAP encoded value."}),"\n",(0,i.jsx)(s.h3,{id:"logicaltoodbc",children:"LogicalToOdbc"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod LogicalToOdbc(val = "") As %String [ CodeMode = generator ]\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Converts the value of this data type from ",(0,i.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$List"})," format to a delimited string using the value of the ODBCDELIMITER parameter as a delimiter."]}),"\n",(0,i.jsx)(s.h3,{id:"odbctological",children:"OdbcToLogical"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod OdbcToLogical(val = "") As %String [ CodeMode = generator ]\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Converts the value of an incoming delimited string to ",(0,i.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$List"})," format using the value of the ODBCDELIMITER parameter as a delimiter."]})]})}function r(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>c,x:()=>a});var i=t(96540);const n={},o=i.createContext(n);function c(e){const s=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),i.createElement(o.Provider,{value:s},e.children)}}}]);