"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[61359],{69378:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>r,default:()=>c,frontMatter:()=>a,toc:()=>l});var t=n(74848),i=n(28453);const a={pagination_prev:null,pagination_next:null},r="%DeepSee.extensions.clusters.AbstractModel",l=[{value:"Properties",id:"properties",level:2},{value:"Dim",id:"dim",level:3},{value:"DSName",id:"dsname",level:3},{value:"Normalize",id:"normalize",level:3},{value:"P",id:"p",level:3},{value:"Verbose",id:"verbose",level:3},{value:"Methods",id:"methods",level:2},{value:"Exists",id:"exists",level:3},{value:"Delete",id:"delete",level:3},{value:"Check",id:"check",level:3},{value:"IsPrepared",id:"isprepared",level:3},{value:"Reset",id:"reset",level:3},{value:"SetData",id:"setdata",level:3},{value:"dist",id:"dist",level:3},{value:"Distance",id:"distance",level:3},{value:"Distance1",id:"distance1",level:3},{value:"Distance12",id:"distance12",level:3},{value:"GetNumberOfClusters",id:"getnumberofclusters",level:3},{value:"GetCount",id:"getcount",level:3},{value:"GetId",id:"getid",level:3},{value:"ById",id:"byid",level:3},{value:"GetData",id:"getdata",level:3},{value:"GetDimensions",id:"getdimensions",level:3},{value:"GetCluster",id:"getcluster",level:3},{value:"GetCost",id:"getcost",level:3},{value:"iterateCluster",id:"iteratecluster",level:3},{value:"printCluster",id:"printcluster",level:3},{value:"GetCentroid",id:"getcentroid",level:3},{value:"GlobalCentroid",id:"globalcentroid",level:3},{value:"SubsetCentroid",id:"subsetcentroid",level:3},{value:"GetClusterSize",id:"getclustersize",level:3},{value:"printAll",id:"printall",level:3},{value:"RelativeClusterCost",id:"relativeclustercost",level:3},{value:"GetCalinskiHarabaszIndex",id:"getcalinskiharabaszindex",level:3},{value:"GetASWIndex",id:"getaswindex",level:3},{value:"GetPearsonGammaIndex",id:"getpearsongammaindex",level:3},{value:"time",id:"time",level:3},{value:"randomSubset",id:"randomsubset",level:3},{value:"GeneratePMML",id:"generatepmml",level:3}];function d(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"deepseeextensionsclustersabstractmodel",children:"%DeepSee.extensions.clusters.AbstractModel"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %DeepSee.extensions.clusters.AbstractModel Extends %RegisteredObject [ System = 4 ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"This class provides a base class for implementation for different Cluster Analysis algorithms. It defines storage for clustering models and provides methods to retrieve information about data and clustering."}),"\n",(0,t.jsx)(s.p,{children:"Cluster analysis or clustering is the assignment of a set of observations into subsets (called clusters) so that observations in the same cluster are similar in some sense. Clustering is a method of unsupervised learning, and a common technique for statistical data analysis used in many fields, including machine learning, data mining, pattern recognition, image analysis, information retrieval, and bioinformatics."}),"\n",(0,t.jsx)(s.p,{children:"By Default model data is stored in ^IRIS.Temp globals."}),"\n",(0,t.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(s.h3,{id:"dim",children:"Dim"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Dim As %Integer;\n"})}),"\n",(0,t.jsx)(s.h3,{id:"dsname",children:"DSName"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property DSName As %String;\n"})}),"\n",(0,t.jsx)(s.h3,{id:"normalize",children:"Normalize"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Normalize As %Boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Whether to normalize distance across multiple dimensions. If set to 1 (default) then distance is normalized by variances."}),"\n",(0,t.jsx)(s.h3,{id:"p",children:"P"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property P As %Double [ InitialExpression = 2 ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"The power to use in calculation of dissimilarity. Default is Euclidean distance (P=2). Specify 1 for Manhattan Distance or 100 for Chebyshev distance (max between coordinates)."}),"\n",(0,t.jsx)(s.h3,{id:"verbose",children:"Verbose"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Verbose As %Boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"exists",children:"Exists"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Exists(dataset As %String) As %Boolean\n"})}),"\n",(0,t.jsx)(s.p,{children:"Checks whether a model for a dataset with the name given by dataset argument already exists."}),"\n",(0,t.jsx)(s.h3,{id:"delete",children:"Delete"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Delete(dataset As %String) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Deletes a model for a dataset with the name given by dataset argument."}),"\n",(0,t.jsx)(s.h3,{id:"check",children:"Check"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Check(dataset As %String, exists As %Boolean) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"isprepared",children:"IsPrepared"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method IsPrepared() As %Boolean\n"})}),"\n",(0,t.jsx)(s.p,{children:"Checks whether the model is ready for an analysis to be executed. This is dependent on a specific algorithm and therefore this method is overriden by subclasses."}),"\n",(0,t.jsx)(s.h3,{id:"reset",children:"Reset"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method Reset()\n"})}),"\n",(0,t.jsx)(s.p,{children:"Kills all the data associated with this model."}),"\n",(0,t.jsx)(s.h3,{id:"setdata",children:"SetData"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method SetData(rs As %IResultSet, dim As %Integer, nullReplacement As %Double = -1) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Sets the data to be associated with this model. The method takes 3 arguments:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"rs - is a result set that provides the data. The first column returned by the result set is assumed to be a unique Id of teh record. It is not used in any clustering algorithms but can be retrieved by the application to identify the record. It can be a database %ID or any other value that makes sense to the application. Other columns provide numerical values for the coordinates of the record that are used by clustering algorithms. Result Set must contain at least dim + 1 columns."}),"\n",(0,t.jsx)(s.li,{children:"dim - The dimensionality of the model, i.e. the number of the coordinates consumed by clustering algorithm."}),"\n",(0,t.jsx)(s.li,{children:"nullReplacement - Optional, of specified this is a numeric replacement for empty values."}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"dist",children:"dist"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method dist(i As %Integer, j As %Integer) As %Double [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"distance",children:"Distance"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method Distance(i As %Integer, j As %Integer, p As %Double = 2, normalize As %Boolean = 1) As %Double\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the dissimilarity measure between two data points of the model. The method takes 4 arguments:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"i, j - Ordinal number of the data points in the model"}),"\n",(0,t.jsx)(s.li,{children:"p - Optional, if specified the power for a Minkowski distance. Default is Euclidean distance (p=2). Specify 1 for Manhattan Distance or 100 for Chebyshev distance (max between coordinates)."}),"\n",(0,t.jsx)(s.li,{children:"normalize - whether to normalize coordinates by their variances"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"distance1",children:"Distance1"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method Distance1(i As %Integer, ByRef z, p As %Double = 2, normalize As %Boolean = 1) As %Double\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the dissimilarity measure between a data points of the model and a point with given coordinates. The method takes 4 arguments:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"i - The ordinal number of the data point in the model"}),"\n",(0,t.jsx)(s.li,{children:"z - The multidimensional coordinates of the second point: z(1), z(2), ..., z(dim)"}),"\n",(0,t.jsx)(s.li,{children:"p - Optional, if specified the power for a Minkowski distance. Default is Euclidean distance (p=2). Specify 1 for Manhattan Distance or 100 for Chebyshev distance (max between coordinates)."}),"\n",(0,t.jsx)(s.li,{children:"normalize - whether to normalize coordinates by their variances"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"distance12",children:"Distance12"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method Distance12(ByRef z1, ByRef z2, p As %Double = 2, normalize As %Boolean = 1) As %Double\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the dissimilarity measure between two points with given coordinates. The method takes 4 arguments:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"z1, z2 - The multidimensional coordinates of the points: z1(1), z1(2), ..., z1(dim)"}),"\n",(0,t.jsx)(s.li,{children:"p - Optional, if specified the power for a Minkowski distance. Default is Euclidean distance (p=2). Specify 1 for Manhattan Distance or 100 for Chebyshev distance (max between coordinates)."}),"\n",(0,t.jsx)(s.li,{children:"normalize - whether to normalize coordinates by their variances"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"getnumberofclusters",children:"GetNumberOfClusters"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetNumberOfClusters() As %Integer\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the number of clusters in the model."}),"\n",(0,t.jsx)(s.h3,{id:"getcount",children:"GetCount"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetCount() As %Integer\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the number of all data points in the model."}),"\n",(0,t.jsx)(s.h3,{id:"getid",children:"GetId"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetId(i As %Integer) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the unque Id of the point with the ordinal number specified by i. The unique Id is as has been assigned in SetData() method"}),"\n",(0,t.jsx)(s.h3,{id:"byid",children:"ById"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method ById(id As %RawString) As %Integer\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the ordinal number of the point with the given ID id. The unique id must correspond to the one assigned in SetData() method"}),"\n",(0,t.jsx)(s.h3,{id:"getdata",children:"GetData"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetData(i As %Integer, j As %Integer) As %String\n"})}),"\n",(0,t.jsx)(s.h3,{id:"getdimensions",children:"GetDimensions"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetDimensions() As %Integer\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the dimensionality of the model."}),"\n",(0,t.jsx)(s.h3,{id:"getcluster",children:"GetCluster"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetCluster(point As %Integer) As %Integer\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the cluster ordinal for a given point. Point is identified by its ordinal number."}),"\n",(0,t.jsx)(s.h3,{id:"getcost",children:"GetCost"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetCost(i As %Integer, j As %Integer) As %Integer\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the dissimilarity measure as used by this clustering algorithm between two data points of the model. Points are identified by their ordinal numbers."}),"\n",(0,t.jsx)(s.h3,{id:"iteratecluster",children:"iterateCluster"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method iterateCluster(k As %Integer, ByRef i As %Integer, Output id As %String, Output coordinates)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Iterates over all the data points assigned to a given cluster. Cluster is identified by its ordinal number k"}),"\n",(0,t.jsx)(s.h3,{id:"printcluster",children:"printCluster"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method printCluster(k As %Integer)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Convenience method. Writes all data points assigned to a given cluster to the default output device. Cluster is identified by its ordinal number k"}),"\n",(0,t.jsx)(s.h3,{id:"getcentroid",children:"GetCentroid"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetCentroid(k As %Integer, Output z)\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns the coordinates for the centroid for a given cluster. Cluster is identified by its ordinal number k.",(0,t.jsx)(s.br,{}),"\nCoordinates are returned as multidimensional value: z(1), z(2), ..., z(dim)"]}),"\n",(0,t.jsx)(s.h3,{id:"globalcentroid",children:"GlobalCentroid"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GlobalCentroid(Output z)\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Returns the coordinates for the centroid for the whole dataset.",(0,t.jsx)(s.br,{}),"\nCoordinates are returned as multidimensional value: z(1), z(2), ..., z(dim)"]}),"\n",(0,t.jsx)(s.h3,{id:"subsetcentroid",children:"SubsetCentroid"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method SubsetCentroid(key As %String, Output z)\n"})}),"\n",(0,t.jsx)(s.h3,{id:"getclustersize",children:"GetClusterSize"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetClusterSize(k As %Integer)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the number of data points assigned to a given cluster. Cluster is identified by its ordinal number k."}),"\n",(0,t.jsx)(s.h3,{id:"printall",children:"printAll"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method printAll()\n"})}),"\n",(0,t.jsx)(s.p,{children:"Convenience method. Writes all data points in the dataset to the default output device."}),"\n",(0,t.jsx)(s.h3,{id:"relativeclustercost",children:"RelativeClusterCost"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method RelativeClusterCost(k As %Integer, m As %Integer) As %Double\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the realtive cost of a given cluster relative to a medoid point m. Cluster is identified by its ordinal number k. Point m is identified by its ordinal number."}),"\n",(0,t.jsx)(s.h3,{id:"getcalinskiharabaszindex",children:"GetCalinskiHarabaszIndex"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetCalinskiHarabaszIndex(normalize As %Integer = -1) As CalinskiHarabasz\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns an object that can calculate an index used in Cluster Validation and determining the optimal number of clusters. This method returns Calinski-Harabasz index."}),"\n",(0,t.jsx)(s.h3,{id:"getaswindex",children:"GetASWIndex"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetASWIndex() As ASW\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns an object that can calculate an index used in Cluster Validation and determining the optimal number of clusters. This method returns Average Silhouette Width index."}),"\n",(0,t.jsx)(s.h3,{id:"getpearsongammaindex",children:"GetPearsonGammaIndex"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetPearsonGammaIndex() As PearsonGamma\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns an object that can calculate an index used in Cluster Validation and determining the optimal number of clusters. This method returns Pearson-Gamma index which is a correlation coefficient between distance between two points and a binary function whether they belong to the same cluster. This index is useful when clustering is used for dimension reduction i.e. the process of reducing the number of random variables under consideration"}),"\n",(0,t.jsx)(s.h3,{id:"time",children:"time"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod time(ByRef ts) As %Double [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"randomsubset",children:"randomSubset"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method randomSubset(size As %Integer, ByRef sc As %Status) As %Integer\n"})}),"\n",(0,t.jsx)(s.h3,{id:"generatepmml",children:"GeneratePMML"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GeneratePMML(Output pPMML As %DeepSee.PMML.Definition.PMML, ByRef pClusterNames) As %Status\n"})})]})}function c(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>l});var t=n(96540);const i={},a=t.createContext(i);function r(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);