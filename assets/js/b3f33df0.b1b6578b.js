"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[78599],{54966:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>a,default:()=>d,frontMatter:()=>i,toc:()=>l});var n=s(74848),r=s(28453);const i={pagination_prev:null,pagination_next:null},a="%Net.LDAP.Client.EditEntry",l=[{value:"Properties",id:"properties",level:2},{value:"DN",id:"dn",level:3},{value:"Parent",id:"parent",level:3},{value:"Q",id:"q",level:3},{value:"Methods",id:"methods",level:2},{value:"Remove",id:"remove",level:3},{value:"Replace",id:"replace",level:3},{value:"Add",id:"add",level:3},{value:"Commit",id:"commit",level:3},{value:"Test",id:"test",level:3}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"netldapclienteditentry",children:"%Net.LDAP.Client.EditEntry"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Net.LDAP.Client.EditEntry Extends %RegisteredObject [ ServerOnly = 1, System = 4 ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"WARNING: This Class and its methods has been deprecated, please use the %SYS.LDAP class."}),"\n",(0,n.jsx)(t.p,{children:"Edit/Modify an existing LDAP Entry"}),"\n",(0,n.jsx)(t.p,{children:"The following shows an example of editting an entry:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:'Set err="" Set session=##class(%Net.LDAP.Client.Session).%New() Set DC="DC=testldap,DC=com" Set c=session.Connect("lx2",0,"CN=admin,"_DC,"password", 0) If ($$$ISERR(c)) { Do DecomposeStatus^%apiOBJ(c,.err) Write "Failed to connect : err : ", err(err),! Quit } Write "Connected to (",DC,")",! ;; Create a test entry ;; Build attributes to be added to the entry Set p=session.GetPropList() Set c=p.Insert("objectclass","organizationalRole") w:(c\'=$$$OK) "objclass attrib insert failed!!",! Set cn="test4" Set c=p.Insert("cn",cn) w:(c\'=$$$OK) "cn attrib insert failed!!",! Set DN="cn="_cn_","_DC Set c=session.AddNewEntry(DN,p) If ($$$ISERR(c)) { Do DecomposeStatus^%apiOBJ(c,.err) Write "Failed to add/create a new entry(",DN,") : err : ", err(err),! } else { Write "Entry added (",DN,")",! } ;; Edit/Modify DN s ed=session.EditEntry(DN) ;; Modifiy "description" attrib with multiple value s mv=session.GetValueList() s c=mv.Insert("Modified for testing!!") w:(c\'=$$$OK) "1- multi value insert failed!!",! s:(\'$$$ISERR(c)) c=mv.Insert("Last updated - "_$zdt($ztimestamp)) w:(c\'=$$$OK) "2- multi value insert failed!!",! ;; Queue an add of a multi-value "description" attrib, ;; and replace "postaladdress" attrib value s:(\'$$$ISERR(c)) c=ed.Add("description",mv) s:(\'$$$ISERR(c)) c=ed.Replace("postalAddress","123 - New addr") if ($$$ISERR(c)) { d DecomposeStatus^%apiOBJ(c,.err) W "--- Failed to edit DN(",DN,") : err : ", err(err),! } else { w "Edits Q-ed ok!!",! } ;; Commit the edits s c=ed.Commit() if ($$$ISERR(c)) { d DecomposeStatus^%apiOBJ(c,.err) W "--- Failed to commit DN(",DN,") changes : err : ", err(err),! } else { w "Committed ok!!",! } ;; Display the changes ;; Get all "ObjectClass", "postalAddress", "description", and "cn" in DC ;; build a list of desired attributes Set sl=session.GetStringList() Do sl.InsertStr("ObjectClass","cn","postalAddress","description") Set session.MaxItems=100 ;; specify max number of results Set ents=session.Search(DC,scope, "(ObjectClass=*)",sl,1000) If (\'$IsObject(ents)) { Do DecomposeStatus^%apiOBJ(ents,.err) Write "Search failed : err : ", err(err),! } else { Write !,"Search result:",! Set count=0 Set entDN="" For { ; iterate through returned entries Set ent=ents.GetNext(.entDN) Quit:(entDN="") Set count=count+1 Write " ",count," - Entry(",entDN,")",! if ($IsObject(ent)) { Set attrNM="" For { ; iterate through each attribute of an entry Set val=ent.GetNext(.attrNM) Quit:(attrNM="") Write " Ent(",entDN,"), attr(",attrNM,")",! ;; iterate through values associated with each attribute For i=1:1:val.GetNumItems() { Write " ",i," - Value(",val.GetValue(i),")",! } } } else { Quit ;; list end } } Write !,"Search done!! Count == ",count,! } Set c=session.DeleteEntry(DN) If ($$$ISERR(c)) { Do DecomposeStatus^%apiOBJ(c,.err) Write "Failed to delete entry(",DN,") : err : ", err(err),! } else { Write "Delete entry (",DN,")",! }'})}),"\n",(0,n.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(t.h3,{id:"dn",children:"DN"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property DN As %String [ Internal ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Entry DN"}),"\n",(0,n.jsx)(t.h3,{id:"parent",children:"Parent"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property Parent As Session [ Internal ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Parent Session"}),"\n",(0,n.jsx)(t.h3,{id:"q",children:"Q"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property Q As %Net.LDAP.Client.PropList [ Internal ];\n"})}),"\n",(0,n.jsx)(t.p,{children:"Q of pending changes $char of instruction, args. See LDAPCli.inc kEdit* macros"}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"remove",children:"Remove"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method Remove(attribute As %String, value As %RawString = "", binary As %Boolean = 0) As %Status\n'})}),"\n",(0,n.jsx)(t.p,{children:"Remove an attribute value."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"attribute"})," Attribute to change"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"value"})," Value to be deleted"]}),"\n",(0,n.jsx)(t.p,{children:"The value could be string, stream, or a binary blub"}),"\n",(0,n.jsx)(t.p,{children:"If no value is provided, it will remove the attribute and all values"}),"\n",(0,n.jsxs)(t.p,{children:["This change is committed by the ",(0,n.jsx)(t.strong,{children:"Commit"})," method"]}),"\n",(0,n.jsx)(t.h3,{id:"replace",children:"Replace"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Replace(attribute As %String, value As %RawString, binary As %Boolean = 0) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Replace an attribute value."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"attribute"})," Attribute to change"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"value"})," New value of the attribute"]}),"\n",(0,n.jsx)(t.p,{children:"The value could be string, stream, or a binary blub"}),"\n",(0,n.jsx)(t.p,{children:"If attribute doesn't exist in the entry, the attribute will be added"}),"\n",(0,n.jsxs)(t.p,{children:["This change is committed by the ",(0,n.jsx)(t.strong,{children:"Commit"})," method"]}),"\n",(0,n.jsx)(t.h3,{id:"add",children:"Add"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Add(attribute As %String, value As %RawString, binary As %Boolean = 0) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Add a value to an attribute."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"attribute"})," Attribute to change"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"value"})," New value"]}),"\n",(0,n.jsx)(t.p,{children:"The value could be string, stream, or a binary blub"}),"\n",(0,n.jsx)(t.p,{children:"If attribute doesn't exist in the entry, the attribute will be added"}),"\n",(0,n.jsxs)(t.p,{children:["This change is committed by the ",(0,n.jsx)(t.strong,{children:"Commit"})," method"]}),"\n",(0,n.jsx)(t.h3,{id:"commit",children:"Commit"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Commit() As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Commit the changes."}),"\n",(0,n.jsx)(t.p,{children:"Applies the pending changes. On success, resets/clears the change list."}),"\n",(0,n.jsx)(t.h3,{id:"test",children:"Test"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Test(testnum As %Integer = 0, scope As %Net.LDAP.Client.Search.Scope = 2) As %Status [ Internal ]\n"})})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>l});var n=s(96540);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);