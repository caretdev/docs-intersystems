"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[82738],{46194:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>l,default:()=>o,frontMatter:()=>n,toc:()=>i});var a=t(74848),r=t(28453);const n={pagination_prev:null,pagination_next:null},l="Config.Databases",i=[{value:"Parameters",id:"parameters",level:2},{value:"CPFFlags",id:"cpfflags",level:3},{value:"CAPITALNAME",id:"capitalname",level:3},{value:"EMSSERVICE",id:"emsservice",level:3},{value:"Properties",id:"properties",level:2},{value:"ClusterMountMode",id:"clustermountmode",level:3},{value:"Directory",id:"directory",level:3},{value:"MountAtStartup",id:"mountatstartup",level:3},{value:"MountRequired",id:"mountrequired",level:3},{value:"Server",id:"server",level:3},{value:"StreamLocation",id:"streamlocation",level:3},{value:"Methods",id:"methods",level:2},{value:"NameSet",id:"nameset",level:3},{value:"ServerSet",id:"serverset",level:3},{value:"CreateCallBack",id:"createcallback",level:3},{value:"DatabasesByDirectory",id:"databasesbydirectory",level:3},{value:"DatabaseByName",id:"databasebyname",level:3},{value:"KillDatabaseByUCI",id:"killdatabasebyuci",level:3},{value:"GetNextDatabaseByUCI",id:"getnextdatabasebyuci",level:3},{value:"DatabasesByServer",id:"databasesbyserver",level:3},{value:"Default",id:"default",level:3},{value:"GetDirectory",id:"getdirectory",level:3},{value:"GetStreamLocation",id:"getstreamlocation",level:3},{value:"IsValidCollation",id:"isvalidcollation",level:3},{value:"Load",id:"load",level:3},{value:"LoadOne",id:"loadone",level:3},{value:"FixInternalMountFlag",id:"fixinternalmountflag",level:3},{value:"isMirroredDB",id:"ismirroreddb",level:3},{value:"Modify",id:"modify",level:3},{value:"MoveToActive",id:"movetoactive",level:3},{value:"Rename",id:"rename",level:3},{value:"SynonymDBs",id:"synonymdbs",level:3},{value:"ValidateECPDBFormat",id:"validateecpdbformat",level:3},{value:"%OnAddToSaveSet",id:"onaddtosaveset",level:3},{value:"%OnDeleteCallBack",id:"ondeletecallback",level:3},{value:"%OnValidateObject",id:"onvalidateobject",level:3},{value:"CompactLocalDBListExecute",id:"compactlocaldblistexecute",level:3},{value:"CompactLocalDBListFetch",id:"compactlocaldblistfetch",level:3},{value:"CompactLocalDBListClose",id:"compactlocaldblistclose",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"ListFetch",id:"listfetch",level:3},{value:"ListClose",id:"listclose",level:3},{value:"ListFilterExecute",id:"listfilterexecute",level:3},{value:"ListFilterFetch",id:"listfilterfetch",level:3},{value:"ListFilterClose",id:"listfilterclose",level:3},{value:"List1Execute",id:"list1execute",level:3},{value:"List1Flags",id:"list1flags",level:3},{value:"List1Fetch",id:"list1fetch",level:3},{value:"List1Close",id:"list1close",level:3},{value:"GetDBMirrorSetName",id:"getdbmirrorsetname",level:3},{value:"LocalDatabaseListExecute",id:"localdatabaselistexecute",level:3},{value:"LocalDatabaseListFetch",id:"localdatabaselistfetch",level:3},{value:"LocalDatabaseListClose",id:"localdatabaselistclose",level:3},{value:"LocalDatabaseListFilterExecute",id:"localdatabaselistfilterexecute",level:3},{value:"LocalDatabaseListFilterFetch",id:"localdatabaselistfilterfetch",level:3},{value:"LocalDatabaseListFilterClose",id:"localdatabaselistfilterclose",level:3},{value:"LocalDatabaseCanMirrorListExecute",id:"localdatabasecanmirrorlistexecute",level:3},{value:"LocalDatabaseCanMirrorListFetch",id:"localdatabasecanmirrorlistfetch",level:3},{value:"LocalDatabaseCanMirrorListClose",id:"localdatabasecanmirrorlistclose",level:3},{value:"MirrorDatabaseListExecute",id:"mirrordatabaselistexecute",level:3},{value:"MirrorDatabaseListFetch",id:"mirrordatabaselistfetch",level:3},{value:"MirrorDatabaseListClose",id:"mirrordatabaselistclose",level:3},{value:"%OnOpen",id:"onopen",level:3}];function c(e){const s={br:"br",code:"code",config:"config",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",mirror:"mirror",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"configdatabases",children:"Config.Databases"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Class Config.Databases Extends (%Persistent, Config.CommonMultipleMethods, Config.CommonProperties, %SYSTEM.Help) [ Final, Inheritance = right, System = 4 ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["This class allows you to modify and view the [Databases] section of the CPF file through programatic APIs. While properties are usually modified through the System Management portal, there may be some occasion where modifying them through the APIs is best for your system. In all the Config methods, if you do not specify the CPFFile parameter, the currently active CPF file is used. If you wish to modify a CPF file which is not the currently active one, then specify the CPFFile you wish to modify in the method call.",(0,a.jsx)(s.br,{}),"\nThe Flags parameter does not normally need to be specified; the defaults are usually sufficient for most cases.",(0,a.jsx)(s.br,{}),"\nYou can use either the provided APIs (Create/Get/Modify/Delete) to modify the properties by passing in the correct parameters, or use Object syntax to open and directly manipulate the config objects (Open() and Exists()). Most objects created here need only to specify the Name of the object, and 1 or 2 properties since the the defaults are what are commonly used for most cases."]}),"\n",(0,a.jsx)(s.p,{children:"EXAMPLE:"}),"\n",(0,a.jsxs)(s.p,{children:['; Use class methods to create an instance  %SYS>set Name="ABC"  %SYS>set Properties("Directory")="c:\\abc"  %SYS>set Status=##Class(Config.Databases).Create(Name,.Properties)  %SYS>if \'$$$ISOK(Status) write !,"Error="',(0,a.jsx)(s.em,{children:'$SYSTEM.Status.GetErrorText(Status)  ; Use class methods to modify properties  %SYS>set Status=##Class(Config.Databases).Get(Name,.Properties)  %SYS>if \'$$$ISOK(Status) write !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status)  %SYS>zwrite Properties  Properties("ClusterMountMode")=0  Properties("Directory")="c:\\abc"  Properties("MountAtStartup")=0  Properties("MountRequired")=0  Properties("Server")=""  %SYS>set Properties("MountRequired")=1  %SYS>set Status=##Class(Config.Databases).Modify(Name,.Properties)  %SYS>if \'$$$ISOK(Status) w !,"Error="',(0,a.jsx)(s.em,{children:'$SYSTEM.Status.GetErrorText(Status)  ; Now use Objects to modify properties  %SYS>set Obj=##Class(Config.Databases).Open(Name)  ; We could have used if ##Class(Config.Databases).Exists(Name,.Obj) instead of Open()  %SYS>write Obj.MountRequired  1  %SYS>set Obj.MountRequired=0  %SYS>set Status=Obj.%Save()  %SYS>if \'$$$ISOK(Status) write !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status)  ; Now delete the object we just created  %SYS>set Status=##Class(Config.Databases).Delete(Name)  %SYS>if \'$$$ISOK(Status) write !,"Error="_$SYSTEM.Status.GetErrorText(Status)']}),"\n",(0,a.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(s.h3,{id:"cpfflags",children:"CPFFlags"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter CPFFlags [ Internal ] = {1};\n"})}),"\n",(0,a.jsx)(s.p,{children:"{$$$CPFSave};"}),"\n",(0,a.jsx)(s.h3,{id:"capitalname",children:"CAPITALNAME"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter CAPITALNAME = 1;\n"})}),"\n",(0,a.jsx)(s.p,{children:"Database name is always capitalized."}),"\n",(0,a.jsx)(s.h3,{id:"emsservice",children:"EMSSERVICE"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter EMSSERVICE [ Internal ] = "Namespace";\n'})}),"\n",(0,a.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(s.h3,{id:"clustermountmode",children:"ClusterMountMode"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property ClusterMountMode As Security.Datatype.BooleanYN [ InitialExpression = 0, Required ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Specifies whether the database should be mounted privately or clustered.",(0,a.jsx)(s.br,{}),"\n0 - Mount private",(0,a.jsx)(s.br,{}),"\n1 - Mount clustered"]}),"\n",(0,a.jsx)(s.h3,{id:"directory",children:"Directory"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property Directory As %SysPath [ Required ];\n"})}),"\n",(0,a.jsx)(s.p,{children:"Directory where the database resides."}),"\n",(0,a.jsxs)(s.p,{children:["On ECP Clients of a mirror this contains logical references to the databases on the failover mirror members as the path may be different on the various nodes.",(0,a.jsx)(s.br,{}),"\nThis has two forms:",(0,a.jsx)(s.br,{}),"\n:mirror:",(0,a.jsxs)(s.mirror,{name:"",children:[":",(0,a.jsxs)(s.mirror,{"data-base":"",name:"",children:[(0,a.jsx)(s.br,{}),"\n:ds:",(0,a.jsx)(s.config,{"data-base":"",name:""})]})]})]}),"\n",(0,a.jsxs)(s.p,{children:["The 1st form, :mirror:",(0,a.jsxs)(s.mirror,{name:"",children:[":",(0,a.jsx)(s.mirror,{"data-base":"",name:"",children:", refers to a mirrored database. The mirror database name is the internal mirror name assigned to the database when it was added to the mirror. This is generally the same as the database name in the configuration."})]})]}),"\n",(0,a.jsxs)(s.p,{children:["The 2nd form, :ds:",(0,a.jsx)(s.config,{"data-base":"",name:"",children:", refers to a non-mirrored database on the server. The config database name is the name of the database in the configuration and this database name is expected to exist on all of the failover members. This form is only used in special circumstances as normally non-mirrored databases are hosted on the ECP Client, not the ECP Server. This is used in cases where scratch data (eg. the data will be lost during a mirror failover) needs to be hosted on the server for some reason."})]}),"\n",(0,a.jsx)(s.h3,{id:"mountatstartup",children:"MountAtStartup"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property MountAtStartup As Security.Datatype.BooleanYN [ InitialExpression = 0, Required ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["On a clustered system, specifies whether the database should be mounted at startup.",(0,a.jsx)(s.br,{}),"\nThis property is valid for cluster systems only, and is ignored for non-cluster systems.",(0,a.jsx)(s.br,{}),"\n0 - Don't mount at startup",(0,a.jsx)(s.br,{}),"\n1 - Mount at startup"]}),"\n",(0,a.jsx)(s.h3,{id:"mountrequired",children:"MountRequired"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property MountRequired As Security.Datatype.BooleanYN [ InitialExpression = 0, Required ];\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Specifies that the database MUST be successfully mounted at startup.",(0,a.jsx)(s.br,{}),"\n0 - Successful mount not required for startup to succeed.",(0,a.jsx)(s.br,{}),"\n1 - Successful mount required for startup to succeed."]}),"\n",(0,a.jsx)(s.h3,{id:"server",children:"Server"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property Server As %String(MAXLEN = 64, MINLEN = 0);\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Name of the remote server where the DB resides.",(0,a.jsx)(s.br,{}),"\nIf empty, the database is local.",(0,a.jsx)(s.br,{}),"\nRemote server must already be configured to be entered here."]}),"\n",(0,a.jsx)(s.h3,{id:"streamlocation",children:"StreamLocation"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Property StreamLocation As %SysPath;\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Directory where the streams associated with this database go.",(0,a.jsx)(s.br,{}),'\nBy default (value=""), the location is in the subdirectory "stream", underneath the database directory, e.g. for a database located in c:\\abc, the default would be c:\\abc\\stream. InterSystems recommends leaving this parameter as "".']}),"\n",(0,a.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(s.h3,{id:"nameset",children:"NameSet"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method NameSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Force the name to be uppercase."}),"\n",(0,a.jsx)(s.h3,{id:"serverset",children:"ServerSet"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method ServerSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Force the server name to be uppercase."}),"\n",(0,a.jsx)(s.h3,{id:"createcallback",children:"CreateCallBack"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateCallBack(Obj As %ObjectHandle, Data As %String) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Called by the Create method during import from a CPF file."}),"\n",(0,a.jsx)(s.h3,{id:"databasesbydirectory",children:"DatabasesByDirectory"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DatabasesByDirectory(Server As %String, Directory As %String, ByRef DBList As %String, CPFFile As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Returns a list of databases that share the same given server/directory pair."}),"\n",(0,a.jsx)(s.h3,{id:"databasebyname",children:"DatabaseByName"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DatabaseByName(Name As %String) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return the ^system^directory where the database is located."}),"\n",(0,a.jsx)(s.h3,{id:"killdatabasebyuci",children:"KillDatabaseByUCI"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KillDatabaseByUCI(UCI As %String) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:'Kill the ^SYS("UCI",UCI) node.'}),"\n",(0,a.jsx)(s.h3,{id:"getnextdatabasebyuci",children:"GetNextDatabaseByUCI"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetNextDatabaseByUCI(UCI As %String) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return the Next UCI after the passed one, or null if at end."}),"\n",(0,a.jsx)(s.h3,{id:"databasesbyserver",children:"DatabasesByServer"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DatabasesByServer(Server As %String, ByRef DatabaseList As %String, CPFFile As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Returns a list of databases that reference a given server."}),"\n",(0,a.jsx)(s.h3,{id:"default",children:"Default"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Default(CPFFile As %String, Platform As %String) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Write a default Databases section in a CPF file."}),"\n",(0,a.jsx)(s.h3,{id:"getdirectory",children:"GetDirectory"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetDirectory(Name As %String) As %String [ Internal ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Get the databases directory location.",(0,a.jsx)(s.br,{}),"\nIf the database does not exist in the configuration, it will return null."]}),"\n",(0,a.jsx)(s.h3,{id:"getstreamlocation",children:"GetStreamLocation"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetStreamLocation(Name As %String) As %String [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Get the streams location"}),"\n",(0,a.jsx)(s.h3,{id:"isvalidcollation",children:"IsValidCollation"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsValidCollation(Name As %String, Global As %String, Collation As %Integer = 5, ByRef Status As %Status, Flags As %Integer = 0) As %Boolean [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Returns true if the collation matches the exist global."}),"\n",(0,a.jsx)(s.h3,{id:"load",children:"Load"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Load(Obj As %ObjectHandle = "", Flags As %Integer = 1) As %Status [ Internal ]\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Load the parameters into memory and activate.",(0,a.jsx)(s.br,{}),"\nParameters:",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Obj"}),' = Handle to the object which caused the load. If "", then load everything, only called from STU.',(0,a.jsx)(s.br,{}),"\nIf a delete operation, then Obj is the NAME of the item which was deleted since the oject itself has already been deleted.",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Flags"})," = Type of modification.",(0,a.jsx)(s.br,{}),"\n0 - Modify",(0,a.jsx)(s.br,{}),"\n1 - Create/Insert",(0,a.jsx)(s.br,{}),"\n2 - Delete"]}),"\n",(0,a.jsx)(s.h3,{id:"loadone",children:"LoadOne"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LoadOne(Dataset As %String, Data As %String, ByRef ClusterMountMode As %Boolean, allowMount As %Boolean) As %Status [ Internal, Private ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Called from Load()."}),"\n",(0,a.jsx)(s.h3,{id:"fixinternalmountflag",children:"FixInternalMountFlag"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod FixInternalMountFlag(Dir As %String, ClusterMountMode As %String) As %Boolean [ Internal, Private ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Called by LoadOne() when processing databases from the config file to check whether the GFDISAIMPL bit in gfattrib in the database label block which blocks implicit mounting of the database agreees with the Cluster v. Private mount mode setting in the configuration (.cpf file). An implicit mount results in privately mounting a datbase and a mounted database cannot be cluster mounted. To prevent accidently mounting a database which should be cluster mounted the GFDISAIMPL bit is generally set. This is maintained by the SMP and ^DATABASE when databases are designated a clustered (or privately) mounted. However if someone edits the .cpf file by hand the setting might get out of sync so we check it here."}),"\n",(0,a.jsx)(s.h3,{id:"ismirroreddb",children:"isMirroredDB"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod isMirroredDB(dir) As %Boolean [ Internal, Private ]\n"})}),"\n",(0,a.jsx)(s.p,{children:'isMirroredDB(dir) returns true if a database is marked internally as a mirrored db. Does not validate whether the database is part of "this" mirror. Used by LoadOne() where we force mirrored databases to be mounted privately at startup (but we don\'t force "required" mount). If the db is not part of this mirror, the mirror flags will be cleared when it is mounted.'}),"\n",(0,a.jsx)(s.h3,{id:"modify",children:"Modify"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Modify(Name As %String, ByRef Properties As %String, ByRef CPFFile As %String = "", Flags As %Integer = {$$$CPFSave+$$$CPFWrite+$$$CPFActivate}) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Modify Dataset section instance in CPF file. If the Server or Directory path is changed, it will be reflected on all Namespaces referring this DB."}),"\n",(0,a.jsxs)(s.p,{children:["Parameters:",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Name"})," - Name of the Dataset to modify.",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Properties (byref)"})," - List of the properties to modify in Properties(Name)=Value format. See the subclass for a list of valid properties. If a specific property is not passed in the properties array, the value is not modified.",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file to use, Default=current active CPF file.",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Flags"})," - Bit string of options to perform. For values, see the ",(0,a.jsx)(s.strong,{children:"Create"})," method, inherited from Config.CommonMultipleMethods."]}),"\n",(0,a.jsxs)(s.p,{children:["Return values:",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file the modification was made in."]}),"\n",(0,a.jsx)(s.h3,{id:"movetoactive",children:"MoveToActive"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod MoveToActive(Obj As %ObjectHandle = "", Flags As %Integer = 1) As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Move the CPF data into the active config global. This also check if any Database is added/removed/updated in CPF file since last shutdown. And those database will affect namespace mappings."}),"\n",(0,a.jsxs)(s.p,{children:["Parameters:",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Obj"})," - Handle to Object causing the move"]}),"\n",(0,a.jsx)(s.h3,{id:"rename",children:"Rename"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Rename(OldName As %String, NewName As %String, ByRef CPFFile As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Rename the database name in the CPF file."}),"\n",(0,a.jsxs)(s.p,{children:["Parameters:",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"OldName"})," - Name of the database to rename.",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"NewName (byref)"})," - New name of the database.",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file to use, Default=current active CPF file."]}),"\n",(0,a.jsxs)(s.p,{children:["Return values:",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"CPFFile (byref)"})," - Name of the CPF file the modification was made in."]}),"\n",(0,a.jsx)(s.h3,{id:"synonymdbs",children:"SynonymDBs"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SynonymDBs(Name As DBName, ByRef DBList As %String, CPFFile As %String = "", Flags As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Returns a list of database names whose Server/Directory properties are the same as the ones for a given database for the current configuration.",(0,a.jsx)(s.br,{}),"\nThis will return the passed database name as one of the matching ones."]}),"\n",(0,a.jsx)(s.h3,{id:"validateecpdbformat",children:"ValidateECPDBFormat"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ValidateECPDBFormat(MirrorConnection As %Integer, Directory As %String) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Check the format of remote database according to the ECP mirror connection."}),"\n",(0,a.jsx)(s.h3,{id:"onaddtosaveset",children:"%OnAddToSaveSet"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnAddToSaveSet(depth As %Integer = 3, insert As %Integer = 0, callcount As %Integer = 0) As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Called from %Save().",(0,a.jsx)(s.br,{}),"\nValidate the database info here, and possibly change it."]}),"\n",(0,a.jsx)(s.h3,{id:"ondeletecallback",children:"%OnDeleteCallBack"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %OnDeleteCallBack(Obj As %ObjectHandle) As %Status [ Internal ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Called from %OnDelete.",(0,a.jsx)(s.br,{}),"\nReturning an error here will keep the database from being deleted."]}),"\n",(0,a.jsx)(s.h3,{id:"onvalidateobject",children:"%OnValidateObject"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnValidateObject() As %Status [ Internal ]\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Called from %Save().",(0,a.jsx)(s.br,{}),"\nValidate that the database being created has all its parameters set correctly.",(0,a.jsx)(s.br,{}),"\nAny error returned here will abort the creation of the database."]}),"\n",(0,a.jsx)(s.h3,{id:"compactlocaldblistexecute",children:"CompactLocalDBListExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CompactLocalDBListExecute(ByRef qHandle As %Binary, Names As %String = "*", CPFFile As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Returns a list of Local Databases configured with compact information."}),"\n",(0,a.jsx)(s.h3,{id:"compactlocaldblistfetch",children:"CompactLocalDBListFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CompactLocalDBListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = CompactLocalDBListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"compactlocaldblistclose",children:"CompactLocalDBListClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CompactLocalDBListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = CompactLocalDBListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListExecute(ByRef qHandle As %Binary, Names As %String = "*", CPFFile As %String = "", Flags As %Integer = 0, Format As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"List Databases in a CPF file."}),"\n",(0,a.jsxs)(s.p,{children:["Parameters:",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Names"})," - Comma separated list of Database names",(0,a.jsx)(s.br,{}),'\n"*" - All records match',(0,a.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,a.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,a.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"CPFFile"})," - Name of the CPF file to use. A null string means use the active CPF file.",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Flags"})," - Type of databases to return  0  - All databases  1  - Local databases  2  - Remote databases ",(0,a.jsx)(s.strong,{children:"Format"}),(0,a.jsx)(s.br,{}),"\n0 - Standard report list format",(0,a.jsx)(s.br,{}),"\n1 - ^CONFIG global format",(0,a.jsx)(s.br,{}),"\n2 - CPF file format format",(0,a.jsx)(s.br,{}),"\nNote: This query may change in future versions"]}),"\n",(0,a.jsx)(s.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"listclose",children:"ListClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"listfilterexecute",children:"ListFilterExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListFilterExecute(ByRef qHandle As %Binary, Filter As %String = "", CPFFile As %String = "", Flags As %Integer = 0, Format As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.h3,{id:"listfilterfetch",children:"ListFilterFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFilterFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = LocalDatabaseListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"listfilterclose",children:"ListFilterClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFilterClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = LocalDatabaseListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"list1execute",children:"List1Execute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod List1Execute(ByRef %qHandle As %Binary, Names As %String = "*", CPFFile As %String = "", Flags As %Boolean = 0) As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"List Databases in a CPF file. Used internally by the List Query."}),"\n",(0,a.jsxs)(s.p,{children:["Parameters:",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Names"})," - Comma separated list of Database names",(0,a.jsx)(s.br,{}),'\n"*" - All records match',(0,a.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,a.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,a.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"CPFFile"})," - Name of the CPF file to use. A null string means use the active CPF file.",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.strong,{children:"Flags"})," - Type of databases to return  0  - All databases  1  - Local databases  2  - Remote databases Note: This query may change in future versions"]}),"\n",(0,a.jsx)(s.h3,{id:"list1flags",children:"List1Flags"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod List1Flags(Flags, Server) As %Boolean [ Internal, SqlProc ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"list1fetch",children:"List1Fetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod List1Fetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = List1Execute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"list1close",children:"List1Close"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod List1Close(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = List1Execute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"getdbmirrorsetname",children:"GetDBMirrorSetName"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetDBMirrorSetName(SFN As %String) As %String [ Internal ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"localdatabaselistexecute",children:"LocalDatabaseListExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod LocalDatabaseListExecute(ByRef qHandle As %Binary, Names As %String = "*", CPFFile As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Returns a list of Local Databases configured."}),"\n",(0,a.jsx)(s.h3,{id:"localdatabaselistfetch",children:"LocalDatabaseListFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LocalDatabaseListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = LocalDatabaseListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"localdatabaselistclose",children:"LocalDatabaseListClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LocalDatabaseListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = LocalDatabaseListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"localdatabaselistfilterexecute",children:"LocalDatabaseListFilterExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod LocalDatabaseListFilterExecute(ByRef qHandle As %Binary, Filter As %String = "", CPFFile As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.h3,{id:"localdatabaselistfilterfetch",children:"LocalDatabaseListFilterFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LocalDatabaseListFilterFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = LocalDatabaseListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"localdatabaselistfilterclose",children:"LocalDatabaseListFilterClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LocalDatabaseListFilterClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = LocalDatabaseListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"localdatabasecanmirrorlistexecute",children:"LocalDatabaseCanMirrorListExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod LocalDatabaseCanMirrorListExecute(ByRef qHandle As %Binary, Names As %String = "*", CPFFile As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Returns a list of Local Databases configured that can be added to the mirror.",(0,a.jsx)(s.br,{}),"\nThe results are the subset of databases in LocalDatabaseList that are mounted R/W, are journals, are not already mirrored, and are not a system database."]}),"\n",(0,a.jsx)(s.h3,{id:"localdatabasecanmirrorlistfetch",children:"LocalDatabaseCanMirrorListFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LocalDatabaseCanMirrorListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = LocalDatabaseCanMirrorListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"localdatabasecanmirrorlistclose",children:"LocalDatabaseCanMirrorListClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LocalDatabaseCanMirrorListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = LocalDatabaseCanMirrorListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"mirrordatabaselistexecute",children:"MirrorDatabaseListExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod MirrorDatabaseListExecute(ByRef qHandle As %Binary, Names As %String = "*", CPFFile As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Returns a list of the Local databases listed in the configuration file which are mirrored along with their current mirror status."}),"\n",(0,a.jsx)(s.h3,{id:"mirrordatabaselistfetch",children:"MirrorDatabaseListFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod MirrorDatabaseListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = MirrorDatabaseListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"mirrordatabaselistclose",children:"MirrorDatabaseListClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod MirrorDatabaseListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = MirrorDatabaseListExecute ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"onopen",children:"%OnOpen"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnOpen() As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"This callback method is invoked by the %Open method to provide notification that the object specified by oid is being opened."}),"\n",(0,a.jsx)(s.p,{children:"If this method returns an error then the object will not be opened."})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>i});var a=t(96540);const r={},n=a.createContext(r);function l(e){const s=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(n.Provider,{value:s},e.children)}}}]);