"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[22963],{35484:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>i,default:()=>a,frontMatter:()=>r,toc:()=>o});var t=n(74848),l=n(28453);const r={pagination_prev:null,pagination_next:null},i="%DeepSee.Shell",o=[{value:"Methods",id:"methods",level:2},{value:"%Go",id:"go",level:3},{value:"%ListMembers",id:"listmembers",level:3},{value:"%RunQueryFile",id:"runqueryfile",level:3}];function c(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"deepseeshell",children:"%DeepSee.Shell"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %DeepSee.Shell Extends %RegisteredObject [ System = 4 ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"This class implements a simple command line shell for executing queries against DeepSee cubes and viewing the results."}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"go",children:"%Go"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %Go(pAsync As %Boolean = 1, pCache As %Boolean = 1)\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Simple command line shell for testing queries.",(0,t.jsx)(s.br,{}),'\nThe shell will prompt for an MDX query, execute it and display its results to the console. Enter "q" and press Enter to exit the Shell.']}),"\n",(0,t.jsx)(s.h3,{id:"listmembers",children:"%ListMembers"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ListMembers(ByRef pTree)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Write out members of the cube's dimension list."}),"\n",(0,t.jsx)(s.h3,{id:"runqueryfile",children:"%RunQueryFile"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %RunQueryFile(pQueryFile As %String, pResultFile As %String = "", pShowStats As %Boolean = 1) As %Status\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Read a series of MDX queries from file pQueryFile, execute them and write the results to file pResultFile.",(0,t.jsx)(s.br,{}),'\nA query consists of all text up to a line containing the command "go".',(0,t.jsx)(s.br,{}),"\nIf pResultFile is not supplied, write results to the console.",(0,t.jsx)(s.br,{}),"\nIf pShowStats is false, do not write query statistics."]})]})}function a(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>o});var t=n(96540);const l={},r=t.createContext(l);function i(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);