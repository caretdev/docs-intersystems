"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[27907],{1762:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>r,default:()=>c,frontMatter:()=>l,toc:()=>a});var n=s(74848),i=s(28453);const l={pagination_prev:null,pagination_next:null},r="%Monitor.System.LineByLine",a=[{value:"Methods",id:"methods",level:2},{value:"Start",id:"start",level:3},{value:"GetMetrics",id:"getmetrics",level:3},{value:"GetRoutineCount",id:"getroutinecount",level:3},{value:"GetRoutineName",id:"getroutinename",level:3},{value:"Stop",id:"stop",level:3},{value:"AddRoutine",id:"addroutine",level:3},{value:"IsActive",id:"isactive",level:3},{value:"Pause",id:"pause",level:3},{value:"Resume",id:"resume",level:3},{value:"Clear",id:"clear",level:3},{value:"ResultExecute",id:"resultexecute",level:3},{value:"ResultFetch",id:"resultfetch",level:3},{value:"ResultClose",id:"resultclose",level:3},{value:"Print",id:"print",level:3}];function o(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"monitorsystemlinebyline",children:"%Monitor.System.LineByLine"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Monitor.System.LineByLine Extends %RegisteredObject [ System = 3 ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Line-by-line Monitor."}),"\n",(0,n.jsx)(t.p,{children:'A facility to allow monitoring of ObjectScript routines on a line-by-line basis. The user may select which routines to monitor and any of the standard performance metrics supported by the PERFMON utility, as well as "Time" (clock time spent in line) and "TotalTime" (total clock time including in-line calls to other subroutines). See the GetMetrics() method for a list of metric names.'}),"\n",(0,n.jsx)(t.p,{children:"WARNING ! Starting the line-by-line monitor will enable the collection of statistics for *every* line of code executed by the selected routines and processes. This can have a major impact on the performance of a system, and it is recommended that you do this only on a 'test' system."}),"\n",(0,n.jsx)(t.p,{children:"Before monitoring an SQL query, you must run that query at least once, in order to generate the code that will be monitored."}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"start",children:"Start"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod Start(Routine As %List = "", Metric As %List = "", Process As %List = "") As %Status\n'})}),"\n",(0,n.jsx)(t.p,{children:"Start a line-by-line monitor collection. Parameters are lists of Routines, Metric names, and Process IDs to be monitored."}),"\n",(0,n.jsx)(t.p,{children:'Routines may be "wildcarded" by using an asterisk as the final character of any routine name. A null list indicates AddRoutine has been used.'}),"\n",(0,n.jsx)(t.p,{children:'A null list of Metrics will use the default of "RtnLine, Time, TotalTime".'}),"\n",(0,n.jsx)(t.p,{children:"A null list of Process IDs will enable all processes."}),"\n",(0,n.jsx)(t.h3,{id:"getmetrics",children:"GetMetrics"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetMetrics(Select As %Integer(MINVAL=1,MAXVAL=3) = 1) As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:'Returns a list of metric names (delimited by ",").'}),"\n",(0,n.jsx)(t.p,{children:'The "Select" parameter is used to select either a list of metrics which are currently being monitored (default of Select=1) or a list of all available metric names (Select=2).'}),"\n",(0,n.jsx)(t.p,{children:"If Select=3, this method will print a list of all available metrics and a short description to the current device."}),"\n",(0,n.jsx)(t.h3,{id:"getroutinecount",children:"GetRoutineCount"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetRoutineCount() As %Integer\n"})}),"\n",(0,n.jsx)(t.p,{children:"Get a count of the routines being monitored."}),"\n",(0,n.jsx)(t.h3,{id:"getroutinename",children:"GetRoutineName"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetRoutineName(Number As %Integer) As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Used to fetch the names of routines being monitored. The internal list of routines is numbered from 1 to 'n', with 'n' being the count returned by the GetRoutineCount() method."}),"\n",(0,n.jsx)(t.h3,{id:"stop",children:"Stop"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Stop() As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Stop the line-by-line monitor collection"}),"\n",(0,n.jsx)(t.h3,{id:"addroutine",children:"AddRoutine"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod AddRoutine(Routine As %List, Clear As %Boolean = 0) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Add a list of routines to be monitored."}),"\n",(0,n.jsx)(t.p,{children:"Normally, a list of routines can be specified simply as a parameter of the Start() method. But if the user requires a list of routines which exceeds the maximum string length, then this method may be called repeatedly with routine lists, prior to calling Start()."}),"\n",(0,n.jsx)(t.p,{children:'The first time it is called, the user should make sure they specify the "Clear" parameter to initialize the list and ensure that any previous entries are cleared. Then when Start() is invoked, the "Routine" parameter should be null (Routine = ""). Routines may use the asterisk wildcard as in Start().'}),"\n",(0,n.jsx)(t.h3,{id:"isactive",children:"IsActive"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod IsActive(Routine As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(t.p,{children:"Tests whether a routine is currently being monitored and returns TRUE or FALSE."}),"\n",(0,n.jsx)(t.h3,{id:"pause",children:"Pause"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Pause() As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Pause the collection. Current results will still be available."}),"\n",(0,n.jsx)(t.h3,{id:"resume",children:"Resume"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Resume() As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Resume collection. Results continue to accumulate."}),"\n",(0,n.jsx)(t.h3,{id:"clear",children:"Clear"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Clear() As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Clear collected results. Collection continues and results start to accumulate again."}),"\n",(0,n.jsx)(t.h3,{id:"resultexecute",children:"ResultExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ResultExecute(ByRef qHandle As %Binary, Routine As %String = "*") As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Results of line-by-line monitoring for each routine. Each row of the ResultSet contains a list of metric counts for a line of the routine. Use the GetMetrics() method to retrieve a list of currently monitored metric names."}),"\n",(0,n.jsxs)(t.p,{children:['The following example shows how to retrieve the current results for a routine named "Test": ',(0,n.jsx)(t.code,{children:'s metrics=##class(%Monitor.System.LineByLine).GetMetrics(),cnt=$l(metrics,",") s rset=##class(%ResultSet).%New("%Monitor.System.LineByLine:Result") d rset.Execute("Test") w "LineByLine" f i=1:1:cnt w ?(12*i),$p(metrics,",",i) f l=1:1 s more=rset.Next() q:\'more d . s x=rset.GetData(1) . w !,l,"." f i=1:1:cnt w ?(12*i),$li(x,i) k rset q'})]}),"\n",(0,n.jsx)(t.h3,{id:"resultfetch",children:"ResultFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ResultFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ResultExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"resultclose",children:"ResultClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ResultClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ResultExecute ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"print",children:"Print"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Print(Routine As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Print test results"})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>a});var n=s(96540);const i={},l=n.createContext(i);function r(e){const t=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);