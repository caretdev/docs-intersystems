"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[89959],{4491:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>a,default:()=>o,frontMatter:()=>r,toc:()=>l});var s=n(74848),i=n(28453);const r={pagination_prev:null,pagination_next:null},a="%iKnow.Queries.SentenceAPI",l=[{value:"Parameters",id:"parameters",level:2},{value:"GetPartsRT",id:"getpartsrt",level:3},{value:"GetBySourceRT",id:"getbysourcert",level:3},{value:"GetByEntitiesRT",id:"getbyentitiesrt",level:3},{value:"GetByEntityIdsRT",id:"getbyentityidsrt",level:3},{value:"GetByCrcsRT",id:"getbycrcsrt",level:3},{value:"GetByCrcIdsRT",id:"getbycrcidsrt",level:3},{value:"GetByCrcMaskRT",id:"getbycrcmaskrt",level:3},{value:"GetByPathIdsRT",id:"getbypathidsrt",level:3},{value:"GetNewBySourceRT",id:"getnewbysourcert",level:3},{value:"GetHighlightedEXP",id:"gethighlightedexp",level:3},{value:"GetAttributesRT",id:"getattributesrt",level:3},{value:"Methods",id:"methods",level:2},{value:"GetValue",id:"getvalue",level:3},{value:"GetSourceId",id:"getsourceid",level:3},{value:"GetPosition",id:"getposition",level:3},{value:"GetPartLiteral",id:"getpartliteral",level:3},{value:"GetLanguage",id:"getlanguage",level:3},{value:"GetParts",id:"getparts",level:3},{value:"GetBySource",id:"getbysource",level:3},{value:"GetCountByDomain",id:"getcountbydomain",level:3},{value:"GetCountBySource",id:"getcountbysource",level:3},{value:"GetByEntities",id:"getbyentities",level:3},{value:"GetByEntityIds",id:"getbyentityids",level:3},{value:"GetByEntitiesInternal",id:"getbyentitiesinternal",level:3},{value:"GetCountByEntities",id:"getcountbyentities",level:3},{value:"GetCountByEntityIds",id:"getcountbyentityids",level:3},{value:"GetCountByEntitiesInternal",id:"getcountbyentitiesinternal",level:3},{value:"GetByCrcs",id:"getbycrcs",level:3},{value:"GetByCrcIds",id:"getbycrcids",level:3},{value:"GetByCrcMask",id:"getbycrcmask",level:3},{value:"GetByCrcsInternal",id:"getbycrcsinternal",level:3},{value:"GetCountByCrcs",id:"getcountbycrcs",level:3},{value:"GetCountByCrcIds",id:"getcountbycrcids",level:3},{value:"GetCountByCrcMask",id:"getcountbycrcmask",level:3},{value:"GetCountByCrcsInternal",id:"getcountbycrcsinternal",level:3},{value:"GetByPathIds",id:"getbypathids",level:3},{value:"GetByPathsInternal",id:"getbypathsinternal",level:3},{value:"GetCountByPathIds",id:"getcountbypathids",level:3},{value:"GetCountByPathsInternal",id:"getcountbypathsinternal",level:3},{value:"GetNewBySource",id:"getnewbysource",level:3},{value:"GetHighlighted",id:"gethighlighted",level:3},{value:"Highlighting",id:"highlighting",level:2},{value:"Markup options",id:"markup-options",level:3},{value:"GetAttributes",id:"getattributes",level:3}];function c(e){const t={a:"a",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"iknowqueriessentenceapi",children:"%iKnow.Queries.SentenceAPI"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %iKnow.Queries.SentenceAPI Extends %iKnow.Queries.AbstractAPI [ Deprecated, System = 4 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The InterSystems IRIS NLP iKnow technology is now deprecated. Please see the ",(0,s.jsx)(t.a,{href:"https://docs.intersystems.com/irislatest/csp/docbook/DocBook.UI.Page.cls?KEY=GIKNOW",children:"product documentation"})," for more detail."]}),"\n",(0,s.jsx)(t.p,{children:"Main Query API class to retrieve sentence information."}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(t.h3,{id:"getpartsrt",children:"GetPartsRT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetPartsRT = "entOccId:%Integer,entUniId:%Integer,literal:%String,role:%Integer,stemUniId:%Integer";\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getbysourcert",children:"GetBySourceRT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetBySourceRT = "sentId:%Integer,sentenceValue:%String,sentenceIsTruncated:%Boolean";\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getbyentitiesrt",children:"GetByEntitiesRT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetByEntitiesRT = "srcId:%Integer,externalId:%String,sentId:%Integer,sentenceValue:%String";\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getbyentityidsrt",children:"GetByEntityIdsRT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetByEntityIdsRT = "srcId:%Integer,externalId:%String,sentId:%Integer,sentenceValue:%String";\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getbycrcsrt",children:"GetByCrcsRT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetByCrcsRT = "srcId:%Integer,externalId:%String,sentId:%Integer,sentenceValue:%String";\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getbycrcidsrt",children:"GetByCrcIdsRT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetByCrcIdsRT = "srcId:%Integer,externalId:%String,sentId:%Integer,sentenceValue:%String";\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getbycrcmaskrt",children:"GetByCrcMaskRT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetByCrcMaskRT = "srcId:%Integer,externalId:%String,sentId:%Integer,sentenceValue:%String";\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getbypathidsrt",children:"GetByPathIdsRT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetByPathIdsRT = "srcId:%Integer,externalId:%String,sentId:%Integer,sentenceValue:%String";\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getnewbysourcert",children:"GetNewBySourceRT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetNewBySourceRT = "sentId:%Integer,sentenceValue:%String,score:%Numeric";\n'})}),"\n",(0,s.jsx)(t.h3,{id:"gethighlightedexp",children:"GetHighlightedEXP"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter GetHighlightedEXP [ Internal ] = 0;\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getattributesrt",children:"GetAttributesRT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter GetAttributesRT = "attTypeId:%Integer,attType:%String,start:%Integer,span:%Integer,wordPositions:%String,properties:%String,level:%Integer";\n'})}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"getvalue",children:"GetValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetValue(domainid As %Integer, sentenceid As %Integer, Output fullSentence As %Boolean = 1, vSrcId As %Integer = 0) As %String(MAXLEN=32767)\n"})}),"\n",(0,s.jsx)(t.p,{children:"This method rebuilds a sentence based on the literals and entities it is composed of."}),"\n",(0,s.jsxs)(t.p,{children:["The string returned is the first part, up to the maximum string length, whereas the output parameter ",(0,s.jsx)(t.em,{children:"fullSentence"})," is an array containing all the parts in the right order, containing a %Boolean value at the top level indicating whether the returned string is the full sentence (1) or (if 0) the user should have to look into this array to learn the full sentence."]}),"\n",(0,s.jsx)(t.p,{children:"If a Virtual Source ID is specified, the sentence ID is treated as a virtual one, in the context of the supplied vSrcId."}),"\n",(0,s.jsx)(t.h3,{id:"getsourceid",children:"GetSourceId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetSourceId(domainId As %Integer, sentenceId As %Integer) As %Integer\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the source ID in which the supplied sentence ID occurs"}),"\n",(0,s.jsx)(t.h3,{id:"getposition",children:"GetPosition"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetPosition(domainId As %Integer, sentenceId As %Integer, vSrcId As %Integer = 0) As %Integer\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the position within the source this sentence occurs at (1-based)."}),"\n",(0,s.jsx)(t.h3,{id:"getpartliteral",children:"GetPartLiteral"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetPartLiteral(domainId As %Integer, sentenceId As %Integer, position As %Integer, vSrcId As %Integer = 0) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the literal of the entity or nonrelevant at the specified position."}),"\n",(0,s.jsx)(t.h3,{id:"getlanguage",children:"GetLanguage"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetLanguage(domainid As %Integer, sentenceid As %Integer, Output confidence As %Numeric = "", vSrcId As %Integer = 0) As %String\n'})}),"\n",(0,s.jsx)(t.p,{children:"Retrieves the language of the given sentence, as derived by the Automatic Language Identification algorithm or, if ALI was disabled, the language specified when indexing this sentence."}),"\n",(0,s.jsx)(t.p,{children:"The confidence level is returned as well through an output parameter. If the confidence level is 0, this means ALI was not used and the language was defined by the user loading the source."}),"\n",(0,s.jsx)(t.p,{children:"If a Virtual Source ID is specified, the sentence ID is treated as a virtual one, in the context of the supplied vSrcId."}),"\n",(0,s.jsx)(t.h3,{id:"getparts",children:"GetParts"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetParts(ByRef result, domainid As %Integer, sentenceid As %Integer, includeCRCMarkers As %Boolean = 0, includePathMarkers As %Boolean = 0, vSrcId As %Integer = 0) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the elements (concepts, relations and nonrelevants) that make up the sentence, optional including markers for the beginning and end of any CRCs or Paths in the sentence. This information can be used to display the sentence value (see also GetValue) and/or highlight specific elements of interest."}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"Output structure:"}),"\n",(0,s.jsx)(t.p,{children:"result(pos) = $lb(entOccId, entUniId, entity, role)"}),"\n",(0,s.jsx)(t.p,{children:"when includeCRCMarkers = 1, adds"}),"\n",(0,s.jsx)(t.p,{children:"result(pos, [CRCHEAD | CRCRELATION | CRCTAIL]) = $lb(crcOccId, crcUniId)"}),"\n",(0,s.jsx)(t.p,{children:"when includePathMarkers = 1, adds"}),"\n",(0,s.jsx)(t.p,{children:"result(pos, [PATHBEGIN | PATHEND]) = $lb(pathId)"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Note: the subscript levels for CRC and Path markers are not available in the QAPI and WSAPI versions of this query."}),"\n",(0,s.jsx)(t.p,{children:"If a Virtual Source ID is specified, the sentence ID is treated as a virtual one, in the context of the supplied vSrcId."}),"\n",(0,s.jsx)(t.h3,{id:"getbysource",children:"GetBySource"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetBySource(ByRef result, domainid As %Integer, sourceid As %Integer, page As %Integer = 1, pagesize As %Integer = 10) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the sentences for the given source. A negative source ID is interpreted as a Virtual Source."}),"\n",(0,s.jsx)(t.h3,{id:"getcountbydomain",children:"GetCountByDomain"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetCountByDomain(domainid As %Integer, filter As %iKnow.Filters.Filter = "", Output sc As %Status = {$$$OK}) As %Integer\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Returns the total number of sentences for a given domain, optionally filtered to those sources satisfying a %iKnow.Filters.Filter object passed in through ",(0,s.jsx)(t.em,{children:"filter"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"getcountbysource",children:"GetCountBySource"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetCountBySource(domainid As %Integer, sourceidlist As %List, Output sc As %Status = {$$$OK}) As %Integer\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the total number of sentences for the given sources. Negative Source IDs are interpreted as referring to Virtual Sources."}),"\n",(0,s.jsx)(t.h3,{id:"getbyentities",children:"GetByEntities"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetByEntities(ByRef result, domainid As %Integer, entitylist As %List, filter As %iKnow.Filters.Filter = "", page As %Integer = 1, pagesize As %Integer = 10, setop As %Integer = {$$$UNION}, pActualFormOnly As %Boolean = 0) As %Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This method will retrieve all sentences containing any (if ",(0,s.jsx)(t.em,{children:"setop"})," = $$$UNION) or all (if ",(0,s.jsx)(t.em,{children:"setop"})," = $$$INTERSECT) of the entities supplied through ",(0,s.jsx)(t.em,{children:"entitylist"}),", optionally limited to all sentences in records satisfying filter. For querying Virtual Sources, set filter to a single, negative integer."]}),"\n",(0,s.jsx)(t.p,{children:"If stemming is enabled for this domain through $$$IKPSTEMMING, sentences containing any actual form of the entities in entityList will be returned. Use pActualFormOnly=1 to retrieve only those sentences containing the actual forms in entitylist. This argument is ignored if stemming is not enabled."}),"\n",(0,s.jsx)(t.h3,{id:"getbyentityids",children:"GetByEntityIds"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetByEntityIds(ByRef result, domainid As %Integer, entityidlist As %List, filter As %iKnow.Filters.Filter = "", page As %Integer = 1, pagesize As %Integer = 10, setop As %Integer = {$$$UNION}, pActualFormOnly As %Boolean = 0) As %Status\n'})}),"\n",(0,s.jsx)(t.p,{children:"Retrieves all sentences containing the given entity IDs., optionally limited to all sentences in records satisfying filter. For querying Virtual Sources, set filter to a single, negative integer. In this case, entityidlist is expected to contain virtual Entity IDs."}),"\n",(0,s.jsx)(t.p,{children:"See also GetByEntities for a description of the parameters."}),"\n",(0,s.jsx)(t.h3,{id:"getbyentitiesinternal",children:"GetByEntitiesInternal"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetByEntitiesInternal(ByRef result, domainid As %Integer, ByRef entitylist, filter As %iKnow.Filters.Filter, page As %Integer, pagesize As %Integer, setop As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getcountbyentities",children:"GetCountByEntities"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetCountByEntities(domainid As %Integer, entitylist As %List, filter As %iKnow.Filters.Filter = "", setop As %Integer = {$$$UNION}, Output sc As %Status = {$$$OK}, pActualFormOnly As %Boolean = 0) As %Integer\n'})}),"\n",(0,s.jsx)(t.p,{children:"Retrieves the number of sentences containing the given entities, optionally limited to all sentences in records satisfying filter. For querying Virtual Sources, set filter to a single, negative integer."}),"\n",(0,s.jsx)(t.p,{children:"See also GetByEntities for a description of the parameters."}),"\n",(0,s.jsx)(t.h3,{id:"getcountbyentityids",children:"GetCountByEntityIds"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetCountByEntityIds(domainid As %Integer, entityidlist As %List, filter As %iKnow.Filters.Filter = "", setop As %Integer = {$$$UNION}, Output sc As %Status = {$$$OK}, pActualFormOnly As %Boolean = 0) As %Integer\n'})}),"\n",(0,s.jsx)(t.p,{children:"Retrieves the nubmer of sentences containing the given entity ids. For querying Virtual Sources, set filter to a single, negative integer. In this case, entityidlist is expected to contain virtual Entity IDs."}),"\n",(0,s.jsx)(t.p,{children:"See also GetByEntities for a description of the parameters."}),"\n",(0,s.jsx)(t.p,{children:"If stemming is enabled for this domain through $$$IKPSTEMMING, sources containing any actual form of the entities in entityidlist will be returned. Use pActualFormOnly=1 to retrieve only those sources containing the actual forms in entityidlist. This argument is ignored if stemming is not enabled."}),"\n",(0,s.jsx)(t.h3,{id:"getcountbyentitiesinternal",children:"GetCountByEntitiesInternal"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetCountByEntitiesInternal(domainid As %Integer, ByRef entitylist, filter As %iKnow.Filters.Filter, setop As %Integer, Output sc As %Status = {$$$OK}) As %Integer [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getbycrcs",children:"GetByCrcs"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetByCrcs(ByRef result, domainid As %Integer, crclist As %List, filter As %iKnow.Filters.Filter = "", page As %Integer = 1, pagesize As %Integer = 10, setop As %Integer = {$$$UNION}) As %Status\n'})}),"\n",(0,s.jsx)(t.p,{children:"Retrieves all sentences containing the given CRCs, optionally limited to all sentences in records satisfying filter. For querying Virtual Sources, set filter to a single, negative integer."}),"\n",(0,s.jsx)(t.p,{children:"See also GetByEntities for a description of the parameters."}),"\n",(0,s.jsx)(t.h3,{id:"getbycrcids",children:"GetByCrcIds"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetByCrcIds(ByRef result, domainid As %Integer, crcidlist As %List, filter As %iKnow.Filters.Filter = "", page As %Integer = 1, pagesize As %Integer = 10, setop As %Integer = {$$$UNION}) As %Status\n'})}),"\n",(0,s.jsx)(t.p,{children:"Retrieves all sentences containing the given CRC ids, optionally limited to all sentences in records satisfying filter. For querying Virtual Sources, set filter to a single, negative integer. In this case, crcidlist is expected to contain virtual Entity IDs."}),"\n",(0,s.jsx)(t.p,{children:"See also GetByEntities for a description of the parameters."}),"\n",(0,s.jsx)(t.h3,{id:"getbycrcmask",children:"GetByCrcMask"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetByCrcMask(ByRef result, domainid As %Integer, head As %String = {$$$WILDCARD}, relation As %String = {$$$WILDCARD}, tail As %String = {$$$WILDCARD}, filter As %iKnow.Filters.Filter = "", page As %Integer = 1, pagesize As %Integer = 10, setop As %Integer = {$$$UNION}, pActualFormOnly As %Boolean = 0) As %Status\n'})}),"\n",(0,s.jsx)(t.p,{children:"Retrieves all sentences containing a CRC satisfying the given CRC Mask, optionally limited to all sentences in records satisfying filter. For querying Virtual Sources, set filter to a single, negative integer."}),"\n",(0,s.jsx)(t.p,{children:"See also GetByEntities for a description of the parameters."}),"\n",(0,s.jsx)(t.h3,{id:"getbycrcsinternal",children:"GetByCrcsInternal"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetByCrcsInternal(ByRef result, domainid As %Integer, crcIdsGlob As %String, filter As %iKnow.Filters.Filter = "", page As %Integer, pagesize As %Integer, setop As %Integer) As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getcountbycrcs",children:"GetCountByCrcs"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetCountByCrcs(domainid As %Integer, crclist As %List, filter As %iKnow.Filters.Filter = "", setop As %Integer = {$$$UNION}, Output sc As %Status = {$$$OK}) As %Integer\n'})}),"\n",(0,s.jsx)(t.p,{children:"Retrieves the number of sentences containing the given CRCs, optionally limited to all sentences in records satisfying filter. For querying Virtual Sources, set filter to a single, negative integer."}),"\n",(0,s.jsx)(t.p,{children:"See also GetByEntities for a description of the parameters."}),"\n",(0,s.jsx)(t.h3,{id:"getcountbycrcids",children:"GetCountByCrcIds"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetCountByCrcIds(domainid As %Integer, crcidlist As %List, filter As %iKnow.Filters.Filter = "", setop As %Integer = {$$$UNION}, Output sc As %Status = {$$$OK}) As %Integer\n'})}),"\n",(0,s.jsx)(t.p,{children:"Retrieves the number of sentences containing the given CRC ids, optionally limited to all sentences in records satisfying filter. For querying Virtual Sources, set filter to a single, negative integer. In this case, crcidlist is expected to contain virtual Entity IDs."}),"\n",(0,s.jsx)(t.p,{children:"See also GetByEntities for a description of the parameters."}),"\n",(0,s.jsx)(t.h3,{id:"getcountbycrcmask",children:"GetCountByCrcMask"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetCountByCrcMask(domainid As %Integer, head As %String = {$$$WILDCARD}, relation As %String = {$$$WILDCARD}, tail As %String = {$$$WILDCARD}, filter As %iKnow.Filters.Filter = "", setop As %Integer = {$$$UNION}, Output sc As %Status = {$$$OK}, pActualFormOnly As %Boolean = 0) As %Integer\n'})}),"\n",(0,s.jsx)(t.p,{children:"Retrieves the number of sentences containing a CRC satisfying the given CRC Mask, optionally limited to all sentences in records satisfying filter. For querying Virtual Sources, set filter to a single, negative integer."}),"\n",(0,s.jsx)(t.p,{children:"See also GetByEntities for a description of the parameters."}),"\n",(0,s.jsx)(t.h3,{id:"getcountbycrcsinternal",children:"GetCountByCrcsInternal"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetCountByCrcsInternal(domainid As %Integer, crcIdsGlob As %String, filter As %iKnow.Filters.Filter = "", setop As %Integer, Output sc As %Status = {$$$OK}) As %Integer [ Internal ]\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getbypathids",children:"GetByPathIds"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetByPathIds(ByRef result, domainid As %Integer, pathidlist As %List, sourceidlist As %List, page As %Integer = 1, pagesize As %Integer = 10) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Retrieves all sentences containing the given path IDs."}),"\n",(0,s.jsx)(t.p,{children:"See also GetByEntities for a description of the parameters."}),"\n",(0,s.jsx)(t.h3,{id:"getbypathsinternal",children:"GetByPathsInternal"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetByPathsInternal(ByRef result, domainid As %Integer, ByRef pathlist, sourceidlist As %List, page As %Integer, pagesize As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getcountbypathids",children:"GetCountByPathIds"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetCountByPathIds(domainid As %Integer, pathidlist As %List, sourceidlist As %List, Output sc As %Status = {$$$OK}) As %Integer\n"})}),"\n",(0,s.jsx)(t.p,{children:"Retrieves the number of sentences containing the given path IDs."}),"\n",(0,s.jsx)(t.p,{children:"See also GetByEntities for a description of the parameters."}),"\n",(0,s.jsx)(t.h3,{id:"getcountbypathsinternal",children:"GetCountByPathsInternal"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetCountByPathsInternal(domainid As %Integer, ByRef pathlist, sourceidlist As %List, Output sc As %Status = {$$$OK}) As %Integer [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getnewbysource",children:"GetNewBySource"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetNewBySource(ByRef result, domainid As %Integer, sourceid As %Integer, length As %Integer = 5, filter As %iKnow.Filters.Filter = "", algorithm As %String = {$$$NEWENTSIMPLE}, algorithmParams As %List = "", newEntitiesWindow As %Integer = 100, skipListIds As %List = "") As %Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Retrieves the sentences with the most significant concepts compared to the rest of the domain (or optionally a subset thereof as filtered through ",(0,s.jsx)(t.em,{children:"filter"}),"). This array of sentences is based on results of the GetNewBySource query in %iKnow.Queries.EntityAPI, using the supplied algorithm and parameter values. The scores of the first [",(0,s.jsx)(t.em,{children:"newEntitiesWindow"}),"] concepts are aggregated across sentences to produce the result of this query."]}),"\n",(0,s.jsx)(t.p,{children:"Please refer to the documentation of the GetNewBySource query in %iKnow.Queries.EntityAPI for more details on the parameters and available algorithms."}),"\n",(0,s.jsx)(t.h3,{id:"gethighlighted",children:"GetHighlighted"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetHighlighted(pDomainId As %Integer, pSentenceId As %Integer, ByRef pHighlight = "", vSrcId As %Integer = 0, Output pFullSentence = "", Output pSC As %Status = {$$$OK}, pEscapeHTML As %Boolean = 1) As %String\n'})}),"\n",(0,s.jsx)(t.h2,{id:"highlighting",children:"Highlighting"}),"\n",(0,s.jsxs)(t.p,{children:["This is a flexible method to highlight specific elements within a sentence using user-supplied markup passed in through the pHighlight argument (by reference) in a multidimensional form: ",(0,s.jsx)(t.code,{children:'set pHighlight("FLAG") = "markup" set pHighlight("FLAG", id) = "markup"'})]}),"\n",(0,s.jsxs)(t.p,{children:['The first option will highlight any element of the type identified by "FLAG", the second option allows refining this to a particular instance, identified by ',(0,s.jsx)(t.em,{children:"id"}),', overriding any eventual definitions at the generic "FLAG" level.']}),"\n",(0,s.jsx)(t.p,{children:"Note: unless explicitly stated otherwise, all highlighting is based on the entity level."}),"\n",(0,s.jsx)(t.h3,{id:"markup-options",children:"Markup options"}),"\n",(0,s.jsx)(t.p,{children:"Any single (opening) HTML tag can be specified on the value side of pHighlight and will automatically be wrapped around every entity. The closing tag will be automatically derived from the opening tag supplied through pHighlight"}),"\n",(0,s.jsxs)(t.p,{children:['HTML markup supplied this way supports a basic means of annotating with metadata about the particular thing being highlighted. Any occurrences of "$$$ID" in the HTML tag will be substituted with the relevant identifier of what\'s being highlighted, such as entity IDs for entity markup, CRC IDs for CRC markup or match IDs for dictionary matching markup. Most entity-level markup also supports the $$$LITERAL tag to replace with the original text string for that entity.',(0,s.jsx)(t.br,{}),"\nFor example, the following highlight spec would add links to an info page that takes entity IDs as a URL parameter:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-set",metastring:'tHighlight("ROLE", "concept") = "" ',children:'\nNote that in some cases, such as dictionary matches, ther may be multiple IDs associated with the same highlighted entity. These will be provided as a comma-separated list replacing the $$$ID placeholder.\n\nAs an alternative to HTML markup, you can also supply two-character strings that will be used to wrap entities that need highlighting. For example, this array will put square brackets around all concepts and curly braces around relationships:\n\n` set tHighlight("ROLE", "concept") = "[]" set tHighlight("ROLE", "relation") = "{}"` \n\n### Highlighting specific entities, CRCs and paths\n\nTo highlight all occurrences of a particular entity, stem, CRC, CC or path, use the corresponding flag. For entities, you can also supply the string value (except when the string value is an integer number itself). ````  set tHighlight("ENTITY", 123) = "**" set tHighlight("ENTITY", "snow storm") = "" set tHighlight("STEM", 234) = "" set tHighlight("CRC", 345) = "" set tHighlight("PATH", 456) = ""** \n\n**### Highlighting based on role**\n\n**The "ROLE" flag can be used to mark concepts, relations and non-relevants, either by using the corresponding integer code (i.e. $$$ENTTYPECONCEPT) or a simple string value. Note that in some cases, some words inside a relationship entity may be marked as non-relevant. These will be highlighted at the word level (only if there is a specific highlighting spec for non-relevants) and are an exception to the general rule that all highlighting happens at the entity level.**\n\n**```  set tHighlight("ROLE", "concept") = "" set tHighlight("ROLE", "relation") = "" set tHighlight("ROLE", "non-relevant") = "()" set tString = "The newspaper published the article and it sold very well." write $system.iKnow.Highlight(tString, .tHighlight)** \n\n**The above example would print:** \n\n**> (The) <c>newspaper</c> <r>published</r> (the) <c>article</c> <r>and (it) sold very well</r>.**\n\n**### Highlighting based on attributes**\n\n**Attributes can be highlighted at two levels. Using the regular "ATTRIBUTE" flag will highlight all entities affected by the attribute specified by attribute ID (such as $$$IKATTNEGATION). However, some attributes support more fine-grained annotation at the word level, marking those words that actually caused the attribute to apply to an entity or part of a path. These can be highlighted individually through the "ATTRIBUTEWORDS" flag and are an exception to the general rule that highlighting happens per-entity.**\n\n**``  set tHighlight("ATTRIBUTE", $$$IKATTNEGATION) = "" set tHighlight("ATTRIBUTEWORDS", $$$IKATTNEGATION) = "" set tString = "The landlord doesn\'t accept late payments, but makes exceptions for students." write $system.iKnow.Highlight(tString, .tHighlight)** \n\n**The above example would display as:** \n\n**> The landlord doesn\'t accept late payments, but makes exceptions for students.**\n\n**For some attributes, such as certain expressions of measurements, the engine is able to extract additional data elements which are exposed as "measurement properties". You can include these properties in your highlighted text by including the $$$PROPERTIES placeholder. Note that these are typically identified for the word level.**\n\n**### Highlighting based on matching results**\n\n**Dictionary matches can be highlighted using the "MATCH" flag, optionally restricted to a particular dictionary ID. To refine to a particular dictionary item, use the "MATCHITEM" flag. Highlighting can further be refined to distinguish based on full or partial matches using the "FULL" and "PARTIAL" flags as an additional subscript. Please note this is a refinement and the parent node (ID-specific or generic) should contain a value:**\n\n**Additional information about the matches themselves is available through the metadata rewrite mechanism: $$$TERM, $$$TERMID, $$$ITEM, $$$ITEMID, $$$ITEMURI, $$$DICT, $$$DICTID. Note that the regular $$$ID markers will be replaced with dictionary match IDs, not the IDs of the Dictionary or Dictionary Items.**\n\n**` set tHighlight("MATCH") = "` `` ```** ````\n\n" set tHighlight("MATCH", "FULL") = "" \n\n### Highlighting based on character position\n\nIf external tooling provided annotations based on character positions, use the "CHARS" flag to highlight those annotations by providing the start and end positions as second and third subscripts of the highlight spec array. This will highlight the entities "covering" these start and end positions, starting with the entity which includes the character at the designated start position and ending with the entity including the character at the designated end position.\n\n` set tHighlight("CHARS", 13, 21) = "`" set tHighlight("CHARS", 71, 75) = "" set tString = "The instant Project X party was not well-received by the cummunity of Haren in the Netherlands." write $system.iKnow.Highlight(tString, .tHighlight) \n\nThe above example will annotate the entire entities "instant Project X party" and "Haren".\n\nNote that the iKnow indexing engine in certain cases may modify input text while processing text and therefore, character position based informations from external sources that based themselves on the original text, may no longer point to the expected positions. The two most important cases where this can happen is when User Dictionaries are used to rewrite the input explicitly or when duplicate whitespace is normalized by the engine. To work around this issue, present the output of the iKnow engine (as retrieved through GetValue to these external tools to be sure the same normalizations are applied.\n\nIn cases where the externally provided character positions span more than a single sentence, you can pass an offset as the data element of the main "CHARS" node to mark the character position that corresponds the start of this sentence. This should be easier than recalculating all character positions and allows you to reuse the entire array for successive calls to GetHighlighted. \n\n### Style precedence\n\nFor the purpose of HTML styling precedence, this is the order in which tags are wrapped around entities, from innermost to outermost: \n1. ATTRIBUTEWORDS (wrapped around individual words)\n2. ATTRIBUTE - ID-specific (attribute type ID)\n3. ATTRIBUTE - generic\n4. ENTITY - ID-specific\n5. STEM - ID-specific\n6. CRC - ID-specific\n7. CC - ID-specific\n8. MATCHITEM - ID-specific (dictionary item ID)\n9. MATCH - ID-specific (dictionary ID)\n10. MATCHITEM - generic\n11. MATCH - generic\n12. PATH - ID-specific\n13. ROLE - ID-specific (role)\n14. CHARS\n\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getattributes",children:"GetAttributes"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetAttributes(ByRef pResult, pDomainId As %Integer, pSentId As %Integer, vSrcId As %Integer = 0, pIncludePathAttributes As %Boolean = 0) As %Status\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Returns all attributes for a given sentence. By default, only entity-level attributes are returned, with the ",(0,s.jsx)(t.em,{children:"wordPositions"})," result column referring which words within the affected entities are actually attributed. Using pIncludePathAttributes, also path-level attributes (such as implied negation) can be returned, but these will have no values for the ",(0,s.jsx)(t.em,{children:"wordPositions"})," column. Also note that the ",(0,s.jsx)(t.em,{children:"start"})," and ",(0,s.jsx)(t.em,{children:"span"})," columns for path-level results will refer to positions within those paths and not entity positions within the sentence. See also GetAttributes in %iKnow.Queries.PathAPI and GetOccurrenceAttributes in %iKnow.Queries.EntityAPI."]}),"\n",(0,s.jsx)(t.p,{children:"Any named attribute properties are also included through sub-nodes (not available through SQL or SOAP):"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["pResult(",(0,s.jsx)(t.em,{children:"rowNumber"}),", ",(0,s.jsx)(t.em,{children:"propertyName"}),") = ",(0,s.jsx)(t.em,{children:"propertyValue"})]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The returned wordPositions apply to the entities starting from start up to offset and only extend to the last attributed word position (there might be more words within the entity)."})]})}function o(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var s=n(96540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);