"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[44287],{13284:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>c,frontMatter:()=>a,toc:()=>i});var s=t(74848),r=t(28453);const a={pagination_prev:null,pagination_next:null},o="%ZEN.Template.AddInWizard.SOAPWizardOutput",i=[{value:"Parameters",id:"parameters",level:2},{value:"DOMAIN",id:"domain",level:3},{value:"Methods",id:"methods",level:2},{value:"OnPage",id:"onpage",level:3},{value:"OnPreHTTP",id:"onprehttp",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"zentemplateaddinwizardsoapwizardoutput",children:"%ZEN.Template.AddInWizard.SOAPWizardOutput"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Class %ZEN.Template.AddInWizard.SOAPWizardOutput Extends %ZEN.Template.cspTemplate [ Deprecated, System = 4 ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"This pages shows the output of SOAP Wizard."}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(n.h3,{id:"domain",children:"DOMAIN"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Parameter DOMAIN = "%TemplateMessages";\n'})}),"\n",(0,s.jsx)(n.p,{children:"Set this to the correct domain."}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"onpage",children:"OnPage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod OnPage() As %Status [ ServerOnly = 1 ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Event handler for ",(0,s.jsx)(n.strong,{children:"PAGE"})," event: this is invoked in order to generate the content of a csp page."]}),"\n",(0,s.jsx)(n.h3,{id:"onprehttp",children:"OnPreHTTP"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod OnPreHTTP() As %Boolean [ ServerOnly = 1 ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Event handler for ",(0,s.jsx)(n.strong,{children:"PreHTTP"})," event: this is invoked before the HTTP headers for a CSP page have been sent. All changes to the %CSP.Response class, such as adding cookies, HTTP headers, setting the content type etc. must be made from within the OnPreHTTP() method. Also changes to the state of the CSP application such as changing %session.EndSession or %session.AppTimeout must be made within the OnPreHTTP() method. It is prefered that changes to %session.Preserve are also made in the OnPreHTTP() method as this is more efficient, although it is supported in any section of the page. Return ",(0,s.jsx)(n.strong,{children:"0"})," to prevent OnPage from being called."]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(96540);const r={},a=s.createContext(r);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);