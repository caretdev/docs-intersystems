"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[46565],{31630:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>t,default:()=>o,frontMatter:()=>i,toc:()=>c});var l=n(74848),r=n(28453);const i={pagination_prev:null,pagination_next:null},t="%iKnow.Source.Global.Lister",c=[{value:"Methods",id:"methods",level:2},{value:"ExpandList",id:"expandlist",level:3},{value:"GetAlias",id:"getalias",level:3},{value:"SplitFullRef",id:"splitfullref",level:3},{value:"BuildFullRef",id:"buildfullref",level:3},{value:"TestParams",id:"testparams",level:3}];function a(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.header,{children:(0,l.jsx)(s.h1,{id:"iknowsourcegloballister",children:"%iKnow.Source.Global.Lister"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Class %iKnow.Source.Global.Lister Extends %iKnow.Source.Lister [ Deprecated, System = 4 ]\n"})}),"\n",(0,l.jsx)(s.p,{children:"Lister implementation for retrieving sources directly from globals."}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.strong,{children:"Lister Parameters"})," to be supplied to AddListToBatch and ProcessList calls:"]}),"\n",(0,l.jsxs)(s.ol,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"globalref"})," As %String - global reference where data is stored"]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"begsub"}),' As %String - beginning subscript (if not "")']}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"endsub"}),' As %String - ending subscript (default "")']}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"filter"}),' As %String - default "", $xecute expression, passed current subscript returns non-zero if this location needs to be processed']}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.strong,{children:"External ID structure:"})," [GroupName]:[LocalRef]"]}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsx)(s.li,{children:"GroupName = globalref passed to lister"}),"\n",(0,l.jsx)(s.li,{children:"LocalRef = final subscript"}),"\n"]}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.strong,{children:"Lister alias:"}),' "GLOBAL"']}),"\n",(0,l.jsxs)(s.p,{children:[(0,l.jsx)(s.strong,{children:"Default Processor:"})," %iKnow.Source.Global.Processor"]}),"\n",(0,l.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(s.h3,{id:"expandlist",children:"ExpandList"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Method ExpandList(listparams As %List) As %Status\n"})}),"\n",(0,l.jsx)(s.p,{children:"Scans through the global nodes as dictated by the Lister Parameters. No metadata is gathered along the way."}),"\n",(0,l.jsx)(s.p,{children:"See also ExpandList in %iKnow.Source.Lister."}),"\n",(0,l.jsx)(s.h3,{id:"getalias",children:"GetAlias"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetAlias() As %String\n"})}),"\n",(0,l.jsx)(s.p,{children:'Lister alias: "GLOBAL"'}),"\n",(0,l.jsx)(s.h3,{id:"splitfullref",children:"SplitFullRef"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SplitFullRef(domainId As %Integer, fullRef As %String, Output groupName As %String, Output localRef As %String) As %Status [ Private ]\n"})}),"\n",(0,l.jsx)(s.p,{children:"Splits the full reference in group name and local reference. The group name is the global reference, and the local reference is the final subscript."}),"\n",(0,l.jsx)(s.p,{children:"See also SplitFullRef in %iKnow.Source.Lister."}),"\n",(0,l.jsx)(s.h3,{id:"buildfullref",children:"BuildFullRef"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod BuildFullRef(domainId As %Integer, groupName As %String, localRef As %String) As %String [ Private ]\n"})}),"\n",(0,l.jsx)(s.p,{children:"Builds the full reference making a global reference with $NAME."}),"\n",(0,l.jsx)(s.p,{children:"See also BuildFullRef in %iKnow.Source.Lister."}),"\n",(0,l.jsx)(s.h3,{id:"testparams",children:"TestParams"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Method TestParams(listerParams...) As %Status\n"})}),"\n",(0,l.jsx)(s.p,{children:"Tests performed by this Lister:"}),"\n",(0,l.jsxs)(s.ol,{children:["\n",(0,l.jsx)(s.li,{children:"globalref: checks whether a vald global ref (but does not check global existence)"}),"\n",(0,l.jsx)(s.li,{children:"begsub: no checks"}),"\n",(0,l.jsx)(s.li,{children:"endsub: no checks"}),"\n",(0,l.jsx)(s.li,{children:"filter: if nonempty, checks whether this is a valid expression for $xecute() with two parameters"}),"\n"]})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>c});var l=n(96540);const r={},i=l.createContext(r);function t(e){const s=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),l.createElement(i.Provider,{value:s},e.children)}}}]);