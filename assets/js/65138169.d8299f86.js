"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[67634],{39507:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>r,default:()=>o,frontMatter:()=>a,toc:()=>l});var n=s(74848),i=s(28453);const a={pagination_prev:null,pagination_next:null},r="%SYS.Trace",l=[{value:"Methods",id:"methods",level:2},{value:"GetDirectory",id:"getdirectory",level:3},{value:"SetDirectory",id:"setdirectory",level:3},{value:"ValidateDirectory",id:"validatedirectory",level:3},{value:"GetEvents",id:"getevents",level:3},{value:"SetEvents",id:"setevents",level:3},{value:"ValidateEvents",id:"validateevents",level:3},{value:"GetEventCodes",id:"geteventcodes",level:3},{value:"GetMaxSize",id:"getmaxsize",level:3},{value:"SetMaxSize",id:"setmaxsize",level:3},{value:"ValidateMaxSize",id:"validatemaxsize",level:3},{value:"StartPID",id:"startpid",level:3},{value:"StopPID",id:"stoppid",level:3},{value:"PIDList",id:"pidlist",level:3},{value:"EventNames",id:"eventnames",level:3},{value:"ReadFileExecute",id:"readfileexecute",level:3},{value:"ReadFileFetch",id:"readfilefetch",level:3},{value:"ReadFileClose",id:"readfileclose",level:3},{value:"Display",id:"display",level:3}];function c(e){const t={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"systrace",children:"%SYS.Trace"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %SYS.Trace Extends %SYSTEM.Help [ Abstract ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This class provides methods to trace the execution of a process. Traced processes write events to a trace file with information about the routine line where it ocurred and, if applicable, the global reference. The events available for tracing correspond to the metrics reported in performance monitoring tools (PERFMON, %SYS.MONLBL, etc). Raw data is written to a trace file, iristrace_ ",(0,n.jsx)(t.em,{children:"pid"}),".txt, in a specified directory, which is parsed by this class."]}),"\n",(0,n.jsx)(t.p,{children:"Different sets of trace events can be selected to produce traces for different purposes. Highly detailed application execution tracing can be achieved, including all global references (the GloRef event), all application subroutine calls (RtnLoad) and/or every line of application code executed (RtnLines). Or, tracing can be limited to less common events such as physical block reads (DataBlkRd, UpntBlkRd, etc), network cache misses (NCacheMiss), and/or block collisions (BlkWait), in order to find all the locations in the application where these occurenced may be affecting performance."}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"getdirectory",children:"GetDirectory"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetDirectory() As %SysPath\n"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the directory where trace files will be written by processes being traced."}),"\n",(0,n.jsx)(t.h3,{id:"setdirectory",children:"SetDirectory"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetDirectory(dir As %SysPath) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Sets the directory where trace files will be written by processes being traced. Note that trace files may contain sensitive information such as global references (but not values) or parameters passed to subroutines. The trace directory must exist and must be writeable by the processes being traced (i.e. on UNIX and Linux systems it must be writeable by the effective group selected at installation)."}),"\n",(0,n.jsx)(t.h3,{id:"validatedirectory",children:"ValidateDirectory"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ValidateDirectory(dir As %SysPath, ByRef ndir As %SysPath) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Validates a directory argument for tracing. Returns status success or error and, if validation passes, passes the normalized directory back in ndir."}),"\n",(0,n.jsx)(t.h3,{id:"getevents",children:"GetEvents"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetEvents() As %List\n"})}),"\n",(0,n.jsx)(t.p,{children:"Returns a list where each list element is a monitor event to record. See SetEvents."}),"\n",(0,n.jsx)(t.h3,{id:"setevents",children:"SetEvents"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetEvents(events As %List) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Set the default list of monitor events that traced processes will record in the trace file. The list of available events is returned by EventNames and listed in by the ^TRACE or ^%SYS.MONLBL utilities."}),"\n",(0,n.jsx)(t.p,{children:'Note that the "RtnLoad" event is treated specially, and traces not just literal routine loads but all subroutine calls and returns. This allows for tracing the application stack and time spent in subroutines, methods, and extrinsic functions.'}),"\n",(0,n.jsx)(t.h3,{id:"validateevents",children:"ValidateEvents"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ValidateEvents(events As %List) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Validate a list of monitor events for trace files. Returns status success if the event list is valid and an error if not."}),"\n",(0,n.jsx)(t.h3,{id:"geteventcodes",children:"GetEventCodes"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetEventCodes(events As %List, ByRef nlist As %List) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Validate a list of monitor events for trace files and, if status is OK, returns a list of numerical event codes in nlist. Wrapped by ValidateEvents to obscure nlist, which is for internal use only. Called directly by StartPID."}),"\n",(0,n.jsx)(t.h3,{id:"getmaxsize",children:"GetMaxSize"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetMaxSize() As %Integer\n"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the system-wide default for maximum trace file size in MB. See SetMaxSize."}),"\n",(0,n.jsx)(t.h3,{id:"setmaxsize",children:"SetMaxSize"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetMaxSize(maxsize As %Integer) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Sets the system-wide default for maximum trace file size in MB. The default value is 0 (no cap). The value, when converted from MB to bytes, must be a valid integer (maximum ~2047 MB)."}),"\n",(0,n.jsx)(t.h3,{id:"validatemaxsize",children:"ValidateMaxSize"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ValidateMaxSize(maxsize As %Integer) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Accepts as input a size cap in MB, converts to bytes, and checks if the byte count is within range. If the byte count is negative or too large for a 32-bit integer, it is invalid."}),"\n",(0,n.jsx)(t.h3,{id:"startpid",children:"StartPID"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod StartPID(pid, dir As %String = "", events As %List = "", maxsize As %Integer = "") As %Status\n'})}),"\n",(0,n.jsx)(t.p,{children:"Start tracing in a target process. If a trace file of the same name already exists, it will be recreated. If arguments are empty, system-wide defaults will be used. Note that a successful return status does not wait for the target process to (re)create the trace file."}),"\n",(0,n.jsx)(t.h3,{id:"stoppid",children:"StopPID"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod StopPID(pid) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Stop a process's trace"}),"\n",(0,n.jsx)(t.h3,{id:"pidlist",children:"PIDList"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod PIDList() As %List\n"})}),"\n",(0,n.jsx)(t.p,{children:"Returns a list all process IDs that are being traced"}),"\n",(0,n.jsx)(t.h3,{id:"eventnames",children:"EventNames"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod EventNames() As %List\n"})}),"\n",(0,n.jsx)(t.p,{children:"Returns a list of event names"}),"\n",(0,n.jsx)(t.h3,{id:"readfileexecute",children:"ReadFileExecute"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ReadFileExecute(ByRef qHandle As %Binary, file As %String, flags As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Reads a trace file and parses records into rows with the following columns:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Event:"})," the event (monitor metric) name, or special markers CALL, QUIT, START, STOP, HALT, ARG, STACK"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Text:"})," some events (ARG and STACK) carry only an unstructured text note relating to the previous event (with all other columns null)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"TOffset:"})," time offset from start in microseconds"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Level:"})," the stack level if subroutine calls are being traced, otherwise -1"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Count:"})," the number that this event would add to the corresponding performance metric (typically 1)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"LineAndRoutine:"})," routine line where the event occurred"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"RoutineSFN:"})," internal SFN (system file number) for the routine database (directly from trace file)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"RoutineLoc:"})," an implied namespace (^sys^directory) corresponding to RoutineSFN. If the trace file was created prior to the last startup (or created on a different machine), this column may be inaccurate or null."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"SrcLine:"}),' the line of source code, if the "s" flag is used and if the source is available)']}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"GlobalRef:"}),' Null if the trace event is not an operation on a global, otherwise the global reference (gvn). The reference includes a leading ^. No environment is specified - it is not given as an extended reference - except in the case of a process private global, which will include ^||. In some unusual cases the global reference may not be able to be translated properly and either the last subscript may appear incomplete, or the value of GlobalRef may instead be a printable sequence of hex characters with no leading ^. Therefore the caller should be mindful if doing any manipulations of this value (e.g. use try/catch if operating on this value with $qlength or $qsubscript). If "q" is specified in the flags parameter, non-printing characters in the global reference will be quoted (similarly to the output of the ZWRITE command).']}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"GlobalSFN:"})," internal SFN (system file number) for the database (directly from trace file)"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"GlobalLoc:"})," an implied namespace (^sys^directory) corresponding to GlobalSFN. If the trace file was created prior to the last startup (or created on a different machine), this column may be inaccurate or null. Process private globals also report null.",(0,n.jsx)(t.br,{}),"\nThe flags parameter may include the following characters",(0,n.jsx)(t.br,{}),"\ns - fetch source line into SrcLine column from routine INT code",(0,n.jsx)(t.br,{}),"\nq - quote global reference to avoid non-printing characters in subscript",(0,n.jsx)(t.br,{}),"\nNote that if the end of the trace file is reached before a STOP or HALT record up fetching the next row, an error $$$UnexpectedEndOfFile, will be returned and additional rows may become available later if the traced process is still running."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"readfilefetch",children:"ReadFileFetch"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ReadFileFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"readfileclose",children:"ReadFileClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ReadFileClose(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"display",children:"Display"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Display(file As %String, flags As %String)\n"})}),"\n",(0,n.jsx)(t.p,{children:"Writes a formatted display of a trace file to the current device."}),"\n",(0,n.jsxs)(t.p,{children:["The flags parameter may include the following characters",(0,n.jsx)(t.br,{}),"\nd - Display databases for routines and globals. If possible, ^sys^directory is displayed, otherwise, internal system file numbers. If the trace file was created prior to the last startup (or created on a different machine), the reported ^sys^directory may be inaccurate.",(0,n.jsx)(t.br,{}),"\nn - Display databases for routines and global references as internal system file numbers.",(0,n.jsx)(t.br,{}),"\ns - Display source line",(0,n.jsx)(t.br,{}),"\nw - Wait for more data if end of the file is encountered and the process is still being traced (ctrl-c to stop)"]})]})}function o(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>l});var n=s(96540);const i={},a=n.createContext(i);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);