"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[41306],{3439:(e,l,a)=>{a.r(l),a.d(l,{contentTitle:()=>t,default:()=>o,frontMatter:()=>n,toc:()=>r});var s=a(74848),i=a(28453);const n={pagination_prev:null,pagination_next:null},t="%Library.Time",r=[{value:"Parameters",id:"parameters",level:2},{value:"FORMAT;",id:"format",level:3},{value:"MAXVAL;",id:"maxval",level:3},{value:"MINVAL;",id:"minval",level:3},{value:"PRECISION;",id:"precision",level:3},{value:"VALUELIST;",id:"valuelist",level:3},{value:"DISPLAYLIST;",id:"displaylist",level:3},{value:"XMLTIMEZONE",id:"xmltimezone",level:3},{value:"XSDTYPE",id:"xsdtype",level:3},{value:"JSONTYPE",id:"jsontype",level:3},{value:"Methods",id:"methods",level:2},{value:"XSDToLogical",id:"xsdtological",level:3},{value:"LogicalToXSD",id:"logicaltoxsd",level:3},{value:"DisplayToLogical",id:"displaytological",level:3},{value:"IsValid",id:"isvalid",level:3},{value:"LogicalToDisplay",id:"logicaltodisplay",level:3},{value:"LogicalToOdbc",id:"logicaltoodbc",level:3},{value:"OdbcToLogical",id:"odbctological",level:3},{value:"Normalize",id:"normalize",level:3}];function c(e){const l={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(l.header,{children:(0,s.jsx)(l.h1,{id:"librarytime",children:"%Library.Time"})}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Class %Library.Time Extends %DataType [ ClientDataType = TIME, OdbcType = TIME, SqlCategory = TIME, System = 2 ]\n"})}),"\n",(0,s.jsxs)(l.p,{children:["The ",(0,s.jsx)(l.strong,{children:"%Time"})," data type class represents a time value."]}),"\n",(0,s.jsxs)(l.p,{children:["The logical value of the ",(0,s.jsx)(l.strong,{children:"%Time"})," data type is the number of seconds past midnight."]}),"\n",(0,s.jsx)(l.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(l.h3,{id:"format",children:"FORMAT;"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Parameter FORMAT;\n"})}),"\n",(0,s.jsxs)(l.p,{children:["The format specification for the data type's display value. The value of the FORMAT parameter corresponds to the available parameters of the ",(0,s.jsx)(l.code,{children:"$ZDATETIME"})," and ",(0,s.jsx)(l.code,{children:"$ZDATETIMEH"})," functions, which are used to perform the formatting."]}),"\n",(0,s.jsx)(l.h3,{id:"maxval",children:"MAXVAL;"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Parameter MAXVAL;\n"})}),"\n",(0,s.jsx)(l.p,{children:"The maximum allowed logical value for the data type."}),"\n",(0,s.jsx)(l.h3,{id:"minval",children:"MINVAL;"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Parameter MINVAL;\n"})}),"\n",(0,s.jsx)(l.p,{children:"The minimum allowed logical value for the data type."}),"\n",(0,s.jsx)(l.h3,{id:"precision",children:"PRECISION;"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Parameter PRECISION;\n"})}),"\n",(0,s.jsx)(l.p,{children:'The number of decimal places of precision to keep for %Time values. If "" then keep whatever precision is provided by the caller.'}),"\n",(0,s.jsx)(l.h3,{id:"valuelist",children:"VALUELIST;"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Parameter VALUELIST;\n"})}),"\n",(0,s.jsx)(l.p,{children:'Used for enumerated (multiple-choice) attributes. VALUELIST is either a null string ("") or a delimiter separated list (where the delimiter is the first character) of logical values. If a non-null value is present, then the attribute is restricted to values in the list, and the validation code simply checks to see if the value is in the list.'}),"\n",(0,s.jsx)(l.h3,{id:"displaylist",children:"DISPLAYLIST;"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"Parameter DISPLAYLIST;\n"})}),"\n",(0,s.jsxs)(l.p,{children:["Used for enumerated (multiple-choice) attributes. Used in conjunction with the ",(0,s.jsx)(l.a,{href:"#VALUELIST",children:"VALUELIST"})," parameter for enumerated (multiple-choice) attributes. DISPLAYLIST, if not null, represents the display values for the attribute corresponding with the logical values listed in VALUELIST."]}),"\n",(0,s.jsxs)(l.p,{children:["The display values are returned by the ",(0,s.jsx)(l.a,{href:"#LogicalToDisplay",children:"LogicalToDisplay"})," method."]}),"\n",(0,s.jsx)(l.h3,{id:"xmltimezone",children:"XMLTIMEZONE"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:'Parameter XMLTIMEZONE [ Constraint = "IGNORE,UTC", Flags = ENUM ] = "UTC";\n'})}),"\n",(0,s.jsx)(l.p,{children:'XMLTIMEZONE specifies the handling of timezone part of the XML format dateTime. "UTC" means convert to UTC on input. "IGNORE means ignore the timezone.'}),"\n",(0,s.jsx)(l.h3,{id:"xsdtype",children:"XSDTYPE"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:'Parameter XSDTYPE = "time";\n'})}),"\n",(0,s.jsx)(l.p,{children:"Declares the XSD type used when projecting XML Schemas."}),"\n",(0,s.jsx)(l.h3,{id:"jsontype",children:"JSONTYPE"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:'Parameter JSONTYPE = "string";\n'})}),"\n",(0,s.jsx)(l.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(l.h3,{id:"xsdtological",children:"XSDToLogical"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod XSDToLogical(%val As %String) As %Time [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Converts the SOAP encoded input time value into a %Time value."}),"\n",(0,s.jsx)(l.h3,{id:"logicaltoxsd",children:"LogicalToXSD"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToXSD(%val As %Time) As %String [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Converts the %Time value to the canonical SOAP encoded value."}),"\n",(0,s.jsx)(l.h3,{id:"displaytological",children:"DisplayToLogical"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod DisplayToLogical(%val As %String) As %Time [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Converts the input value %val, which represents a time value, into a logical time value (number of seconds since midnight)."}),"\n",(0,s.jsx)(l.p,{children:"Returns the value of the input string %val as a logical time value (number of seconds since midnight)."}),"\n",(0,s.jsx)(l.h3,{id:"isvalid",children:"IsValid"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod IsValid(%val As %RawString) As %Status [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,s.jsxs)(l.p,{children:["Tests if the logical value %val, which represents a time value (number of seconds since midnight), is valid. The validation is based on the class parameter settings used for the class attribute this data type is associated with. In this case, ",(0,s.jsx)(l.a,{href:"#MAXVAL",children:"MAXVAL"})," and ",(0,s.jsx)(l.a,{href:"#MINVAL",children:"MINVAL"}),"."]}),"\n",(0,s.jsx)(l.h3,{id:"logicaltodisplay",children:"LogicalToDisplay"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToDisplay(%val As %Time) As %String [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Converts the value of %val, which is a logical time value (number of seconds since midnight), into a display string. The formatting is based on the value of the FORMAT parameter. Returns the formatted value of %val."}),"\n",(0,s.jsx)(l.h3,{id:"logicaltoodbc",children:"LogicalToOdbc"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:'ClassMethod LogicalToOdbc(%val As %Time = "") As %String [ CodeMode = generator, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(l.p,{children:"Converts %val, which represents a logical time value (number of seconds since midnight), into ODBC time format."}),"\n",(0,s.jsx)(l.p,{children:"Returns the ODBC time string for the logical time value %val."}),"\n",(0,s.jsx)(l.h3,{id:"odbctological",children:"OdbcToLogical"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:'ClassMethod OdbcToLogical(%val As %String = "") As %Time [ CodeMode = generator, ServerOnly = 1 ]\n'})}),"\n",(0,s.jsx)(l.p,{children:"Converts %val, which represents a time in ODBC format, into a logical time value (number of seconds since midnight)."}),"\n",(0,s.jsx)(l.p,{children:"Returns the logical time value of the ODBC time string %val."}),"\n",(0,s.jsx)(l.h3,{id:"normalize",children:"Normalize"}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod Normalize(%val As %RawString) As %Time [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(l.p,{children:"Converts %val to a normalized value."})]})}function o(e={}){const{wrapper:l}={...(0,i.R)(),...e.components};return l?(0,s.jsx)(l,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,l,a)=>{a.d(l,{R:()=>t,x:()=>r});var s=a(96540);const i={},n=s.createContext(i);function t(e){const l=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function r(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(n.Provider,{value:l},e.children)}}}]);