"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[53170],{77284:(e,a,s)=>{s.r(a),s.d(a,{contentTitle:()=>t,default:()=>o,frontMatter:()=>i,toc:()=>r});var l=s(74848),n=s(28453);const i={pagination_prev:null,pagination_next:null},t="%Library.TimeStamp",r=[{value:"Parameters",id:"parameters",level:2},{value:"VALUELIST;",id:"valuelist",level:3},{value:"MAXVAL;",id:"maxval",level:3},{value:"MINVAL;",id:"minval",level:3},{value:"DISPLAYLIST;",id:"displaylist",level:3},{value:"XMLTIMEZONE",id:"xmltimezone",level:3},{value:"XMLDEFAULTVALUE",id:"xmldefaultvalue",level:3},{value:"XSDTYPE",id:"xsdtype",level:3},{value:"JSONTYPE",id:"jsontype",level:3},{value:"Methods",id:"methods",level:2},{value:"XSDToLogical",id:"xsdtological",level:3},{value:"LogicalToXSD",id:"logicaltoxsd",level:3},{value:"OdbcToLogical",id:"odbctological",level:3},{value:"DisplayToLogical",id:"displaytological",level:3},{value:"IsValid",id:"isvalid",level:3},{value:"LogicalToDisplay",id:"logicaltodisplay",level:3},{value:"Normalize",id:"normalize",level:3}];function c(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(a.header,{children:(0,l.jsx)(a.h1,{id:"librarytimestamp",children:"%Library.TimeStamp"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"Class %Library.TimeStamp Extends %DataType [ ClientDataType = TIMESTAMP, OdbcType = TIMESTAMP, SqlCategory = TIMESTAMP, System = 2 ]\n"})}),"\n",(0,l.jsxs)(a.p,{children:["The ",(0,l.jsx)(a.strong,{children:"%TimeStamp"})," data type class represents a time stamp value. The logical value of this data type is in ODBC format:"]}),"\n",(0,l.jsx)(a.p,{children:"YYYY-MM-DD HH:MM:SS.nnnnnnnnn"}),"\n",(0,l.jsxs)(a.p,{children:["For example, the following expression returns the current date and time in the format needed for this data type: ",(0,l.jsx)(a.code,{children:"$zdatetime($horolog,3)"}),". See the documentation for ",(0,l.jsx)(a.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$ZDATETIME",children:"$zdatetime"})," and ",(0,l.jsx)(a.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$HOROLOG",children:"$horolog"}),"."]}),"\n",(0,l.jsx)(a.p,{children:"The function $System.SQL.Functions.DATEDIFF() can be used to return intervals between two %TimeStamp values. The function $System.SQL.Functions.DATEADD() can be used to add a certain number of date parts (such as years, hours, or days) to a specified timestamp. See the class %SYSTEM.SQL.Functions for details."}),"\n",(0,l.jsx)(a.h2,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsx)(a.h3,{id:"valuelist",children:"VALUELIST;"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter VALUELIST;\n"})}),"\n",(0,l.jsx)(a.p,{children:'Used for enumerated (multiple-choice) attributes. VALUELIST is either a null string ("") or a delimiter separated list (where the delimiter is the first character) of logical values. If a non-null value is present, then the attribute is restricted to values in the list, and the validation code simply checks to see if the value is in the list.'}),"\n",(0,l.jsx)(a.h3,{id:"maxval",children:"MAXVAL;"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter MAXVAL;\n"})}),"\n",(0,l.jsx)(a.p,{children:"The maximum allowed logical value for the data type."}),"\n",(0,l.jsx)(a.h3,{id:"minval",children:"MINVAL;"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter MINVAL;\n"})}),"\n",(0,l.jsx)(a.p,{children:"The minimum allowed logical value for the data type."}),"\n",(0,l.jsx)(a.h3,{id:"displaylist",children:"DISPLAYLIST;"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter DISPLAYLIST;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Used for enumerated (multiple-choice) attributes. Used in conjunction with the ",(0,l.jsx)(a.a,{href:"#VALUELIST",children:"VALUELIST"})," parameter for enumerated (multiple-choice) attributes. DISPLAYLIST, if not null, represents the display values for the attribute corresponding with the logical values listed in VALUELIST."]}),"\n",(0,l.jsxs)(a.p,{children:["The display values are returned by the ",(0,l.jsx)(a.a,{href:"#LogicalToDisplay",children:"LogicalToDisplay"})," method."]}),"\n",(0,l.jsx)(a.h3,{id:"xmltimezone",children:"XMLTIMEZONE"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:'Parameter XMLTIMEZONE [ Constraint = "IGNORE,UTC", Flags = ENUM ] = "UTC";\n'})}),"\n",(0,l.jsx)(a.p,{children:'XMLTIMEZONE specifies the handling of timezone part of the XML format dateTime. "UTC" means convert to UTC on input. "IGNORE" means ignore the timezone.'}),"\n",(0,l.jsx)(a.h3,{id:"xmldefaultvalue",children:"XMLDEFAULTVALUE"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter XMLDEFAULTVALUE As STRING [ Internal ];\n"})}),"\n",(0,l.jsx)(a.p,{children:'XMLDEFAULTVALUE specifies the value to use if the date fails validity check by $zdatetimeh. By default "" is used which will result in an XMLImport error. A dateTime such as "1841-01-1 00:00:00" may be specified to replace dates such as 0001-01-01 00:00:00 which are not valid %TimeStamp dates.'}),"\n",(0,l.jsx)(a.h3,{id:"xsdtype",children:"XSDTYPE"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:'Parameter XSDTYPE = "dateTime";\n'})}),"\n",(0,l.jsx)(a.p,{children:"Declares the XSD type used when projecting XML Schemas."}),"\n",(0,l.jsx)(a.h3,{id:"jsontype",children:"JSONTYPE"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:'Parameter JSONTYPE = "string";\n'})}),"\n",(0,l.jsx)(a.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(a.h3,{id:"xsdtological",children:"XSDToLogical"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod XSDToLogical(%val As %String) As %TimeStamp [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts the SOAP encoded input dateTime value into a %TimeStamp value."}),"\n",(0,l.jsx)(a.h3,{id:"logicaltoxsd",children:"LogicalToXSD"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToXSD(%val As %TimeStamp) As %String [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts the %TimeStamp value to the canonical SOAP encoded value."}),"\n",(0,l.jsx)(a.h3,{id:"odbctological",children:"OdbcToLogical"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod OdbcToLogical(%val As %String) As %TimeStamp [ ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts %val, which represents either a Timestamp in ODBC format, or a Date in ODBC format, into a logical Timestamp value."}),"\n",(0,l.jsx)(a.p,{children:"Returns the logical Timestamp value of the ODBC Timestamp string %val."}),"\n",(0,l.jsx)(a.h3,{id:"displaytological",children:"DisplayToLogical"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod DisplayToLogical(%val As %String) As %TimeStamp [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Converts the input value %val, which represents a Display timestamp value, to ",(0,l.jsx)(a.code,{children:"YYYY-MM-DD HH:MM:SS[.nnnnnnnnn]"})," format. The Logical value and Display values are the same unless there are ",(0,l.jsx)(a.a,{href:"#VALUELIST",children:"VALUELIST"})," and ",(0,l.jsx)(a.a,{href:"#DISPLAYLIST",children:"DISPLAYLIST"})," parameters specified."]}),"\n",(0,l.jsxs)(a.p,{children:["Returns the value of the input string %val as a Logical timestamp value (",(0,l.jsx)(a.code,{children:"YYYY-MM-DD HH:MM:SS[.nnnnnnnnn]"})," format)."]}),"\n",(0,l.jsx)(a.h3,{id:"isvalid",children:"IsValid"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod IsValid(%val As %RawString) As %Status [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Tests if the logical value %val, which represents a timestamp value in ",(0,l.jsx)(a.code,{children:"YYYY-MM-DD HH:MM:SS[.nnnnnnnn]"})," format, is valid. The validation is based on the class parameter settings used for the class attribute this data type is associated with. In this case, ",(0,l.jsx)(a.a,{href:"#MAXVAL",children:"MAXVAL"})," and ",(0,l.jsx)(a.a,{href:"#MINVAL",children:"MINVAL"}),"."]}),"\n",(0,l.jsx)(a.h3,{id:"logicaltodisplay",children:"LogicalToDisplay"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToDisplay(%val As %TimeStamp) As %String [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Converts the value of %val, which is in logical format ",(0,l.jsx)(a.code,{children:"YYYY-MM-DD HH:MM:SS[.nnnnnnnnn]"}),", into a display string. The Logical value and Display values are the same unless there are ",(0,l.jsx)(a.a,{href:"#VALUELIST",children:"VALUELIST"})," and ",(0,l.jsx)(a.a,{href:"#DISPLAYLIST",children:"DISPLAYLIST"})," parameters specified."]}),"\n",(0,l.jsx)(a.p,{children:"Returns the Display Timestamp value of the Logical Timestamp string %val."}),"\n",(0,l.jsx)(a.h3,{id:"normalize",children:"Normalize"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod Normalize(%val As %RawString) As %TimeStamp [ CodeMode = expression, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Transforms Logical Date or ODBC Date values into timestamp. Date only values are converted to Timestamp values with a time of 00:00:00. Time only values are converted to TImestamp value with a date of current date"})]})}function o(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,l.jsx)(a,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},28453:(e,a,s)=>{s.d(a,{R:()=>t,x:()=>r});var l=s(96540);const n={},i=l.createContext(n);function t(e){const a=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),l.createElement(i.Provider,{value:a},e.children)}}}]);