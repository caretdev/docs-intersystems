"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[74380],{48088:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>i,default:()=>o,frontMatter:()=>r,toc:()=>l});var n=s(74848),a=s(28453);const r={pagination_prev:null,pagination_next:null},i="%UnitTest.TestSqlScript",l=[{value:"Parameters",id:"parameters",level:2},{value:"CORRELATIONLIST;",id:"correlationlist",level:3},{value:"DATACLASS;",id:"dataclass",level:3},{value:"DATAFILE;",id:"datafile",level:3},{value:"DATATAG;",id:"datatag",level:3},{value:"SHOWPLAN;",id:"showplan",level:3},{value:"DISPLAYTESTNAME",id:"displaytestname",level:3},{value:"TIMESCALE;",id:"timescale",level:3},{value:"DISPLAYELAPSEDTIME",id:"displayelapsedtime",level:3},{value:"DISPLAYSECONDS",id:"displayseconds",level:3},{value:"Methods",id:"methods",level:2},{value:"OnBeforeAllTests",id:"onbeforealltests",level:3},{value:"runScript",id:"runscript",level:3},{value:"runSqlStatement",id:"runsqlstatement",level:3}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",person:"person",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"unittesttestsqlscript",children:"%UnitTest.TestSqlScript"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %UnitTest.TestSqlScript Extends %UnitTest.TestScript [ System = 3 ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The sample class mentioned here (Sample.Person) is part of ",(0,n.jsx)(t.a,{href:"https://github.com/intersystems/Samples-Data",children:"https://github.com/intersystems/Samples-Data."})," See ",(0,n.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?FIND=landing+githubsamples",children:"Downloading Samples"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"This class replays script-driven SQL tests. It provides an implementation of the runScript method that reads and executes SQL statements from the script specified in the TESTFILE parameter, comparing it to a reference log of expected output. It also provides an implementation of the OnBeforeAllTests method that populates the XML-enabled class under test (DATACLASS) from DATAFILE."}),"\n",(0,n.jsxs)(t.p,{children:["To write a test, start by creating a subclass of this class with appropriate values for the DATACLASS, DATAFILE, and DATATAG parameters: ",(0,n.jsx)(t.code,{children:'Class Sample.SqlTest extends %UnitTest.TestSqlScript { Parameter DATACLASS = "Sample.Person"; Parameter DATAFILE = "person.data"; Parameter DATATAG = "person"; }'})," Populate the class under test: ",(0,n.jsx)(t.code,{children:"Write ##class(Sample.Person).Populate(100)"})," Export the instances of the class under test to the data file: ",(0,n.jsx)(t.code,{children:'Set writer=##class(%XML.Writer).%New() Set writer.Charset="UTF-8" Set sc=writer.OutputToFile("person.data") Set sc=writer.RootElement("people") Set statement=##class(%SQL.Statement).%New() Set sc=statement.%PrepareClassQuery("Sample.Person","Extent") Set result=statement.%Execute() While result.%Next(.sc) { Set id=result.%Get("ID") Set person=##class(Sample.Person).%OpenId(id) Set sc=writer.Object(person,"person") } Set sc=writer.EndRootElement() Set sc=writer.EndDocument()'}),' Create a script file with a series of SQL statements, each terminated by a line starting with "####": ',(0,n.jsx)(t.code,{children:"select max(SSN) from Sample.Person #### select count(ID) from Sample.Person ####count IDs"})," Place the following files in a sub-directory of ^UnitTestRoot:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["the script file (",(0,n.jsx)(t.em,{children:"script.txt"}),")"]}),"\n",(0,n.jsxs)(t.li,{children:["a copy of the test class (",(0,n.jsx)(t.em,{children:"Sample.SqlTest"}),")"]}),"\n",(0,n.jsxs)(t.li,{children:["a copy of the class under test (",(0,n.jsx)(t.em,{children:"Sample.Person"}),")"]}),"\n",(0,n.jsxs)(t.li,{children:["the data file (",(0,n.jsx)(t.em,{children:"person.data"}),')\nTo generate the expected results, run the test with the "reference" parameter: ',(0,n.jsx)(t.code,{children:'Do ##class(%UnitTest.Manager).RunTest("Sample",,"reference")'})," It populates the data class, executes the SQL statements, and writes the expected output to reference.log: ",(0,n.jsx)(t.code,{children:"SQL> select max(SSN) from Sample.Person Aggregate_1: 992-27-1936: SQL> select count(ID) from Sample.Person Aggregate_1: 100: Test count IDs"}),' Subsequent runs without the "reference" parameter will write to output.log, then compare it to reference.log: ',(0,n.jsx)(t.code,{children:'Do ##class(%UnitTest.Manager).RunTest("Sample")'})]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(t.h3,{id:"correlationlist",children:"CORRELATIONLIST;"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter CORRELATIONLIST;\n"})}),"\n",(0,n.jsxs)(t.p,{children:["List that correlates XML tags in a data file with classes. Entries are of the form ",(0,n.jsx)(t.em,{children:"tag1:class1, ..., tagn:classn"}),", with each entry specifying a pair of DATATAG and DATACLASS parameter values."]}),"\n",(0,n.jsx)(t.p,{children:"If CORRELATIONLIST, DATACLASS, and DATATAG are all specified, the DATATAG and DATACLASS pair are added to the end of the CORRELATIONLIST."}),"\n",(0,n.jsx)(t.h3,{id:"dataclass",children:"DATACLASS;"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter DATACLASS;\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Specifies an XML-enabled class, such as ",(0,n.jsx)(t.em,{children:"Sample.Person"}),", to be correlated with the DATATAG in the DATAFILE."]}),"\n",(0,n.jsx)(t.h3,{id:"datafile",children:"DATAFILE;"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter DATAFILE;\n"})}),"\n",(0,n.jsxs)(t.p,{children:["XML file, such as ",(0,n.jsx)(t.em,{children:"person.data"}),", that contains data for the DATACLASS. If no directory name is specified by ",(0,n.jsx)(t.strong,{children:"RunTest"}),", then the current ",(0,n.jsx)(t.strong,{children:"UnitTest"})," directory is used."]}),"\n",(0,n.jsx)(t.h3,{id:"datatag",children:"DATATAG;"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter DATATAG;\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Specifies an XML tag in DATAFILE, such as ",(0,n.jsx)(t.em,{children:(0,n.jsx)(t.person,{})})," (angle brackets omitted), to be correlated with the DATACLASS."]}),"\n",(0,n.jsx)(t.h3,{id:"showplan",children:"SHOWPLAN;"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter SHOWPLAN;\n"})}),"\n",(0,n.jsx)(t.p,{children:"Set this parameter to 1 to dump the access plans used by each test in the test script. Use this feature when you need to verify plan stability from one release to the next, or when you want to investigate the impact of creating, dropping, or altering an index."}),"\n",(0,n.jsx)(t.h3,{id:"displaytestname",children:"DISPLAYTESTNAME"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter DISPLAYTESTNAME = "Test ";\n'})}),"\n",(0,n.jsx)(t.p,{children:'If a test name is specified after the #### terminator in the script, it is written to output.log. Override this parameter to localize the spelling of "Test."'}),"\n",(0,n.jsx)(t.h3,{id:"timescale",children:"TIMESCALE;"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter TIMESCALE;\n"})}),"\n",(0,n.jsx)(t.p,{children:"This parameter specifies the number of significant digits used to display elapsed time for each SQL statement to output.log. It can be used as a coarse indicator of differences in the run time of any individual query."}),"\n",(0,n.jsx)(t.p,{children:'The default value of "" prevents elapsed time information from being displayed at the end of each SQL statement in the test. Setting it to 1 will display the result in seconds. Setting it to 10 will display elapsed time in multiples of 10 seconds. Setting it to 0.1 will display elapsed time to the nearest tenth second.'}),"\n",(0,n.jsx)(t.h3,{id:"displayelapsedtime",children:"DISPLAYELAPSEDTIME"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter DISPLAYELAPSEDTIME = " executed and fetched in ";\n'})}),"\n",(0,n.jsx)(t.p,{children:"When TIMESCALE is a positive number, this parameter is part of the elapsed time message written to output.log. Override it to localize the display of elapsed time."}),"\n",(0,n.jsx)(t.h3,{id:"displayseconds",children:"DISPLAYSECONDS"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter DISPLAYSECONDS = "seconds";\n'})}),"\n",(0,n.jsx)(t.p,{children:'When TIMESCALE is a positive number, this parameter is part of the elapsed time message written to output.log. Override it to localize the spelling of "seconds."'}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"onbeforealltests",children:"OnBeforeAllTests"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method OnBeforeAllTests() As %Status [ CodeMode = generator ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"This method deletes the extent of the DATACLASS and populates it from the file specified by the DATAFILE parameter."}),"\n",(0,n.jsx)(t.h3,{id:"runscript",children:"runScript"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod runScript(scriptfile As %String, outputfile As %String) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This method reads SQL statements from ",(0,n.jsx)(t.strong,{children:"scriptfile"}),", writing their output to ",(0,n.jsx)(t.strong,{children:"outputfile"}),'. Statements are terminated by a line that starts with "####".']}),"\n",(0,n.jsx)(t.h3,{id:"runsqlstatement",children:"runSqlStatement"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod runSqlStatement(sql As %String, testName As %String) [ Internal ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This method prepares and executes the SQL statement in ",(0,n.jsx)(t.strong,{children:"sql"}),", formatting the output according to the TIMESCALE parameter et al. If SHOWPLAN is true, it appends the plan to the output."]})]})}function o(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>l});var n=s(96540);const a={},r=n.createContext(a);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);