"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[76428],{75899:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>a,default:()=>d,frontMatter:()=>r,toc:()=>c});var s=n(74848),i=n(28453);const r={pagination_prev:null,pagination_next:null},a="%XML.Security.Signature",c=[{value:"Parameters",id:"parameters",level:2},{value:"XMLFORMAT",id:"xmlformat",level:3},{value:"NAMESPACE",id:"namespace",level:3},{value:"ELEMENTQUALIFIED",id:"elementqualified",level:3},{value:"Properties",id:"properties",level:2},{value:"PreProcessed",id:"preprocessed",level:3},{value:"Id",id:"id",level:3},{value:"SignedInfo",id:"signedinfo",level:3},{value:"SignatureValue",id:"signaturevalue",level:3},{value:"KeyInfo",id:"keyinfo",level:3},{value:"Object",id:"object",level:3},{value:"SignatureOptions",id:"signatureoptions",level:3},{value:"X509Credentials",id:"x509credentials",level:3},{value:"Key",id:"key",level:3},{value:"ReferenceOption",id:"referenceoption",level:3},{value:"DigestMethodAlgorithm",id:"digestmethodalgorithm",level:3},{value:"NodeId",id:"nodeid",level:3},{value:"IsBodySigned",id:"isbodysigned",level:3},{value:"Confirmed",id:"confirmed",level:3},{value:"Methods",id:"methods",level:2},{value:"XMLNew",id:"xmlnew",level:3},{value:"CreateX509",id:"createx509",level:3},{value:"Create",id:"create",level:3},{value:"GetDefaultMethods",id:"getdefaultmethods",level:3},{value:"SetDigestMethod",id:"setdigestmethod",level:3},{value:"SetSignatureMethod",id:"setsignaturemethod",level:3},{value:"SignStream",id:"signstream",level:3},{value:"SignDocument",id:"signdocument",level:3},{value:"ValidateDocument",id:"validatedocument",level:3},{value:"InitializeForService",id:"initializeforservice",level:3},{value:"AddRM",id:"addrm",level:3},{value:"InitializeValue",id:"initializevalue",level:3},{value:"AddReference",id:"addreference",level:3},{value:"Perform",id:"perform",level:3},{value:"Sign",id:"sign",level:3},{value:"GetNodeById",id:"getnodebyid",level:3},{value:"Reset",id:"reset",level:3},{value:"ValidateElement",id:"validateelement",level:3},{value:"ComputeSha1Digest",id:"computesha1digest",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"xmlsecuritysignature",children:"%XML.Security.Signature"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %XML.Security.Signature Extends %SOAP.Security.Element [ System = 4 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"For details on using this class"}),", see ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+%25XML.Security.Signature+xml",children:"Signing XML Documents"}),". and ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+%25XML.Security.Signature+soap",children:"Adding Digital Signatures"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"XML Signature element."}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(t.h3,{id:"xmlformat",children:"XMLFORMAT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter XMLFORMAT = "literal";\n'})}),"\n",(0,s.jsx)(t.h3,{id:"namespace",children:"NAMESPACE"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter NAMESPACE = "http://www.w3.org/2000/09/xmldsig#";\n'})}),"\n",(0,s.jsx)(t.h3,{id:"elementqualified",children:"ELEMENTQUALIFIED"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter ELEMENTQUALIFIED = 1;\n"})}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"preprocessed",children:"PreProcessed"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property PreProcessed As %Boolean(XMLPROJECTION = "NONE") [ InitialExpression = 0, Internal ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"The PreProcessed flag indicates whether the signature data in this signature is already valid and should not be recalculated when preparing a SOAP request for retransmission. In general this would only be useful when attempting to forward a specific signed entity such as a SAML assertion which contains a Signature element."}),"\n",(0,s.jsx)(t.h3,{id:"id",children:"Id"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property Id As %String(MAXLEN = "", XMLPROJECTION = "attribute") [ Internal ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"Local Id attribute defined for XML Signature"}),"\n",(0,s.jsx)(t.h3,{id:"signedinfo",children:"SignedInfo"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property SignedInfo As %XML.Security.SignedInfo [ Internal ];\n"})}),"\n",(0,s.jsx)(t.h3,{id:"signaturevalue",children:"SignatureValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property SignatureValue As %xsd.base64Binary(CANONICALXML = 1) [ Internal ];\n"})}),"\n",(0,s.jsx)(t.h3,{id:"keyinfo",children:"KeyInfo"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property KeyInfo As %XML.Security.KeyInfo [ Internal ];\n"})}),"\n",(0,s.jsx)(t.h3,{id:"object",children:"Object"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Object As %XML.Security.Object [ Internal ];\n"})}),"\n",(0,s.jsx)(t.h3,{id:"signatureoptions",children:"SignatureOptions"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property SignatureOptions As %Integer(XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"SignatureOptions specifies which parts of the message are to be signed. See %soap.inc definitions of $$$SOAPWSInclude.... for possibilities."}),"\n",(0,s.jsx)(t.h3,{id:"x509credentials",children:"X509Credentials"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property X509Credentials As %RawString(XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"If signing is based on X509 certificate, this is the X509 certificate class. If signing is based on EncryptedKey, BinarySecret, DerivedKeyToken or SecurityContextToken element, then this element and Key property is defined."}),"\n",(0,s.jsx)(t.h3,{id:"key",children:"Key"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property Key As %Binary(XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"The symmetric key for hmac-sha1 signing."}),"\n",(0,s.jsx)(t.h3,{id:"referenceoption",children:"ReferenceOption"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property ReferenceOption As %String(XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"ReferenceOption argument from the Create call."}),"\n",(0,s.jsx)(t.h3,{id:"digestmethodalgorithm",children:"DigestMethodAlgorithm"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property DigestMethodAlgorithm As %String(XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"The default DigestMethod Algorithm for any references added to this Signature."}),"\n",(0,s.jsx)(t.h3,{id:"nodeid",children:"NodeId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property NodeId As %String(XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"Save the node id of this element in the tree during import for canonicalizing later during signature verification."}),"\n",(0,s.jsx)(t.h3,{id:"isbodysigned",children:"IsBodySigned"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property IsBodySigned As %Boolean(XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"If true, then the SOAP Body is signed"}),"\n",(0,s.jsx)(t.h3,{id:"confirmed",children:"Confirmed"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property Confirmed As %Boolean(XMLPROJECTION = "none") [ Internal ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"If true, this signature has been confirmed by a WS-Security 1.1 SubjectConfirmation element."}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"xmlnew",children:"XMLNew"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod XMLNew(document As %XML.Document, nodeId As %Integer, containerOref As %RegisteredObject = "") As %RegisteredObject\n'})}),"\n",(0,s.jsx)(t.p,{children:"Save the node if when getting a new class instance."}),"\n",(0,s.jsx)(t.h3,{id:"createx509",children:"CreateX509"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod CreateX509(credentials As %SYS.X509Credentials = "", signatureOptions As %Integer, referenceOption As %Integer, Output status As %Status) As %XML.Security.Signature\n'})}),"\n",(0,s.jsx)(t.p,{children:"Create a Signature element that is to be signed using the RSA private key that is associated with the specified X509 certificate."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The first argument can be a %SYS.X509Credentials instance, a %SAML.Assertion instance, or a %SOAP.Security.BinarySecurityToken instance. This argument indicates the X509 certificate to use.\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"If this argument is a %SYS.X509Credentials instance, the instance should refer to the X509 certificate to use."}),"\n",(0,s.jsx)(t.li,{children:"If this argument is a %SAML.Assertion instance, its SubjectConfirmation should be based on the X.509 credentials to use."}),"\n",(0,s.jsx)(t.li,{children:"If this argument is a %SOAP.Security.BinarySecurityToken instance, it should contain the X.509 certificate to use; this is the technique for a direct reference."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:"The signatureOptions argument specifies the parts of the SOAP message to be signed. The default is to sign all addressing header, body and timestamp. See %soap.inc definitions of $$$SOAPWSInlcude.... for possibilities."}),"\n",(0,s.jsx)(t.li,{children:"The referenceOption argument specifies the type of reference to create. See %soap.inc definitions of $$$SOAPWSReference.... and $$$KeyInfoX509.... The default is to use a direct reference if the first argument is a binary security token or to use the Thumbprint if the first argument is a %SYS.X509Credentials instance."}),"\n",(0,s.jsx)(t.li,{children:"If no signature is returned the status argument is set to the error %Status."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"create",children:"Create"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod Create(keyElement As %RegisteredObject = "", signatureOptions As %Integer, referenceOption As %Integer = "") As %XML.Security.Signature\n'})}),"\n",(0,s.jsx)(t.p,{children:"Create a Signature element that is to be signed using the hmac-sha1 algorithm with a symmetric key specified by its KeyInfo element."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"keyElement is the Security element which will supply the symmetric key. keyElement is meaningful only when referenceOption specified. See referenceOption for details."}),"\n",(0,s.jsx)(t.li,{children:"The signatureOptions argument specifies the parts of the SOAP message to be signed. The default is to sign all addressing header, body and timestamp. See %soap.inc definitions of $$$SOAPWSInlcude.... for possibilities."}),"\n",(0,s.jsxs)(t.li,{children:['The referenceOption argument specifies the type of reference which will be in the KeyInfo. If referenceOption is "" or not specified, no KeyInfo is created. This is the default.\n',(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"$$$SOAPWSReferenceEncryptedKey is reference to an EncryptedKey element in this message. The keyElement argument must be specified and is the EncryptedKey element."}),"\n",(0,s.jsx)(t.li,{children:"$$$SOAPWSReferenceEncryptedKeySHA1 is reference by the SHA1 hash of the key contained in the EncryptedKey element specified as the first argument. If the keyElement is not specified, the key from the first EncryptedKey element in the received message is used."}),"\n",(0,s.jsx)(t.li,{children:"$$$SOAPWSReferenceDerivedKey is reference to a DerivedKeyToken element in this message. The keyElement argument must be specified and is the DerivedKeyToken element."}),"\n",(0,s.jsx)(t.li,{children:"$$$SOAPWSReferenceSCT is reference by wsu:Id to a SecurityContextToken element in this message. The keyElement argument must be specified and is the SecurityContextToken element."}),"\n",(0,s.jsx)(t.li,{children:"$$$SOAPWSReferenceSCTIdentifier is reference by Identifier and Instance to a SecurityContextToken element not necessarily in this message. The keyElement argument must be specified and is the SecurityContextToken element."}),"\n",(0,s.jsx)(t.li,{children:"$$$SOAPWSSAML is reference to SAML Assertion which contains an EncryptedKey or BinarySecret element in the KeyInfo that is in the SubjectConfirmationData. The keyElement argument must be specified and is the SAML Assertion element."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"getdefaultmethods",children:"GetDefaultMethods"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetDefaultMethods(Output digest As %String, Output signature As %String, Output hmac As %String) [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Get default digest, signature and hmac methods"}),"\n",(0,s.jsx)(t.h3,{id:"setdigestmethod",children:"SetDigestMethod"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method SetDigestMethod(algorithm As %String)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Set the digest method algorithm to be used for signing. The algorithm is reflected in the Algorithm attribute of the DigestMethod element of each Reference element of the SignedInfo element of the Signature element. Possible values for algortihm are $$$SOAPWSsha1, $$$SOAPWSsha256, $$$SOAPWSsha384 and $$$SOAPWSsha512."}),"\n",(0,s.jsx)(t.h3,{id:"setsignaturemethod",children:"SetSignatureMethod"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method SetSignatureMethod(algorithm As %String)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Set the signature method algorithm to be used for signing. The algorithm is reflected in the Algorithm attribute of the SignatureMethod element the SignedInfo element of the Signature element. Possible values for algortihm are $$$SOAPWSrsasha1, $$$SOAPWSrsasha256, $$$SOAPWSrsasha384 and $$$SOAPWSrsasha512."}),"\n",(0,s.jsx)(t.h3,{id:"signstream",children:"SignStream"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method SignStream(messageStream As %BinaryStream, mimeAttachments As %Net.MIMEPart = "") As %Status\n'})}),"\n",(0,s.jsx)(t.p,{children:"SignStream completes the Signature element by adding the SignedInfo based on X509Credentials and computes the signature value for the XML stream to be signed. messageStream is a stream containing the XML to be signed."}),"\n",(0,s.jsx)(t.p,{children:"If the document is an MTOM document, then the optional mimeAttachments argument contains a single MIME part which has each MIME section as one of its child Parts."}),"\n",(0,s.jsx)(t.p,{children:"The following example creates a stream which contains an XML document whose root object is is given by the oref obj. This oref is assumed to be an instance of an XML-enabled class that has the following properties:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["A property that is projected to XML as the Id attribute. In this example, this is the Signed.Id property.\nproperty that is intended to contain the signature itself and that is projected to XML as the  element. In this example, this is the Signature property. ",(0,s.jsx)(t.code,{children:'set writer=##class(%XML.Writer).%New() set stream=##class(%FileBinaryStream).%New() set status=writer.OutputToStream(stream) if $$$ISERR(status) do $system.OBJ.DisplayError(status) quit set status=writer.RootObject(obj) if $$$ISERR(status) do $system.OBJ.DisplayError(status) quit set x509 = ##class(%SYS.X509Credentials).GetByAlias("MyCredentials") set signature=##class(%XML.Security.Signature).CreateX509( x509,$$$SOAPWSIncludeNone,$$$KeyInfoX509Certificate) // Signature based on id of contained Signed element // Note that the name Signed is arbitrary. do signature.AddReference( ##class(%XML.Security.Reference).Create(obj.Signed.id)) set status=signature.SignStream(stream) if $$$ISERR(status) do $system.OBJ.DisplayError(status) quit // Signature element is property of any name // Signature is an arbitrary property name set obj.Signature=signature // Output the signed stream now that the signature is computed. set stream=##class(%FileBinaryStream).%New() set status=writer.OutputToStream(stream) if $$$ISERR(status) do $system.OBJ.DisplayError(status) quit set status=writer.RootObject(obj) if $$$ISERR(status) do $system.OBJ.DisplayError(status) quit'})]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"signdocument",children:"SignDocument"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method SignDocument(document As %XML.Document, mimeAttachments As %Net.MIMEPart = "") As %Status\n'})}),"\n",(0,s.jsx)(t.p,{children:"SignDocument completes the Signature element by adding the SignedInfo based on X509Credentials and computes the signature value for the parsed XML document to be signed. document is an %XML.Document obtained by parsing the stream ot be signed."}),"\n",(0,s.jsx)(t.p,{children:"If the document is an MTOM document, then the optional mimeAttachments argument contains a single MIME part which has each MIME section as one of its child Parts."}),"\n",(0,s.jsx)(t.p,{children:"The following example creates a stream which contains an XML document whose root object is is given by the oref obj. This oref is assumed to be an instance of an XML-enabled class that has the following properties:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["A property that is projected to XML as the Id attribute. In this example, this is the Signed.Id property.\nproperty that is intended to contain the signature itself and that is projected to XML as the  element. In this example, this is the Signature property. ",(0,s.jsx)(t.code,{children:'set writer=##class(%XML.Writer).%New() set stream=##class(%FileBinaryStream).%New() set status=writer.OutputToStream(stream) if $$$ISERR(status) do $system.OBJ.DisplayError(status) quit set status=writer.RootObject(obj) if $$$ISERR(status) do $system.OBJ.DisplayError(status) quit set x509=##class(%SYS.X509Credentials).GetByAlias("MyCredentials") set signature=##class(%XML.Security.Signature).CreateX509( x509,$$$SOAPWSIncludeNone,$$$KeyInfoX509Certificate) // Signature based on id of contained Signed element // Note that name Signed is arbitrary. do signature.AddReference( ##class(%XML.Security.Reference).Create(obj.Signed.id)) // We parse the stream to create a document which we will sign. set status= ##class(%XML.Document).GetDocumentFromStream(stream,.document) if $$$ISERR(status) do $system.OBJ.DisplayError(status) quit set status=signature.SignDocument(document) if $$$ISERR(status) do $system.OBJ.DisplayError(status) quit // Signature element is property of any name // Signature is arbitrary property name set obj.Signature=signature // Output the signed stream now that the signature is computed. set stream=##class(%FileBinaryStream).%New() set status=writer.OutputToStream(stream) if $$$ISERR(status) do $system.OBJ.DisplayError(status) quit set status=writer.RootObject(obj) if $$$ISERR(status) do $system.OBJ.DisplayError(status) quit'})]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"validatedocument",children:"ValidateDocument"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method ValidateDocument(document As %XML.Document, mimeAttachments As %Net.MIMEPart = "", CAFile As %String = "") As %Status\n'})}),"\n",(0,s.jsx)(t.p,{children:"Validate a %XML.Document containing a parsed XML document which contains a signature. The %XML.Signature element must be obtained from the same instance of %XML.Document that you are validating. If invalid return an error %Status."}),"\n",(0,s.jsx)(t.p,{children:"If the document is an MTOM document, then the optional mimeAttachments argument contains a single MIME part which has each MIME section as one of its child Parts."}),"\n",(0,s.jsx)(t.p,{children:"The CAFile argument is the full path of file which contains the certificate authority certificates which are to be used to validate the signing certificate."}),"\n",(0,s.jsxs)(t.p,{children:['The following example assumes a single argument web service method with the argument named arg. This will usually be the case with an entire message being the argument since Parameter ARGUMENTSTYLE = "message". The document to validate is the SOAP message whose %XML.Document is contained in the ImportHandler property of the service. Also exclusive canonicalization must be used because the entire SOAP envelope is represented in ..Importhandler. If inclusive canonicalization needs to be used, then the ProcessBody or ProcessBodyNode methods must be used which allows access to just the Body contents as a document. ',(0,s.jsx)(t.code,{children:"// Signature element is property of any name. // Signature is arbitrary property name set signature=arg.Signature set status=signature.ValidateDocument(..ImportHandler) if $$$ISERR(status) do $system.OBJ.DisplayError(status) quit"})]}),"\n",(0,s.jsx)(t.h3,{id:"initializeforservice",children:"InitializeForService"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method InitializeForService(service As %SOAP.WebBase, header As %SOAP.Security.Header = "") As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Initialize the signature based on the SignatureOptions of a web client or service. %XML.Security.Signature may be initialized directly by using calls to AddReference."}),"\n",(0,s.jsx)(t.h3,{id:"addrm",children:"AddRM"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method AddRM(service As %SOAP.WebBase) [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Add reference to WS-ReliableMessaging headers"}),"\n",(0,s.jsx)(t.h3,{id:"initializevalue",children:"InitializeValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method InitializeValue(service As %SOAP.WebBase) As %Status [ Internal, Private ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Validate correct size to the Signature element"}),"\n",(0,s.jsx)(t.h3,{id:"addreference",children:"AddReference"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method AddReference(reference As %XML.Security.Reference, doNotReuse As %Boolean = 0)\n"})}),"\n",(0,s.jsx)(t.p,{children:"Add a reference to XML element using an %XML.Security.Reference. The reference may be created by using the ##class(%XML.Security.Reference).Create method. If doNotReuse is true, then this reference will be removed during Reset"}),"\n",(0,s.jsx)(t.h3,{id:"perform",children:"Perform"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Perform(messageStream As %BinaryStream, header As %SOAP.Security.Header) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Complete the Signature element and update the message stream with the new SignatureValue"}),"\n",(0,s.jsx)(t.h3,{id:"sign",children:"Sign"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Sign(document As %XML.Document, header As %SOAP.Security.Header, mimeAttachments As %Net.MIMEPart) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Complete the Signature element by adding the SignedInfo based on X509Credentials and compute the signature value."}),"\n",(0,s.jsx)(t.h3,{id:"getnodebyid",children:"GetNodeById"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetNodeById(uri As %String, document As %XML.Document, node As %XML.Node) As %String [ Internal, Private ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Get node based on id from URI. Return nodeId"}),"\n",(0,s.jsx)(t.h3,{id:"reset",children:"Reset"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Reset() [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reset the Signature element."}),"\n",(0,s.jsx)(t.h3,{id:"validateelement",children:"ValidateElement"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method ValidateElement(document As %XML.Document, service As %SOAP.WebBase = "", mimeAttachments As %Net.MIMEPart = "", CAFile As %String = "") As %String [ Internal ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Validate the security header element. If invalid return an error code."}),"\n",(0,s.jsx)(t.p,{children:"If the document is an MTOM document, then the optional mimeAttachments argument contains a single MIME part which has each MIME section as one of its child Parts."}),"\n",(0,s.jsx)(t.p,{children:"The CAFile argument is the full path of file which contains the certificate authority certificates which are to be used to validate the signing certificate."}),"\n",(0,s.jsx)(t.h3,{id:"computesha1digest",children:"ComputeSha1Digest"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method ComputeSha1Digest(node As %XML.Node, signNodeId As %String, writer As %XML.Writer, prefixList As %String, bitlength As %Integer, isSTR As %Boolean, ByRef text As %FileBinaryStream, mimeAttachments As %Net.MIMEPart) As %xsd.base64Binary\n"})}),"\n",(0,s.jsx)(t.p,{children:"Compute SHA1 digest of an element"})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var s=n(96540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);