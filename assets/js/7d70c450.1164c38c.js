"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[18441],{9162:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>i,default:()=>o,frontMatter:()=>a,toc:()=>l});var r=t(74848),n=t(28453);const a={pagination_prev:null,pagination_next:null},i="Config.ECPServers",l=[{value:"Parameters",id:"parameters",level:2},{value:"CAPITALNAME",id:"capitalname",level:3},{value:"EMSSERVICE",id:"emsservice",level:3},{value:"Properties",id:"properties",level:2},{value:"Address",id:"address",level:3},{value:"BatchMode",id:"batchmode",level:3},{value:"MirrorConnection",id:"mirrorconnection",level:3},{value:"SSLConfig",id:"sslconfig",level:3},{value:"Port",id:"port",level:3},{value:"Methods",id:"methods",level:2},{value:"NameSet",id:"nameset",level:3},{value:"CreateCallBack",id:"createcallback",level:3},{value:"Load",id:"load",level:3},{value:"NetIsECP",id:"netisecp",level:3},{value:"ValidateIP",id:"validateip",level:3},{value:"Debug",id:"debug",level:3},{value:"%OnDeleteCallBack",id:"ondeletecallback",level:3},{value:"%OnValidateObject",id:"onvalidateobject",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"ListFetch",id:"listfetch",level:3},{value:"ListClose",id:"listclose",level:3},{value:"StatusListExecute",id:"statuslistexecute",level:3},{value:"StatusListFetch",id:"statuslistfetch",level:3},{value:"StatusListClose",id:"statuslistclose",level:3},{value:"StatusListSMPExecute",id:"statuslistsmpexecute",level:3},{value:"StatusListSMPFetch",id:"statuslistsmpfetch",level:3},{value:"StatusListSMPClose",id:"statuslistsmpclose",level:3},{value:"StatusListSMPFilterExecute",id:"statuslistsmpfilterexecute",level:3},{value:"StatusListSMPFilterFetch",id:"statuslistsmpfilterfetch",level:3},{value:"StatusListSMPFilterClose",id:"statuslistsmpfilterclose",level:3}];function c(e){const s={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"configecpservers",children:"Config.ECPServers"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Class Config.ECPServers Extends (%Persistent, Config.CommonMultipleMethods, Config.CommonProperties, %SYSTEM.Help) [ Final, Inheritance = right, System = 4 ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["This class allows you to modify and view the [ECPServers] section of the CPF file through programatic APIs. While properties are usually modified through the System Management portal, there may be some occasion where modifying them through the API's is best for your system. In all the Config methods, if you do not specify the CPFFile parameter, the currently active CPF file is used. If you wish to modify a CPF file which is not the currently active one, then specify the CPFFile you wish to modify in the method call.",(0,r.jsx)(s.br,{}),"\nThe Flags parameter does not normally need to be specified; the defaults are usually sufficient for most cases.",(0,r.jsx)(s.br,{}),"\nYou can use either the provided API's (Create/Get/Modify/Delete) to modify the properties by passing in the correct parameters, or use Object syntax to open and directly manipulate the config objects (Open() and Exists()). Most objects created here need only to specify the Name of the object, and 1 or 2 properties since the the defaults are what are commonly used for most cases."]}),"\n",(0,r.jsx)(s.p,{children:"EXAMPLE:"}),"\n",(0,r.jsxs)(s.p,{children:['; Use class methods to create an instance %SYS>s Name="SERVERA" %SYS>s Properties("Address")="127.0.0.10" %SYS>s Status=##Class(Config.ECPServers).Create(Name,.Properties) %SYS>i \'Status w !,"Error="',(0,r.jsx)(s.em,{children:'$SYSTEM.Status.GetErrorText(Status) ; Use class methods to modify properties %SYS>s Status=##Class(Config.ECPServers).Get(Name,.Properties) %SYS>i \'Status w !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status) %SYS>zw Properties Properties("Address")="127.0.0.1" Properties("Port")=1973 %SYS>s Properties("Port")=1972 %SYS>s Status=##Class(Config.ECPServers).Modify(Name,.Properties) %SYS>i \'Status w !,"Error="',(0,r.jsx)(s.em,{children:'$SYSTEM.Status.GetErrorText(Status) ; Now use Objects to modify properties %SYS>s Obj=##Class(Config.ECPServers).Open(Name) ; We could have used i ##Class(Config.ECPServers).Exists(Name,.Obj) instead of Open() %SYS>w Obj.Port 1972 %SYS>s Obj.Port=1975 %SYS>s Status=Obj.%Save() %SYS>i \'Status w !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status) ; Now delete the object we just created %SYS>s Status=##Class(Config.ECPServers).Delete(Name) %SYS>i \'Status w !,"Error="_$SYSTEM.Status.GetErrorText(Status)']}),"\n",(0,r.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(s.h3,{id:"capitalname",children:"CAPITALNAME"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter CAPITALNAME = 1;\n"})}),"\n",(0,r.jsx)(s.p,{children:"Server name is always capitalized."}),"\n",(0,r.jsx)(s.h3,{id:"emsservice",children:"EMSSERVICE"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter EMSSERVICE [ Internal ] = "Namespace";\n'})}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.h3,{id:"address",children:"Address"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Address As Config.Host(MAXLEN = 256, MINLEN = 1) [ Required ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"IP Address to connect to."}),"\n",(0,r.jsx)(s.h3,{id:"batchmode",children:"BatchMode"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property BatchMode As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"ECP Server runs in batch mode."}),"\n",(0,r.jsx)(s.h3,{id:"mirrorconnection",children:"MirrorConnection"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property MirrorConnection As %Integer [ InitialExpression = 0, Required ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"Specifies the behavior of this connection with regard to mirrored database servers."}),"\n",(0,r.jsx)(s.p,{children:"Value:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"0: Non-mirrored connection. Access databases on non-mirror members. Also used to connect to async members to access mirror databases, configured by their database paths."}),"\n",(0,r.jsx)(s.li,{children:"1: Mirrored connection. ECP will automatically find the primary mirror member and will only connect to the primary. Access to mirrored databases is configured by mirror database name."}),"\n",(0,r.jsxs)(s.li,{children:["-1: Mirrored connection restricted to the configured mirror member only. The configured member is the one specified by Address and Port. Like value '1', a connection will be established if the configured member is primary and access to mirrored databases is configured by mirror database name. Unlike '1', if the configured member is a Disaster Recovery member, the connection will be established, allowing read-only access to mirrored databases. If the DR member is promoted, the connection will be dropped and will be re-established when it becomes primary. ",(0,r.jsx)(s.strong,{children:"Warning"}),": This setting is not appropriate in typical configurations where mirroring will automatically fail over, as the new primary won't be found. This is for use in specialized DR configurations, or other long-distance configurations, to prevent the application server from being automatically redirected to a primary in a different data center while allowing local read-only access. There is no system utility to set the value of '-1', but it can be specified via this class interface."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"sslconfig",children:"SSLConfig"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property SSLConfig As %Integer [ InitialExpression = 0, Required ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"Use SSL configuration (%ECPClient) for the ECP connection."}),"\n",(0,r.jsx)(s.h3,{id:"port",children:"Port"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Port As %Integer [ InitialExpression = 1972, Required ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"IP Port to connect to."}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"nameset",children:"NameSet"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method NameSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Force the Server name to be uppercase."}),"\n",(0,r.jsx)(s.h3,{id:"createcallback",children:"CreateCallBack"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateCallBack(Obj As %ObjectHandle, Data As %String) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Called by the Create method during import from a CPF file."}),"\n",(0,r.jsx)(s.h3,{id:"load",children:"Load"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Load(Obj As %ObjectHandle = "", Flags As %Integer = 1) As %Status [ Internal ]\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Load the parameters into memory and activate.",(0,r.jsx)(s.br,{}),"\nParameters:",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"Obj"}),' = Handle to the object which caused the load. If "", then load everything, only called from STU.',(0,r.jsx)(s.br,{}),"\nIf a delete operation, then Obj is the NAME of the item which was deleted since the oject itself has already been deleted.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"Flags"})," = Type of modification.",(0,r.jsx)(s.br,{}),"\n0 - Modify",(0,r.jsx)(s.br,{}),"\n1 - Create/Insert",(0,r.jsx)(s.br,{}),"\n2 - Delete"]}),"\n",(0,r.jsx)(s.h3,{id:"netisecp",children:"NetIsECP"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NetIsECP(Name As %String, Data As %String) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"handle ECP definitions."}),"\n",(0,r.jsx)(s.h3,{id:"validateip",children:"ValidateIP"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ValidateIP(host As %String) As %String [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"debug",children:"Debug"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Debug() [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"ondeletecallback",children:"%OnDeleteCallBack"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %OnDeleteCallBack(Obj As %ObjectHandle) As %Status [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Called from %OnDelete().",(0,r.jsx)(s.br,{}),"\nAny error returned here will cause the delete to fail."]}),"\n",(0,r.jsx)(s.h3,{id:"onvalidateobject",children:"%OnValidateObject"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnValidateObject() As %Status [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["This method is called during %Save().",(0,r.jsx)(s.br,{}),"\nAny error returned here will cause the save to fail.<br<"]}),"\n",(0,r.jsx)(s.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListExecute(ByRef %qHandle As %Binary, Names As %String = "*", CPFFile As %String = "", Flags As %Integer = 0, Format As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,r.jsx)(s.p,{children:"List ECPServers in a CPF file."}),"\n",(0,r.jsxs)(s.p,{children:["Parameters:",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"Names"})," - Comma separated list of ECPServer names",(0,r.jsx)(s.br,{}),'\n"*" - All records match',(0,r.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,r.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,r.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"CPFFile"})," - Name of the CPF file to use. A null string means use the active CPF file.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"Flags"})," - Currently ignored.",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.strong,{children:"Format"}),(0,r.jsx)(s.br,{}),"\n0 - Standard report list format",(0,r.jsx)(s.br,{}),"\n1 - ^CONFIG global format",(0,r.jsx)(s.br,{}),"\n2 - CPF file format format",(0,r.jsx)(s.br,{}),"\nNote: This query may change in future versions"]}),"\n",(0,r.jsx)(s.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"listclose",children:"ListClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"statuslistexecute",children:"StatusListExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod StatusListExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Return the status of ECP servers.",(0,r.jsx)(s.br,{}),"\nInternal use only."]}),"\n",(0,r.jsx)(s.h3,{id:"statuslistfetch",children:"StatusListFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod StatusListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = StatusListExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"statuslistclose",children:"StatusListClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod StatusListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = StatusListExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"statuslistsmpexecute",children:"StatusListSMPExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod StatusListSMPExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Return the status of ECP servers for SMP display.",(0,r.jsx)(s.br,{}),"\nInternal use only."]}),"\n",(0,r.jsx)(s.h3,{id:"statuslistsmpfetch",children:"StatusListSMPFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod StatusListSMPFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = StatusListSMPExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"statuslistsmpclose",children:"StatusListSMPClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod StatusListSMPClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = StatusListSMPExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"statuslistsmpfilterexecute",children:"StatusListSMPFilterExecute"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod StatusListSMPFilterExecute(ByRef qHandle As %Binary, Filter As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,r.jsx)(s.h3,{id:"statuslistsmpfilterfetch",children:"StatusListSMPFilterFetch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod StatusListSMPFilterFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = StatusListSMPFilterExecute ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"statuslistsmpfilterclose",children:"StatusListSMPFilterClose"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod StatusListSMPFilterClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = StatusListSMPFilterExecute ]\n"})})]})}function o(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>l});var r=t(96540);const n={},a=r.createContext(n);function i(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);