"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[29003],{18839:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>i,default:()=>c,frontMatter:()=>l,toc:()=>r});var s=t(74848),a=t(28453);const l={pagination_prev:null,pagination_next:null},i="%ZEN.Component.control",r=[{value:"Parameters",id:"parameters",level:2},{value:"SYSMODULE",id:"sysmodule",level:3},{value:"DEFAULTCONTROLCLASS",id:"defaultcontrolclass",level:3},{value:"DEFAULTCLIENTTYPE",id:"defaultclienttype",level:3},{value:"Properties",id:"properties",level:2},{value:"value",id:"value",level:3},{value:"originalValue",id:"originalvalue",level:3},{value:"clientType",id:"clienttype",level:3},{value:"controlClass",id:"controlclass",level:3},{value:"tabIndex",id:"tabindex",level:3},{value:"controlStyle",id:"controlstyle",level:3},{value:"onchange",id:"onchange",level:3},{value:"onclick",id:"onclick",level:3},{value:"ondblclick",id:"ondblclick",level:3},{value:"onfocus",id:"onfocus",level:3},{value:"onblur",id:"onblur",level:3},{value:"onkeypress",id:"onkeypress",level:3},{value:"onkeydown",id:"onkeydown",level:3},{value:"onkeyup",id:"onkeyup",level:3},{value:"onmouseout",id:"onmouseout",level:3},{value:"onmouseover",id:"onmouseover",level:3},{value:"onmouseup",id:"onmouseup",level:3},{value:"onmousedown",id:"onmousedown",level:3},{value:"ontouchstart",id:"ontouchstart",level:3},{value:"ontouchend",id:"ontouchend",level:3},{value:"ontouchmove",id:"ontouchmove",level:3},{value:"onvalidate",id:"onvalidate",level:3},{value:"onsubmit",id:"onsubmit",level:3},{value:"disabled",id:"disabled",level:3},{value:"readOnly",id:"readonly",level:3},{value:"required",id:"required",level:3},{value:"invalid",id:"invalid",level:3},{value:"invalidMessage",id:"invalidmessage",level:3},{value:"requiredMessage",id:"requiredmessage",level:3},{value:"dataBinding",id:"databinding",level:3},{value:"Methods",id:"methods",level:2},{value:"%Name",id:"name",level:3},{value:"sysName",id:"sysname",level:3},{value:"%SetDefaultValues",id:"setdefaultvalues",level:3},{value:"ReallyRefreshContents",id:"reallyrefreshcontents",level:3},{value:"%GetForm",id:"getform",level:3},{value:"setDisabled",id:"setdisabled",level:3},{value:"getDisabled",id:"getdisabled",level:3},{value:"setReadOnly",id:"setreadonly",level:3},{value:"getReadOnly",id:"getreadonly",level:3},{value:"setValue",id:"setvalue",level:3},{value:"getValue",id:"getvalue",level:3},{value:"normalizeValue",id:"normalizevalue",level:3},{value:"onSerialize",id:"onserialize",level:3},{value:"unformatValue",id:"unformatvalue",level:3},{value:"formatValue",id:"formatvalue",level:3},{value:"getProperty",id:"getproperty",level:3},{value:"setProperty",id:"setproperty",level:3},{value:"focus",id:"focus",level:3},{value:"select",id:"select",level:3},{value:"onchangeHandler",id:"onchangehandler",level:3},{value:"isModified",id:"ismodified",level:3},{value:"getForm",id:"getform-1",level:3},{value:"validationHandler",id:"validationhandler",level:3},{value:"isValid",id:"isvalid",level:3},{value:"getInvalidReason",id:"getinvalidreason",level:3},{value:"getDragData",id:"getdragdata",level:3},{value:"dragStartHandler",id:"dragstarthandler",level:3},{value:"dropStartHandler",id:"dropstarthandler",level:3}];function o(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"zencomponentcontrol",children:"%ZEN.Component.control"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Class %ZEN.Component.control Extends component [ Abstract, Deprecated, System = 3 ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Base class for controls.",(0,s.jsx)(n.br,{}),"\nA control is a specialized type of component that can be placed within a form. Typically controls are used to allow the user to display and edit values (such as text controls) or to let the user take actions (such as button controls).",(0,s.jsx)(n.br,{}),"\nMost controls define a value (via the value) that is the data value associated with the control. This value can be submitted to the server as part of a form submit operation.",(0,s.jsx)(n.br,{}),"\nControls define a set of common event handler properties, such as onclick that let you define a JavaScript expression that is executed when a given event occurs within the control.",(0,s.jsx)(n.br,{}),"\nUsing the ZEN Model-View-Controller mechanism, you can bind data values to controls within a form. This provides a way to automatically set the value of a control to a property within a DataModel object.",(0,s.jsx)(n.br,{}),"\nControls work together with a form to provide support for data validation and change tracking. Each control can define whether its current value is valid or not.",(0,s.jsx)(n.br,{}),"\nBy default controls support drag-and-drop in the following way:",(0,s.jsx)(n.br,{}),"\nA drag from a control will drag the current value of the control.",(0,s.jsx)(n.br,{}),"\nA drop onto a control will set the current value of the control to the value of the drag data object. The text value is used if different than the logical value."]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(n.h3,{id:"sysmodule",children:"SYSMODULE"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Parameter SYSMODULE = "form";\n'})}),"\n",(0,s.jsx)(n.h3,{id:"defaultcontrolclass",children:"DEFAULTCONTROLCLASS"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter DEFAULTCONTROLCLASS As STRING;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The default css class used for the main element within this control. This is overridden by subclasses."}),"\n",(0,s.jsx)(n.h3,{id:"defaultclienttype",children:"DEFAULTCLIENTTYPE"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter DEFAULTCLIENTTYPE As STRING;\n"})}),"\n",(0,s.jsx)(n.p,{children:"The default value for the clientType property."}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(n.h3,{id:"value",children:"value"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property value As %ZEN.Datatype.value(ZENEXPRESSION = 1);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Default value displayed within this control. This is a special value in that it is automatically intialized when a form is displayed.",(0,s.jsx)(n.br,{}),"\nDo not use this property directly on the client; instead used the getValue method to get the current value of a control."]}),"\n",(0,s.jsx)(n.h3,{id:"originalvalue",children:"originalValue"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property originalValue As %ZEN.Datatype.value;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Original value for this control before any user modification. It is used to detect which controls have been modified.",(0,s.jsx)(n.br,{}),"\nThis is a special value in that it is automatically intialized when a form is displayed.",(0,s.jsx)(n.br,{}),"\nDo not use this property directly on the client; instead used the getProperty method.",(0,s.jsx)(n.br,{}),"\nNote that setting this on the client (via setProperty) will reset it to the current value of this control."]}),"\n",(0,s.jsx)(n.h3,{id:"clienttype",children:"clientType"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Property clientType As %ZEN.Datatype.string(VALUELIST = ",string,boolean,integer,float") [ InitialExpression = {..#DEFAULTCLIENTTYPE} ];\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Indicates the client-side (JavaScript) type that should be used for this control's value.",(0,s.jsx)(n.br,{}),"\nBy default controls treat their values as strings with no client-side normalization.",(0,s.jsx)(n.br,{}),"\nA control, or a page containing the control, can override this to indicate that this control displays a non-string value. The client-side logic will then try to convert the value to the appropriate client-side type whenever the value of the control is set.",(0,s.jsx)(n.br,{}),"\nPossible values are:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"'string' - the control will trim leading and trailing spaces from its value."}),"\n",(0,s.jsx)(n.li,{children:"'boolean' - the control will convert its value to true or false."}),"\n",(0,s.jsx)(n.li,{children:"'integer' - the control will convert its value to an integer or '' for an invalid integer."}),"\n",(0,s.jsx)(n.li,{children:"'float' - the control will convert its value to an float or '' for an invalid float."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"controlclass",children:"controlClass"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property controlClass As %ZEN.Datatype.cssClass [ InitialExpression = {..#DEFAULTCONTROLCLASS} ];\n"})}),"\n",(0,s.jsx)(n.p,{children:"Optional CSS class used for the primary HTML element displayed for this control."}),"\n",(0,s.jsx)(n.h3,{id:"tabindex",children:"tabIndex"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property tabIndex As %ZEN.Datatype.integer;\n"})}),"\n",(0,s.jsx)(n.p,{children:"If defined, this is used to provide a value for the HTML tabIndex attribute. This is used by the browser to control the tab order of controls within a form."}),"\n",(0,s.jsx)(n.h3,{id:"controlstyle",children:"controlStyle"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property controlStyle As %ZEN.Datatype.style;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Optional CSS style applied to the primary HTML element displayed for this control.",(0,s.jsx)(n.br,{}),"\nHow, and whether, this CSS style is used is up to the actual control implementation.",(0,s.jsx)(n.br,{}),"\nThis property is provided as a convenience. It is more typical to provide style information via a style sheet."]}),"\n",(0,s.jsx)(n.h3,{id:"onchange",children:"onchange"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Property onchange As %ZEN.Datatype.eventHandler(HANDLER = """_..%Self()_"".onchangeHandler();");\n'})}),"\n",(0,s.jsx)(n.p,{children:"onchange event handler: This event is fired when the value of the control changes. Note that controls fire this event indirectly; the actual onchange event is sent to a built-in handler that notifies the form that owns this control of the modification."}),"\n",(0,s.jsx)(n.h3,{id:"onclick",children:"onclick"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property onclick As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(n.p,{children:"onclick event handler: This event is fired when the mouse is clicked on the control."}),"\n",(0,s.jsx)(n.h3,{id:"ondblclick",children:"ondblclick"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property ondblclick As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(n.p,{children:"ondblclick event handler: This event is fired when the mouse is double-clicked on the control."}),"\n",(0,s.jsx)(n.h3,{id:"onfocus",children:"onfocus"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property onfocus As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(n.p,{children:"onfocus event handler: This event is fired when the control is given focus."}),"\n",(0,s.jsx)(n.h3,{id:"onblur",children:"onblur"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property onblur As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(n.p,{children:"onblur event handler: This event is fired when the control loses focus."}),"\n",(0,s.jsx)(n.h3,{id:"onkeypress",children:"onkeypress"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property onkeypress As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(n.p,{children:"onkeypress event handler: This event is fired when a key is pressed when this control has focus."}),"\n",(0,s.jsx)(n.h3,{id:"onkeydown",children:"onkeydown"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property onkeydown As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(n.p,{children:"onkeydown event handler: This event is fired when a key is pressed when this control has focus."}),"\n",(0,s.jsx)(n.h3,{id:"onkeyup",children:"onkeyup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property onkeyup As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(n.p,{children:"onkeyup event handler: This event is fired when a key is released when this control has focus."}),"\n",(0,s.jsx)(n.h3,{id:"onmouseout",children:"onmouseout"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property onmouseout As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(n.p,{children:"onmouseout event handler: This event is fired when the mouse pointer leaves the area of the control."}),"\n",(0,s.jsx)(n.h3,{id:"onmouseover",children:"onmouseover"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property onmouseover As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(n.p,{children:"onmouseover event handler: This event is fired when the mouse pointer enters the area of the control."}),"\n",(0,s.jsx)(n.h3,{id:"onmouseup",children:"onmouseup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property onmouseup As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(n.p,{children:"onmouseup event handler: This event is fired when a mouse button is pressed while within the area of the control."}),"\n",(0,s.jsx)(n.h3,{id:"onmousedown",children:"onmousedown"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property onmousedown As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(n.p,{children:"onmousedown event handler: This event is fired when a mouse button is released while within the area of the control."}),"\n",(0,s.jsx)(n.h3,{id:"ontouchstart",children:"ontouchstart"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property ontouchstart As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(n.p,{children:"ontouchstart event handler: This event is fired on a touch screen device when a figure or stylus initially contacts the screen within the area of the control."}),"\n",(0,s.jsx)(n.h3,{id:"ontouchend",children:"ontouchend"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property ontouchend As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(n.p,{children:"ontouchend event handler: This event is fired on a touch screen device when the last figure or stylus breaks contact the screen at the end of a gesture."}),"\n",(0,s.jsx)(n.h3,{id:"ontouchmove",children:"ontouchmove"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property ontouchmove As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(n.p,{children:"ontouchmove event handler: This event is fired on a touch screen device when the one or more of the active contact points changes position as part of a gesture input."}),"\n",(0,s.jsx)(n.h3,{id:"onvalidate",children:"onvalidate"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Property onvalidate As %ZEN.Datatype.eventHandler(HANDLER = "");\n'})}),"\n",(0,s.jsx)(n.p,{children:"onvalidate event handler: This event is fired when this control's value is validated by its parent form. Return false if the value of this control is invalid."}),"\n",(0,s.jsx)(n.h3,{id:"onsubmit",children:"onsubmit"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Property onsubmit As %ZEN.Datatype.eventHandler(HANDLER = "");\n'})}),"\n",(0,s.jsx)(n.p,{children:"onsubmit event handler: This event is fired when the form this control belongs to is submitted. This gives controls a chance to supply or modify the value they submit."}),"\n",(0,s.jsx)(n.h3,{id:"disabled",children:"disabled"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property disabled As %ZEN.Datatype.boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(n.p,{children:"If true, this control is disabled."}),"\n",(0,s.jsx)(n.h3,{id:"readonly",children:"readOnly"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property readOnly As %ZEN.Datatype.boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(n.p,{children:"If true, this control is readOnly."}),"\n",(0,s.jsx)(n.h3,{id:"required",children:"required"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property required As %ZEN.Datatype.boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(n.p,{children:"If true, this control is required. That is, a user must supply a value for this control or the default form validation logic will fail."}),"\n",(0,s.jsx)(n.h3,{id:"invalid",children:"invalid"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property invalid As %ZEN.Datatype.boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(n.p,{children:"Set this true when the value of this control is known to be invalid. Typically this is done by the form validation logic to to display this in a way that indicates it contains an invalid value."}),"\n",(0,s.jsx)(n.h3,{id:"invalidmessage",children:"invalidMessage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Property invalidMessage As %ZEN.Datatype.caption [ InitialExpression = "out-of-range or invalid value." ];\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Value displayed in alert box by the form validate method when the contents of this control are invalid.",(0,s.jsx)(n.br,{}),"\nThis is a localized value."]}),"\n",(0,s.jsx)(n.h3,{id:"requiredmessage",children:"requiredMessage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Property requiredMessage As %ZEN.Datatype.caption [ InitialExpression = "required." ];\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Value displayed in alert box by the form validate method when this control is required and does not have a value.",(0,s.jsx)(n.br,{}),"\nThis is a localized value."]}),"\n",(0,s.jsx)(n.h3,{id:"databinding",children:"dataBinding"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property dataBinding As %ZEN.Datatype.string;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Optional. If this control belongs to a form that is associated with a dataController, this specifies the name of the property within the dataController that will provide the value for this control."}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"name",children:"%Name"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Method %Name() As %String [ CodeMode = expression ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Utility method used by subclasses to write out the ",(0,s.jsx)(n.strong,{children:"name"}),"attribute for the primary HTML element of this control.",(0,s.jsx)(n.br,{}),"\nNames are of the form: $V_id",(0,s.jsx)(n.br,{}),'\nIf name starts with "IRIS" or "Cache" then it is assumed to be a built-in variable and is not escaped.']}),"\n",(0,s.jsx)(n.h3,{id:"sysname",children:"sysName"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod sysName() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Client-side version of the %Name method. Use this to contruct control names when creating controls via DHTML that may be submitted by a Zen form."}),"\n",(0,s.jsx)(n.h3,{id:"setdefaultvalues",children:"%SetDefaultValues"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Method %SetDefaultValues()\n"})}),"\n",(0,s.jsx)(n.p,{children:"This method fills in reasonable default values for this control. Used by tools (such as the Control Tester) to dynamically create controls."}),"\n",(0,s.jsx)(n.h3,{id:"reallyrefreshcontents",children:"ReallyRefreshContents"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Method ReallyRefreshContents() [ Final, Internal, ZenMethod ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Intercept this internal method so that we do not have to copy code into every control."}),"\n",(0,s.jsx)(n.h3,{id:"getform",children:"%GetForm"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Method %GetForm() As %ZEN.Component.form\n"})}),"\n",(0,s.jsx)(n.p,{children:'Server-side method. Find the form object that this control belongs to. Return "" if there is no form.'}),"\n",(0,s.jsx)(n.h3,{id:"setdisabled",children:"setDisabled"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod setDisabled(flag) [ Final, Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Client-side method to set disabled state of this control."}),"\n",(0,s.jsx)(n.h3,{id:"getdisabled",children:"getDisabled"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod getDisabled() As %Boolean [ Final, Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Client-side method to get the disabled state of this control."}),"\n",(0,s.jsx)(n.h3,{id:"setreadonly",children:"setReadOnly"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod setReadOnly(flag) [ Final, Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Client-side method to set disabled state of this control."}),"\n",(0,s.jsx)(n.h3,{id:"getreadonly",children:"getReadOnly"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod getReadOnly() As %Boolean [ Final, Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Client-side method to get the disabled state of this control."}),"\n",(0,s.jsx)(n.h3,{id:"setvalue",children:"setValue"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod setValue(value, value2) [ Final, Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Client-side method to set the value associated with this control. value2 is an optional, second parameter used by some controls (such as dataCombo)."}),"\n",(0,s.jsx)(n.h3,{id:"getvalue",children:"getValue"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod getValue() As %String [ Final, Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Client-side method to return the value associated with this control."}),"\n",(0,s.jsx)(n.h3,{id:"normalizevalue",children:"normalizeValue"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod normalizeValue(val) As %String [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Normalize the type of val based on the clientType of this control."}),"\n",(0,s.jsx)(n.h3,{id:"onserialize",children:"onSerialize"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod onSerialize() [ Language = javascript ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is called when the client serializes this object.",(0,s.jsx)(n.br,{}),"\nThis gives us a chance to make sure that the value property is updated to have the current value displayed within the control. This version will take care of this for native controls. Custom controls must either ensure that the value property matches the current value of the control or override this method."]}),"\n",(0,s.jsx)(n.h3,{id:"unformatvalue",children:"unformatValue"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod unformatValue(val) [ Abstract, Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"If defined, convert display value of this control to its internal value."}),"\n",(0,s.jsx)(n.h3,{id:"formatvalue",children:"formatValue"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod formatValue(val) [ Abstract, Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"If defined, convert the internal value of this control into a display value."}),"\n",(0,s.jsx)(n.h3,{id:"getproperty",children:"getProperty"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod getProperty(property, key) As %String [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Override to get current value of control."}),"\n",(0,s.jsx)(n.h3,{id:"setproperty",children:"setProperty"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod setProperty(property, value, value2) [ Language = javascript ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Set the value of a named property.",(0,s.jsx)(n.br,{}),"\nAssume that subclasses that simply wrap HTML controls have named the control 'control' or else have overridden this method."]}),"\n",(0,s.jsx)(n.h3,{id:"focus",children:"focus"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod focus() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Client-side method to give input focus to this control."}),"\n",(0,s.jsx)(n.h3,{id:"select",children:"select"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod select() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Client-side method to select the contents of this control."}),"\n",(0,s.jsx)(n.h3,{id:"onchangehandler",children:"onchangeHandler"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod onchangeHandler() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"This built-in event handler is called by the HTML control associated with the control to raise notification that the control's value has changed."}),"\n",(0,s.jsx)(n.h3,{id:"ismodified",children:"isModified"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod isModified() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Return true if the current value of this control is different than its orginal value."}),"\n",(0,s.jsx)(n.h3,{id:"getform-1",children:"getForm"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod getForm() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Find the form object that this control belongs to. Return null if there is no form."}),"\n",(0,s.jsx)(n.h3,{id:"validationhandler",children:"validationHandler"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod validationHandler() [ Language = javascript ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This client-side method is called by the form object's validate to test if the contents of this control are valid.",(0,s.jsx)(n.br,{}),"\nThis method does the following:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If this control is required, it tests that a value has been supplied."}),"\n",(0,s.jsx)(n.li,{children:"If this control has an onvalidate callback defined, it calls it."}),"\n",(0,s.jsxs)(n.li,{children:["Otherwise, it invokes the isValid method for this control to perform control-specific validation logic.\nReadonly and disabled controls are always considered to be valid. A subclass can override this method to provide additional behavior, but the overridden method should perform the above actions.",(0,s.jsx)(n.br,{}),"\nReturns true if the control value is valid; false otherwise."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"isvalid",children:"isValid"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod isValid() [ Language = javascript ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This method is called by the form validation mechanism to test if the current contents of this control are valid.",(0,s.jsx)(n.br,{}),"\nReturns true if the control value is valid; false otherwise. Subclasses can override this to provide specific behavior.",(0,s.jsx)(n.br,{}),"\nThe default behavior is to return true."]}),"\n",(0,s.jsx)(n.h3,{id:"getinvalidreason",children:"getInvalidReason"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod getInvalidReason() [ Language = javascript ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This method is called by the form validation mechanism in order to get an invalid message to display for this control.",(0,s.jsx)(n.br,{}),"\nThis is called by the form's validate method after it has determined that this control has an invalid value."]}),"\n",(0,s.jsx)(n.h3,{id:"getdragdata",children:"getDragData"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod getDragData(dragData) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Fill in the zenDragData object for this control. This is called when a drag operation starts on this control. Subclasses can override this to provide customized behavior."}),"\n",(0,s.jsx)(n.h3,{id:"dragstarthandler",children:"dragStartHandler"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod dragStartHandler(dragData) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Default drag handler for controls."}),"\n",(0,s.jsx)(n.h3,{id:"dropstarthandler",children:"dropStartHandler"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClientMethod dropStartHandler(dragData) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Default drop handler for controls."})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(96540);const a={},l=s.createContext(a);function i(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);