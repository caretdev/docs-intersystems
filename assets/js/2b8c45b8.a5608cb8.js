"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[66687],{95393:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>o,frontMatter:()=>a,toc:()=>c});var s=n(74848),r=n(28453);const a={pagination_prev:null,pagination_next:null},l="%Library.AbstractResultSet",c=[{value:"Properties",id:"properties",level:2},{value:"RuntimeMode",id:"runtimemode",level:3},{value:"Data",id:"data",level:3},{value:"Methods",id:"methods",level:2},{value:"Prepare",id:"prepare",level:3},{value:"Execute",id:"execute",level:3},{value:"%Execute",id:"execute-1",level:3},{value:"Next",id:"next",level:3},{value:"%Next",id:"next-1",level:3},{value:"GetData",id:"getdata",level:3},{value:"%GetData",id:"getdata-1",level:3},{value:"Get",id:"get",level:3},{value:"%Get",id:"get-1",level:3},{value:"GetDataByName",id:"getdatabyname",level:3},{value:"GetObject",id:"getobject",level:3},{value:"Close",id:"close",level:3},{value:"GetColumnCount",id:"getcolumncount",level:3},{value:"GetColumnName",id:"getcolumnname",level:3},{value:"GetColumnHeader",id:"getcolumnheader",level:3},{value:"GetParamCount",id:"getparamcount",level:3},{value:"GetParamName",id:"getparamname",level:3},{value:"QueryIsValid",id:"queryisvalid",level:3},{value:"ContainsId",id:"containsid",level:3},{value:"GetExtent",id:"getextent",level:3},{value:"RunQuery",id:"runquery",level:3}];function i(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"libraryabstractresultset",children:"%Library.AbstractResultSet"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Library.AbstractResultSet Extends %IResultSet [ Abstract, System = 2 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Abstract version of the resultset which specific implementations of result sets inherit from."}),"\n",(0,s.jsx)(t.p,{children:"A result set is a type of result returned by executing either a SELECT statement or a CALL statement. Please refer to %SQL.Statement and %SQL.StatementResult for more information on how to prepare dynamic SQL statements and how to process the results the of executing them."}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"runtimemode",children:"RuntimeMode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property RuntimeMode As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Use this method to set the SQL runtime mode for the query to be executed. Setting the runtime mode for this ResultSet does not permanently change the $zu(115,5) value. Possible values mode are:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"0 for LOGICAL mode."}),"\n",(0,s.jsx)(t.li,{children:"1 for ODBC mode."}),"\n",(0,s.jsx)(t.li,{children:"2 for DISPLAY mode."}),"\n",(0,s.jsx)(t.li,{children:'"" to use the process wide $zu(115,5) value.'}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"data",children:"Data"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Data As %String [ MultiDimensional ];\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Used to store the data returned from the resultset by column name. This can be accessed directly for more performance than the Get and GetDataByName as it avoids a method call. For example code that said: ",(0,s.jsx)(t.code,{children:'While result.Next() { Write result.Get("Name"),result.Get("Salary"),! } ; Becomes this faster code While result.Next() { Write $get(result.Data("Name")),$get(result.Data("Salary")),! }'})," Note that as this 'Data' property is multidimensional if there is no such column name as 'Salary' you will get an UNDEFINED error without the $get around it. If there are two columns with the same name in the result set then the second one will be the one referenced by the 'Data' property. If you need to refer to both of them use the GetData and give the position of the column you want."]}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"prepare",children:"Prepare"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Prepare(args...) As %Status\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Use this method with ",(0,s.jsx)(t.strong,{children:"dynamic"})," queries to provide the query to be executed. In the case of the %DynamicQuery:SQL query, p1 is a string containing an SQL query. The query may contain parameters represented by ",(0,s.jsx)(t.strong,{children:"?"})," characters within the query. The values of any parameters are supplied via the Execute method. For example: ",(0,s.jsx)(t.code,{children:'Set result=##class(%ResultSet).%New("%DynamicQuery:SQL") Do result.Prepare("SELECT Name,City FROM Person WHERE Name %STARTSWITH ? AND City = ?") Do result.Execute("A","Boston") While result.Next() { Write result.Data("Name"),result.Data("City"),! }'})]}),"\n",(0,s.jsx)(t.h3,{id:"execute",children:"Execute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Execute(args...) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Executes the current query."}),"\n",(0,s.jsx)(t.p,{children:"The arguments p1... supply the value of any parameters the query may have."}),"\n",(0,s.jsx)(t.h3,{id:"execute-1",children:"%Execute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Execute(args...) As %Library.Status [ CodeMode = call ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"alias for new result set interface"}),"\n",(0,s.jsx)(t.h3,{id:"next",children:"Next"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Next(ByRef sc As %Status) As %Integer\n"})}),"\n",(0,s.jsx)(t.p,{children:"Advance the result set cursor to the next row. Returns 0 if the cursor is at the end of the result set."}),"\n",(0,s.jsx)(t.h3,{id:"next-1",children:"%Next"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Next(ByRef sc As %Status) As %Integer [ CodeMode = call ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getdata",children:"GetData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetData(n As %Integer) As %String [ Abstract ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the value of column n in the current row of the result set."}),"\n",(0,s.jsx)(t.h3,{id:"getdata-1",children:"%GetData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetData(n As %Integer) As %String [ CodeMode = call ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"get",children:"Get"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Get(name As %String) As %String [ Abstract ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the value of the column with the name name in the current row of the result set."}),"\n",(0,s.jsx)(t.p,{children:"If name is not a valid column name, this method returns an empty string. Look at updating the code to use the Data multidimensional property to access the fields faster than using this method call."}),"\n",(0,s.jsx)(t.h3,{id:"get-1",children:"%Get"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Get(name As %String) As %String [ CodeMode = call ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getdatabyname",children:"GetDataByName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetDataByName(name As %String) As %String [ Abstract ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the value of the column with the name name in the current row of the result set."}),"\n",(0,s.jsx)(t.p,{children:"If name is not a valid column name, this method returns an empty string."}),"\n",(0,s.jsx)(t.p,{children:"Note: this method has been superceded by the equivalent Get method."}),"\n",(0,s.jsx)(t.h3,{id:"getobject",children:"GetObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetObject() As %RegisteredObject [ Abstract ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"If this query returns the object Id then return the oref you get from opening an object with this id."}),"\n",(0,s.jsx)(t.h3,{id:"close",children:"Close"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Close() As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Closes the current result set cursor."}),"\n",(0,s.jsx)(t.h3,{id:"getcolumncount",children:"GetColumnCount"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetColumnCount() As %Integer [ Abstract ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the number of columns in the result set."}),"\n",(0,s.jsx)(t.h3,{id:"getcolumnname",children:"GetColumnName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetColumnName(n As %Integer) As %String [ Abstract ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the name of column n in the result set."}),"\n",(0,s.jsx)(t.h3,{id:"getcolumnheader",children:"GetColumnHeader"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetColumnHeader(n As %Integer) As %String [ Abstract ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the column header for column n in the result set."}),"\n",(0,s.jsx)(t.h3,{id:"getparamcount",children:"GetParamCount"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetParamCount() As %Integer [ Abstract, CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the number of input parameters for the current query."}),"\n",(0,s.jsx)(t.h3,{id:"getparamname",children:"GetParamName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetParamName(n As %Integer) As %String [ Abstract, CodeMode = expression, ProcedureBlock = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the name of input parameter n for the current query."}),"\n",(0,s.jsx)(t.h3,{id:"queryisvalid",children:"QueryIsValid"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method QueryIsValid() As %Integer [ Abstract, CodeMode = expression ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Returns true (1) if the ClassName and QueryName properties of this ",(0,s.jsx)(t.strong,{children:"%ResultSet"})," object refer to a valid class query. Otherwise it returns false (0)."]}),"\n",(0,s.jsx)(t.h3,{id:"containsid",children:"ContainsId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method ContainsId() As %Integer [ Abstract, CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"If the current query contains an object Id (based on the CONTAINSID parameter being set), return the column position of the object Id. Otherwise return 0."}),"\n",(0,s.jsx)(t.h3,{id:"getextent",children:"GetExtent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetExtent() As %String [ Abstract, CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"The name of the extent that this query will return Id values from (based on the EXTENT parameter being set). Only returns a value if the query contains Id values."}),"\n",(0,s.jsx)(t.h3,{id:"runquery",children:"RunQuery"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod RunQuery(ClassName As %String, QueryName As %String, args...)\n"})}),"\n",(0,s.jsx)(t.p,{children:"This is a diagnostic function; it runs the specified query and prints the output to the console."})]})}function o(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>c});var s=n(96540);const r={},a=s.createContext(r);function l(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);