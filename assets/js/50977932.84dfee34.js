"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[64595],{3117:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>o,default:()=>d,frontMatter:()=>a,toc:()=>l});var r=s(74848),n=s(28453);const a={pagination_prev:null,pagination_next:null},o="%SQL.CustomResultSet",l=[{value:"Parameters",id:"parameters",level:2},{value:"%statementmetadata;",id:"statementmetadata",level:3},{value:"%statementmetadataext;",id:"statementmetadataext",level:3},{value:"%statementobjects;",id:"statementobjects",level:3},{value:"%statementparameters;",id:"statementparameters",level:3},{value:"%statementactual;",id:"statementactual",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"%OpenCursor",id:"opencursor",level:3},{value:"%OnClose",id:"onclose",level:3},{value:"%CloseCursor",id:"closecursor",level:3},{value:"%Get",id:"get",level:3},{value:"%GetData",id:"getdata",level:3},{value:"%SendODBC",id:"sendodbc",level:3},{value:"%SendObjects",id:"sendobjects",level:3},{value:"%GetSerializedMetadata",id:"getserializedmetadata",level:3}];function i(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"sqlcustomresultset",children:"%SQL.CustomResultSet"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Class %SQL.CustomResultSet Extends %SQL.IResultSet [ Abstract, System = 4 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"%SQL.CustomResultSet is the root class for custom result sets. You can extend this class to implement custom result sets that can be instantiated and returned as dynamic result sets by a stored procedure. Custom result sets are similar to queries with TYPE = %Library.Query. Subclassing %SQL.CustomResultSet has a few advantages over custom queries. Result sets are more efficient when interacting with the server. The metadata for a result set is constructed from the class definition so there is never a need for ROWSPEC. Also, %SQL.CustomResultSet defines a more object-oriented interface."}),"\n",(0,r.jsx)(t.p,{children:"You can make custom result sets available to dynamic SQL by implementing a class method projected as a stored procedure. An example of a custom result set is available in the SAMPLES database. There is also an example of creating a stored procedure that returns an instance of a custom result set to the caller. Such a procedure can be invoked using the embedded or dynamic CALL statement."}),"\n",(0,r.jsx)(t.p,{children:"When subclassing %SQL.CustomResultSet, there are a few steps that you must follow in order to produce a working result set."}),"\n",(0,r.jsx)(t.p,{children:"1. Define properties that correspond to each column in the result row. If the property type is swizzleable then any direct access to the property will trigger swizzling. %Get, %GetData and the various %Send methods will not swizzle the object."}),"\n",(0,r.jsx)(t.p,{children:"Note: Properties inherited from a system superclass are not considered to be part of the row."}),"\n",(0,r.jsx)(t.p,{children:"2. Define any private properties needed to maintain the current state of the result set."}),"\n",(0,r.jsx)(t.p,{children:"3. Override and implement %OpenCursor. Code in this method initializes the result iterator and prepares the data for return. It also reports any errors encountered during execution by setting %SQLCODE and %Message."}),"\n",(0,r.jsx)(t.p,{children:"4. Override and implement %Next. Code in this method retrieves the next row and sets the properties corresponding to columns in the row to the appropriate value. If no row is found this method returns 0, otherwise it returns 1. This method must also set value of the %ROWCOUNT property."}),"\n",(0,r.jsx)(t.p,{children:"5. Override and implement %CloseCursor. This is only necessary if you need to perform some clean up. %CloseCursor is called when the object is destructed."}),"\n",(0,r.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(t.h3,{id:"statementmetadata",children:"%statementmetadata;"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter %statementmetadata;\n"})}),"\n",(0,r.jsx)(t.h3,{id:"statementmetadataext",children:"%statementmetadataext;"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter %statementmetadataext;\n"})}),"\n",(0,r.jsx)(t.h3,{id:"statementobjects",children:"%statementobjects;"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter %statementobjects;\n"})}),"\n",(0,r.jsx)(t.h3,{id:"statementparameters",children:"%statementparameters;"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter %statementparameters;\n"})}),"\n",(0,r.jsx)(t.h3,{id:"statementactual",children:"%statementactual;"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter %statementactual;\n"})}),"\n",(0,r.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(t.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnNew(pSelectMode As %Integer = {$zu(115,5)}) As %Library.Status [ CodeMode = generator, Final, GenerateAfter = %OpenCursor ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"%OnNew is called by the constructor. It supports a variable number of arguments passed by value. The first argument is the runtime SELECTMODE value and it defaults to $system.SQL.GetSelectMode(). This method is generated as final. It invokes the user implemented %OpenCursor method. Any formal arguments defined by the %OpenCursor method will be added to the formal spec of %OnNew. Actual values for these arguments can be specified when calling %New(). Errors are reported by setting ..%SQLCODE, ..%Message."}),"\n",(0,r.jsx)(t.h3,{id:"opencursor",children:"%OpenCursor"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OpenCursor() As %Library.Status [ Private ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Implement code to open the cursor here. You may also define new formal arguments. Any arguments defined will be automatically added to the constructor interface and callers can specify actual arguments in the call to %New()."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'\tmethod %OpenCursor(pBeginDate as %Date = "", pEndDate as %Date = "") as %Library.Status [ private ] \t\t{ \t\t\tset ..BeginDate = pBeginDate \t\t\tset ..EndDate = $Select(pEndDate\'="":pEndDate,1:$H) \t\t\tquit $$$OK \t\t} \n'})}),"\n",(0,r.jsx)(t.p,{children:"Given the above example implementation of %OpenCursor, the following is a valid call to instantiate a new instance."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"\tset tResult = ##class(MyCustom.ResultSet).%New(,$H-30,$H-10) \n"})}),"\n",(0,r.jsx)(t.p,{children:"To report an error from %OpenCursor just set ..%SQLCODE and %Message to appropriate values. To report no rows found, set %SQLCODE to 100. Errors are indicated by negative ..%SQLCODE values."}),"\n",(0,r.jsx)(t.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status [ Private, ProcedureBlock = 1, PublicList = SQLCODE, ServerOnly = 1 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"This callback method is invoked by the %Close method to provide notification that the current object is being closed."}),"\n",(0,r.jsx)(t.p,{children:"The return value of this method is ignored."}),"\n",(0,r.jsx)(t.h3,{id:"closecursor",children:"%CloseCursor"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %CloseCursor() As %Library.Status [ CodeMode = expression, PlaceAfter = %Next, Private ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Implement %CloseCursor to clean up any temporary structures that are used by the custom result such as temporary globals, etc. This method is invoked by the object destructor."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"\tmethod %CloseCursor() as %Library.Status [ private ] \t\t{ \t\t\t&sql(close myCursor) \t\t\t\tkill ^||mytempglobal \t\t\tquit $$$OK \t\t} \n"})}),"\n",(0,r.jsx)(t.h3,{id:"get",children:"%Get"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'Method %Get(colname As %String = "") As %Library.String [ CodeMode = generator ]\n'})}),"\n",(0,r.jsx)(t.p,{children:"Returns the value of the column with the name colname in the current row of the result set."}),"\n",(0,r.jsx)(t.p,{children:"If colname is not a valid column name, this method throws a  error."}),"\n",(0,r.jsx)(t.h3,{id:"getdata",children:"%GetData"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetData(colnbr As %Integer = 0) As %Library.String [ CodeMode = generator, ProcedureBlock = 0 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"%GetData() Returns the value of the column referenced by colnbr. Object values are not swizzled automatically."}),"\n",(0,r.jsx)(t.h3,{id:"sendodbc",children:"%SendODBC"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SendODBC() As %Library.Integer [ CodeMode = generator, ProcedureBlock = 0 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Fetch and send a series of rows for the ODBC/JDBC server. For internal use only."}),"\n",(0,r.jsx)(t.h3,{id:"sendobjects",children:"%SendObjects"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SendObjects() As %Library.Integer [ CodeMode = generator, Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Fetch and send a series of rows for the ODBC/JDBC server. For internal use only."}),"\n",(0,r.jsx)(t.h3,{id:"getserializedmetadata",children:"%GetSerializedMetadata"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'Method %GetSerializedMetadata(ByRef pMetadata As %RawString = "") As %Status [ CodeMode = generator, Internal ]\n'})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"DO NOT USE DIRECTLY"})," - use %GetClientMetadata instead Builds the serialized metadata for this result set."]})]})}function d(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>l});var r=s(96540);const n={},a=r.createContext(n);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);