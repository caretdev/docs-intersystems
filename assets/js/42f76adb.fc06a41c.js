"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[50789],{16542:(e,n,s)=>{s.r(n),s.d(n,{contentTitle:()=>i,default:()=>c,frontMatter:()=>a,toc:()=>o});var t=s(74848),r=s(28453);const a={pagination_prev:null,pagination_next:null},i="%Library.SyntaxColor",o=[{value:"Parameters",id:"parameters",level:2},{value:"ORDINALCOLOR",id:"ordinalcolor",level:3},{value:"ORDINALGETCSS",id:"ordinalgetcss",level:3},{value:"ORDINALLANGUAGES",id:"ordinallanguages",level:3},{value:"ORDINALATTRIBUTES",id:"ordinalattributes",level:3},{value:"Properties",id:"properties",level:2},{value:"DLLCallMode",id:"dllcallmode",level:3},{value:"DLLHandle",id:"dllhandle",level:3},{value:"DLLResultCode",id:"dllresultcode",level:3},{value:"NoStyleNameUnderscore",id:"nostylenameunderscore",level:3},{value:"OrdinalOffset",id:"ordinaloffset",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnClose",id:"onclose",level:3},{value:"Color",id:"color",level:3},{value:"ConfigName",id:"configname",level:3},{value:"GetCSS",id:"getcss",level:3},{value:"Languages",id:"languages",level:3},{value:"Attributes",id:"attributes",level:3},{value:"InvokeDLL",id:"invokedll",level:3},{value:"ZF5",id:"zf5",level:3},{value:"ZF6",id:"zf6",level:3},{value:"PathToDLL",id:"pathtodll",level:3},{value:"SameLanguage",id:"samelanguage",level:3},{value:"SymbolsString",id:"symbolsstring",level:3},{value:"Assignments",id:"assignments",level:3},{value:"Join",id:"join",level:3}];function l(e){const n={br:"br",code:"code",command:"command",error:"error",font:"font",h1:"h1",h2:"h2",h3:"h3",header:"header",info:"info",line:"line",newline:"newline",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"librarysyntaxcolor",children:"%Library.SyntaxColor"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Class %Library.SyntaxColor Extends %RegisteredObject [ Not ProcedureBlock, System = 3 ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Syntax color source code, generating HTML markup and stylesheets."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Note that this class is only available in Windows (both 32-bit and 64-bit) at present."})}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(n.h3,{id:"ordinalcolor",children:"ORDINALCOLOR"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter ORDINALCOLOR = 1;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"ordinalgetcss",children:"ORDINALGETCSS"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter ORDINALGETCSS = 2;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"ordinallanguages",children:"ORDINALLANGUAGES"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter ORDINALLANGUAGES = 3;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"ordinalattributes",children:"ORDINALATTRIBUTES"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter ORDINALATTRIBUTES = 4;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(n.h3,{id:"dllcallmode",children:"DLLCallMode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property DLLCallMode As %Integer [ InitialExpression = 3 ];\n"})}),"\n",(0,t.jsx)(n.p,{children:"How we call the DLL"}),"\n",(0,t.jsx)(n.p,{children:"Takes one of the following values :-  1 - use $ZF(-3) ... handy for debugging the DLL because it doesn't stay loaded  2 - use $ZF(-4)/$ZF(-5) ... to cache the DLL handle"}),"\n",(0,t.jsx)(n.p,{children:"3 - use $ZF(-4)/$ZF(-6) ... the default - there's normally no reason to change it"}),"\n",(0,t.jsx)(n.p,{children:"Initialised to 3"}),"\n",(0,t.jsx)(n.h3,{id:"dllhandle",children:"DLLHandle"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property DLLHandle As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsx)(n.p,{children:"The cached DLLHandle (used only when DLLCallMode=2)"}),"\n",(0,t.jsx)(n.h3,{id:"dllresultcode",children:"DLLResultCode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property DLLResultCode As %String;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Set to a result code string returned by CacheColorHTML.DLL."}),"\n",(0,t.jsx)(n.p,{children:"Mainly of use to Intersystems support."}),"\n",(0,t.jsx)(n.h3,{id:"nostylenameunderscore",children:"NoStyleNameUnderscore"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property NoStyleNameUnderscore As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsx)(n.p,{children:"Set to the underscore-suppression flag as last used in a call to Color"}),"\n",(0,t.jsx)(n.p,{children:"- so that we can pass it to GetCSS"}),"\n",(0,t.jsx)(n.h3,{id:"ordinaloffset",children:"OrdinalOffset"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property OrdinalOffset As %Integer [ InitialExpression = 0, Internal ];\n"})}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status\n"})}),"\n",(0,t.jsx)(n.h3,{id:"color",children:"Color"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Method Color(InStream As %Stream.Object, OutStream As %Stream.Object, Language As %String = "COS", Flags As %String = "", DefFg As %String = "#000000", DefBg As %String = "#FFFFFF", ByRef Langs As %String, ByRef ColoringErrors As %Boolean, ByRef ErrorEnv As %String, ByRef ColoringWarnings As %Boolean, Symbols As %String = "") As %Boolean\n'})}),"\n",(0,t.jsx)(n.p,{children:"Syntax color the given source code using the given language."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Note that this class is only available in Windows (both 32-bit and 64-bit) at present."})}),"\n",(0,t.jsx)(n.p,{children:'InStream is a stream containing the source code, we rewind it before using it  OutStream is a stream to which the HTML (or CSV) is written (not the stylesheet - you need to use GetCSS for that)  Language is the lang moniker for the language (e.g. "BAS", "JS", "COS", "HTML"). The default is "COS"  Flags is a string of flag letters. A flag letter can be followed by "=" and a list of subflags (terminated by a ",").  DefFg and DefBg are ignored if stylesheets are used. When stylesheets are not used DefFg and DefBg are HTML color codes in hex #xxxxxx format (i.e. they should be passed as strings). They default to black and white, respectively. They are used whenever a color is specified as "default foreground" or "default background" in the Studio registry settings.  Langs is returned with a list of language monikers used (so you know what stylesheets to request) - e.g. $LB("COS","HTML")'}),"\n",(0,t.jsx)(n.p,{children:"ColoringErrors is returned with 0 if there were no syntax coloring errors, 1 otherwise"}),"\n",(0,t.jsx)(n.p,{children:"Some flags only apply to certain output modes (HTML/CSV/XML). Supported flags are :- S/s (HTML) specifies that stylesheets should be used, otherwise it just embeds FONT settings into the marked up source P/p (HTML) suppresses the enclosing "}),(0,t.jsx)(n.pre,{children:"..."})," F/f (HTML) suppresses the outer ",(0,t.jsxs)(n.font,{children:['...lt;/FONT> which sets the default foreground and background I/i (HTML) inserts an HTML comment just before  (or the error messages section) if present, otherwise at the end of the output; the comment contains information about the parsers used and the HTML rendering I/i (CSV) inserts "\\i" followed by parser information at the end of the output I/i (XML) writes an ',(0,t.jsxs)(n.info,{info:"...",children:[' tag at the end of the output (before ) with the parser information as the attribute value U/u (HTML) suppresses the "_" character in style names C/c selects CSV output (see below)',(0,t.jsx)(n.p,{}),"\n",(0,t.jsx)(n.p,{children:"Q selects XML output (but if C/c is given as well Q flag is ignored)"}),"\n",(0,t.jsxs)(n.p,{children:['The Q can be followed by "=" and one or more (case-sensitive) subflags to tailor the XML output :- P .. include XML prolog ("<?xml...") at start of output L .. include source language in the XML tag name - e.g. <COS_Command> l .. include source language as an XML attribute - e.g. ',(0,t.jsxs)(n.command,{language:"COS",children:[" N .. wrap XML tags for each source line in ",(0,t.jsx)(n.line,{children:"..."})," tags"]})]}),"\n",(0,t.jsxs)(n.p,{children:["n .. use ",(0,t.jsx)(n.newline,{children:" tags to mark line-breaks"})]}),"\n",(0,t.jsx)(n.p,{children:'Notes: If neither L nor l is given the attribute language is not shown. If neither N nor n is given the line-breaks are not shown. E/e (ALL) includes empty source lines in the output A/a (CSV) outputs attribute descriptions instead of hexadecimal codes B/b (CSV) outputs both a hexadecimal code and an attribute description, separated by a "|" character R/r (HTML) inserts one or more HTML comments just before  if present, otherwise at the end of the output; the comments contain coloring error messages returned by the parsers R/r (CSV) inserts one or more lines at the end of the output, each consisting of "\\e " followed by a tab-delimited record made up of the fields of a parser coloring error :- description,source,location,linenumber,lineoffset (linenumber and lineoffset are 1-based) (any tab character in the original error info is converted to a space)'}),"\n",(0,t.jsxs)(n.p,{children:["R/r (XML) writes one or ",(0,t.jsx)(n.error,{message:"...",children:" tag at the end of the output (before ) with parser coloring error messages as the attribute values"})]}),"\n",(0,t.jsx)(n.p,{children:"CSV output writes a line to the output stream for each syntax element and for each special element :- a syntax element is written as a record with commas delimiting the three components :- the first component is the language name - e.g. COS the second component is the terminal index in base 16 - e.g. 2F"}),"\n",(0,t.jsx)(n.p,{children:"the third component is the source code fragment"}),"\n",(0,t.jsx)(n.p,{children:'Note that the third component can contain commas.  a special element begins with "\\" :- "\\n" indicates newline in the source'}),"\n",(0,t.jsx)(n.p,{children:'"\\i " precedes an information line, shown when the I flag is given'}),"\n",(0,t.jsx)(n.p,{children:"The S, P, F and U flags and the DefFg and DefBg parameters are ignored when CSV/XML output is selected."}),"\n",(0,t.jsx)(n.p,{children:"The method returns 1 if it succeeded in generating the required HTML, CSV or XML; 0 if it failed to do so. In the case of failure the DLLResultCode property will sometimes contain a message with more information about the failure."}),"\n",(0,t.jsxs)(n.p,{children:["Typical use :- ",(0,t.jsx)(n.code,{children:'Set instr=##class(%GlobalCharacterStream).%New() Do instr.WriteLine(" &SQL(SELECT * FROM A WHERE B=C)") Set outstr=##class(%GlobalCharacterStream).%New() Set colorer=##class(%SyntaxColor).%New() Set ret=colorer.Color(instr,outstr,"COS","PFS",,,.langs,.coloringerrors) If \'ret {Write "Fatal error: ",colorer.DLLResultCode,! Quit} If coloringerrors { Write "Syntax error(s)",! } Do outstr.Rewind() While \'outstr.AtEnd { Write outstr.ReadLine(),! }'})]}),"\n",(0,t.jsx)(n.h3,{id:"configname",children:"ConfigName"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method ConfigName() As %String [ Private ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Helper function to return the InterSystems IRIS configuration name."}),"\n",(0,t.jsx)(n.h3,{id:"getcss",children:"GetCSS"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Method GetCSS(OutStream As %Stream.Object, Language As %String = "COS", Format As %Integer) As %Boolean\n'})}),"\n",(0,t.jsx)(n.p,{children:"Generates a CSS stylesheet for the given language moniker."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note that this class is only available in Windows (both 32-bit and 64-bit) at present."}),"  OutStream is a stream to which the stylesheet is written"]}),"\n",(0,t.jsx)(n.p,{children:'Language is the language moniker (e.g. "COS" or "BAS")'}),"\n",(0,t.jsx)(n.p,{children:"The method returns 1 if it succeeded in generating the required stylesheet, 0 if it failed to do so. In the case of failure the DLLResultCode property will sometimes contain a message with more information about the failure."}),"\n",(0,t.jsx)(n.p,{children:"Underscores are suppressed in the style names if either Color was last called with this flag OR if you explicitly set NoStyleNameUnderscore before calling this method"}),"\n",(0,t.jsx)(n.p,{children:"Typical use (continues on from the Color example) :-"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"Set css=##class(%GlobalCharacterStream).%New() For i=1:1:$ListLength(langs) D colorer.GetCSS(css,$List(langs,i)) Do css.Rewind() While 'css.AtEnd { Write css.ReadLine(),! }"})}),"\n",(0,t.jsx)(n.h3,{id:"languages",children:"Languages"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method Languages(ByRef Languages As %List) As %Boolean\n"})}),"\n",(0,t.jsx)(n.p,{children:"Return a $List of canonical language monikers"}),"\n",(0,t.jsx)(n.p,{children:"The first moniker corresponds to language #0 in the K-flag JSON output"}),"\n",(0,t.jsx)(n.h3,{id:"attributes",children:"Attributes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method Attributes(Language, ByRef Attributes As %List) As %Boolean\n"})}),"\n",(0,t.jsx)(n.p,{children:"Return a $List of coloring attribute names for the given language"}),"\n",(0,t.jsx)(n.p,{children:"The first name corresponds to attribute #0 in the K-flag JSON output"}),"\n",(0,t.jsx)(n.p,{children:"The language can be passed as a numerical index or as a canonical language moniker as returned by Languages"}),"\n",(0,t.jsx)(n.h3,{id:"invokedll",children:"InvokeDLL"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method InvokeDLL(DLLFunction As %Integer, DLLArgs) As %List [ Private ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Invoke the CacheColorHTML DLL function (DLLFunction), passing DLLArgs."}),"\n",(0,t.jsx)(n.p,{children:"Returns what the $ZF call into the DLL returns, or something in the same format :-"}),"\n",(0,t.jsx)(n.p,{children:"$LISTBUILD(ZFOK, $LISTBUILD(Lang1, Lang2, ...), ColoringErrors, DLLResultCode)"}),"\n",(0,t.jsx)(n.h3,{id:"zf5",children:"ZF5"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method ZF5(handle As %Integer, DLLFunction As %Integer, DLLArgs, ByRef failed As %Boolean) As %String [ Private ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Sets failed to 1 if the $ZF(-5,..) call fails, otherwise sets it to 0 and returns the DLL return code"}),"\n",(0,t.jsx)(n.h3,{id:"zf6",children:"ZF6"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method ZF6(DLLPath32 As %String, DLLPath64 As %String, DLLFunction As %Integer, DLLArgs, ByRef failed As %Boolean) As %String [ Private ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Sets failed to 1 if the $ZF(-6,..) call fails, otherwise sets it to 0 and returns the DLL return code"}),"\n",(0,t.jsx)(n.h3,{id:"pathtodll",children:"PathToDLL"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod PathToDLL(SixtyFour As %Boolean) As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Return the path to the DLL"}),"\n",(0,t.jsx)(n.h3,{id:"samelanguage",children:"SameLanguage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod SameLanguage(Lang1 As %String, Lang2 As %String) As %Boolean [ ProcedureBlock = 1 ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Return whether two Studio language monikers are for the same language (ignoring moniker extensions)"}),"\n",(0,t.jsx)(n.h3,{id:"symbolsstring",children:"SymbolsString"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod SymbolsString(ProcedureBlock As %Boolean = 1, ParameterNames As %List = "", PublicNames As %List = "") As %String [ ProcedureBlock = 1 ]\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Given the procedure block setting and optional lists of parameter and public names (with optional '=xxx' tails)",(0,t.jsx)(n.br,{}),"\nReturn a string suitable for passing as a Symbols parameter to Color"]}),"\n",(0,t.jsxs)(n.p,{children:["ProcedureBlock must be omitted or passed as 1 for coloring warnings to be available",(0,t.jsx)(n.br,{}),'\n- if ProcedureBlock is "" the PROCBLOCK symbol is not set at all']}),"\n",(0,t.jsx)(n.h3,{id:"assignments",children:"Assignments"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Assignments(NameValues As %List, SymbolKinds As %List) As %String [ Private, ProcedureBlock = 1 ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Given a list of names or 'name=value' strings and a list of symbol kinds (not documented)"}),"\n",(0,t.jsx)(n.p,{children:"Return a linefeed-delimited list of assignments to the names for each name/kind combination"}),"\n",(0,t.jsx)(n.h3,{id:"join",children:"Join"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Join(SubStrings As %List, Delimiter As %String) As %String [ ProcedureBlock = 1 ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Given a list of strings: combine the ones which are non-empty, separating them using the given delimiter"}),"\n"]})]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(96540);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);