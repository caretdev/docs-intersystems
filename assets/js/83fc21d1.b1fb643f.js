"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[35363],{59963:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>i,default:()=>c,frontMatter:()=>r,toc:()=>o});var s=a(74848),n=a(28453);const r={pagination_prev:null,pagination_next:null},i="DataMove.API",o=[{value:"Parameters",id:"parameters",level:2},{value:"DOMAIN",id:"domain",level:3},{value:"Methods",id:"methods",level:2},{value:"Activate",id:"activate",level:3},{value:"DataCheckGetInfo",id:"datacheckgetinfo",level:3},{value:"DataCheckGetRangeInfo",id:"datacheckgetrangeinfo",level:3},{value:"DataCheckExportRangeDiffs",id:"datacheckexportrangediffs",level:3},{value:"DataCheckRestartAll",id:"datacheckrestartall",level:3},{value:"DataCheckRestartRange",id:"datacheckrestartrange",level:3},{value:"DataCheckStart",id:"datacheckstart",level:3},{value:"DataCheckStop",id:"datacheckstop",level:3},{value:"Delete",id:"delete",level:3},{value:"DeleteSourceGlobals",id:"deletesourceglobals",level:3},{value:"Export",id:"export",level:3},{value:"Finish",id:"finish",level:3},{value:"Force",id:"force",level:3},{value:"Generate",id:"generate",level:3},{value:"Import",id:"import",level:3},{value:"GetLogLevel",id:"getloglevel",level:3},{value:"GetProperties",id:"getproperties",level:3},{value:"GetVerifyLevel",id:"getverifylevel",level:3},{value:"IsRunning",id:"isrunning",level:3},{value:"DataCheckIsRunning",id:"datacheckisrunning",level:3},{value:"MapGlobalsCreate",id:"mapglobalscreate",level:3},{value:"MapGlobalsDelete",id:"mapglobalsdelete",level:3},{value:"MapInitialize",id:"mapinitialize",level:3},{value:"MapGlobalsModify",id:"mapglobalsmodify",level:3},{value:"Modify",id:"modify",level:3},{value:"RollbackMappings",id:"rollbackmappings",level:3},{value:"Rollback",id:"rollback",level:3},{value:"RollbackCopy",id:"rollbackcopy",level:3},{value:"SetLogLevel",id:"setloglevel",level:3},{value:"SetVerifyLevel",id:"setverifylevel",level:3},{value:"Validate",id:"validate",level:3},{value:"ValidateSizes",id:"validatesizes",level:3},{value:"StartCopy",id:"startcopy",level:3},{value:"StopCopy",id:"stopcopy",level:3},{value:"ListDMsExecute",id:"listdmsexecute",level:3},{value:"ListDMsFetch",id:"listdmsfetch",level:3},{value:"ListDMsClose",id:"listdmsclose",level:3},{value:"ListProcessesExecute",id:"listprocessesexecute",level:3},{value:"ListProcessesFetch",id:"listprocessesfetch",level:3},{value:"ListProcessesClose",id:"listprocessesclose",level:3},{value:"ListRangesExecute",id:"listrangesexecute",level:3},{value:"ListRangesFetch",id:"listrangesfetch",level:3},{value:"ListRangesClose",id:"listrangesclose",level:3},{value:"ListDataCheckRangesExecute",id:"listdatacheckrangesexecute",level:3},{value:"ListDataCheckRangesFetch",id:"listdatacheckrangesfetch",level:3},{value:"ListDataCheckRangesClose",id:"listdatacheckrangesclose",level:3},{value:"ListDataCheckDiffsExecute",id:"listdatacheckdiffsexecute",level:3},{value:"ListDataCheckDiffsFetch",id:"listdatacheckdiffsfetch",level:3},{value:"ListDataCheckDiffsClose",id:"listdatacheckdiffsclose",level:3}];function l(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"datamoveapi",children:"DataMove.API"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class DataMove.API Extends %SYSTEM.Help [ Abstract, Final, Language = objectscript, System = 4 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"The DataMove API."}),"\n",(0,s.jsx)(t.p,{children:"Move globals from one database to another based on a namespace mapping change."}),"\n",(0,s.jsx)(t.p,{children:'See the chapter in the documentation "Using DataMove with InterSystems IRIS" for details and examples.'}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(t.h3,{id:"domain",children:"DOMAIN"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter DOMAIN = "%Utility";\n'})}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"activate",children:"Activate"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Activate(Name As %String, Display As %Boolean = 1, Timeout As %Integer = 120, Force As %Boolean = 0) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Finishes the DataMove and activates the namespace mapping changes."}),"\n",(0,s.jsxs)(t.p,{children:['This method stops the DataMove background jobs, finishes processing any journal files, writes the mapping changes to the CPF, and activates the mapping changes. It momentarily sets switch 10 which freezes all users on the system while the systems namespace mappings tables are updated. If the flag $$$BitCheckActivate was set when the DataMove was initialized, the method will call a user-supplied routine $$CheckActivate^ZDATAMOVE() to check the application status before continuing. If $$CheckActivate^ZDATAMOVE() does not return 1, the method will quit with an error status. The user can then call Activate() again at a later point in time. For more information on switch 10, see "Using Switches" in Specialized System Tools and Utilities. Note: Activate() checks the State property of the DataMove to make sure that the initial copy is complete and the journal apply is caught up before proceeding.',(0,s.jsx)(t.br,{}),"\nArguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove.",(0,s.jsx)(t.br,{}),"\nDisplay - 0/1 - determines if progress messages are written to the screen.",(0,s.jsx)(t.br,{}),"\nTimeout - Number of seconds to wait for the Copy job to finish running an apply journals operation before proceeding. If the minimum number of MB of journal data remaining to apply does not fall below the threshold (5MB) within this time period the method will return an error status. If this occurs, the Activate() method can be called at a later time when the system is less busy.",(0,s.jsx)(t.br,{}),"\nForce - 0/1 - Force activation of the namespace map even if the minimum number of MB of journal data remaining to apply does not fall below the threshold (5MB). When set, the Activate process will wait up until the Timeout value for the minimum number of MB of journal data remaining to apply to fall below the threshold (5MB). If it does not fall below the threshold by the end of the timeout period, Activate will set switch 10 to freeze the system, apply the remaining journal, and activate the namespace map."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"WARNING: When the Force flag is specified, and there is a lot of journal data to still be applied, this can cause an extended outage of the system. Once started the only way to stop the activation and unfreeze the system is to force down the system."})}),"\n",(0,s.jsx)(t.p,{children:"Example:"}),"\n",(0,s.jsx)(t.p,{children:'%SYS>s x=##Class(DataMove.Data).Activate("ABC1")  Preparing to Activate DataMove Waiting for DataMove jobs to complete... Stopping DataMove processes in preparation for activation Locking Globals... Freezing system... Applying journals... Applying journal: c:\\iris\\mgr\\journal\\20200924.021 Copying mapping changes to Config classes... Writing mapping changes to CPF file... Activating mapping changes... Activation complete'}),"\n",(0,s.jsx)(t.h3,{id:"datacheckgetinfo",children:"DataCheckGetInfo"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DataCheckGetInfo(Name As %String, ByRef Info As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"datacheckgetrangeinfo",children:"DataCheckGetRangeInfo"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DataCheckGetRangeInfo(Name As %String, SrcDB As %String, DstDB As %String, Range As %String, ByRef Info As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"datacheckexportrangediffs",children:"DataCheckExportRangeDiffs"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod DataCheckExportRangeDiffs(Name As %String, SrcDBs As %String = "*", DstDBs As %String = "*", Ranges As %String = "*", FileName As %String, ByRef NumExported As %Integer) As %Status\n'})}),"\n",(0,s.jsx)(t.h3,{id:"datacheckrestartall",children:"DataCheckRestartAll"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DataCheckRestartAll(Name As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.h3,{id:"datacheckrestartrange",children:"DataCheckRestartRange"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DataCheckRestartRange(Name As %String, SrcDB As %String, DstDB As %String, Range As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.h3,{id:"datacheckstart",children:"DataCheckStart"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DataCheckStart(Name As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.h3,{id:"datacheckstop",children:"DataCheckStop"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DataCheckStop(Name As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.h3,{id:"delete",children:"Delete"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Delete(Name As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Deletes the DataMove."}),"\n",(0,s.jsxs)(t.p,{children:["If the DataMove operation you want to delete has been started and then stopped, you should first call the Rollback() method to rollback any of the data which had been moved.",(0,s.jsx)(t.br,{}),"\nArguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove."]}),"\n",(0,s.jsx)(t.h3,{id:"deletesourceglobals",children:"DeleteSourceGlobals"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DeleteSourceGlobals(Name As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Deletes the globals from the source directory that have been copied by the DataMove."}),"\n",(0,s.jsxs)(t.p,{children:["Arguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove.",(0,s.jsx)(t.br,{}),"\nThis method deletes all globals in the source databases that have been copied to the destination databases. Several processes may be created to delete the source globals."]}),"\n",(0,s.jsx)(t.h3,{id:"export",children:"Export"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod Export(Names As %String, Filename As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Export a DataMove to a file."}),"\n",(0,s.jsx)(t.p,{children:"This would typically be used by support to diagnose a DataMove problem reported by a customer where they could Export the customers DataMove to a file, and then Import onto their own system for examination."}),"\n",(0,s.jsx)(t.h3,{id:"finish",children:"Finish"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Finish(Name As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Finishes the DataMove process."}),"\n",(0,s.jsxs)(t.p,{children:["This method writes a success or failure message to the log file, closes the log file, and sets the State property of the DataMove to $$$DMStateDone. It also copies the log file into the file DataMove.log which is a record of all the DataMoves performed on the system.",(0,s.jsx)(t.br,{}),"\nArguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove."]}),"\n",(0,s.jsx)(t.h3,{id:"force",children:"Force"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Force(Name As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Forces a DataMove to stop when StopCopy() fails to stop all DataMove processes."}),"\n",(0,s.jsxs)(t.p,{children:["Arguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove."]}),"\n",(0,s.jsx)(t.h3,{id:"generate",children:"Generate"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Generate(Name As %String, ByRef Properties As %String, ByRef Warnings As %String, ByRef Errors As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Creates a new DataMove based on map edits in the temporary storage area."}),"\n",(0,s.jsxs)(t.p,{children:["Arguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove to be created.",(0,s.jsx)(t.br,{}),"\nProperties - Array of optional properties to be used to create the DataMove.",(0,s.jsx)(t.br,{}),'\nProperties("LogFile") - optionally specifies a log file name, if other than the default. The default logfile name is Name.log and is found in the MGR directory.',(0,s.jsx)(t.br,{}),'\nProperties("Description") - optionally provides a description of the DataMove to be performed.',(0,s.jsx)(t.br,{}),'\nProperties("Flags") optionally provides any flags describing the DataMove operation as follows:',(0,s.jsx)(t.br,{}),"\n$$$BitNoSrcJournal - allow copying of non-journaled databases.",(0,s.jsx)(t.br,{}),"\n$$$BitCheckActivate - call the user-supplied routine $$CheckActivate^ZDATAMOVE() to check the application status before activating the mapping changes.",(0,s.jsx)(t.br,{}),'\nProperties("MaxMBPerMin") - Maximum number of MB per minute the DataMove operation is allowed to move to the destination database. Setting this to 0 allows the DataMove to run as fast as it can. If not passed, it uses the system default which is 0.',(0,s.jsx)(t.br,{}),'\nProperties("MaxMBCheckPerMin") - Maximum number of MB per minute the DataMove DataCheck operation is allowed to check. Setting this to 0 allows the DataMove DataCheck to run as fast as it can. If not passed, it uses the system default.',(0,s.jsx)(t.br,{}),"\nWarnings - Array returned with conflicts that do not prevent the DataMove from being performed. The Warnings array contains a list of mappings where the data being moved is also mapped from another namespace. This array is subscripted by the name of the global or the global range.",(0,s.jsx)(t.br,{}),"\nErrors - Array returned with conflicts that prevent the DataMove from being performed.",(0,s.jsx)(t.br,{}),"\nThe Errors array contains a list of mappings where a conflict prevents the data from being moved. This array is subscripted by the name of the global or the global range."]}),"\n",(0,s.jsx)(t.p,{children:"Example:"}),"\n",(0,s.jsx)(t.p,{children:'; Include the .INC file to get the definitions for the DataMove macros #include %syDataMove Set Properties("Flags")= $$$BitCheckActivate Set Status=##Class(DataMove.API).MapGlobalsGenerate("TEST" .Properties,.Warnings,.Errors)'}),"\n",(0,s.jsx)(t.h3,{id:"import",children:"Import"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Import(Filename As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Imports a DataMoves definition which has been created via the Export method."}),"\n",(0,s.jsx)(t.p,{children:"This would typically be used by support to diagnose a DataMove problem reported by a customer where they could import the customers DataMove onto their own system for examination."}),"\n",(0,s.jsx)(t.h3,{id:"getloglevel",children:"GetLogLevel"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetLogLevel() As %Integer [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns current log level."}),"\n",(0,s.jsx)(t.h3,{id:"getproperties",children:"GetProperties"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetProperties(Name As %String, ByRef Properties As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the current properties of the DataMove."}),"\n",(0,s.jsxs)(t.p,{children:["Arguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove.",(0,s.jsx)(t.br,{}),"\nProperties - Array of the DataMove properties as follows:",(0,s.jsx)(t.br,{}),'\nProperties("ExpandedState") - Expanded external format of the state.',(0,s.jsx)(t.br,{}),'\nProperties("JRNMBToApply") - Current # of MB of Journal file to process.',(0,s.jsx)(t.br,{}),'\nProperties("MaxMBPerMin") - Maximum # of MB the DataMove is allowed to move per Minute.',(0,s.jsx)(t.br,{}),'\nProperties("MBCopied") - Amount of MB copied.',(0,s.jsx)(t.br,{}),'\nProperties("MBToCopy") - Approximate amount of MB to copy.',(0,s.jsx)(t.br,{}),'\nProperties("State") - Current state of the move, see the table below.',(0,s.jsx)(t.br,{}),'\nProperties("StateExternal") - External format of the State.',(0,s.jsx)(t.br,{}),'\nProperties("Status") - %Status value of any errors which occur.',(0,s.jsx)(t.br,{}),'\nProperties("Stop") - Stop state of the DataMove.',(0,s.jsx)(t.br,{}),"\n$$$DMStopNone - Stop not signaled.",(0,s.jsx)(t.br,{}),"\n$$$DMStopNormal - Stop signaled by Activate().",(0,s.jsx)(t.br,{}),"\n$$$DMStopShutdown - Stop signaled by normal system shutdown. DataMove will resume on system restart.",(0,s.jsx)(t.br,{}),"\n$$$DMStopUser - Stop signaled by user StopCopy(). Copy can be restarted by StartCopy().",(0,s.jsx)(t.br,{}),"\n$$$DMStopForce - Stop signaled by Force(). Copy can be restarted by StartCopy().",(0,s.jsx)(t.br,{}),"\n$$$DMStopErrorRecoverable - Stop signaled by error. Copy can be restarted by StartCopy() Once the error is corrected.",(0,s.jsx)(t.br,{}),"\n$$$DMStopErrorUnRecoverable - Stop signaled by unrecoverable error. This may be due to several different reasons including journal errors. The only option here is to call Rollback() and then StartCopy() to restart the DataMove or Delete() to delete the DataMove."]}),"\n",(0,s.jsx)(t.p,{children:"Example:"}),"\n",(0,s.jsx)(t.p,{children:'%SYS>s x=##Class(DataMove.API).GetProperties("ABC1",.Properties)  %SYS>zwrite Properties Properties("ExpandedState")="Copy/Crashed" Properties("JRNMBToApply")=0 Properties("MaxMBCheckPerMin")=0 Properties("MaxMBPerMin") Properties("MBChecked")=0 Properties("MBCopied")=17030.67 Properties("MBToCopy")=20034.44 Properties("State")=6 Properties("StateExternal")="Copy" Properties("Status")=1 Properties("Stop")=0'}),"\n",(0,s.jsx)(t.h3,{id:"getverifylevel",children:"GetVerifyLevel"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetVerifyLevel() As %Integer [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns current Verify level."}),"\n",(0,s.jsx)(t.h3,{id:"isrunning",children:"IsRunning"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod IsRunning(Name As %String, ByRef DMState As %Integer) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Determines if a DataMove is running."}),"\n",(0,s.jsxs)(t.p,{children:["Arguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove.",(0,s.jsx)(t.br,{}),"\nDMState - Current state of the DataMove. Values are one of the states from the state table."]}),"\n",(0,s.jsx)(t.h3,{id:"datacheckisrunning",children:"DataCheckIsRunning"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DataCheckIsRunning(Name As %String) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Determines if a DataCheck is running."}),"\n",(0,s.jsxs)(t.p,{children:["Arguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove."]}),"\n",(0,s.jsx)(t.h3,{id:"mapglobalscreate",children:"MapGlobalsCreate"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod MapGlobalsCreate(Name As %String, Namespace As %String, GblName As %String, ByRef Properties As %String) As %Status\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Creates a new global mapping for this namespace in the temporary storage area.",(0,s.jsx)(t.br,{}),"\nYou can call this method one or more times, depending on the number of mappings you plan to include in this DataMove.",(0,s.jsx)(t.br,{}),"\nArguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove.",(0,s.jsx)(t.br,{}),"\nNamespace - The name of the namespace on which you want to perform the DataMove. GblName - Name of a global to be mapped to a specific database.",(0,s.jsx)(t.br,{}),'\nSetting the Name argument to "A" specifies that this mapping affects the entire global ^A. Setting this argument to "A(5):A(10)" specifies that this mapping affects the range of the global with subscripts ^A(5) up to, but not including, ^A(10).',(0,s.jsx)(t.br,{}),"\nProperties - Array of properties needed for this mapping, in particular, the name of the database used for this mapping.",(0,s.jsx)(t.br,{}),'\nSetting the Properties argument to an array Properties where Properties("Database") is set to "USER2" specifies that the global (or range of the global) is to be mapped to the database USER2.']}),"\n",(0,s.jsx)(t.p,{children:"Examples:"}),"\n",(0,s.jsx)(t.p,{children:'Set Properties("Database")="DSTDB" ;Move ^X(100) up to but not including ^X(200) to database DSTDB Set Status = ##Class(DataMove.API).MapGlobalsCreate("ABC1","SALES","X(100):(200)",.Properties) ;Move the entire ^INFO global to database DSTDB Set Status = ##Class(DataMove.API).MapGlobalsCreate("ABC1","SALES","INFO",.Properties) ;Move all Data from the first subscript in ^BILLING (including the node ^BILLING itself) ;up to but not including ^BILLING(100) to database DSTDB Set Status = ##Class(DataMove.API).MapGlobalsCreate ("ABC1","SALES","BILLING(BEGIN):(100)",.Properties) ;Move the entire global ^PROSPECT from its currently mapped database to DSTDB Set Status = ##Class(DataMove.API).MapGlobalsModify ("ABC1","SALES","PROSPECT",.Properties) ;Move the entire global ^ORDERS from its currently mapped database ;back to the default database for the namespace SALES Set Status=##Class(DataMove.API).MapGlobalsDelete ("ABC1","SALES","ORDERS")'}),"\n",(0,s.jsx)(t.h3,{id:"mapglobalsdelete",children:"MapGlobalsDelete"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod MapGlobalsDelete(Name As %String, Namespace As %String, GblName As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Delete an existing global mapping for this namespace in the temporary storage area."}),"\n",(0,s.jsxs)(t.p,{children:["Arguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove.",(0,s.jsx)(t.br,{}),"\nNamespace - The name of the namespace which you want to delete the mapping from",(0,s.jsx)(t.br,{}),"\nName - Name of the global mapping you wish to delete."]}),"\n",(0,s.jsx)(t.p,{children:"Examples:"}),"\n",(0,s.jsx)(t.p,{children:';Move the entire global ^ORDERS from its currently mapped database ;back to the default database for the namespace SALES Set Status=##Class(DataMove.API).MapGlobalsDelete ("ABC1","SALES","ORDERS") ;Move the global mapping ^REVENUE("AUGUST") from its currently mapped database ;back to the default database for the namespace SALES Set Status=##Class(DataMove.API).MapGlobalsDelete("ABC1","SALES","REVENUE(""AUGUST"")")'}),"\n",(0,s.jsx)(t.h3,{id:"mapinitialize",children:"MapInitialize"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod MapInitialize(Name As %String, Namespaces As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Initializes the temporary storage area for a new set of mapping edits."}),"\n",(0,s.jsxs)(t.p,{children:["Arguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove.",(0,s.jsx)(t.br,{}),"\nNamespaces - Is a comma delimited list of namespaces on which you want to perform the DataMove. This method must be called before any edits are made and is valid only for the specified namespaces."]}),"\n",(0,s.jsx)(t.p,{children:"CAUTION: Calling this method deletes any existing edits in the temporary storage area made by the DataMove API."}),"\n",(0,s.jsx)(t.p,{children:"Example:"}),"\n",(0,s.jsx)(t.p,{children:';Initialize one namespace Set Namespaces = "SALES" Set Status = ##Class(DataMove.API).MapInitialize("ABC1",Namespaces) If \'$$$ISOK(Status) Write !,$SYSTEM.Status.GetErrorText(Status) ;Initialize several namespaces Set Namespaces = "SALES,MARKETING,INFO" Set Status = ##Class(DataMove.API).MapInitialize("ABC1",Namespaces) If \'$$$ISOK(Status) Write !,$SYSTEM.Status.GetErrorText(Status)'}),"\n",(0,s.jsx)(t.h3,{id:"mapglobalsmodify",children:"MapGlobalsModify"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod MapGlobalsModify(Name As %String, Namespace As %String, GblName As %String, ByRef Properties As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Modifies a global mapping for this namespace in the temporary storage area."}),"\n",(0,s.jsxs)(t.p,{children:["You can call this method one or more times, depending on the number of mappings you plan to include in this DataMove.",(0,s.jsx)(t.br,{}),"\nArguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove.",(0,s.jsx)(t.br,{}),"\nNamespace - The name of the namespace on which you want to perform the DataMove. GblName - Name of a global to be mapped to a specific database.",(0,s.jsx)(t.br,{}),'\nSetting the Name argument to "A" specifies that this mapping affects the entire global ^A. Setting this argument to "A(5):A(10)" specifies that this mapping affects the range of the global with subscripts ^A(5) up to, but not including, ^A(10).',(0,s.jsx)(t.br,{}),"\nProperties - Array of properties needed for this mapping, in particular, the name of the database used for this mapping.",(0,s.jsx)(t.br,{}),'\nSetting the Properties argument to an array Properties where Properties("Database") is set to "USER2" specifies that the global (or range of the global) is to be mapped to the database USER2.']}),"\n",(0,s.jsx)(t.p,{children:"Examples:"}),"\n",(0,s.jsx)(t.p,{children:'Set Properties("Database")="DSTDB" ;Move the entire global ^PROSPECT from its currently mapped database to DSTDB Set Status = ##Class(DataMove.API).MapGlobalsModify ("ABC1","SALES","PROSPECT",.Properties)'}),"\n",(0,s.jsx)(t.h3,{id:"modify",children:"Modify"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Modify(Name As %String, ByRef Properties As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Modify an existing or running DataMove."}),"\n",(0,s.jsxs)(t.p,{children:["Arguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove.",(0,s.jsx)(t.br,{}),"\nProperties - Array of properties to modify.",(0,s.jsx)(t.br,{}),'\nProperties("MaxMBPerMin") - Maximum number of MB per minute the DataMove operation is allowed to move to the destination database. Setting this to 0 allows the DataMove to run as fast as it can. This can be called on a running DataMove to change the rate.',(0,s.jsx)(t.br,{}),'\nProperties("MaxMBCheckPerMin") - Maximum number of MB per minute the DataMove DataCheck operation is allowed to check. Setting this to 0 allows the DataMove DataCheck to run as fast as it can. This can be called on a running DataMove to change the rate.']}),"\n",(0,s.jsx)(t.h3,{id:"rollbackmappings",children:"RollbackMappings"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod RollbackMappings(Name As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Rolls back the mappings to what they were before the new mappings were activated."}),"\n",(0,s.jsxs)(t.p,{children:["This will restore the systems mappings to the state before the DataMove was run. The DataMove must be in the State $$$DMStateNSPActivateDone. An example of using this would be if you started to test the application after the DataMove activates its mappings, and detected there was something wrong. After the mappings are restored to their previous value, the State will be set to $$$DMStateReady. From here you can call Rollback() (recommended), or StartCopy() and retry the activation.",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.strong,{children:"WARNING: If the mappings are rolled back, any data which was created while the new mappings were in effect will not be able to be accessed."}),"\nArguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove."]}),"\n",(0,s.jsx)(t.h3,{id:"rollback",children:"Rollback"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Rollback(Name As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"the DataMove to the $$$DMStateNotStarted State."}),"\n",(0,s.jsxs)(t.p,{children:["This method deletes any globals that have been copied to destination databases by the DataMove copy job. This method can be used to abort the DataMove or recover from an error in the copy process. StopCopy() must be run before calling this method. After doing the rollback, you can start over with StartCopy() or delete the DataMove with Delete().",(0,s.jsx)(t.br,{}),"\nArguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove."]}),"\n",(0,s.jsx)(t.h3,{id:"rollbackcopy",children:"RollbackCopy"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod RollbackCopy(Name As %String, ByRef Warnings As %String, ByRef Errors As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Create a new DataMove which will copy the DataMove data back to its original location, and retore the old mappings."}),"\n",(0,s.jsxs)(t.p,{children:['This will create a DataMove called Name-ROLLBACK which when run will move the data copied in the DataMove back to its original source directories. The DataMove must be in the State $$$DMStateDeleteSrcGlobalsDone (all the source globals have been deleted by the DeleteSourceGlobals()method.) After the method finishes, you can then run StartCopy() and Activate() to move the data back to their original directories. The original DataMove will have its State set to $$$DMStateRollbackCopy with a stop state set to "StopFatal" so it can\'t be used again.',(0,s.jsx)(t.br,{}),"\nArguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove which you want to rollback.",(0,s.jsx)(t.br,{}),"\nWarnings - See Generate() for description of the Warnings array returned.",(0,s.jsx)(t.br,{}),"\nErrors - See Generate() for description of the Errors array returned."]}),"\n",(0,s.jsx)(t.h3,{id:"setloglevel",children:"SetLogLevel"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetLogLevel(LogLevel As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sets current log level."}),"\n",(0,s.jsx)(t.h3,{id:"setverifylevel",children:"SetVerifyLevel"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetVerifyLevel(VerifyLevel As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sets current erify level."}),"\n",(0,s.jsx)(t.h3,{id:"validate",children:"Validate"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Validate(Name As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Validate the DataMove before starting the copy."}),"\n",(0,s.jsxs)(t.p,{children:["Validating the DataMove involves looking at all of the specified mappings, checking the source and destination databases, and making sure the destination globals do not already exist. Any errors are reported in the status. Validate() is called as part of StartCopy(). You can use this method to validate the DataMove before you actually start the copy with StartCopy().",(0,s.jsx)(t.br,{}),"\nArguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove."]}),"\n",(0,s.jsx)(t.h3,{id:"validatesizes",children:"ValidateSizes"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ValidateSizes(Name As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Validate the size requirements of the DataMove."}),"\n",(0,s.jsxs)(t.p,{children:["Validating sizes for a DataMove involves determining the amount of data to be copied and ensuring enough space exists in the destination database. Any errors are reported in the status. ValidateSizes() is called as part of StartCopy(). You can use this method to validate the DataMove size requirements before you actually start the copy with StartCopy().",(0,s.jsx)(t.br,{}),"\nArguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove."]}),"\n",(0,s.jsx)(t.h3,{id:"startcopy",children:"StartCopy"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod StartCopy(Name As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Start (or restart) the DataMove."}),"\n",(0,s.jsxs)(t.p,{children:["This method will start the DataMove, or restart the DataMove if it was previously stopped. As part of starting, it calls the methods Validate() and ValidateSizes(). Arguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove."]}),"\n",(0,s.jsx)(t.h3,{id:"stopcopy",children:"StopCopy"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod StopCopy(Name As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Stop the DataMove."}),"\n",(0,s.jsxs)(t.p,{children:["This method stops the DataMove copy background jobs, allowing you to gracefully stop the copy after it is in process. You can restart the DataMove with DataMove.Data.StartCopy(). If you wish to delete the DataMove after it is started, you should call Rollback(), and then Delete().",(0,s.jsx)(t.br,{}),"\nArguments:",(0,s.jsx)(t.br,{}),"\nName - Name of the DataMove."]}),"\n",(0,s.jsx)(t.h3,{id:"listdmsexecute",children:"ListDMsExecute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ListDMsExecute(ByRef qHandle As %Binary, Names As %String = "*", Flags As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"List the DataMoves defined on the system."}),"\n",(0,s.jsx)(t.h3,{id:"listdmsfetch",children:"ListDMsFetch"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListDMsFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListDMsExecute ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"listdmsclose",children:"ListDMsClose"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListDMsClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListDMsExecute ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"listprocessesexecute",children:"ListProcessesExecute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListProcessesExecute(ByRef qHandle As %Binary, Name As %String) As %Status [ Internal, ProcedureBlock = 0 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"List the DataMove processes currently running on the system."}),"\n",(0,s.jsx)(t.h3,{id:"listprocessesfetch",children:"ListProcessesFetch"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListProcessesFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListProcessesExecute ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"listprocessesclose",children:"ListProcessesClose"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListProcessesClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListProcessesExecute ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"listrangesexecute",children:"ListRangesExecute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ListRangesExecute(ByRef qHandle As %Binary, Name As %String, SrcDBs As %String = "*", DstDBs As %String = "*", Ranges As %String = "*", Flags As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"List all of the ranges of a DataMove."}),"\n",(0,s.jsx)(t.h3,{id:"listrangesfetch",children:"ListRangesFetch"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListRangesFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListRangesExecute ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"listrangesclose",children:"ListRangesClose"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListRangesClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListRangesExecute ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"listdatacheckrangesexecute",children:"ListDataCheckRangesExecute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ListDataCheckRangesExecute(ByRef qHandle As %Binary, Name As %String, SrcDBs As %String = "*", DstDBs As %String = "*", Ranges As %String = "*") As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(t.h3,{id:"listdatacheckrangesfetch",children:"ListDataCheckRangesFetch"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListDataCheckRangesFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListDataCheckRangesExecute ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"listdatacheckrangesclose",children:"ListDataCheckRangesClose"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListDataCheckRangesClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListDataCheckRangesFetch ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"listdatacheckdiffsexecute",children:"ListDataCheckDiffsExecute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ListDataCheckDiffsExecute(ByRef qHandle As %Binary, Name As %String, SrcDBs As %String = "*", DstDBs As %String = "*", Ranges As %String = "*") As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(t.h3,{id:"listdatacheckdiffsfetch",children:"ListDataCheckDiffsFetch"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListDataCheckDiffsFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListDataCheckDiffsExecute ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"listdatacheckdiffsclose",children:"ListDataCheckDiffsClose"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListDataCheckDiffsClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListDataCheckDiffsExecute ]\n"})})]})}function c(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>o});var s=a(96540);const n={},r=s.createContext(n);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);