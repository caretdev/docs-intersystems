"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[26059],{50031:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>l,default:()=>c,frontMatter:()=>r,toc:()=>i});var n=s(74848),o=s(28453);const r={pagination_prev:null,pagination_next:null},l="%Library.SysLog",i=[{value:"Methods",id:"methods",level:2},{value:"Log",id:"log",level:3},{value:"LogError",id:"logerror",level:3},{value:"LogUserInfo",id:"loguserinfo",level:3},{value:"RemoveOldEntries",id:"removeoldentries",level:3},{value:"MaxLogEntriesGet",id:"maxlogentriesget",level:3},{value:"MaxLogEntriesSet",id:"maxlogentriesset",level:3},{value:"ClearLog",id:"clearlog",level:3},{value:"LogLevelSet",id:"loglevelset",level:3},{value:"LogLevelGet",id:"loglevelget",level:3},{value:"ErrorDetailSet",id:"errordetailset",level:3},{value:"ErrorDetailGet",id:"errordetailget",level:3},{value:"CategorySet",id:"categoryset",level:3},{value:"CategoryGet",id:"categoryget",level:3},{value:"JobSet",id:"jobset",level:3},{value:"JobGet",id:"jobget",level:3}];function a(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"librarysyslog",children:"%Library.SysLog"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Library.SysLog [ System = 3 ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Provide a %Library.SysLog class to allow logging of events while programs are running in a consistent fashion. The advantage of using this is that we can use standard utilities to manage and display this log. Also all log entries automatically get the current namespace, date/time, routine name and process Id logged."}),"\n",(0,n.jsxs)(t.p,{children:["To make logging easier there are three macros defined in ",(0,n.jsx)(t.strong,{children:"%occDiagnostics.inc"}),". This file is included automatically when compiling any class and so you only need to include it manually if you are compiling a MAC file. The macros are:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"$$$SysLog(level,category,message,data)"})," - If the logging level is greater or equal to 'level' this calls Log^%SYS.ISCLOG with the same parameters except 'routine' is set to $ZNAME. If 'data' is an array then pass it by reference"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"$$$SysLogError(category,message)"})," - If the logging level is greater than zero it will call LogError^%SYS.ISCLOG with the same parameters except 'routine' is set to $ZNAME."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"$$$SysLogUser"})," - If the logging level is greater than 1 it calls LogUserInfo^%SYS.ISCLOG with 'routine' set to $ZNAME and the other parameters coming from $ZU(67)"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"One of the advantages of these macros is that they check the logging level before calling the Log method and so if logging is not turned on at this level then the log macro takes almost no time to execute."}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"log",children:"Log"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod Log(level As %Integer = 2, category As %String = "", message As %String, ByRef data As %String, routine As %String) As %Integer\n'})}),"\n",(0,n.jsx)(t.p,{children:"Log an event to the system log if the system logging level is greater or equal to the level passed in. You must specify a level to log this event at, the choice being:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"0 - No logging"}),"\n",(0,n.jsx)(t.li,{children:"1 - Exceptional events logged, e.g. error messages"}),"\n",(0,n.jsx)(t.li,{children:"2 - Detailed event log information, e.g. 'method ABC invoked with parameters X,Y,Z and returned 1234'"}),"\n",(0,n.jsx)(t.li,{children:"3 - Raw information logging, e.g. the byte contents of the TCP/IP request sent from the client\nThe category is a text field that allows you to subdivide the log entries into various types you normally pick a name for each application such as 'HTTP' for the in build web server in InterSystems IRIS or 'IMT' for the InterSystems Message Transport application. The message is any text message that you wish to be recorded, data is any extra data you wish to log. routine is optional and is the routine name you called from. Note that data can be passed by reference and if done it will merge all this information into a subscript of the log global so you can store large quantities of information if needed. The return value of this function is the node number where this data is logged or 0 if no log entry was written typically because the system log level was not set to log an event of the level passed in."}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["So if you wish to log a problem with a Http request because the Type is wrong while reading it into the local variable 'request' you could call: ",(0,n.jsx)(t.code,{children:'Do ##class(%Library.SysLog).Log(1,"HTTP","Invalid Http request type. Type="_type,request)'})," Besides the information you pass to the Log method it will automatically log the current date and time along with the process Id the calling routine name and the current namespace."]}),"\n",(0,n.jsx)(t.h3,{id:"logerror",children:"LogError"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod LogError(category As %String = "ERROR", message As %String, routine As %String) As %Integer\n'})}),"\n",(0,n.jsx)(t.p,{children:"Call this to log an unexpected ObjectScript error. Pass in the category to log this error under, the message you want reported and the routine that you are logging the error from (this is optional). The level of detail the error is logged at is determined by the system wide setting, see ErrorDetailGet and ErrorDetailSet to set/get this value. The choices are:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"0 - Just log the message and the value of $ZE and $ZU(56,5)"}),"\n",(0,n.jsx)(t.li,{children:"1 - Log the message, the value of $ZE and $ZU(56,5) and the call stack"}),"\n",(0,n.jsx)(t.li,{children:"2 - Log the local symbol table $ZE, $ZU(56,5) and the call stack"}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"loguserinfo",children:"LogUserInfo"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod LogUserInfo(category As %String, username As %String, machinename As %String, exename As %String, IPaddress As %String, routine As %String) As %Integer\n"})}),"\n",(0,n.jsx)(t.p,{children:'Log the user information at log level 2 (operational) to category \'UserInfo\'. If any of username or machinename or exename or IPaddress are blank or missing then they default to the values setup in the partition in $ZU(67,n,$J). You normally call without any parameters at the start of your application to log the person using this job, but you can override the value from $ZU(67) is you need to. If category is blank it defaults to "UserInfo". routine is the optional routine you are logging this from, if not specified it defaults to the value found from $Stack($Stack-1,"PLACE").'}),"\n",(0,n.jsx)(t.h3,{id:"removeoldentries",children:"RemoveOldEntries"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod RemoveOldEntries()\n"})}),"\n",(0,n.jsx)(t.p,{children:"If there are more than MaxLogEntriesGet in the log then remove any old entries that we no longer need. This is called automatically by Log and LogUserInfo every 10 entries and so you do not normally need to call this manually."}),"\n",(0,n.jsx)(t.h3,{id:"maxlogentriesget",children:"MaxLogEntriesGet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod MaxLogEntriesGet() As %Library.Integer\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the current setting for the maximum number of entries before old ones are killed off."}),"\n",(0,n.jsx)(t.h3,{id:"maxlogentriesset",children:"MaxLogEntriesSet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod MaxLogEntriesSet(entries As %Library.Integer)\n"})}),"\n",(0,n.jsx)(t.p,{children:"Set the maximum number of entries that this log will hold. If this is not set it defaults to 5,000 entries before it starts removing old entries."}),"\n",(0,n.jsx)(t.h3,{id:"clearlog",children:"ClearLog"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ClearLog()\n"})}),"\n",(0,n.jsx)(t.p,{children:"Reset the entire log, removing all previous entries. It does preserve setup information."}),"\n",(0,n.jsx)(t.h3,{id:"loglevelset",children:"LogLevelSet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod LogLevelSet(level As %Integer) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Set the logging level to one of the following"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"0 - No logging"}),"\n",(0,n.jsx)(t.li,{children:"1 - Exceptional events logged, e.g. error messages"}),"\n",(0,n.jsx)(t.li,{children:"2 - Detailed event log information, e.g. 'method ABC invoked with parameters X,Y,Z and returned 1234'"}),"\n",(0,n.jsx)(t.li,{children:"3 - Raw information logging, e.g. the bytes comming from the Http request"}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"loglevelget",children:"LogLevelGet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod LogLevelGet() As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,n.jsx)(t.h3,{id:"errordetailset",children:"ErrorDetailSet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ErrorDetailSet(level As %Integer)\n"})}),"\n",(0,n.jsx)(t.p,{children:"Set the level to log any LogError events with. See LogError for a description of the levels."}),"\n",(0,n.jsx)(t.h3,{id:"errordetailget",children:"ErrorDetailGet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ErrorDetailGet() As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the level to log any LogError events with. See LogError for a description of the levels."}),"\n",(0,n.jsx)(t.h3,{id:"categoryset",children:"CategorySet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CategorySet(category As %String)\n"})}),"\n",(0,n.jsx)(t.p,{children:"Comma separated list of categories that we log or null to log all categories."}),"\n",(0,n.jsx)(t.h3,{id:"categoryget",children:"CategoryGet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CategoryGet() As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the comma separated list of categories that we log."}),"\n",(0,n.jsx)(t.h3,{id:"jobset",children:"JobSet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod JobSet(job As %String)\n"})}),"\n",(0,n.jsx)(t.p,{children:"Comma separated list of job numbers that we log or null to log all jobs."}),"\n",(0,n.jsx)(t.h3,{id:"jobget",children:"JobGet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod JobGet() As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the comma separated list of jobs that we log."})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>i});var n=s(96540);const o={},r=n.createContext(o);function l(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);