"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[65782],{36201:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>t,default:()=>o,frontMatter:()=>c,toc:()=>r});var a=n(74848),l=n(28453);const c={pagination_prev:null,pagination_next:null},t="%Library.GTWCatalog",r=[{value:"Methods",id:"methods",level:2},{value:"GetInfo",id:"getinfo",level:3},{value:"SQLFieldsExecute",id:"sqlfieldsexecute",level:3},{value:"SQLFieldsFetch",id:"sqlfieldsfetch",level:3},{value:"SQLFieldsClose",id:"sqlfieldsclose",level:3},{value:"SQLTablesExecute",id:"sqltablesexecute",level:3},{value:"SQLTablesFetch",id:"sqltablesfetch",level:3},{value:"SQLTablesClose",id:"sqltablesclose",level:3},{value:"SQLProceduresExecute",id:"sqlproceduresexecute",level:3},{value:"SQLProceduresFetch",id:"sqlproceduresfetch",level:3},{value:"SQLProceduresClose",id:"sqlproceduresclose",level:3},{value:"SQLProcedureColumnsExecute",id:"sqlprocedurecolumnsexecute",level:3},{value:"SQLProcedureColumnsFetch",id:"sqlprocedurecolumnsfetch",level:3},{value:"SQLProcedureColumnsClose",id:"sqlprocedurecolumnsclose",level:3},{value:"SQLPrimaryKeysExecute",id:"sqlprimarykeysexecute",level:3},{value:"SQLPrimaryKeysFetch",id:"sqlprimarykeysfetch",level:3},{value:"SQLPrimaryKeysClose",id:"sqlprimarykeysclose",level:3},{value:"SQLForeignKeysJExecute",id:"sqlforeignkeysjexecute",level:3},{value:"SQLForeignKeysJFetch",id:"sqlforeignkeysjfetch",level:3},{value:"SQLForeignKeysJClose",id:"sqlforeignkeysjclose",level:3},{value:"SQLForeignKeysExecute",id:"sqlforeignkeysexecute",level:3},{value:"SQLForeignKeysFetch",id:"sqlforeignkeysfetch",level:3},{value:"SQLForeignKeysClose",id:"sqlforeignkeysclose",level:3},{value:"SQLSpecialColumnsExecute",id:"sqlspecialcolumnsexecute",level:3},{value:"SQLSpecialColumnsFetch",id:"sqlspecialcolumnsfetch",level:3},{value:"SQLSpecialColumnsClose",id:"sqlspecialcolumnsclose",level:3},{value:"SQLDataSourcesExecute",id:"sqldatasourcesexecute",level:3},{value:"SQLDataSourcesFetch",id:"sqldatasourcesfetch",level:3},{value:"SQLDataSourcesClose",id:"sqldatasourcesclose",level:3},{value:"SQLDataSourcesSortedExecute",id:"sqldatasourcessortedexecute",level:3},{value:"SQLDataSourcesSortedFetch",id:"sqldatasourcessortedfetch",level:3},{value:"SQLDataSourcesSortedClose",id:"sqldatasourcessortedclose",level:3},{value:"SQLTablesJExecute",id:"sqltablesjexecute",level:3},{value:"SQLTablesJFetch",id:"sqltablesjfetch",level:3},{value:"SQLTablesJClose",id:"sqltablesjclose",level:3},{value:"SQLFieldsJExecute",id:"sqlfieldsjexecute",level:3},{value:"SQLFieldsJFetch",id:"sqlfieldsjfetch",level:3},{value:"SQLFieldsJClose",id:"sqlfieldsjclose",level:3},{value:"SQLPrimaryKeysJExecute",id:"sqlprimarykeysjexecute",level:3},{value:"SQLPrimaryKeysJFetch",id:"sqlprimarykeysjfetch",level:3},{value:"SQLPrimaryKeysJClose",id:"sqlprimarykeysjclose",level:3},{value:"SQLProcedureColumnsJExecute",id:"sqlprocedurecolumnsjexecute",level:3},{value:"SQLProcedureColumnsJFetch",id:"sqlprocedurecolumnsjfetch",level:3},{value:"SQLProcedureColumnsJClose",id:"sqlprocedurecolumnsjclose",level:3},{value:"SQLProceduresJExecute",id:"sqlproceduresjexecute",level:3},{value:"SQLProceduresJFetch",id:"sqlproceduresjfetch",level:3},{value:"SQLProceduresJClose",id:"sqlproceduresjclose",level:3},{value:"getIndexInfoExecute",id:"getindexinfoexecute",level:3},{value:"getIndexInfoFetch",id:"getindexinfofetch",level:3},{value:"getIndexInfoClose",id:"getindexinfoclose",level:3}];function i(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"librarygtwcatalog",children:"%Library.GTWCatalog"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Class %Library.GTWCatalog [ System = 3 ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Gateway Catalog Queries"}),"\n",(0,a.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(s.h3,{id:"getinfo",children:"GetInfo"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetInfo(dsn As %String, infoType As %Integer, ByRef info As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Calls SQLGriverConnect and SQLGetInfo for the corresponding datasource;"}),"\n",(0,a.jsx)(s.p,{children:"dsn<var\\> is the DSN, infoType<var\\> is the info type"}),"\n",(0,a.jsx)(s.h3,{id:"sqlfieldsexecute",children:"SQLFieldsExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SQLFieldsExecute(ByRef QHandle As %Binary, dsn As %String, tname As %String, schema As %String, catalog As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Get a List of all Fields from a table for an ODBC based SQL Gateway connection;"}),"\n",(0,a.jsx)(s.p,{children:"dsn<var\\> is the SQLGateway connection name, tname<var\\> is the string search pattern for table names, schema is the string search pattern for schema names"}),"\n",(0,a.jsx)(s.h3,{id:"sqlfieldsfetch",children:"SQLFieldsFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLFieldsFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlfieldsclose",children:"SQLFieldsClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLFieldsClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqltablesexecute",children:"SQLTablesExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SQLTablesExecute(ByRef QHandle As %Binary, dsn As %String, tname As %String = "", ttype As %String = "", schema As %String = "", catalog As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Get a List of all tables for an ODBC based SQL Gateway connection;"}),"\n",(0,a.jsx)(s.p,{children:"dsn<var\\> is the SQLGateway connection name, tname<var\\> is the string search pattern for table names, schema is the string search pattern for schema names, ttype<var\\> - list of table types to match"}),"\n",(0,a.jsx)(s.h3,{id:"sqltablesfetch",children:"SQLTablesFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLTablesFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqltablesclose",children:"SQLTablesClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLTablesClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlproceduresexecute",children:"SQLProceduresExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SQLProceduresExecute(ByRef QHandle As %Binary, dsn As %String, pname As %String, schname As %String = "", catalog As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Get a List of all procedures for an ODBC based SQL Gateway connection"}),"\n",(0,a.jsx)(s.p,{children:"dsn is the SQLGateway connection name, pname is the string search pattern for procedure names, schema is the string search pattern for schema names"}),"\n",(0,a.jsx)(s.h3,{id:"sqlproceduresfetch",children:"SQLProceduresFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLProceduresFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlproceduresclose",children:"SQLProceduresClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLProceduresClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlprocedurecolumnsexecute",children:"SQLProcedureColumnsExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SQLProcedureColumnsExecute(ByRef QHandle As %Binary, dsn As %String, schname As %String, procname As %String, catalog As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"return a list of the procedure columns for an ODBC based SQL Gateway connection"}),"\n",(0,a.jsx)(s.p,{children:"dsn is the SQLGateway connection name, procname is the string search pattern for procedure names, schema is the string search pattern for schema names Get a List of all procedures"}),"\n",(0,a.jsx)(s.h3,{id:"sqlprocedurecolumnsfetch",children:"SQLProcedureColumnsFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLProcedureColumnsFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlprocedurecolumnsclose",children:"SQLProcedureColumnsClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLProcedureColumnsClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlprimarykeysexecute",children:"SQLPrimaryKeysExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SQLPrimaryKeysExecute(ByRef QHandle As %Binary, dsn As %String, tname As %String, catalog As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Get a List of primary keys for an ODBC based SQL Gateway connection"}),"\n",(0,a.jsx)(s.p,{children:"dsn is the SQLGateway connection name, tname is the table name in the format SCHEMA_NAME.TABLE_NAME"}),"\n",(0,a.jsx)(s.h3,{id:"sqlprimarykeysfetch",children:"SQLPrimaryKeysFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLPrimaryKeysFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlprimarykeysclose",children:"SQLPrimaryKeysClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLPrimaryKeysClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlforeignkeysjexecute",children:"SQLForeignKeysJExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SQLForeignKeysJExecute(ByRef QHandle As %Binary, dsn As %String, tname As %String, catalog As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Get a List of foreign keys for an JDBC based SQL Gateway connection"}),"\n",(0,a.jsx)(s.p,{children:"dsn is the SQLGateway connection name, tname is the table name in the format SCHEMA_NAME.TABLE_NAME"}),"\n",(0,a.jsx)(s.h3,{id:"sqlforeignkeysjfetch",children:"SQLForeignKeysJFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLForeignKeysJFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlforeignkeysjclose",children:"SQLForeignKeysJClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLForeignKeysJClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlforeignkeysexecute",children:"SQLForeignKeysExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SQLForeignKeysExecute(ByRef QHandle As %Binary, dsn As %String, tname As %String, catalog As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Get a List of foreign keys for an ODBC based SQL Gateway connection"}),"\n",(0,a.jsx)(s.p,{children:"dsn is the SQLGateway connection name, tname is the table name in the format SCHEMA_NAME.TABLE_NAME"}),"\n",(0,a.jsx)(s.h3,{id:"sqlforeignkeysfetch",children:"SQLForeignKeysFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLForeignKeysFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlforeignkeysclose",children:"SQLForeignKeysClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLForeignKeysClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlspecialcolumnsexecute",children:"SQLSpecialColumnsExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SQLSpecialColumnsExecute(ByRef QHandle As %Binary, dsn As %String, tname As %String, catalog As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Get a List of special columns for an ODBC based SQL Gateway connection"}),"\n",(0,a.jsx)(s.p,{children:"dsn is the SQLGateway connection name, tname is the table name in the format SCHEMA_NAME.TABLE_NAME"}),"\n",(0,a.jsx)(s.h3,{id:"sqlspecialcolumnsfetch",children:"SQLSpecialColumnsFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLSpecialColumnsFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlspecialcolumnsclose",children:"SQLSpecialColumnsClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLSpecialColumnsClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqldatasourcesexecute",children:"SQLDataSourcesExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLDataSourcesExecute(ByRef QHandle As %Binary, direction As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"return list of ODBC datasources"}),"\n",(0,a.jsx)(s.p,{children:"direction could be one of the following: <br\\>SQL_FETCH_NEXT 1 <br\\>SQL_FETCH_FIRST 2 <br\\>SQL_FETCH_FIRST_USER 31 <br\\>SQL_FETCH_FIRST_SYSTEM 32"}),"\n",(0,a.jsx)(s.h3,{id:"sqldatasourcesfetch",children:"SQLDataSourcesFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLDataSourcesFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqldatasourcesclose",children:"SQLDataSourcesClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLDataSourcesClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqldatasourcessortedexecute",children:"SQLDataSourcesSortedExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLDataSourcesSortedExecute(ByRef QHandle As %Binary, direction As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"return list of ODBC datasources, lexicographically sorted"}),"\n",(0,a.jsx)(s.p,{children:"direction could be one of the following: <br\\>SQL_FETCH_NEXT 1 <br\\>SQL_FETCH_FIRST 2 <br\\>SQL_FETCH_FIRST_USER 31 <br\\>SQL_FETCH_FIRST_SYSTEM 32"}),"\n",(0,a.jsx)(s.h3,{id:"sqldatasourcessortedfetch",children:"SQLDataSourcesSortedFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLDataSourcesSortedFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqldatasourcessortedclose",children:"SQLDataSourcesSortedClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLDataSourcesSortedClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqltablesjexecute",children:"SQLTablesJExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SQLTablesJExecute(ByRef QHandle As %Binary, dsn As %String, tname As %String = "", ttype As %String = "", schema As %String = "", catalog As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Get a List of all tables for a JDBC based SQL Gateway connection"}),"\n",(0,a.jsx)(s.p,{children:"dsn<var\\> is the SQLGateway connection name, tname<var\\> is the string search pattern for table names, schema is the string search pattern for schema names, ttype<var\\> - list of table types to match"}),"\n",(0,a.jsx)(s.h3,{id:"sqltablesjfetch",children:"SQLTablesJFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLTablesJFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqltablesjclose",children:"SQLTablesJClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLTablesJClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlfieldsjexecute",children:"SQLFieldsJExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SQLFieldsJExecute(ByRef QHandle As %Binary, dsn As %String, tname As %String, schema As %String, catalog As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Get a List of all fields in a table for a JDBC based SQL Gateway connection"}),"\n",(0,a.jsx)(s.p,{children:"dsn<var\\> is the SQLGateway connection name, tname<var\\> is the string search pattern for table names, schema is the string search pattern for schema names"}),"\n",(0,a.jsx)(s.h3,{id:"sqlfieldsjfetch",children:"SQLFieldsJFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLFieldsJFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status [ ProcedureBlock = 1 ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlfieldsjclose",children:"SQLFieldsJClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLFieldsJClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlprimarykeysjexecute",children:"SQLPrimaryKeysJExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SQLPrimaryKeysJExecute(ByRef QHandle As %Binary, dsn As %String, tname As %String, catalog As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Get a List of primary keys for a JDBC based SQL Gateway connection"}),"\n",(0,a.jsx)(s.p,{children:"dsn is the SQLGateway connection name, tname is the table name in the format SCHEMA_NAME.TABLE_NAME"}),"\n",(0,a.jsx)(s.h3,{id:"sqlprimarykeysjfetch",children:"SQLPrimaryKeysJFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLPrimaryKeysJFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlprimarykeysjclose",children:"SQLPrimaryKeysJClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLPrimaryKeysJClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlprocedurecolumnsjexecute",children:"SQLProcedureColumnsJExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SQLProcedureColumnsJExecute(ByRef QHandle As %Binary, dsn As %String, schname As %String, procname As %String, catalog As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"return a list of the procedure columns for a JDBC based SQL Gateway connection"}),"\n",(0,a.jsx)(s.p,{children:"dsn is the SQLGateway connection name, procname is the string search pattern for procedure names, schema is the string search pattern for schema names"}),"\n",(0,a.jsx)(s.h3,{id:"sqlprocedurecolumnsjfetch",children:"SQLProcedureColumnsJFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLProcedureColumnsJFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlprocedurecolumnsjclose",children:"SQLProcedureColumnsJClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLProcedureColumnsJClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlproceduresjexecute",children:"SQLProceduresJExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SQLProceduresJExecute(ByRef QHandle As %Binary, dsn As %String, pname As %String, schname As %String, catalog As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Get a List of all procedures for a JDBC based SQL Gateway connection"}),"\n",(0,a.jsx)(s.p,{children:"dsn is the SQLGateway connection name, pname is the string search pattern for procedure names, schema is the string search pattern for schema names"}),"\n",(0,a.jsx)(s.h3,{id:"sqlproceduresjfetch",children:"SQLProceduresJFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLProceduresJFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"sqlproceduresjclose",children:"SQLProceduresJClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SQLProceduresJClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"getindexinfoexecute",children:"getIndexInfoExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod getIndexInfoExecute(ByRef QHandle As %Binary, dsn As %String, tname As %String, schema As %String, nonunique As %Boolean, approximate As %Boolean = "", catalog As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Get a List of all indices in a table for a JDBC based SQL Gateway connection"}),"\n",(0,a.jsx)(s.p,{children:"dsn<var\\> is the SQLGateway connection name, tname<var\\> is the string search pattern for table names, schema is the string search pattern for schema names"}),"\n",(0,a.jsx)(s.h3,{id:"getindexinfofetch",children:"getIndexInfoFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod getIndexInfoFetch(ByRef QHandle As %Binary, ByRef Row As %List, AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"getindexinfoclose",children:"getIndexInfoClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod getIndexInfoClose(QHandle As %Binary) As %Status\n"})})]})}function o(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>r});var a=n(96540);const l={},c=a.createContext(l);function t(e){const s=a.useContext(c);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),a.createElement(c.Provider,{value:s},e.children)}}}]);