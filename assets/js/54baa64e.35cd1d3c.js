"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[78431],{24841:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>n,default:()=>c,frontMatter:()=>l,toc:()=>r});var a=t(74848),i=t(28453);const l={pagination_prev:null,pagination_next:null},n="%DeepSee.QualityMeasure.Utils",r=[{value:"Methods",id:"methods",level:2},{value:"%ProcessQualityMeasure",id:"processqualitymeasure",level:3},{value:"%QualityMeasureExists",id:"qualitymeasureexists",level:3},{value:"%GetQualityMeasureName",id:"getqualitymeasurename",level:3},{value:"%GetQualityElements",id:"getqualityelements",level:3},{value:"%GetQualityMeasureExpression",id:"getqualitymeasureexpression",level:3},{value:"%GetQualityMeasureClass",id:"getqualitymeasureclass",level:3},{value:"%ParseQualityMeasureName",id:"parsequalitymeasurename",level:3},{value:"%CheckPrivilege",id:"checkprivilege",level:3},{value:"%GetModel",id:"getmodel",level:3},{value:"%GetQualityMeasuresForCube",id:"getqualitymeasuresforcube",level:3},{value:"%GetQualityMeasureList",id:"getqualitymeasurelist",level:3},{value:"%GetQualityMeasureArray",id:"getqualitymeasurearray",level:3},{value:"%SaveQMsrDefinition",id:"saveqmsrdefinition",level:3},{value:"%GetCatalogList",id:"getcataloglist",level:3},{value:"%GetSetList",id:"getsetlist",level:3}];function u(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"deepseequalitymeasureutils",children:"%DeepSee.QualityMeasure.Utils"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Class %DeepSee.QualityMeasure.Utils Extends %RegisteredObject [ System = 4 ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Run-time and compile-time utility methods for Quality Measures. This class should be consider to be INTERNAL to DeepSee; There are no methods intended for public use."}),"\n",(0,a.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(s.h3,{id:"processqualitymeasure",children:"%ProcessQualityMeasure"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ProcessQualityMeasure(pQMSRDef As %DeepSee.Model.QualityMeasure.qualityMeasure, Output pInfo) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Build the meta data for the given quality measure."}),"\n",(0,a.jsx)(s.h3,{id:"qualitymeasureexists",children:"%QualityMeasureExists"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %QualityMeasureExists(pQMSRName As %String, Output pStatus As %Status) As %Boolean\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pQMSRName of a DeepSee Quality Measure, test if it exists."}),"\n",(0,a.jsx)(s.h3,{id:"getqualitymeasurename",children:"%GetQualityMeasureName"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetQualityMeasureName(pQMSRName As %String, Output pStatus As %Status) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pQMSRName of a DeepSee Quality Measure, return its name in its original case."}),"\n",(0,a.jsx)(s.h3,{id:"getqualityelements",children:"%GetQualityElements"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetQualityElements(pQMSRName As %String, Output pList As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pQMSRName of a DeepSee Quality Measure, return a list of the groups and elements it contains."}),"\n",(0,a.jsx)(s.h3,{id:"getqualitymeasureexpression",children:"%GetQualityMeasureExpression"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetQualityMeasureExpression(pQMSRName As %String, Output pStatus As %Status) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pQMSRName of a DeepSee Quality Measure, return its MDX expression."}),"\n",(0,a.jsx)(s.h3,{id:"getqualitymeasureclass",children:"%GetQualityMeasureClass"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetQualityMeasureClass(pQMSRName As %String, Output pStatus As %Status, pUseLink As %Boolean = 0, ByRef pVisited) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given the logical name, pQMSRName of a DeepSee Quality Measure, return the class name of the quality measure definition. If pUseLink is true, then return the resolved master class name for a linked measure."}),"\n",(0,a.jsx)(s.h3,{id:"parsequalitymeasurename",children:"%ParseQualityMeasureName"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ParseQualityMeasureName(pQMSRName As %String, Output pGroup As %String, Output pElement As %String) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:'Given the logical full name, pQMSRName of a DeepSee Quality Measure, return the quality measure name as well as the optional group and element names. A full name takes the form: "catalog/set/id/group/element".'}),"\n",(0,a.jsx)(s.h3,{id:"checkprivilege",children:"%CheckPrivilege"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %CheckPrivilege(pQMSRName As %String) As %Boolean [ Final ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Test that the current user holds privileges on the given quality measure."}),"\n",(0,a.jsx)(s.h3,{id:"getmodel",children:"%GetModel"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetModel(pQMSRName As %String, Output pStatus As %Status, pUseLink As %Boolean = 0) As %DeepSee.Model.QualityMeasure.qualityMeasure\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Given the logical name, pQMSRName of a DeepSee quality measure, return an instance of the %DeepSee.Model.QualityMeasure.qualityMeasure meta-data object that describes the quality measure.",(0,a.jsx)(s.br,{}),'\nReturn "" if the given quality measure does not exist.']}),"\n",(0,a.jsx)(s.h3,{id:"getqualitymeasuresforcube",children:"%GetQualityMeasuresForCube"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetQualityMeasuresForCube(Output pList As %List, pCube As %String) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Get a list of currently defined (and published) quality measures for a specific cube. This is returned as:",(0,a.jsx)(s.br,{}),"\npList(NAME) = $LB(name,caption,description)"]}),"\n",(0,a.jsx)(s.h3,{id:"getqualitymeasurelist",children:"%GetQualityMeasureList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetQualityMeasureList(Output pList As %List, pCatalog As %String = "", pSet As %String = "") As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Get a list of currently defined quality measures. This is returned as:",(0,a.jsx)(s.br,{}),"\npList(NAME) = $LB(name,caption,moddate,type,msrCaption)"]}),"\n",(0,a.jsx)(s.h3,{id:"getqualitymeasurearray",children:"%GetQualityMeasureArray"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetQualityMeasureArray(ByRef pParameters, Output pMetaData, Output %pData) As %Status [ Final, Internal ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return an array of all currently defined DeepSee Quality Measures in a format that can be used by a finderDialog."}),"\n",(0,a.jsx)(s.h3,{id:"saveqmsrdefinition",children:"%SaveQMsrDefinition"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %SaveQMsrDefinition(pClassName As %String, pSuper As %String = "", pDesc As %String, pModel As %DeepSee.Model.cube, pDomain As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Utility method to create and save a qmsr definition class."}),"\n",(0,a.jsx)(s.h3,{id:"getcataloglist",children:"%GetCatalogList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetCatalogList(Output pList As %List) As %Status\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Get a list of currently defined quality measure catalogs. This is returned as:",(0,a.jsx)(s.br,{}),"\npList(NAME) = $LB(name)"]}),"\n",(0,a.jsx)(s.h3,{id:"getsetlist",children:"%GetSetList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetSetList(Output pList As %List, pCatalog As %String = "") As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Get a list of currently defined quality measure sets. This is returned as:",(0,a.jsx)(s.br,{}),"\npList(NAME) = $LB(name)"]})]})}function c(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>n,x:()=>r});var a=t(96540);const i={},l=a.createContext(i);function n(e){const s=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),a.createElement(l.Provider,{value:s},e.children)}}}]);