"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[31030],{71677:(e,r,n)=>{n.r(r),n.d(r,{contentTitle:()=>i,default:()=>a,frontMatter:()=>d,toc:()=>o});var t=n(74848),s=n(28453);const d={pagination_prev:null,pagination_next:null},i="%SYSTEM.TCPDevice",o=[{value:"Methods",id:"methods",level:2},{value:"GetDisconnectCode",id:"getdisconnectcode",level:3},{value:"LocalAddr",id:"localaddr",level:3},{value:"LocalAddrPort",id:"localaddrport",level:3},{value:"LocalPort",id:"localport",level:3},{value:"PeerAddr",id:"peeraddr",level:3},{value:"PeerAddrPort",id:"peeraddrport",level:3},{value:"PeerPort",id:"peerport",level:3}];function c(e){const r={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"systemtcpdevice",children:"%SYSTEM.TCPDevice"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Class %SYSTEM.TCPDevice Extends Help [ System = 4 ]\n"})}),"\n",(0,t.jsxs)(r.p,{children:["The %SYSTEM.TCPDevice class provides an interface for retrieving IP address and port of current TCP device.",(0,t.jsx)(r.br,{}),"\nThese interfaces support both IPV6 and IPV4 internet addresses."]}),"\n",(0,t.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(r.h3,{id:"getdisconnectcode",children:"GetDisconnectCode"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod GetDisconnectCode() As %Integer\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Get the O/S error that caused a  or  error due to peer disconnect or network error on a TCP device.",(0,t.jsx)(r.br,{}),"\nThe $IO must be a TCP device or $system.TCPDevice.GetDisconnectCode() generates a  error.",(0,t.jsx)(r.br,{}),"\nThe error returned will be 0 if the peer closed the TCP connection."]}),"\n",(0,t.jsx)(r.h3,{id:"localaddr",children:"LocalAddr"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod LocalAddr(Format As %Integer = 0) As %String\n"})}),"\n",(0,t.jsx)(r.p,{children:"Get local IP address of current TCP device."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters:"}),(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"Format"})," - The format of address to be returned. If this argument is omitted the default value is 0. The value could be:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"0: in text format, 'dotted' decimal string for IPV4, colon-hex address string for IPV6."}),"\n",(0,t.jsxs)(r.li,{children:["1: in binary format, 4 character length for IPV4, 16 characters for IPV6.\n",(0,t.jsx)(r.strong,{children:"Return:"}),(0,t.jsx)(r.br,{}),"\nReturns the local IP address associated with the TCP device. It could be in binary or text format depends on the ",(0,t.jsx)(r.strong,{children:"Format"})," parameter. For binary format the IP address is in Network order.",(0,t.jsx)(r.br,{}),"\nIf the current device ($IO) is not a TCP device, it gets  error.",(0,t.jsx)(r.br,{}),"\nIf the TCP device is in 'listening' state, the IP address would be all zeros (INADDR_ANY)."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"localaddrport",children:"LocalAddrPort"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod LocalAddrPort(Addr As %String) As %String\n"})}),"\n",(0,t.jsx)(r.p,{children:"Get local IP address and port number of current TCP device."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters:"}),(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"Format"})," - The format of address to be returned. If this argument is omitted the default value is 0. The value could be:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"0: in text format, 'dotted' decimal string for IPV4, colon-hex address string for IPV6."}),"\n",(0,t.jsxs)(r.li,{children:["1: in binary format, 4 character length for IPV4, 16 characters for IPV6.\n",(0,t.jsx)(r.strong,{children:"Return:"}),(0,t.jsx)(r.br,{}),"\nReturns the local IP address and port number associated with the TCP device. The IP address could be in binary or text format depends on the ",(0,t.jsx)(r.strong,{children:"Format"})," parameter. For binary format the IP address is in Network order.",(0,t.jsx)(r.br,{}),"\nIf the current device ($IO) is not a TCP device, it gets  error.",(0,t.jsx)(r.br,{}),"\nIf the TCP device is in 'listening' state, the IP address would be all zeros (INADDR_ANY).",(0,t.jsx)(r.br,{}),"\nThe return string is a List string with IP address in first and port number in second element.",(0,t.jsx)(r.br,{}),"\nThe port number is a numberic string in Host order."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"localport",children:"LocalPort"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod LocalPort() As %String\n"})}),"\n",(0,t.jsx)(r.p,{children:"Get local port number of current TCP device."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return:"}),(0,t.jsx)(r.br,{}),"\nReturns the local port number associated with the TCP device. If the current device ($IO) is not a TCP device, it gets  error.",(0,t.jsx)(r.br,{}),"\nThe port number is a numberic string in Host order."]}),"\n",(0,t.jsx)(r.h3,{id:"peeraddr",children:"PeerAddr"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod PeerAddr(Format As %Integer = 0) As %String\n"})}),"\n",(0,t.jsx)(r.p,{children:"Get foreign IP address of current TCP device."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters:"}),(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"Format"})," - The format of address to be returned. If this argument is omitted the default value is 0. The value could be:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"0: in text format, 'dotted' decimal string for IPV4, colon-hex address string for IPV6."}),"\n",(0,t.jsxs)(r.li,{children:["1: in binary format, 4 character length for IPV4, 16 characters for IPV6.\n",(0,t.jsx)(r.strong,{children:"Return:"}),(0,t.jsx)(r.br,{}),"\nReturns the foreign IP address associated with the TCP device. It could be in binary or text format depends on the ",(0,t.jsx)(r.strong,{children:"Format"})," parameter. For binary format the IP address is in Network order.",(0,t.jsx)(r.br,{}),"\nIf the current device ($IO) is not a TCP device, it gets  error.",(0,t.jsx)(r.br,{}),"\nIf the TCP device is in 'listening' state or not connected to remote system, it returns a null string."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"peeraddrport",children:"PeerAddrPort"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod PeerAddrPort(Format As %Integer = 0) As %String\n"})}),"\n",(0,t.jsx)(r.p,{children:"Get foreign IP address and port number of current TCP device."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters:"}),(0,t.jsx)(r.br,{}),"\n",(0,t.jsx)(r.strong,{children:"Format"})," - The format of address to be returned. If this argument is omitted the default value is 0. The value could be:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"0: in text format, 'dotted' decimal string for IPV4, colon-hex address string for IPV6."}),"\n",(0,t.jsxs)(r.li,{children:["1: in binary format, 4 character length for IPV4, 16 characters for IPV6.\n",(0,t.jsx)(r.strong,{children:"Return:"}),(0,t.jsx)(r.br,{}),"\nReturns the foreign IP address and port number associated with the TCP device. The IP address could be in binary or text format depends on the ",(0,t.jsx)(r.strong,{children:"Format"})," parameter. For binary format the IP address is in Network order.",(0,t.jsx)(r.br,{}),"\nIf the current device ($IO) is not a TCP device, it gets  error.",(0,t.jsx)(r.br,{}),"\nIf the TCP device is in 'listening' state or not connected to remote system, it returns a null string.",(0,t.jsx)(r.br,{}),"\nThe return string is a List string with IP address in first and port number in second element.",(0,t.jsx)(r.br,{}),"\nThe port number is a numberic string in Host order."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"peerport",children:"PeerPort"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod PeerPort() As %String\n"})}),"\n",(0,t.jsx)(r.p,{children:"Get foreign port number of current TCP device."}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return:"}),(0,t.jsx)(r.br,{}),"\nReturns the foreign port number associated with the TCP device. If the current device ($IO) is not a TCP device, it gets  error.",(0,t.jsx)(r.br,{}),"\nIf the TCP device is in 'listening' state or not connected to remote system, it returns a null string.",(0,t.jsx)(r.br,{}),"\nThe port number is a numberic string in Host order."]})]})}function a(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var t=n(96540);const s={},d=t.createContext(s);function i(e){const r=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(d.Provider,{value:r},e.children)}}}]);