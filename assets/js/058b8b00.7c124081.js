"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[79386],{98112:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>c,frontMatter:()=>a,toc:()=>o});var r=n(74848),s=n(28453);const a={pagination_prev:null,pagination_next:null},i="%Library.DynamicArray",o=[{value:"Methods",id:"methods",level:2},{value:"add",id:"add",level:3},{value:"addAll",id:"addall",level:3},{value:"%OnNew",id:"onnew",level:3},{value:"%DispatchGetProperty",id:"dispatchgetproperty",level:3},{value:"%DispatchSetProperty",id:"dispatchsetproperty",level:3},{value:"%Pop",id:"pop",level:3},{value:"%Remove",id:"remove",level:3},{value:"%Get",id:"get",level:3},{value:"%GetTypeCodeOf",id:"gettypecodeof",level:3},{value:"%GetIterator",id:"getiterator",level:3},{value:"%IsDefined",id:"isdefined",level:3},{value:"%Push",id:"push",level:3},{value:"%Set",id:"set",level:3},{value:"%DispatchMethod",id:"dispatchmethod",level:3},{value:"fromObject",id:"fromobject",level:3}];function h(e){const t={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",illegal:"illegal",li:"li",maxstring:"maxstring",p:"p",pre:"pre",store:"store",strong:"strong",ul:"ul",wide:"wide",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"librarydynamicarray",children:"%Library.DynamicArray"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Library.DynamicArray Extends %Library.DynamicAbstractObject [ Final, System = 1 ]\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"For information on this class"}),", see ",(0,r.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+%25Library.DynamicArray",children:"Using Dynamic Entities"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Dynamic Array type class."}),"\n",(0,r.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(t.h3,{id:"add",children:"add"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method add(value As %Library.Any) As %Library.DynamicArray\n"})}),"\n",(0,r.jsx)(t.p,{children:"add value to the set."}),"\n",(0,r.jsx)(t.p,{children:"It is left to the implementation to decide whether duplicates are allowed (multiset) or not (proper set)."}),"\n",(0,r.jsx)(t.p,{children:"parameters:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"value: value to add to the set"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"returns:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"oref referencing the modified set"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"throws:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"exception"}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"addall",children:"addAll"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method addAll(value As %Library.AbstractSet) As %Library.DynamicArray\n"})}),"\n",(0,r.jsx)(t.p,{children:"add() all values[n] where 0\u2264n\u2264 size(values)"}),"\n",(0,r.jsx)(t.p,{children:"parameters:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"values: array of values to add to the set"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"returns:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"oref referencing the modified set"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"throws:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"exception"}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnNew(initvalue As %RawString) As %Status [ Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"dispatchgetproperty",children:"%DispatchGetProperty"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %DispatchGetProperty(propertyName As %String) [ Internal, ServerOnly = 1 ]\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Property dispatch method to catch references to virtual properties.",(0,r.jsx)(t.br,{}),"\nThis should not be called directly."]}),"\n",(0,r.jsx)(t.h3,{id:"dispatchsetproperty",children:"%DispatchSetProperty"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'Method %DispatchSetProperty(propertyName As %String(MAXLEN=""), value As %String) [ Internal, ServerOnly = 1 ]\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Property dispatch method to catch references to virtual properties.",(0,r.jsx)(t.br,{}),"\nThis should not be called directly."]}),"\n",(0,r.jsx)(t.h3,{id:"pop",children:"%Pop"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Pop() As %Library.Any\n"})}),"\n",(0,r.jsx)(t.p,{children:"Returns the value of the last member of the array. The value is then removed from the array. Nothing is removed if the array is empty."}),"\n",(0,r.jsx)(t.p,{children:'Note: Any of the 4 situations causes %Pop() to return the empty string, "":'}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"(1) Popping from an empty array"}),"\n",(0,r.jsx)(t.li,{children:"(2) Last member is the empty string"}),"\n",(0,r.jsxs)(t.li,{children:["(3) Last member is the value ",(0,r.jsx)(t.em,{children:"null"})]}),"\n",(0,r.jsx)(t.li,{children:"(4) Last member is unassigned"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"If you want to differentiate between these 4 cases then you must test the array and its last element before calling the %Pop method."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Returns"})," The value of the last member of the array.",(0,r.jsx)(t.br,{}),'\nIf the array is empty, the method returns the empty string, "".']}),"\n",(0,r.jsx)(t.h3,{id:"remove",children:"%Remove"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Remove(pos As %Integer) As %DynamicAbstractObject\n"})}),"\n",(0,r.jsx)(t.p,{children:"Remove the element at the specified index position from the %DynamicArray. All %DynamicArray elements following the removed element will have their subscript position decremented by 1. This may cause problems with any %Iterator.Array object iterating over this %DynamicArray."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"pos"})," Index position within the %DynamicArray of the element you wish to remove."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Returns"})," The value of the removed %DynamicArray element."]}),"\n",(0,r.jsx)(t.h3,{id:"get",children:"%Get"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Get(key As %Integer, default As %Any, type As %String) As %Any\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Given the index position of a value in an array, return the actual value that corresponds to the index. If the value is the JSON ",(0,r.jsx)(t.em,{children:"null"}),' value then an empty string "" is returned. By default an empty string "" is also returned if the value does not exist. You can differentiate between a ',(0,r.jsx)(t.em,{children:"null"}),' value or an unassigned value that returns a "" string or a real "" string value by using the %GetTypeOf() method.']}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"key"})," The 'key' argument contains the index value of the array element that you wish to retrieve. Note that the key of a %DynamicArray is evaluated as an ObjectScript integer expression so that dynarray.%Get(\"abc\") gives the same value as dynarray.%Get(0)."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"default"})," The 'default' argument is optional, and if missing then it is assumed to contain the empty string. The 'default' value is returned when the selected array element is undefined."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"type"})," The 'type' argument is optional, and if missing then it is assumed to contain the empty string."]}),"\n",(0,r.jsx)(t.p,{children:"If the 'type' argument is present then its value must be one of the following string values:"}),"\n",(0,r.jsxs)(t.p,{children:['"" - %Get(key) without conversions',(0,r.jsx)(t.br,{}),'\n"string" - Convert to text string',(0,r.jsx)(t.br,{}),'\n"string>base64" - Convert to text string then encode into base64',(0,r.jsx)(t.br,{}),'\n"string<base64" - Convert to text string then decode from base64',(0,r.jsx)(t.br,{}),'\n"stream" - Place string conversion into %Stream',(0,r.jsx)(t.br,{}),'\n"stream>base64" - String encoded into base64 into %Stream',(0,r.jsx)(t.br,{}),'\n"stream<base64" - String decoded from base64 into %Stream',(0,r.jsx)(t.br,{}),'\n"json" - Convert to JSON representation']}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Returns"})," The value of the array data element as selected by the index value of the key argument."]}),"\n",(0,r.jsx)(t.p,{children:"If the 'type' argument is the empty string then the selected array element is converted to the corresponding ObjectScript value."}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is the text value \"string\", then the value of the array element is converted to an ObjectScript string value. The JSON ",(0,r.jsx)(t.em,{children:"null"})," value is converted to the empty string; the values dervied from JSON ",(0,r.jsx)(t.em,{children:"false"}),", JSON ",(0,r.jsx)(t.em,{children:"true"}),' and a JSON format number will keep their JSON textual representation; an ObjectScript numeric value will use its ObjectScript canonical numeric representation (this includes the IEEE floating-point values for $DOUBLE("nan") and $DOUBLE("inf")); JSON array and JSON object values (represented by %DynamicArray and %DynamicObject oref values) and any other ObjectScript oref values are given their default ObjectScript conversion to string representation (e.g., "99@%Library.DynamicArray").']}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"string>base64\" then the value is first converted using the string type and then that result is encoded using Base64 encoding. The characters of the string value must be values between $CHAR(0) and $CHAR(255) because only those character values can be converted using Base64 encoding. If the string contains a character value greater than $CHAR(255) then a ",(0,r.jsx)(t.wide,{char:"",children:" error is signaled."})]}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"string<base64\" then the string value of the element must contain a Base64 encoded string and the string characters are decoded into binary bytes. If a character not supported by the Base64 encoding is encountered then an ",(0,r.jsx)(t.illegal,{value:"",children:' error is signaled. The white-space characters supported by the Base64 encoding may appear in the string and those characters will be ignored. Decoding stops when either the "=" termination character is encountered or the end of the string is encountered.'})]}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"stream\" then the value of the array element is converted to a string value and then that string value is loaded into a newly created %Stream.DynamicCharacter object or a newly created %Stream.DynamicBinary object. The oref of the newly created %Stream becomes the return value of %Get(...). Unlike ObjectScript string values, converting a large array element into a %Stream.DynamicCharacter object or a %Stream.DynamicBinary object will never signal the ",(0,r.jsxs)(t.maxstring,{children:[" error (although it may signal ",(0,r.jsx)(t.store,{children:" if the memory capacity of the process is exceeded.) The \"stream\" 'type' will convert array elements using the same conventions and conversions as the \"string\" 'type' value."})]})]}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"stream>base64\" then the value of the array element is first converted to a string value. Then that string value is encoded using Base64 conventions and loaded into a newly created %Stream.DynamicBinary object whose oref will become the return value of %Get(...). Unlike ObjectScript string values, converting a large array element into a %Stream.DynamicBinary object will never signal the ",(0,r.jsxs)(t.maxstring,{children:[" error (although it may signal ",(0,r.jsx)(t.store,{children:" if the memory capacity of the process is exceeded.) The \"stream>base64\" 'type' will convert array elements using the same conventions, conversions, restrictions and errors as the \"string>base64\" 'type' value."})]})]}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"stream<base64\" then the value of the array element is first converted to a string value. Then that string value is decoded using Base64 conventions and loaded into a newly created %Stream.DynamicBinary object whose oref will become the return value of %Get(...). Unlike ObjectScript string values, converting a large array element into a %Stream.DynamicBinary object will never signal the ",(0,r.jsxs)(t.maxstring,{children:[" error (although it may signal ",(0,r.jsx)(t.store,{children:" if the memory capacity of the process is exceeded.) The \"stream<base64\" 'type' will convert array elements using the same conventions, conversions, restrictions and errors as the \"string<base64\" 'type' value."})]})]}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"json\" then the value of the selected array element is converted to the corresponding JSON value. Note that converting the following array element values to JSON will signal the ",(0,r.jsxs)(t.illegal,{value:"",children:[" error: the $DOUBLE values for a ",(0,r.jsx)(t.strong,{children:"NaN"})," and an ",(0,r.jsx)(t.strong,{children:"Infinity"}),". Converting any oref value that does not refer to an object of the %DynamicObject class or the %DynamicArray class will signal some form of illegal value or not supported error."]})]}),"\n",(0,r.jsxs)(t.p,{children:['There is a possible workaround for the case where dao.%Get(index,,"json") signals a not supported error when the dao element is an ObjectScript oref value. You can modify the class of that object to be "JSON enabled" by inheriting the %JSON.Adaptor class. You will then be able to call the %JSONExportToString(...) method to convert that class object to JSON text that can be imported back into an IRIS system. ',(0,r.jsx)(t.code,{children:'Set Result = dao.%Get(index,,"json") ;; could be replaced by Set Status=dao.%Get(index).%JSONExportToString(.Result)'})]}),"\n",(0,r.jsx)(t.h3,{id:"gettypecodeof",children:"%GetTypeCodeOf"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetTypeCodeOf(key As %Integer) As %Integer [ Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"INTERNAL ONLY!"}),"\n",(0,r.jsx)(t.p,{children:"The %GetTypeCodeOf(key) method is for internal use only. The actions taken by this method may change in the future as additional capabilities are added to %DynamicAbstractObject class objects."}),"\n",(0,r.jsx)(t.h3,{id:"getiterator",children:"%GetIterator"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetIterator() As %Iterator.Array\n"})}),"\n",(0,r.jsx)(t.p,{children:"Generates a %Iterator.Array object which contains a %GetNext(.key,.value,.type) method which will iterate over all the defined elements in the %DynamicArray object."}),"\n",(0,r.jsx)(t.p,{children:"Warning: Adding or removing elements to the %DynamicArray during an interation can cause further calls on the %GetNext(.key,.value,.type) method to have undefined behavior. This happens because adding or removing an array element causes the following elements to have their index numbers modified. The modification of index numbers can cause elements to be skipped by the %GetNext iteration method or can cause elements to be visited more than once by the %GetNext iteration method."}),"\n",(0,r.jsxs)(t.p,{children:["In the example below, we will output all values contained in a %DynamicArray. ",(0,r.jsx)(t.code,{children:'set iter = DynArray.%GetIterator() while iter.%GetNext(.key, .value, .type ) { write "key = "_key_", value = "_value_", type = "_type,! }'})," See the descriptions of the %GetNext method in the %Iterator.Array for more details."]}),"\n",(0,r.jsx)(t.h3,{id:"isdefined",children:"%IsDefined"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %IsDefined(key As %Integer) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Tests if a key is defined within an array."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"key"}),' The index position of the value you wish to test, indexes begin at position 0. Note that the key of a %DynamicArray is evaluated as an ObjectScript integer expression so that dynarray.%IsDefined("abc") gives the same value as dynarray.%IsDefined(0).']}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Returns"})," A boolean value to show if a value is defined (1) or not (0)."]}),"\n",(0,r.jsx)(t.h3,{id:"push",children:"%Push"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Push(value As %Library.Any, type As %String) As %DynamicAbstractObject\n"})}),"\n",(0,r.jsx)(t.p,{children:"Given a new value, append it to the end of the current array, increasing the length of the array."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"value"})," The new value to push."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"type"})," OPTIONAL, the 'type' of the value to push."]}),"\n",(0,r.jsx)(t.p,{children:"If the 'type' argument is present then its value must be one of the following string values:"}),"\n",(0,r.jsxs)(t.p,{children:['"" - %Push(value) without conversions',(0,r.jsx)(t.br,{}),'\n"null" - "" becomes ',(0,r.jsx)(t.em,{children:"null"}),"; else push with no conversion",(0,r.jsx)(t.br,{}),'\n"boolean" - 0/nonzero becomes JSON ',(0,r.jsx)(t.em,{children:"false"}),"/",(0,r.jsx)(t.em,{children:"true"}),(0,r.jsx)(t.br,{}),'\n"number" - Convert to numeric value',(0,r.jsx)(t.br,{}),'\n"string" - Convert to text string',(0,r.jsx)(t.br,{}),'\n"string>base64" - Convert to text string then encode into base64',(0,r.jsx)(t.br,{}),'\n"string<base64" - Convert to text string then decode from base64',(0,r.jsx)(t.br,{}),'\n"stream" - %Stream contents converted to text string',(0,r.jsx)(t.br,{}),'\n"stream>base64" - %Stream contents are encoded into base64 string',(0,r.jsx)(t.br,{}),'\n"stream<base64" - %Stream is decoded from base64 into byte string']}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Returns"})," An OREF referencing the current modified array, allowing calls to %Push() to be nested."]}),"\n",(0,r.jsx)(t.p,{children:"If the 'type' argument is the empty string then ObjectScript 'value' argument is pushed onto the array without conversion."}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"null\" and the 'value' argument contains the empty string then the JSON value ",(0,r.jsx)(t.em,{children:"null"})," is pushed onto the array; all other ObjectScript values are pushed without conversion."]}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"boolean\" then the 'value' argument is first converted to a number. If that value is zero then the JSON value ",(0,r.jsx)(t.em,{children:"false"})," is pushed; otherwise the JSON value ",(0,r.jsx)(t.em,{children:"true"})," is pushed."]}),"\n",(0,r.jsx)(t.p,{children:"If the 'type' argument is \"number\" then the 'value' argument is converted to an ObjectScript numeric representation before being pushed."}),"\n",(0,r.jsx)(t.p,{children:"If the 'type' argument is \"string\" then the 'value' argument is converted to string representation before being pushed."}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"string>base64\" then the 'value' argument is converted to string representation and then the Base64 encoding of that string is pushed. The characters of the string value must be values between $CHAR(0) and $CHAR(255) because only those character values can be converted using Base64 encoding. If the string contains a character value greater than $CHAR(255) then a ",(0,r.jsx)(t.wide,{char:"",children:" error is signaled."})]}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"string<base64\" then the 'value' argument is converted to string representation and then the Base64 decoding of that string is pushed. If a character not supported by the Base64 encoding is encountered then an ",(0,r.jsx)(t.illegal,{value:"",children:' error is signaled. The white-space characters supported by the Base64 encoding may appear in the string and those characters will be ignored. Decoding stops when either the "=" termination character is encountered or the end of the string is encountered.'})]}),"\n",(0,r.jsx)(t.p,{children:"If the 'type' argument is \"stream\" then the 'value' argument must contain a reference to an object which is a subclass of the %Stream.Object class. The entire contents of the %Stream are pushed onto the array as a string value."}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"stream>base64\" then the 'value' argument must contain a reference to an object which is a subclass of the %Stream.Object class. The entire contents of the %Stream must consist of binary characters and the Base64 encoding of those characters are pushed onto the array as a string value. The characters in the %Stream must be values between $CHAR(0) and $CHAR(255) because only those character values can be converted using Base64 encoding. If the %Stream contains a character value greater than $CHAR(255) then a ",(0,r.jsx)(t.wide,{char:"",children:" error is signaled."})]}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"stream<base64\" then the 'value' argument must contain a reference to an object which is a subclass of the %Stream.Object class. The contents of that %Stream are decoded using Base64 conventions and the result is pushed onto the array as a string value. If a character not supported by the Base64 encoding is encountered in the %Stream then an ",(0,r.jsx)(t.illegal,{value:"",children:' error is signaled. The white-space characters supported by the Base64 encoding may appear in the string and those characters will be ignored. Decoding stops when either the "=" termination character is encountered or the end of the string is encountered.'})]}),"\n",(0,r.jsx)(t.h3,{id:"set",children:"%Set"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Set(key As %Integer, value As %Library.Any, type As %String) As %DynamicAbstractObject\n"})}),"\n",(0,r.jsx)(t.p,{children:"Create a new value or update an existing value."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"key"}),' The index position of the value you wish to create, indexes begin at position 0. Note that the key of a %DynamicArray is evaluated as an ObjectScript integer expression so that dynarray.%Set("abc",value,type) provides the same operation as dynarray.%Set(0,value,type).']}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"value"})," The new value with which to update the previous value or create a new value."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"type"})," OPTIONAL, the type of the value being assigned."]}),"\n",(0,r.jsx)(t.p,{children:"If the 'type' argument is present then its value must be one of the following string values:"}),"\n",(0,r.jsxs)(t.p,{children:['"" - %Set(key,value) without conversions',(0,r.jsx)(t.br,{}),'\n"null" - "" becomes ',(0,r.jsx)(t.em,{children:"null"}),"; else assign with no conversion",(0,r.jsx)(t.br,{}),'\n"boolean" - 0/nonzero becomes JSON ',(0,r.jsx)(t.em,{children:"false"}),"/",(0,r.jsx)(t.em,{children:"true"}),(0,r.jsx)(t.br,{}),'\n"number" - Convert to numeric value',(0,r.jsx)(t.br,{}),'\n"string" - Convert to text string',(0,r.jsx)(t.br,{}),'\n"string>base64" - Convert to text string then encode into base64',(0,r.jsx)(t.br,{}),'\n"string<base64" - Convert to text string then decode from base64',(0,r.jsx)(t.br,{}),'\n"stream" - %Stream contents converted to text string',(0,r.jsx)(t.br,{}),'\n"stream>base64" - %Stream contents are encoded into base64 string',(0,r.jsx)(t.br,{}),'\n"stream<base64" - %Stream is decoded from base64 into byte string']}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Returns"})," An OREF to the current modified array, allowing calls to %Set() to be nested."]}),"\n",(0,r.jsx)(t.p,{children:"If the 'type' argument is the empty string then ObjectScript 'value' argument is stored in the array without conversion."}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"null\" and the 'value' argument contains the empty string then the JSON value ",(0,r.jsx)(t.em,{children:"null"})," is stored in the array element; all other ObjectScript values are stored without conversion."]}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"boolean\" then the 'value' argument is first converted to a number. If that value is zero then the JSON value ",(0,r.jsx)(t.em,{children:"false"})," is stored; otherwise the JSON value ",(0,r.jsx)(t.em,{children:"true"})," is stored."]}),"\n",(0,r.jsx)(t.p,{children:"If the 'type' argument is \"number\" then the 'value' argument is converted to an ObjectScript numeric representation before being stored."}),"\n",(0,r.jsx)(t.p,{children:"If the 'type' argument is \"string\" then the 'value' argument is converted to string representation before being stored."}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"string>base64\" then the 'value' argument is converted to string representation and then the Base64 encoding of that string is stored. The characters of the string value must be values between $CHAR(0) and $CHAR(255) because only those character values can be converted using Base64 encoding. If the string contains a character value greater than $CHAR(255) then a ",(0,r.jsx)(t.wide,{char:"",children:" error is signaled."})]}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"string<base64\" then the 'value' argument is converted to string representation and then the Base64 decoding of that string is stored. If a character not supported by the Base64 encoding is encountered then an ",(0,r.jsx)(t.illegal,{value:"",children:' error is signaled. The white-space characters supported by the Base64 encoding may appear in the string and those characters will be ignored. Decoding stops when either the "=" termination character is encountered or the end of the string is encountered.'})]}),"\n",(0,r.jsx)(t.p,{children:"If the 'type' argument is \"stream\" then the 'value' argument must contain a reference to an object which is a subclass of the %Stream.Object class. The entire contents of the %Stream are stored in the array element as a string value."}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"stream>base64\" then the 'value' argument must contain a reference to an object which is a subclass of the %Stream.Object class. The entire contents of the %Stream must consist of binary characters and the Base64 encoding of those characters are stored in the array element as a string value. The characters in the %Stream must be values between $CHAR(0) and $CHAR(255) because only those character values can be converted using Base64 encoding. If the %Stream contains a character value greater than $CHAR(255) then a ",(0,r.jsx)(t.wide,{char:"",children:" error is signaled."})]}),"\n",(0,r.jsxs)(t.p,{children:["If the 'type' argument is \"stream<base64\" then the 'value' argument must contain a reference to an object which is a subclass of the %Stream.Object class. The contents of that %Stream are decoded using Base64 conventions and the result is stored in the array element as a string value. If a character not supported by the Base64 encoding is encountered in the %Stream then an ",(0,r.jsx)(t.illegal,{value:"",children:' error is signaled. The white-space characters supported by the Base64 encoding may appear in the string and those characters will be ignored. Decoding stops when either the "=" termination character is encountered or the end of the string is encountered.'})]}),"\n",(0,r.jsx)(t.h3,{id:"dispatchmethod",children:"%DispatchMethod"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'Method %DispatchMethod(methodName As %String(MAXLEN=""), args...)\n'})}),"\n",(0,r.jsx)(t.h3,{id:"fromobject",children:"fromObject"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod fromObject(source = "", returnValue = "", laxMode As %Integer = 1) As %Library.DynamicArray [ Internal ]\n'})})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(96540);const s={},a=r.createContext(s);function i(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);