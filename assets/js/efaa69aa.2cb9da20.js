"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[73361],{48615:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>d,frontMatter:()=>s,toc:()=>l});var a=n(74848),i=n(28453);const s={pagination_prev:null,pagination_next:null},r="%Net.JSON.JWS",l=[{value:"Methods",id:"methods",level:2},{value:"Sign",id:"sign",level:3},{value:"Validate",id:"validate",level:3},{value:"SignCompact",id:"signcompact",level:3},{value:"SignJSON",id:"signjson",level:3},{value:"ValidateCompact",id:"validatecompact",level:3},{value:"ValidateJSON",id:"validatejson",level:3},{value:"CreateSignature",id:"createsignature",level:3},{value:"ECSigASN1toJWA",id:"ecsigasn1tojwa",level:3},{value:"VerifySignature",id:"verifysignature",level:3},{value:"ECSigJWAtoASN1",id:"ecsigjwatoasn1",level:3},{value:"ExtractAllSignatures",id:"extractallsignatures",level:3},{value:"ExtractGeneralFormat",id:"extractgeneralformat",level:3},{value:"ExtractFlattenedFormat",id:"extractflattenedformat",level:3}];function o(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"netjsonjws",children:"%Net.JSON.JWS"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Net.JSON.JWS Extends %RegisteredObject [ System = 4 ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"This class provides methods to sign and validate JSON Web Signatures, as defined in RFC 7515."}),"\n",(0,a.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(t.h3,{id:"sign",children:"Sign"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod Sign(protectedHeader As %DynamicObject, unprotectedHeader As %DynamicObject, payload As %String, serialization As %String = "compact", JWKS As %String = "", Output JWS As %String) As %Status\n'})}),"\n",(0,a.jsx)(t.p,{children:"This method signs a header and payload to make a JWS."}),"\n",(0,a.jsx)(t.p,{children:"Input parameters:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"protectedHeader - The JOSE Protected Header to use."}),"\n",(0,a.jsx)(t.li,{children:"unprotectedHeader - The JOSE Unprotected Header to use."}),"\n",(0,a.jsx)(t.li,{children:"payload - The message being signed."}),"\n",(0,a.jsx)(t.li,{children:'serialization - The JWS Serialization format to use. Accepted serialization formats are "compact" and "json". The format type determines the structure of the JWS that is created. This defaults to "compact"'}),"\n",(0,a.jsx)(t.li,{children:"JWKS - The JSON Web Key Set that contains the key that will be used to sign this JWS. This defaults to the null string."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Output parameters:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"JWS - The JSON Web Signature that is created. If json serialization is used, this will be a valid JSON string. If compact serialization is used it will be a non-JSON string."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Return value:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"A status indicating whether or not a JWS was created from the inputs. If this method is unable to create a JWS from the inputs it will return an error indicating why this is."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Notes:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"This method will fail if provided an empty payload."}),"\n",(0,a.jsx)(t.li,{children:"If none of the provided headers contains a kid but in the process of creating the JWS a JWK with a kid is used, that kid will be added to the protected header before the JWS is created."}),"\n",(0,a.jsx)(t.li,{children:'If the "compact" serialization format is used, the protected header MUST be present and the unprotected header MUST be absent. If the "json" format is used, at least one of the protected header and unprotected header MUST be present and they both CAN be present.'}),"\n",(0,a.jsx)(t.li,{children:"Only the JWS Compact Serialization and the flattened syntax of the JWS JSON Serialization are supported for signing (not the general format of the JWS JSON Serialization)."}),"\n",(0,a.jsx)(t.li,{children:'Using the default JWKS (which is null) will result in an error in all cases except for when the algorithm "none" is used.'}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"validate",children:"Validate"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod Validate(JWS As %String, JWKS As %String = "", acceptUnsecured As %Boolean = 0, Output validations As %DynamicArray) As %Boolean\n'})}),"\n",(0,a.jsx)(t.p,{children:"This method validates a JWS."}),"\n",(0,a.jsx)(t.p,{children:"Input parameters:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"JWS - The JSON Web Signature to be validated."}),"\n",(0,a.jsx)(t.li,{children:"JWKS - The JSON Web Key Set that contains the key that will be used to validate this JWS. This defaults to the null string."}),"\n",(0,a.jsx)(t.li,{children:'acceptUnsecured - A boolean value indicating whether or not to accept JWSs that use the algorithm "none". This defaults to false.'}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Output parameters:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["validations - A dynamic array containing information about the validity of the signatures in the JWS. The validations array contains one DynamicObject for each signature in the JWS, each containing the following fields:\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:'"signature": The signature this DynamicObject contains information about.'}),"\n",(0,a.jsx)(t.li,{children:'"valid": A boolean indicating whether or not the signature is valid.'}),"\n",(0,a.jsx)(t.li,{children:'"error": A string containing any error message that was generating during the checking of the signature.'}),"\n"]}),"\n"]}),"\n"]}),"\n\n",(0,a.jsx)(t.p,{children:"Notes:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"This method will not accept an empty JWS. If provided one, it will return false and the validations array will be null."}),"\n",(0,a.jsx)(t.li,{children:"This method supports validation for the JWS Compact Serialization and both the flattened and general syntax of the JWS JSON Serialization."}),"\n",(0,a.jsx)(t.li,{children:'Using the default JWKS (which is null) will result in an error in all cases except for when the algorithm "none" was used (and unsecured JWSs are accepted).'}),"\n",(0,a.jsx)(t.li,{children:"Some applications may only want to consider a JWS with multiple signatures valid if all of the signatures are valid. Since this method only needs one signature to be valid in order to return true, applications that require all signatures to be valid should use the error field of each signature in the validations array to meet their needs. Specifically, they should check to see if any signature's error field is not null. Any signature whose error field is not null failed to validate (which is why it has an error message), so the presence of any non-null error fields means that at least one signature failed to validate."}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"signcompact",children:"SignCompact"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SignCompact(header As %DynamicObject, payload As %String, JWKS As %String, Output JWS As %String) As %Status [ Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"This private method signs and creates a compact serialized JWS. It is a helper method for Sign() above and should never be called on its own. See Sign() for information on the inputs and outputs."}),"\n",(0,a.jsx)(t.h3,{id:"signjson",children:"SignJSON"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SignJSON(protectedHeader As %DynamicObject, unprotectedHeader As %DynamicObject, payload As %String, JWKS As %String, Output JWS As %String) As %Status [ Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"This private method signs and creates a JSON serialized JWS with flattened syntax. It is a helper method for Sign() above and should never be called on its own. See Sign() for information on the inputs and outputs."}),"\n",(0,a.jsx)(t.h3,{id:"validatecompact",children:"ValidateCompact"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ValidateCompact(JWS As %String, JWKS As %String, acceptUnsecured As %Boolean, Output validations As %DynamicArray) As %Boolean [ Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"This private method validates a compact serialized JWS and returns an object containing information on the validation status of the signature in the JWS. It is a helper method for Validate() above and should never be called on its own. See Validate() for information on the inputs and outputs."}),"\n",(0,a.jsx)(t.h3,{id:"validatejson",children:"ValidateJSON"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ValidateJSON(JWS As %String, JWKS As %String, acceptUnsecured As %Boolean, Output validations As %DynamicArray) As %Boolean [ Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"This private method validates a JSON serialized JWS and returns an object containing information on the validation status of each signature in the JWS. It is a helper method for Validate() above and should never be called on its own. See Validate() for information on the inputs and outputs."}),"\n",(0,a.jsx)(t.h3,{id:"createsignature",children:"CreateSignature"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CreateSignature(algInfo As %DynamicObject, JWK As %DynamicObject, signingInput As %String, Output signature As %String) As %Status [ Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"This private helper method makes the actual signature for the JWS using the provided algorithm information and JSON Web Key."}),"\n",(0,a.jsx)(t.h3,{id:"ecsigasn1tojwa",children:"ECSigASN1toJWA"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ECSigASN1toJWA(ASN1Sig As %String, curveSize As %Integer, Output JWASig As %String) As %Status [ Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"This private helper method converts the given ASN.1-format signature output by the kernel code into the JWA-format signature required by the JWS specs."}),"\n",(0,a.jsx)(t.h3,{id:"verifysignature",children:"VerifySignature"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod VerifySignature(algInfo As %DynamicObject, JWK As %DynamicObject, signingInput As %String, signature As %String, acceptUnsecured As %Boolean) As %Status [ Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"This private helper method verifies the given JWS signature using the provided algorithm information and JSON Web Key."}),"\n",(0,a.jsx)(t.h3,{id:"ecsigjwatoasn1",children:"ECSigJWAtoASN1"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ECSigJWAtoASN1(JWASig As %String, curveSize As %Integer, Output ASN1Sig As %String) As %Status [ Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"This private helper method converts the given JWA-format signature into the ASN.1-format signature required by the kernel code."}),"\n",(0,a.jsx)(t.h3,{id:"extractallsignatures",children:"ExtractAllSignatures"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ExtractAllSignatures(JWSObj As %DynamicObject, Output signatureArray) As %Integer [ Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"This private helper method retrieves all of the signatures and protected and unprotected headers from a JSON serialized JWS. It returns the number of signatures found and outputs an array of all of the signatures, protected headers, and unprotected headers found."}),"\n",(0,a.jsx)(t.h3,{id:"extractgeneralformat",children:"ExtractGeneralFormat"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ExtractGeneralFormat(JWSObj As %DynamicObject, Output signatureArray) As %Integer [ Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"This private helper method retrieves all of the signatures and protected and unprotected headers from a JSON serialized JWS that uses general syntax. It populates a two-dimensional array to store each signature alongside the corresponding protected and unprotected header and then returns the number of signatures found."}),"\n",(0,a.jsx)(t.h3,{id:"extractflattenedformat",children:"ExtractFlattenedFormat"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ExtractFlattenedFormat(JWSObj As %DynamicObject, Output signatureArray) As %Integer [ Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"This private helper method retrieves the signature and protected and unprotected header from a JSON serialized JWS that uses flattened syntax. In order to ensure compatibility with the general syntax of JSON serialized JWSs, this method populates a two-dimensional array to store the signature alongside the protected and unprotected header. It then returns the number of signatures found (which will always either be 0 or 1)."})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var a=n(96540);const i={},s=a.createContext(i);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);