"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[22371],{2625:(e,s,r)=>{r.r(s),r.d(s,{contentTitle:()=>a,default:()=>c,frontMatter:()=>t,toc:()=>i});var n=r(74848),l=r(28453);const t={pagination_prev:null,pagination_next:null},a="Security.Roles",i=[{value:"Parameters",id:"parameters",level:2},{value:"SOURCECONTROL",id:"sourcecontrol",level:3},{value:"EMSSERVICE",id:"emsservice",level:3},{value:"VERSION",id:"version",level:3},{value:"Properties",id:"properties",level:2},{value:"Description",id:"description",level:3},{value:"ForceSave",id:"forcesave",level:3},{value:"GrantedRoles",id:"grantedroles",level:3},{value:"Name",id:"name",level:3},{value:"NameLowerCase",id:"namelowercase",level:3},{value:"Resources",id:"resources",level:3},{value:"EscalationOnly",id:"escalationonly",level:3},{value:"Version",id:"version-1",level:3},{value:"Triggers",id:"triggers",level:2},{value:"NoSQL",id:"nosql",level:3},{value:"Methods",id:"methods",level:2},{value:"CheckRole",id:"checkrole",level:3},{value:"Copy",id:"copy",level:3},{value:"CopySQLPrivileges",id:"copysqlprivileges",level:3},{value:"Create",id:"create",level:3},{value:"CreateOne",id:"createone",level:3},{value:"CreateLegacyRights",id:"createlegacyrights",level:3},{value:"Delete",id:"delete",level:3},{value:"DeleteOne",id:"deleteone",level:3},{value:"Exists",id:"exists",level:3},{value:"Export",id:"export",level:3},{value:"Get",id:"get",level:3},{value:"GetProperties",id:"getproperties",level:3},{value:"Import",id:"import",level:3},{value:"Initialize",id:"initialize",level:3},{value:"AddRoles",id:"addroles",level:3},{value:"RemoveRoles",id:"removeroles",level:3},{value:"InUse",id:"inuse",level:3},{value:"Modify",id:"modify",level:3},{value:"ModifyOne",id:"modifyone",level:3},{value:"NameToDescription",id:"nametodescription",level:3},{value:"RecurseRoleSet",id:"recurseroleset",level:3},{value:"Rename",id:"rename",level:3},{value:"%OnAddToSaveSet",id:"onaddtosaveset",level:3},{value:"%OnAfterSave",id:"onaftersave",level:3},{value:"%OnBeforeSave",id:"onbeforesave",level:3},{value:"%OnDelete",id:"ondelete",level:3},{value:"DeleteSQLRoleInfo",id:"deletesqlroleinfo",level:3},{value:"%OnValidateObject",id:"onvalidateobject",level:3},{value:"StartEMS",id:"startems",level:3},{value:"DetailExecute",id:"detailexecute",level:3},{value:"DetailFetch",id:"detailfetch",level:3},{value:"DetailClose",id:"detailclose",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"CheckResources",id:"checkresources",level:3},{value:"CheckFlags",id:"checkflags",level:3},{value:"ListFetch",id:"listfetch",level:3},{value:"ListClose",id:"listclose",level:3},{value:"ListAllExecute",id:"listallexecute",level:3},{value:"ListAllFetch",id:"listallfetch",level:3},{value:"ListAllClose",id:"listallclose",level:3},{value:"ListResourcesExecute",id:"listresourcesexecute",level:3},{value:"ListResourcesFetch",id:"listresourcesfetch",level:3},{value:"ListResourcesClose",id:"listresourcesclose",level:3}];function o(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"securityroles",children:"Security.Roles"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class Security.Roles Extends (%Persistent, %XML.Adaptor, %SYSTEM.Help) [ Inheritance = right, System = 4 ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Define the security Role database, and methods which manipulate them.",(0,n.jsx)(s.br,{}),"\nThe system includes a set of pre-defined System roles. System roles cannot be deleted. Legacy system roles may be deleted."]}),"\n",(0,n.jsx)(s.p,{children:"Role names have the following properties:"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"Role names are case insensitive."}),"\n",(0,n.jsx)(s.li,{children:"Maximum length of a role name is 64 characters."}),"\n",(0,n.jsx)(s.li,{children:'Role name cannot contain a "," or ":"'}),"\n",(0,n.jsxs)(s.li,{children:['Role name cannot start with a "%" unless it is a pre-defined system role',(0,n.jsx)(s.br,{}),"\nA role may exist which has no resources.",(0,n.jsx)(s.br,{}),"\n%DB_* implicit roles cannot be modified",(0,n.jsx)(s.br,{}),"\nThe %Admin Secure:USE permission is required to operate on a resource"]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"The table for this class should be manipulated only through object access, the published API's or through the System Management Portal. It should not be updated through direct SQL access."}),"\n",(0,n.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(s.h3,{id:"sourcecontrol",children:"SOURCECONTROL"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter SOURCECONTROL [ Internal ] = {"Revision path: $Id: //iris/2024.3.0/databases/sys/cls/Security/Roles.xml#1 $"_$c(13,10)_"Last Change:   $DateTime: 2024/10/02 10:58:11 $"_$c(13,10)_"Changelist #:  $Change: 7247250 $"};\n'})}),"\n",(0,n.jsx)(s.h3,{id:"emsservice",children:"EMSSERVICE"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter EMSSERVICE [ Internal ] = "Security";\n'})}),"\n",(0,n.jsx)(s.h3,{id:"version",children:"VERSION"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter VERSION [ Internal ] = 5;\n"})}),"\n",(0,n.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(s.h3,{id:"description",children:"Description"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Description As %String(MAXLEN = 256);\n"})}),"\n",(0,n.jsx)(s.p,{children:"Description of the role."}),"\n",(0,n.jsx)(s.h3,{id:"forcesave",children:"ForceSave"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property ForceSave As %Integer [ InitialExpression = 0, Private, Transient ];\n"})}),"\n",(0,n.jsx)(s.p,{children:'Used to force a save of the object ForceSave=2 means it is being called as part of an installation/upgrade. See %OnValidateObject() Must have ForceSave=2 when calling %Save() or Modify() for this class during installation/upgrade Set Properties("ForceSave")=2'}),"\n",(0,n.jsx)(s.h3,{id:"grantedroles",children:"GrantedRoles"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property GrantedRoles As list Of %String(MAXLEN = 64);\n"})}),"\n",(0,n.jsx)(s.p,{children:"Roles assigned to the Role."}),"\n",(0,n.jsx)(s.h3,{id:"name",children:"Name"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Name As %String(MAXLEN = 64, MINLEN = 1) [ Required ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"Role Name"}),"\n",(0,n.jsx)(s.h3,{id:"namelowercase",children:"NameLowerCase"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Property NameLowerCase As %String(MAXLEN = 64, MINLEN = 1, XMLPROJECTION = "NONE") [ Internal, ReadOnly, Required ];\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Role Name in lowercase",(0,n.jsx)(s.br,{}),"\nUsed for indexing, not to be displayed or modified."]}),"\n",(0,n.jsx)(s.h3,{id:"resources",children:"Resources"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Relationship Resources As Resource [ Cardinality = children, Inverse = TheRole ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"Resource/Permission pairs the role holds"}),"\n",(0,n.jsx)(s.h3,{id:"escalationonly",children:"EscalationOnly"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property EscalationOnly As Security.Datatype.BooleanYN [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(s.h3,{id:"version-1",children:"Version"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Version As %Decimal(SCALE = 1) [ Internal ];\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Version number of the record.",(0,n.jsx)(s.br,{}),"\nUsed for Export/Import."]}),"\n",(0,n.jsx)(s.h2,{id:"triggers",children:"Triggers"}),"\n",(0,n.jsx)(s.h3,{id:"nosql",children:"NoSQL"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Trigger NoSQL [ Event = INSERT/UPDATE/DELETE, Final, Foreach = row, Language = objectscript, Order = 1 ]\n"})}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"checkrole",children:"CheckRole"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckRole(Select, Data) As %Boolean [ Internal, SqlProc ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"copy",children:"Copy"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Copy(Name As %String, NewName As %String, NewDescription As %String, EscalationOnly As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Copy a Role.",(0,n.jsx)(s.br,{}),"\nCopy an existing role in the Security database to a new one.",(0,n.jsx)(s.br,{}),"\nParameters:",(0,n.jsx)(s.br,{}),"\nName - Name of the role to be copied",(0,n.jsx)(s.br,{}),"\nNewName - Name of the role to be created",(0,n.jsx)(s.br,{}),"\nDescription - Description of the new role"]}),"\n",(0,n.jsx)(s.h3,{id:"copysqlprivileges",children:"CopySQLPrivileges"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CopySQLPrivileges(pFromRole As %String, pToRole As %String, pNamespaceList As %List = "") As %Status\n'})}),"\n",(0,n.jsxs)(s.p,{children:["CopySQLPrivileges will copy SQL Admin Privileges and SQL Object Privileges from pFromRole to pToRole. Parameters:",(0,n.jsx)(s.br,{}),"\npFromRole - Name of the role to copy SQL privileges from",(0,n.jsx)(s.br,{}),"\npToRole - Name of the role to copy SQL privileges to",(0,n.jsx)(s.br,{}),'\npNamespaceList - is a $Lb(namespace names). If pNamespaceList is not specified or is "", the copy will be performed for ALL namespaces. Otherwise supply a specific list of namespace you want to copy the privileges for.',(0,n.jsx)(s.br,{}),"\nThe privilege will be copied with the SAME grantor and grantee. This means if UsersA granted a privilege to UserB, and UserC calls CopySQLPrivileges to copy privs from UserB to UserD, the privileges UserD gets will have been granted by UserA. You must have the %Admin_Secure resource in order to call this API. CopySQLPrivileges returns a %Status code"]}),"\n",(0,n.jsx)(s.h3,{id:"create",children:"Create"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Create(Name As %String, Description As %String, Resources As %String, GrantedRoles As %String, EscalationOnly As %Boolean = 0) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Create a Role.",(0,n.jsx)(s.br,{}),"\nCreate a Role in the Security database.",(0,n.jsx)(s.br,{}),"\nParameters:",(0,n.jsx)(s.br,{}),"\nName - Name of the role to create",(0,n.jsx)(s.br,{}),"\nDescription - Description of the role",(0,n.jsx)(s.br,{}),"\nResources - Resource/permission pairs to assign to the role",(0,n.jsx)(s.br,{}),"\nResources are in the format:",(0,n.jsx)(s.br,{}),"\nResourceName:Permission,ResourceName:Permission",(0,n.jsx)(s.br,{}),"\nFor example:",(0,n.jsx)(s.br,{}),'\ns Resources="MyResource:RW,MyResource1:RWU"',(0,n.jsx)(s.br,{}),'\ns Resources="" would create a role with no resources.',(0,n.jsx)(s.br,{}),"\nPermision values are as follows:",(0,n.jsx)(s.br,{}),'\n"R"',(0,n.jsx)(s.br,{}),'\n"W"',(0,n.jsx)(s.br,{}),'\n"U"',(0,n.jsx)(s.br,{}),"\nGrantedRoles - Additional roles granted when this role is granted to a user",(0,n.jsx)(s.br,{}),"\nGrantedRoles are in the format:",(0,n.jsx)(s.br,{}),'\n"GrantedRole1,GrantedRole2"']}),"\n",(0,n.jsx)(s.h3,{id:"createone",children:"CreateOne"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateOne(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"createlegacyrights",children:"CreateLegacyRights"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateLegacyRights(dbResources As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Create LegacyRights Role.",(0,n.jsx)(s.br,{}),"\ndbResources is a list of db resources to grant access to. This method should only be called during an upgrade installation from 5.0 or earlier."]}),"\n",(0,n.jsx)(s.h3,{id:"delete",children:"Delete"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Delete(Name As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Delete a role.",(0,n.jsx)(s.br,{}),'\nThis method will delete a role from the security database and remove the role from all the users which hold this role. It will then update the in memory security database to mark this role as "No access" for all resources this role holds. Pre-defined system roles cannot be deleted.',(0,n.jsx)(s.br,{}),"\nParameters:",(0,n.jsx)(s.br,{}),"\nName - Name of role to delete"]}),"\n",(0,n.jsx)(s.h3,{id:"deleteone",children:"DeleteOne"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DeleteOne(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"exists",children:"Exists"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Exists(Name As %String, ByRef Role As %ObjectHandle, ByRef Status As %Status) As %Boolean\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Role exists.",(0,n.jsx)(s.br,{}),"\nThis method checks for the existence of a role in the security database.",(0,n.jsx)(s.br,{}),"\nParameters:",(0,n.jsx)(s.br,{}),"\nName - Name of the role to check existence of",(0,n.jsx)(s.br,{}),"\nReturn values:",(0,n.jsx)(s.br,{}),"\nIf Value of the method = 0 (Role does not exist, or some error occured)",(0,n.jsx)(s.br,{}),"\nRole = Null",(0,n.jsx)(s.br,{}),'\nStatus = Role "x" does not exist, or other error message']}),"\n",(0,n.jsxs)(s.p,{children:["If Value of the method = 1 (Role exists)",(0,n.jsx)(s.br,{}),"\nRole = Object handle to role",(0,n.jsx)(s.br,{}),"\nStatus = $$$OK"]}),"\n",(0,n.jsx)(s.h3,{id:"export",children:"Export"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Export(FileName As %String = "RolesExport.xml", ByRef NumExported As %Integer, Roles As %String = "*", Resources As %String = "*", SQLPrivileges As %Boolean = 0, ByRef NumSQLPrivilegesExported As %Integer) As %Status\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This method exports Role records to a file in xml format.",(0,n.jsx)(s.br,{}),"\nParameters:",(0,n.jsx)(s.br,{}),"\nFilename - Output file name",(0,n.jsx)(s.br,{}),"\nNumExported (byref) - Returns number of records exported.",(0,n.jsx)(s.br,{}),'\nRoles - Comma separated list of Roles to export, "*" = All',(0,n.jsx)(s.br,{}),'\nResources - Comma separated list of Resource names, "*" = All. Export Roles containing only these resources',(0,n.jsx)(s.br,{}),"\nSQLPrivileges - 1/0 flag. If 1, export all SQL Privileges from all namespace on this system that have been directly granted to this Role",(0,n.jsx)(s.br,{}),"\nNumSQLPrivilegesExported *byref) - Returns number of SQL Privileges and SQL Admin Privilege Set records exported",(0,n.jsx)(s.br,{}),"\nNote: Database roles starting with %DB_ will not be exported."]}),"\n",(0,n.jsx)(s.h3,{id:"get",children:"Get"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Get(Name As %String, ByRef Properties As %String, ByRef Role As %ObjectHandle) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Get a role's properties.",(0,n.jsx)(s.br,{}),"\nGets a role's properties from the security database.",(0,n.jsx)(s.br,{}),"\nParameters:",(0,n.jsx)(s.br,{}),"\nName - Name of the role to get",(0,n.jsx)(s.br,{}),"\nReturn values:",(0,n.jsx)(s.br,{}),"\nProperties - Array of properties",(0,n.jsx)(s.br,{}),'\nProperties("Description") - Description of the role',(0,n.jsx)(s.br,{}),'\nProperties("Resources") - Resource names/permission pairs Resources are in the format:',(0,n.jsx)(s.br,{}),"\nResourceName:Permission,ResourceName:Permission",(0,n.jsx)(s.br,{}),"\nFor example:",(0,n.jsx)(s.br,{}),'\nProperties("Resources")="MyResource:RW,MyResource1:RWU"',(0,n.jsx)(s.br,{}),'\nProperties("GrantedRoles")=List of granted roles',(0,n.jsx)(s.br,{}),"\nFor example:",(0,n.jsx)(s.br,{}),'\nProperties("GrantedRoles")="GrantedRole,GrantedRole1"']}),"\n",(0,n.jsx)(s.h3,{id:"getproperties",children:"GetProperties"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetProperties(Role As %ObjectHandle, ByRef Properties As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Get a role's properties.",(0,n.jsx)(s.br,{}),"\nGets a role's properties from the security database.",(0,n.jsx)(s.br,{}),"\nParameters:",(0,n.jsx)(s.br,{}),"\nRole - Object handle to a role record",(0,n.jsx)(s.br,{}),"\nReturn values:",(0,n.jsx)(s.br,{}),"\nProperties - See the Get method for more information on properties returned"]}),"\n",(0,n.jsx)(s.h3,{id:"import",children:"Import"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Import(FileName As %String = "RolesExport.xml", ByRef NumImported As %Integer, Flags As %Integer = 0, ByRef NumSQLPrivsImported As %Integer) As %Status\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Import Role records from an xml file.",(0,n.jsx)(s.br,{}),"\nParameters:",(0,n.jsx)(s.br,{}),"\nFileName - Filename to import Role records from",(0,n.jsx)(s.br,{}),"\nNumImported (byref) - Returns number of records imported",(0,n.jsx)(s.br,{}),"\nFlags - Control import",(0,n.jsx)(s.br,{}),"\nBit 0 - Do not import records, just return count",(0,n.jsx)(s.br,{}),"\nNote: On failure, no records will be imported"]}),"\n",(0,n.jsx)(s.h3,{id:"initialize",children:"Initialize"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Initialize() As %Status [ Internal, ProcedureBlock = 0 ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Initialize the system with default roles."}),"\n",(0,n.jsx)(s.h3,{id:"addroles",children:"AddRoles"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AddRoles(Rolename As %String, ByRef Roles As %String, Admin As %Boolean = 0) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Add role(s) to the Role's definition.",(0,n.jsx)(s.br,{}),"\nParameters:",(0,n.jsx)(s.br,{}),"\nRolename - Name of the Role to add roles to",(0,n.jsx)(s.br,{}),"\nRoles - Comma delimited list of roles",(0,n.jsx)(s.br,{}),"\nAdmin - SQL ADMIN OPTION, TRUE if this user with this role can GRANT the Role to another user/role. Only applicable in SQL."]}),"\n",(0,n.jsx)(s.h3,{id:"removeroles",children:"RemoveRoles"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RemoveRoles(Rolename As %String, ByRef Roles As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Remove role(s) from the Role's definition.",(0,n.jsx)(s.br,{}),"\nParameters:",(0,n.jsx)(s.br,{}),"\nRolename - Name of the Role to remove roles from",(0,n.jsx)(s.br,{}),"\nRoles - Comma delimited list of roles."]}),"\n",(0,n.jsx)(s.h3,{id:"inuse",children:"InUse"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod InUse(Name As %String, ByRef InUse As %Boolean = 0, ByRef Users As %List, ByRef MoreUsers As %Boolean = 0, ByRef Roles As %List, ByRef MoreRoles As %Boolean = 0, Flags As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Checks if the role is in use.",(0,n.jsx)(s.br,{}),"\nChecks if the role specified is used by any user.",(0,n.jsx)(s.br,{}),"\nParameters:",(0,n.jsx)(s.br,{}),"\nName - Name of the role to check.",(0,n.jsx)(s.br,{}),"\nReturn values:",(0,n.jsx)(s.br,{}),"\nInUse = 0 Not used",(0,n.jsx)(s.br,{}),"\nInUse = 1 Used",(0,n.jsx)(s.br,{}),"\nUsers = $list of users the role is used by or null if none",(0,n.jsx)(s.br,{}),"\nMoreUsers = 0 - Entire list of users owning the role returned",(0,n.jsx)(s.br,{}),"\nMoreUsers = 1 - Entire list of users owning the role Not returned",(0,n.jsx)(s.br,{}),"\nRoles = $list of users the role is used by or null if none",(0,n.jsx)(s.br,{}),"\nMoreRoles = 0 - Entire list of roles granting the role returned",(0,n.jsx)(s.br,{}),"\nMoreRoles = 1 - Entire list of roles granted the role Not returned",(0,n.jsx)(s.br,{}),"\nIf MoreUsers=1, and you wish to get the entire list of users owning the role, use the following code:",(0,n.jsx)(s.br,{}),'\ns x=##Class(Security.Roles).InUse("Role1",.InUse,.Users,.MoreUsers,.Roles,.MoreRoles)',(0,n.jsx)(s.br,{}),"\nWhile (MoreUsers) {",(0,n.jsx)(s.br,{}),"\ns SaveUsers($i(i))=Users",(0,n.jsx)(s.br,{}),'\ns x=##Class(Security.Roles).InUse("Role1",.InUse,.Users,.MoreUsers.Roles,.MoreRoles)',(0,n.jsx)(s.br,{}),"\nFlags - Bit string of options.",(0,n.jsx)(s.br,{}),"\nBit 0 - Only count and return Users which are enabled Bit 1 - Return first two users with %All Bit 2 - Return users who can escalate to this role }"]}),"\n",(0,n.jsx)(s.h3,{id:"modify",children:"Modify"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Modify(Name As %String, ByRef Properties As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Modify a role.",(0,n.jsx)(s.br,{}),"\nModify an existing role's properties in the security database.",(0,n.jsx)(s.br,{}),"\nParameters:",(0,n.jsx)(s.br,{}),"\nName - Name of the role to modify",(0,n.jsx)(s.br,{}),"\nProperties - Array of properties to modify.",(0,n.jsx)(s.br,{}),"\nSee the Get() method for a description of the Properties parameter.",(0,n.jsx)(s.br,{}),'\nProperties("Resources")="" removes all resources from a role.',(0,n.jsx)(s.br,{}),"\nIf a specific property is not passed in the properties array, the value is not modified."]}),"\n",(0,n.jsx)(s.h3,{id:"modifyone",children:"ModifyOne"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ModifyOne(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"nametodescription",children:"NameToDescription"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NameToDescription(Name As %String, Description As %String) As %String [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Given a role name, return its description"}),"\n",(0,n.jsx)(s.h3,{id:"recurseroleset",children:"RecurseRoleSet"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RecurseRoleSet(Roles, ByRef RecurseRoles As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Get a recursed set of roles.",(0,n.jsx)(s.br,{}),"\nParameters:",(0,n.jsx)(s.br,{}),"\nRoles - Comma delimited list of roles to recurse",(0,n.jsx)(s.br,{}),"\nReturn value:",(0,n.jsx)(s.br,{}),"\nRoles - Comma delimited list of recursed roles"]}),"\n",(0,n.jsx)(s.h3,{id:"rename",children:"Rename"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Rename(NewRole As %String, OldRole As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Rename a role, and update all associated tables."}),"\n",(0,n.jsx)(s.h3,{id:"onaddtosaveset",children:"%OnAddToSaveSet"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnAddToSaveSet(depth As %Integer = 3, insert As %Integer = 0, callcount As %Integer = 0) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method is invoked by the %AddToSaveSet method to provide notification that the current object is being included in a SaveSet, either because %Save() was invoked on this object or an object that references this object."}),"\n",(0,n.jsx)(s.p,{children:"If this method returns an error status then %Save() will fail and the transaction will be rolled back."}),"\n",(0,n.jsx)(s.h3,{id:"onaftersave",children:"%OnAfterSave"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnAfterSave(insert As %Boolean) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method is invoked by the %Save method to provide notification that the object is being saved. It is called after the object's data has been successfully written to disk."}),"\n",(0,n.jsx)(s.p,{children:"insert will be set to 1 if this object is being saved for the first time."}),"\n",(0,n.jsx)(s.p,{children:"If this method returns an error then the call to %Save will fail."}),"\n",(0,n.jsx)(s.h3,{id:"onbeforesave",children:"%OnBeforeSave"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnBeforeSave(insert As %Boolean) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method is invoked by the %Save method to provide notification that the object is being saved. It is called before any data is written to disk."}),"\n",(0,n.jsx)(s.p,{children:"insert will be set to 1 if this object is being saved for the first time."}),"\n",(0,n.jsx)(s.p,{children:"If this method returns an error then the call to %Save will fail."}),"\n",(0,n.jsx)(s.h3,{id:"ondelete",children:"%OnDelete"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %OnDelete(oid As %ObjectIdentity) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method is invoked by the %Delete method to provide notification that the object specified by oid is being deleted."}),"\n",(0,n.jsx)(s.p,{children:"If this method returns an error then the object will not be deleted."}),"\n",(0,n.jsx)(s.h3,{id:"deletesqlroleinfo",children:"DeleteSQLRoleInfo"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DeleteSQLRoleInfo(Name As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"onvalidateobject",children:"%OnValidateObject"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnValidateObject() As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method is invoked by the %ValidateObject method to provide notification that the current object is being validated."}),"\n",(0,n.jsx)(s.p,{children:"If this method returns an error then %ValidateObject will fail."}),"\n",(0,n.jsx)(s.h3,{id:"startems",children:"StartEMS"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod StartEMS() As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Initialize an EMS client when an event changes"}),"\n",(0,n.jsx)(s.h3,{id:"detailexecute",children:"DetailExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DetailExecute(ByRef qHandle As %Binary, Names As %String = "*", Flags As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Return detailed information about a role.",(0,n.jsx)(s.br,{}),'\nNames - Comma separated list of Role names, "*" = All',(0,n.jsx)(s.br,{}),"\nFlags - Flags passed to query",(0,n.jsx)(s.br,{}),"\nBit 0 - Do not include read only system roles (%DB_*, %All) Note: This query may change in future versions"]}),"\n",(0,n.jsx)(s.h3,{id:"detailfetch",children:"DetailFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DetailFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = DetailExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"detailclose",children:"DetailClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DetailClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = DetailExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListExecute(ByRef %qHandle As %Binary, Names As %String = "*", Resources As %String = "*", Flags As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,n.jsxs)(s.p,{children:["List all user records, brief display.",(0,n.jsx)(s.br,{}),'\nNames - Comma separated list of Role names, "*" = All',(0,n.jsx)(s.br,{}),'\nResources - Comma separated list of resources names, "*"=ALL. Resource names may be in the format "Resource1:RW,Resource2,Resource3:R". In this example, the criteria for selection is passed if any role has one of the following:']}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"RW on Resource1"}),"\n",(0,n.jsx)(s.li,{children:"Any access on Resource2"}),"\n",(0,n.jsxs)(s.li,{children:["Read access on Resource3",(0,n.jsx)(s.br,{}),"\nFlags - Flags passed to query",(0,n.jsx)(s.br,{}),"\nBit 0 - Do not include read only system roles (%DB_*, %All)"]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"checkresources",children:"CheckResources"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckResources(Resources, Name) As %Boolean [ Internal, SqlProc ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"checkflags",children:"CheckFlags"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckFlags(Flags, Name) As %Boolean [ Internal, SqlProc ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listclose",children:"ListClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listallexecute",children:"ListAllExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListAllExecute(ByRef %qHandle As %Binary, Names As %String = "*") As %Status [ Internal ]\n'})}),"\n",(0,n.jsxs)(s.p,{children:["List all user records, brief display.",(0,n.jsx)(s.br,{}),'\nNames - Comma separated list of Role names, "*" = All',(0,n.jsx)(s.br,{}),'\nResources - Comma separated list of resources names, "*"=ALL. Resource names may be in the format "Resource1:RW,Resource2,Resource3:R". In this example, the criteria for selection is passed if any role has one of the following:']}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"RW on Resource1"}),"\n",(0,n.jsx)(s.li,{children:"Any access on Resource2"}),"\n",(0,n.jsxs)(s.li,{children:["Read access on Resource3",(0,n.jsx)(s.br,{}),"\nFlags - Flags passed to query",(0,n.jsx)(s.br,{}),"\nBit 0 - Do not include read only system roles (%DB_*, %All)"]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"listallfetch",children:"ListAllFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListAllFetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListAllExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listallclose",children:"ListAllClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListAllClose(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListAllExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listresourcesexecute",children:"ListResourcesExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListResourcesExecute(ByRef %qHandle As %Binary, Names As %String = "*", Resources As %String = "*", Flag As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,n.jsxs)(s.p,{children:["List all roles and their Resources and Permissions.",(0,n.jsx)(s.br,{}),'\nNames - Comma separated list of Role names, "*" = All',(0,n.jsx)(s.br,{}),'\nResources - Comma separated list of resources names, "*"=ALL. Resource names may be in the format "Resource1:RW,Resource2,Resource3:R". In this example, the criteria for selection is passed if any role has one of the following:']}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"RW on Resource1"}),"\n",(0,n.jsx)(s.li,{children:"Any access on Resource2"}),"\n",(0,n.jsxs)(s.li,{children:["Read access on Resource3",(0,n.jsx)(s.br,{}),"\nFlags - Flags passed to query",(0,n.jsx)(s.br,{}),"\nBit 0 - Do not include read only system roles (%DB_*, %All)"]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"listresourcesfetch",children:"ListResourcesFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListResourcesFetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListResourcesExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listresourcesclose",children:"ListResourcesClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListResourcesClose(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListResourcesExecute ]\n"})})]})}function c(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>a,x:()=>i});var n=r(96540);const l={},t=n.createContext(l);function a(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);