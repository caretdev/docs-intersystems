"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[10441],{85478:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>n,default:()=>d,frontMatter:()=>a,toc:()=>l});var r=t(74848),i=t(28453);const a={pagination_prev:null,pagination_next:null},n="%iKnow.Source.Lister",l=[{value:"Properties",id:"properties",level:2},{value:"DomainId",id:"domainid",level:3},{value:"TempId",id:"tempid",level:3},{value:"ListerClassId",id:"listerclassid",level:3},{value:"Configuration",id:"configuration",level:3},{value:"ConfigurationId",id:"configurationid",level:3},{value:"Processor",id:"processor",level:3},{value:"ProcessorId",id:"processorid",level:3},{value:"ProcessorParams",id:"processorparams",level:3},{value:"Converter",id:"converter",level:3},{value:"ConverterId",id:"converterid",level:3},{value:"ConvParams",id:"convparams",level:3},{value:"CurrentRef",id:"currentref",level:3},{value:"ListId",id:"listid",level:3},{value:"DataId",id:"dataid",level:3},{value:"CurData",id:"curdata",level:3},{value:"SrcList",id:"srclist",level:3},{value:"SrcData",id:"srcdata",level:3},{value:"MetaId",id:"metaid",level:3},{value:"CurMetaLength",id:"curmetalength",level:3},{value:"SrcMeta",id:"srcmeta",level:3},{value:"SrcTemp",id:"srctemp",level:3},{value:"SrcTempMeta",id:"srctempmeta",level:3},{value:"ListGlo",id:"listglo",level:3},{value:"BatchMode",id:"batchmode",level:3},{value:"FixedMetaKeys",id:"fixedmetakeys",level:3},{value:"FixedMetaValues",id:"fixedmetavalues",level:3},{value:"Loader",id:"loader",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"SetBatchMode",id:"setbatchmode",level:3},{value:"Init",id:"init",level:3},{value:"SetDataId",id:"setdataid",level:3},{value:"SetConfig",id:"setconfig",level:3},{value:"SetProcessor",id:"setprocessor",level:3},{value:"SetConverter",id:"setconverter",level:3},{value:"DefaultProcessor",id:"defaultprocessor",level:3},{value:"AddListToBatch",id:"addlisttobatch",level:3},{value:"ExpandList",id:"expandlist",level:3},{value:"ReportError",id:"reporterror",level:3},{value:"ReportWarning",id:"reportwarning",level:3},{value:"StoreTemp",id:"storetemp",level:3},{value:"StoreTempStream",id:"storetempstream",level:3},{value:"SetMetadataValues",id:"setmetadatavalues",level:3},{value:"RegisterMetadataKeys",id:"registermetadatakeys",level:3},{value:"RegisterMetadataKeysInternal",id:"registermetadatakeysinternal",level:3},{value:"RegisterFixedMetadata",id:"registerfixedmetadata",level:3},{value:"GetListerData",id:"getlisterdata",level:3},{value:"StoreRef",id:"storeref",level:3},{value:"RefExists",id:"refexists",level:3},{value:"SplitExtId",id:"splitextid",level:3},{value:"BuildExtId",id:"buildextid",level:3},{value:"BuildExtIdFromName",id:"buildextidfromname",level:3},{value:"SplitFullRef",id:"splitfullref",level:3},{value:"BuildFullRef",id:"buildfullref",level:3},{value:"BuildSimpleRefFromComposite",id:"buildsimplereffromcomposite",level:3},{value:"BuildFullRefFromComposite",id:"buildfullreffromcomposite",level:3},{value:"GetGroupId",id:"getgroupid",level:3},{value:"GetGroupName",id:"getgroupname",level:3},{value:"AddGroup",id:"addgroup",level:3},{value:"AddGroupStatic",id:"addgroupstatic",level:3},{value:"GetAlias",id:"getalias",level:3},{value:"GetExtidPrefix",id:"getextidprefix",level:3},{value:"MaxListId",id:"maxlistid",level:3},{value:"FormatParams",id:"formatparams",level:3},{value:"ProcessList",id:"processlist",level:3},{value:"ProcessVirtualList",id:"processvirtuallist",level:3},{value:"TestParams",id:"testparams",level:3},{value:"ResetRef",id:"resetref",level:3}];function o(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"iknowsourcelister",children:"%iKnow.Source.Lister"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Class %iKnow.Source.Lister Extends %RegisteredObject [ Abstract, Deprecated, System = 4 ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Deprecation note"}),": Direct use of this class is still supported, but it is recommended to use either Domain Definitions (cf %iKnow.DomainDefinition) to manage a domain's contents or use the shorthand methods in %SYSTEM.iKnow to work with an existing domain not managed through a domain definition class."]}),"\n",(0,r.jsx)(s.p,{children:"This is the base class for any Lister implementations. Lister classes are used at the start of the load process to identify the sources that need to be loaded. Each Lister implemenation is specifically designed to be able to scan a certain type of source locations, for example a filesystem for %iKnow.Source.File.Lister and a SQL query for %iKnow.Source.SQL.Lister"}),"\n",(0,r.jsxs)(s.p,{children:["Each Lister implementation class defines a set of ",(0,r.jsx)(s.strong,{children:"Lister Parameters"}),", specifying how to reach the sources in the particular type of location this Lister class is designed to work with. For a file lister, this would include parameters such as the directory where to look and the type of files to load from that directory. These ",(0,r.jsx)(s.strong,{children:"Lister Parameters"})," are documented by each Lister implementation in its class documentation."]}),"\n",(0,r.jsx)(s.p,{children:"These Lister Parameters are to be provided to the AddListToBatch method, when configuring a list for Batch Loading, or to the ProcessList method when executing Direct Loads."}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.h3,{id:"domainid",children:"DomainId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property DomainId As %Integer [ Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"tempid",children:"TempId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property TempId As %Integer [ Private ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"surrogate domain ID for use in IRIS.Temp guaranteed to be unique across namespaces"}),"\n",(0,r.jsx)(s.h3,{id:"listerclassid",children:"ListerClassId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ListerClassId As %Integer [ Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Configuration As %String;\n"})}),"\n",(0,r.jsx)(s.h3,{id:"configurationid",children:"ConfigurationId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ConfigurationId As %Integer [ Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"processor",children:"Processor"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Processor As %String [ Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"processorid",children:"ProcessorId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ProcessorId As %Integer [ Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"processorparams",children:"ProcessorParams"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ProcessorParams As %String [ Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"converter",children:"Converter"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Converter As %String [ Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"converterid",children:"ConverterId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ConverterId As %Integer [ Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"convparams",children:"ConvParams"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ConvParams As %String [ Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"currentref",children:"CurrentRef"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property CurrentRef As %String [ Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"listid",children:"ListId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ListId As %Integer [ Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"dataid",children:"DataId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property DataId As %Integer [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"curdata",children:"CurData"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property CurData As %Integer [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"srclist",children:"SrcList"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property SrcList As %String [ Internal ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"srcdata",children:"SrcData"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property SrcData As %String [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"metaid",children:"MetaId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property MetaId As %Integer [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"curmetalength",children:"CurMetaLength"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property CurMetaLength As %Integer [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"srcmeta",children:"SrcMeta"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property SrcMeta As %String [ Internal ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"srctemp",children:"SrcTemp"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property SrcTemp As %String [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"srctempmeta",children:"SrcTempMeta"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property SrcTempMeta As %String [ Internal ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"listglo",children:"ListGlo"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ListGlo As %String [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"batchmode",children:"BatchMode"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property BatchMode As %Integer [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"fixedmetakeys",children:"FixedMetaKeys"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property FixedMetaKeys As %List [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"fixedmetavalues",children:"FixedMetaValues"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property FixedMetaValues As %List [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(s.h3,{id:"loader",children:"Loader"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Loader As %iKnow.Source.Loader [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"Utility local Loader instance for the ProcessList wrapper call"}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnNew(domId As %Integer) As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"setbatchmode",children:"SetBatchMode"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method SetBatchMode(BatchMode As %Integer) [ Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"init",children:"Init"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Method Init(config As %String, processor As %String, processorParams As %List = "", converter As %String = "", converterParams As %List = "") As %Status [ ServerOnly = 1 ]\n'})}),"\n",(0,r.jsx)(s.p,{children:"Shorthand method invoking SetConfig, SetProcessor and SetConverter in one call. A Lister can be re-initialized between calls to AddListToBatch or ProcessList, resulting in different settings to be used for the respective lists."}),"\n",(0,r.jsx)(s.h3,{id:"setdataid",children:"SetDataId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method SetDataId(dataId As %Integer) As %Status [ Final, Internal, ServerOnly = 1 ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"setconfig",children:"SetConfig"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method SetConfig(ByRef config As %String) As %Status [ Final ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Registers the %iKnow.Source.Configuration name to use when indexing sources from from the lists registered through AddListToBatch or ProcessList calls onwards. Using this method to set a different Configuration between two AddListToBatch calls will not impact any lists already registered in earlier calls."}),"\n",(0,r.jsx)(s.h3,{id:"setprocessor",children:"SetProcessor"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method SetProcessor(processor As %String, processorParams As %List) As %Status [ Final ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Registers the %iKnow.Source.Processor class and parameters to use when indexing sources from from the lists registered through AddListToBatch or ProcessList calls onwards. Using this method to set a different Processor between two AddListToBatch calls will not impact any lists already registered in earlier calls."}),"\n",(0,r.jsx)(s.h3,{id:"setconverter",children:"SetConverter"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method SetConverter(converter As %String, convparams As %List) As %Status [ Final ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Registers the %iKnow.Source.Converter class and parameters to use when indexing sources from from the lists registered through AddListToBatch or ProcessList calls onwards. Using this method to set a different Converter between two AddListToBatch calls will not impact any lists already registered in earlier calls."}),"\n",(0,r.jsx)(s.h3,{id:"defaultprocessor",children:"DefaultProcessor"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DefaultProcessor() As %String\n"})}),"\n",(0,r.jsx)(s.p,{children:"This method returns the default %iKnow.Source.Processor class to use (without any parameters) if none was registered explicitly through calls to SetProcessor. By default, this selects (if it exists) a class called Processor in the same package as this Lister implementation, but subclasses might wish to override this and hardcode a specific default Processor to use."}),"\n",(0,r.jsx)(s.h3,{id:"addlisttobatch",children:"AddListToBatch"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method AddListToBatch(listargs...) As %Status [ Final ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["This method is used to register a list the Lister implementation will later on scan through as part of the execution of the %iKnow.Source.Loader ProcessBatch process. This method takes this Lister implementations ",(0,r.jsx)(s.strong,{children:"Lister Parameters"})," as its arguments, as specified in the class documentation of this Lister implementation."]}),"\n",(0,r.jsx)(s.h3,{id:"expandlist",children:"ExpandList"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method ExpandList(listparams As %List) As %Status\n"})}),"\n",(0,r.jsx)(s.p,{children:"This method should be overridden by subclasses, implementing how they scan through the particular type of source location or structures they specialize in. The arguments for this method are the same Lister Parameters as those used when issuing the corresponding AddListToBatch call and are specified and documented by the Lister implementation."}),"\n",(0,r.jsx)(s.p,{children:'When expanding the list, the Lister should build a "Composite reference": a %List containing the lister ID, the group ID and the local reference for each (candidate) source it found and pass that to either a StoreRef, StoreTemp or StoreTempStream call. Optionally, it can store metadata for each of these refs using the SetMetadataValues method.'}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"NOTE:"})," This method is used by the iKnow loading frameworkand should never be called by custom code."]}),"\n",(0,r.jsx)(s.h3,{id:"reporterror",children:"ReportError"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Method ReportError(ref As %List, message As %String, location As %String = "") As %Status [ Final, Private ]\n'})}),"\n",(0,r.jsx)(s.p,{children:"Utility method to report failures for a given source (identified through a Composite Ref)"}),"\n",(0,r.jsx)(s.h3,{id:"reportwarning",children:"ReportWarning"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Method ReportWarning(ref As %List, message As %String, location As %String = "") As %Status [ Final, Private ]\n'})}),"\n",(0,r.jsx)(s.p,{children:"Utility method to report warnings for a given source (identified through a Composite Ref)"}),"\n",(0,r.jsx)(s.h3,{id:"storetemp",children:"StoreTemp"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method StoreTemp(ref As %List, data As %String) As %Status [ Final, Private ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Stores the supplied reference for a source to be loaded, along with the sources contents passed in through 'data' as a %String to be processed by %iKnow.Source.Temp.Processor (make sure it is set using SetProcessor at runtime or DefaultProcessor as the overall default!)."}),"\n",(0,r.jsx)(s.p,{children:"This method can be called with the same ref multiple times, which will append the %String data passed in."}),"\n",(0,r.jsx)(s.h3,{id:"storetempstream",children:"StoreTempStream"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method StoreTempStream(ref As %List, streamOID As %String) As %Status [ Final, Private ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Stores the supplied reference for a source to be loaded, along with the sources contents passed in through 'data' in the form of a %Stream.GlobalCharacter to be processed by %iKnow.Source.Temp.Processor."}),"\n",(0,r.jsx)(s.p,{children:"See also StoreTemp"}),"\n",(0,r.jsx)(s.h3,{id:"setmetadatavalues",children:"SetMetadataValues"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method SetMetadataValues(ref As %List, metaValues As %List) As %Status [ Final, Private ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Stores the supplied metadata values for the source being listed identified by ref. The values in metavalues should correspond positionally to the metadata field names passed in the most recent call to RegisterMetadataKeys for this Lister instance."}),"\n",(0,r.jsx)(s.h3,{id:"registermetadatakeys",children:"RegisterMetadataKeys"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method RegisterMetadataKeys(metaFieldNames As %List) As %Status [ Final, Private ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Registers the specified list of metadata field names to be used for all subsequent calls to SetMetadataValues until RegisterMetadataKeys is called again."}),"\n",(0,r.jsx)(s.p,{children:"The entries in the supplied %List have to be existing metadata field names for the current domain, otherwise they will be ignored."}),"\n",(0,r.jsx)(s.h3,{id:"registermetadatakeysinternal",children:"RegisterMetadataKeysInternal"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method RegisterMetadataKeysInternal(metaFieldNames As %List, forceRefresh As %Boolean = 0) As %Status [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Internal method. Allows explicitly updating the current metadata list to ensure new values for fixed fields are picked up."}),"\n",(0,r.jsx)(s.h3,{id:"registerfixedmetadata",children:"RegisterFixedMetadata"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method RegisterFixedMetadata(pKeys As %List, pValues As %List) As %Status [ Final ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Registers fixed metadata values pValues for the metadata fields in pKeys, for all sources to be listed as part of the next ProcessList or AddListToBatch calls, until the next call to RegistereFixedMetadata. The keys and values in pKeys and pValues should correspond positionally."}),"\n",(0,r.jsx)(s.h3,{id:"getlisterdata",children:"GetListerData"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetListerData() As %List [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"storeref",children:"StoreRef"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method StoreRef(ref As %List) As %Status [ Final, Private ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Stores the supplied reference for a source to be processed."}),"\n",(0,r.jsx)(s.h3,{id:"refexists",children:"RefExists"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method RefExists(groupName As %String, localRef As %String, checkStaging As %Boolean = 0) As %Boolean [ Private ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Basic method to check if a given reference exists already in the domain, which can be used in the Lister process to take appropriate action, such as skipping this particular ref or raising an error. If checkStaging is set to 1, it will also loop through the sources listed so far (by ExpandList calls) to see if there is no name conflict with these either."}),"\n",(0,r.jsx)(s.h3,{id:"splitextid",children:"SplitExtId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SplitExtId(domainId As %Integer, extId As %String, Output listerId As %Integer, Output groupId As %Integer, Output localRef As %String) As %Status [ Final ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"This method will split a complete External ID into the lister reference, group name and local reference and return the corresponding lister ID, group ID and local reference."}),"\n",(0,r.jsx)(s.p,{children:"The exact implementation of splitting the full reference into a group name and local reference is delegated to SplitFullRef method of the specific Lister implementation as referenced by the lister reference, which is the first part of the full External ID."}),"\n",(0,r.jsx)(s.h3,{id:"buildextid",children:"BuildExtId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod BuildExtId(domainId As %Integer, listerId As %Integer, groupId As %Integer, localRef As %String, Output sc As %Status = {$$$OK}) As %String [ Final ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"This method will assemble an External ID, starting from the lister ID, group ID and local reference."}),"\n",(0,r.jsx)(s.p,{children:"The exact implementation of combining the group name and local reference into a full reference is delegated to BuildFullRef method of the specific Lister implementation referenced by the listerId."}),"\n",(0,r.jsx)(s.h3,{id:"buildextidfromname",children:"BuildExtIdFromName"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod BuildExtIdFromName(domainId As %Integer, groupName As %String, localRef As %String, Output sc As %Status = {$$$OK}) As %String [ Final ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"This method will, assuming it is called for the appropriate Lister class, build the External ID based on the group name and local reference."}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"WARNING:"})," this method will throw an error if called from the abstract Lister class, as this combination of groupName and localRef is specific to the Lister implementation class."]}),"\n",(0,r.jsx)(s.h3,{id:"splitfullref",children:"SplitFullRef"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SplitFullRef(domainId As %Integer, fullRef As %String, Output groupName As %String, Output localRef As %String) As %Status [ Private ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"This method should be implemented by subclasses, taking into account the Full Reference structure for this particular Lister implementation. It derives the Group Name and Local Reference from the supplied Full Reference."}),"\n",(0,r.jsx)(s.h3,{id:"buildfullref",children:"BuildFullRef"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod BuildFullRef(domainId As %Integer, groupName As %String, localRef As %String) As %String [ Private ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"This method should be implemented by subclasses, taking into account the Full Reference structure for this particular Lister. It builds the Full Reference based on a Group Name and Local Reference."}),"\n",(0,r.jsx)(s.h3,{id:"buildsimplereffromcomposite",children:"BuildSimpleRefFromComposite"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod BuildSimpleRefFromComposite(domainId As %Integer, ref As %List, Output sc As %Status = {$$$OK}) As %String [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Builds a reference for use in $$$IKPSIMPLEEXTIDS domains. Defaults to the Local Ref"}),"\n",(0,r.jsx)(s.h3,{id:"buildfullreffromcomposite",children:"BuildFullRefFromComposite"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod BuildFullRefFromComposite(domainId As %Integer, ref As %List, Output sc As %Status = {$$$OK}) As %String [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"getgroupid",children:"GetGroupId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetGroupId(domId As %Integer, listerId As %Integer, groupName As %String) As %Integer [ Final ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Utility method to retrieve the group ID corresponding to a partiular Group Name, for a given domain and lister ID, or zero when the group name is not recognized."}),"\n",(0,r.jsx)(s.h3,{id:"getgroupname",children:"GetGroupName"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetGroupName(domId As %Integer, listerId As %Integer, groupId As %Integer, Output sc As %Status = {$$$OK}) As %String [ Final ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Utility method to retrieve the Group Name corresponding to a particular group ID, for a given domain and lister ID. An error is passed through the sc output parameter if no group was found for this ID."}),"\n",(0,r.jsx)(s.h3,{id:"addgroup",children:"AddGroup"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method AddGroup(groupName As %String) As %Integer [ Final, Private ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Utility method to store a (new) Group Name for this Lister, returning the corresponding ID. If the Group Name already exists for this domain and lister ID, it returns the existing groups ID."}),"\n",(0,r.jsx)(s.h3,{id:"addgroupstatic",children:"AddGroupStatic"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AddGroupStatic(domainId As %Integer, listerId As %Integer, groupName As %String) As %Integer [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Static version of AddGroup."}),"\n",(0,r.jsx)(s.h3,{id:"getalias",children:"GetAlias"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetAlias() As %String\n"})}),"\n",(0,r.jsx)(s.p,{children:"This method returns the simple alias for this Lister class, to be prefixed with a colon. If this method returns the empty string, the Lister Reference will start with the full Lister class name rather than this alias (prefixed with a colon)"}),"\n",(0,r.jsx)(s.h3,{id:"getextidprefix",children:"GetExtidPrefix"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetExtidPrefix() As %String [ Final ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"This utility method provides the prefix that is prepended to the Full Reference"}),"\n",(0,r.jsx)(s.h3,{id:"maxlistid",children:"MaxListId"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method MaxListId() As %Integer [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"formatparams",children:"FormatParams"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod FormatParams(listerParams As %List) As %String\n"})}),"\n",(0,r.jsx)(s.p,{children:"Utility method to format the parameter string passed in AddList for display by the %iKnow.Source.Loader.GetCurrentLists() method. Defaults to $lts() but should be overridden to nicen up complex datatypes in the parameter list."}),"\n",(0,r.jsx)(s.h3,{id:"processlist",children:"ProcessList"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method ProcessList(listerParams...) As %Status [ Final ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Wrapper method to process a single List in one call. This method instantiates a %iKnow.Source.Loader object, registers itself with it and then calls the ProcessList methodon the Loader with the supplied parameters."}),"\n",(0,r.jsxs)(s.p,{children:["This method takes the ",(0,r.jsx)(s.strong,{children:"Lister Parameters"})," for this particular Lister implementation."]}),"\n",(0,r.jsx)(s.h3,{id:"processvirtuallist",children:"ProcessVirtualList"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method ProcessVirtualList(listerParams...) As %Status [ Final ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Same as ProcessList, but sources will be added as Virtual Sources."}),"\n",(0,r.jsx)(s.h3,{id:"testparams",children:"TestParams"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method TestParams(listerParams...) As %Status\n"})}),"\n",(0,r.jsx)(s.p,{children:"This method is called at the start of ProcessList and AddListToBatch to validate the supplied Lister Parameters. Subclasses should override this method to execute the validation logic specific to their Lister Parameters."}),"\n",(0,r.jsx)(s.h3,{id:"resetref",children:"ResetRef"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method ResetRef() As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"BDB304 - Reset the current ref, to be run after Loader.ProcessList()"})]})}function d(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>n,x:()=>l});var r=t(96540);const i={},a=r.createContext(i);function n(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);