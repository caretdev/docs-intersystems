"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[75853],{45495:(e,r,t)=>{t.r(r),t.d(r,{contentTitle:()=>a,default:()=>c,frontMatter:()=>o,toc:()=>i});var s=t(74848),n=t(28453);const o={pagination_prev:null,pagination_next:null},a="%CSP.Error",i=[{value:"Methods",id:"methods",level:2},{value:"HyperEventError",id:"hypereventerror",level:3},{value:"OnPage",id:"onpage",level:3},{value:"DisplayError",id:"displayerror",level:3}];function l(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"csperror",children:"%CSP.Error"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-objectscript-class",children:"Class %CSP.Error Extends %CSP.ErrorLog [ System = 3 ]\n"})}),"\n",(0,s.jsx)(r.p,{children:"This error page will display information that is designed to make debugging an application easier, if you deploy a CSP application then you should use the %CSP.ErrorLog error page that logs the information or your own error that displays an error message suitable for an end user rather than providing them with a lot of debug information."}),"\n",(0,s.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(r.h3,{id:"hypereventerror",children:"HyperEventError"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod HyperEventError()\n"})}),"\n",(0,s.jsx)(r.p,{children:"If an error occurs while processing a HyperEvent then this method is called. This method will write out javascript code that will be executed on the browser. Note that the variable 'CSPPage' refers to the 'self' of the page on which the Hyperevent was called as this may be different to the current 'self'."}),"\n",(0,s.jsxs)(r.p,{children:["You could use this javascript to redirect the browser to another page: ",(0,s.jsx)(r.code,{children:"Write \"CSPPage.window.location='/csp/samples/menu.csp';\",!"})," Or you could popup an alert box with the error message in it: ",(0,s.jsx)(r.code,{children:"Write \"alert('An error occurred');\",!"})]}),"\n",(0,s.jsx)(r.h3,{id:"onpage",children:"OnPage"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod OnPage() As %Status\n"})}),"\n",(0,s.jsx)(r.p,{children:"Output the error page as HTML. This makes use of the ##class(%CSP.Utils).DisplayAllObjects() call to display as much information as possible about the state of the %request, %response, %server objects when the error occurred."}),"\n",(0,s.jsx)(r.h3,{id:"displayerror",children:"DisplayError"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod DisplayError(ByRef ErrorInfo As %String) As %Status\n"})}),"\n",(0,s.jsx)(r.p,{children:"Output in HTML the error information in ErrorInfo which is the array provided by DecomposeError."})]})}function c(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>i});var s=t(96540);const n={},o=s.createContext(n);function a(e){const r=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),s.createElement(o.Provider,{value:r},e.children)}}}]);