"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[59037],{15924:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>l,default:()=>c,frontMatter:()=>r,toc:()=>a});var t=n(74848),i=n(28453);const r={pagination_prev:null,pagination_next:null},l="%Library.Routine",a=[{value:"Properties",id:"properties",level:2},{value:"RoutineName",id:"routinename",level:3},{value:"RoutineType",id:"routinetype",level:3},{value:"RoutineVersion",id:"routineversion",level:3},{value:"Generated",id:"generated",level:3},{value:"UpToDate",id:"uptodate",level:3},{value:"StoreGlvn",id:"storeglvn",level:3},{value:"TempNode",id:"tempnode",level:3},{value:"NodeNo",id:"nodeno",level:3},{value:"Buffer",id:"buffer",level:3},{value:"Position",id:"position",level:3},{value:"IOSize",id:"iosize",level:3},{value:"IOLines",id:"iolines",level:3},{value:"IOLangMode",id:"iolangmode",level:3},{value:"IsModified",id:"ismodified",level:3},{value:"TimeStamp",id:"timestamp",level:3},{value:"Locked",id:"locked",level:3},{value:"Name",id:"name",level:3},{value:"Namespace",id:"namespace",level:3},{value:"LanguageMode",id:"languagemode",level:3},{value:"Methods",id:"methods",level:2},{value:"UpToDateGet",id:"uptodateget",level:3},{value:"Lock",id:"lock",level:3},{value:"Unlock",id:"unlock",level:3},{value:"LockRoutine",id:"lockroutine",level:3},{value:"ParseRoutineName",id:"parseroutinename",level:3},{value:"CheckProtect",id:"checkprotect",level:3},{value:"BuildRoutineName",id:"buildroutinename",level:3},{value:"%OnNew",id:"onnew",level:3},{value:"IOInit",id:"ioinit",level:3},{value:"Rewind",id:"rewind",level:3},{value:"Flush",id:"flush",level:3},{value:"SizeGet",id:"sizeget",level:3},{value:"IOGetStreamId",id:"iogetstreamid",level:3},{value:"OpenStream",id:"openstream",level:3},{value:"SaveStream",id:"savestream",level:3},{value:"DeleteStream",id:"deletestream",level:3},{value:"RoutineNameSet",id:"routinenameset",level:3},{value:"Read",id:"read",level:3},{value:"ReadLine",id:"readline",level:3},{value:"Write",id:"write",level:3},{value:"WriteLine",id:"writeline",level:3},{value:"InitWriteData",id:"initwritedata",level:3},{value:"ReadIntoBuffer",id:"readintobuffer",level:3},{value:"StoreGlvnGet",id:"storeglvnget",level:3},{value:"MoveToEnd",id:"movetoend",level:3},{value:"Clear",id:"clear",level:3},{value:"%OnClose",id:"onclose",level:3},{value:"NameGet",id:"nameget",level:3},{value:"NamespaceGet",id:"namespaceget",level:3},{value:"LanguageModeGet",id:"languagemodeget",level:3},{value:"LanguageModeSet",id:"languagemodeset",level:3},{value:"Compile",id:"compile",level:3},{value:"GetCurrentTimeStamp",id:"getcurrenttimestamp",level:3},{value:"Save",id:"save",level:3},{value:"Delete",id:"delete",level:3},{value:"RoutineExists",id:"routineexists",level:3},{value:"Exists",id:"exists",level:3},{value:"GetDate",id:"getdate",level:3},{value:"CheckSyntax",id:"checksyntax",level:3},{value:"RoutineListExecute",id:"routinelistexecute",level:3},{value:"RoutineListClose",id:"routinelistclose",level:3},{value:"RoutineListFetch",id:"routinelistfetch",level:3},{value:"RoutineListFetchRows",id:"routinelistfetchrows",level:3},{value:"RoutinesSortByFieldExecute",id:"routinessortbyfieldexecute",level:3},{value:"RoutinesSortByFieldClose",id:"routinessortbyfieldclose",level:3},{value:"RoutinesSortByFieldFetch",id:"routinessortbyfieldfetch",level:3},{value:"RoutinesSortByFieldFetchRows",id:"routinessortbyfieldfetchrows",level:3},{value:"LastModifiedGet",id:"lastmodifiedget",level:3},{value:"FindClose",id:"findclose",level:3},{value:"FindExecute",id:"findexecute",level:3},{value:"FindFetch",id:"findfetch",level:3},{value:"CompareClose",id:"compareclose",level:3},{value:"CompareExecute",id:"compareexecute",level:3},{value:"RoutineCompare",id:"routinecompare",level:3},{value:"CompareFetch",id:"comparefetch",level:3},{value:"LineTerminatorGet",id:"lineterminatorget",level:3},{value:"GetObjectVersion",id:"getobjectversion",level:3},{value:"normalizeName",id:"normalizename",level:3},{value:"GetRoutineGlobals",id:"getroutineglobals",level:3},{value:"CompileList",id:"compilelist",level:3},{value:"CompileAll",id:"compileall",level:3},{value:"CompileSelected",id:"compileselected",level:3},{value:"CompileAllNamespaces",id:"compileallnamespaces",level:3},{value:"%ExistsId",id:"existsid",level:3},{value:"%IsModified",id:"ismodified-1",level:3},{value:"%ObjectModified",id:"objectmodified",level:3}];function o(e){const s={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"libraryroutine",children:"%Library.Routine"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %Library.Routine Extends (%CharacterStream, %AbstractStream) [ Inheritance = right, System = 2 ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"The %Routine class provides a way to create and manipulate routines stored within a database."}),"\n",(0,t.jsxs)(s.p,{children:["The %Routine class provides a stream interface (",(0,t.jsx)(s.em,{children:"see %AbstractStream"}),") that allows you to read existing routines as well as create new one programmatically."]}),"\n",(0,t.jsx)(s.p,{children:"%Routine includes methods to save and compile modified routines."}),"\n",(0,t.jsxs)(s.p,{children:["For example, the following code creates, saves, and compiles a simple ObjectScript routine (note that lines of code start with a space character): ",(0,t.jsx)(s.code,{children:'Set routine = ##class(%Routine).%New("MyRoutine.MAC") ; Write lines of code to the routine Do routine.WriteLine("MyRoutine") Do routine.WriteLine("Tag()") Do routine.WriteLine(" Write ""This is my routine"",!") Do routine.WriteLine(" Quit") ; save the routine Do routine.Save() ; compile the routine Do routine.Compile()'})]}),"\n",(0,t.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(s.h3,{id:"routinename",children:"RoutineName"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property RoutineName As %String;\n"})}),"\n",(0,t.jsx)(s.p,{children:"The name of the routine."}),"\n",(0,t.jsx)(s.h3,{id:"routinetype",children:"RoutineType"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property RoutineType As %String;\n"})}),"\n",(0,t.jsx)(s.p,{children:"The type of the routine."}),"\n",(0,t.jsx)(s.h3,{id:"routineversion",children:"RoutineVersion"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property RoutineVersion As %Integer;\n"})}),"\n",(0,t.jsx)(s.h3,{id:"generated",children:"Generated"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Generated As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"True if this routine is generated from something else"}),"\n",(0,t.jsx)(s.h3,{id:"uptodate",children:"UpToDate"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property UpToDate As %Boolean [ Calculated ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"For INT routines if this is compiled from a MAC then return true if the INT is up to date with the MAC, but if the INT is different to the MAC, e.g. it was modified and saved directly or the MAC was modified and saved but not compiled then it will return false."}),"\n",(0,t.jsx)(s.p,{children:"For MAC routines it will be true if the generated pcode from compiling this MAC is up to date and false if recompiling this MAC would generate different pcode, so either the MAC has changed or the pcode has changed."}),"\n",(0,t.jsx)(s.h3,{id:"storeglvn",children:"StoreGlvn"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property StoreGlvn As %String [ Calculated, Private ];\n"})}),"\n",(0,t.jsx)(s.h3,{id:"tempnode",children:"TempNode"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property TempNode As %String [ Private ];\n"})}),"\n",(0,t.jsx)(s.h3,{id:"nodeno",children:"NodeNo"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property NodeNo As %String [ InitialExpression = 0, Private ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"The current node we are reading from."}),"\n",(0,t.jsx)(s.h3,{id:"buffer",children:"Buffer"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Buffer As %Binary [ MultiDimensional, Private ];\n"})}),"\n",(0,t.jsx)(s.h3,{id:"position",children:"Position"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Position As %Integer [ InitialExpression = 2, Private ];\n"})}),"\n",(0,t.jsx)(s.h3,{id:"iosize",children:"IOSize"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property IOSize As %Integer [ InitialExpression = 0, Private ];\n"})}),"\n",(0,t.jsx)(s.h3,{id:"iolines",children:"IOLines"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property IOLines As %Integer [ InitialExpression = 0, Private ];\n"})}),"\n",(0,t.jsx)(s.h3,{id:"iolangmode",children:"IOLangMode"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property IOLangMode As %Integer [ InitialExpression = 0, Private ];\n"})}),"\n",(0,t.jsx)(s.h3,{id:"ismodified",children:"IsModified"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property IsModified As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsx)(s.h3,{id:"timestamp",children:"TimeStamp"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property TimeStamp As %TimeStamp;\n"})}),"\n",(0,t.jsx)(s.h3,{id:"locked",children:"Locked"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Locked As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Number of times this routine has been locked."}),"\n",(0,t.jsx)(s.h3,{id:"name",children:"Name"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Name As %String [ Calculated ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"The name (without extension) of the routine associated with this object."}),"\n",(0,t.jsx)(s.p,{children:"This is for backwards compatibility only."}),"\n",(0,t.jsx)(s.h3,{id:"namespace",children:"Namespace"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Namespace As %String [ Calculated ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return the namespace this routine is from"}),"\n",(0,t.jsx)(s.h3,{id:"languagemode",children:"LanguageMode"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property LanguageMode As %Integer [ Calculated ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"The language mode of this routine"}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"uptodateget",children:"UpToDateGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method UpToDateGet() As %Boolean\n"})}),"\n",(0,t.jsx)(s.h3,{id:"lock",children:"Lock"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method Lock() As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Lock the current routine"}),"\n",(0,t.jsx)(s.h3,{id:"unlock",children:"Unlock"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method Unlock() As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Unlock the current routine"}),"\n",(0,t.jsx)(s.h3,{id:"lockroutine",children:"LockRoutine"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LockRoutine(name As %String, lock As %Boolean = 1, nsp As %String = {$namespace}, IModeLock As %Boolean = 0, timeout As %Integer = 0) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Lock a particular routine name. If lock is true (the default) then it locks the routine, and if false then it unlocks the routine. If a routine is derived from a class then it will lock the class name in ^oddDEF to prevent another user from attempting to edit the class at the same time this process is editing the routine. If IModeLock is True, then it will unlock the routine with the #I flag so that the node will unlock even if in a transaction."}),"\n",(0,t.jsx)(s.h3,{id:"parseroutinename",children:"ParseRoutineName"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method ParseRoutineName(name As %String) As %Status [ Private ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Split a routine name into its components; set the name,type etc."}),"\n",(0,t.jsxs)(s.p,{children:["If name has no extension, then the default is ",(0,t.jsx)(s.em,{children:".MAC"}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"checkprotect",children:"CheckProtect"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckProtect(name As %String) As %Boolean\n"})}),"\n",(0,t.jsx)(s.p,{children:"Check if we are allowed to save this routine in this namespace"}),"\n",(0,t.jsx)(s.h3,{id:"buildroutinename",children:"BuildRoutineName"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method BuildRoutineName() As %String [ CodeMode = expression, Private ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return the complete routine name for this routine."}),"\n",(0,t.jsx)(s.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method %OnNew(initval As %String = "") As %Status [ Private ]\n'})}),"\n",(0,t.jsx)(s.h3,{id:"ioinit",children:"IOInit"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method IOInit() [ Private ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"rewind",children:"Rewind"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method Rewind() As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"flush",children:"Flush"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method Flush() As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"sizeget",children:"SizeGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method SizeGet() As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return the current size of the data stream."}),"\n",(0,t.jsx)(s.h3,{id:"iogetstreamid",children:"IOGetStreamId"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method IOGetStreamId() As %String [ CodeMode = expression, Private ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"openstream",children:"OpenStream"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method OpenStream(sid As %String) As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"savestream",children:"SaveStream"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method SaveStream(supressbackup As %Boolean = 0, Output Refresh As %Boolean) As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"deletestream",children:"DeleteStream"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DeleteStream(sid As %ObjectIdentity) As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"routinenameset",children:"RoutineNameSet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method RoutineNameSet(newvalue As %String) As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"read",children:"Read"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method Read(ByRef len As %Integer = 32000, ByRef sc As %Status) As %String\n"})}),"\n",(0,t.jsx)(s.h3,{id:"readline",children:"ReadLine"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method ReadLine(ByRef len As %Integer = 32000, ByRef sc As %Status, ByRef eol As %Boolean) As %String\n"})}),"\n",(0,t.jsx)(s.h3,{id:"write",children:"Write"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method Write(data As %RawString = "") As %Status\n'})}),"\n",(0,t.jsx)(s.h3,{id:"writeline",children:"WriteLine"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method WriteLine(data As %String = "") As %Status\n'})}),"\n",(0,t.jsx)(s.h3,{id:"initwritedata",children:"InitWriteData"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method InitWriteData() As %Status [ Private ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"readintobuffer",children:"ReadIntoBuffer"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method ReadIntoBuffer() As %Boolean [ Private ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Reads the next node into Buffer."}),"\n",(0,t.jsx)(s.p,{children:"Returns 0 if there is no more data."}),"\n",(0,t.jsx)(s.h3,{id:"storeglvnget",children:"StoreGlvnGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method StoreGlvnGet() As %String [ Private ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"movetoend",children:"MoveToEnd"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method MoveToEnd() As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"clear",children:"Clear"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method Clear() As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status [ Private ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"nameget",children:"NameGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method NameGet() As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"namespaceget",children:"NamespaceGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method NamespaceGet() As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"languagemodeget",children:"LanguageModeGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method LanguageModeGet() As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"languagemodeset",children:"LanguageModeSet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method LanguageModeSet(languagemode As %Integer) As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"compile",children:"Compile"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method Compile(qspec As %String) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Compile this routine."}),"\n",(0,t.jsxs)(s.p,{children:["For information on qSpec, see ",(0,t.jsx)(s.a,{href:"/csp/docbook/DocBook.UI.Page.cls?FIND=ObjectScript+qspec",children:"System Flags and Qualifiers"}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"getcurrenttimestamp",children:"GetCurrentTimeStamp"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetCurrentTimeStamp() As %TimeStamp\n"})}),"\n",(0,t.jsx)(s.p,{children:"Get the on-disk timestamp for the routine."}),"\n",(0,t.jsx)(s.h3,{id:"save",children:"Save"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method Save(supressbackup As %Boolean = 0) As %Status [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Save this routine."}),"\n",(0,t.jsx)(s.h3,{id:"delete",children:"Delete"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Delete(rtnname As %String, flag As %String = 0, supressbackup As %Boolean = 0, nsp As %String = {$namespace}) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Delete the routine rtnname. If the rtnname is not fully qualified we will resolve this into a fully qualified name first and then proceed with the rest of the delete. For example if you specify 'test' and there is a 'test.mac' it will resolve to this, if there was only a 'test.obj' it will resolve the name to this. The parameter flag specifies how much to delete. The options are:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"0 - Delete entire routine, for a MAC routine this will delete MAC, INT, OBJ. For an INT routine it will delete INT and OBJ, for a INC routine it will only delete the INC, for a BAS routine it will delete the BAS and the OBJ code."}),"\n",(0,t.jsx)(s.li,{children:"1 - Delete just the named routine, for example for a MAC routine it will only delete the MAC and it will leave the INT and OBJ if present."}),"\n",(0,t.jsx)(s.li,{children:"2 - Delete all the source code but leave any OBJ code.\nThis returns a %Status code to show if it worked or not. If you pass a name like 'test.mac;*' it will delete all backup versions of this routine. If the routine name which is passed does not exists, the method will return success."}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"routineexists",children:"RoutineExists"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method RoutineExists() As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["This is an ",(0,t.jsx)(s.strong,{children:"instance"})," method which tests if this routine exists (that is, it has been saved to disk)."]}),"\n",(0,t.jsx)(s.h3,{id:"exists",children:"Exists"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Exists(name As %String) As %Boolean\n"})}),"\n",(0,t.jsxs)(s.p,{children:["This is a ",(0,t.jsx)(s.strong,{children:"class"})," method which tests if the routine name exists."]}),"\n",(0,t.jsxs)(s.p,{children:["If name consists of a routine name and an extension, such as INT, MAC, etc. then it will check for this specific routine. If it just contains the routine name it will check if either MAC, INT, or BAS exists. ",(0,t.jsx)(s.code,{children:'Write ##class(%Routine).Exists("Test.MAC") Write ##class(%Routine).Exists("Test")'})]}),"\n",(0,t.jsx)(s.h3,{id:"getdate",children:"GetDate"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetDate(name As %String) As %TimeStamp\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return the timestamp the routine with name was last updated."}),"\n",(0,t.jsx)(s.h3,{id:"checksyntax",children:"CheckSyntax"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckSyntax(ByRef Source As %String, ByRef Errors As %String, LanguageMode As %Integer = 0) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["This function syntax checks INT source code.",(0,t.jsx)(s.br,{}),"\nSource - source (INT) code; either a single line stored in a variable, or an array where: array(0)=#lines, array(1-n)=source",(0,t.jsx)(s.br,{}),"\nErrors (byref) - Returned array of errors detected by compiler",(0,t.jsx)(s.br,{}),"\nLanguageMode - language mode, 0-10 (optional, default 0)"]}),"\n",(0,t.jsx)(s.h3,{id:"routinelistexecute",children:"RoutineListExecute"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod RoutineListExecute(ByRef QHandle As %Binary, ByRef spec As %String(MAXLEN=512) = "", Dir As %Integer = 1, Type As %Integer = 0, Nsp As %String = {$namespace}, nolang As %Boolean = 0) As %Status [ Final ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"This query provides a list of all routines that match the pattern specified by spec."}),"\n",(0,t.jsxs)(s.p,{children:["spec may contain both * and ? as wildcards. It may also consist of more than one, comma-delimited selections. For example:",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:'"*.MAC"'}),(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:'"A*.MAC"'}),(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:'"A?.MAC"'}),(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:'"A*.MAC,B*.MAC"'}),(0,t.jsx)(s.br,{}),"\ndir specifies the direction to search in, 1 is forwards and -1 is backwards.",(0,t.jsx)(s.br,{}),"\ntype is 1 to include OBJ files in the search and the default, 0 will just include INT, MAC, INC, BAS.",(0,t.jsx)(s.br,{}),"\nnsp is the namespace to list from. If omitted, the query returns the routines from the current namespace. nsp can be either an explicit or an implied namespace."]}),"\n",(0,t.jsx)(s.h3,{id:"routinelistclose",children:"RoutineListClose"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RoutineListClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"routinelistfetch",children:"RoutineListFetch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RoutineListFetch(ByRef QHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Fetch"})," returns the next row in the query."]}),"\n",(0,t.jsx)(s.h3,{id:"routinelistfetchrows",children:"RoutineListFetchRows"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RoutineListFetchRows(ByRef QHandle As %Binary, FetchCount As %Integer = 0, ByRef RowSet As %List, ByRef ReturnCount As %Integer, ByRef AtEnd As %Integer) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"RoutineListFetchRows"})," returns the next FetchCount rows in the query."]}),"\n",(0,t.jsx)(s.h3,{id:"routinessortbyfieldexecute",children:"RoutinesSortByFieldExecute"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod RoutinesSortByFieldExecute(ByRef QHandle As %Binary, ByRef Spec As %String(MAXLEN=512) = "", Dir As %Integer = 1, Type As %Integer = 0, OrderBy As %String = "Date", Nsp As %String = {$namespace}) As %Status [ Final ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"This query provides a list of all routines that match the Spec ordered by the OrderBy. The Dir specifies the direction to search in, 1 is in assending order and -1 is in decending order."}),"\n",(0,t.jsxs)(s.p,{children:["Spec may contain both * and ? as wildcards. It may also consist of more than one, comma-delimited selections. For example:",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:'"*.MAC"'}),(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:'"A*.MAC"'}),(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:'"A?.MAC"'}),(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:'"A*.MAC,B*.MAC"'})]}),"\n",(0,t.jsx)(s.p,{children:"The Type is 1 to include OBJ files in the search and the default, 0 will just include INT, MAC, INC, BAS."}),"\n",(0,t.jsx)(s.p,{children:"OrderBy is one of:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Date - Date/Time the file was saved (the default)"}),"\n",(0,t.jsx)(s.li,{children:"Size - Size of the file"}),"\n",(0,t.jsxs)(s.li,{children:["Type - Type of the file ie. INT, MAC, INC, BAS\nIf you wish to return the results in name order then use the RoutineList query as this is faster as it does not need to build a full list first in order to sort it correctly.",(0,t.jsx)(s.br,{}),"\nnsp is the namespace to list from. If omitted, the query returns the routines from the current namespace. nsp can be either an explicit or an implied namespace."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"routinessortbyfieldclose",children:"RoutinesSortByFieldClose"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RoutinesSortByFieldClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"routinessortbyfieldfetch",children:"RoutinesSortByFieldFetch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RoutinesSortByFieldFetch(ByRef QHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ CodeMode = expression ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Fetch"})," returns the next row in the query."]}),"\n",(0,t.jsx)(s.h3,{id:"routinessortbyfieldfetchrows",children:"RoutinesSortByFieldFetchRows"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RoutinesSortByFieldFetchRows(ByRef QHandle As %Binary, FetchCount As %Integer = 0, ByRef RowSet As %List, ByRef ReturnCount As %Integer, ByRef AtEnd As %Integer) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"RoutineListFetchRows"})," returns the next FetchCount rows in the query."]}),"\n",(0,t.jsx)(s.h3,{id:"lastmodifiedget",children:"LastModifiedGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method LastModifiedGet() As %TimeStamp [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"findclose",children:"FindClose"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod FindClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = FindExecute ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"findexecute",children:"FindExecute"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod FindExecute(ByRef qHandle As %Binary, Namespace As %String, RoutineName As %String, FindWhat As %String = "", MatchCase As %Boolean = 1) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(s.h3,{id:"findfetch",children:"FindFetch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod FindFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = FindExecute ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"compareclose",children:"CompareClose"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CompareClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = CompareExecute ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"The query returns the routine that contains FindWhat, one line per row, with two columns, Line and Match. Line is the line text. Match is 1 if Line contains FindWhat. The entire routine is returned."}),"\n",(0,t.jsx)(s.h3,{id:"compareexecute",children:"CompareExecute"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CompareExecute(ByRef qHandle As %Binary, Nsp1 As %String, RouName1 As %String, Nsp2 As %String = "", RouName2 As %String) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(s.h3,{id:"routinecompare",children:"RoutineCompare"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod RoutineCompare(Nsp1 As %String = "", RouName1 As %String = "", Nsp2 As %String = "", RouName2 As %String = "", GloRef As %String) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(s.h3,{id:"comparefetch",children:"CompareFetch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CompareFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = FindExecute ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"lineterminatorget",children:"LineTerminatorGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method LineTerminatorGet() As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:["This query provides a list of all lines that differ between two given routines.",(0,t.jsx)(s.br,{}),"\nNsp1 and RouName1 specify the first routine.",(0,t.jsx)(s.br,{}),"\nNsp2 and RouName2 specify the second routine.",(0,t.jsx)(s.br,{}),"\nNsp1 and RouName2 can be either an explicit or an implied namespace."]}),"\n",(0,t.jsx)(s.h3,{id:"getobjectversion",children:"GetObjectVersion"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetObjectVersion() As %Numeric\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the major.minor version number of the ObjectScript compiler that produced the object code for this routine. Returns 0 if there is no object code for the routine."}),"\n",(0,t.jsx)(s.h3,{id:"normalizename",children:"normalizeName"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod normalizeName(ByRef rtn As %String, ByRef nm As %String, ByRef type As %String, obj As %Boolean = 1) As %Status [ Private ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"getroutineglobals",children:"GetRoutineGlobals"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetRoutineGlobals(ByRef Names As %String) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Return list of globals where routine and class information is stored.",(0,t.jsx)(s.br,{}),'\nReturns Names="ROUTINE,rBACKUP,rINC,rINCSAVE,rINDEX,rMAC,rMACSAVE,rMAP,rOBJ,oddDEF"',(0,t.jsx)(s.br,{}),"\nHere is some documentation on the format of the routine globals."]}),"\n",(0,t.jsxs)(s.p,{children:["ROUTINE - Native .INT COS code, generated from .MAC, or generated from classes. When compiled generates .OBJ code.",(0,t.jsx)(s.br,{}),"\nROUTINE(Name,0)=timestamp when last saved",(0,t.jsx)(s.br,{}),"\nROUTINE(Name,0,0)=# lines in routine",(0,t.jsx)(s.br,{}),"\nROUTINE(Name,0,1...x) = Source Lines in routine",(0,t.jsx)(s.br,{}),'\nROUTINE(Name,0,"GENERATED")= 0/1 whether routine is generated or native',(0,t.jsx)(s.br,{}),'\nROUTINE(Name,0,"INC",IncludeFileName1)=Timestamp when last include file last saved',(0,t.jsx)(s.br,{}),'\nROUTINE(Name,0,"INC",IncludeFileName2)=Timestamp when last include file last saved',(0,t.jsx)(s.br,{}),'\nROUTINE(Name,0,"SIZE")=# bytes in routine',(0,t.jsx)(s.br,{}),'\nROUTINE(Name,0,"LANG")=language mode']}),"\n",(0,t.jsxs)(s.p,{children:['ROUTINE(Name,"MAC")=Timestamp of .MAC code when last saved if generated',(0,t.jsx)(s.br,{}),'\nrBACKUP(Name,Type,version) - backup of ^ROUTINE, created by the command Merge ^rBACKUP(rtn,type,nextverersion)=^ROUTINE(rtn) where type="INT/MVI/BAS"']}),"\n",(0,t.jsxs)(s.p,{children:["rINC - Native .INT or macro code, compiled into .MAC when included with #include directive",(0,t.jsx)(s.br,{}),"\nrINC(Name,0)=timestamp when last saved",(0,t.jsx)(s.br,{}),"\nrINC(Name,0,0)=# lines in include file",(0,t.jsx)(s.br,{}),"\nrINC(Name,0,1...x) = Source Lines in include file",(0,t.jsx)(s.br,{}),'\nrINC(Name,0,"SIZE")=# bytes in include file',(0,t.jsx)(s.br,{}),'\nrINC("ZZ","P") - Meta data used for precompiling include files']}),"\n",(0,t.jsx)(s.p,{children:"rINCSAVE - Backup of ^rINC, created by the command Merge ^rINCSAVE(rtn,nextver)=^rINC(rtn,0)"}),"\n",(0,t.jsxs)(s.p,{children:["rINDEX - Index of .OBJ, .INT, and .MAC routines",(0,t.jsx)(s.br,{}),'\nrINDEX(Name,"OBJ/MAC/INC")=$lb(Time compiled,Size)',(0,t.jsx)(s.br,{}),'\nrINDEX(Name,"INT")=$lb(Time compiled,Size,Generated 0/1)']}),"\n",(0,t.jsxs)(s.p,{children:["rMAC - Native .MAC Macro code which when compiled generates .INT code",(0,t.jsx)(s.br,{}),"\nrMAC(Name,0)=Timestamp when last saved",(0,t.jsx)(s.br,{}),"\nrMAC(Name,0,0)=#lines in routine",(0,t.jsx)(s.br,{}),"\nrMAC(Name,0,1...x) = Source Lines in routine",(0,t.jsx)(s.br,{}),'\nrMAC(Name,0,"SIZE")=# bytes in routine']}),"\n",(0,t.jsx)(s.p,{children:"rMACSAVE(Name,Type,version) - backup of ^rMAC, created by the command Merge ^rMACSAVE(rtn,nextver)=^rMAC(rtn,0)"}),"\n",(0,t.jsxs)(s.p,{children:["rMAP - Debug map used by the debugger and for error trapping",(0,t.jsx)(s.br,{}),'\nrMAP(Name,"INT","MAC",offsets)=$lb(debuginfo)',(0,t.jsx)(s.br,{}),'\nrMAP(Name,"MAC","INT",offsets)=$lb(debuginfo)']}),"\n",(0,t.jsxs)(s.p,{children:["rOBJ - Compiled .INT code",(0,t.jsx)(s.br,{}),'\nrOBJ(Name,"INT")=timestamp of .INT code when compiled',(0,t.jsx)(s.br,{}),"\nrOBJ(Name,0...n)=Compiled object code"]}),"\n",(0,t.jsxs)(s.p,{children:["oddDEF - Source code for classes",(0,t.jsx)(s.br,{}),'\noddDEF($zcvt(Name,"U"),....)=source code from class. Note that all of the other odd* nodes are meta data describing the class, and can be recreated by compiling the class. The rINDEXCLASS and rINDEXSQL nodes also get recreated when compiling the class.']}),"\n",(0,t.jsx)(s.h3,{id:"compilelist",children:"CompileList"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CompileList(rtns As %String, qspec As %String) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"Compile a list of routines in the current namespace. Pass this a comma separated list of items, which can include wild card characters e.g. 'test.mac,abc*.int' or pass in a subscripted array with the routine name as the subscript. It will return an error %Status. If you do not wish to use multicompile then pass in /multicompile=0"}),"\n",(0,t.jsx)(s.h3,{id:"compileall",children:"CompileAll"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CompileAll(Flags As %String = 0, IO As %String = {$p}, ByRef Count As %Integer, ByRef Errors As %Integer, MultiCompile As %Integer, Journal As %Integer, KeepSource As %Boolean = 1) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Compile all routines in a namespace.",(0,t.jsx)(s.br,{}),"\nThis method will compile all routines in the current namespace.",(0,t.jsx)(s.br,{}),"\nFlags Bit string of options to method.",(0,t.jsx)(s.br,{}),"\nBit 0 - Suppress syntax error display.",(0,t.jsx)(s.br,{}),"\nBit 1 - Suppress output to principal device.",(0,t.jsx)(s.br,{}),'\nIO Already open device to send the output to. For example, "c:\\a.out"',(0,t.jsx)(s.br,{}),"\nCount (by ref) Number of routines compiled.",(0,t.jsx)(s.br,{}),"\nErrors (by ref) Number of routines with syntax errors.",(0,t.jsx)(s.br,{}),"\nMultiCompile - If true then use multiple jobs to do the compile, if not specified use the default /multicompile qualifier setting",(0,t.jsx)(s.br,{}),"\nJournal - If true then journal the compile, if false disable journaling for compile, if not specified use the default /journal qualifier setting",(0,t.jsx)(s.br,{}),"\nKeepSource - If true (default) then keep INT code from compiling a MAC, if false then do not save INT code"]}),"\n",(0,t.jsx)(s.h3,{id:"compileselected",children:"CompileSelected"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CompileSelected(Mask As %String = "*.*", Flags As %String = 0, IO As %String = {$p}, ByRef Count As %Integer, ByRef Errors As %Integer, MultiCompile As %Integer, Journal As %Integer, KeepSource As %Boolean = 1) As %Status\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Compile selected routines in a namespace.",(0,t.jsx)(s.br,{}),"\nMask Selection mask of which routines to compile. This mask is passed to %Library.Routine.RoutineList() and must be in a format it understands.",(0,t.jsx)(s.br,{}),"\nFlags Bit string of options to method.",(0,t.jsx)(s.br,{}),"\nBit 0 - Suppress syntax error display.",(0,t.jsx)(s.br,{}),"\nBit 1 - Suppress output to principal device.",(0,t.jsx)(s.br,{}),'\nIO Already open device to send the output to. For example, "c:\\a.out"',(0,t.jsx)(s.br,{}),"\nCount (by ref) Number of routines compiled.",(0,t.jsx)(s.br,{}),"\nErrors (by ref) Number of routines with syntax errors.",(0,t.jsx)(s.br,{}),"\nMultiCompile - If true then use multiple jobs to do the compile, if not specified use the default /multicompile qualifier setting",(0,t.jsx)(s.br,{}),"\nJournal - If true then journal the compile, if false disable journaling for compile, if not specified use the default /journal qualifier setting",(0,t.jsx)(s.br,{}),"\nKeepSource - If true (default) then keep INT code from compiling a MAC, if false then do not save INT code"]}),"\n",(0,t.jsx)(s.h3,{id:"compileallnamespaces",children:"CompileAllNamespaces"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CompileAllNamespaces(Flags As %String = 0, IO As %String = {$p}, ByRef Count As %Integer, ByRef Errors As %Integer, MultiCompile As %Integer = 1, Journal As %Integer = 1, KeepSource As %Boolean = 1) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Compile all routines in all namespace.",(0,t.jsx)(s.br,{}),"\nThis method will compile all routines in all namespaces. This will not compile routines in SYSTEM defined namespaces.",(0,t.jsx)(s.br,{}),"\nFlags Bit string of options to method.",(0,t.jsx)(s.br,{}),"\nBit 0 - Suppress syntax error display.",(0,t.jsx)(s.br,{}),"\nBit 1 - Suppress output to principal device.",(0,t.jsx)(s.br,{}),'\nIO Already open device to send the output to. For example, "c:\\a.out"',(0,t.jsx)(s.br,{}),"\nCount (by ref) Number of routines compiled.",(0,t.jsx)(s.br,{}),"\nErrors (by ref) Number of routines with syntax errors.",(0,t.jsx)(s.br,{}),"\nMultiCompile - If true (default) then use multiple jobs to do the compile",(0,t.jsx)(s.br,{}),"\nJournal - If true (default) then journal the compile, if false disable journaling for compile",(0,t.jsx)(s.br,{}),"\nKeepSource - If true (default) then keep INT code from compiling a MAC, if false then do not save INT code"]}),"\n",(0,t.jsx)(s.h3,{id:"existsid",children:"%ExistsId"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %ExistsId(id As %String) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"ismodified-1",children:"%IsModified"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %IsModified() As %Integer\n"})}),"\n",(0,t.jsx)(s.h3,{id:"objectmodified",children:"%ObjectModified"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %ObjectModified() As %Integer\n"})})]})}function c(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>a});var t=n(96540);const i={},r=t.createContext(i);function l(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);