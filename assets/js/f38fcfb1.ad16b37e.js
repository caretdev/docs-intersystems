"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[10408],{80666:(e,a,s)=>{s.r(a),s.d(a,{contentTitle:()=>n,default:()=>o,frontMatter:()=>i,toc:()=>r});var t=s(74848),l=s(28453);const i={pagination_prev:null,pagination_next:null},n="%Library.Integer",r=[{value:"Parameters",id:"parameters",level:2},{value:"FORMAT;",id:"format",level:3},{value:"MAXVAL",id:"maxval",level:3},{value:"MINVAL",id:"minval",level:3},{value:"XMLTotalDigits;",id:"xmltotaldigits",level:3},{value:"VALUELIST;",id:"valuelist",level:3},{value:"DISPLAYLIST;",id:"displaylist",level:3},{value:"XSDTYPE",id:"xsdtype",level:3},{value:"JSONTYPE",id:"jsontype",level:3},{value:"STRICT",id:"strict",level:3},{value:"Methods",id:"methods",level:2},{value:"XSDToLogical",id:"xsdtological",level:3},{value:"DisplayToLogical",id:"displaytological",level:3},{value:"Normalize",id:"normalize",level:3},{value:"IsValid",id:"isvalid",level:3},{value:"LogicalToDisplay",id:"logicaltodisplay",level:3}];function c(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"libraryinteger",children:"%Library.Integer"})}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Class %Library.Integer Extends %DataType [ ClientDataType = INTEGER, OdbcType = INTEGER, SqlCategory = INTEGER, System = 2 ]\n"})}),"\n",(0,t.jsxs)(a.p,{children:["The ",(0,t.jsx)(a.strong,{children:"%Integer"})," data type class represents an integer value."]}),"\n",(0,t.jsxs)(a.p,{children:["The logical value of the ",(0,t.jsx)(a.strong,{children:"%Integer"})," data type is an integer. The %Integer datatype does not have built-in limits. It is a hybrid datatype the values of which is not exact outside of a certain range (currently it is the same range as that of the 64-bit integer value). The current range for xDBC projections can be seen under configuration/advanced. Its default corresponds to the usual signed 32-bit integer limits."]}),"\n",(0,t.jsx)(a.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(a.h3,{id:"format",children:"FORMAT;"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter FORMAT;\n"})}),"\n",(0,t.jsx)(a.p,{children:"The format specification for the data type's display value."}),"\n",(0,t.jsxs)(a.p,{children:["The value of FORMAT corresponds to the formatting option of the ",(0,t.jsx)(a.code,{children:"$FNUMBER"})," function, which is used to perform the formatting."]}),"\n",(0,t.jsx)(a.h3,{id:"maxval",children:"MAXVAL"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter MAXVAL As INTEGER;\n"})}),"\n",(0,t.jsx)(a.p,{children:"The maximum allowed logical value for the data type."}),"\n",(0,t.jsx)(a.h3,{id:"minval",children:"MINVAL"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter MINVAL As INTEGER;\n"})}),"\n",(0,t.jsx)(a.p,{children:"The minimum allowed logical value for the data type."}),"\n",(0,t.jsx)(a.h3,{id:"xmltotaldigits",children:"XMLTotalDigits;"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter XMLTotalDigits;\n"})}),"\n",(0,t.jsxs)(a.p,{children:["The total number of digits for XML verification as defined by ",(0,t.jsx)(a.a,{href:"http://www.w3.org/TR/xmlschema-2/#rf-totalDigits",children:"http://www.w3.org/TR/xmlschema-2/#rf-totalDigits"})]}),"\n",(0,t.jsx)(a.h3,{id:"valuelist",children:"VALUELIST;"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter VALUELIST;\n"})}),"\n",(0,t.jsx)(a.p,{children:'Used for enumerated (multiple-choice) attributes. VALUELIST is either a null string ("") or a delimiter separated list (where the delimiter is the first character) of logical values. If a non-null value is present, then the attribute is restricted to values in the list, and the validation code simply checks to see if the value is in the list.'}),"\n",(0,t.jsx)(a.h3,{id:"displaylist",children:"DISPLAYLIST;"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter DISPLAYLIST;\n"})}),"\n",(0,t.jsxs)(a.p,{children:["Used for enumerated (multiple-choice) attributes. Used in conjunction with the ",(0,t.jsx)(a.a,{href:"#VALUELIST",children:"VALUELIST"})," parameter for enumerated (multiple-choice) attributes. DISPLAYLIST, if not null, represents the display values for the attribute corresponding with the logical values listed in VALUELIST."]}),"\n",(0,t.jsxs)(a.p,{children:["The display values are returned by the ",(0,t.jsx)(a.a,{href:"#LogicalToDisplay",children:"LogicalToDisplay"})," method."]}),"\n",(0,t.jsx)(a.h3,{id:"xsdtype",children:"XSDTYPE"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'Parameter XSDTYPE = "long";\n'})}),"\n",(0,t.jsx)(a.p,{children:"Declares the XSD type used when projecting XML Schemas."}),"\n",(0,t.jsx)(a.h3,{id:"jsontype",children:"JSONTYPE"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'Parameter JSONTYPE = "number";\n'})}),"\n",(0,t.jsx)(a.h3,{id:"strict",children:"STRICT"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter STRICT = 0;\n"})}),"\n",(0,t.jsx)(a.p,{children:"If '1' then IsValid will return false for numbers that are not integers e.g. 1.2, -0.01 rather than the default behavior which is to allow these an normalize them to an integer. This validation is done by $number using \"I\" format, so the rules associated with this function apply."}),"\n",(0,t.jsx)(a.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(a.h3,{id:"xsdtological",children:"XSDToLogical"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod XSDToLogical(%val As %String) As %Integer [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,t.jsx)(a.p,{children:'Converts the SOAP encoded input decimal value into a logical value. Returns "" for error.'}),"\n",(0,t.jsx)(a.h3,{id:"displaytological",children:"DisplayToLogical"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod DisplayToLogical(%val As %String) As %Integer [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Converts the input value %val, which is a string representing an integer, into a logical integer value."}),"\n",(0,t.jsx)(a.p,{children:"Returns the logical integer value of the input string %val."}),"\n",(0,t.jsx)(a.h3,{id:"normalize",children:"Normalize"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod Normalize(%val As %RawString) As %Integer [ ServerOnly = 1 ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Converts %val to a normalized value."}),"\n",(0,t.jsx)(a.h3,{id:"isvalid",children:"IsValid"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod IsValid(%val As %RawString) As %Status [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,t.jsxs)(a.p,{children:["Tests if the logical value %val, which is an integer value, is valid. The validation is based on the class parameter settings used for the class attribute this data type is associated with. In this case, ",(0,t.jsx)(a.a,{href:"#MAXVAL",children:"MAXVAL"})," and ",(0,t.jsx)(a.a,{href:"#MINVAL",children:"MINVAL"}),"."]}),"\n",(0,t.jsx)(a.h3,{id:"logicaltodisplay",children:"LogicalToDisplay"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToDisplay(%val As %Integer) As %String [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Converts the value of %val, which is in logical integer format, into a display string. The formatting is based on the value of the FORMAT parameter."}),"\n",(0,t.jsx)(a.p,{children:"Returns the formatted value of %val."})]})}function o(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,a,s)=>{s.d(a,{R:()=>n,x:()=>r});var t=s(96540);const l={},i=t.createContext(l);function n(e){const a=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:n(e.components),t.createElement(i.Provider,{value:a},e.children)}}}]);