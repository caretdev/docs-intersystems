"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[87700],{63047:(e,a,l)=>{l.r(a),l.d(a,{contentTitle:()=>i,default:()=>c,frontMatter:()=>n,toc:()=>r});var o=l(74848),s=l(28453);const n={pagination_prev:null,pagination_next:null},i="%Library.FilemanYear",r=[{value:"Parameters",id:"parameters",level:2},{value:"XSDTYPE",id:"xsdtype",level:3},{value:"JSONTYPE",id:"jsontype",level:3},{value:"COLLATION",id:"collation",level:3},{value:"Methods",id:"methods",level:2},{value:"XSDToLogical",id:"xsdtological",level:3},{value:"LogicalToXSD",id:"logicaltoxsd",level:3},{value:"JSONToLogical",id:"jsontological",level:3},{value:"LogicalToJSON",id:"logicaltojson",level:3},{value:"IsValid",id:"isvalid",level:3},{value:"LogicalToDisplay",id:"logicaltodisplay",level:3},{value:"LogicalToOdbc",id:"logicaltoodbc",level:3},{value:"DisplayToLogical",id:"displaytological",level:3},{value:"OdbcToLogical",id:"odbctological",level:3},{value:"DateToLogical",id:"datetological",level:3},{value:"TimeStampToLogical",id:"timestamptological",level:3},{value:"LogicalToDate",id:"logicaltodate",level:3}];function t(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.header,{children:(0,o.jsx)(a.h1,{id:"libraryfilemanyear",children:"%Library.FilemanYear"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:"Class %Library.FilemanYear [ ClassType = datatype, ClientDataType = VARCHAR, OdbcType = VARCHAR, SqlCategory = STRING, System = 2 ]\n"})}),"\n",(0,o.jsx)(a.p,{children:"Custom DATE data type designed to convert FILEMAN format YEAR fields. A field defined as a YEAR data type can accept many of the date entries, but only stores the YEAR portion. Example: External: 2016 Internal: 3160000"}),"\n",(0,o.jsx)(a.h2,{id:"parameters",children:"Parameters"}),"\n",(0,o.jsx)(a.h3,{id:"xsdtype",children:"XSDTYPE"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:'Parameter XSDTYPE = "string";\n'})}),"\n",(0,o.jsx)(a.h3,{id:"jsontype",children:"JSONTYPE"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:'Parameter JSONTYPE = "string";\n'})}),"\n",(0,o.jsx)(a.h3,{id:"collation",children:"COLLATION"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:'Parameter COLLATION = "STRING";\n'})}),"\n",(0,o.jsx)(a.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsx)(a.h3,{id:"xsdtological",children:"XSDToLogical"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod XSDToLogical(%val As %String) As %FilemanYear [ CodeMode = generator ]\n"})}),"\n",(0,o.jsx)(a.h3,{id:"logicaltoxsd",children:"LogicalToXSD"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToXSD(%val As %FilemanYear) As %String [ CodeMode = generator ]\n"})}),"\n",(0,o.jsx)(a.p,{children:"Converts the %FilemanYear value to the canonical SOAP encoded value."}),"\n",(0,o.jsx)(a.h3,{id:"jsontological",children:"JSONToLogical"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod JSONToLogical(%val As %String) As %FilemanYear [ CodeMode = generator ]\n"})}),"\n",(0,o.jsx)(a.h3,{id:"logicaltojson",children:"LogicalToJSON"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToJSON(%val As %FilemanYear) As %String [ CodeMode = generator ]\n"})}),"\n",(0,o.jsx)(a.p,{children:"Converts the logical %FilemanYear value to the JSON string value."}),"\n",(0,o.jsx)(a.h3,{id:"isvalid",children:"IsValid"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod IsValid(%val As %RawString) As %Status [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,o.jsx)(a.p,{children:"Checks for Invalid format, expects FILEMAN format YEAR (CYY0000). Can handle data on disk in the Fileman TimeStamp format."}),"\n",(0,o.jsx)(a.h3,{id:"logicaltodisplay",children:"LogicalToDisplay"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod LogicalToDisplay(Arg1 As %Library.FilemanYear = "") As %Library.String [ CodeMode = generator, ServerOnly = 0 ]\n'})}),"\n",(0,o.jsx)(a.p,{children:"Converts FILEMAN format YEAR (CYY0000) to DISPLAY format YEAR (YYYY). Can handle data on disk in the Fileman TimeStamp format."}),"\n",(0,o.jsx)(a.h3,{id:"logicaltoodbc",children:"LogicalToOdbc"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod LogicalToOdbc(Arg1 As %Library.FilemanYear = "") As %Library.String [ CodeMode = generator ]\n'})}),"\n",(0,o.jsx)(a.p,{children:"Converts FILEMAN format YEAR (CYY0000) to ODBC format YEAR (YYYY). Can handle data on disk in the Fileman TimeStamp format."}),"\n",(0,o.jsx)(a.h3,{id:"displaytological",children:"DisplayToLogical"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod DisplayToLogical(Arg1 As %Library.String) As %Library.FilemanYear [ ServerOnly = 0 ]\n"})}),"\n",(0,o.jsx)(a.p,{children:"Converts DISPLAY format DATE (DD/MM/YYYY) to FILEMAN format YEAR (CYY0000)."}),"\n",(0,o.jsx)(a.h3,{id:"odbctological",children:"OdbcToLogical"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod OdbcToLogical(Arg1 As %Library.String = "") As %Library.FilemanDate\n'})}),"\n",(0,o.jsx)(a.p,{children:"Converts ODBC format DATE (YYYY-MM-DD) to FILEMAN format YEAR (CYY0000)."}),"\n",(0,o.jsx)(a.h3,{id:"datetological",children:"DateToLogical"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod DateToLogical(%val As %Library.String = "") As %Library.FilemanYear [ CodeMode = expression, ServerOnly = 1 ]\n'})}),"\n",(0,o.jsx)(a.p,{children:"Converts %Date format DATE (+$H) to FILEMAN format YEAR (CYY0000)."}),"\n",(0,o.jsx)(a.h3,{id:"timestamptological",children:"TimeStampToLogical"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod TimeStampToLogical(%val As %Library.TimeStamp = "") As %Library.FilemanYear [ CodeMode = expression, ServerOnly = 1 ]\n'})}),"\n",(0,o.jsx)(a.p,{children:"Converts %TimeStamp format TIMESTAMP (YYYY-MM-DD HH:MM:SS) to FILEMAN format YEAR (CYY0000)."}),"\n",(0,o.jsx)(a.h3,{id:"logicaltodate",children:"LogicalToDate"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToDate(%val As %Library.FilemanDate) As %Library.Date [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,o.jsx)(a.p,{children:"Converts FILEMAN format YEAR (CYY0000) to %Date format DATE (+$H)"})]})}function c(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(t,{...e})}):t(e)}},28453:(e,a,l)=>{l.d(a,{R:()=>i,x:()=>r});var o=l(96540);const s={},n=o.createContext(s);function i(e){const a=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(n.Provider,{value:a},e.children)}}}]);