"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[48048],{95701:(e,r,n)=>{n.r(r),n.d(r,{contentTitle:()=>t,default:()=>o,frontMatter:()=>l,toc:()=>c});var i=n(74848),s=n(28453);const l={pagination_prev:null,pagination_next:null},t="%SYSTEM.SQL.Security",c=[{value:"Methods",id:"methods",level:2},{value:"CheckPrivilege",id:"checkprivilege",level:3},{value:"CheckPrivilegeWithGrant",id:"checkprivilegewithgrant",level:3},{value:"GrantPrivilege",id:"grantprivilege",level:3},{value:"GrantPrivilegeWithGrant",id:"grantprivilegewithgrant",level:3},{value:"GrantOne",id:"grantone",level:3},{value:"RevokePrivilege",id:"revokeprivilege",level:3},{value:"RevokeOne",id:"revokeone",level:3},{value:"GrantAdminOne",id:"grantadminone",level:3},{value:"RevokeAdminOne",id:"revokeadminone",level:3},{value:"RoleExists",id:"roleexists",level:3},{value:"UserExists",id:"userexists",level:3}];function a(e){const r={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"systemsqlsecurity",children:"%SYSTEM.SQL.Security"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-objectscript-class",children:"Class %SYSTEM.SQL.Security Extends %SYSTEM.Help [ Abstract, Not ProcedureBlock, System = 4 ]\n"})}),"\n",(0,i.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(r.h3,{id:"checkprivilege",children:"CheckPrivilege"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod CheckPrivilege(Username As %String, ObjectType As %Integer, Object As %String, Action As %String, Namespace As %String = "") As %Boolean\n'})}),"\n",(0,i.jsx)(r.p,{children:"Check if user has SQL privilege for a particular action. This does not check grant privileges."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"Username"})," Name of the user to check. Required. ",(0,i.jsx)(r.em,{children:"ObjectType"})," Required. Specifies the type to check the privilege of. ObjectTypes are 1 (table), 3 (view), 5 (schema), 6 (ml configuration), 7 (foreign server), 9 (procedure). ",(0,i.jsx)(r.em,{children:"Object"})]}),"\n",(0,i.jsx)(r.p,{children:"Required. The name the object to check the privilege of."}),"\n",(0,i.jsxs)(r.p,{children:['For example, ObjectType and Object could be "1" and "Sample.Person", or "9" and "SQLUser.My_Procedure". ',(0,i.jsx)(r.em,{children:"Action"}),' Comma delimited string of actions letters to check privileges for. Actions are one or more of the letters "a,s,i,u,d,r,e,l" (in any order) which stands for ALTER,SELECT,INSERT,UPDATE,DELETE,REFERENCES,EXECUTE,USE (USE for ML Configurations/Foreign Server). Privilege "e" is only allowed for Procedures. Privilege "l" is only allowed for ML Configurations and Foreign Servers. CheckPrivilege will only return 1 if the user has privileges on all Actions specified. Required. ',(0,i.jsx)(r.em,{children:"Namespace"})," Namespace object resides in (optional) default is current namespace"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"1 - if the Username does have the privilege"}),"\n",(0,i.jsx)(r.li,{children:"0 - if the Username does not have the privilege"}),"\n",(0,i.jsx)(r.li,{children:"%Status - if CheckPrivilege call is reporting an error"}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:['If Username is a user with the %All role, CheckPrivilege will return 1 even if the Object does not exist.\nIf the user calling CheckPrivilege is not the same as Username, the calling user must hold the %Admin_Secure:"U" privilege. ',(0,i.jsx)(r.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(r.li,{children:'Do $SYSTEM.SQL.Security.CheckPrivilege("Miranda",3,"SQLUser.Person","s","PRODUCT")'}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"checkprivilegewithgrant",children:"CheckPrivilegeWithGrant"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod CheckPrivilegeWithGrant(Username As %String, ObjectType As %Integer, Object As %String, Action As %String, Namespace As %String = "") As %Boolean\n'})}),"\n",(0,i.jsx)(r.p,{children:"Check if user has SQL grant privilege for a particular action."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"Username"})," Name of the user to check. Required. ",(0,i.jsx)(r.em,{children:"ObjectType"})," Required. Specifies the type to check the grant privilege of. ObjectTypes are 1 (table), 3 (view), 5 (schema), 6 (ml configuration), 7 (foreign server), 9 (procedure). ",(0,i.jsx)(r.em,{children:"Object"})]}),"\n",(0,i.jsx)(r.p,{children:"Required. The name the object to check the grant privilege of."}),"\n",(0,i.jsxs)(r.p,{children:['For example, ObjectType and Object could be "1" and "Sample.Person", or "9" and "SQLUser.My_Procedure". ',(0,i.jsx)(r.em,{children:"Action"}),' Comma delimited string of actions letters to check grant privileges for. Actions are one or more of the letters "a,s,i,u,d,r,e,l" (in any order) which stands for ALTER,SELECT,INSERT,UPDATE,DELETE,REFERENCES,EXECUTE,USE (USE for ML Configurations/ForeignServers). Privilege "e" is only allowed for Procedures. Privilege "l" is only allowed for ML Configurations and Foreign Servers. CheckPrivilegeWithGrant will only return 1 if the user has grant privileges on all Actions specified. Required. ',(0,i.jsx)(r.em,{children:"Namespace"})," Namespace object resides in (optional) default is current namespace"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"1 - if the Username does have the privilege"}),"\n",(0,i.jsx)(r.li,{children:"0 - if the Username does not have the privilege"}),"\n",(0,i.jsx)(r.li,{children:"%Status - if CheckPrivilegeWithGrant call is reporting an error"}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:['If Username is a user with the %All role, CheckPrivilegeWithGrant will return 1 even if the Object does not exist.\nIf the user calling CheckPrivilegeWithGrant is not the same as Username, the calling user must hold the %Admin_Secure:"U" privilege. ',(0,i.jsx)(r.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(r.li,{children:'Do $SYSTEM.SQL.Security.CheckPrivilegeWithGrant($username,1,"HHR.ProductionValues","s,i,u,d","USER")'}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"grantprivilege",children:"GrantPrivilege"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod GrantPrivilege(ObjPriv As %String, ObjList As %String, Type As %String, User As %String) As %Status [ ProcedureBlock = 1, PublicList = SQLCODE ]\n"})}),"\n",(0,i.jsxs)(r.p,{children:["GrantPrivilege lets you grant an ",(0,i.jsx)(r.em,{children:"ObjPriv"})," to a ",(0,i.jsx)(r.em,{children:"User"})," via this call instead of using the SQL GRANT statement. This does not include grant privileges."]}),"\n",(0,i.jsxs)(r.p,{children:["$SYSTEM.SQL.Security.GrantPrivilege(",(0,i.jsx)(r.em,{children:"ObjPriv"}),",",(0,i.jsx)(r.em,{children:"ObjList"}),",",(0,i.jsx)(r.em,{children:"Type"}),",",(0,i.jsx)(r.em,{children:"User"}),")",(0,i.jsx)(r.br,{}),"\nParameters: ",(0,i.jsx)(r.em,{children:"ObjPriv"})," Comma delimited string of actions to grant. * for all actions:"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Alter"}),"\n",(0,i.jsx)(r.li,{children:"Select"}),"\n",(0,i.jsx)(r.li,{children:"Insert"}),"\n",(0,i.jsx)(r.li,{children:"Update"}),"\n",(0,i.jsx)(r.li,{children:"Delete"}),"\n",(0,i.jsx)(r.li,{children:"References"}),"\n",(0,i.jsx)(r.li,{children:"Execute"}),"\n",(0,i.jsx)(r.li,{children:"Use"}),"\n",(0,i.jsxs)(r.li,{children:["or any combination\n",(0,i.jsx)(r.em,{children:"ObjList"}),"  * for all objects, else a comma delimited list of SQL object names (tables, views, procedures, schemas). The specified schemas cannot be empty.",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.em,{children:"Type"}),"  Table, View, Schema, Stored Procedures, ML Configuration, or Foreign Server",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.em,{children:"User"}),"  Comma delimited list of users"]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"grantprivilegewithgrant",children:"GrantPrivilegeWithGrant"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod GrantPrivilegeWithGrant(ObjPriv As %String, ObjList As %String, Type As %String, User As %String) As %Status [ ProcedureBlock = 1, PublicList = SQLCODE ]\n"})}),"\n",(0,i.jsxs)(r.p,{children:["GrantPrivilegeWithGrant lets you grant an ",(0,i.jsx)(r.em,{children:"ObjPriv"}),", WITH GRANT OPTION, to a ",(0,i.jsx)(r.em,{children:"User"})]}),"\n",(0,i.jsxs)(r.p,{children:["$SYSTEM.SQL.Security.GrantPrivilegeWithGrant(",(0,i.jsx)(r.em,{children:"ObjPriv"}),",",(0,i.jsx)(r.em,{children:"ObjList"}),",",(0,i.jsx)(r.em,{children:"Type"}),",",(0,i.jsx)(r.em,{children:"User"}),")",(0,i.jsx)(r.br,{}),"\nParameters: ",(0,i.jsx)(r.em,{children:"ObjPriv"})," Comma delimited string of actions to grant. * for all actions:"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Alter"}),"\n",(0,i.jsx)(r.li,{children:"Select"}),"\n",(0,i.jsx)(r.li,{children:"Insert"}),"\n",(0,i.jsx)(r.li,{children:"Update"}),"\n",(0,i.jsx)(r.li,{children:"Delete"}),"\n",(0,i.jsx)(r.li,{children:"References"}),"\n",(0,i.jsx)(r.li,{children:"Execute"}),"\n",(0,i.jsx)(r.li,{children:"Use"}),"\n",(0,i.jsxs)(r.li,{children:["or any combination\n",(0,i.jsx)(r.em,{children:"ObjList"}),"  * for all objects, else a comma delimited list of SQL object names (tables, views, procedures, schemas). The specified schemas cannot be empty.",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.em,{children:"Type"}),"  Table, View, Schema, Stored Procedure, ML Configuration, or Foreign Server",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.em,{children:"User"}),"  Comma delimited list of users"]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"grantone",children:"GrantOne"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod GrantOne(ByRef Properties As %String) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,i.jsx)(r.p,{children:"Wrapper around GrantPrivilege() and GrantPrivilegeWithGrant() to support declarative syntax in CPF Actions"}),"\n",(0,i.jsx)(r.h3,{id:"revokeprivilege",children:"RevokePrivilege"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod RevokePrivilege(ObjPriv As %String, ObjList As %String, Type As %String, User As %String, wGrant As %Integer = 0, Cascade As %Integer = 0, AsGrantor As %String = "") As %Status [ ProcedureBlock = 1, PublicList = SQLCODE ]\n'})}),"\n",(0,i.jsxs)(r.p,{children:["RevokePrivilege lets you revoke an ",(0,i.jsx)(r.em,{children:"ObjPriv"})," from a ",(0,i.jsx)(r.em,{children:"User"})," via this call instead of using the SQL REVOKE statement"]}),"\n",(0,i.jsxs)(r.p,{children:["$SYSTEM.SQL.Security.RevokePrivilege(",(0,i.jsx)(r.em,{children:"ObjPriv"}),",",(0,i.jsx)(r.em,{children:"ObjList"}),",",(0,i.jsx)(r.em,{children:"Type"}),",",(0,i.jsx)(r.em,{children:"User"}),",",(0,i.jsx)(r.em,{children:"wGrant"}),",",(0,i.jsx)(r.em,{children:"Cascade"}),",",(0,i.jsx)(r.em,{children:"AsGrantor"}),")",(0,i.jsx)(r.br,{}),"\nParameters: ",(0,i.jsx)(r.em,{children:"ObjPriv"})," Comma delimited string of actions to grant. * for all actions:"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Alter"}),"\n",(0,i.jsx)(r.li,{children:"Select"}),"\n",(0,i.jsx)(r.li,{children:"Insert"}),"\n",(0,i.jsx)(r.li,{children:"Update"}),"\n",(0,i.jsx)(r.li,{children:"Delete"}),"\n",(0,i.jsx)(r.li,{children:"References"}),"\n",(0,i.jsx)(r.li,{children:"Execute"}),"\n",(0,i.jsx)(r.li,{children:"Use"}),"\n",(0,i.jsxs)(r.li,{children:["or any combination\n",(0,i.jsx)(r.em,{children:"ObjList"}),"  * for all objects, else a comma delimited list of SQL object names (tables, views, procedures, schemas)",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.em,{children:"Type"}),"  Table, View, Schema, ML Configuration, Foreign Server, or Stored Procedures",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.em,{children:"User"}),"  Comma delimited list of users",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.em,{children:"wGrant"}),"  0/1 for WITH GRANT OPTION",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.em,{children:"Cascade"}),"  0/1 cascade revoke?",(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.em,{children:"AsGrantor"}),'  Alternate User to remove privileges for. AsGrantor can be a user name, a comma-separated list of user names, or "*".']}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"revokeone",children:"RevokeOne"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod RevokeOne(ByRef Properties As %String) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,i.jsx)(r.p,{children:"Wrapper around RevokePrivilege() to support declarative syntax in CPF Actions"}),"\n",(0,i.jsx)(r.h3,{id:"grantadminone",children:"GrantAdminOne"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod GrantAdminOne(ByRef Properties As %String) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,i.jsx)(r.p,{children:'Wrapper around SQL call "GRANT  TO  [WITH ADMIN OPTION]" Validates all user input to protect against SQL injection'}),"\n",(0,i.jsx)(r.h3,{id:"revokeadminone",children:"RevokeAdminOne"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod RevokeAdminOne(ByRef Properties As %String) As %Status [ Internal, ProcedureBlock = 1 ]\n"})}),"\n",(0,i.jsx)(r.p,{children:'Wrapper around SQL call "REVOKE  FROM " Validates all user input to protect against SQL injection'}),"\n",(0,i.jsx)(r.h3,{id:"roleexists",children:"RoleExists"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod RoleExists(rolename As %Library.String = "") As %Library.Boolean [ SqlProc ]\n'})}),"\n",(0,i.jsx)(r.p,{children:"This entry point can be used to determine if a role exists."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"rolename"})," Name of the role to check. ",(0,i.jsx)(r.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:['Write $SYSTEM.SQL.Security.RoleExists("SalesManager") // Writes a 1 if role SalesManager exists\nThis method can also be called as a Stored Procedure named %SYSTEM_SQL.Security_RoleExists(',(0,i.jsx)(r.em,{children:"rolename"}),")"]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"userexists",children:"UserExists"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod UserExists(username As %Library.String = "") As %Library.Boolean [ SqlProc ]\n'})}),"\n",(0,i.jsx)(r.p,{children:"This entry point can be used to determine if a user exists."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.em,{children:"username"})," Name of the user to check. ",(0,i.jsx)(r.strong,{children:"Examples"}),":"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:['Write $SYSTEM.SQL.Security.UserExists("Robert") // Writes a 1 if user Robert exists\nThis method can also be called as a Stored Procedure named %SYSTEM_SQL.Security_UserExists(',(0,i.jsx)(r.em,{children:"username"}),")"]}),"\n"]})]})}function o(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>c});var i=n(96540);const s={},l=i.createContext(s);function t(e){const r=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(l.Provider,{value:r},e.children)}}}]);