"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[24253],{58004:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>c,frontMatter:()=>i,toc:()=>a});var s=t(74848),r=t(28453);const i={pagination_prev:null,pagination_next:null},o="%Library.Query",a=[{value:"Parameters",id:"parameters",level:2},{value:"EXTENT",id:"extent",level:3},{value:"CONTAINID",id:"containid",level:3},{value:"SQLFUNCTION",id:"sqlfunction",level:3},{value:"ROWSPEC",id:"rowspec",level:3},{value:"SELECTMODE",id:"selectmode",level:3},{value:"Methods",id:"methods",level:2},{value:"Close",id:"close",level:3},{value:"Func",id:"func",level:3},{value:"Execute",id:"execute",level:3},{value:"Fetch",id:"fetch",level:3},{value:"SendODBC",id:"sendodbc",level:3},{value:"FetchRows",id:"fetchrows",level:3},{value:"GetInfo",id:"getinfo",level:3},{value:"GetODBCInfo",id:"getodbcinfo",level:3},{value:"Prepare",id:"prepare",level:3}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"libraryquery",children:"%Library.Query"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Class %Library.Query [ System = 2 ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"For information on this class"}),", see ",(0,s.jsx)(n.a,{href:"/csp/docbook/DocBook.UI.Page.cls?FIND=CLASSES+%25Library.Query",children:"Defining and Using Class Queries"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"%Query"})," class defines the basic interface used by class queries."]}),"\n",(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.strong,{children:"%Query"})," class as a type for a class query if you wish to implement the query using custom-written ",(0,s.jsx)(n.em,{children:"ObjectScript"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(n.h3,{id:"extent",children:"EXTENT"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter EXTENT As STRING;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"containid",children:"CONTAINID"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter CONTAINID As INTEGER = 0;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"sqlfunction",children:"SQLFUNCTION"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter SQLFUNCTION As INTEGER = 0;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"rowspec",children:"ROWSPEC"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Parameter ROWSPEC As ROWSPEC [ Flags = LIST ];\n"})}),"\n",(0,s.jsx)(n.h3,{id:"selectmode",children:"SELECTMODE"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Parameter SELECTMODE = "LOGICAL";\n'})}),"\n",(0,s.jsx)(n.p,{children:"The SELECTMODE parameter allows the query author to declare the format of the values returned by the query. It is the responsibility of the query implementation to properly format the values according to the SELECTMODE value. If SELECTMODE is RUNTIME then the query implementation has to examine the current runtime setting and react accordingly. The current runtime SELECTMODE value can be retrieved by calling $system.SQL.GetSelectMode(). The default value of SELECTMODE is LOGICAL to preserve compatibility with older implementations. REMEMBER - it is only a declaration and the implementation of the query is responsible for properly formatting the column values in a manner consistent with the SELECTMODE setting."}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"close",children:"Close"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Close(qHandle As %Binary) As %Status [ ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Close the query. qHandle is user-defined data."}),"\n",(0,s.jsx)(n.h3,{id:"func",children:"Func"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Func() As %SQL.StatementResult [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Func is a method that is used to invoke the query as a function, returning an instance of %SQL.StatementResult."}),"\n",(0,s.jsx)(n.h3,{id:"execute",children:"Execute"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Execute(ByRef qHandle As %Binary) As %Status [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Executes the query; This method is called with the query input parameters. qHandle is user-defined data used to communicate amongst the various Query methods."}),"\n",(0,s.jsx)(n.h3,{id:"fetch",children:"Fetch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Fetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Fetch the next row of data from the query."}),"\n",(0,s.jsxs)(n.p,{children:["qHandle is query-defined data and is typically updated by ",(0,s.jsx)(n.strong,{children:"Fetch"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Fetch"}),' method should set Row to be a $List of values corresponding to the columns of the query. If we are past the end of the data and no row is returned, Row should be set to null string (""). If the non-empty row being returned is the last one, AtEnd could be optionally set to 1, indicating that an additional call to ',(0,s.jsx)(n.strong,{children:"Fetch"})," may be avoided."]}),"\n",(0,s.jsx)(n.p,{children:"Row may also be subscripted. If any of the columns in the row are stream orefs then the oref type information is lost in the Row $list encoded value. To retain the oref type, place the oref into Row(0,columnNumber). %Library.ResultSet recognizes this form and will extract the column value as the subscripted value."}),"\n",(0,s.jsx)(n.h3,{id:"sendodbc",children:"SendODBC"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod SendODBC(ByRef qHandle As %Binary, ByRef array As %String, qacn As %Integer, ByRef %qrc As %Integer, ByRef piece As %Boolean, ColumnCount As %Integer) [ CodeMode = generator, GenerateAfter = (FetchODBC, Fetch), ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Fetch and send a series of rows for the ODBC/JDBC server. For internal use only."}),"\n",(0,s.jsx)(n.h3,{id:"fetchrows",children:"FetchRows"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod FetchRows(ByRef qHandle As %Binary, FetchCount As %Integer = 0, ByRef RowSet As %List, ByRef ReturnCount As %Integer, ByRef AtEnd As %Integer) As %Status [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"FetchRows"})," returns the next FetchCount rows in the query and updates handle for subsequent operations. FetchCount is the number of rows to fetch. If FetchCount is zero then up to 24k of row data is returned. ReturnCount contains the number of rows returned and AtEnd is true if there are no more rows to be fetched. This method does not preserve swizzled streams."]}),"\n",(0,s.jsx)(n.h3,{id:"getinfo",children:"GetInfo"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetInfo(ByRef colinfo As %List, ByRef parminfo As %List, ByRef idinfo As %List, ByRef qHandle As %Binary, extoption As %Integer = 0, ByRef extinfo As %List) As %Status [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Returns information about the query. It is used by the various ",(0,s.jsx)(n.strong,{children:"ResultSet"})," objects."]}),"\n",(0,s.jsx)(n.p,{children:"Returns information about columns in the query result, parameters in the query formal list, and whether or not the result contains enough information to form an ID value."}),"\n",(0,s.jsx)(n.p,{children:"This information is return in three pass-by-reference parmeters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"colinfo - contains one list element for each column declared in ROWSPEC. The form is name:exttype:caption"}),"\n",(0,s.jsx)(n.li,{children:"parminfo - contains one list element for each formal paramter of the query in the form name:exttype"}),"\n",(0,s.jsx)(n.li,{children:"idinfo - contains a list, the first element indicating the position of the ID, zero if not included and the second element is the extent of these ID value.\nqHandle -  query handle, used for dynamic queries"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"getodbcinfo",children:"GetODBCInfo"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod GetODBCInfo(ByRef colinfo As %List, ByRef parminfo As %List, ByRef qHandle As %Binary) [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"prepare",children:"Prepare"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Prepare(ByRef qHandle As %Binary, statement As %String, containid As %Integer = 0, optional As %String) As %Status [ CodeMode = expression, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Prepare the query for execution. For static queries, this method probably just returns $$$OK. For dynamic queries this method will set up the information returned by ",(0,s.jsx)(n.strong,{children:"GetInfo"}),". It is used by the various ",(0,s.jsx)(n.strong,{children:"ResultSet"})," objects."]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(96540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);