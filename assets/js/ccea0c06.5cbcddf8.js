"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[7678],{74800:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>a,default:()=>c,frontMatter:()=>s,toc:()=>o});var l=n(74848),i=n(28453);const s={pagination_prev:null,pagination_next:null},a="%ZEN.Auxiliary.condition",o=[{value:"Properties",id:"properties",level:2},{value:"colName",id:"colname",level:3},{value:"value",id:"value",level:3},{value:"predicate",id:"predicate",level:3},{value:"targetCol",id:"targetcol",level:3},{value:"cellStyle",id:"cellstyle",level:3},{value:"rowStyle",id:"rowstyle",level:3},{value:"Methods",id:"methods",level:2},{value:"Eval",id:"eval",level:3}];function r(e){const t={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"zenauxiliarycondition",children:"%ZEN.Auxiliary.condition"})}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-objectscript-class",children:"Class %ZEN.Auxiliary.condition Extends %ZEN.Component.object [ Deprecated, System = 3 ]\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Defines a style-condition for a %ZEN.Component.tablePane.",(0,l.jsx)(t.br,{}),"\nA %ZEN.Component.tablePane may define one or more conditions. Each condition is evaluated when the table is displayed and provides a way to change the style of rows or cells within the table based on the data values within a given row.",(0,l.jsx)(t.br,{}),"\nEach condition consists of:"]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"colName - The name of the column in the table that provides the value to test."}),"\n",(0,l.jsx)(t.li,{children:"value - The value to test against (a literal or a reference to another column value)"}),"\n",(0,l.jsx)(t.li,{children:"predicate - The comparison operator to use for the test."}),"\n",(0,l.jsx)(t.li,{children:"cellStyle - The CSS style to apply to the target cell if the condition is true."}),"\n",(0,l.jsx)(t.li,{children:"rowStyle - The CSS style to apply to the current row if the condition is true."}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,l.jsx)(t.h3,{id:"colname",children:"colName"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-objectscript-class",children:"Property colName As %ZEN.Datatype.string(ZENEXPRESSION = 1);\n"})}),"\n",(0,l.jsx)(t.p,{children:"Name of a column within the table that this condition applies to."}),"\n",(0,l.jsx)(t.h3,{id:"value",children:"value"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-objectscript-class",children:"Property value As %ZEN.Datatype.string(ZENEXPRESSION = 1);\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Literal value that is compared against column value",(0,l.jsx)(t.br,{}),'\nNote: if the value of value is enclosed in {}, then it refers to a column of that name within the table. For example, "{PatientName}", will resolve to the value of the ',(0,l.jsx)(t.em,{children:"PatientName"})," column within the table."]}),"\n",(0,l.jsx)(t.h3,{id:"predicate",children:"predicate"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-objectscript-class",children:'Property predicate As %ZEN.Datatype.string(VALUELIST = ",GT,EQ,LT,NEQ,GTEQ,LTEQ,EXTEQ,STARTSWITH,CONTAINS") [ InitialExpression = "EQ" ];\n'})}),"\n",(0,l.jsxs)(t.p,{children:["The comparison operator used to compare the value of the colName column with value.",(0,l.jsx)(t.br,{}),"\nThis is one of the following:"]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"GT - Greater than"}),"\n",(0,l.jsx)(t.li,{children:"EQ - Equal to"}),"\n",(0,l.jsx)(t.li,{children:"LT - Less than"}),"\n",(0,l.jsx)(t.li,{children:"NEQ - Not equal to"}),"\n",(0,l.jsx)(t.li,{children:"GTEQ - Greater than or equal to"}),"\n",(0,l.jsx)(t.li,{children:"LTEQ - Less than or equal to"}),"\n",(0,l.jsx)(t.li,{children:'EXTEQ - File extension (text after last ".") equal to'}),"\n",(0,l.jsx)(t.li,{children:"CONTAINS - Contains"}),"\n",(0,l.jsx)(t.li,{children:"STARTSWITH - Starts with"}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"targetcol",children:"targetCol"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-objectscript-class",children:"Property targetCol As %ZEN.Datatype.string;\n"})}),"\n",(0,l.jsx)(t.p,{children:"Optional. The name of the column to apply CellStyle to. If this is not provided, then the column specified by colName is used as the target."}),"\n",(0,l.jsx)(t.h3,{id:"cellstyle",children:"cellStyle"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-objectscript-class",children:"Property cellStyle As %ZEN.Datatype.style;\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Style to apply to cell if condition is true.",(0,l.jsx)(t.br,{}),'\nThis is a CSS style string: e.g., "color: red;"']}),"\n",(0,l.jsx)(t.h3,{id:"rowstyle",children:"rowStyle"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-objectscript-class",children:"Property rowStyle As %ZEN.Datatype.style;\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Style to apply to row if condition is true.",(0,l.jsx)(t.br,{}),'\nThis is a CSS style string: e.g., "color: red;"']}),"\n",(0,l.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(t.h3,{id:"eval",children:"Eval"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-objectscript-class",children:"Method Eval(ByRef pValues As %String) As %Boolean [ Internal ]\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Internal Method.",(0,l.jsx)(t.br,{}),"\nEvaluate this condition using the values in the provided row arrays."]})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(r,{...e})}):r(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var l=n(96540);const i={},s=l.createContext(i);function a(e){const t=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),l.createElement(s.Provider,{value:t},e.children)}}}]);