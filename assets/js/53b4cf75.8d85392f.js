"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[12470],{568:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>o,default:()=>d,frontMatter:()=>r,toc:()=>i});var n=t(74848),l=t(28453);const r={pagination_prev:null,pagination_next:null},o="%DeepSee.PMML.Utils",i=[{value:"Methods",id:"methods",level:2},{value:"CreateFromFile",id:"createfromfile",level:3},{value:"CreateFromStream",id:"createfromstream",level:3},{value:"CreateFromString",id:"createfromstring",level:3},{value:"%RunModel",id:"runmodel",level:3},{value:"%RunModelFromResultSet",id:"runmodelfromresultset",level:3},{value:"%RunModelFromSQL",id:"runmodelfromsql",level:3},{value:"%RunModelFromPMMLRows",id:"runmodelfrompmmlrows",level:3},{value:"%DropResults",id:"dropresults",level:3},{value:"%DropAllResults",id:"dropallresults",level:3}];function a(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",modelverification:"modelverification",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"deepseepmmlutils",children:"%DeepSee.PMML.Utils"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class %DeepSee.PMML.Utils [ System = 4 ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This class bundles a number of utility methods for running PMML models and managing their results."}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"createfromfile",children:"CreateFromFile"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateFromFile(pFile As %String, pClassName As %String, pOverwrite As %Boolean = 1, pCompile As %Boolean = 1, pVerbose As %Boolean = 1) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Creates a PMML definition class (%DeepSee.PMML.Definition) based on the PMML definition XML in the supplied pFile"}),"\n",(0,n.jsx)(s.h3,{id:"createfromstream",children:"CreateFromStream"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateFromStream(pStream As %Stream.Object, pClassName As %String, pOverwrite As %Boolean = 1, pCompile As %Boolean = 1, pVerbose As %Boolean = 1) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Creates a PMML definition class (%DeepSee.PMML.Definition) based on the PMML definition XML in the supplied pStream"}),"\n",(0,n.jsx)(s.h3,{id:"createfromstring",children:"CreateFromString"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateFromString(pString As %String, pClassName As %String, pOverwrite As %Boolean = 1, pCompile As %Boolean = 1, pVerbose As %Boolean = 1) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Creates a PMML definition class (%DeepSee.PMML.Definition) based on the PMML definition XML in the supplied pString"}),"\n",(0,n.jsx)(s.h3,{id:"runmodel",children:"%RunModel"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %RunModel(ByRef pResultsId As %Integer, pDefinitionClass As %String, pModelName As %String = "", pDataSource As %String = "", pResultsClass As %String = "%DeepSee.PMML.Utils.TempResult", pTracking As %Boolean = 0) As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Test a DeepSee or SQL-linked PMML model by running the model against all records in the Data Source pDatasource specified in the model definition, defaulting to the first datasource definition found in the model."}),"\n",(0,n.jsxs)(s.p,{children:["Use pResultsClass to define the class (subclass of %DeepSee.PMML.Utils.Result) the results of this batch run will be written to. This defaults to %DeepSee.PMML.Utils.TempResult, which stores its data in the Temp database and therefore gets purged upon restarting the instance.",(0,n.jsx)(s.br,{}),"\nResults will be stored with their TestId property set to the value of pResultsId if a nonzero, non-null value is provided, or call the GetNewTestId() method of pResultsClass to generate a new one.",(0,n.jsx)(s.br,{}),"\nIf pTracking is true, progress information will be written to ^IRIS.Temp.PMML.BgrTask($job), so this method can be run in the background."]}),"\n",(0,n.jsx)(s.h3,{id:"runmodelfromresultset",children:"%RunModelFromResultSet"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %RunModelFromResultSet(ByRef pResultsId As %Integer, pDefinitionClass As %String, pModelName As %String = "", pResultSet As %ResultSet, ByRef pFieldMap, pResultsClass As %String = "%DeepSee.PMML.Utils.TempResult", pTracking As %Boolean = 0) As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Runs a PMML model against all records returned by a user-supplied ResultSet object, looping through all rows and checking the model outcome against the actual value found in the query result. pFieldMap is expected to contain a mapping from this model's %DeepSee.PMML.Data class to the columns (by name) in the supplied result set. If no field map is specified, the resultset is expected to contain columns with names corresponding to the models data fields."}),"\n",(0,n.jsxs)(s.p,{children:["Use pResultsClass to define the class (subclass of %DeepSee.PMML.Utils.Result) the results of this batch run will be written to. This defaults to %DeepSee.PMML.Utils.TempResult, which stores its data in the Temp database and therefore gets purged upon restarting the instance.",(0,n.jsx)(s.br,{}),"\nResults will be stored with their TestId property set to the value of pResultsId if a nonzero, non-null value is provided, or call the GetNewTestId() method of pResultsClass to generate a new one.",(0,n.jsx)(s.br,{}),"\nIf pTracking is true, progress information will be written to ^IRIS.Temp.PMML.BgrTask($job), so this method can be run in the background."]}),"\n",(0,n.jsx)(s.h3,{id:"runmodelfromsql",children:"%RunModelFromSQL"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %RunModelFromSQL(ByRef pResultsId As %Integer, pDefinitionClass As %String, pModelName As %String = "", pSQL As %String, ByRef pFieldMap, ByRef pSQLParams, pResultsClass As %String = "%DeepSee.PMML.Utils.TempResult", pTracking As %Boolean = 0) As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Runs a PMML model against all records returned by a user-supplied SQL query, looping through the rows and checking the model outcome against the actual value found in the query result. pFieldMap is expected to contain a mapping from this model's %DeepSee.PMML.Data class to the columns (by name) in the supplied result set. If no field map is specified, the resultset is expected to contain columns with names corresponding to the models data fields."}),"\n",(0,n.jsxs)(s.p,{children:["Use pResultsClass to define the class (subclass of %DeepSee.PMML.Utils.Result) the results of this batch run will be written to. This defaults to %DeepSee.PMML.Utils.TempResult, which stores its data in the Temp database and therefore gets purged upon restarting the instance.",(0,n.jsx)(s.br,{}),"\nResults will be stored with their TestId property set to the value of pResultsId if a nonzero, non-null value is provided, or call the GetNewTestId() method of pResultsClass to generate a new one.",(0,n.jsx)(s.br,{}),"\nIf pTracking is true, progress information will be written to ^IRIS.Temp.PMML.BgrTask($job), so this method can be run in the background."]}),"\n",(0,n.jsx)(s.h3,{id:"runmodelfrompmmlrows",children:"%RunModelFromPMMLRows"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %RunModelFromPMMLRows(ByRef pResultsId As %Integer, pDefinitionClass As %String, pModelName As %String = "", pResultsClass As %String = "%DeepSee.PMML.Utils.TempResult", pTracking As %Boolean = 0) As %Status\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Runs a PMML model against the ",(0,n.jsx)(s.modelverification,{children:" records included in the PMML model definition."})]}),"\n",(0,n.jsxs)(s.p,{children:["Use pResultsClass to define the class (subclass of %DeepSee.PMML.Utils.Result) the results of this batch run will be written to. This defaults to %DeepSee.PMML.Utils.TempResult, which stores its data in the Temp database and therefore gets purged upon restarting the instance.",(0,n.jsx)(s.br,{}),"\nResults will be stored with their TestId property set to the value of pResultsId if a nonzero, non-null value is provided, or call the GetNewTestId() method of pResultsClass to generate a new one.",(0,n.jsx)(s.br,{}),"\nIf pTracking is true, progress information will be written to ^IRIS.Temp.PMML.BgrTask($job), so this method can be run in the background."]}),"\n",(0,n.jsx)(s.h3,{id:"dropresults",children:"%DropResults"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %DropResults(pTestId As %Integer) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Drops all results for a given test ID from the %DeepSee.PMML.Utils.TempResult table."}),"\n",(0,n.jsx)(s.h3,{id:"dropallresults",children:"%DropAllResults"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %DropAllResults() As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Drops all results for all test IDs from the %DeepSee.PMML.Utils.TempResult table."})]})}function d(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>i});var n=t(96540);const l={},r=n.createContext(l);function o(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);