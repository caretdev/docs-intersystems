"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[43347],{13613:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>r,default:()=>c,frontMatter:()=>i,toc:()=>l});var a=t(74848),n=t(28453);const i={pagination_prev:null,pagination_next:null},r="%SYSTEM.OBJ",l=[{value:"Methods",id:"methods",level:2},{value:"New",id:"new",level:3},{value:"Open",id:"open",level:3},{value:"OpenId",id:"openid",level:3},{value:"Dump",id:"dump",level:3},{value:"DisplayError",id:"displayerror",level:3},{value:"Load",id:"load",level:3},{value:"LoadStream",id:"loadstream",level:3},{value:"LoadDir",id:"loaddir",level:3},{value:"ImportDir",id:"importdir",level:3},{value:"Compile",id:"compile",level:3},{value:"CompileList",id:"compilelist",level:3},{value:"CompileAllNamespaces",id:"compileallnamespaces",level:3},{value:"Parameters",id:"parameters",level:4},{value:"CompileAll",id:"compileall",level:3},{value:"CompilePackage",id:"compilepackage",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"CompileProject",id:"compileproject",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Delete",id:"delete",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"DeletePackage",id:"deletepackage",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"DeleteAll",id:"deleteall",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"DeleteProject",id:"deleteproject",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Export",id:"export",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"ExportToStream",id:"exporttostream",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"ExportPattern",id:"exportpattern",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"ExportPatternToStream",id:"exportpatterntostream",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"ExportJava",id:"exportjava",level:3},{value:"ExportJavaPackage",id:"exportjavapackage",level:3},{value:"ExportCPP",id:"exportcpp",level:3},{value:"ExportDynCPP",id:"exportdyncpp",level:3},{value:"ExportODL",id:"exportodl",level:3},{value:"ExportUDL",id:"exportudl",level:3},{value:"ExportPackage",id:"exportpackage",level:3},{value:"ExportPackageToStream",id:"exportpackagetostream",level:3},{value:"ExportAllClasses",id:"exportallclasses",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"ExportAllClassesToStream",id:"exportallclassestostream",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"ExportAllClassesIndividual",id:"exportallclassesindividual",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"GetPackageList",id:"getpackagelist",level:3},{value:"GetClassList",id:"getclasslist",level:3},{value:"MakeClassDeployed",id:"makeclassdeployed",level:3},{value:"UnCompile",id:"uncompile",level:3},{value:"ShowClasses",id:"showclasses",level:3},{value:"ShowObjects",id:"showobjects",level:3},{value:"CloseObjects",id:"closeobjects",level:3},{value:"SaveObjects",id:"saveobjects",level:3},{value:"Version",id:"version",level:3},{value:"ShowFlags",id:"showflags",level:3},{value:"ShowQualifiers",id:"showqualifiers",level:3},{value:"ShowReferences",id:"showreferences",level:3},{value:"ShowMacros",id:"showmacros",level:3},{value:"SetFlags",id:"setflags",level:3},{value:"SetQualifiers",id:"setqualifiers",level:3},{value:"GetQualifiers",id:"getqualifiers",level:3},{value:"ObjectListExecute",id:"objectlistexecute",level:3},{value:"ObjectListClose",id:"objectlistclose",level:3},{value:"ObjectListFetch",id:"objectlistfetch",level:3},{value:"Upgrade",id:"upgrade",level:3},{value:"UpgradeAll",id:"upgradeall",level:3},{value:"LoadLanguage",id:"loadlanguage",level:3},{value:"IsValidClassname",id:"isvalidclassname",level:3},{value:"IsUpToDate",id:"isuptodate",level:3},{value:"GetDependencies",id:"getdependencies",level:3},{value:"SetTransactionMode",id:"settransactionmode",level:3},{value:"GetTransactionMode",id:"gettransactionmode",level:3},{value:"SetConcurrencyMode",id:"setconcurrencymode",level:3},{value:"GetConcurrencyMode",id:"getconcurrencymode",level:3},{value:"RebuildExtentIndex",id:"rebuildextentindex",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"RebuildExtentIndexOne",id:"rebuildextentindexone",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"RedirectBindSrvUserOutput",id:"redirectbindsrvuseroutput",level:3},{value:"CompileInfoClass",id:"compileinfoclass",level:3},{value:"CompileInfoExecute",id:"compileinfoexecute",level:3},{value:"CompileInfoClose",id:"compileinfoclose",level:3},{value:"CompileInfoFetch",id:"compileinfofetch",level:3},{value:"CompileInfoFetchRows",id:"compileinfofetchrows",level:3},{value:"UpdateConfigParam",id:"updateconfigparam",level:3},{value:"ValidateIndices",id:"validateindices",level:3},{value:"GenerateEmbedded",id:"generateembedded",level:3},{value:"SetMPPOption",id:"setmppoption",level:3},{value:"GetMPPOption",id:"getmppoption",level:3}];function o(e){const s={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"systemobj",children:"%SYSTEM.OBJ"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"Class %SYSTEM.OBJ Extends Help [ Abstract, System = 4 ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"The %SYSTEM.OBJ class provides an interface for managing class definitions."}),"\n",(0,a.jsxs)(s.p,{children:["You can use it via the special ",(0,a.jsx)(s.strong,{children:"$system"})," object: ",(0,a.jsx)(s.code,{children:'Do $system.OBJ.Load("MyFile.xml","ck")'})]}),"\n",(0,a.jsxs)(s.p,{children:["Many methods in this class use the qspec argument, which is a list of flags or qualifiers. See ",(0,a.jsx)(s.a,{href:"/csp/docbook/DocBook.UI.Page.cls?FIND=ObjectScript+qspec",children:"System Flags and Qualifiers"}),"."]}),"\n",(0,a.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(s.h3,{id:"new",children:"New"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod New(ClassName As %String = "") As %ObjectHandle [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Create a new object instance."}),"\n",(0,a.jsx)(s.p,{children:"Create a new object instance of type ClassName and return a reference (OREF) to it."}),"\n",(0,a.jsx)(s.p,{children:"Using this method, you can dynamically create objects, that is you can determine what type of object to create at run-time."}),"\n",(0,a.jsxs)(s.p,{children:["For example: ",(0,a.jsx)(s.code,{children:'Set obj = $System.OBJ.New("Person")'})]}),"\n",(0,a.jsx)(s.h3,{id:"open",children:"Open"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Open(ClassName As %String = "", oid As %String = "") As %ObjectHandle [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Open a persistent object instance."}),"\n",(0,a.jsx)(s.p,{children:"Load a persistent object instance of type ClassName and with OID value oid from disk and return a reference (OREF) to it."}),"\n",(0,a.jsxs)(s.p,{children:["For example: ",(0,a.jsx)(s.code,{children:'Set person = $System.OBJ.Open("Person",oid)'})]}),"\n",(0,a.jsx)(s.h3,{id:"openid",children:"OpenId"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod OpenId(ClassName As %String = "", id As %String = "") As %ObjectHandle [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Open a persistent object instance."}),"\n",(0,a.jsx)(s.p,{children:"Load a persistent object instance of type ClassName and with ID value id from disk and return a reference (OREF) to it."}),"\n",(0,a.jsxs)(s.p,{children:["For example: ",(0,a.jsx)(s.code,{children:'Set person = $System.OBJ.OpenId("Person",22)'})]}),"\n",(0,a.jsx)(s.h3,{id:"dump",children:"Dump"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Dump(oref As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Dump an object to the console."}),"\n",(0,a.jsxs)(s.p,{children:["Write the in-memory state of a object referred to by oref to the console (the current device). ",(0,a.jsx)(s.code,{children:"Set person = ##class(Person).%OpenId(22) Do $system.OBJ.Dump(person)"})]}),"\n",(0,a.jsx)(s.h3,{id:"displayerror",children:"DisplayError"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DisplayError(err As %Status = {$get(%objlasterror)}) As %Status [ CodeMode = expression ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Decode and display an object error message to the console. If err is omitted, display the last generated object error."}),"\n",(0,a.jsx)(s.h3,{id:"load",children:"Load"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Load(file As %String = "", qspec As %String = "", ByRef errorlog As %String, ByRef loadedlist As %String, listonly As %Boolean, selecteditems As %String, displayname As %String, charset As %String = "", ByRef description As %String) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Load a file from disk."}),"\n",(0,a.jsx)(s.p,{children:"Load, and optionally compile (if 'c' flag is present), class definitions, CSP pages, routines, or globals from the file file. file may be a list of files to load separated with '*' symbols."}),"\n",(0,a.jsx)(s.p,{children:"You can import files exported in XML format, %RO format, CDL format, UDL format, %GOF, and CSR/CSP files."}),"\n",(0,a.jsx)(s.p,{children:"A comma-separated list of the items it loaded is returned in loadedlist. If the list is too long to fit in the variable, it is terminated with '...'. Items loaded are always returned as subscripts of the multidimensional loadedlist array."}),"\n",(0,a.jsx)(s.p,{children:"If you pass listonly as true, the method does not import anything, but instead just lists the items that exist in file."}),"\n",(0,a.jsx)(s.p,{children:"If selecteditems is defined, then this must contain either a comma-separated list of items to import or a multidimensional array. The method imports only items that are in this list from the file provided, so this provides a way to limit which items get imported."}),"\n",(0,a.jsx)(s.p,{children:"qspec is a list of flags or qualifiers which can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."}),"\n",(0,a.jsx)(s.p,{children:"When loading a %RO file, the description variable is filled in with the description from the %RO file, if there is one present."}),"\n",(0,a.jsx)(s.p,{children:"errorlog is a multidimensional array of the %Status return values from this call."}),"\n",(0,a.jsx)(s.p,{children:"The displayname is normally not provided. If present, it changes the 'load file XYZ' name from the filename to the displayname. This is useful when loading a stream where the stream filename is not the name of the file the user knows from a client system and we want to present a meaningful name. If the filename ends in .gzip or .gz, the method uses ungzip to decompress this file before loading it."}),"\n",(0,a.jsx)(s.h3,{id:"loadstream",children:"LoadStream"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod LoadStream(stream As %AbstractStream, qspec As %String = "", ByRef errorlog As %String, ByRef loadedlist As %String, listonly As %Boolean, selecteditems As %String, displayname As %String, charset As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Load a stream."}),"\n",(0,a.jsxs)(s.p,{children:["Load and, optionally compile (if 'c' flag is present), class definitions, CSP pages, routines or globals from the stream stream. Returns, by reference, a multidimensional array of the items it loaded in loadedlist. If you pass listonly as true, then it does not import anything but instead just lists the items that exist in the stream that you supply.",(0,a.jsx)(s.br,{}),"\nIf selecteditems is defined, then this must contain a comma-separated list of items to import (or a multidimensional array). It imports only items that are in this list from the stream provided, so this provides a way to limit which items get imported."]}),"\n",(0,a.jsx)(s.p,{children:"qspec is a list of flags or qualifiers which can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."}),"\n",(0,a.jsx)(s.h3,{id:"loaddir",children:"LoadDir"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod LoadDir(dir As %String = "", qspec As %String = "", ByRef errorlog As %String, recurse As %Boolean, ByRef loadedlist As %String) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Load all class definitions in a directory."}),"\n",(0,a.jsx)(s.p,{children:"Load and optionally compile (if 'c' flag is present) all class definitions within directory dir, this includes all .XML files. If the recurse is true, then it includes subdirectories. Returns a comma-separated list of the items it loaded in loadedlist and the same data also as loadedlist(name)=\"\" in case the comma list is more than 32k. Note that this method compiles only *classes* found in these XML files and no other types. If you want to be able to compile anything, instead use the ImportDir."}),"\n",(0,a.jsx)(s.p,{children:"qspec is a list of flags or qualifiers which can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."}),"\n",(0,a.jsx)(s.h3,{id:"importdir",children:"ImportDir"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ImportDir(dir As %String = "", wildcards As %String, qspec As %String = "", ByRef errorlog As %String, recurse As %Boolean = 0, ByRef imported As %String, listonly As %Boolean, ByRef selectedlist As %String)\n'})}),"\n",(0,a.jsx)(s.p,{children:"Import and optionally compile all items in a directory."}),"\n",(0,a.jsxs)(s.p,{children:["This imports all files found in a directory using the Load method so it should be able to detect most common formats. If you pass it the compile flag ('c'), after loading it also compiles all these items. The other flags are the same as found in Load except for the dir which is the directory to load and the recurse which determines if this looks into subdirectories or not.",(0,a.jsx)(s.br,{}),"\nYou can limit the items it imports by specifying a wildcards value. For example '*.xml' imports only files that end in XML."]}),"\n",(0,a.jsx)(s.p,{children:"qspec is a list of flags or qualifiers which can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."}),"\n",(0,a.jsx)(s.h3,{id:"compile",children:"Compile"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Compile(ByRef classes As %String = "", qspec As %String = "", ByRef errorlog As %String, recurse As %Boolean = 0) As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Compile a class."}),"\n",(0,a.jsx)(s.p,{children:"Compiles the class or classes specified by the classes argument, which can be a single class name, a comma-separated list of class names, or a multidimensional array of class names. You can also use ? or * wildcards. If you wish to exclude items, pass ' before the item name; this syntax also supports wildcards, e.g. \"User.*,'User.T*\"."}),"\n",(0,a.jsx)(s.p,{children:"If recurse is true, then do not output the initial 'compiling' message or the compile report as this is being called inside another compile loop."}),"\n",(0,a.jsx)(s.p,{children:"qspec is a list of flags or qualifiers, which can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."}),"\n",(0,a.jsx)(s.h3,{id:"compilelist",children:"CompileList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CompileList(ByRef list As %String = "", qspec As %String = "", ByRef errorlog As %String, ByRef updatedlist As %String) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:'Compile a list of items specified in \'list\' and separated by commas, or a multidimensional array ("item.MAC")="". You can also use ? or * wildcards. If you wish to exclude items, pass \' before the item name; this syntax also supports wildcards, e.g. "User.*.cls,\'User.T*.cls".'}),"\n",(0,a.jsx)(s.p,{children:"Each item on the list is suffixed by the type of item it is, so to compile a class and a routine, you could specify 'class.cls,routine.mac'"}),"\n",(0,a.jsx)(s.p,{children:"The order of compilation is INT, CLS, MAC, CSR, CSP."}),"\n",(0,a.jsx)(s.p,{children:"qspec is a list of flags or qualifiers which can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'. Note that while /mapped=0 qualifier applies to the pattern passed in by only searching the default routine database, however any compile is done in the current namespace. So it is possible a routine/class found with /mapped=0 may not be visible in the current namespace or may be a different version if there are complicated package mappings."}),"\n",(0,a.jsx)(s.h3,{id:"compileallnamespaces",children:"CompileAllNamespaces"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CompileAllNamespaces(qspec As %String = "", ByRef errorlog As %String) As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Invoke $system.OBJ.CompileAll() for all the namespaces."}),"\n",(0,a.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Name"}),(0,a.jsx)(s.th,{children:"Description"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"qspec"}),(0,a.jsx)(s.td,{children:"qspec is a list of flags and qualifiers that can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"errorlog"}),(0,a.jsx)(s.td,{children:"errorlog is a multidimensional array of the %Status error values encountered during the execution of this method. Each status value is in the format returned by $system.Status.DecomposeStatus()."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"The return value is a %Status value indicating success or failure."}),(0,a.jsx)(s.td,{})]})]})]}),"\n",(0,a.jsx)(s.h3,{id:"compileall",children:"CompileAll"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CompileAll(qspec As %String = "", ByRef errorlog As %String) As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Compile all classes within this namespace."}),"\n",(0,a.jsx)(s.p,{children:"By default, the method does not compile classes mapped from another database unless the qualifier '/mapped=1' is provided."}),"\n",(0,a.jsx)(s.p,{children:"qspec is a list of flags or qualifiers which can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."}),"\n",(0,a.jsx)(s.h3,{id:"compilepackage",children:"CompilePackage"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CompilePackage(package As %String = "", qspec As %String = "", ByRef errorlog As %String) As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Compile all classes within the specified package."}),"\n",(0,a.jsx)(s.h4,{id:"parameters-1",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Name"}),(0,a.jsx)(s.th,{children:"Description"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"package"}),(0,a.jsx)(s.td,{children:"You can pass one or more comma-separated packages in package argument."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"qspec"}),(0,a.jsx)(s.td,{children:"qspec is a list of flags and qualifiers that can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"errorlog"}),(0,a.jsx)(s.td,{children:"errorlog is a multidimensional array of the %Status error values encountered during the execution of this method. Each status value is in the format returned by $system.Status.DecomposeStatus."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"The return value is a %Status value indicating success or failure."}),(0,a.jsx)(s.td,{})]})]})]}),"\n",(0,a.jsx)(s.h3,{id:"compileproject",children:"CompileProject"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CompileProject(project As %String = "", qspec As %String = "", ByRef errorlog As %String) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Compile all entries in this project."}),"\n",(0,a.jsx)(s.h4,{id:"parameters-2",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Name"}),(0,a.jsx)(s.th,{children:"Description"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"project"}),(0,a.jsx)(s.td,{children:"The name of the package to be compiled."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"qspec"}),(0,a.jsx)(s.td,{children:"qspec is a list of flags and qualifiers that can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"errorlog"}),(0,a.jsx)(s.td,{children:"errorlog is a multidimensional array of the %Status error values encountered during the execution of this method. Each status value is in the format returned by $system.Status.DecomposeStatus()."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"The return value is a %Status value indicating success or failure."}),(0,a.jsx)(s.td,{})]})]})]}),"\n",(0,a.jsx)(s.h3,{id:"delete",children:"Delete"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Delete(ByRef classes As %String = "", qspec As %String = "", ByRef errorlog As %String) As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Delete a class."}),"\n",(0,a.jsx)(s.p,{children:"Delete the definition of the given class or classes, specified by the classes argument from this namespace. This argument can be a single class name, a comma-separated list of class names, or a multidimensional array of class names. You can also use ? or * wildcards. If you wish to exclude items, pass ' before the item name; this syntax also supports wildcards, e.g. \"User.*,'User.T*\"."}),"\n",(0,a.jsx)(s.p,{children:"If the class to delete is persistent, include the 'e' flag or '/deleteextent' qualifier to delete the extent data and extent metadata. Refer to %ExtentMgr.Util for more information on extent metadata."}),"\n",(0,a.jsx)(s.h4,{id:"parameters-3",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Name"}),(0,a.jsx)(s.th,{children:"Description"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"classes"}),(0,a.jsx)(s.td,{children:"The class, a comma-separated list of classes, or a multidimensional array of class names. Wildcards may be specified."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"qspec"}),(0,a.jsx)(s.td,{children:"qspec is a list of flags and qualifiers that can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"errorlog"}),(0,a.jsx)(s.td,{children:"errorlog is a multidimensional array of the %Status error values encountered during the execution of this method. Each status value is in the format returned by $system.Status.DecomposeStatus."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"The return value is a %Status value indicating success or failure."}),(0,a.jsx)(s.td,{})]})]})]}),"\n",(0,a.jsx)(s.h3,{id:"deletepackage",children:"DeletePackage"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DeletePackage(package As %String = "", qspec As %String = "") As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Delete all the classes within the specified package. Note that this ignores the '/mapped' qualifier as if you know the exact package name it is assumed you wish to delete it even if the package is mapped from another database."}),"\n",(0,a.jsx)(s.h4,{id:"parameters-4",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Name"}),(0,a.jsx)(s.th,{children:"Description"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"package"}),(0,a.jsx)(s.td,{children:"You can pass one or more comma-separated packages in package argument. If package is '*' then all classes are deleted."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"qspec"}),(0,a.jsx)(s.td,{children:"qspec is a list of flags and qualifiers that can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"The return value is a %Status value indicating success or failure."}),(0,a.jsx)(s.td,{})]})]})]}),"\n",(0,a.jsx)(s.h3,{id:"deleteall",children:"DeleteAll"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DeleteAll(qspec As %String = "") As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Delete all the classes in this namespace."}),"\n",(0,a.jsx)(s.h4,{id:"parameters-5",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Name"}),(0,a.jsx)(s.th,{children:"Description"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"qspec"}),(0,a.jsx)(s.td,{children:"qspec is a list of flags and qualifiers that can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"The return value is a %Status value indicating success or failure."}),(0,a.jsx)(s.td,{})]})]})]}),"\n",(0,a.jsx)(s.h3,{id:"deleteproject",children:"DeleteProject"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DeleteProject(project As %String = "", qspec As %String = "") As %Status [ CodeMode = expression, ProcedureBlock = 1 ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Delete the named project from this namespace."}),"\n",(0,a.jsx)(s.h4,{id:"parameters-6",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Name"}),(0,a.jsx)(s.th,{children:"Description"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"project"}),(0,a.jsx)(s.td,{children:"The name of the project to delete."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"qspec"}),(0,a.jsx)(s.td,{children:"qspec is a list of flags and qualifiers that can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"The return value is a %Status value indicating success or failure."}),(0,a.jsx)(s.td,{})]})]})]}),"\n",(0,a.jsx)(s.h3,{id:"export",children:"Export"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Export(ByRef items As %String = "", ByRef filename As %String = "", qspec As %String = "", ByRef errorlog As %String, Charset As %String = "") As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Export items as an XML file."}),"\n",(0,a.jsx)(s.h4,{id:"parameters-7",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Name"}),(0,a.jsx)(s.th,{children:"Description"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"items"}),(0,a.jsx)(s.td,{children:'The items to export.  Each of the items must have a type determined by an extension selected from the following list of basic types, additional types are supported under the abstract routine interface, so this list is not exhaustive. CLS - Classes CSP - Server Pages CSR - Rule files MAC - Macro routines INT - Non-macro routines BAS - Basic routines INC - Include files GBL - Globals PRJ - Projects OBJ - Compiled object code PKG - Package definitions  If exporting multiple items, separate them with commas or pass the items("item")="" as a multidimensional array. For example, you can define the items argument as a comma-separated list as follows: set items="PackageOne.ClassA.cls,PackageTwo.ClassB.cls,PackageThree.ClassC.cls" Then you could invoke the Export method as follows: do $system.OBJ.Export(items,myfilename) Or you could define the items argument as a multidimensional array as follows:  \t\t\t\tset items("PackageOne.ClassA.cls")="" \t\t\t\tset items("PackageTwo.ClassB.cls")="" \t\t\t\tset items("PackageThree.ClassC.cls")="" \t\t\t\t In this case, you must pass the items argument by reference as follows: do $system.OBJ.Export(.items,myfilename) You can also use ? or * wildcards. If you wish to exclude items, pass \' before the item name; this syntax also supports wildcard, e.g. "User.*.cls,\'User.T*.cls".'})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"filename"}),(0,a.jsx)(s.td,{children:"If the output filename is empty, matching items are exported to the current device."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"qspec"}),(0,a.jsx)(s.td,{children:"qspec is a list of flags and qualifiers that can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'.  If you pass qualifier '/recursive=1', the method also exports any related, e.g. include files included by a class or a superclass, the idea being that this will be a compilable set of items. If the filename ends in .gz or .gzip, the method automatically compresses the file with gzip."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"errorlog"}),(0,a.jsx)(s.td,{children:"errorlog is a multidimensional array of the %Status error values encountered during the execution of this method. Each status value is in the format returned by $system.Status.DecomposeStatus."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"Charset"}),(0,a.jsx)(s.td,{children:"The character set to use for this export. If this argument is not specified, the method uses 'utf-8'."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"The return value is a %Status value indicating success or failure."}),(0,a.jsx)(s.td,{})]})]})]}),"\n",(0,a.jsx)(s.h3,{id:"exporttostream",children:"ExportToStream"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportToStream(items As %String = "", ByRef stream As %Stream.Object = "", qspec As %String = "", ByRef errorlog As %String, Charset As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Export items in XML format to a stream"}),"\n",(0,a.jsx)(s.h4,{id:"parameters-8",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Name"}),(0,a.jsx)(s.th,{children:"Description"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"items"}),(0,a.jsx)(s.td,{children:'The items to export.  Each of the items must have a type determined by an extension selected from the following list of basic types, additional types are supported under the abstract routine interface so this list is not exhaustive. CLS - Classes CSP - Cache Server Pages CSR - Cache Rule files MAC - Macro routines INT - Non-macro routines BAS - Basic routines INC - Include files GBL - Globals PRJ - Studio projects OBJ - Compiled object code PKG - Package definitions  If exporting multiple items, separate them with commas, pass the items("item")="" as a multidimensional array. You can also use ? or * wildcards. If you wish to exclude items, pass \' before the item name; this syntax also supports wildcard, e.g. "User.*.cls,\'User.T*.cls".'})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"stream"}),(0,a.jsx)(s.td,{children:"The stream in which to place exported items."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"qspec"}),(0,a.jsx)(s.td,{children:"qspec is a list of flags and qualifiers that can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'.  If you pass qualifier '/recursive=1', the method also exports any related, e.g. include files included by a class or a superclass, the idea being that this will be a compilable set of items. If the filename ends in .gz or .gzip, the method automatically compresses the file with gzip."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"errorlog"}),(0,a.jsx)(s.td,{children:"errorlog is a multidimensional array of the %Status error values encountered during the execution of this method. Each status value is in the format returned by $system.Status.DecomposeStatus."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"Charset"}),(0,a.jsx)(s.td,{children:"The character set to use for this export. Note that if you pass in a Charset and also pass in a character stream, the method does not use the Charset argument unless the stream is a file character stream. The reason for this is a character stream deals with characters so Charset is only about binary representations of character data. In this specific case of a file character stream, the method sets the TranslateTable property of the file stream to the Charset argument."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"The return value is a %Status value indicating success or failure."}),(0,a.jsx)(s.td,{})]})]})]}),"\n",(0,a.jsx)(s.h3,{id:"exportpattern",children:"ExportPattern"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportPattern(pattern As %String = "", ByRef filename As %String = "", qspec As %String = "", ByRef errorlog As %String, Charset As %String = "") As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Export all items matching a pattern to an XML file"}),"\n",(0,a.jsx)(s.p,{children:"If you pass a pattern of '*.cls', the method exports all classes in this namespace. If you pass a pattern of 'a*.mac', the method exports all MAC routines that start with the letter 'a'. If the filename ends in .gz or .gzip, the method automatically compresses the file with gzip."}),"\n",(0,a.jsx)(s.h4,{id:"parameters-9",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Name"}),(0,a.jsx)(s.th,{children:"Description"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"pattern"}),(0,a.jsx)(s.td,{children:"The pattern used to construct a list of items to be exported."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"filename"}),(0,a.jsx)(s.td,{children:"If the output filename is empty, matching items are exported to the current device."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"qspec"}),(0,a.jsx)(s.td,{children:"qspec is a list of flags and qualifiers that can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'.  If you pass qualifier '/recursive=1', the method also exports any related, e.g. include files included by a class or a superclass, the idea being that this will be a compilable set of items. If the filename ends in .gz or .gzip, the method automatically compresses the file with gzip."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"errorlog"}),(0,a.jsx)(s.td,{children:"errorlog is a multidimensional array of the %Status error values encountered during the execution of this method. Each status value is in the format returned by $system.Status.DecomposeStatus."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"Charset"}),(0,a.jsx)(s.td,{children:"The character set to use for this export. If this argument is not specified, the method uses 'utf-8'."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"The return value is a %Status value indicating success or failure."}),(0,a.jsx)(s.td,{})]})]})]}),"\n",(0,a.jsx)(s.h3,{id:"exportpatterntostream",children:"ExportPatternToStream"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportPatternToStream(pattern As %String = "", ByRef stream As %Stream.Object = "", qspec As %String = "", ByRef errorlog As %String, Charset As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Export all items matching a pattern in XML format to a stream"}),"\n",(0,a.jsx)(s.p,{children:"If you pass a pattern of '*.cls', the method exports all classes in this namespace. If you pass a pattern of 'a*.mac', the method exports all MAC routines that start with the letter 'a'."}),"\n",(0,a.jsx)(s.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,a.jsx)(s.p,{children:"Name"}),"\n",(0,a.jsx)(s.p,{children:"Description"}),"\n",(0,a.jsx)(s.p,{children:"pattern"}),"\n",(0,a.jsx)(s.p,{children:"The pattern used to construct a list of items to be exported."}),"\n",(0,a.jsx)(s.p,{children:"stream"}),"\n",(0,a.jsx)(s.p,{children:'If stream is passed in then the data is appended to this stream. If it is "" when called, the method creates a stream and returns this.'}),"\n",(0,a.jsx)(s.p,{children:"qspec"}),"\n",(0,a.jsx)(s.p,{children:"qspec is a list of flags and qualifiers that can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."}),"\n",(0,a.jsx)(s.p,{children:"If you pass qualifier '/recursive=1', the method also exports any related, e.g. include files included by a class or a superclass, the idea being that this will be a compilable set of items. If the filename ends in .gz or .gzip, the method automatically compresses the file with gzip."}),"\n",(0,a.jsx)(s.p,{children:"errorlog"}),"\n",(0,a.jsx)(s.p,{children:"errorlog is a multidimensional array of the %Status error values encountered during the execution of this method. Each status value is in the format returned by $system.Status.DecomposeStatus."}),"\n",(0,a.jsx)(s.p,{children:"Charset"}),"\n",(0,a.jsx)(s.p,{children:"The character set to use for this export. If this argument is not specified, the method uses 'utf-8'."}),"\n",(0,a.jsx)(s.p,{children:"The return value is a %Status value indicating success or failure."}),"\n",(0,a.jsx)(s.h3,{id:"exportjava",children:"ExportJava"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportJava(classname As %String = "", dirname As %String = "", qspec As %String = "", ByRef errorlog As %String, ByRef paths = "", ByRef Seen) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Export a class to a Java file."}),"\n",(0,a.jsx)(s.p,{children:"Export class classname to a Java file in directory dirname."}),"\n",(0,a.jsx)(s.h3,{id:"exportjavapackage",children:"ExportJavaPackage"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportJavaPackage(Package As %String = "", dirname As %String = "", qspec As %String = "", ByRef errorlog As %String, ByRef paths = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Export classes in this package to Java."}),"\n",(0,a.jsx)(s.p,{children:'Search for classes in the package and export them. The search for classes respects the qspec passed. If the package is "*", the method searches for all classes in this namespace.'}),"\n",(0,a.jsx)(s.p,{children:"Export class package to a Java file in directory dirname."}),"\n",(0,a.jsx)(s.h3,{id:"exportcpp",children:"ExportCPP"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportCPP(classname As %String = "", dirname As %String = "", qspec As %String = "", ByRef errorlog As %String) As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Export a class to C++ files."}),"\n",(0,a.jsx)(s.p,{children:"Export class classname to C++ files in directory dirname."}),"\n",(0,a.jsx)(s.h3,{id:"exportdyncpp",children:"ExportDynCPP"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportDynCPP(classname As %String = "", dirname As %String = "", proplist As %String = "", methodlist As %String = "", qspec As %String, ByRef errorlog As %String) As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.h3,{id:"exportodl",children:"ExportODL"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportODL(classname As %String = "", filename As %String = "", qspec As %String = "", ByRef errorlog As %String) As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Export a class to ODL file."}),"\n",(0,a.jsx)(s.p,{children:"Export class classname to ODL file with file name filename."}),"\n",(0,a.jsx)(s.h3,{id:"exportudl",children:"ExportUDL"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportUDL(itemname As %String = "", filename As %String = "", qspec As %String = "", ByRef errorlog As %String, Charset As %String = "") As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Export a class or routine in UDL format."}),"\n",(0,a.jsx)(s.p,{children:"Export document itemname to file filename in UDL format."}),"\n",(0,a.jsx)(s.h3,{id:"exportpackage",children:"ExportPackage"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportPackage(package As %String = "", ByRef filename As %String = "", qspec As %String = "", ByRef errorlog As %String, Charset As %String = "") As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Export a set of classes in a package as an XML file."}),"\n",(0,a.jsx)(s.p,{children:"Export package package to an XML file with name filename."}),"\n",(0,a.jsx)(s.h3,{id:"exportpackagetostream",children:"ExportPackageToStream"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportPackageToStream(package As %String = "", ByRef stream As %Stream.Object = "", qspec As %String = "", ByRef errorlog As %String, Charset As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Export a set of classes in a package in XML format to a stream."}),"\n",(0,a.jsx)(s.p,{children:'Export package package to an XML file with name filename. If stream is passed in, then the data is appended to this stream. If it is "" when called, the method creates a stream and returns this.'}),"\n",(0,a.jsx)(s.h3,{id:"exportallclasses",children:"ExportAllClasses"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportAllClasses(ByRef filename As %String = "", qspec As %String = "", ByRef errorlog As %String, Charset As %String = "") As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Export all the classes in this namespace as one large XML file."}),"\n",(0,a.jsx)(s.p,{children:"This method loops through all the classes, exporting them to the file filename. It restricts which classes are exported based on the qspec parameter."}),"\n",(0,a.jsx)(s.h4,{id:"parameters-11",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Name"}),(0,a.jsx)(s.th,{children:"Description"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"filename"}),(0,a.jsx)(s.td,{children:"The file to which data is exported."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"qspec"}),(0,a.jsx)(s.td,{children:"qspec is a list of flags and qualifiers that can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'.  If you pass qualifier '/recursive=1', the method also exports any related, e.g. include files included by a class or a superclass, the idea being that this will be a compilable set of items. If the filename ends in .gz or .gzip, the method automatically compresses the file with gzip."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"errorlog"}),(0,a.jsx)(s.td,{children:"errorlog is a multidimensional array of the %Status error values encountered during the execution of this method. Each status value is in the format returned by $system.Status.DecomposeStatus."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"Charset"}),(0,a.jsx)(s.td,{children:"The character set to use for this export. If this argument is not specified, the method uses 'utf-8'."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"The return value is a %Status value indicating success or failure."}),(0,a.jsx)(s.td,{})]})]})]}),"\n",(0,a.jsx)(s.h3,{id:"exportallclassestostream",children:"ExportAllClassesToStream"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportAllClassesToStream(ByRef stream As %Stream.Object = "", qspec As %String = "", ByRef errorlog As %String, Charset As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Export all the classes in this namespace to a stream."}),"\n",(0,a.jsx)(s.p,{children:"This method loops through all the classes, exporting them to a stream. It restricts the classes that are exported based on the qspec parameter."}),"\n",(0,a.jsx)(s.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,a.jsx)(s.p,{children:"Name"}),"\n",(0,a.jsx)(s.p,{children:"Description"}),"\n",(0,a.jsx)(s.p,{children:"stream"}),"\n",(0,a.jsx)(s.p,{children:"If stream is passed in, then the data is appended to this stream. If it is null when called, the method creates a stream and returns this."}),"\n",(0,a.jsx)(s.p,{children:"qspec"}),"\n",(0,a.jsxs)(s.p,{children:["qspec is a list of flags and qualifiers that can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'. See ",(0,a.jsx)(s.a,{href:"/csp/docbook/DocBook.UI.Page.cls?FIND=ObjectScript+qspec",children:"System Flags and Qualifiers"}),"."]}),"\n",(0,a.jsx)(s.p,{children:"If you pass qualifier '/recursive=1', the method also exports any related, e.g. include files included by a class or a superclass, the idea being that this will be a compilable set of items. If the filename ends in .gz or .gzip, the method automatically compresses the file with gzip."}),"\n",(0,a.jsx)(s.p,{children:"errorlog"}),"\n",(0,a.jsx)(s.p,{children:"errorlog is a multidimensional array of the %Status error values encountered during the execution of this method. Each status value is in the format returned by $system.Status.DecomposeStatus."}),"\n",(0,a.jsx)(s.p,{children:"Charset"}),"\n",(0,a.jsx)(s.p,{children:"The character set to use for this export. If this argument is not specified, the method uses 'utf-8'."}),"\n",(0,a.jsx)(s.p,{children:"The return value is a %Status value indicating success or failure."}),"\n",(0,a.jsx)(s.h3,{id:"exportallclassesindividual",children:"ExportAllClassesIndividual"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportAllClassesIndividual(dirname As %String = "", qspec As %String = "", ByRef errorlog As %String, Charset As %String = "", Package As %String = "*", SubDir As %Boolean = 0) As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Export all the classes as individual XML files to a directory."}),"\n",(0,a.jsx)(s.p,{children:"This method loops through all the classes, exporting each one as an individual XML file named after the classname to the directory dirname. If you specify a Package, then it exports only this package. If SubDir is true,, the method exports sub-packages as subdirectories."}),"\n",(0,a.jsx)(s.h4,{id:"parameters-13",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Name"}),(0,a.jsx)(s.th,{children:"Description"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"dirname"}),(0,a.jsx)(s.td,{children:"The directory where exported files will be placed."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"qspec"}),(0,a.jsx)(s.td,{children:"qspec is a list of flags and qualifiers that can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'.  If you pass qualifier '/recursive=1', the method also exports any related, e.g. include files included by a class or a superclass, the idea being that this will be a compilable set of items. If the filename ends in .gz or .gzip, the method automatically compresses the file with gzip."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"errorlog"}),(0,a.jsx)(s.td,{children:"errorlog is a multidimensional array of the %Status error values encountered during the execution of this method. Each status value is in the format returned by $system.Status.DecomposeStatus."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"Charset"}),(0,a.jsx)(s.td,{children:"The character set to use for this export. If this argument is not specified, the method uses 'utf-8'."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"Package"}),(0,a.jsx)(s.td,{children:"If you specify a Package, the method exports only this package."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"Subdir"}),(0,a.jsx)(s.td,{children:"If SubDir is true, the method exports sub-packages as subdirectories."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"The return value is a %Status value indicating success or failure."}),(0,a.jsx)(s.td,{})]})]})]}),"\n",(0,a.jsx)(s.h3,{id:"getpackagelist",children:"GetPackageList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetPackageList(ByRef items As %String, package As %String, qspec As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Return, by reference, a multidimensional array of classes in this package."}),"\n",(0,a.jsx)(s.p,{children:'Search for classes in the package and put their names into the local array items. If the package is "*", then the method returns all classes in this namespace; this does not include mapped packages (see the comments on qspec).'}),"\n",(0,a.jsx)(s.p,{children:"qspec is a list of flags or qualifiers which can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'. For example, to search mapped packages, include the qualifier /mapped within the qspec argument. Similarly, to search subpackages, include the qualifier /includesubpackages within the qspec argument."}),"\n",(0,a.jsx)(s.p,{children:"For example, the following code returns (within myitems), a multidimensional array of the classes within the Test package, including any mapped items and all subpackages:"}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.code,{children:'do $system.OBJ.GetPackageList(.myitems,"Test","/mapped/includesubpackages")'})}),"\n",(0,a.jsx)(s.h3,{id:"getclasslist",children:"GetClassList"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetClassList(ByRef items As %String, qspec As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Return, by reference, a multidimensional array of classes in this namespace."}),"\n",(0,a.jsx)(s.p,{children:"Search for classes in this namespace and put their names into the multidimensional array items."}),"\n",(0,a.jsx)(s.p,{children:"qspec is a list of flags or qualifiers which can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'. The search for classes respects the qspec passed. It uses the following qualifiers:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"/application=1/0 - Include application classes"}),"\n",(0,a.jsx)(s.li,{children:"/system=1/0 - Include system classes (ones with class attribute 'system' set to something other than zero)"}),"\n",(0,a.jsx)(s.li,{children:"/percent=1/0 - Include percent classes"}),"\n",(0,a.jsx)(s.li,{children:"/mapped=1/0 - Include classes mapped from other databases or just classes in default databases"}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"makeclassdeployed",children:"MakeClassDeployed"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod MakeClassDeployed(ByRef classes As %String = "", qspec As %String = "", fulldeploy As %Boolean = 0) As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Make a class or classes deployed. classes can be a single class, a comma-separated list, a multidimensional array of class names. You can also use ? or * wildcards. If you wish to exclude items, pass ' before the item name; this syntax also supports wildcard, e.g. \"User.*,'User.T*\". This deletes all the source code of the class from the disk. Once a class is in deployed mode, it cannot be edited or exported or recompiled. You can still create subclasses of a deployed class and compile these."}),"\n",(0,a.jsx)(s.p,{children:"qspec is a list of flags or qualifiers which can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."}),"\n",(0,a.jsx)(s.p,{children:"If fulldeploy is true, the method attempts to remove pretty much the entire class definition, leaving just the minimum so the class is runnable. This does not work on persistent, serial, datatype, or XML-enabled classes as these require access to the class definition at runtime in order to function."}),"\n",(0,a.jsx)(s.p,{children:"Note that for a class to be deployed, it must be compiled; if you try to deploy a class which is not compiled it will report an error."}),"\n",(0,a.jsx)(s.h3,{id:"uncompile",children:"UnCompile"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod UnCompile(ByRef classes As %String = "", qspec As %String = "") As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Uncompile a class or classes."}),"\n",(0,a.jsx)(s.p,{children:"classes can be a single class, a comma-separated list, a multidimensional array of class names. You can also use ? or * wildcards. If you wish to exclude items, pass ' before the item name; this syntax also supports wildcard, e.g. \"User.*,'User.T*\"."}),"\n",(0,a.jsx)(s.p,{children:"qspec is a list of flags or qualifiers which can be displayed with 'Do $system.OBJ.ShowQualifiers()' and 'Do $system.OBJ.ShowFlags()'."}),"\n",(0,a.jsx)(s.h3,{id:"showclasses",children:"ShowClasses"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ShowClasses(qspec As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Write all classes defined in this namespace to the console."}),"\n",(0,a.jsx)(s.p,{children:"The optional qspec argument is a qualifier string containing any of the following options:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"/detail"}),(0,a.jsx)(s.th,{children:"Show details."})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"/hidden"}),(0,a.jsx)(s.td,{children:"Show hidden classes."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"/mapped"}),(0,a.jsx)(s.td,{children:"Show mapped classes."})]})]})]}),"\n",(0,a.jsxs)(s.p,{children:["For example: ",(0,a.jsx)(s.code,{children:'Do $System.OBJ.ShowClasses("/detail")'})]}),"\n",(0,a.jsx)(s.h3,{id:"showobjects",children:"ShowObjects"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ShowObjects(qspec As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Write all object instances in this process to the console. Note that some of the objects displayed may be process-specific singleton objects such as classes in the %SYSTEM.Context package or oref's that these singleton objects themselves hold."}),"\n",(0,a.jsx)(s.p,{children:"The optional qspec argument is a string containing any of the following characters:"}),"\n\n\n\n\n\n\n\n",(0,a.jsx)(s.table,{children:(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"/detail=1"}),(0,a.jsx)(s.th,{children:"Show details."})]})})}),"\n",(0,a.jsxs)(s.p,{children:["For example: ",(0,a.jsx)(s.code,{children:'Do $System.OBJ.ShowObjects("/detail=1")'})]}),"\n",(0,a.jsx)(s.h3,{id:"closeobjects",children:"CloseObjects"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CloseObjects() As %Status [ CodeMode = expression, Deprecated ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Deprecated method; to close objects, let them go out of scope."}),"\n",(0,a.jsx)(s.h3,{id:"saveobjects",children:"SaveObjects"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SaveObjects() As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Save all instances of %Library.Persistent in the process. Returns a status value."}),"\n",(0,a.jsx)(s.h3,{id:"version",children:"Version"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Version() As %String [ CodeMode = expression ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return the version number of the current object library."}),"\n",(0,a.jsx)(s.h3,{id:"showflags",children:"ShowFlags"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ShowFlags()\n"})}),"\n",(0,a.jsx)(s.p,{children:"Display the list of flags used by the compiler. Should use ShowQualifiers as flags have been superseded by qualifiers."}),"\n",(0,a.jsx)(s.h3,{id:"showqualifiers",children:"ShowQualifiers"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ShowQualifiers(group As %String = "")\n'})}),"\n",(0,a.jsx)(s.p,{children:"Display the list of qualifiers defined in the system. This method also shows the default qualifiers defined at system level and at namespace levels. The argument group has been deprecated."}),"\n",(0,a.jsx)(s.h3,{id:"showreferences",children:"ShowReferences"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ShowReferences(oref As %String, chkObj As %Boolean = 0) [ PublicList = arr ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Display a list of all variables that contain a reference to this oref."}),"\n",(0,a.jsx)(s.p,{children:"If chkObj is 1, the properties of any varibles that contain an object reference are also searched and displayed. Otherwise only non-object variables are searched."}),"\n",(0,a.jsx)(s.p,{children:"The list has the base $STACK level of the variable, the internal stack level (as shown by the %STACK utility), and the variable name."}),"\n",(0,a.jsx)(s.h3,{id:"showmacros",children:"ShowMacros"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ShowMacros()\n"})}),"\n",(0,a.jsx)(s.p,{children:"Display the list of supported macros defined in the system."}),"\n",(0,a.jsx)(s.h3,{id:"setflags",children:"SetFlags"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetFlags(flags As %String, system As %Boolean = 0) As %String\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Set the default flags for this namespace or this system. See ",(0,a.jsx)(s.a,{href:"/csp/docbook/DocBook.UI.Page.cls?FIND=ObjectScript+qspec",children:"System Flags and Qualifiers"}),"."]}),"\n",(0,a.jsx)(s.p,{children:"If system is true, this method sets the default flags for this system; otherwise it sets the default flags for the current namespace. If flags are set for this namespace, these override any set for the system. These flags are combined with the built-in defaults to create the defaults used."}),"\n",(0,a.jsx)(s.p,{children:"This method returns the new defaults after this change."}),"\n",(0,a.jsx)(s.h3,{id:"setqualifiers",children:"SetQualifiers"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SetQualifiers(qspec As %String = "", system As %Boolean = 0, group As %String) As %Status\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Set the default qualifiers for this namespace or this system. See ",(0,a.jsx)(s.a,{href:"/csp/docbook/DocBook.UI.Page.cls?FIND=ObjectScript+qspec",children:"System Flags and Qualifiers"}),". If system is true, the method sets the default qualifiers for this system, otherwise it sets the default qualifiers for this namespace. If qualifiers are set for this namespace, these override any set for the system. These qualifiers are combined with the built in defaults to create the defaults used. The argument group has been deprecated."]}),"\n",(0,a.jsx)(s.h3,{id:"getqualifiers",children:"GetQualifiers"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetQualifiers(system As %Boolean = 0) As %String\n"})}),"\n",(0,a.jsx)(s.p,{children:"Get the default qualifiers for this namespace or this system. If system is true, the method gets the default qualifiers for this system; otherwise it gets the default qualifiers for the current namespace."}),"\n",(0,a.jsx)(s.h3,{id:"objectlistexecute",children:"ObjectListExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ObjectListExecute(ByRef QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"This query returns a list of all object instances currently in memory within the current process."}),"\n",(0,a.jsx)(s.h3,{id:"objectlistclose",children:"ObjectListClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ObjectListClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"objectlistfetch",children:"ObjectListFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ObjectListFetch(ByRef QHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"upgrade",children:"Upgrade"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Upgrade(qspec As %String = "", ByRef errorlog As %String, classname As %String) As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Upgrade the class definition database in one namespace. Pass in qspec /mapped=1 to upgrade databases mapped into current namespace or if you pass in classname, the method upgrades the database associated with this specific class."}),"\n",(0,a.jsx)(s.h3,{id:"upgradeall",children:"UpgradeAll"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod UpgradeAll(qspec As %String = "", ByRef errorlog As %String) As %Status [ CodeMode = expression ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Upgrade the class definition database in all the namespaces. Pass in qspec /mapped=1 to upgrade databases mapped into current namespace."}),"\n",(0,a.jsx)(s.h3,{id:"loadlanguage",children:"LoadLanguage"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod LoadLanguage(language As %String = "", qspec As %String = "") As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Import the system messages for the specified language from ...\\mgr\\Locale\\allmessages_[language].xml and make this the current language. If language is not specified, then Upgrade the Object locale and import the current language."}),"\n",(0,a.jsx)(s.h3,{id:"isvalidclassname",children:"IsValidClassname"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsValidClassname(class As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return $$OK if this class name is valid, or an error message if it is not. If it is invalid it is typically because it contains characters that are not allowed in a class name or because it clashes with a class that already exists (different case in package, for example)."}),"\n",(0,a.jsx)(s.h3,{id:"isuptodate",children:"IsUpToDate"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsUpToDate(class As %String, log As %Boolean = 0, type As %Integer = 1) As %Boolean\n"})}),"\n",(0,a.jsx)(s.p,{children:"For classes in a read/write database, return 1 if this class is up to date (or 0 if it is not). If log is true, the method displays a log of what it is checking. The type determines *what* it checks to make the determination:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"0 - Check timestamps on class, so even if a description was modified this shows the class as out of date."}),"\n",(0,a.jsx)(s.li,{children:"1 - Ignore changes to descriptions in checking up to date status, this is the default and is what the class compiler typically uses."}),"\n",(0,a.jsx)(s.li,{children:"2 - Ignore changes to descriptions and method code in checking up-to-date status, this is useful to see if the class has 'structurally' changed in a way that would require a class referencing this via SQL to be recompiled\nThis method returns 1 if the class is in a read-only database."}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"getdependencies",children:"GetDependencies"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetDependencies(ByRef class As %String, Output included As %String, qspec As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"This returns, as output, a list of classes the class compiler will include if the listed classes are compiled. The class argument can be a single class name, a comma-separated list of class names, or a multidimensional array of class names. You can also use ? or * wildcards. If you wish to exclude items, pass ' before the item name; this syntax also supports wildcards, e.g. \"User.*,'User.T*\". This method returns the list of classes that will be compiled in the included argument, based on the compile qspec argument."}),"\n",(0,a.jsx)(s.h3,{id:"settransactionmode",children:"SetTransactionMode"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetTransactionMode(value As %Integer = 1, ByRef pStatus As %Library.Status) As %Integer\n"})}),"\n",(0,a.jsx)(s.p,{children:"Set the object transaction mode for the current process to a new value. Valid values are:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"0"}),(0,a.jsx)(s.th,{children:"No transactions used for Object filing"})]})}),(0,a.jsx)(s.tbody,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"1"}),(0,a.jsx)(s.td,{children:"Use transactions for Object filing"})]})})]}),"\n",(0,a.jsx)(s.p,{children:"If a valid value is passed in, then the transaction mode for the current process is set to that value and the previous transaction mode value is returned. Otherwise the transaction mode setting is left unchanged and pStatus contains a %Status value describing the error and the current transaction mode value is returned."}),"\n",(0,a.jsx)(s.h3,{id:"gettransactionmode",children:"GetTransactionMode"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetTransactionMode() As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return the current object transaction mode."}),"\n",(0,a.jsx)(s.h3,{id:"setconcurrencymode",children:"SetConcurrencyMode"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetConcurrencyMode(value As %Integer = 1, ByRef pStatus As %Library.Status) As %Integer\n"})}),"\n",(0,a.jsx)(s.p,{children:"Set the Object concurrency mode for the current process to a new value. Valid values are:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"0"}),(0,a.jsx)(s.th,{children:"No concurrency controls"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"1"}),(0,a.jsx)(s.td,{children:"Atomic"})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"2"}),(0,a.jsx)(s.td,{children:"Shared"})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"3"}),(0,a.jsx)(s.td,{children:"Shared retained"})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"4"}),(0,a.jsx)(s.td,{children:"Exclusive"})]})]})]}),"\n",(0,a.jsx)(s.p,{children:"If a valid value is passed in then the concurrency mode for the current process is set to that value and the previous concurrency mode value is returned. Otherwise the concurrency mode setting is left unchanged and pStatus contains a %Status value describing the error and the current concurrency mode value is returned."}),"\n",(0,a.jsx)(s.h3,{id:"getconcurrencymode",children:"GetConcurrencyMode"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetConcurrencyMode() As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,a.jsx)(s.p,{children:"Return the current object concurrency mode."}),"\n",(0,a.jsx)(s.h3,{id:"rebuildextentindex",children:"RebuildExtentIndex"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RebuildExtentIndex(updateMode As %Boolean = 0, lockMode As %Integer = 1) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"The Extent Index is an index on all persistent classes that are runnable in the current namespace. It is currently used by %BuildIndices, %KillExtent, and the %FindGUID utility method in %Library.GUID. Other uses may be added at a later time."}),"\n",(0,a.jsx)(s.p,{children:"The index is maintained in the globals database in the current namespace. If the globals database in the current namespace is readonly, then an error is returned. The class compiler automatically maintains this index for classes compiled in the namespace. Classes mapped from other namespaces are not automatically added to or removed from the index when mapping changes or changes to the class runtime occur in the original namespace. Such changes must be updated in the local namespace's extent index by running a utility method. There are two methods: this method rebuilds the index completely and RebuildExtentIndexOne rebuilds the index entries for only the specified class."}),"\n",(0,a.jsx)(s.p,{children:"This method returns a status value indicating success or failure."}),"\n",(0,a.jsx)(s.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,a.jsx)(s.p,{children:"Name"}),"\n",(0,a.jsx)(s.p,{children:"Description"}),"\n",(0,a.jsx)(s.p,{children:"updateMode"}),"\n",(0,a.jsx)(s.p,{children:"If zero then the extent index is purged and rebuilt completely. Otherwise, the existing index is checked against existing defintions and only changed classes are rebuilt."}),"\n",(0,a.jsx)(s.p,{children:"lockMode"}),"\n",(0,a.jsx)(s.p,{children:"Specifies the type of locking to be used while modifying the index. If the requested locks cannot be obtained then an error is reported to the caller."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"0"}),(0,a.jsx)(s.th,{children:"No locking;"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"1"}),(0,a.jsx)(s.td,{children:"Exclusive lock on the entire extent index, released immediately on completion;"})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"2"}),(0,a.jsx)(s.td,{children:"The nodes for each class in the extent index are locked during update, released immediately when class's index entries are built;"})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"3"}),(0,a.jsx)(s.td,{children:"Shared lock on the entire extent index, released immediately on completion."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"The return value is a %Status value indicating success or failure."}),(0,a.jsx)(s.td,{})]})]})]}),"\n",(0,a.jsx)(s.h3,{id:"rebuildextentindexone",children:"RebuildExtentIndexOne"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RebuildExtentIndexOne(className, lockMode As %Integer = 1) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"This method updates the extent index for the specified class in the current namespace. If the globals database in the current namespace is readonly, then an error is returned. Call this method to rebuild the extent index for a single class in the current namespace. Refer to RebuildExtentIndex for more information."}),"\n",(0,a.jsx)(s.p,{children:"This method returns a status value indicating success or failure."}),"\n",(0,a.jsx)(s.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,a.jsx)(s.p,{children:"Name"}),"\n",(0,a.jsx)(s.p,{children:"Description"}),"\n",(0,a.jsx)(s.p,{children:"className"}),"\n",(0,a.jsx)(s.p,{children:"The name of the class to be indexed."}),"\n",(0,a.jsx)(s.p,{children:"lockMode"}),"\n",(0,a.jsx)(s.p,{children:"Specifies the type of locking to be used. If the requested locks cannot be obtained then an error is reported to the caller."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"0"}),(0,a.jsx)(s.th,{children:"No locking;"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"1"}),(0,a.jsx)(s.td,{children:"The nodes for each class in the extent index are locked during update, released immediately when class's index entries are built;"})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"2"}),(0,a.jsx)(s.td,{children:"The nodes for each class in the extent index are locked during update, released immediately when class's index entries are built;"})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"3"}),(0,a.jsx)(s.td,{children:"Shared lock on the class nodes in the extent index, released immediately on completion."})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:"The return value is a %Status value indicating success or failure."}),(0,a.jsx)(s.td,{})]})]})]}),"\n",(0,a.jsx)(s.h3,{id:"redirectbindsrvuseroutput",children:"RedirectBindSrvUserOutput"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RedirectBindSrvUserOutput(val As %Boolean)\n"})}),"\n",(0,a.jsx)(s.p,{children:"Turn output redirection on and off in the binding server."}),"\n",(0,a.jsx)(s.h3,{id:"compileinfoclass",children:"CompileInfoClass"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CompileInfoClass(class As %String, Output version As %String, Output compiletime As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Given a class this returns the version of InterSystems IRIS this was compiled on and the compiletime of this class."}),"\n",(0,a.jsx)(s.h3,{id:"compileinfoexecute",children:"CompileInfoExecute"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CompileInfoExecute(ByRef QHandle As %Binary, sortorder As %Integer = 0) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Query to return version and time when classes were compiled. This only returns compiled classes, so classes not compiled are skipped. The sortorder can be one of:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"0 - Time class was compiled (default)"}),"\n",(0,a.jsx)(s.li,{children:"1 - Classname"}),"\n",(0,a.jsx)(s.li,{children:"2 - InterSystems IRIS version"}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"compileinfoclose",children:"CompileInfoClose"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CompileInfoClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"compileinfofetch",children:"CompileInfoFetch"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CompileInfoFetch(ByRef QHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ CodeMode = expression ]\n"})}),"\n",(0,a.jsx)(s.h3,{id:"compileinfofetchrows",children:"CompileInfoFetchRows"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CompileInfoFetchRows(ByRef QHandle As %Binary, FetchCount As %Integer = 0, ByRef RowSet As %List, ByRef ReturnCount As %Integer, ByRef AtEnd As %Integer) As %Status\n"})}),"\n",(0,a.jsx)(s.h3,{id:"updateconfigparam",children:"UpdateConfigParam"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UpdateConfigParam(classname As %String, parameter As %String, value As %String) As %Status\n"})}),"\n",(0,a.jsx)(s.p,{children:"Allows updating a CONFIGVALUE parameter type."}),"\n",(0,a.jsx)(s.p,{children:"If you have defined a parameter in the classname which is specified as 'CONFIGVALUE' in the type keyword then this method allows this to be updated from the original value to a new value."}),"\n",(0,a.jsx)(s.p,{children:"Note that this should be a rare event and not be used for any value that needs to be updated a lot, a global should be used for a rapidly updating value. The advantage of using a class parameter for a configuration value is that a very large number of processes can access this value using 'Set val=##class(ClassName).#ParamName' faster than access to a global."}),"\n",(0,a.jsx)(s.h3,{id:"validateindices",children:"ValidateIndices"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ValidateIndices(classname As %Library.String, idxList As %String = "", autoCorrect As %Boolean = 0, lockOption As %Integer = 1, multiProcess As %Boolean = 0, verbose As %Boolean = 1, ByRef errors As %String) As %Library.Status [ PublicList = mapList ]\n'})}),"\n",(0,a.jsx)(s.p,{children:"Validate indices for a class"}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.em,{children:"classname"})," Name of the persistent class to validate indices for. ",(0,a.jsx)(s.em,{children:"idxList"}),' Optional. "" to check all indices, or specify a $list of index names to check. Default="" ',(0,a.jsx)(s.em,{children:"autoCorrect"})," Optional. If true, correct any errors found. Default=0 ",(0,a.jsx)(s.em,{children:"lockOption"})," Optional. Default = 1 0 - No locking is performed at all 1 - Shared locking as each row is checked 2 - exclusive lock on entire table for duration of the run ",(0,a.jsx)(s.em,{children:"multiProcess"})," Optional. If true, parts of %ValidateIndices() use parallel processing when possible. Default=0 ",(0,a.jsx)(s.em,{children:"verbose"})," Optional. If true, display output to the current device. Default=1. When called for a sharded class, ",(0,a.jsx)(s.em,{children:"verbose"})," is force to 0. ",(0,a.jsx)(s.em,{children:"errors"})," Optional. Passed by reference. Returns a multidimensional array of errors found in the index(es) validated. If autoCorrect=1, this is a multidimensional array of issues corrected."]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.strong,{children:"Returns:"})}),"\n",(0,a.jsx)(s.p,{children:"Status Code"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Example"}),":"]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:'Do $SYSTEM.OBJ.ValidateIndices("Sample.Person","",1,2)'}),"\n",(0,a.jsx)(s.li,{children:'Do $SYSTEM.OBJ.ValidateIndices("Sample.Company",$lb("NameIdx"),1,1)'}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note:"}),":",(0,a.jsx)(s.br,{}),"\nIndices may also be validated by calling the class method ",(0,a.jsx)(s.em,{children:"##class(classname).%ValidateIndices(idxList,autoCorrect,lockOption,verbose)"}),".",(0,a.jsx)(s.br,{}),"\nThere is one main difference between validating indices through ",(0,a.jsx)(s.em,{children:"$SYSTEM.OBJ.ValidateIndices()"})," and ",(0,a.jsx)(s.em,{children:"##class(classname).%ValidateIndices()"}),".",(0,a.jsx)(s.br,{}),"\n",(0,a.jsx)(s.em,{children:"$SYSTEM.OBJ.ValidateIndices()"})," validates the indices for a table, and also validates any indices in collection child tables for that table.",(0,a.jsx)(s.br,{}),"\nWhen using ",(0,a.jsx)(s.em,{children:"##class(classname).%ValidateIndices()"}),", collection child table indices must be checked with separate calls.",(0,a.jsx)(s.br,{}),"\nAlso, when calling ",(0,a.jsx)(s.em,{children:"$SYSTEM.OBJ.ValidateIndices()"}),", multiProcess default is 0. When calling ",(0,a.jsx)(s.em,{children:"##class(classname).%ValidateIndices()"}),", multiProcess default is 1."]}),"\n",(0,a.jsx)(s.h3,{id:"generateembedded",children:"GenerateEmbedded"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GenerateEmbedded(ByRef list As %String = "", qspec As %String = "", ByRef errorlog As %String, delete As %Boolean = 0) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Generate embedded SQL cached queries (UCQ) for all routines that match the list passed in. This can be a pattern such as 'A*' to mean all runnable code that starts with 'A'. The qspec uses /mapped to determine if patterns should include mapped items or just local ones. Specify 1 for delete to delete the UCQ found for the routines in list."}),"\n",(0,a.jsx)(s.h3,{id:"setmppoption",children:"SetMPPOption"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SetMPPOption(optionName As %String = "", optionValue As %Integer = "", ByRef oldValue As %String) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Set the specified Macro Pre-Processor (MPP) Configuration Settings 'optionName' to the specified 'optionValue'"}),"\n",(0,a.jsx)(s.p,{children:"------------------------------------------------------------------------------- Method: SetMPPOption Definition: This method sets the specified Macro Pre-Processor (MPP) Configuration Settings 'optionName' to the specified 'optionValue'. This method also returns the original value via the PBR 'oldValue' parameter, along with the invocation status via the method's return value. Options: The following is a list of currently supported Macro Pre-Processor Configuration Settings Options: optionName/optionValue Description ------------------------- ----------------------------------- MPPParsingMode - The MPP's Parsing Mode {1 | 2} 1 - Standard Macro Pre-Processor Parsing [$$$MPPParsingModeStandard] 2 - Enhanced Macro Pre-Processor Parsing [$$$MPPParsingModeEnhanced] This mode supports $$$MACRO[(args)] Recursion Parsing [DEFAULT: 1 = $$$MPPParsingModeDefault] MacroMaxRecursionNoArg - The maximum allowed sub-string repetitions between $$$MACRO references (without arguments) of the same name {3...n} 3 - The minimum number to determine $$$MACRO Recursive Referencing or Self-Referencing n - This number can be increased, but should never need to be for $$$MACRO references without arguments [DEFAULT: 3 = $$$MacroMaxRecursionNoArgDefault] MacroMaxRecursionGotArg - The maximum allowed sub-string repetitions between $$$MACRO(...) references (with arguments) of the same name {10...n} 10 - The minimum number to determine $$$MACRO(...) Recursive Referencing or Self-Referencing n - This number can be increased for $$$MACRO(...) references (with arguments) that may exceed 10 nesting levels, but this should be very rare Example: $$$A($$$A($$$A(...))) [DEFAULT: 10 $$$MacroMaxRecursionGotArgDefault] Restriction: You must have the \"USE\" permission on the %Admin Manage Resource in order to change this MPP Configuration Setting. Notes: - Changing this MPP Configuration Setting affects all processes immediately. - This is a system-wide setting. Invocation: This method can be invoked in the following ways: ObjectScript: $SYSTEM.OBJ.SetMPPOption(...) SQL: N/A Examples: The following examples shows the use of this method: #1 Set the 'MPPParsingMode' option of the Macro Pre-Processor to the value two (2), which specifies the use of the Enhanced Parsing to check for $$$MACRO[(args)] Recursion: set tSC=$SYSTEM.OBJ.SetMPPOption(\"MPPParsingMode\",2,.oldVal) Data Storage: ^%SYS(\"MPP\",\"Parsing\") & ^%SYS(\"MPP\",\"MacroRecursion\") Parameters: optionName - The Pre-Processor (MPP) Configuration Settings 'option' name. The following is a list of currently supported Macro Pre-Processor Configuration Settings Options: - MPPParsingMode - MacroMaxRecursionNoArg - MacroMaxRecursionGotArg optionValue - The value to set for the specified 'optionName' oldValue - A Pass By Reference (PBR) parameter which returns the old MPP Configuration Setting value RETURN Value: The status from the invocation of this method -------------------------------------------------------------------------------"}),"\n",(0,a.jsx)(s.h3,{id:"getmppoption",children:"GetMPPOption"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetMPPOption(optionName As %String = "", ByRef tSC As %Status, getGloValue As %Integer = 0) As %Status\n'})}),"\n",(0,a.jsx)(s.p,{children:"Get the current value for the specified Macro Pre-Processor (MPP) Configuration Settings 'optionName'"}),"\n",(0,a.jsx)(s.p,{children:"------------------------------------------------------------------------------- Method: GetMPPOption Definition: This method returns the current value for the specified Macro Pre-Processor (MPP) Configuration Settings 'optionName' Options: The following is a list of currently supported Macro Pre-Processor Configuration Settings Options: optionName Description ------------------------- ----------------------------------- MPPParsingMode - The MPP's Parsing Mode {1 | 2} MacroMaxRecursionNoArg - The maximum allowed sub-string repetitions between $$$MACRO references (without arguments) of the same name {3...n} MacroMaxRecursionGotArg - The maximum allowed sub-string repetitions between $$$MACRO(...) references (with arguments) of the same name {10...n} ALL Get all 'optionName' values Notes: - See the 'SetMPPOption(...)' method for specific details about each of the 'optionName' values Invocation: This method can be invoked in the following ways: ObjectScript: $SYSTEM.OBJ.GetMPPOption(...) SQL: N/A Examples: The following examples shows the use of this method: #1 Get the current value for the 'MPPParsingMode' option of the Macro Pre-Processor Configuration Settings set optVal=$SYSTEM.OBJ.GetMPPOption(\"MPPParsingMode\",.tSC) Data Storage: ^%SYS(\"MPP\",\"Parsing\") & ^%SYS(\"MPP\",\"MacroRecursion\") Parameters: optionName - The Pre-Processor (MPP) Configuration Settings 'option' name. The following is a list of currently supported Macro Pre-Processor Configuration Settings Options: - MPPParsingMode - MacroMaxRecursionNoArg - MacroMaxRecursionGotArg - ALL (Get all 'optionName' values) tSC - A Pass By Reference (PBR) parameter which returns the status from the invocation of this method getGloValue - 0 = Don't retrieve the value from the System-Global [DEFAULT] 1 = Retrieve the value from the System-Global NOTE: This parameter should be used for internal purposes only! RETURN Value: The current value of the specified Macro Pre-Processor (MPP) Configuration Settings 'optionName'. NOTE: If 'optionName' is passed the value \"ALL\", then return a $LIST(...) of a $LIST(...) of the following values for each of the valid 'optionName' values: $LIST($LIST(optionName,optionValue,tSC),...) -------------------------------------------------------------------------------"})]})}function c(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>l});var a=t(96540);const n={},i=a.createContext(n);function r(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);