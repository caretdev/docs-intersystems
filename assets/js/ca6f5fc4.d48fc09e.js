"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[22459],{57745:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>d,frontMatter:()=>r,toc:()=>l});var s=n(74848),a=n(28453);const r={pagination_prev:null,pagination_next:null},i="%Library.Global",l=[{value:"Methods",id:"methods",level:2},{value:"DoubleInnerQuotes",id:"doubleinnerquotes",level:3},{value:"Eval",id:"eval",level:3},{value:"Export",id:"export",level:3},{value:"GetFileFormat",id:"getfileformat",level:3},{value:"GetFileHeaderString",id:"getfileheaderstring",level:3},{value:"GetFileHeader",id:"getfileheader",level:3},{value:"GetGlobalList",id:"getgloballist",level:3},{value:"GetOpenParms",id:"getopenparms",level:3},{value:"Import",id:"import",level:3},{value:"ListDump",id:"listdump",level:3},{value:"Quote",id:"quote",level:3},{value:"QuoteVector",id:"quotevector",level:3},{value:"UndoubleInnerQuotes",id:"undoubleinnerquotes",level:3},{value:"Unquote",id:"unquote",level:3},{value:"FindExecute",id:"findexecute",level:3},{value:"FindFetch",id:"findfetch",level:3},{value:"FindClose",id:"findclose",level:3},{value:"GetExecute",id:"getexecute",level:3},{value:"GetFetch",id:"getfetch",level:3},{value:"GetClose",id:"getclose",level:3}];function o(e){const t={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"libraryglobal",children:"%Library.Global"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Library.Global [ Abstract, System = 4 ]\n"})}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"doubleinnerquotes",children:"DoubleInnerQuotes"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DoubleInnerQuotes(str As %String, ByRef ov As %Boolean) As %String [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"eval",children:"Eval"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Eval(x) As %String [ Internal, ProcedureBlock = 0 ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"export",children:"Export"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod Export(Nsp As %String = {$namespace}, ByRef GlobalList As %String, FileName As %String, OutputFormat As %Integer = 5, RecordFormat As %String = "V", qspec As %String = "d", Translation As %String = "<Device Default>", ByRef Skipped As %String, Header As %String = "") As %Status [ PublicList = (G, IOT, blkcnt, blocks, write, %UI) ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Exports a list of globals GlobalList from a namespace Nsp to FileName using OutputFormat and RecordFormat."}),"\n",(0,s.jsx)(t.p,{children:"GlobalList is a comma delimited string or a local array, containing the names of the globals to export. A leading ^ and trailing type of .gbl on each global name are optional."}),"\n",(0,s.jsx)(t.p,{children:"Block format (%GOF - type 7) cannot be used to export subscript mapped globals or globals which are mapped to a database other than the default global database of the namespace. If a mapped global is included in the GlobalList, it will be dropped and a message that it well be skipped is displayed. Use ISM/ObjectScript format to export mapped globals."}),"\n",(0,s.jsx)(t.p,{children:"OutputFormat has the following values:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"1 - DTM format"}),"\n",(0,s.jsx)(t.li,{children:"3 - VAXDSM format"}),"\n",(0,s.jsx)(t.li,{children:"4 - DSM11 format"}),"\n",(0,s.jsx)(t.li,{children:"5 - ISM/ObjectScript format"}),"\n",(0,s.jsx)(t.li,{children:"6 - MSM format"}),"\n",(0,s.jsx)(t.li,{children:"7 - Block format (%GOF)"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"RecordFormat has the following values:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"V - Variable Length Records"}),"\n",(0,s.jsx)(t.li,{children:"S - Stream Data"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Header is the user supplied header to be written in the file. Avoid putting $C(13,10) or '~Format=' string in the header string. If it is not supplied or is a null string then the default header is:",(0,s.jsx)(t.br,{}),"\n'Export of nnn globals from Namespace AAA', the maximum length of the header string is 30000, if the passed header is longer than 30000 characters then it will be truncated."]}),"\n",(0,s.jsxs)(t.p,{children:["For information on qSpec, see ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?FIND=ObjectScript+qspec",children:"System Flags and Qualifiers"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"getfileformat",children:"GetFileFormat"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetFileFormat(FileName As %String, ByRef Format As %String, ByRef RecordFormat As %String, DefaultFormat As %String = "5", DefaultRecordFormat As %String = "V") As %Boolean [ Internal ]\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getfileheaderstring",children:"GetFileHeaderString"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFileHeaderString(ByRef Header As %String, FileName As %String, InputFormat As %Integer = 5, VariableLength As %Integer = 1) As %Status\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Get the Header string from an exported FileName file.",(0,s.jsx)(t.br,{}),"\nThis method attempts to detect the file format from its header. If this fails, then the format parameters passed in are used.",(0,s.jsx)(t.br,{}),"\nHeader is returned header string in the exported file.",(0,s.jsx)(t.br,{}),"\nFileName is the file name of the exported file.",(0,s.jsx)(t.br,{}),"\nInputFormat has the following values:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"1 - DTM format"}),"\n",(0,s.jsx)(t.li,{children:"3 - VAXDSM format"}),"\n",(0,s.jsx)(t.li,{children:"4 - DSM11 format"}),"\n",(0,s.jsx)(t.li,{children:"5 - ISM/ObjectScript format"}),"\n",(0,s.jsx)(t.li,{children:"6 - MSM format"}),"\n",(0,s.jsx)(t.li,{children:"7 - Block format (%GOF)"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"VariableLength non-zero if record format is variable length. The default value is 1."}),"\n",(0,s.jsx)(t.h3,{id:"getfileheader",children:"GetFileHeader"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFileHeader(ByRef Header As %String, ByRef GblList As %List, FileName As %String, InputFormat As %Integer = 5, VariableLength As %Integer = 1) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getgloballist",children:"GetGlobalList"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetGlobalList(Header As %String) As %List [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getopenparms",children:"GetOpenParms"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetOpenParms(Write As %Boolean, Variable As %Boolean = 1, Encoding As %String = "", Format As %Integer = 5) As %String [ Internal ]\n'})}),"\n",(0,s.jsx)(t.p,{children:'Construct file Open parameters bWrite = open file for write access bVariable = read/write Variablelength/Stream record (True="V"\\False="S") sEncoding = character encoding for \\k???\\ syntax Return parameters string'}),"\n",(0,s.jsx)(t.h3,{id:"import",children:"Import"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod Import(Nsp As %String = {$namespace}, GlobalList As %String, FileName As %String, InputFormat As %Integer = 5, VariableLength As %Integer = 1, NewName As %String = "") As %Status [ PublicList = (RMSMAXLEN, blkcnt, blocks, endian, version, vol, write, %UI, %gifmsg, Vmode, bigendian, file, gbl, globalList, load, nspace, reads, return, type, var, zu93type, odd, rsub, glreads, rdata) ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Imports a list of globals GlobalList from FileName into namespace Nsp assuming the file was written in InputFormat with record format of VariableLength."}),"\n",(0,s.jsx)(t.p,{children:"The Import method attempts to detect the file format from its header. If this fails, then the format parameters passed in are used."}),"\n",(0,s.jsx)(t.p,{children:'GlobalList is "*" to import all globals or it should contain a comma delimited string containing the names of the specific globals to import. A leading ^ and trailing type of .gbl around each name are optional.'}),"\n",(0,s.jsx)(t.p,{children:"GlobalList is ignored for non Block format (%GOF) - Type #7 - files."}),"\n",(0,s.jsx)(t.p,{children:"NewName is used to specify a new name for the global being imported. The input file must be type #7 (%GOF - Block format) and the file must contain only a single global."}),"\n",(0,s.jsx)(t.p,{children:"InputFormat has the following values:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"1 - DTM format"}),"\n",(0,s.jsx)(t.li,{children:"3 - VAXDSM format"}),"\n",(0,s.jsx)(t.li,{children:"4 - DSM11 format"}),"\n",(0,s.jsx)(t.li,{children:"5 - ISM/ObjectScript format"}),"\n",(0,s.jsx)(t.li,{children:"6 - MSM format"}),"\n",(0,s.jsx)(t.li,{children:"7 - Block format (%GOF)"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"VariableLength non-zero if record format is variable length. The default value is 1."}),"\n",(0,s.jsx)(t.h3,{id:"listdump",children:"ListDump"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ListDump(list As %List, level As %Integer, ByRef ov As %Boolean, Flags As %Integer = 0) As %String [ Internal, ProcedureBlock = 0 ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"quote",children:"Quote"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Quote(str As %String, gvn As %Boolean = 0, ByRef ov As %Boolean, Flags As %Integer = 1) As %String [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This method quotes gvns or values so they can be printed. The default behavior is to quote a value. You must pass in gvn=1 to quote a gvn. In this case, the quoting is applied to the global name and to each subscript."}),"\n",(0,s.jsx)(t.p,{children:"Numbers need no quoting and are returned unchanged."}),"\n",(0,s.jsx)(t.p,{children:"Strings of printable characters are returned enclosed in quotes. If the string contains a quote character itself, the quotes are doubled to keep it a valid COS string."}),"\n",(0,s.jsx)(t.p,{children:'A string that is a valid $list is converted to a valid COS expression that evaluates to the original string, for instance $lb(1,3.14,"test").'}),"\n",(0,s.jsx)(t.p,{children:'A string that contains control characters is converted to a valid COS expression that evaluates to the original string, for instance "test1"_$c(7)_"test2".'}),"\n",(0,s.jsx)(t.p,{children:"A string that is a valid $bit string is converted to a COS expression using $C() or $ZWC(). A comment is added indicating which bits are set."}),"\n",(0,s.jsxs)(t.p,{children:["Flags - option",(0,s.jsx)(t.br,{}),"\nBit 0 - Format string",(0,s.jsx)(t.br,{}),"\nBit 1 - Highlight String",(0,s.jsx)(t.br,{}),"\nBit 2 - Write String to current device",(0,s.jsx)(t.br,{}),"\nBit 3 - Do not add a comment to $Bit strings and %Status values"]}),"\n",(0,s.jsx)(t.p,{children:"The ov argument is set to 1 if the formatted string has to be truncated because it is too long for a local variable."}),"\n",(0,s.jsx)(t.h3,{id:"quotevector",children:"QuoteVector"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod QuoteVector(str As %String, gvn As %Boolean = 0, ByRef ov As %Boolean, Flags As %Integer = 1) As %String [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"undoubleinnerquotes",children:"UndoubleInnerQuotes"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod UndoubleInnerQuotes(str As %String) As %String [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"unquote",children:"Unquote"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Unquote(str As %String, gvn As %Boolean = 0) As %String [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Undoes the effects of the Quote method. That is, given the gvn and value display strings, Unquote returns a gvn and a value that can be used in a set command like Set @gvn=value. The default behavior is to Unquote a value. To Unquote a gvn you must pass in gvn=1."}),"\n",(0,s.jsx)(t.h3,{id:"findexecute",children:"FindExecute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod FindExecute(ByRef qHandle As %Binary, Namespace As %String, StartNode As %String, FindWhat As %String = "", MatchCase As %Boolean = 1, NameFormat As %Integer = 1, ValueFormat As %Integer = 1) As %Status [ Internal ]\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The query returns the nodes that contain FindWhat, one node per row, with four columns, namely Name, Value, Name Format and Value Format.",(0,s.jsx)(t.br,{}),"\nUse ##Class(%Library.Utility).Replace to replace FindWhat with ReplaceWith.",(0,s.jsx)(t.br,{}),"\nNameFormat:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"1 - String format, this is the value of the subscript unaltered"}),"\n",(0,s.jsx)(t.li,{children:"2 - ObjectScript format, the value has been converted into the ObjectScript representation for easy viewing, for example instead of showing the binary value a list is displayed as '$lb(1,\"test\")'. This format is suitable as the argument of $name."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"ValueFormat:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"1 - String format, this is the value unaltered"}),"\n",(0,s.jsx)(t.li,{children:'2 - ObjectScript format, the value has been converted into the ObjectScript representation for easy viewing, for example instead of showing the binary value a list is displayed as \'$lb(1,"test")\'.\nOn output, Name Format and Value Format may assume a third value, namely 3, which means "Not editable". Due to issues with the length of this data not all of it can be displayed so a portion is displayed.'}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"findfetch",children:"FindFetch"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod FindFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = FindExecute ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"findclose",children:"FindClose"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod FindClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = FindExecute ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getexecute",children:"GetExecute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetExecute(ByRef qHandle As %Binary, Namespace As %String, SearchMask As %String, LastNode As %String, NameFormat As %Integer = 1, ValueFormat As %Integer = 1, GetPermissions As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The query returns the nodes selected by SearchMask, one node per row, with four columns, namely Name, Value, Name Format and Value Format.",(0,s.jsx)(t.br,{}),"\nNameFormat:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"1 - String format, this is the value of the subscript unaltered"}),"\n",(0,s.jsx)(t.li,{children:"2 - ObjectScript format, the value has been converted into the ObjectScript representation for easy viewing, for example instead of showing the binary value a list is displayed as '$lb(1,\"test\")'. This format is suitable as the argument of $name."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"ValueFormat:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"1 - String format, this is the value unaltered"}),"\n",(0,s.jsxs)(t.li,{children:['2 - ObjectScript format, the value has been converted into the ObjectScript representation for easy viewing, for example instead of showing the binary value a list is displayed as \'$lb(1,"test")\'.\nOn output, Name Format and Value Format may assume a third value, namely 3, which means "Not editable". Due to issues with the length of this data not all of it can be displayed so a portion is displayed.',(0,s.jsx)(t.br,{}),"\nGetPermissions: Note that returning permissions on an individual global will affect performance of the query."]}),"\n",(0,s.jsx)(t.li,{children:'0 - Return "" for permission (no performance penalty)'}),"\n",(0,s.jsx)(t.li,{children:"1 - Return permissions (READ,WRITE,USE)"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"getfetch",children:"GetFetch"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = GetExecute ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getclose",children:"GetClose"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = GetExecute ]\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var s=n(96540);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);