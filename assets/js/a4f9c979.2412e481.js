"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[31991],{49285:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>r,default:()=>d,frontMatter:()=>n,toc:()=>l});var i=s(74848),a=s(28453);const n={pagination_prev:null,pagination_next:null},r="%Library.Text",l=[{value:"Parameters",id:"parameters",level:2},{value:"LANGUAGECLASS",id:"languageclass",level:3},{value:"SIMILARITYINDEX;",id:"similarityindex",level:3},{value:"MAXLEN;",id:"maxlen",level:3},{value:"Methods",id:"methods",level:2},{value:"BuildValueArray",id:"buildvaluearray",level:3},{value:"Similarity",id:"similarity",level:3},{value:"SimilarityIdx",id:"similarityidx",level:3},{value:"ChooseSearchKey",id:"choosesearchkey",level:3},{value:"Standardize",id:"standardize",level:3},{value:"CreateQList",id:"createqlist",level:3},{value:"MakeSearchTerms",id:"makesearchterms",level:3},{value:"IsValid",id:"isvalid",level:3}];function o(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"librarytext",children:"%Library.Text"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Library.Text Extends %Library.String [ System = 4 ]\n"})}),"\n",(0,i.jsx)(t.p,{children:"The %Text data type class represents a content-addressable document that supports word-based searching and relevance ranking. When you specify %Text as the type class of a property, you must also specify the maximum length of the document in the MAXLEN parameter, and the language of the document in the LANGUAGECLASS parameter. You may also specify the name of the index that will be used to compute the relevance ranking metric."}),"\n",(0,i.jsx)(t.p,{children:"For detailed usage information, see the class documentation for the %Text.Text class."}),"\n",(0,i.jsxs)(t.p,{children:["Efficient content-based document retrieval requires the use of an index. The type of index you create depends on the type query that the application requires. The simplest type of content-based query is the ",(0,i.jsx)(t.em,{children:"Boolean query"}),". A Boolean query is comprised of a set of search ",(0,i.jsx)(t.em,{children:"terms"}),', or words, that are combined with AND/OR/NOT operations to identify the documents of interest. SQL provides the %CONTAINS operator to search for an ANDed list of search terms. %CONTAINS operations may be combined with OR and NOT to specify any Boolean text query. The terms need not be adjacent in the document, although queries can be restricted to adjacent terms such as "White House" by setting NGRAMLEN=2 in the class specified in the LANGUAGECLASS property.']}),"\n",(0,i.jsxs)(t.p,{children:["To create an English Text property named ",(0,i.jsx)(t.em,{children:"myDocument"})," with a full text index suitable for Boolean queries you could specify:"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:'PROPERTY myDocument As %Text (MAXLEN = 256, LANGUAGECLASS = "%Text.English"); INDEX myIndex ON myDocument(KEYS) [ TYPE=BITMAP ];'})}),"\n",(0,i.jsxs)(t.p,{children:["An issue with Boolean queries is that it can be difficult to specify a query that returns all of the relevant documents, but only those documents. Almost invariably the results will either omit some of the relevant documents because the query is too specific, or will include some non-relevant documents because the query is too general. For example, to locate information about full text indexing in a set of documentation, the terms ",(0,i.jsx)(t.code,{children:"text document search query SQL SELECT index similarity ranking Boolean %CONTAINS 'full text'"})," all seem to be reasonably descriptive terms for the topic, but simply ANDing all these terms together in a single %CONTAINS operator is likely to find no documents (other than this document). In SQL you can address this sort of problem by casting a wider net with the %CONTAINS operator, then ranking the results with the %SIMILARITY operator, and finally limiting the results to the TOP n rows. For example, a query that finds a relevant set of documents might be: ",(0,i.jsx)(t.code,{children:"SELECT TOP 20 document FROM OnlineDocs WHERE document %CONTAINS ('SQL', 'full text', 'query') ORDER BY %SIMILARITY (document, 'text document search query SQL SELECT index similarity ranking Boolean %CONTAINS') DESC"})," This query finds all documents containing the terms 'SQL', 'full text', and 'query' anywhere within the document, then ranks the documents based on similarity with the terms listed in the %SIMILARITY operator, and returns the top 20 results that are deemed to be the most relevant."]}),"\n",(0,i.jsx)(t.p,{children:"Similarity queries are much more computationally expensive than Boolean queries. Performing similarity queries efficiently requires an index that contains additional information with each indexed term, and so bitmap indexes cannot be used. The structure of an index that can be used for similarity queries is determined by the SimilarityIdx class method of the specified LANGUAGECLASS. If you use one of the predefined language classes in the %Text package, then you would declare your property and index as follows:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:'PROPERTY myDocument As %Text (MAXLEN = 256, LANGUAGECLASS = "%Text.English", SIMILARITYINDEX = "mySimilarityIndex"); INDEX mySimilarityIndex ON myDocument(KEYS) [ DATA = myDocument(ELEMENTS) ];'})}),"\n",(0,i.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsx)(t.h3,{id:"languageclass",children:"LANGUAGECLASS"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter LANGUAGECLASS = "%Text.English";\n'})}),"\n",(0,i.jsx)(t.p,{children:"The LANGUAGECLASS parameter specifies the fully qualified name of the language implementation class. Optionally, he LANGUAGECLASS may be set to the name of a global that indirectly defines the language class name. If a global name is specified, then the global must be defined and available at index build time and at SQL query execution time."}),"\n",(0,i.jsx)(t.h3,{id:"similarityindex",children:"SIMILARITYINDEX;"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter SIMILARITYINDEX;\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The SIMILARITYINDEX parameter specifies the name of an index on the current property that has the structure expected by the SimilarityIdx class method of the class specified in the LANGUAGECLASS parameter. The SimilarityIdx class method in the %Text.Text class requires the index global to have the structure: ^textIndexGlobal([constantSubscripts,]key,ID) = value. An index with this structure can be created by compiling an index specification such as: ",(0,i.jsx)(t.code,{children:'PROPERTY myDocument As %Text (MAXLEN = 256, LANGUAGECLASS = "%Text.English", SIMILARITYINDEX = "myIndex"); INDEX myIndex ON myDocument(KEYS) DATA [ myDocument(VALUES) ];'})," The SimilarityIdx method of the %Text.Text class requires the index specified in the SIMILARITYINDEX parameter to have exactly this structure. The index may not be a bitmap index, additional subscripts or data values may not be added to the Index specification, and the index must inherit the collation of the property."]}),"\n",(0,i.jsx)(t.h3,{id:"maxlen",children:"MAXLEN;"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter MAXLEN;\n"})}),"\n",(0,i.jsx)(t.p,{children:"The MAXLEN parameter specifies the maximum length of the %Text property in bytes. Note that, unlike the %String class, the MAXLEN parameter must be explicitly set to a positive integer on each %Text property."}),"\n",(0,i.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(t.h3,{id:"buildvaluearray",children:"BuildValueArray"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod BuildValueArray(serialProp As %Binary, ByRef valueArray As %Binary) As %Status [ CodeMode = generator ]\n"})}),"\n",(0,i.jsx)(t.h3,{id:"similarity",children:"Similarity"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Similarity(document As %String, qList As %List) As %Numeric [ CodeMode = generator ]\n"})}),"\n",(0,i.jsx)(t.h3,{id:"similarityidx",children:"SimilarityIdx"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SimilarityIdx(ID As %String, textIndex As %String, qList As %List) As %Numeric [ CodeMode = generator ]\n"})}),"\n",(0,i.jsx)(t.h3,{id:"choosesearchkey",children:"ChooseSearchKey"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ChooseSearchKey(searchString As %String) As %String [ CodeMode = generator ]\n"})}),"\n",(0,i.jsx)(t.h3,{id:"standardize",children:"Standardize"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Standardize(searchString As %String, origtext As %Boolean = 0) As %String [ CodeMode = generator ]\n"})}),"\n",(0,i.jsx)(t.h3,{id:"createqlist",children:"CreateQList"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CreateQList(document As %String, collationExpr As %String) As %List [ CodeMode = generator ]\n"})}),"\n",(0,i.jsx)(t.h3,{id:"makesearchterms",children:"MakeSearchTerms"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod MakeSearchTerms(searchPattern As %String, ngramlen As %Integer = 0) As %List [ CodeMode = generator ]\n"})}),"\n",(0,i.jsx)(t.h3,{id:"isvalid",children:"IsValid"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod IsValid(%val As %RawString) As %Status [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Tests if the logical value %val, which is a string, is valid. The validation is based on the class parameter settings used for the class attribute this data type is associated with. In this case, ",(0,i.jsx)(t.a,{href:"#MINLEN",children:"MINLEN"}),", ",(0,i.jsx)(t.a,{href:"#MAXLEN",children:"MAXLEN"}),", ",(0,i.jsx)(t.a,{href:"#VALUELIST",children:"VALUELIST"}),", and ",(0,i.jsx)(t.a,{href:"#PATTERN",children:"PATTERN"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>l});var i=s(96540);const a={},n=i.createContext(a);function r(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(n.Provider,{value:t},e.children)}}}]);