"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[68479],{23186:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>r,default:()=>c,frontMatter:()=>l,toc:()=>o});var n=s(74848),a=s(28453);const l={pagination_prev:null,pagination_next:null},r="%SYS.PTools.UtilSQLStatements",o=[{value:"Properties",id:"properties",level:2},{value:"Type",id:"type",level:3},{value:"Name",id:"name",level:3},{value:"MethodName",id:"methodname",level:3},{value:"ImportPackage",id:"importpackage",level:3},{value:"SQLTextRaw",id:"sqltextraw",level:3},{value:"SQLTextExt",id:"sqltextext",level:3},{value:"Triggers",id:"triggers",level:2},{value:"OnDelete",id:"ondelete",level:3},{value:"Methods",id:"methods",level:2},{value:"clearSQLStatements",id:"clearsqlstatements",level:3},{value:"version",id:"version",level:3}];function i(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"sysptoolsutilsqlstatements",children:"%SYS.PTools.UtilSQLStatements"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %SYS.PTools.UtilSQLStatements Extends %Persistent [ System = 4 ]\n"})}),"\n",(0,n.jsx)(t.p,{children:'Class: %SYS.PTools.UtilSQLStatements Replaces: %SYS.PTools.SQLUtilities [DEPRECATED] Purpose: This class is used to store the SQL Statement details collected from the following Locations within InterSystems IRIS for Index Analysis, Performance Optimizations, and Additional Processing: - cached queries - Class Methods - Class Queries - MAC Routines The following Methods and Queries, defined in the abstract interface class %SYS.PTools.UtilSQLAnalysis, are used to collect, analyze, and optimize the SQL Statements in this class: Methods Queries ------------------------------- ----------------------------------- - getAllSQLStmts - getSQLStmts - getSQLStmts - getAllCachedQrySQLStmts - getCachedQrySQLStmtsByDays - getCachedQrySQLStmtsByClass - getAllClassMethSQLStmts - getClassMethSQLStmtsByClass - getAllClassQrySQLStmts - getClassQrySQLStmtsByClass - getAllRtnQrySQLStmts - getRtnQrySQLStmtsByRtn - getAllIndices - indexUsage - indexUsage - tableScans - tableScans - tempIndices - tempIndices - joinIndices - joinIndices - outlierIndices - outlierIndices - exportSQLUtilStmts - exportSQLUtilStmtRslts - exportSQLUtilities - clearSQLStatements - clearSQLAnalysisDB - countSQLStmtTypes - UtilSQLStmtsAndAnalysisDBView Data Storage: ^%sqlcq("SAMPLES","PTools","util","SQLStmts","{C|D|I|S}") Error Storage: ^%sqlcq($NAMESPACE,"PTools","Error"[...])=$LIST Info'}),"\n",(0,n.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(t.h3,{id:"type",children:"Type"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property Type As %String(MAXLEN = 100);\n"})}),"\n",(0,n.jsx)(t.p,{children:"The {Type} is the location within InterSystems IRIS from where the SQL Statement was extracted: 'Cached Query' | 'Class Method' | 'Class Query' | 'Routine'"}),"\n",(0,n.jsx)(t.h3,{id:"name",children:"Name"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property Name As %String(MAXLEN = 2000);\n"})}),"\n",(0,n.jsx)(t.p,{children:"Based on the {Type}, the name of the object from where the SQL Statement was extracted: 'Cached Query' The class name which represents the Cached Queries 'Class Method' The name of the class that contains the 'method' name with SQL 'Class Query' The name of the class that contains the 'method' name with SQL 'Routine' The name of the routine that contains Embedded SQL"}),"\n",(0,n.jsx)(t.h3,{id:"methodname",children:"MethodName"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property MethodName As %String(MAXLEN = 2000);\n"})}),"\n",(0,n.jsx)(t.p,{children:"If {Type} is 'Cached Query' OR 'Class Method', then this is the Name of the Method/ClassMethod If {Type} is 'Class Query', then this is the Name of the Query If {Type} is 'Routine', then this is the Name of the Procedure/Function This Name is the module in which the SQL Query Text {SQLTextRaw} can be found"}),"\n",(0,n.jsx)(t.h3,{id:"importpackage",children:"ImportPackage"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property ImportPackage As %String(MAXLEN = 2000);\n"})}),"\n",(0,n.jsx)(t.p,{children:"Comma delimited list of Package names to use compiling SQL Statements"}),"\n",(0,n.jsx)(t.h3,{id:"sqltextraw",children:"SQLTextRaw"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Property SQLTextRaw As list Of %String(MAXLEN = 30000, SQLPROJECTION = "table/column", TRUNCATE = 1, XMLPROJECTION = "wrapped");\n'})}),"\n",(0,n.jsx)(t.p,{children:"Raw SQL Statement Text stored as a $LIST string This is the exact text of the SQL Statement, including SQL Comments, parametes, etc."}),"\n",(0,n.jsx)(t.h3,{id:"sqltextext",children:"SQLTextExt"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Property SQLTextExt As %String(COLLATION = "SQLUPPER(255)", MAXLEN = 30000, TRUNCATE = 1) [ Calculated, SqlComputeCode = { set {*}=$LISTTOSTRING({SQLTextRaw}," ") }, SqlComputed ];\n'})}),"\n",(0,n.jsx)(t.p,{children:"External SQL Statement as a single string This is the exact text of the SQL Statement, including SQL Comments, parametes, etc."}),"\n",(0,n.jsx)(t.h2,{id:"triggers",children:"Triggers"}),"\n",(0,n.jsx)(t.h3,{id:"ondelete",children:"OnDelete"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Trigger OnDelete [ Event = DELETE, Time = AFTER ]\n"})}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"clearsqlstatements",children:"clearSQLStatements"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod clearSQLStatements(ns As %String = "", clearErrs As %Integer = 0, returnType As %Integer = 0, ByRef ptInfo As %RawString) As %Status [ SqlProc ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Method: clearSQLStatements Replaces: ClearStatements (%SYS.PTools.SQLUtilities) [DEPRECATED] Status: New Method to replicate Backward-Compatible Method it 'Replaces' Purpose: Delete all of the data stored in the '%SYS.PTools.UtilSQLStatements' class, based on the specified parameters... Invocation: This method can be invoked in the following ways: ObjectScript: ##class(%SYS.PTools.UtilSQLStatements).clearSQLStatements(...) SQL: CALL %SYS_PTools.UtilSQLStatements_clearSQLStatements(...) SELECT %SYS_PTools.UtilSQLStatements_clearSQLStatements(...) NOTE: This 'SqlProc' method can be invoked with either the CALL-interface or the SELECT-interface. Both interfaces execute the method: the CALL-interface does not return any resulting value, while the SELECT-interface does. Examples: The following examples shows the use of this method: #1 Delete all of the data stored in the '%SYS.PTools.UtilSQLStatements' class in the current namespace: set status=##class(%SYS.PTools.UtilSQLStatements).clearSQLStatements() Data Storage: ^%sqlcq($NAMESPACE,\"PTools\",\"util\",\"SQLStmts\") Parameters: ns - The namespace in which to clear SQL Index/Analysis Statstics [DEFAULT: Current Namespace] clearErrs - 0 = Don't delete the 'PTools' Application Errors 1 = Delete all of the 'PTools' Application Errors [DEFAULT: 0] returnType - 0 = Return a %Status code of either $$$OK or $$$ERROR() 1 = Return the number of Stats rows deleted from the following class: %SYS.PTools.UtilSQLStatements [DEFAULT: 0] ptInfo - A Pass By Reference information array that returns detailed information to the user in the following format: ptInfo(category,variable)=value OR $LB(val1,...,valn) Where category = { \"cnt\" | \"curr\" | \"term\" | ... } variable = A var corresponding to the given 'category' Example: ptInfo(\"cnt\",\"clearSQLStatements\")=The number of rows deleted via this method RETURN Value: Based on the value of the 'returnType' parameter, return one of the following: 0: Return a %Status code of either $$$OK or $$$ERROR() 1: Return the number of Stats rows deleted from the following class; Otherwise, return an error message if an error occurred: %SYS.PTools.UtilSQLStatements"}),"\n",(0,n.jsx)(t.h3,{id:"version",children:"version"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod version() As %String [ SqlName = UtilSQLStatements_version, SqlProc ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Query: UtilSQLStatementsView [SQL: UtilSQLStatementsView] Status: New Query/View to replicate Backward-Compatible Query/View it 'Replaces' Purpose: Class View which returns all of the SQL Statements information stored in the '%SYS.PTools.UtilSQLStatements' class/table"}),"\n",(0,n.jsx)(t.p,{children:"Provide the current version for the UtilSQLStatements class/section of the Performance Tools (PTools) Application"})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(i,{...e})}):i(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>o});var n=s(96540);const a={},l=n.createContext(a);function r(e){const t=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);