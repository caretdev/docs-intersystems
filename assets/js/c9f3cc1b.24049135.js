"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[56569],{94536:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>o,frontMatter:()=>a,toc:()=>c});var s=n(74848),i=n(28453);const a={pagination_prev:null,pagination_next:null},r="%Studio.SourceControl.Change",c=[{value:"Parameters",id:"parameters",level:2},{value:"MANAGEDEXTENT",id:"managedextent",level:3},{value:"SrcVer",id:"srcver",level:3},{value:"Version",id:"version",level:3},{value:"Properties",id:"properties",level:2},{value:"Action",id:"action",level:3},{value:"BackupName",id:"backupname",level:3},{value:"ChangedBy",id:"changedby",level:3},{value:"Committed",id:"committed",level:3},{value:"ActivelyCommitted",id:"activelycommitted",level:3},{value:"CommittedTime",id:"committedtime",level:3},{value:"CommittedTimeDisplay",id:"committedtimedisplay",level:3},{value:"CCR",id:"ccr",level:3},{value:"ExternalName",id:"externalname",level:3},{value:"InternalName",id:"internalname",level:3},{value:"ItemFile",id:"itemfile",level:3},{value:"Name",id:"name",level:3},{value:"P4Issued",id:"p4issued",level:3},{value:"Source",id:"source",level:3},{value:"Tier2",id:"tier2",level:3},{value:"UpdatedTime",id:"updatedtime",level:3},{value:"Methods",id:"methods",level:2},{value:"IsUncommitted",id:"isuncommitted",level:3},{value:"OpenUncommitted",id:"openuncommitted",level:3},{value:"GetUncommitted",id:"getuncommitted",level:3},{value:"SetUncommitted",id:"setuncommitted",level:3},{value:"UpdateUncommitted",id:"updateuncommitted",level:3},{value:"RemoveUncommitted",id:"removeuncommitted",level:3},{value:"RemoveAllUncommitted",id:"removealluncommitted",level:3},{value:"ListUncommitted",id:"listuncommitted",level:3},{value:"DisplayUncommitted",id:"displayuncommitted",level:3},{value:"RefreshUncommitted",id:"refreshuncommitted",level:3},{value:"%OnAddToSaveSet",id:"onaddtosaveset",level:3},{value:"OnToolsCompile",id:"ontoolscompile",level:3},{value:"InstanceVersion",id:"instanceversion",level:3},{value:"BuildNewIndexes",id:"buildnewindexes",level:3}];function l(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"studiosourcecontrolchange",children:"%Studio.SourceControl.Change"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Studio.SourceControl.Change Extends %Persistent [ System = 4 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Class for storing changes to environment"}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(t.h3,{id:"managedextent",children:"MANAGEDEXTENT"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter MANAGEDEXTENT As INTEGER [ Constraint = "0,1", Flags = ENUM ] = 0;\n'})}),"\n",(0,s.jsx)(t.p,{children:"The MANAGEDEXTENT parameter can be set to 0 (zero) to cause the Extent Manager to ignore this class. If set to 1 then the Extent Manager will register globals used by the class and detect collisions. Unmanaged extents (MANAGEDEXTENT = 0) are not checked. Currently, only classes using default storage (%Storage.Persistent) can be managed. This is required since each Namespace will have it's own Change extent"}),"\n",(0,s.jsx)(t.h3,{id:"srcver",children:"SrcVer"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter SrcVer = "$Id: //iris/2024.3.0/databases/sys/cls/Studio/SourceControl/Change.xml#1 $";\n'})}),"\n",(0,s.jsx)(t.p,{children:"This Parameter should be updated when synced from Perforce"}),"\n",(0,s.jsx)(t.h3,{id:"version",children:"Version"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter Version = 29;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Revision number of this class when compiled as part of the //custom_ccrs/_common/config/... branch. This version will not be updated (by design) when the class is integrated to other branches. This allows the user to tell what version of the Studio client tools are in use."}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"action",children:"Action"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property Action As %String(VALUELIST = ",add,edit,predelete,delete,revert") [ Required ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"Action for this change"}),"\n",(0,s.jsx)(t.h3,{id:"backupname",children:"BackupName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property BackupName As %String [ Calculated, SqlComputeCode = {S {*}=$S((({Tier2}))&&($D(^SYS("ChangeControlClass"))):$zobjclassmethod(^SYS("ChangeControlClass"),"BackupName",{InternalName}),1:$zobjclassmethod(##class(%Studio.SourceControl.Interface).SourceControlClassGet(),"BackupName",{InternalName})) }, SqlComputed ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"Returns the name of the backup file for this Item in the file system"}),"\n",(0,s.jsx)(t.h3,{id:"changedby",children:"ChangedBy"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property ChangedBy As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:'User who made this change, and for uncommitted changes this is the person who has it "checked out"'}),"\n",(0,s.jsx)(t.h3,{id:"committed",children:"Committed"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Committed As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Flag indicating whether or not this change has been committed to Perforce"}),"\n",(0,s.jsx)(t.h3,{id:"activelycommitted",children:"ActivelyCommitted"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property ActivelyCommitted As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Flag indicating whether or not this change was committed to Perforce via Source/Change control tools. If ActivelyCommitted = 0 for a committed change, then it might have been either reverted or committed directly by a Perforce client and the Perforce history should be checked to see whether or not it was committed"}),"\n",(0,s.jsx)(t.h3,{id:"committedtime",children:"CommittedTime"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property CommittedTime As %TimeStamp [ InitialExpression = {$zdt("0,0",3)} ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"Time when this change was committed to Perforce (either via an ItemSet, the Studio CheckIn page or through a P4V)"}),"\n",(0,s.jsx)(t.p,{children:'this value should be set in the form $zdt($H,3) (i.e. "0000-00-00 00:00:00" format)'}),"\n",(0,s.jsx)(t.h3,{id:"committedtimedisplay",children:"CommittedTimeDisplay"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property CommittedTimeDisplay As %String [ Calculated, SqlComputeCode = {S {*}=$S({Committed}:{CommittedTime},1:"uncommitted") }, SqlComputed ];\n'})}),"\n",(0,s.jsx)(t.p,{children:'Display the CommittedTime field, showing "Uncommitted" for changes that have not yet been committed'}),"\n",(0,s.jsx)(t.h3,{id:"ccr",children:"CCR"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property CCR As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"When this change was first created, this CCR was associated with it for tracking purposes (optional field)"}),"\n",(0,s.jsx)(t.h3,{id:"externalname",children:"ExternalName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property ExternalName As %String [ Calculated, SqlComputeCode = {S {*}=$S(({Tier2})&&($D(^SYS("ChangeControlClass"))):$zobjclassmethod(^SYS("ChangeControlClass"),"ExternalName",{InternalName}),1:$zobjclassmethod(##class(%Studio.SourceControl.Interface).SourceControlClassGet(),"ExtName",{InternalName})) }, SqlComputed ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"Returns the name of this Item in the file system"}),"\n",(0,s.jsx)(t.h3,{id:"internalname",children:"InternalName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property InternalName As %String(MAXLEN = 200);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Name used within instance to refer to this changed item"}),"\n",(0,s.jsx)(t.h3,{id:"itemfile",children:"ItemFile"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property ItemFile As %String(MAXLEN = 500) [ Required ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Location where this item is stored on disk"}),"\n",(0,s.jsx)(t.h3,{id:"name",children:"Name"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Name As %String(MAXLEN = 200);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Human readable Name referring to this changed item. This will default to the value if InternalName unless it is explicitly set"}),"\n",(0,s.jsx)(t.h3,{id:"p4issued",children:"P4Issued"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property P4Issued As %TimeStamp;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Time of when the P4 command was issued to Perforce",(0,s.jsx)(t.br,{}),"\nNOTE - a change can have a non-null P4Issued and still have Committed=0 because a 'p4 edit' will check it out but it is not committed until 'p4 submit'"]}),"\n",(0,s.jsx)(t.h3,{id:"source",children:"Source"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property Source As %String(VALUELIST = ",studio,terminal,trakcare,healthshare,tier2") [ InitialExpression = "studio" ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"Utility by which this change was made"}),"\n",(0,s.jsx)(t.h3,{id:"tier2",children:"Tier2"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property Tier2 As %Boolean [ Calculated, SqlComputeCode = {S {*}=$S((({Source}="trakcare")||({Source}="healthshare")||({Source}="tier2")):1,1:0)}, SqlComputed ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"Determine if current change is sourced from a tier 2 change control environment"}),"\n",(0,s.jsx)(t.h3,{id:"updatedtime",children:"UpdatedTime"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property UpdatedTime As %TimeStamp [ InitialExpression = {$zdt($H,3)} ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Last time this change was saved locally"}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"isuncommitted",children:"IsUncommitted"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod IsUncommitted(Filename, ByRef ID) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns Boolean value indicating whether or not an item is Uncommitted"}),"\n",(0,s.jsx)(t.h3,{id:"openuncommitted",children:"OpenUncommitted"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod OpenUncommitted(Filename) As %Studio.SourceControl.Change\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns uncommited change object"}),"\n",(0,s.jsx)(t.h3,{id:"getuncommitted",children:"GetUncommitted"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetUncommitted(Filename, ByRef Action, ByRef InternalName, ByRef ChangedBy, ByRef Source, ByRef Updated, ByRef P4Issued, ByRef CCR, ByRef Name) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Retrieves the details from the Uncommitted queue of an Uncommitted item"}),"\n",(0,s.jsx)(t.h3,{id:"setuncommitted",children:"SetUncommitted"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetUncommitted(Filename, Action, InternalName, ChangedBy, Source, P4Issued As %Boolean, CCR, Name, EnforceSourcesPath = 1) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Sets the details for a new Uncommitted item into the Uncommitted queue"}),"\n",(0,s.jsx)(t.h3,{id:"updateuncommitted",children:"UpdateUncommitted"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod UpdateUncommitted(Filename, Action, InternalName, ChangedBy, Source, Updated, P4Issued, CCR, Name) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Update the details for an Uncommitted item in the Uncommitted queue"}),"\n",(0,s.jsx)(t.h3,{id:"removeuncommitted",children:"RemoveUncommitted"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod RemoveUncommitted(FileList, Display = 1, Revert = 0, ActiveCommit = 1, CommitCCR) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Removes one or more Uncommitted items from the Uncommitted queue and changes the exported file to Reaonly (except for reverts of Adds, or new CSP files within the Perforce root)"}),"\n",(0,s.jsx)(t.p,{children:"Default assumed behavior is that the the change was not reverted, and that it was actively committed to Perforce"}),"\n",(0,s.jsx)(t.p,{children:"If the method calling does not know whether it was reverted or committed to Perforce, then it should pass Revert = 0 and ActiveCommit = 0, indicating that the change might have been reverted and the Perforce history should be checked for the definitive answer."}),"\n",(0,s.jsxs)(t.p,{children:["The Revert, ActiveCommit, and CommitCCR arguments only impact the behavior if ",(0,s.jsx)(t.code,{children:'^SYS("SourceControl","ChangeConfig","KeepHistory")=1'}),", which means Change objects should have their Committed flag set to 1 and be saved for historical reference, rather than just deleting the Change objects when RemoveUncommitted() is called."]}),"\n",(0,s.jsx)(t.p,{children:"Arguments are as follows:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["FileList - the name of the file to revert, or an array subscripted by filenames (e.g. ",(0,s.jsx)(t.code,{children:'FileList("C:\\Perforce\\custom_ccrs\\us\\ISCX\\TESTSYS\\cls\\User\\Test.xml")=""'}),")"]}),"\n",(0,s.jsx)(t.li,{children:"Display - boolean flag controlling whether to display the results to standard output (defaults to '1')"}),"\n",(0,s.jsx)(t.li,{children:"Revert - boolean flag controlling whether to revert a checkout which would delete the change from the change history table (defaults to '0')"}),"\n",(0,s.jsx)(t.li,{children:"ActiveCommit - used for historical tracking purposes for the %Studio_SourceControl.Change table"}),"\n",(0,s.jsx)(t.li,{children:"CommitCCR - used for historical tracking purposes for the %Studio_SourceControl.Change table"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"removealluncommitted",children:"RemoveAllUncommitted"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod RemoveAllUncommitted(Display = 1, IncludeRevert = 1) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Removes all Uncommitted items from the Uncommitted queue"}),"\n",(0,s.jsx)(t.h3,{id:"listuncommitted",children:"ListUncommitted"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ListUncommitted(ByRef UncommittedList = "", IncludeRevert = 0, RefreshUncommitted = 1) As %Status\n'})}),"\n",(0,s.jsx)(t.p,{children:"Lists the Uncommitted items from the Uncommitted queue"}),"\n",(0,s.jsx)(t.p,{children:"Only lists items with action of type 'revert' if the IncludeRevert flag is passed as true"}),"\n",(0,s.jsx)(t.h3,{id:"displayuncommitted",children:"DisplayUncommitted"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DisplayUncommitted(ByRef UncommittedList, IncludeRevert = 0) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Displays a list of Uncommitted items from the Uncommitted queue to the output device"}),"\n",(0,s.jsx)(t.p,{children:"Only lists items with action of type 'revert' if the IncludeRevert flag is passed as true"}),"\n",(0,s.jsx)(t.h3,{id:"refreshuncommitted",children:"RefreshUncommitted"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod RefreshUncommitted(Display = 1, IncludeRevert = 0) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Goes through Uncommitted queue and removes any items of action 'edit' or 'add' which are ReadOnly or non-existent on the filesystem"}),"\n",(0,s.jsx)(t.h3,{id:"onaddtosaveset",children:"%OnAddToSaveSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnAddToSaveSet(depth As %Integer = 3, insert As %Integer = 0, callcount As %Integer = 0) As %Status [ Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked when the current object is added to the SaveSet, either because %Save() was invoked on this object or on an object that references this object. %OnAddToSaveSet can modify the current object. It can also add other objects to the current SaveSet by invoking %AddToSaveSet or remove objects by calling %RemoveFromSaveSet."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error status then %Save() will fail and the transaction will be rolled back."}),"\n",(0,s.jsx)(t.h3,{id:"ontoolscompile",children:"OnToolsCompile"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod OnToolsCompile() [ CodeMode = objectgenerator, Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Handles all compile-time logic for this class [Previously private]"}),"\n",(0,s.jsx)(t.h3,{id:"instanceversion",children:"InstanceVersion"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod InstanceVersion() As %Numeric [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns value the Major.Minor version for this instance, so it can be used in comparison code which makes sure certain features are used in appropriate versions"}),"\n",(0,s.jsx)(t.h3,{id:"buildnewindexes",children:"BuildNewIndexes"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod BuildNewIndexes() [ CodeMode = objectgenerator, Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Check indexes defined in this class build them if they have never been built. Any errors are thrown as an exception."})]})}function o(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(96540);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);