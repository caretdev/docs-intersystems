"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[6190],{51744:(e,s,r)=>{r.r(s),r.d(s,{contentTitle:()=>i,default:()=>c,frontMatter:()=>a,toc:()=>l});var n=r(74848),t=r(28453);const a={pagination_prev:null,pagination_next:null},i="%DeepSee.WorksheetEngine",l=[{value:"Parameters",id:"parameters",level:2},{value:"DOMAIN",id:"domain",level:3},{value:"Methods",id:"methods",level:2},{value:"%LoadDataSet",id:"loaddataset",level:3},{value:"TestTokens",id:"testtokens",level:3},{value:"%Tokenize",id:"tokenize",level:3},{value:"TestPrecedence",id:"testprecedence",level:3},{value:"IsValidIdent",id:"isvalidident",level:3},{value:"IsUnaryOperator",id:"isunaryoperator",level:3},{value:"IsBinaryOperator",id:"isbinaryoperator",level:3},{value:"IsUnaryOperatorChar",id:"isunaryoperatorchar",level:3},{value:"IsOperatorChar",id:"isoperatorchar",level:3},{value:"IsSpecialChar",id:"isspecialchar",level:3},{value:"IsIdentChar",id:"isidentchar",level:3},{value:"IsWhiteSpace",id:"iswhitespace",level:3},{value:"%Evaluate",id:"evaluate",level:3},{value:"Test",id:"test",level:3},{value:"%PrintParseNode",id:"printparsenode",level:3},{value:"%Parse",id:"parse",level:3},{value:"%GenExpression",id:"genexpression",level:3},{value:"%EvalExpression",id:"evalexpression",level:3},{value:"%CreateTestWorksheet",id:"createtestworksheet",level:3},{value:"%LoadWorksheet",id:"loadworksheet",level:3},{value:"%SaveWorksheet",id:"saveworksheet",level:3}];function o(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"deepseeworksheetengine",children:"%DeepSee.WorksheetEngine"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class %DeepSee.WorksheetEngine Extends %RegisteredObject [ Abstract, System = 4 ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Server-side implementation and utilities for Worksheet formulae."}),"\n",(0,n.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(s.h3,{id:"domain",children:"DOMAIN"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter DOMAIN = "%DeepSee";\n'})}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"loaddataset",children:"%LoadDataSet"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %LoadDataSet(pWorksheetName As %String, pGrid As %ZEN.Component.dynaGrid, pDataSet As %ZEN.Auxiliary.dataSet, pComputed As %Boolean = 0) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Given a worksheet name, open it and load the data needed to drive a dyna grid control. If pComputed is true return the computed values for each cell, otherwise return the original values, which could include formula."}),"\n",(0,n.jsx)(s.h3,{id:"testtokens",children:"TestTokens"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TestTokens(pExpr As %String) [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"DIAGNOSTIC!!!"}),"\n",(0,n.jsx)(s.h3,{id:"tokenize",children:"%Tokenize"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %Tokenize(expr As %String, ByRef pTokens As %String) As %String [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Split the formula expr into a token list:",(0,n.jsx)(s.br,{}),'\ntokens(n,"token") = token',(0,n.jsx)(s.br,{}),'\ntokens(n,"pos") = position in expr',(0,n.jsx)(s.br,{}),'\ntokens(n,"type") = string | number | ident | func |op |unary | ( | ) | , | end Returns "" if the formula is correct else an error message. Note that idents are also returned as escaped: [a]']}),"\n",(0,n.jsx)(s.h3,{id:"testprecedence",children:"TestPrecedence"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TestPrecedence(op1 As %String, op2 As %String) As %Boolean [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns true if op1 has precedence over op2."}),"\n",(0,n.jsx)(s.h3,{id:"isvalidident",children:"IsValidIdent"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsValidIdent(token As %String) As %Boolean [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Test if token is a valid (unquoted) identifier."}),"\n",(0,n.jsx)(s.h3,{id:"isunaryoperator",children:"IsUnaryOperator"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsUnaryOperator(token As %String) As %Boolean [ CodeMode = expression, Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Test if token is a unary operator"}),"\n",(0,n.jsx)(s.h3,{id:"isbinaryoperator",children:"IsBinaryOperator"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsBinaryOperator(token As %String) As %Boolean [ CodeMode = expression, Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Test if token is a binary operator"}),"\n",(0,n.jsx)(s.h3,{id:"isunaryoperatorchar",children:"IsUnaryOperatorChar"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsUnaryOperatorChar(char As %String) As %Boolean [ CodeMode = expression, Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Test if char is a part of an unary operator name"}),"\n",(0,n.jsx)(s.h3,{id:"isoperatorchar",children:"IsOperatorChar"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsOperatorChar(char As %String) As %Boolean [ CodeMode = expression, Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Test if char is a part of an operator name"}),"\n",(0,n.jsx)(s.h3,{id:"isspecialchar",children:"IsSpecialChar"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsSpecialChar(char As %String) As %Boolean [ CodeMode = expression, Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:'Test if char is a special character "(" ")" or ","'}),"\n",(0,n.jsx)(s.h3,{id:"isidentchar",children:"IsIdentChar"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsIdentChar(char As %String) As %Boolean [ CodeMode = expression, Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Test if char can be part of an identifier"}),"\n",(0,n.jsx)(s.h3,{id:"iswhitespace",children:"IsWhiteSpace"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsWhiteSpace(char As %String) As %Boolean [ CodeMode = expression, Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Test if char is a whitespace character"}),"\n",(0,n.jsx)(s.h3,{id:"evaluate",children:"%Evaluate"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %Evaluate(pExpr As %String, pContextObj As %RegisteredObject = "", Output pErrorMsg As %String, Output pSC As %Status) As %String [ Internal ]\n'})}),"\n",(0,n.jsx)(s.p,{children:"Evaluate the given expression."}),"\n",(0,n.jsx)(s.h3,{id:"test",children:"Test"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Test(expr As %String, ByRef tree) [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"DIAGNOSTIC!!!"}),"\n",(0,n.jsx)(s.h3,{id:"printparsenode",children:"%PrintParseNode"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %PrintParseNode(ByRef tree, node As %Integer, level As %Integer = 0) [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"parse",children:"%Parse"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %Parse(pExpr As %String, Output tree As %String, Output pPropList As %String, Output pFuncList As %String) As %String [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Parse the expr into a parse tree tree",(0,n.jsx)(s.br,{}),'\nReturns "" if ok or else an error message.',(0,n.jsx)(s.br,{}),"\npPropList returns an array of properties referenced by the expression. pFuncList returns an array of functions referenced by the expression."]}),"\n",(0,n.jsx)(s.h3,{id:"genexpression",children:"%GenExpression"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GenExpression(ByRef pErr As %String, pContext As %String, ByRef tree As %String, node As %String = "") As %String\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Generate an executable COS expression for part of the parse tree",(0,n.jsx)(s.br,{}),"\ncontext is the name of the object variable containing runtime context.",(0,n.jsx)(s.br,{}),'\nReturns "" for error (assumes that parse tree has already been checked) NOT USED']}),"\n",(0,n.jsx)(s.h3,{id:"evalexpression",children:"%EvalExpression"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %EvalExpression(ByRef pErr As %String, pContext As %String, ByRef tree As %String, node As %String = "") As %String\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Evaluates part of the parse tree.",(0,n.jsx)(s.br,{}),"\npContext is the object variable containing runtime context.",(0,n.jsx)(s.br,{}),'\nReturns "" for error (assumes that parse tree has already been checked)']}),"\n",(0,n.jsx)(s.h3,{id:"createtestworksheet",children:"%CreateTestWorksheet"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %CreateTestWorksheet(pName As %String, Output pWorksheet) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Diagnostic method. Create a test worksheet and save it."}),"\n",(0,n.jsx)(s.h3,{id:"loadworksheet",children:"%LoadWorksheet"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %LoadWorksheet(pWorksheetName As %String, pComputed As %Boolean = 0, Output pObject As %DeepSee.UserLibrary.Worksheet) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Given a worksheet name (with no extension), open it and load the data needed to drive a json provider. If pComputed is true return the computed values for each cell, otherwise return the original values, which could include formula."}),"\n",(0,n.jsx)(s.h3,{id:"saveworksheet",children:"%SaveWorksheet"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %SaveWorksheet(pWorksheetName As %String, pObject As %ZEN.proxyObject) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Given a worksheet name and a proxy object, save it as a folder item."})]})}function c(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>l});var n=r(96540);const t={},a=n.createContext(t);function i(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);