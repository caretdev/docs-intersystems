"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[53593],{81802:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>c,frontMatter:()=>r,toc:()=>i});var a=n(74848),s=n(28453);const r={pagination_prev:null,pagination_next:null},l="%SYSTEM.SQL.Statement",i=[{value:"Methods",id:"methods",level:2},{value:"Clean",id:"clean",level:3},{value:"ClearAll",id:"clearall",level:3},{value:"ClearRelation",id:"clearrelation",level:3},{value:"ClearSchema",id:"clearschema",level:3},{value:"ClearStatement",id:"clearstatement",level:3},{value:"ExportAllFrozenPlans",id:"exportallfrozenplans",level:3},{value:"ExportFrozenPlans",id:"exportfrozenplans",level:3},{value:"FreezeAll",id:"freezeall",level:3},{value:"FreezeSchema",id:"freezeschema",level:3},{value:"FreezeRelation",id:"freezerelation",level:3},{value:"FreezeStatement",id:"freezestatement",level:3},{value:"UnfreezeAll",id:"unfreezeall",level:3},{value:"UnfreezeSchema",id:"unfreezeschema",level:3},{value:"UnfreezeRelation",id:"unfreezerelation",level:3},{value:"UnfreezeStatement",id:"unfreezestatement",level:3},{value:"ImportFrozenPlans",id:"importfrozenplans",level:3}];function o(e){const t={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"systemsqlstatement",children:"%SYSTEM.SQL.Statement"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Class %SYSTEM.SQL.Statement Extends %SYSTEM.Help [ Abstract, Not ProcedureBlock, System = 4 ]\n"})}),"\n",(0,a.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(t.h3,{id:"clean",children:"Clean"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Clean()\n"})}),"\n",(0,a.jsx)(t.p,{children:"Cleanup any SQL statement index entries that no longer have any routines/classes associated with them"}),"\n",(0,a.jsx)(t.h3,{id:"clearall",children:"ClearAll"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ClearAll() As %Status [ ProcedureBlock = 1 ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Clear SQL statistics for all query plans in this namespace Example: set st=$SYSTEM.SQL.Statement.ClearAll()"}),"\n",(0,a.jsx)(t.h3,{id:"clearrelation",children:"ClearRelation"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ClearRelation(pRelation As %String) As %Status [ ProcedureBlock = 1 ]\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Clear SQL statistics for all query plans for the relation provided in ",(0,a.jsx)(t.em,{children:"pRelation"})]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameter:"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"pRelation"}),' must be in internal qualified format, which is typically simply Schema.Tablename, but if tablename itself contains any "." characters, it needs to be in Schema_"."_$translate(Tablename,".",$Char(2)) format Example: Clear SQL statistics for all statements for the current namespace for each statement that references the XLT.Person table: set st=$SYSTEM.SQL.Statement.ClearRelation("XLT.Person")']}),"\n",(0,a.jsx)(t.h3,{id:"clearschema",children:"ClearSchema"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ClearSchema(pSchema As %String) As %Status [ ProcedureBlock = 1 ]\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Clear SQL statistics for all query plans for the schema name provided in ",(0,a.jsx)(t.em,{children:"pSchema"}),' Example: Clear SQL statistics for all statements for the current namespace for each statement that references a relation in the XLT schema: set st=$SYSTEM.SQL.Statement.ClearSchema("XLT")']}),"\n",(0,a.jsx)(t.h3,{id:"clearstatement",children:"ClearStatement"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ClearStatement(pStatementHash As %String) As %Status [ ProcedureBlock = 1 ]\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Clear SQL statistics for all query plans with the statement hash id provided in ",(0,a.jsx)(t.em,{children:"pStatementHash"}),' Example: Clear SQL statistics for statement identified by hash "3DgIqc72NS+Np6nybddb719NKb8=": set st=$SYSTEM.SQL.Statement.ClearStatement("3DgIqc72NS+Np6nybddb719NKb8=")']}),"\n",(0,a.jsx)(t.h3,{id:"exportallfrozenplans",children:"ExportAllFrozenPlans"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ExportAllFrozenPlans(Filename As %Library.String = "") As %Library.Status [ ProcedureBlock = 1 ]\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Exports all SQL Statement Index entries in this namespace, including query plans. Generated file can be loaded using $SYSTEM.SQL.Statement.ImportFrozenPlans().",(0,a.jsx)(t.br,{}),"\nThe main reason to export/import an SQL Statement entry is to move a frozen plan from one location to another. Other than moving a frozen plan, there is not much benefit of moving an SQL Statement definition from one location to another. When exporting SQL Statement definitions, the Locations (routines) the SQL Statement is defined in is not exported. This is because it is possible the Locations are different or don't exist on the target system. Recompiling the class/routines that contain the SQL Statement on the target system will redefine the Location entries for the SQL Statement definition.",(0,a.jsx)(t.br,{}),"\nAny SQL Statements the current user does not have privilege to run will not be exported."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameter:"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"Filename"})," Name of the file to output the SQL Statement definitions to. ",(0,a.jsx)(t.strong,{children:"Examples"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:'set st=$SYSTEM.SQL.Statement.ExportAllFrozenPlans("C:\\MyAllStatements.xml") // Exports all SQL Statements'}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"exportfrozenplans",children:"ExportFrozenPlans"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ExportFrozenPlans(Filename As %Library.String = "", Hash As %Library.String = "") As %Library.Status [ ProcedureBlock = 1 ]\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Export an SQL Statement Index entry, including query plan. Generated file can be loaded using $SYSTEM.SQL.Statement.ImportFrozenPlans().",(0,a.jsx)(t.br,{}),"\nThe main reason to export/import an SQL Statement entry is to move a frozen plan from one location to another. Other than moving a frozen plan, there is not much benefit of moving an SQL Statement definition from one location to another. When exporting SQL Statement definitions, the Locations (routines) the SQL Statement is defined in is not exported. This is because it is possible the Locations are different or don't exist on the target system. Recompiling the class/routines that contain the SQL Statement on the target system will redefine the Location entries for the SQL Statement definition.",(0,a.jsx)(t.br,{}),"\nIf the current user is not privileged to execute this SQL Statement, a privilege error will be returned and the export will not occur."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameter:"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"Filename"})," Name of the file to output the SQL Statement definition to. ",(0,a.jsx)(t.em,{children:"Hash"})," SQL Statement definition hash, used as the ID of the SQL Statement Definition index entry ",(0,a.jsx)(t.strong,{children:"Examples"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:'set st=$SYSTEM.SQL.Statement.ExportFrozenPlans("C:\\MyStatement.xml","Kod99B0VFOn/aXQ9PyRGfb64q04=") // Exports SQL Statement with ID hash of \'Kod99B0VFOn/aXQ9PyRGfb64q04=\''}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"freezeall",children:"FreezeAll"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod FreezeAll() As %Status [ ProcedureBlock = 1 ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Freeze all query plans in this namespace Example: set st=$SYSTEM.SQL.Statement.FreezeAll()"}),"\n",(0,a.jsx)(t.h3,{id:"freezeschema",children:"FreezeSchema"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod FreezeSchema(schema As %String = "") As %Status [ ProcedureBlock = 1 ]\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Freeze all query plans for the ",(0,a.jsx)(t.em,{children:"schema"}),' Example: set st=$SYSTEM.SQL.Statement.FreezeSchema("XLT")']}),"\n",(0,a.jsx)(t.h3,{id:"freezerelation",children:"FreezeRelation"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod FreezeRelation(relation As %String = "") As %Status [ ProcedureBlock = 1 ]\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Freeze all query plans for the ",(0,a.jsx)(t.em,{children:"relation"}),' Example: set st=$SYSTEM.SQL.Statement.FreezeRelation("XLT.Person")']}),"\n",(0,a.jsx)(t.h3,{id:"freezestatement",children:"FreezeStatement"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod FreezeStatement(hash As %String = "") As %Status [ ProcedureBlock = 1 ]\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Freeze the query plan with the statement hash provided in ",(0,a.jsx)(t.em,{children:"hash"}),' Example: set st=$SYSTEM.SQL.Statement.FreezeStatement("3DgIqc72NS+Np6nybddb719NKb8=")']}),"\n",(0,a.jsx)(t.h3,{id:"unfreezeall",children:"UnfreezeAll"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod UnfreezeAll(upgradeOnly As %Boolean = 0) As %Status [ ProcedureBlock = 1 ]\n"})}),"\n",(0,a.jsxs)(t.p,{children:["If ",(0,a.jsx)(t.em,{children:"upgradeOnly"})," is false, unfreeze all query plans that are marked Frozen/Explicit or Frozen/Upgrade. This is the default. If ",(0,a.jsx)(t.em,{children:"upgradeOnly"})," is true, unfreeze all query plans that are marked Frozen/Upgrade Example: set st=$SYSTEM.SQL.Statement.UnfreezeAll()"]}),"\n",(0,a.jsx)(t.h3,{id:"unfreezeschema",children:"UnfreezeSchema"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod UnfreezeSchema(schema As %String = "", upgradeOnly As %Boolean = 0) As %Status [ ProcedureBlock = 1 ]\n'})}),"\n",(0,a.jsxs)(t.p,{children:["If ",(0,a.jsx)(t.em,{children:"upgradeOnly"})," is false, unfreeze all query plans for the ",(0,a.jsx)(t.em,{children:"schema"})," that are marked Frozen/Explicit or Frozen/Upgrade. This is the default. If ",(0,a.jsx)(t.em,{children:"upgradeOnly"})," is true, unfreeze all query plans for the ",(0,a.jsx)(t.em,{children:"schema"}),' that are marked Frozen/Upgrade Example: set st=$SYSTEM.SQL.Statement.UnfreezeSchema("XLT")']}),"\n",(0,a.jsx)(t.h3,{id:"unfreezerelation",children:"UnfreezeRelation"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod UnfreezeRelation(relation As %String = "", upgradeOnly As %Boolean = 0) As %Status [ ProcedureBlock = 1 ]\n'})}),"\n",(0,a.jsxs)(t.p,{children:["If ",(0,a.jsx)(t.em,{children:"upgradeOnly"})," is false, unfreeze all query plans for the ",(0,a.jsx)(t.em,{children:"relation"})," that are marked Frozen/Explicit or Frozen/Upgrade. This is the default. If ",(0,a.jsx)(t.em,{children:"upgradeOnly"})," is true, unfreeze all query plans for the ",(0,a.jsx)(t.em,{children:"relation"}),' that are marked Frozen/Upgrade Example: set st=$SYSTEM.SQL.Statement.UnfreezeRelation("XLT.Person")']}),"\n",(0,a.jsx)(t.h3,{id:"unfreezestatement",children:"UnfreezeStatement"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod UnfreezeStatement(hash As %String = "", upgradeOnly As %Boolean = 0) As %Status [ ProcedureBlock = 1 ]\n'})}),"\n",(0,a.jsxs)(t.p,{children:["If ",(0,a.jsx)(t.em,{children:"upgradeOnly"})," is false, unfreeze the query plan with the statement hash provided in ",(0,a.jsx)(t.em,{children:"hash"})," if it's marked Frozen/Explicit or Frozen/Upgrade. This is the default. If ",(0,a.jsx)(t.em,{children:"upgradeOnly"})," is true, unfreeze the query plan with the statement hash provided in ",(0,a.jsx)(t.em,{children:"hash"}),' if it\'s marked Frozen/Upgrade Example: set st=$SYSTEM.SQL.Statement.UnfreezeStatement("3DgIqc72NS+Np6nybddb719NKb8=")']}),"\n",(0,a.jsx)(t.h3,{id:"importfrozenplans",children:"ImportFrozenPlans"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ImportFrozenPlans(Filename As %Library.String = "", Display As %Library.Boolean = 1) As %Library.Status [ ProcedureBlock = 1 ]\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Import a file containing SQL Statement Index entries. Files can be loaded that were generated with $SYSTEM.SQL.Statement.ExportStatement() or $SYSTEM.SQL.Statement.ExportAllStatements().",(0,a.jsx)(t.br,{}),"\nThe main reason to export/import an SQL Statement entry is to move a frozen plan from one location to another. Other than moving a frozen plan, there is not much benefit of moving an SQL Statement definition from one location to another. When exporting SQL Statement definitions, the Locations (routines) the SQL Statement is defined in is not exported. This is because it is possible the Locations are different or don't exist on the target system. Recompiling the class/routines that contain the SQL Statement on the target system will redefine the Location entries for the SQL Statement definition."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameter:"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"Filename"})," Name of the file to output the SQL Statement definition to. ",(0,a.jsx)(t.em,{children:"Display"})," 1/0 Flag. If 1, display import progress on the screen. Default is 1. ",(0,a.jsx)(t.strong,{children:"Examples"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:'set st=$SYSTEM.SQL.Statement.ImportFrozenPlans("C:\\MyStatements.xml",1) // Imports SQL Statement(s) defined in the file'}),"\n"]})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var a=n(96540);const s={},r=a.createContext(s);function l(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);