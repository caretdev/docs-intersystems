"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[78058],{33850:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>l,default:()=>d,frontMatter:()=>a,toc:()=>i});var n=t(74848),r=t(28453);const a={pagination_prev:null,pagination_next:null},l="%SYSTEM.TSQL",i=[{value:"Methods",id:"methods",level:2},{value:"CurrentSettings",id:"currentsettings",level:3},{value:"GetDialect",id:"getdialect",level:3},{value:"SetDialect",id:"setdialect",level:3},{value:"GetAnsiNulls",id:"getansinulls",level:3},{value:"SetAnsiNulls",id:"setansinulls",level:3},{value:"GetCaseInsCompare",id:"getcaseinscompare",level:3},{value:"SetCaseInsCompare",id:"setcaseinscompare",level:3},{value:"GetEqualLiteralReplacement",id:"getequalliteralreplacement",level:3},{value:"SetEqualLiteralReplacement",id:"setequalliteralreplacement",level:3},{value:"GetQuotedIdentifier",id:"getquotedidentifier",level:3},{value:"SetQuotedIdentifier",id:"setquotedidentifier",level:3},{value:"GetTrace",id:"gettrace",level:3},{value:"SetTrace",id:"settrace",level:3},{value:"GetOwnerAsSchema",id:"getownerasschema",level:3},{value:"SetOwnerAsSchema",id:"setownerasschema",level:3}];function c(e){const s={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"systemtsql",children:"%SYSTEM.TSQL"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class %SYSTEM.TSQL Extends Help [ Abstract, Not ProcedureBlock, System = 4 ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"The %SYSTEM.TSQL class provides an interface for managing InterSystems IRIS TSQL configurations."}),"\n",(0,n.jsxs)(s.p,{children:["You can use it via the special ",(0,n.jsx)(s.strong,{children:"$SYSTEM"})," object:",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.code,{children:'Do $SYSTEM.TSQL.SetAnsiNulls("Sybase","on")'})]}),"\n",(0,n.jsx)(s.p,{children:"You can call help to get a list of all entry points:"}),"\n",(0,n.jsx)(s.p,{children:"Do $SYSTEM.TSQL.Help()"}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"currentsettings",children:"CurrentSettings"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CurrentSettings()\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method will return the current setting that are defined for InterSystems TSQL compatibility features."}),"\n",(0,n.jsx)(s.h3,{id:"getdialect",children:"GetDialect"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetDialect() As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method returns the current default TSQL Dialect for the System. The two options are Sybase and MSSQL"}),"\n",(0,n.jsx)(s.h3,{id:"setdialect",children:"SetDialect"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetDialect(Dialect) As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method sets the default TSQL Dialect for the System."}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Parameter:"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"Dialect"})," Name of the TSQL dialect: Sybase or MSSQL. The Default is SQL",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Returns:"})," The previous default TSQL Dialect value or an invalid error message"]}),"\n",(0,n.jsx)(s.h3,{id:"getansinulls",children:"GetAnsiNulls"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetAnsiNulls() As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method returns the current default TSQL dialect and the value for TSQL Ansi Null behavior. valid values are ON or OFF"}),"\n",(0,n.jsx)(s.h3,{id:"setansinulls",children:"SetAnsiNulls"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetAnsiNulls(Dialect, flag) As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method sets the current default TSQL dialect and the value for TSQL Ansi Null behavior."}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"Dialect"})," Name of the TSQL dialect: Sybase or MSSQL ",(0,n.jsx)(s.em,{children:"flag"})," Value for TSQL Ansi NULL behavior: ON or OFF",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Returns:"})," The previous default TSQL dialect value and Ansi Null behavior"]}),"\n",(0,n.jsx)(s.h3,{id:"getcaseinscompare",children:"GetCaseInsCompare"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetCaseInsCompare() As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method returns the current default TSQL dialect and the value for TSQL non-case-sensitive equality comparison behavior. valid values are ON or OFF"}),"\n",(0,n.jsx)(s.h3,{id:"setcaseinscompare",children:"SetCaseInsCompare"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetCaseInsCompare(Dialect, flag) As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method sets the current default TSQL dialect and the value for TSQL non-case-sensitive equality comparison behavior."}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"Dialect"})," Name of the TSQL dialect: Sybase or MSSQL ",(0,n.jsx)(s.em,{children:"flag"})," Value for TSQL non-case-sensitive equality comparison behavior: ON or OFF",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Returns:"})," The previous default TSQL dialect value and TSQL non-case-sensitive equality comparison behavior."]}),"\n",(0,n.jsx)(s.h3,{id:"getequalliteralreplacement",children:"GetEqualLiteralReplacement"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetEqualLiteralReplacement() As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method returns the current default TSQL dialect and the value for TSQL equal literal replacement ( = conditions and IN clause) behavior. valid values are ON or OFF"}),"\n",(0,n.jsx)(s.h3,{id:"setequalliteralreplacement",children:"SetEqualLiteralReplacement"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetEqualLiteralReplacement(Dialect, flag) As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method sets the current default TSQL dialect and the value for TSQL equal literal replacement ( = conditions and IN clause) behavior."}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"Dialect"})," Name of the TSQL dialect: Sybase or MSSQL ",(0,n.jsx)(s.em,{children:"flag"})," Value for TSQL equal literal replacement ( = conditions and IN clause) behavior: ON or OFF",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Returns:"})," The previous default TSQL dialect value and TSQL equal literal replacement ( = conditions and IN clause) behavior."]}),"\n",(0,n.jsx)(s.h3,{id:"getquotedidentifier",children:"GetQuotedIdentifier"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetQuotedIdentifier() As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method returns the current default TSQL dialect and the value for TSQL Quoted Identifier behavior. valid values are ON or OFF"}),"\n",(0,n.jsx)(s.h3,{id:"setquotedidentifier",children:"SetQuotedIdentifier"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetQuotedIdentifier(Dialect, flag) As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method sets the current default TSQL dialect and the value for TSQL Quoted Identifier behavior."}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"Dialect"})," Name of the TSQL dialect: Sybase or MSSQL ",(0,n.jsx)(s.em,{children:"flag"})," Value for TSQL Quoted Identifier behavior: ON or OFF",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Returns:"})," The previous default TSQL dialect value and TSQL Quoted Identifier behavior."]}),"\n",(0,n.jsx)(s.h3,{id:"gettrace",children:"GetTrace"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetTrace() As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method takes no arguments and returns the current setting for TSQL TRACE."}),"\n",(0,n.jsx)(s.h3,{id:"settrace",children:"SetTrace"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetTrace(flag) As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:'This method sets the TSQL TRACE behavior to ON or OFF. When TRACE=ON, a TSQL procedure will create a log file in the current namespace\'s directory named "tsql"_$j_".log" that contains the statements executed when the procedure is run. Changing the TRACE setting only takes effect when the class is recompiled or the TSQL procedure is [re]created.'}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"flag"})," Value for TSQL TRACE setting: ON or OFF",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Returns:"})," The previous TSQL TRACE setting or an error message"]}),"\n",(0,n.jsx)(s.h3,{id:"getownerasschema",children:"GetOwnerAsSchema"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetOwnerAsSchema() As %String [ ProcedureBlock = 1 ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method takes no arguments and returns the current setting for TSQL OWNER_AS_SCHEMA"}),"\n",(0,n.jsx)(s.h3,{id:"setownerasschema",children:"SetOwnerAsSchema"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetOwnerAsSchema(flag) As %String [ ProcedureBlock = 1 ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method sets the TSQL OWNER_AS_SCHEMA behavior to ON or OFF. When OWNER_AS_SCHEMA=ON, TSQL will convert database.owner.table to database_owner.table. If owner is missing, say database..table, $username will be used for the owner resulting in database_$$$LOWER($username).table Changing the OWNER_AS_SCHEMA setting only takes effect when the TSQL procedure class is [re]compiled or cached queries compiled in a TSQL dialect are purged and recreated."}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.em,{children:"flag"})," Value for TSQL OWNER_AS_SCHEMA setting: ON or OFF",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.strong,{children:"Returns:"})," The previous TSQL OWNER_AS_SCHEMA setting or an error message"]})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>i});var n=t(96540);const r={},a=n.createContext(r);function l(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);