"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[24393],{66369:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>i,default:()=>c,frontMatter:()=>a,toc:()=>l});var r=n(74848),t=n(28453);const a={pagination_prev:null,pagination_next:null},i="%SYS.Monitor.SAM.Abstract",l=[{value:"Parameters",id:"parameters",level:2},{value:"PRODUCT",id:"product",level:3},{value:"Properties",id:"properties",level:2},{value:"SAMValues",id:"samvalues",level:3},{value:"SAMInfo",id:"saminfo",level:3},{value:"Methods",id:"methods",level:2},{value:"SetSensor",id:"setsensor",level:3},{value:"SetSensorLabels",id:"setsensorlabels",level:3},{value:"SetSensorInfo",id:"setsensorinfo",level:3}];function o(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"sysmonitorsamabstract",children:"%SYS.Monitor.SAM.Abstract"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Class %SYS.Monitor.SAM.Abstract Extends %SYS.Monitor.AbstractSensor\n"})}),"\n",(0,r.jsx)(s.p,{children:"Abstract class to provide Sensor metrics for the SAM (System Alerting and Monitoring) application and Prometheus API. All classes which define SAM metrics should inherit from this class. Users may inherit from this class to create application metrics. The application classes may then be registered using SYS.Monitor.SAM.Config.AddApplicationClass(), and they will be added to the system metrics."}),"\n",(0,r.jsx)(s.p,{children:"Note that this will be called directly by the SAM REST service, and not by the System Monitor. The main SAM polling API will call GetSensors(), which should create the array of:"}),"\n",(0,r.jsx)(s.p,{children:"SAMValues(key)=value or SAMValues(key,item)=value."}),"\n",(0,r.jsxs)(s.p,{children:["Users may call SetSensor(Sensor, Value, Item) or directly set ..SAMValues for each metric.",(0,r.jsx)(s.br,{}),"\nAll 'values' MUST BE NUMERIC values to be used for SAM and/or Prometheus."]}),"\n",(0,r.jsx)(s.p,{children:"Since this will be called directly by the SAM REST service, users should be careful to not introduce any hangs, pauses, or any coding excesses here, as this may be called at intervals of only a few seconds."}),"\n",(0,r.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(s.h3,{id:"product",children:"PRODUCT"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter PRODUCT = "unknown";\n'})}),"\n",(0,r.jsx)(s.p,{children:'Fill in the Product name here, which will be appended to all metric names. This should be a short, lower-case prefix to indicate the company or application. InterSystems IRIS will use "iris" for system metrics.'}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.h3,{id:"samvalues",children:"SAMValues"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property SAMValues As %String [ Internal, MultiDimensional ];\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Local array to hold all Sensor values, in the format SAMValues(key,item)=value.",(0,r.jsx)(s.br,{}),"\nFor use by SAM and Prometheus, the 'value' must be numeric."]}),"\n",(0,r.jsx)(s.h3,{id:"saminfo",children:"SAMInfo"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property SAMInfo As %String [ Internal, MultiDimensional ];\n"})}),"\n",(0,r.jsx)(s.p,{children:'Local array to hold all Sensor info values, in the format SAMinfo(metric,token)=value. Tokens ("HELP", "TYPE" and "UNIT") are used to create Prometheus comment lines, with information about the individual Sensors.'}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"setsensor",children:"SetSensor"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Method SetSensor(Sensor As %String, Value As %String, Item As %String = "") As %Integer [ Final ]\n'})}),"\n",(0,r.jsx)(s.p,{children:"Override Dashboard sensors which are persistent, and System sensors which get passed to Subscribers. Just store all Sensors in the local SAMValues array."}),"\n",(0,r.jsx)(s.h3,{id:"setsensorlabels",children:"SetSensorLabels"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Method SetSensorLabels(Sensor As %String, Value As %String, ByRef Labels As %String = "") As %Integer [ Final ]\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Extension of SetSensor which allows for multiple Prometheus 'labels' for a metric.",(0,r.jsx)(s.br,{}),"\nLabels are passed as an array of label/value pairs, e.g. for a database metric we might use"]}),"\n",(0,r.jsxs)(s.p,{children:['Labels("id")="USER"',(0,r.jsx)(s.br,{}),'\nLabels("dir")="c:\\\\intersystems\\\\iris\\\\mgr\\\\user"']}),"\n",(0,r.jsx)(s.p,{children:'By convention, metrics with a single label value use the "id" key. So, for consistency, multiple labels should always include an "id" label which identifies that metric instance. Other labels can be used to add further information about the metric.'}),"\n",(0,r.jsx)(s.h3,{id:"setsensorinfo",children:"SetSensorInfo"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Method SetSensorInfo(Sensor As %String, Help As %String = "", Type As %String = "", Unit As %String = "") As %Integer [ Final ]\n'})}),"\n",(0,r.jsx)(s.p,{children:"Add informational data (Help, Type and Unit) describing a Sensor (i.e. Metric) Valid values for 'Type' are (counter, gauge, histogram, summary, or untyped)"})]})}function c(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>l});var r=n(96540);const t={},a=r.createContext(t);function i(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);