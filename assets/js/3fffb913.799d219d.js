"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[47287],{10947:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>d,default:()=>a,frontMatter:()=>o,toc:()=>i});var n=s(74848),r=s(28453);const o={pagination_prev:null,pagination_next:null},d="%Net.UDP",i=[{value:"Properties",id:"properties",level:2},{value:"Descriptor",id:"descriptor",level:3},{value:"LastAddr",id:"lastaddr",level:3},{value:"LastPort",id:"lastport",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"Send",id:"send",level:3},{value:"Recv",id:"recv",level:3},{value:"Reply",id:"reply",level:3},{value:"GetHostAddr",id:"gethostaddr",level:3},{value:"LastAddrGet",id:"lastaddrget",level:3},{value:"LastPortGet",id:"lastportget",level:3},{value:"%OnClose",id:"onclose",level:3}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"netudp",children:"%Net.UDP"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Net.UDP Extends %RegisteredObject [ System = 3 ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"UDP Communications"}),"\n",(0,n.jsx)(t.p,{children:"A typical model is that you have a provider that waits to receive msgs from many hosts on a well defined port, and there are many requestors that send pkts to the provider."}),"\n",(0,n.jsx)(t.p,{children:"Basically a provider creates a UDP object and waits for a request and then responds to the request (if it is required)."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"s prv=##class(%Net.UDP).%New([port num]) // new a provider that can receive // pkts on a well defined port s pkt=prv.Recv([time out]) // Waits for a pkt to arrive or times out s bytes=prv.Reply([answer pkt]) // send a pkt back to the requestor."})}),"\n",(0,n.jsx)(t.p,{children:"The requestor must know the host and port or the subnet and port to send or broadcast a packet to."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"s clnt=##class(%Net.UDP).%New() // Create an anonymous requestor // using a dynamic port num s bytes=clnt.Send([pkt],[host or subnet],[port]) // send a pkt to the provider"})," i.e. ",(0,n.jsx)(t.code,{children:';; Provider ; Requestor s prv=##class(%Net.UDP).%New(2050) ; s clnt=##class(%Net.UDP).%New() s host=##class(%Net.UDP).GetHostAddr("localhost") w clnt.Send("Hello 2050",host,2050) ; 10 w "Provider Rcvd=",prv.Recv() ;Provider Rcvd=Hello 2050 w prv.Reply("A msg from 2050") ;15 w "Requestor rcvd=",clnt.Recv() ; Requestor rcvd=A msg from 2050 w "pkt was from=",$system.INetInfo.AddrToHostName(prv.LastAddr),":",prv.LastPort,! ;pkt was from=localhost:58135'})]}),"\n",(0,n.jsx)(t.p,{children:"On some platforms the sender and receiver must have the same IP protocol for the packets to reach each other or the UDP object must be bound to the same type of IP protocol as the destination so it can send, otherwise send will fail and it will return -1. i.e. the sender or receiver UDP socket must be bound to IPv4 or IPv6 explicitly . You can specify the IPv4 or IPv6 protocol type when you %New the UDP object. You do this by specifying the default host IP format. Based on this host IP format, UDP binds and communicates using that protocol type:"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:'s u=##class(%Net.UDP).%New(3001,"::") // IPv6 s u=##class(%Net.UDP).%New(3002,"0.0.0.0") // IPv4'})," You can use netstat -an to find out how it's bound!!"]}),"\n",(0,n.jsx)(t.p,{children:"UDP 0.0.0.0:3002 *:*"}),"\n",(0,n.jsx)(t.p,{children:"UDP [::]:3001 *:*"}),"\n",(0,n.jsxs)(t.p,{children:["If the UDP object is only a sender with a default port you can pass zero for port num. ",(0,n.jsx)(t.code,{children:'s u=##class(%Net.UDP).%New(0,"::") // IPv6 s u=##class(%Net.UDP).%New(0,"0.0.0.0") // IPv4'})]}),"\n",(0,n.jsx)(t.p,{children:"Note: On some platforms it may require two different UDP objects one for IPv4 and one for IPv6 communication."}),"\n",(0,n.jsx)(t.p,{children:"In the following example the sender is bound to IPv4 and it cannot send to a IPv6 destination."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:'s h=##class(%Net.UDP).GetHostAddr("::1") s c=##class(%Net.UDP).%New() w c.Send("chello",h,3002) -1'})," ",(0,n.jsx)(t.code,{children:'s c=##class(%Net.UDP).%New(0,"::") w c.Send("hello",h,3002) 5'})]}),"\n",(0,n.jsx)(t.p,{children:"Note that UDP is an unreliable protocol; it may drop some pkts."}),"\n",(0,n.jsx)(t.p,{children:"It's recommended to send or reply to packets in some canonical format, especially on a Unicode system (i.e. lists, or UTF8)."}),"\n",(0,n.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(t.h3,{id:"descriptor",children:"Descriptor"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property Descriptor As %Integer [ Internal ];\n"})}),"\n",(0,n.jsx)(t.h3,{id:"lastaddr",children:"LastAddr"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property LastAddr As %String;\n"})}),"\n",(0,n.jsx)(t.h3,{id:"lastport",children:"LastPort"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Property LastPort As %Integer;\n"})}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %OnNew(port As %Integer = 0, host As %String = "", timeout As %Integer = 0, sendsiz As %Integer = 0, rcvsiz As %Integer = 0) As %Library.Status\n'})}),"\n",(0,n.jsx)(t.p,{children:"This callback method is invoked by the %New method to provide notification that a new instance of an object is being created."}),"\n",(0,n.jsx)(t.p,{children:"If this method returns an error then the object will not be created."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"%New"})," instantiates a new UDP datagram socket. If host and a port is specified, the socket will be bound to that host and IP. If the specified host and port is in use, it will retry once every second for the specified timeout duration until it becomes available. If a timeout is not specified it will try to bind to that host and port only once."]}),"\n",(0,n.jsx)(t.p,{children:'On success it will return a %Net.UDP object/oref, on failure it will return "".'}),"\n",(0,n.jsx)(t.p,{children:"If rcvsiz or sendsiz are provided the socket is initialized to send and receive at least that size packet."}),"\n",(0,n.jsx)(t.p,{children:"The default receive buffer size is 16k (16384 bytes)."}),"\n",(0,n.jsx)(t.h3,{id:"send",children:"Send"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Send(pkt As %String, dest As %String, port As %Integer) As %Integer\n"})}),"\n",(0,n.jsx)(t.p,{children:"Send a packet to a specified destination and port."}),"\n",(0,n.jsx)(t.p,{children:"Destination is in $system.INetInfo.INetBinaryAddrToText() or %Net.UDP.GetHostAddr() format (basically an IPv4 or IPv6 binary address)."}),"\n",(0,n.jsx)(t.p,{children:"The port must be a 16 bit port number."}),"\n",(0,n.jsx)(t.p,{children:"The Send method returns the number of bytes sent."}),"\n",(0,n.jsx)(t.h3,{id:"recv",children:"Recv"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Recv(timeout As %Integer = 0) As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Receives a packet from the socket."}),"\n",(0,n.jsx)(t.p,{children:"It takes an optional timeout. It returns an empty string after the specified seconds."}),"\n",(0,n.jsx)(t.p,{children:"The returned string is the received raw pkt data. It might be truncated to the specified receive buffer length (Receive length is specified during the class instantiation)."}),"\n",(0,n.jsxs)(t.p,{children:["The sender's host and port can be accessed through ",(0,n.jsx)(t.strong,{children:"LastAddr"})," and ",(0,n.jsx)(t.strong,{children:"LastPort"})," properties."]}),"\n",(0,n.jsx)(t.h3,{id:"reply",children:"Reply"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method Reply(pkt As %String) As %Integer\n"})}),"\n",(0,n.jsxs)(t.p,{children:["It's exactly the same as the Send() method, except it doesn't require the destination address. It sends to the last received ",(0,n.jsx)(t.strong,{children:"Recv"})," source."]}),"\n",(0,n.jsx)(t.h3,{id:"gethostaddr",children:"GetHostAddr"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetHostAddr(host As %String) As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:"Converts the passed in host name or IP to a binary form of the IP for efficient use by the Send() method. The returned IP is IPv4 or IPv6 depending on the instance setting."}),"\n",(0,n.jsx)(t.p,{children:"The returned IP could be converted to a text format by."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"w $system.INetInfo.AddrToHostName(x)"})}),"\n",(0,n.jsx)(t.h3,{id:"lastaddrget",children:"LastAddrGet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method LastAddrGet() As %String [ Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the last received packet's IP address."}),"\n",(0,n.jsx)(t.h3,{id:"lastportget",children:"LastPortGet"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method LastPortGet() As %Integer [ Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the last received packet's port."}),"\n",(0,n.jsx)(t.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status [ Final, Internal, Private ]\n"})})]})}function a(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>d,x:()=>i});var n=s(96540);const r={},o=n.createContext(r);function d(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);