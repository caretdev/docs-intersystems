"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[44091],{33787:(e,i,n)=>{n.r(i),n.d(i,{contentTitle:()=>a,default:()=>d,frontMatter:()=>s,toc:()=>r});var o=n(74848),t=n(28453);const s={pagination_prev:null,pagination_next:null},a="%iKnow.Utils.CopyUtils",r=[{value:"Methods",id:"methods",level:2},{value:"CopyDomain",id:"copydomain",level:3},{value:"CopyMetadataFields",id:"copymetadatafields",level:3},{value:"CopySkipLists",id:"copyskiplists",level:3},{value:"CopyDictionaries",id:"copydictionaries",level:3},{value:"CopyDictionary",id:"copydictionary",level:3},{value:"CopyMatchingProfile",id:"copymatchingprofile",level:3},{value:"CopyMetrics",id:"copymetrics",level:3},{value:"CopyMetricValuesJob",id:"copymetricvaluesjob",level:3},{value:"CopyMetric",id:"copymetric",level:3}];function l(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"iknowutilscopyutils",children:"%iKnow.Utils.CopyUtils"})}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-objectscript-class",children:"Class %iKnow.Utils.CopyUtils Extends %RegisteredObject [ Deprecated, System = 4 ]\n"})}),"\n",(0,o.jsx)(i.p,{children:"This utility class groups a few methods to easily copy the contents of a domain into another one (which doens't necessarily have to be empty)."}),"\n",(0,o.jsx)(i.p,{children:"Please note any domain elements copied will be created using the version of the target domain, regardless of the source domain's version number."}),"\n",(0,o.jsx)(i.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsx)(i.h3,{id:"copydomain",children:"CopyDomain"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-objectscript-class",children:'ClassMethod CopyDomain(pFromDomain As %String, pToDomain As %String, pCopySources As %Boolean = 1, pCopySettings As %Boolean = 1, pCopyDictionaries As %Boolean = 1, pMatchCopy As %Boolean = 1, pVerbose As %Boolean = 1, pUseConfiguration As %String = "", pCopyMetrics As %Integer = 1) As %Status\n'})}),"\n",(0,o.jsx)(i.p,{children:"Copies all contents from the domain named pFromDomain into the domain pToDomain. If pToDomain does not yet exist, it will be created automatically. The copy flags represent the following domain elements:"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"pCopySources includes regular source content as well as metadata (if the corresponding metadata fields exist in pToDomain or are created through pCopySettings. See also %iKnow.Source.Domain.Lister"}),"\n",(0,o.jsx)(i.li,{children:"pCopySettings includes domain parameters, metadata, LOVs and SkipLists"}),"\n",(0,o.jsx)(i.li,{children:"pCopyDictionaries includes dictionaries, their items and terms and any domain-specific matching profiles. If pMatchCopy is 1 as well, all sources in the target domain will be matched against all dictionaries."}),"\n",(0,o.jsx)(i.li,{children:"pCopySettings includes domain parameters, metadata and SkipLists"}),"\n",(0,o.jsx)(i.li,{children:"if pCopyMetrics>0, all metric definitions are copied and if pCopyMetrics>1, all metric values are copied along"}),"\n"]}),"\n",(0,o.jsx)(i.p,{children:"This method relies on the other class methods in this class and uses a value of 1 for pIgnoreDuplciates when calling these methods."}),"\n",(0,o.jsx)(i.p,{children:"If required, a specific iKnow Configuration name (cf %iKnow.Configuration) can be supplied through pUseConfiguration to use while re-indexing the data. If this parameter is left blank (default), the default configuration of the original domain (configured using the $$$IKPDEFAULTCONFIG domain parameter) or $$$DEFAULTCONFIG will be used."}),"\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Note"}),": if pCopySettings is true, only domain parameters a user is allowed to modify will be copied!!"]}),"\n",(0,o.jsx)(i.h3,{id:"copymetadatafields",children:"CopyMetadataFields"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod CopyMetadataFields(pFromDomainId As %Integer, pToDomainId As %Integer, pVerbose As %Boolean = 1, pIgnoreDuplicates As %Boolean = 1) As %Status\n"})}),"\n",(0,o.jsx)(i.p,{children:"Copies any metadata field definitions and List of Values from the domain identified by ID pFromDomainId into domain pToDomainId. If a field with the same name already exists in the target domain, pIgnoreDuplicates=0 will cause an error to be thrown, whereas pIgnoreDuplicates=1 will mean the metadata field in the target domain will be left as is."}),"\n",(0,o.jsx)(i.h3,{id:"copyskiplists",children:"CopySkipLists"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod CopySkipLists(pFromDomainId As %Integer, pToDomainId As %Integer, pVerbose As %Boolean = 1, pIgnoreDuplicates As %Boolean = 1) As %Status\n"})}),"\n",(0,o.jsx)(i.p,{children:"Copies any SkipList definitions and their contents from the domain identified by ID pFromDomainId into domain pToDomainId. If a SkipList with the same name already exists in the target domain, pIgnoreDuplicates=0 will cause an error to be thrown, whereas pIgnoreDuplicates=1 will mean the SkipList in the target domain will be extended with the strings in the SkipList from the source domain."}),"\n",(0,o.jsx)(i.h3,{id:"copydictionaries",children:"CopyDictionaries"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod CopyDictionaries(pFromDomainId As %Integer, pToDomainId As %Integer, pVerbose As %Boolean = 1, pIgnoreDuplicates As %Boolean = 1, pCopyProfiles As %Boolean = 1) As %Status\n"})}),"\n",(0,o.jsx)(i.p,{children:"Copies any dictionaries and matching profiles (if pCopyProfiles is true) from the domain identified by ID pFromDomainId into domain pToDomainId. If a dictionary, item or profile with the same name already exists, pIgnoreDuplicates=0 will cause an error to be thrown, whereas pIgnoreDuplicates=1 will mean the element in the target domain will be left as is, but extended with the items and terms of the element in the source domain."}),"\n",(0,o.jsx)(i.h3,{id:"copydictionary",children:"CopyDictionary"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-objectscript-class",children:'ClassMethod CopyDictionary(pFromDomainId As %Integer, pToDomainId As %Integer, pDictionaryId As %Integer, pVerbose As %Boolean = 1, pIgnoreDuplicates As %Boolean = 1, ByRef pProfileMap = "") As %Status\n'})}),"\n",(0,o.jsx)(i.p,{children:"Copies a single dictionary (identified by pDictionaryId from the domain identified by ID pFromDomainId into domain pToDomainId. If a dictionary or item with the same name already exists, pIgnoreDuplicates=0 will cause an error to be thrown, whereas pIgnoreDuplicates=1 will mean the element in the target domain will be left as is, but extended (in the case of a dictionary or item) with the items and terms of the element in the source domain."}),"\n",(0,o.jsx)(i.p,{children:"An array of matching profile IDs can be passed in through pProfileMap to map any default matching profiles from the source domain to IDs of the corresponding profiles in the target domain."}),"\n",(0,o.jsx)(i.h3,{id:"copymatchingprofile",children:"CopyMatchingProfile"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod CopyMatchingProfile(pFromDomainId As %Integer, pToDomainId As %Integer, pProfileId As %Integer, pVerbose As %Boolean = 1, Output pNewProfileId As %Integer = 0) As %Status\n"})}),"\n",(0,o.jsx)(i.p,{children:"Copies a single Matching Profile (identified by pProfileId) from the domain identified by ID pFromDomainId into domain pToDomainId. If a profile with the same name already exists in the target domain, pIgnoreDuplicates=0 will cause an error to be thrown, whereas pIgnoreDuplicates=1 will mean the metadata field in the target domain will be left as is."}),"\n",(0,o.jsx)(i.h3,{id:"copymetrics",children:"CopyMetrics"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod CopyMetrics(pFromDomainId As %Integer, pToDomainId As %Integer, pCopyValues As %Boolean = 0, pVerbose As %Boolean = 1) As %Status\n"})}),"\n",(0,o.jsx)(i.p,{children:"Copies all metric definitions from one domain to another, optionally including their values."}),"\n",(0,o.jsx)(i.p,{children:"WARNING: only Entity-, CRC-, CC- and source-based metric data can be copied from one domain to another. Use the metrics' builder class to (re-)generate metric values for path- or sentence-based metrics."}),"\n",(0,o.jsx)(i.h3,{id:"copymetricvaluesjob",children:"CopyMetricValuesJob"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod CopyMetricValuesJob(pFromDomainId As %Integer, pToDomainId As %Integer, pBatchCopy As %Boolean, pProcNumber As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,o.jsx)(i.p,{children:"Internal method used by CopyMetrics to copy custom metric values from one domain to another through multiple jobs."}),"\n",(0,o.jsx)(i.p,{children:"WARNING: only Entity-, CRC-, CC- and source-based metrics can be copied from one domain to another!"}),"\n",(0,o.jsx)(i.h3,{id:"copymetric",children:"CopyMetric"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod CopyMetric(pFromDomainId As %Integer, pToDomainId As %Integer, pMetricId As %Integer, pPreserveOffsets As %Boolean = 0, pVerbose As %Boolean = 1) As %Status\n"})}),"\n",(0,o.jsx)(i.p,{children:"Copies a Metric Definition from one domain to another. No values are copied. WARNING: only use pPreserveOffsets when copying metrics into a domain that didn't have any metric targets registered."})]})}function d(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>r});var o=n(96540);const t={},s=o.createContext(t);function a(e){const i=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(s.Provider,{value:i},e.children)}}}]);