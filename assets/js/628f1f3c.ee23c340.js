"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[73486],{67979:(e,n,d)=>{d.r(n),d.d(n,{contentTitle:()=>c,default:()=>l,frontMatter:()=>r,toc:()=>o});var s=d(74848),t=d(28453);const r={pagination_prev:null,pagination_next:null},c="%Compiler.Type.Embedded",o=[{value:"Methods",id:"methods",level:2},{value:"Embedded",id:"embedded",level:3}];function i(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",member:"member",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"compilertypeembedded",children:"%Compiler.Type.Embedded"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Class %Compiler.Type.Embedded [ System = 1 ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When using an embedded datatype class this provides a ",(0,s.jsx)(n.member,{children:"Embedded method which returns an instance of the embedded class to the caller. You can mix this superclass in to your datatype class for example specify the superclass %25String,%25Compiler.Type.Embedded."})]}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"embedded",children:"Embedded"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"ClassMethod Embedded() As %RegisteredObject [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Return an instance of the embedded class"})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}},28453:(e,n,d)=>{d.d(n,{R:()=>c,x:()=>o});var s=d(96540);const t={},r=s.createContext(t);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);