"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[63919],{87984:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>r,default:()=>d,frontMatter:()=>o,toc:()=>i});var n=s(74848),a=s(28453);const o={pagination_prev:null,pagination_next:null},r="%ZEN.DataModel.ObjectDataModel",i=[{value:"Parameters",id:"parameters",level:2},{value:"DOMAIN;",id:"domain",level:3},{value:"DYNAMICPROPERTIES",id:"dynamicproperties",level:3},{value:"Properties",id:"properties",level:2},{value:"%data",id:"data",level:3},{value:"%source",id:"source",level:3},{value:"Methods",id:"methods",level:2},{value:"%CreateModelInstance",id:"createmodelinstance",level:3},{value:"%OpenModel",id:"openmodel",level:3},{value:"%SaveModel",id:"savemodel",level:3},{value:"%DeleteModel",id:"deletemodel",level:3},{value:"%OnOpenSource",id:"onopensource",level:3},{value:"%OnNewSource",id:"onnewsource",level:3},{value:"%OnLoadModel",id:"onloadmodel",level:3},{value:"%OnStoreModel",id:"onstoremodel",level:3},{value:"%OnSaveSource",id:"onsavesource",level:3},{value:"%OnDeleteModel",id:"ondeletemodel",level:3},{value:"%OnDeleteSource",id:"ondeletesource",level:3},{value:"%CopyDataToModel",id:"copydatatomodel",level:3},{value:"%CopyDataFromModel",id:"copydatafrommodel",level:3},{value:"%OnCopyDataToModel",id:"oncopydatatomodel",level:3},{value:"%OnCopyDataFromModel",id:"oncopydatafrommodel",level:3},{value:"%GetPropertyInfo",id:"getpropertyinfo",level:3},{value:"%OnGetPropertyInfo",id:"ongetpropertyinfo",level:3},{value:"%GetPropertyList",id:"getpropertylist",level:3},{value:"%BuildPropertyList",id:"buildpropertylist",level:3},{value:"%GetJSValidationCode",id:"getjsvalidationcode",level:3},{value:"%GetLookupSQL",id:"getlookupsql",level:3},{value:"%DispatchGetProperty",id:"dispatchgetproperty",level:3},{value:"%DispatchSetProperty",id:"dispatchsetproperty",level:3},{value:"%SubmitHandler",id:"submithandler",level:3},{value:"%OnSubmit",id:"onsubmit",level:3}];function l(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"zendatamodelobjectdatamodel",children:"%ZEN.DataModel.ObjectDataModel"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %ZEN.DataModel.ObjectDataModel Extends %ZEN.DataModel.DataModel [ Abstract, DependsOn = (%ZEN.Generator, %ZEN.DataModelUtils), Deprecated, PropertyClass = %ZEN.DataModel.objectModelParameters, System = 3 ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This class is used to implement the Model portion of the Zen Model-View-Controller mechanism.",(0,n.jsx)(t.br,{}),"\nAn ObjectDataModel is specific type of DataModel that contains a set of named values (properties).",(0,n.jsx)(t.br,{}),'\nThe properties of an ObjectDataModel can either be formally defined within the ObjectDataModel class, or they can be "virtual" properties - properties defined at run-time.',(0,n.jsx)(t.br,{}),"\nWhen an ObjectDataModel is displayed using a %ZEN.Component.dynaForm, the properties will be displayed in the following default ways:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Private properties - Not displayed."}),"\n",(0,n.jsx)(t.li,{children:"Reference properties - Using a %ZEN.Component.dataCombo."}),"\n",(0,n.jsx)(t.li,{children:"Strings - Using a %ZEN.Component.text."}),"\n",(0,n.jsx)(t.li,{children:"Strings with MAXLEN over 250 - Using a %ZEN.Component.textarea."}),"\n",(0,n.jsx)(t.li,{children:"Numerics - Using a %ZEN.Component.text."}),"\n",(0,n.jsx)(t.li,{children:"Dates - Using a %ZEN.Component.dateText."}),"\n",(0,n.jsx)(t.li,{children:"Enumerated value (using VALUELIST) - Using a %ZEN.Component.radioSet or %ZEN.Component.comboBox."}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(t.h3,{id:"domain",children:"DOMAIN;"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter DOMAIN;\n"})}),"\n",(0,n.jsx)(t.p,{children:"Localization domain. DataModel classes that wish to support localization must provide a value for this within subclasses."}),"\n",(0,n.jsx)(t.h3,{id:"dynamicproperties",children:"DYNAMICPROPERTIES"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter DYNAMICPROPERTIES As BOOL = 1;\n"})}),"\n",(0,n.jsx)(t.p,{children:"If true (the default), then this dataModel class supports dynamic properties: that is, you can reference arbitrary property names within the data model object. Any such properties that are not formally defined will refer to a location within the private property, %data using the dynamic dispatch mechanism. Set this to false to disable this feature."}),"\n",(0,n.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(t.h3,{id:"data",children:"%data"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Property %data As %ZEN.Datatype.string(POPORDER = -1, XMLPROJECTION = "NONE") [ InitialExpression = {$H}, Internal, MultiDimensional, Transient ];\n'})}),"\n",(0,n.jsxs)(t.p,{children:["This property is used to hold any virtual properties used by this model.",(0,n.jsx)(t.br,{}),"\nA virtual property is a property referenced by the data model but not defined as a formal property within the data model class. This is only used when the DYNAMICPROPERTIES parameter is true."]}),"\n",(0,n.jsx)(t.h3,{id:"source",children:"%source"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Property %source As %RegisteredObject(POPORDER = -1, XMLPROJECTION = "NONE") [ Transient ];\n'})}),"\n",(0,n.jsx)(t.p,{children:"If needed, this transient property is used to hold a copy of the source object used by this model."}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"createmodelinstance",children:"%CreateModelInstance"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %CreateModelInstance(pID As %String, pConcurrency As %Integer = -1, Output pSC As %Status = {$$$OK}) As %RegisteredObject [ CodeMode = expression ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Create an instance of this DataModel object.",(0,n.jsx)(t.br,{}),"\nSubclasses may override this for special behavior.",(0,n.jsx)(t.br,{}),"\nThe default implementation returns the DataModel itself as the source object (this allows for simple DataModel classes that have no actual source object)."]}),"\n",(0,n.jsx)(t.h3,{id:"openmodel",children:"%OpenModel"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OpenModel(pID As %String, pConcurrency As %Integer = -1, Output pSC As %Status = {$$$OK}) As %RegisteredObject [ Final ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Open and return an instance of this DataModel object (given an id value pID and fill in its property values.",(0,n.jsx)(t.br,{}),"\nThe actual loading of the properties is carried out by the %OnLoadModel method. The property values can come from an independent data source object or may be local to this data model object.",(0,n.jsx)(t.br,{}),'\nIf pID is "", then a new instance of data model object should be created.',(0,n.jsx)(t.br,{}),"\npConcurrency is an optional concurrency flag that can be used in cases where the data source is a persistent object.",(0,n.jsx)(t.br,{}),"\nOn return, pSC contains a status code indicating success of failure."]}),"\n",(0,n.jsx)(t.h3,{id:"savemodel",children:"%SaveModel"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SaveModel() As %Status [ Final ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Save the values currently within this DataModel object back to a data source. Before saving, the values of the properties will be validated (as specified by the property definitions).",(0,n.jsx)(t.br,{}),"\nThe actual save operation works as follows:",(0,n.jsx)(t.br,{}),"\nThe %OnStoreModel callback is invoked. This copies the properties of this model back to the data source object (if there is an independent data source).",(0,n.jsx)(t.br,{}),"\nThe %OnSaveSource callback is invoked. This causes the independent data source object to be saved.",(0,n.jsx)(t.br,{}),"\nReturns a status code indicating success or failure."]}),"\n",(0,n.jsx)(t.h3,{id:"deletemodel",children:"%DeleteModel"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %DeleteModel(pID As %String) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Delete a given DataModel instance.",(0,n.jsx)(t.br,{}),"\nThis is implemented by the subclasses of this class by providing implementations of the %OnDeleteModel and %OnDeleteSource methods."]}),"\n",(0,n.jsx)(t.h3,{id:"onopensource",children:"%OnOpenSource"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnOpenSource(pID As %String, pConcurrency As %Integer = -1, Output pSC As %Status = {$$$OK}) As %RegisteredObject\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This callback method is invoked when a DataModel is loaded into memory. If implemented, it loads an instance of the data source object used by the DataModel.",(0,n.jsx)(t.br,{}),"\nThe default implementation returns the DataModel itself as the source object (this allows for simple DataModel classes that have no actual source object)."]}),"\n",(0,n.jsx)(t.h3,{id:"onnewsource",children:"%OnNewSource"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnNewSource(Output pSC As %Status = {$$$OK}) As %RegisteredObject\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This callback method is invoked when a new instance of DataModel is required. If implemented, it returns a new instance of the data source object used by the DataModel.",(0,n.jsx)(t.br,{}),"\nThe default implementation returns the DataModel itself as the source object (this allows for simple DataModel classes that have no actual source object)."]}),"\n",(0,n.jsx)(t.h3,{id:"onloadmodel",children:"%OnLoadModel"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnLoadModel(pSource As %RegisteredObject) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"This callback method does the actual work of loading values from the source object."}),"\n",(0,n.jsx)(t.h3,{id:"onstoremodel",children:"%OnStoreModel"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnStoreModel(pSource As %RegisteredObject) As %Status [ CodeMode = expression ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This callback method does the actual work of copying values from the DataModel to the data source.",(0,n.jsx)(t.br,{}),"\nThe default implementation is an expression method."]}),"\n",(0,n.jsx)(t.h3,{id:"onsavesource",children:"%OnSaveSource"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnSaveSource(pSource As %RegisteredObject) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"This callback method is called when the DataModel is saved. If implemented, it is responsible for saving changes to the data source."}),"\n",(0,n.jsx)(t.h3,{id:"ondeletemodel",children:"%OnDeleteModel"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnDeleteModel(pID As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"This callback method is invoked when the DataModel is deleted. This is implemented by the subclasses of this class."}),"\n",(0,n.jsx)(t.h3,{id:"ondeletesource",children:"%OnDeleteSource"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnDeleteSource(pID As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"This callback method is called when the DataModel is deleted. If implemented, it is responsible for making the appropriate deletes against the data source."}),"\n",(0,n.jsx)(t.h3,{id:"copydatatomodel",children:"%CopyDataToModel"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %CopyDataToModel(ByRef pData, pSeries As %Integer = "") As %Status [ CodeMode = objectgenerator, Final, GenerateAfter = (%GetPropertyInfo, %OnCopyDataToModel), Internal ]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Internal method.",(0,n.jsx)(t.br,{}),"\nCalled by the dataController to move data into this model. Copies the values in the array pData (subscripted by series and property name) into this data model."]}),"\n",(0,n.jsx)(t.h3,{id:"copydatafrommodel",children:"%CopyDataFromModel"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'Method %CopyDataFromModel(Output pData, Output pTypes, pSeries As %Integer = "") As %Status [ CodeMode = objectgenerator, Final, GenerateAfter = (%GetPropertyInfo, %OnCopyDataFromModel), Internal ]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Internal method.",(0,n.jsx)(t.br,{}),"\nCalled by the dataController to get data from this model. Copies the values in the data demo to the array pData (subscripted by series number and property name)."]}),"\n",(0,n.jsx)(t.h3,{id:"oncopydatatomodel",children:"%OnCopyDataToModel"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnCopyDataToModel(ByRef pData) As %Status [ Abstract ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["If defined, this callback method is invoked just before the dataController copies its values into the properties of this DataModel object.",(0,n.jsx)(t.br,{}),"\npData is an array containing the values provided by the controller, subscripted by property name."]}),"\n",(0,n.jsx)(t.h3,{id:"oncopydatafrommodel",children:"%OnCopyDataFromModel"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnCopyDataFromModel(ByRef pData) As %Status [ Abstract ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["If defined, this callback method is invoked just as this DataModel object is about to copy its values into a dataController.",(0,n.jsx)(t.br,{}),"\npData is an array containing the values that will be provided to the controller, subscripted by property name."]}),"\n",(0,n.jsx)(t.h3,{id:"getpropertyinfo",children:"%GetPropertyInfo"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %GetPropertyInfo(Output pInfo As %String, pExtended As %Boolean = 0, pModelId As %String = "", pContainer As %String = "") As %Status [ CodeMode = objectgenerator, Final, GenerateAfter = %OnGetPropertyInfo ]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Return an array, subscripted by property name, describing the properties within this DataModel.",(0,n.jsx)(t.br,{}),"\nThese are returned as an array of the form:",(0,n.jsx)(t.br,{}),"\npInfo(name) = seqno",(0,n.jsx)(t.br,{}),"\nIf pExtended is true (1), then the array will include additional nodes for each property. This information is used to create dynamic forms for this model.",(0,n.jsx)(t.br,{}),"\nApplications should not change this method. To modify the information returned by this method, override the %OnGetPropertyInfo callback method."]}),"\n",(0,n.jsx)(t.h3,{id:"ongetpropertyinfo",children:"%OnGetPropertyInfo"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %OnGetPropertyInfo(pIndex As %Integer, ByRef pInfo As %String, pExtended As %Boolean = 0, pModelId As %String = "", pContainer As %String = "") As %Status [ Abstract ]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["This callback method, if present, is called by the %GetPropertyInfo method. This gives subclasses the opportunity to add additional property descriptions to the DataModel.",(0,n.jsx)(t.br,{}),"\npIndex is the index number that should be used to add the next property to the list.",(0,n.jsx)(t.br,{}),"\npInfo is a multidimensional array containing information about the properties of this data model.",(0,n.jsx)(t.br,{}),"\nIf pExtended is true, then complete information about the properties should be returned; if false, then only property names need be returned (applications can simply ignore this).",(0,n.jsx)(t.br,{}),"\npModelId is the id value of the current Data Model instance. This is provided for cases where the contents of a dynamic form may vary by instance of the Data Model object."]}),"\n",(0,n.jsx)(t.h3,{id:"getpropertylist",children:"%GetPropertyList"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %GetPropertyList(pModelId As %String = "", pContainer As %String = "") As %String [ CodeMode = objectgenerator, Final, GenerateAfter = %GetPropertyInfo, Internal ]\n'})}),"\n",(0,n.jsx)(t.p,{children:"Return a comma-delimited list of properties within this DataModel, including any virtual properties provided by the %OnGetPropertyInfo pContainer is the containing property in the case of an embedded object. This method is simply an optimization for cases where there is no user-defined %OnGetPropertyInfo method."}),"\n",(0,n.jsx)(t.h3,{id:"buildpropertylist",children:"%BuildPropertyList"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %BuildPropertyList(pModelId As %String = "", pContainer As %String = "") As %String [ Internal, Private ]\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Internal method.",(0,n.jsx)(t.br,{}),"\nBuild a comma-delimited list of of properties within this DataModel using the list returned by %GetPropertyInfo."]}),"\n",(0,n.jsx)(t.h3,{id:"getjsvalidationcode",children:"%GetJSValidationCode"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetJSValidationCode() As %String [ CodeMode = objectgenerator ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Internal method.",(0,n.jsx)(t.br,{}),"\nThis generated method contructs client-side JS validation code for the properties within this provider. The client-side code is returned as a string that is converted to JS function at run-time."]}),"\n",(0,n.jsx)(t.h3,{id:"getlookupsql",children:"%GetLookupSQL"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetLookupSQL(pProperty As %String, Output pSQL As %String, Output pSQLLookup As %String) As %Status [ CodeMode = objectgenerator, Internal ]\n"})}),"\n",(0,n.jsx)(t.p,{children:"Internal method. This is called in order to get the SQL statements (specified by the ZENSQL and ZENSQLLOOKUP parameters) that will provide a set of lookup values for a property."}),"\n",(0,n.jsx)(t.h3,{id:"dispatchgetproperty",children:"%DispatchGetProperty"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %DispatchGetProperty(pProperty As %String) [ CodeMode = objectgenerator, Internal ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Provide a property dispatch method to catch references to virtual properties.",(0,n.jsx)(t.br,{}),"\nThis should not be called directly.",(0,n.jsx)(t.br,{}),"\nThis method is only generated if the DYNAMICPROPERTIES parameter is true."]}),"\n",(0,n.jsx)(t.h3,{id:"dispatchsetproperty",children:"%DispatchSetProperty"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %DispatchSetProperty(pProperty As %String, pValue As %String) [ CodeMode = objectgenerator, Internal ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Provide a property dispatch method to catch references to virtual properties.",(0,n.jsx)(t.br,{}),"\nThis should not be called directly.",(0,n.jsx)(t.br,{}),"\nThis method is only generated if the DYNAMICPROPERTIES parameter is true."]}),"\n",(0,n.jsx)(t.h3,{id:"submithandler",children:"%SubmitHandler"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %SubmitHandler(pSubmit As %ZEN.Submit) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Internal method.",(0,n.jsx)(t.br,{}),"\nIf a form connected to this DataModel is submitted, this method handles the server-side processing of the submit."]}),"\n",(0,n.jsx)(t.h3,{id:"onsubmit",children:"%OnSubmit"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnSubmit(pSubmit As %ZEN.Submit) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:["If defined, this callback is called when a form connected to this DataModel is submitted.",(0,n.jsx)(t.br,{}),"\nThe contents of this DataModel will be filled in from the submitted values before this callback is invoked.",(0,n.jsx)(t.br,{}),"\nThe default implementation is to store the submitted values back to the model."]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>i});var n=s(96540);const a={},o=n.createContext(a);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);