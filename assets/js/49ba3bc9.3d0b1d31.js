"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[82970],{69097:(e,s,r)=>{r.r(s),r.d(s,{contentTitle:()=>i,default:()=>o,frontMatter:()=>t,toc:()=>c});var n=r(74848),a=r(28453);const t={pagination_prev:null,pagination_next:null},i="SYS.History.Daily",c=[{value:"Properties",id:"properties",level:2},{value:"DateTime",id:"datetime",level:3},{value:"PerfCount",id:"perfcount",level:3},{value:"SysCount",id:"syscount",level:3},{value:"WDCount",id:"wdcount",level:3},{value:"Perf",id:"perf",level:3},{value:"WD",id:"wd",level:3},{value:"Sys",id:"sys",level:3},{value:"DB",id:"db",level:3},{value:"ZDATE",id:"zdate",level:3},{value:"ZTIME",id:"ztime",level:3},{value:"Methods",id:"methods",level:2},{value:"Purge",id:"purge",level:3},{value:"Export",id:"export",level:3}];function l(e){const s={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"syshistorydaily",children:"SYS.History.Daily"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class SYS.History.Daily Extends (%Persistent, %XML.Adaptor) [ System = 4 ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This class is a Daily summary of the detail PerfData and SysData collections. For each class sample collected you may chose to have the Average, Maximum, Minimum, Median, Standard Deviation, and Total maintained for the day. By default Average, Maximum, and Standard Deviation are kept. Use the SetSummary method in each individual class (Performance, SystemUsage, etc.) to modify this. Performance counters (SYS.History.Performance) are normalized to a per-second rate for all the calculations."}),"\n",(0,n.jsx)(s.p,{children:"This data can be manually purged using the Purge() method."}),"\n",(0,n.jsxs)(s.p,{children:["For details, see ",(0,n.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+SYS.History.Daily",children:"History Monitor"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(s.h3,{id:"datetime",children:"DateTime"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property DateTime As %TimeStamp [ SqlColumnNumber = 2 ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"Time of summary"}),"\n",(0,n.jsx)(s.h3,{id:"perfcount",children:"PerfCount"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property PerfCount As %Integer;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Number of Performance samples in this Daily period"}),"\n",(0,n.jsx)(s.h3,{id:"syscount",children:"SysCount"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property SysCount As %Integer;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Number of SystemUsage samples in this Daily period"}),"\n",(0,n.jsx)(s.h3,{id:"wdcount",children:"WDCount"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property WDCount As %Integer;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Number of WriteDaemon cycles in this Daily period"}),"\n",(0,n.jsx)(s.h3,{id:"perf",children:"Perf"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Perf As array Of SYS.History.Performance;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Performance metrics"}),"\n",(0,n.jsx)(s.h3,{id:"wd",children:"WD"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property WD As array Of SYS.History.WriteDaemon;\n"})}),"\n",(0,n.jsx)(s.p,{children:"WriteDaemon metrics"}),"\n",(0,n.jsx)(s.h3,{id:"sys",children:"Sys"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Sys As array Of SYS.History.SystemUsage;\n"})}),"\n",(0,n.jsx)(s.p,{children:"System Usage metrics"}),"\n",(0,n.jsx)(s.h3,{id:"db",children:"DB"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property DB As array Of SYS.History.Database;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Database metrics"}),"\n",(0,n.jsx)(s.h3,{id:"zdate",children:"ZDATE"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property ZDATE As %Integer;\n"})}),"\n",(0,n.jsx)(s.p,{children:"UTC date key"}),"\n",(0,n.jsx)(s.h3,{id:"ztime",children:"ZTIME"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property ZTIME As %Integer;\n"})}),"\n",(0,n.jsx)(s.p,{children:"UTC time key"}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"purge",children:"Purge"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Purge(Date As %String) As %Integer\n"})}),"\n",(0,n.jsx)(s.p,{children:"Purge Summary data. Purge all days prior to the 'Date' parameter (in YYYY-MM-DD format). Returns the number of days purged."}),"\n",(0,n.jsx)(s.h3,{id:"export",children:"Export"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Export(FileName As %String, Start As %TimeStamp, End As %TimeStamp, Class As %String, Function As %String, Database As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Export Daily data for a time range in CSV format. The default is all of the Perf, Sys and WD data currently in the Daily class."}),"\n",(0,n.jsxs)(s.p,{children:["The default FileName is HistoryDay_config_date_time.csv in the MGR directory.",(0,n.jsx)(s.br,{}),"\n'Start' and 'End' times (if necessary) are in YYYY-MM-DD HH:MM:SS format.",(0,n.jsx)(s.br,{}),'\n\'Class\' can be a comma-delimited list one or more of these classes of metrics: "Perf", "Sys", "WD". Or it can be "DB" to select the Database properties. The Database class can not be mixed with the other classes since it uses a different key structure to accommodate multiple databaes.',(0,n.jsx)(s.br,{}),'\n\'Function\' can be a comma-delimited list one or more of these summary functions: "Avg", "Max", "Min", StDev", Med" or "Tot". The default is to include all summary functions.',(0,n.jsx)(s.br,{}),"\n'Database' can be used to select a specific database (by name). Only used if \"DB\" is selected in 'Class'"]})]})}function o(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>c});var n=r(96540);const a={},t=n.createContext(a);function i(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);