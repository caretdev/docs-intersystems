"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[78895],{21486:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>o,frontMatter:()=>r,toc:()=>s});var a=n(74848),l=n(28453);const r={pagination_prev:null,pagination_next:null},i="%XML.Utils.InspectSAXTree",s=[{value:"Parameters",id:"parameters",level:2},{value:"Indent",id:"indent",level:3},{value:"lblElement",id:"lblelement",level:3},{value:"lblAttribute",id:"lblattribute",level:3},{value:"lblWhiteSpaceNode",id:"lblwhitespacenode",level:3},{value:"lblTextNode",id:"lbltextnode",level:3},{value:"lblRAWNode",id:"lblrawnode",level:3},{value:"NewLine",id:"newline",level:3},{value:"pad",id:"pad",level:3},{value:"Methods",id:"methods",level:2},{value:"OutputTree",id:"outputtree",level:3},{value:"DumpBinaryTree",id:"dumpbinarytree",level:3},{value:"DumpBinaryNode",id:"dumpbinarynode",level:3},{value:"PadTxt",id:"padtxt",level:3},{value:"TreeInternal",id:"treeinternal",level:3},{value:"FormatText",id:"formattext",level:3},{value:"ParseFile",id:"parsefile",level:3},{value:"ParseString",id:"parsestring",level:3},{value:"ParseStream",id:"parsestream",level:3},{value:"ParseXData",id:"parsexdata",level:3}];function d(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"xmlutilsinspectsaxtree",children:"%XML.Utils.InspectSAXTree"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Class %XML.Utils.InspectSAXTree\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Support Utility to review contents of SAXTree independently from XML Writer functionality.",(0,a.jsx)(t.br,{}),'\nProvides convenience methods ParseFile, ParseString, ParseStream and ParseXData for common support situations. Alternatively the method "OutputTree" can be called directly for additional scenarios.']}),"\n",(0,a.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(t.h3,{id:"indent",children:"Indent"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter Indent = 1;\n"})}),"\n",(0,a.jsx)(t.h3,{id:"lblelement",children:"lblElement"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter lblElement = "e";\n'})}),"\n",(0,a.jsx)(t.p,{children:"Display name used to indicate an element type"}),"\n",(0,a.jsx)(t.h3,{id:"lblattribute",children:"lblAttribute"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter lblAttribute = "a";\n'})}),"\n",(0,a.jsx)(t.p,{children:"Display name used to indicate an attribute type"}),"\n",(0,a.jsx)(t.h3,{id:"lblwhitespacenode",children:"lblWhiteSpaceNode"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter lblWhiteSpaceNode = "wsn";\n'})}),"\n",(0,a.jsx)(t.p,{children:"Display name used to indicate a whitespace node type"}),"\n",(0,a.jsx)(t.h3,{id:"lbltextnode",children:"lblTextNode"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter lblTextNode = "txt";\n'})}),"\n",(0,a.jsx)(t.p,{children:"Display name used to indicate a text node type"}),"\n",(0,a.jsx)(t.h3,{id:"lblrawnode",children:"lblRAWNode"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter lblRAWNode = "raw";\n'})}),"\n",(0,a.jsx)(t.p,{children:"Display name used to indicate a raw node type"}),"\n",(0,a.jsx)(t.h3,{id:"newline",children:"NewLine"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter NewLine = {$C(13,10)};\n"})}),"\n",(0,a.jsx)(t.h3,{id:"pad",children:"pad"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter pad = "                                                                                    ";\n'})}),"\n",(0,a.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(t.h3,{id:"outputtree",children:"OutputTree"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod OutputTree(ByRef xmlGbl = "", docSequence = 0, nodeId = 0, outstream As %CharacterStream = {$$$NULLOREF}, dumpBinary = 0) [ PublicList = %SAX ]\n'})}),"\n",(0,a.jsx)(t.p,{children:"xmlGbl = %SAX variable passed by reference Support user entry point Parameters:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["xmlGbl - Optional. The name of the local global being used to hold a SAX tree.",(0,a.jsx)(t.br,{}),"\nIf not supplied this will default to %SAX global"]}),"\n",(0,a.jsxs)(t.li,{children:["docSequence - Optional. The %SAX global (or alternative global) first key is an incrementing sequence for each XML document deserialized into XML Nodes. ie: %SAX(docSequence)",(0,a.jsx)(t.br,{}),"\nIf not supplied the highest document id incremented is assumed to be the current one of interest."]}),"\n",(0,a.jsx)(t.li,{children:"nodeId - Optional. The starting point in the SAX Tree to start analysis from. Typically would want to walk the whole document tree from 0."}),"\n",(0,a.jsx)(t.li,{children:"outstream - Optional. If not supplied when the tool is run it will output to default device, for example the window of an interactive terminal session. Alternatively an open file stream can be passed in and output will be written to the file."}),"\n",(0,a.jsxs)(t.li,{children:["dumpBinary - Optional. Some additional presentation of binary SAX tree portion that may be of value.\nExample to output to terminal session (or other default device): ",(0,a.jsx)(t.code,{children:"do ##class(Util.SAXDebugWriter).OutputTree()"})," Example to output to a file: ",(0,a.jsx)(t.code,{children:'Set stream=##class(%FileBinaryStream).%New() set stream.Filename="c:\\tmp\\SAXDebug"_msgId_"LoadedSimple.txt" do ##class(Util.SAXDebugWriter).OutputTree(,simpleDocId,,.stream) do stream.%Save() do stream.%Close()'})]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"dumpbinarytree",children:"DumpBinaryTree"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod DumpBinaryTree(ByRef xmlGbl = "", docId = "", outstream As %Stream.Object = {$$$NULLOREF})\n'})}),"\n",(0,a.jsx)(t.p,{children:"Optional binary tree walking Normal operation would be to invoke OutputTree method instead. Parameters:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"xmlGbl - Required. Pass local global by reference, being used to hold a SAX tree. eg: .%SAX"}),"\n",(0,a.jsxs)(t.li,{children:["docId - Required. The %SAX global (or alternative global) first key is an incrementing sequence for each XML document deserialized into XML Nodes.",(0,a.jsx)(t.br,{}),"\nie: for %SAX(docId) would pass first key docId"]}),"\n",(0,a.jsx)(t.li,{children:"outstream - Optional. If not supplied when the tool is run it will output to default device, for example the window of an interactive terminal session. Alternatively an open file stream can be passed in and output will be written to the file."}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"dumpbinarynode",children:"DumpBinaryNode"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod DumpBinaryNode(ByRef xmlGbl = "", docId = 1, nodeId = 0, outstream As %Stream.Object) [ Internal ]\n'})}),"\n",(0,a.jsx)(t.p,{children:"Currently only working for %SAX"}),"\n",(0,a.jsx)(t.h3,{id:"padtxt",children:"PadTxt"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod PadTxt(val, pad) [ CodeMode = expression, Internal ]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"treeinternal",children:"TreeInternal"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod TreeInternal(DocId, NodeId, baseChildlist, indent = -2, outstream As %Stream.Object) [ Internal, PublicList = (xmlGbl, %SAX) ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Recursive output nodes Repurpose of %XML.Writer method implementation for TreeInternal"}),"\n",(0,a.jsx)(t.h3,{id:"formattext",children:"FormatText"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod FormatText(data, empty = "<<EMPTY STRING>>") [ Internal ]\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Covert non-printable and formating whitespace into ZWRITE style format",(0,a.jsx)(t.br,{}),"\nAllows some visibility and understanding of non-printing and formatting characters"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Constant Value"}),(0,a.jsx)(t.th,{children:"Prints as"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:'"ABC"'}),(0,a.jsx)(t.td,{children:'"ABC"'})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:'$C(10,13)_"ABC"'}),(0,a.jsx)(t.td,{children:'$C(10,13)_"ABC"'})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:'"DEF"_$C(10,13)_"ABC"'}),(0,a.jsx)(t.td,{children:'"DEF"_$C(10,13)_"ABC"'})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:'"DEF"_$C(1,2,3)_"G"_$C(4,5,6,7,8,9)_"ABC"'}),(0,a.jsx)(t.td,{children:'"DEF"_$C(1,2,3)_"G"_$C(4,5,6,7,8,9)_"ABC"'})]})]})]}),"\n",(0,a.jsx)(t.h3,{id:"parsefile",children:"ParseFile"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ParseFile(inputFilePath As %String, outputFilePath As %String = "", dumpBinary = 0) As %Status\n'})}),"\n",(0,a.jsx)(t.p,{children:"For a given filepath Read in file as XML and output the corresponding SAX Tree structure Parameters:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"inputFilePath - Required. The name of a local file containing XML."}),"\n",(0,a.jsx)(t.li,{children:"outputFilePath - Optional. The name of a local file containing XML."}),"\n",(0,a.jsxs)(t.li,{children:["dumpBinary - Optional. To include additional and alternative view of content.\nExample to explore an XML file and print output to default device ",(0,a.jsx)(t.code,{children:"set tSC=##class(%XML.Utils.InspectSAXTree).ParseFile(inputFilePath) do $SYSTEM.Status.DisplayError(tSC)"})," Example to explore an XML file and print output report to file. ",(0,a.jsx)(t.code,{children:"set tSC=##class(%XML.Utils.InspectSAXTree).ParseFile(inputFilePath,outputFilePath) do $SYSTEM.Status.DisplayError(tSC)"})]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"parsestring",children:"ParseString"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ParseString(xmlString As %String = "", outputFilePath As %String = "", dumpBinary As %Boolean = 0) As %Status\n'})}),"\n",(0,a.jsx)(t.p,{children:"For a given string containing XML. Read in XML and output the corresponding SAX Tree structure Parameters:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"xmlString - Required. String containing well formed XML data."}),"\n",(0,a.jsx)(t.li,{children:"outputFilePath - Optional. The name of a local file containing XML."}),"\n",(0,a.jsxs)(t.li,{children:["dumpBinary - Optional. To include additional and alternative view of content.\nExample to explore a string of XML content and print output to default device ",(0,a.jsx)(t.code,{children:' set myxmlstring="some data</root" set tSC=##class(%XML.Utils.InspectSAXTree).ParseString(myxmlstring) do $SYSTEM.Status.DisplayError(tSC)  Example to explore a string of XML content and print output report to file. ` set tSC=##class(%XML.Utils.InspectSAXTree).ParseStream(myxmlstream,outputFilePath) do $SYSTEM.Status.DisplayError(tSC) `'})]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"parsestream",children:"ParseStream"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ParseStream(xmlstream, outputFilePath As %String = "", dumpBinary As %Boolean = 0) As %Status\n'})}),"\n",(0,a.jsx)(t.p,{children:"For a given stream containing XML. Read in XML and output the corresponding SAX Tree structure Parameters:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"xmlstream - Required. Stream containing well formed XML data."}),"\n",(0,a.jsx)(t.li,{children:"outputFilePath - Optional. The name of a local file containing XML."}),"\n",(0,a.jsxs)(t.li,{children:["dumpBinary - Optional. To include additional and alternative view of content.\nExample to explore a stream of XML content and print output to default device ",(0,a.jsx)(t.code,{children:"set tSC=##class(%XML.Utils.InspectSAXTree).ParseStream(myxmlstream) do $SYSTEM.Status.DisplayError(tSC)"})," Example to explore an XData block and print output report to file. ",(0,a.jsx)(t.code,{children:"set tSC=##class(%XML.Utils.InspectSAXTree).ParseStream(myxmlstream,outputFilePath) do $SYSTEM.Status.DisplayError(tSC)"})]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"parsexdata",children:"ParseXData"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ParseXData(xdataclass = "", xdataname = "", outputFilePath As %String = "", dumpBinary As %Boolean = 0) As %Status\n'})}),"\n",(0,a.jsx)(t.p,{children:"For a given Class XData Block. Read in XData content as XML and output the corresponding SAX Tree structure Parameters:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"xdataclass - Required. Compiled classname with XData to review."}),"\n",(0,a.jsx)(t.li,{children:"xdataname - Required. The name of XData block to review."}),"\n",(0,a.jsx)(t.li,{children:"outputFilePath - Optional. The name of a local file containing XML."}),"\n",(0,a.jsxs)(t.li,{children:["dumpBinary - Optional. To include additional and alternative view of content.\nExample to explore an XData block and print output to default device ",(0,a.jsx)(t.code,{children:"set tSC=##class(%XML.Utils.InspectSAXTree).ParseXData(myclassname,xdataname) do $SYSTEM.Status.DisplayError(tSC)"})," Example to explore an XData block and print output report to file. ",(0,a.jsx)(t.code,{children:"set tSC=##class(%XML.Utils.InspectSAXTree).ParseXData(myclassname,xdataname,outputFilePath) do $SYSTEM.Status.DisplayError(tSC)"})]}),"\n"]})]})}function o(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var a=n(96540);const l={},r=a.createContext(l);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);