"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[53371],{49973:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>i,default:()=>c,frontMatter:()=>n,toc:()=>o});var a=r(74848),s=r(28453);const n={pagination_prev:null,pagination_next:null},i="%ResultSet.Custom",o=[{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"%Get",id:"get",level:3},{value:"%GetData",id:"getdata",level:3},{value:"%SendODBC",id:"sendodbc",level:3},{value:"%SendObjects",id:"sendobjects",level:3},{value:"%ExecuteParametersGet",id:"executeparametersget",level:3},{value:"%MetadataGet",id:"metadataget",level:3},{value:"%GetSerializedMetaData",id:"getserializedmetadata",level:3},{value:"%OpenCursor",id:"opencursor",level:3},{value:"%Prepare",id:"prepare",level:3},{value:"%PrepareMetaData",id:"preparemetadata",level:3}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"resultsetcustom",children:"%ResultSet.Custom"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Class %ResultSet.Custom Extends %Library.IResultSet [ Abstract, System = 4 ]\n"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"This class has been superseded."})," It will remain for compatibility with existing code and samples. We recommend using %SQL.CustomResultSet."]}),"\n",(0,a.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(t.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnNew(ByRef returnError As %SYSTEM.Error, pRuntimeMode As %Integer = {$zu(115,5)}) As %Library.Status [ CodeMode = generator, Final, GenerateAfter = %OpenCursor ]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"get",children:"%Get"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'Method %Get(colname As %String = "") As %Library.String [ CodeMode = generator, ProcedureBlock = 1 ]\n'})}),"\n",(0,a.jsx)(t.p,{children:"%Get(colname) Get the value of the property whose column name is colname."}),"\n",(0,a.jsx)(t.h3,{id:"getdata",children:"%GetData"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetData(colnbr As %Integer = 0) As %Library.String [ CodeMode = generator ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"%GetData() Returns the value of the column referenced by colnbr. Object values are not swizzled automatically."}),"\n",(0,a.jsx)(t.h3,{id:"sendodbc",children:"%SendODBC"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SendODBC() As %Library.Integer [ CodeMode = generator, ProcedureBlock = 0 ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Fetch and send a series of rows for the ODBC/JDBC server. For internal use only."}),"\n",(0,a.jsx)(t.h3,{id:"sendobjects",children:"%SendObjects"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SendObjects() As %Library.Integer [ CodeMode = generator, Internal ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Fetch and send a series of rows for the ODBC/JDBC server. For internal use only."}),"\n",(0,a.jsx)(t.h3,{id:"executeparametersget",children:"%ExecuteParametersGet"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ExecuteParametersGet() [ CodeMode = generator, GenerateAfter = %Execute ]\n"})}),"\n",(0,a.jsx)(t.h3,{id:"metadataget",children:"%MetadataGet"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method %MetadataGet()\n"})}),"\n",(0,a.jsx)(t.p,{children:"Override the %Metadata property's Get() method."}),"\n",(0,a.jsx)(t.h3,{id:"getserializedmetadata",children:"%GetSerializedMetaData"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetSerializedMetaData() [ CodeMode = generator ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Get the serialized %Metadata property value. Used by both the instance method %MetadataGet and the %PrepareMetaData class method."}),"\n",(0,a.jsx)(t.h3,{id:"opencursor",children:"%OpenCursor"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OpenCursor() As %Library.Status [ Private ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"User written code to open the cursor here, you may also add arguments to the method"}),"\n",(0,a.jsx)(t.h3,{id:"prepare",children:"%Prepare"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %Prepare(queryId As %String(MAXLEN=""), ByRef %returnError As %SYSTEM.Error, %importPackages As %RawString = "", %args...) As %Library.IResultSet [ CodeMode = generator, ServerOnly = 1 ]\n'})}),"\n",(0,a.jsx)(t.p,{children:'%Prepare() This method is different for each type of result set class. This method has two tasks. First, instantiate the correct concrete result set class. Think of the first parameter, queryId, as being an "index key value" that is used to lookup the correct query implementation. For non-cached (static) queries this is simply the name of the class that implements the query, i.e. the %IResultSet interface. The second task is to prepare the resulting object for data retrieval by the caller which is done in %OnNew. The assumption is that if the query requires any parameters then the actual arguments are all literal or public variables. queryId the concrete subclass of %IResultSet that implements the desired query. For dynamic cached results this value is generally the query text that can be parsed, a hashed value computed and the cached result implementation class looked up in the query cache index. %returnError If an error occurs this is returned by reference and is a %SYSTEM.Error object with properties set to describe information about the error %importPackages This is a comma delimited list of packages to import. This is only relevant if the result set implementation is generated and the query source might include unqualified names. The import packages list is used to resolve package/schema names for unqualified names.'}),"\n",(0,a.jsx)(t.h3,{id:"preparemetadata",children:"%PrepareMetaData"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %PrepareMetaData(class As %String(MAXLEN=""), ByRef returnError As %SYSTEM.Error = "", importPackages As %RawString = "") As %ResultSet.MetaData [ CodeMode = generator, GenerateAfter = %MetadataGet ]\n'})}),"\n",(0,a.jsx)(t.p,{children:"%PrepareMetaData is similar to %Prepare except that no result set is instantiated. This method returns a %ResultSet.MetaData object. Be aware that the implementation of this method might cause the result set to be instantiated but that is up to the result set class itself and no result set is actually returned by this method - only metadata. class This is the custom result set class returnError If an error occurs this is returned by reference and is a %SYSTEM.Error object with properties set to describe information about the error. %returnError.Status contains the %Status value. importPackages This is a comma delimited list of packages to import. This is only relevant if the result set implementation is generated and the query source might include unqualified names. The import packages list is used to resolve package/schema names for unqualified names."})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>o});var a=r(96540);const s={},n=a.createContext(s);function i(e){const t=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(n.Provider,{value:t},e.children)}}}]);