"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[33916],{13734:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>i,default:()=>d,frontMatter:()=>r,toc:()=>o});var n=s(74848),a=s(28453);const r={pagination_prev:null,pagination_next:null},i="%MFT.API",o=[{value:"Methods",id:"methods",level:2},{value:"GetConnection",id:"getconnection",level:3},{value:"GetCurrentFolder",id:"getcurrentfolder",level:3},{value:"SetCurrentFolder",id:"setcurrentfolder",level:3},{value:"GetRequestId",id:"getrequestid",level:3},{value:"GetFolderInfo",id:"getfolderinfo",level:3},{value:"GetUsername",id:"getusername",level:3},{value:"DeleteFolder",id:"deletefolder",level:3},{value:"CreateFolder",id:"createfolder",level:3},{value:"GetFolderContents",id:"getfoldercontents",level:3},{value:"GetFileInfo",id:"getfileinfo",level:3},{value:"DeleteFile",id:"deletefile",level:3},{value:"UploadFile",id:"uploadfile",level:3},{value:"UploadStream",id:"uploadstream",level:3},{value:"DownloadFile",id:"downloadfile",level:3},{value:"DownloadStream",id:"downloadstream",level:3},{value:"ShareFolder",id:"sharefolder",level:3},{value:"UnshareFolder",id:"unsharefolder",level:3},{value:"UnshareFolderAll",id:"unsharefolderall",level:3},{value:"MountFolder",id:"mountfolder",level:3},{value:"UnmountFolder",id:"unmountfolder",level:3},{value:"DeleteUserById",id:"deleteuserbyid",level:3},{value:"DeleteUser",id:"deleteuser",level:3},{value:"CreateUser",id:"createuser",level:3},{value:"GetUserById",id:"getuserbyid",level:3},{value:"GetUser",id:"getuser",level:3},{value:"GetUserList",id:"getuserlist",level:3}];function l(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"mftapi",children:"%MFT.API"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"Class %MFT.API Extends %RegisteredObject [ Abstract, System = 4 ]\n"})}),"\n",(0,n.jsxs)(t.p,{children:['The File Management API is an implementation of access to the REST APIS from Box, Dropbox and Accellion Kiteworks. The connection to the underlying service is defined by the connection object, a subclass of %SYS.MFT.Connection.Base. This connection is passed as the first argument to each of the API calls either as the name of a saved persistent object or as a oref of a connection object. The remote files and folders being operated upon will be specified as a Unix style path. If the remote path is relative then it will be relative to the current remote folder. The root remote folder will always be denoted as "/". The local files will be specified as usual by a file system based path. If the local path is relative it will be relative to the manager directory.',(0,n.jsx)(t.br,{}),"\nThe file management API will be implemented in subclasses of the %MFT.API class which are particular to the vendor service."]}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"getconnection",children:"GetConnection"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetConnection(connectionName As %String, Output sc As %Status) As %SYS.MFT.Connection.Base\n"})}),"\n",(0,n.jsx)(t.p,{children:"Get the connection object associated with the specified connection name."}),"\n",(0,n.jsx)(t.h3,{id:"getcurrentfolder",children:"GetCurrentFolder"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetCurrentFolder(connection As %SYS.MFT.Connection.Base, Output folderPath As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the current remote folder path."}),"\n",(0,n.jsx)(t.h3,{id:"setcurrentfolder",children:"SetCurrentFolder"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetCurrentFolder(connection As %SYS.MFT.Connection.Base, folderPath As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Set the current remote folder path."}),"\n",(0,n.jsx)(t.h3,{id:"getrequestid",children:"GetRequestId"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetRequestId(connection As %SYS.MFT.Connection.Base, itemInfo As %MFT.ItemInfo) As %String\n"})}),"\n",(0,n.jsx)(t.p,{children:'Get the form of id for a file or folder that is most efficient for subsequent calls. GetRequestId will return either an id of the form "id:" or a full path depending on which is more efficient. This method is included to allow the id for future requests to be saved in the most efficient form.'}),"\n",(0,n.jsx)(t.h3,{id:"getfolderinfo",children:"GetFolderInfo"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFolderInfo(connection As %SYS.MFT.Connection.Base, path As %String, Output itemInfo As %MFT.ItemInfo) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:'Return the item info object which describes the specified folder. path may be a folder path. path may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object. "" May be used as the path to specify the current folder. If a folder does not exist at the specified path, then $$$OK is returned as status and itemInfo is returned as "".'}),"\n",(0,n.jsx)(t.h3,{id:"getusername",children:"GetUsername"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetUsername(connection As %SYS.MFT.Connection.Base, internalId As %String, Output username As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Get the external username that corresponds to the specified internal user id."}),"\n",(0,n.jsx)(t.h3,{id:"deletefolder",children:"DeleteFolder"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DeleteFolder(connection As %SYS.MFT.Connection.Base, path As %String, permanent As %Boolean = 0) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:['Delete the remote folder. path may be a folder path. path may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object.',(0,n.jsx)(t.br,{}),"\nIf permanent is true, then the folder will be permanently deleted. Otherwise the folder will be moved to trash.",(0,n.jsx)(t.br,{}),"\nIf the remote folder does not exist at the specified path, then $$$OK is returned as status."]}),"\n",(0,n.jsx)(t.h3,{id:"createfolder",children:"CreateFolder"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CreateFolder(connection As %SYS.MFT.Connection.Base, folderPath As %String, Output itemInfo As %MFT.ItemInfo) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Creates the remote folder at the specified folderPath. Each level of the folder path should be created separately if it does not already exist. An %MFT.ItemInfo object is returned for the new folder."}),"\n",(0,n.jsx)(t.h3,{id:"getfoldercontents",children:"GetFolderContents"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFolderContents(connection As %SYS.MFT.Connection.Base, folderPath As %String, recursive As %Boolean = 0, Output folderContents As %MFT.FolderContents) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:'Return the folder contents object for the specified folder. folderPath may be a folder path. folderPath may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object. "" May be used as the folderPath to specify the current folder. The FolderContents object will include a list of %MFT.ItemInfo objects which contain a file or folder name and some additional simple information.'}),"\n",(0,n.jsx)(t.h3,{id:"getfileinfo",children:"GetFileInfo"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetFileInfo(connection As %SYS.MFT.Connection.Base, path As %String, Output itemInfo As %MFT.ItemInfo) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:'Return the item info object which describes the specified file. path may be a file path. path may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object. If a file does not exist at the specified path, then $$$OK is returned as status and itemInfo is returned as "".'}),"\n",(0,n.jsx)(t.h3,{id:"deletefile",children:"DeleteFile"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DeleteFile(connection As %SYS.MFT.Connection.Base, path As %String, permanent As %Boolean = 0) As %Status\n"})}),"\n",(0,n.jsxs)(t.p,{children:['Delete the remote file. path may be a file path. path may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object.',(0,n.jsx)(t.br,{}),"\nIf permanent is true, then the file will be permanently deleted. Otherwise the file will be moved to trash. If the remote file does not exist at the specified path, then $$$OK is returned as status."]}),"\n",(0,n.jsx)(t.h3,{id:"uploadfile",children:"UploadFile"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod UploadFile(connection As %SYS.MFT.Connection.Base, localFilePath As %String, filePath As %String, replace As %Boolean = 0, Output itemInfo As %MFT.ItemInfo) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Update the specified remote file with the contents of the specified local file. filePath must be a file path. An id may not be specified. If replace is true, then an existing file of the same name will be replaced. The default is to return an error if a replacement is attempted."}),"\n",(0,n.jsx)(t.h3,{id:"uploadstream",children:"UploadStream"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod UploadStream(connection As %SYS.MFT.Connection.Base, stream As %BinaryStream, filePath As %String, replace As %Boolean = 0, Output itemInfo As %MFT.ItemInfo) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Update the specified remote file with the contents of the specified stream. filePath must be a file path. An id may not be specified. If replace is true, then an existing file of the same name will be replaced. The default is to return an error if a replacement is attempted."}),"\n",(0,n.jsx)(t.h3,{id:"downloadfile",children:"DownloadFile"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DownloadFile(connection As %SYS.MFT.Connection.Base, filePath As %String, localFilePath As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:'Download the specified remote file and store at the location given by localFilePath. filePath may be a file path. filePath may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object.'}),"\n",(0,n.jsx)(t.h3,{id:"downloadstream",children:"DownloadStream"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DownloadStream(connection As %SYS.MFT.Connection.Base, filePath As %String, ByRef stream As %BinaryStream) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:'Download the specified remote file and store in the specified stream which must be a %FileBinaryStream or a %GlobalBinaryStream. If stream is not specified, then a %GlobalBinaryStream will be created. filePath may be a file path. filePath may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object.'}),"\n",(0,n.jsx)(t.h3,{id:"sharefolder",children:"ShareFolder"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod ShareFolder(connection As %SYS.MFT.Connection.Base, path As %String, accessLevel As %String = "viewer", users As %List) As %Status\n'})}),"\n",(0,n.jsx)(t.p,{children:'Share a folder with a list of users pass as a $list. path may be a folder path. path may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object. The "editor" and "viewer" access levels are supported for all vendors. In addition, vendor specific access levels are supported.'}),"\n",(0,n.jsx)(t.h3,{id:"unsharefolder",children:"UnshareFolder"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod UnshareFolder(connection As %SYS.MFT.Connection.Base, path As %String, user As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:'Unshare a folder from a specified user. path may be a folder path. path may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object.'}),"\n",(0,n.jsx)(t.h3,{id:"unsharefolderall",children:"UnshareFolderAll"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod UnshareFolderAll(connection As %SYS.MFT.Connection.Base, path As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:'Unshare a folder from all users. path may be a folder path. path may also be specified as an id of the form "id:" which was obtained from a %MFT.ItemInfo object.'}),"\n",(0,n.jsx)(t.h3,{id:"mountfolder",children:"MountFolder"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod MountFolder(connection As %SYS.MFT.Connection.Base, folderName As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"MountFolder is a Dropbox specific method to mount a shared folder that was shared by a different user. MountFolder is treated as a NOP for all other services."}),"\n",(0,n.jsx)(t.h3,{id:"unmountfolder",children:"UnmountFolder"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod UnmountFolder(connection As %SYS.MFT.Connection.Base, folderName As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"UnmountFolder is a Dropbox specific method to unmount a shared folder that was shared by a different user. UnmountFolder is treated as a NOP for all other services."}),"\n",(0,n.jsx)(t.h3,{id:"deleteuserbyid",children:"DeleteUserById"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DeleteUserById(connection As %SYS.MFT.Connection.Base, userid As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Delete the user that is specified by the id."}),"\n",(0,n.jsx)(t.h3,{id:"deleteuser",children:"DeleteUser"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod DeleteUser(connection As %SYS.MFT.Connection.Base, username As %String) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Delete the user that is specified by the email address (i.e. username)."}),"\n",(0,n.jsx)(t.h3,{id:"createuser",children:"CreateUser"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod CreateUser(connection As %SYS.MFT.Connection.Base, userInfo As %MFT.UserInfo) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Create a new user. The Userid and Detail properties are filled in by CreateUser if it is successful."}),"\n",(0,n.jsx)(t.h3,{id:"getuserbyid",children:"GetUserById"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetUserById(connection As %SYS.MFT.Connection.Base, userid As %String, Output userInfo As %MFT.UserInfo) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:'Retrieve the %MFT.UserInfo specified by the service defined Userid. If the user does not exist, then $$$OK is returned as status and userInfo is returned as "".'}),"\n",(0,n.jsx)(t.h3,{id:"getuser",children:"GetUser"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetUser(connection As %SYS.MFT.Connection.Base, username As %String, Output userInfo As %MFT.UserInfo) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:'Retrieve the %MFT.UserInfo specified by the username which is the email address for all currently supported services. GetUser is potentially less efficient than GetUserById. If the user does not exist, then $$$OK is returned as status and userInfo is returned as "".'}),"\n",(0,n.jsx)(t.h3,{id:"getuserlist",children:"GetUserList"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetUserList(connection As %SYS.MFT.Connection.Base, Output userList As %MFT.UserList) As %Status\n"})}),"\n",(0,n.jsx)(t.p,{children:"Return the list of all currently defined users for this team or enterprise."})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>o});var n=s(96540);const a={},r=n.createContext(a);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);