"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[18415],{75683:(e,s,r)=>{r.r(s),r.d(s,{contentTitle:()=>a,default:()=>c,frontMatter:()=>l,toc:()=>i});var n=r(74848),t=r(28453);const l={pagination_prev:null,pagination_next:null},a="Config.NLS.Tables",i=[{value:"Parameters",id:"parameters",level:2},{value:"DOMAIN",id:"domain",level:3},{value:"Properties",id:"properties",level:2},{value:"COLRules",id:"colrules",level:3},{value:"Description",id:"description",level:3},{value:"Identifiers",id:"identifiers",level:3},{value:"Modes",id:"modes",level:3},{value:"NameFrom",id:"namefrom",level:3},{value:"NameTo",id:"nameto",level:3},{value:"PatAliases",id:"pataliases",level:3},{value:"PatCodes",id:"patcodes",level:3},{value:"PatternRanges",id:"patternranges",level:3},{value:"SubTableName",id:"subtablename",level:3},{value:"Type",id:"type",level:3},{value:"XLTDefaultAction",id:"xltdefaultaction",level:3},{value:"XLTModeTableName",id:"xltmodetablename",level:3},{value:"XLTReplacementValue",id:"xltreplacementvalue",level:3},{value:"XLTReversibility",id:"xltreversibility",level:3},{value:"XLTType",id:"xlttype",level:3},{value:"XYActions",id:"xyactions",level:3},{value:"Methods",id:"methods",level:2},{value:"Compile",id:"compile",level:3},{value:"Create",id:"create",level:3},{value:"CreateSkeleton",id:"createskeleton",level:3},{value:"Delete",id:"delete",level:3},{value:"Exists",id:"exists",level:3},{value:"Export",id:"export",level:3},{value:"ExportDir",id:"exportdir",level:3},{value:"ExportList",id:"exportlist",level:3},{value:"ExportToNls",id:"exporttonls",level:3},{value:"ExportAllToNls",id:"exportalltonls",level:3},{value:"FromToDeleteRow",id:"fromtodeleterow",level:3},{value:"FromToEditRow",id:"fromtoeditrow",level:3},{value:"Get",id:"get",level:3},{value:"GetProperties",id:"getproperties",level:3},{value:"GetPropertiesFromNls",id:"getpropertiesfromnls",level:3},{value:"Import",id:"import",level:3},{value:"ImportFromNls",id:"importfromnls",level:3},{value:"ImportAllFromNls",id:"importallfromnls",level:3},{value:"ImportDir",id:"importdir",level:3},{value:"IsLoadable",id:"isloadable",level:3},{value:"IsValid",id:"isvalid",level:3},{value:"Load",id:"load",level:3},{value:"Modify",id:"modify",level:3},{value:"SetProperties",id:"setproperties",level:3},{value:"SetPropertiesToNls",id:"setpropertiestonls",level:3},{value:"%OnAfterSave",id:"onaftersave",level:3},{value:"%OnBeforeSave",id:"onbeforesave",level:3},{value:"%OnDelete",id:"ondelete",level:3},{value:"%OnValidateObject",id:"onvalidateobject",level:3},{value:"DetailExecute",id:"detailexecute",level:3},{value:"DetailFetch",id:"detailfetch",level:3},{value:"DetailClose",id:"detailclose",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"ListFetch",id:"listfetch",level:3},{value:"ListClose",id:"listclose",level:3},{value:"FromToTableExecute",id:"fromtotableexecute",level:3},{value:"FromToTableFetch",id:"fromtotablefetch",level:3},{value:"FromToTableClose",id:"fromtotableclose",level:3}];function o(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"confignlstables",children:"Config.NLS.Tables"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class Config.NLS.Tables Extends (%Persistent, %XML.Adaptor, %SYSTEM.Help) [ Inheritance = right, System = 4 ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This class describes the basic properties of a table and, depending on its type, can also contain the table data itself."}),"\n",(0,n.jsx)(s.p,{children:"For types XLT, COL, and Case, the data points are stored in a SubTable object. For types Patcode, Ident and XY, the data points are kept in the Table object itself. Mode tables use a hybrid mechanism, with the modal escape sequences kept in the Table and the data points in a Mode SubTable. Pattern tables keep the pattern code ranges but also point to a Patcode Table."}),"\n",(0,n.jsx)(s.p,{children:"Warning!"}),"\n",(0,n.jsx)(s.p,{children:'Only tables which have a "NameFrom" or "NameTo" property beginning with "y" (e.g. "yPrinterXYZ" or "yMytable") are considered custom tables and are preserved during system upgrades. All other tables are restored to their original state and any changes to them made with methods from this class will be lost in an upgrade.'}),"\n",(0,n.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(s.h3,{id:"domain",children:"DOMAIN"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter DOMAIN = "%Utility";\n'})}),"\n",(0,n.jsx)(s.p,{children:"Default Localization Domain"}),"\n",(0,n.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(s.h3,{id:"colrules",children:"COLRules"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property COLRules As %List;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["For Collation tables only.",(0,n.jsx)(s.br,{}),"\n$LB(collation #,local encoding rule,global encoding rule)"]}),"\n",(0,n.jsx)(s.h3,{id:"description",children:"Description"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Description As %String(MAXLEN = 128);\n"})}),"\n",(0,n.jsx)(s.p,{children:"Description of the Table."}),"\n",(0,n.jsx)(s.h3,{id:"identifiers",children:"Identifiers"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Identifiers As %List;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["For Identifier tables only.",(0,n.jsx)(s.br,{}),'\n$LB("start:num","start:num",...)']}),"\n",(0,n.jsx)(s.h3,{id:"modes",children:"Modes"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Modes As array Of %String;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["For Mode tables only.",(0,n.jsx)(s.br,{}),'\narray({mode-index})="mode-name:mode-bytes:mode-seq"']}),"\n",(0,n.jsx)(s.h3,{id:"namefrom",children:"NameFrom"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property NameFrom As %String(MAXLEN = 64, MINLEN = 1) [ Required ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"For XLT tables this corresponds to the source encoding or character set. For the other types this is the character set used by the current locale."}),"\n",(0,n.jsx)(s.h3,{id:"nameto",children:"NameTo"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property NameTo As %String(MAXLEN = 64, MINLEN = 1) [ Required ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"For XLT tables this corresponds to the target encoding or character set. For the other types is is usually the name of the table."}),"\n",(0,n.jsx)(s.h3,{id:"pataliases",children:"PatAliases"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property PatAliases As %List;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["For Patcode tables only.",(0,n.jsx)(s.br,{}),'\n$LB("alias:codes","alias:codes",...)']}),"\n",(0,n.jsx)(s.h3,{id:"patcodes",children:"PatCodes"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property PatCodes As %List;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["For Patcode tables only.",(0,n.jsx)(s.br,{}),'\n$LB("code:num","code:num",...)']}),"\n",(0,n.jsx)(s.h3,{id:"patternranges",children:"PatternRanges"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property PatternRanges As array Of %List;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["For pattern tables only.",(0,n.jsx)(s.br,{}),'\narray("A")=$LB("start:num","start:num",...)']}),"\n",(0,n.jsx)(s.h3,{id:"subtablename",children:"SubTableName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property SubTableName As %String;\n"})}),"\n",(0,n.jsx)(s.p,{children:"For LowerCase, UpperCase, TitleCase, XLT, COL and Pattern tables."}),"\n",(0,n.jsx)(s.h3,{id:"type",children:"Type"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Type As %String(MAXLEN = 10, MINLEN = 1) [ Required ];\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Type of table:",(0,n.jsx)(s.br,{}),"\nLowercase, UpperCase, TitleCase,",(0,n.jsx)(s.br,{}),"\nXLT, COL, Mode, Pattern, Ident, XY, Patcode"]}),"\n",(0,n.jsx)(s.h3,{id:"xltdefaultaction",children:"XLTDefaultAction"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property XLTDefaultAction As %Integer;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["For XLT tables only.",(0,n.jsx)(s.br,{}),"\nXLT Default actions:",(0,n.jsx)(s.br,{}),"\n0 - Generate error",(0,n.jsx)(s.br,{}),"\n1 - Replace with replacement string/value",(0,n.jsx)(s.br,{}),"\n2 - Replace with original string/value (ignore)"]}),"\n",(0,n.jsx)(s.h3,{id:"xltmodetablename",children:"XLTModeTableName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property XLTModeTableName As %String;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["For XLT modal tables only.",(0,n.jsx)(s.br,{}),"\nXLT Name of mode table."]}),"\n",(0,n.jsx)(s.h3,{id:"xltreplacementvalue",children:"XLTReplacementValue"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property XLTReplacementValue As %String;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["For XLT tables only.",(0,n.jsx)(s.br,{}),"\nXLT Replacement value."]}),"\n",(0,n.jsx)(s.h3,{id:"xltreversibility",children:"XLTReversibility"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property XLTReversibility As %Integer;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["For XLT tables only.",(0,n.jsx)(s.br,{}),"\nXLT Reversibility:",(0,n.jsx)(s.br,{}),"\n0 - Non-reversible (ambiguous)",(0,n.jsx)(s.br,{}),"\n1 - Reversible",(0,n.jsx)(s.br,{}),"\n2 - Generated from a reversible table"]}),"\n",(0,n.jsx)(s.h3,{id:"xlttype",children:"XLTType"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property XLTType As %Integer;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["For XLT tables only.",(0,n.jsx)(s.br,{}),"\nXLT Table type:",(0,n.jsx)(s.br,{}),"\n0 - Non-modal to non-modal",(0,n.jsx)(s.br,{}),"\n1 - Non-modal to modal",(0,n.jsx)(s.br,{}),"\n2 - Modal to modal"]}),"\n",(0,n.jsx)(s.h3,{id:"xyactions",children:"XYActions"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property XYActions As array Of %List;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["For XY table only.",(0,n.jsx)(s.br,{}),'\narray({xytype})=$LB("start:num","start:num",...)',(0,n.jsx)(s.br,{}),"\nxytype:",(0,n.jsx)(s.br,{}),"\n0 - Normal printing character",(0,n.jsx)(s.br,{}),"\n1 - Full width character",(0,n.jsx)(s.br,{}),"\n2 - Non printing character",(0,n.jsx)(s.br,{}),"\n3 - Backspace character",(0,n.jsx)(s.br,{}),"\n4 - Line feed character",(0,n.jsx)(s.br,{}),"\n5 - Form feed character",(0,n.jsx)(s.br,{}),"\n6 - Carriage return character",(0,n.jsx)(s.br,{}),"\n7 - Escape sequence character"]}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"compile",children:"Compile"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Compile(Type As %String, NameFrom As %String, NameTo As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Compiles a single Table"}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'Type - Table type (eg: "LowerCase", "COL", "XLT", etc.)'}),"\n",(0,n.jsx)(s.li,{children:'NameFrom - Source character set (eg: "Unicode", "CP1250", "DTM-J", "etc.)'}),"\n",(0,n.jsx)(s.li,{children:'NameTo - Target character set (eg: "Unicode", "CP1251", "Latin2", etc.)'}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"create",children:"Create"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Create(Type As %String, NameFrom As %String, NameTo As %String, ByRef Properties As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Creates a Table the NLS database."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'Type - Table type (eg: "LowerCase", "COL", "XLT", etc.)'}),"\n",(0,n.jsx)(s.li,{children:'NameFrom - Source character set (eg: "Unicode", "CP1250", "DTM-J", "etc.)'}),"\n",(0,n.jsx)(s.li,{children:'NameTo - Target character set (eg: "Unicode", "CP1251", "Latin2", etc.)'}),"\n",(0,n.jsx)(s.li,{children:"Properties - Array of properties corresponding to the class properties"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"createskeleton",children:"CreateSkeleton"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateSkeleton(Type As %String, From As %String, To As %String, Maxchar As %Integer, ByRef Table As %ObjectHandle) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Creates a Table with common default parameters",(0,n.jsx)(s.br,{}),"\nDoesn't require passing a complete table specification."]}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'Type - Table type (eg: "LowerCase", "COL", "XLT", etc.)'}),"\n",(0,n.jsx)(s.li,{children:'From - Source character set (eg: "Unicode", "CP1250", "DTM-J", "etc.)'}),"\n",(0,n.jsx)(s.li,{children:'To - Target character set (eg: "Unicode", "CP1251", "Latin2", etc.)'}),"\n",(0,n.jsx)(s.li,{children:"Maxchar - Highest character: 0 (empty), 255 (8-bit), 65535 (Unicode)"}),"\n",(0,n.jsx)(s.li,{children:"Table - Return oref of the created object"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"delete",children:"Delete"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Delete(Type As %String, NameFrom As %String, NameTo As %String, Deep As %Integer = 0) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Deletes a Table."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'Type - Table type (eg: "LowerCase", "COL", "XLT", etc.)'}),"\n",(0,n.jsx)(s.li,{children:'NameFrom - Source character set (eg: "Unicode", "CP1250", "DTM-J", "etc.)'}),"\n",(0,n.jsx)(s.li,{children:'NameTo - Target character set (eg: "Unicode", "CP1251", "Latin2", etc.)'}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"exists",children:"Exists"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Exists(Type As %String, NameFrom As %String, NameTo As %String, ByRef Table As %ObjectHandle, ByRef Status As %Status) As %Boolean\n"})}),"\n",(0,n.jsx)(s.p,{children:"Checks for the existence of a Table in the NLS database."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'Type - Table type (eg: "LowerCase", "COL", "XLT", etc.)'}),"\n",(0,n.jsx)(s.li,{children:'NameFrom - Source character set (eg: "Unicode", "CP1250", "DTM-J", "etc.)'}),"\n",(0,n.jsxs)(s.li,{children:['NameTo - Target character set (eg: "Unicode", "CP1251", "Latin2", etc.)\nReturn values:',(0,n.jsx)(s.br,{}),"\nIf Value of the method = 0 (Table does not exist, or some error occured)"]}),"\n",(0,n.jsx)(s.li,{children:"Table = Null"}),"\n",(0,n.jsx)(s.li,{children:'Status = Table "x" does not exist, or other error message\nIf Value of the method = 1 (Table exists)'}),"\n",(0,n.jsx)(s.li,{children:"Table = Object handle to Table"}),"\n",(0,n.jsx)(s.li,{children:"Status = $$$OK"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"export",children:"Export"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Export(FileName As %String = "TablesExport.xml", ByRef NumExported As %Integer, Types As %String = "*", NamesFrom As %String = "*", NamesTo As %String = "*") As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Exports Table Objects to a file in xml format."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"FileName - Output file name"}),"\n",(0,n.jsx)(s.li,{children:"NumExported (byref) - Returns number of Table records exported."}),"\n",(0,n.jsx)(s.li,{children:'Tables - Comma separated list of Tables to export, "*" = All'}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"exportdir",children:"ExportDir"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportDir(Dir As %String, ByRef NumExported As %Integer, Types As %String = "*", NamesFrom As %String = "*", NamesTo As %String = "*") As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Exports Table Objects to separate xml files."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Dir - Directory where the files will be created"}),"\n",(0,n.jsx)(s.li,{children:"NumExported (byref) - Returns number of Table records exported."}),"\n",(0,n.jsx)(s.li,{children:'Types/NamesFrom/NamesTo - Comma separated list of Tables to export, "*" = All'}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"exportlist",children:"ExportList"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ExportList(FileName As %String = "TablesExport.xml", ByRef NumExported As %Integer, ByRef Tables As %String) As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Similar to Export() but uses a list of Tables to export rather than a query. Used internally by Locales.ExportList() and other utilities."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"FileName - Output file name"}),"\n",(0,n.jsx)(s.li,{children:"NumExported - Number of exported SubTables [out]"}),"\n",(0,n.jsx)(s.li,{children:"Tables - Array of Tables to export"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"exporttonls",children:"ExportToNls"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ExportToNls(Type As %String, NameFrom As %String, NameTo As %String, Deep As %Integer = 0) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Exports one Table record to ^%nls."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'Type - Table type (eg: "LowerCase", "COL", "XLT", etc.)'}),"\n",(0,n.jsx)(s.li,{children:'NameFrom - Source character set (eg: "Unicode", "CP1250", "DTM-J", "etc.)'}),"\n",(0,n.jsx)(s.li,{children:'NameTo - Target character set (eg: "Unicode", "CP1251", "Latin2", etc.)'}),"\n",(0,n.jsx)(s.li,{children:"Deep - If true export associated SubTable(s)"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"exportalltonls",children:"ExportAllToNls"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ExportAllToNls(ByRef NumExported As %Integer, Deep As %Integer = 0) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Exports all Table records to ^%nls."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Return values: Status"}),"\n",(0,n.jsx)(s.li,{children:"NumExported - Number of exported tables"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"fromtodeleterow",children:"FromToDeleteRow"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod FromToDeleteRow(Type As %String, NameFrom As %String, NameTo As %String, FromCode As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:'Deletes a single row in a "FromTo" table (XLT, COL or Case).'}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'Type - Table type (eg: "LowerCase", "COL", "XLT")'}),"\n",(0,n.jsx)(s.li,{children:'NameFrom - Source character set (eg: "Unicode", "CP1250", "DTM-J", "etc.)'}),"\n",(0,n.jsx)(s.li,{children:'NameTo - Target character set (eg: "Unicode", "CP1251", "Latin2", etc.)'}),"\n",(0,n.jsx)(s.li,{children:"FromCode - Source character or sequence"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"fromtoeditrow",children:"FromToEditRow"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod FromToEditRow(Type As %String, NameFrom As %String, NameTo As %String, FromCode As %String, ToCode As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:'Edits a single row in a "FromTo" table (XLT, COL or Case).'}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'Type - Table type (eg: "LowerCase", "COL", "XLT")'}),"\n",(0,n.jsx)(s.li,{children:'NameFrom - Source character set (eg: "Unicode", "CP1250", "DTM-J", "etc.)'}),"\n",(0,n.jsx)(s.li,{children:'NameTo - Target character set (eg: "Unicode", "CP1251", "Latin2", etc.)'}),"\n",(0,n.jsx)(s.li,{children:"FromCode - Source character or sequence"}),"\n",(0,n.jsx)(s.li,{children:"ToCode - Target character or sequence"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"get",children:"Get"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Get(Type As %String, NameFrom As %String, NameTo As %String, ByRef Properties As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Gets a Table's properties from the NLS database."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Name - Name of the Table to get"}),"\n",(0,n.jsx)(s.li,{children:"Properties - Array of properties. See the Create() method for a full list"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"getproperties",children:"GetProperties"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetProperties(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Gets a Table's properties from the NLS database."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Properties - See the Create method for more information on properties returned"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"getpropertiesfromnls",children:"GetPropertiesFromNls"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetPropertiesFromNls(Type As %String, NameFrom As %String, NameTo As %String, ByRef Properties As %String, Ref As %String = "^%nls") As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Gets a Table's properties from the ^%nls global."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'Type - Type of table ("XLT", "COL", etc.)'}),"\n",(0,n.jsx)(s.li,{children:'From - Source character set ("Latin1", "Unicode", etc)'}),"\n",(0,n.jsx)(s.li,{children:"To - Destination character set"}),"\n",(0,n.jsx)(s.li,{children:"Properties - Reference to array where properties will be stored"}),"\n",(0,n.jsx)(s.li,{children:"Ref - Source global reference\nSee the Create method for more information on properties returned"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"import",children:"Import"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Import(FileName As %String = "TablesExport.xml", ByRef NumImported As %Integer, Flags As %Integer = 0) As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Imports Table records from an xml file."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"FileName - Filename to import Table records from"}),"\n",(0,n.jsx)(s.li,{children:"NumImported (byref) - Returns number of records imported"}),"\n",(0,n.jsxs)(s.li,{children:["Flags - Control import\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Bit 0 - Do not import records, just return count\nNote: On failure, no records will be imported"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"importfromnls",children:"ImportFromNls"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ImportFromNls(Type As %String, NameFrom As %String, NameTo As %String, Deep As %Integer = 0, Ref As %String = "^%nls") As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Imports one Table record from ^%nls."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'Type - Table type (eg: "LowerCase", "COL", "XLT")'}),"\n",(0,n.jsx)(s.li,{children:'NameFrom - Character set or name (eg: "Unicode", "DTM-J")'}),"\n",(0,n.jsx)(s.li,{children:'NameTo - Character set or name (eg: "Unicode", "DTM-J")'}),"\n",(0,n.jsx)(s.li,{children:"Deep - If true also import associated SubTables"}),"\n",(0,n.jsx)(s.li,{children:"Ref - Source global reference"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"importallfromnls",children:"ImportAllFromNls"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ImportAllFromNls(ByRef NumImported As %Integer, Flags As %Integer = 0, Deep As %Integer = 0, Ref As %String = "^%nls") As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Imports Table records from ^%nls."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"NumImported (byref) - Returns number of records imported"}),"\n",(0,n.jsxs)(s.li,{children:["Flags - Control import\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Bit 0 - Do not import records, just return count"}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.li,{children:"Ref - Source global reference"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"importdir",children:"ImportDir"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ImportDir(Dir As %String, ByRef NumImported As %String, forcemulticompile As %Boolean = "") As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Imports table files from a directory."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Dir - Directory to import NLS files from"}),"\n",(0,n.jsx)(s.li,{children:"NumImported (byref) - Returns number of tables imported."}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"isloadable",children:"IsLoadable"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsLoadable(Type As %String, NameFrom As %String, NameTo As %String, ByRef Table As %ObjectHandle, ByRef Errors As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(s.p,{children:"Verifies whether a table can be loaded"}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'Type - Table type (eg: "LowerCase", "COL", "XLT")'}),"\n",(0,n.jsx)(s.li,{children:'NameFrom - Character set or name (eg: "Unicode", "DTM-J")'}),"\n",(0,n.jsx)(s.li,{children:'NameTo - Character set or name (eg: "Unicode", "DTM-J")'}),"\n",(0,n.jsx)(s.li,{children:"Table - Returned Table reference"}),"\n",(0,n.jsxs)(s.li,{children:["Errors - Returned list of errors\nReturns: True if table has been compiled and can be loaded",(0,n.jsx)(s.br,{}),"\nFalse otherwise"]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"isvalid",children:"IsValid"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsValid(Type As %String, NameFrom As %String, NameTo As %String, ByRef Errors As %String, ByRef Warnings As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(s.p,{children:"Verifies validity of table"}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'Type - Table type (eg: "LowerCase", "COL", "XLT")'}),"\n",(0,n.jsx)(s.li,{children:'NameFrom - Character set or name (eg: "Unicode", "DTM-J")'}),"\n",(0,n.jsx)(s.li,{children:'NameTo - Character set or name (eg: "Unicode", "DTM-J")'}),"\n",(0,n.jsx)(s.li,{children:"Errors - Returned list of errors"}),"\n",(0,n.jsxs)(s.li,{children:["Warnings - Returned list of warnings\nReturns: True if the table has a consistent definition",(0,n.jsx)(s.br,{}),"\nFalse otherwise"]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"load",children:"Load"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Load(loc As %String, typ As %String, nam As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Loads a Table from a Locale."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'loc - Name of locale that contains table (eg: "jpnw")'}),"\n",(0,n.jsx)(s.li,{children:'typ - Type of table (eg: "XLT", "UpperCase", "XY")'}),"\n",(0,n.jsxs)(s.li,{children:['nam - Name of table in locale (eg: "CP1252", "UnicodeBig")\nIf typ="COL" or typ="XLT", loads both input and output sides.',(0,n.jsx)(s.br,{}),"\nIf loc = current locale, changes defaults if necessary"]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"modify",children:"Modify"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Modify(Type As %String, NameFrom As %String, NameTo As %String, ByRef Properties As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Modifies an existing Table's properties in the NLS database."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'Type - Table type (eg: "LowerCase", "COL", "XLT", etc.)'}),"\n",(0,n.jsx)(s.li,{children:'NameFrom - Source character set (eg: "Unicode", "CP1250", "DTM-J", "etc.)'}),"\n",(0,n.jsx)(s.li,{children:'NameTo - Target character set (eg: "Unicode", "CP1251", "Latin2", etc.)'}),"\n",(0,n.jsxs)(s.li,{children:["Properties - Array of properties to modify.\nSee the Create() method for a description of the Properties parameter.",(0,n.jsx)(s.br,{}),"\nIf a specific property is not passed in the properties array, or is the same as the existing value, the value is not modified."]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"setproperties",children:"SetProperties"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method SetProperties(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Sets a Table's properties from the NLS database."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Properties - See the Create method for more information on properties returned"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"setpropertiestonls",children:"SetPropertiesToNls"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetPropertiesToNls(ByRef Properties As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Sets a Table's properties in ^%nls."}),"\n",(0,n.jsx)(s.p,{children:"Parameters:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Properties - Array with locale properties"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"onaftersave",children:"%OnAfterSave"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnAfterSave(insert As %Boolean) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method is invoked by the %Save method to provide notification that the object is being saved. It is called after the object's data has been successfully written to disk."}),"\n",(0,n.jsx)(s.p,{children:"insert will be set to 1 if this object is being saved for the first time."}),"\n",(0,n.jsx)(s.p,{children:"If this method returns an error then the call to %Save will fail. If the service name is %Service Terminal, reinitialize the memory which depends on it."}),"\n",(0,n.jsx)(s.h3,{id:"onbeforesave",children:"%OnBeforeSave"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnBeforeSave(insert As %Boolean) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method is invoked by the %Save method to provide notification that the object is being saved. It is called before any data is written to disk."}),"\n",(0,n.jsx)(s.p,{children:"insert will be set to 1 if this object is being saved for the first time."}),"\n",(0,n.jsx)(s.p,{children:"If this method returns an error then the call to %Save will fail."}),"\n",(0,n.jsx)(s.h3,{id:"ondelete",children:"%OnDelete"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %OnDelete(oid As %ObjectIdentity) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method is invoked by the %Delete method to provide notification that the object specified by oid is being deleted."}),"\n",(0,n.jsx)(s.p,{children:"If this method returns an error then the object will not be deleted."}),"\n",(0,n.jsx)(s.h3,{id:"onvalidateobject",children:"%OnValidateObject"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnValidateObject() As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method is invoked by the %ValidateObject method to provide notification that the current object is being validated."}),"\n",(0,n.jsx)(s.p,{children:"If this method returns an error then %ValidateObject will fail."}),"\n",(0,n.jsx)(s.h3,{id:"detailexecute",children:"DetailExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DetailExecute(ByRef qHandle As %Binary, Types As %String = "*", NamesFrom As %String = "*", NamesInto As %String = "*") As %Status [ Internal ]\n'})}),"\n",(0,n.jsxs)(s.p,{children:["List all Table records, brief display.",(0,n.jsx)(s.br,{}),'\nNames - Comma separated list of Table names, "*" = All',(0,n.jsx)(s.br,{}),'\nTypes - Comma separated list of Table types, "*" = All',(0,n.jsx)(s.br,{}),'\nNamesFrom - Comma separated list of source character set names, "*" = All',(0,n.jsx)(s.br,{}),'\nNamesTo - Comma separated list of target character set names, "*" = All',(0,n.jsx)(s.br,{}),"\nNote: This query may change in future versions"]}),"\n",(0,n.jsx)(s.h3,{id:"detailfetch",children:"DetailFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DetailFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = DetailExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"detailclose",children:"DetailClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DetailClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = DetailExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListExecute(ByRef qHandle As %Binary, Types As %String = "*", NamesFrom As %String, NamesTo As %String) As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(s.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"listclose",children:"ListClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"fromtotableexecute",children:"FromToTableExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod FromToTableExecute(ByRef qHandle As %Binary, Type As %String, NameFrom As %String, NameTo As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"fromtotablefetch",children:"FromToTableFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod FromToTableFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"fromtotableclose",children:"FromToTableClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod FromToTableClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = FromToTableExecute ]\n"})})]})}function c(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>a,x:()=>i});var n=r(96540);const t={},l=n.createContext(t);function a(e){const s=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(l.Provider,{value:s},e.children)}}}]);