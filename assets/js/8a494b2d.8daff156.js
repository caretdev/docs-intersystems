"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[36723],{63442:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>c,frontMatter:()=>i,toc:()=>s});var r=n(74848),a=n(28453);const i={pagination_prev:null,pagination_next:null},o="%Iterator.Array",s=[{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"%GetNext",id:"getnext",level:3}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",maxnumber:"maxnumber",maxstring:"maxstring",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"iteratorarray",children:"%Iterator.Array"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Iterator.Array Extends %Iterator.AbstractIterator [ System = 3 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Iterator over elements in a %DynamicArray"}),"\n",(0,r.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(t.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnNew(oref As %Library.DynamicAbstractObject) As %Status [ Internal, Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"getnext",children:"%GetNext"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetNext(Output key, Output value, Output type...) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"%GetNext() advances the iterator and returns true if the iterator is positioned on a valid element, and returns false if it is beyond the last element."}),"\n",(0,r.jsx)(t.p,{children:"Adding or removing an element of the %DynamicArray object will cause further calls on the %GetNext(.key,.value,.type) method to have undefined behavior."}),"\n",(0,r.jsxs)(t.p,{children:["The first argument is an output argument ",(0,r.jsx)(t.strong,{children:"key"})," which contains the key index number for the element that is returned."]}),"\n",(0,r.jsxs)(t.p,{children:["The second argument is an output argument ",(0,r.jsx)(t.strong,{children:"value"})," which contains the value for the returned element converted to ObjectScript. If the optional third argument is not pressent then a ",(0,r.jsxs)(t.maxnumber,{children:[" error signal may occur if the element value is a JSON number that is too large to be converted to an ObjectScript computational canonical number. If the optional third argument is not present then a ",(0,r.jsx)(t.maxstring,{children:" error signal may occur if the element value is a JSON string that exceeds the string length limit for ObjectScript string values. If the optional third argument is present then these conversion errors will be avoided."})]})]}),"\n",(0,r.jsxs)(t.p,{children:["The optional third output argument ",(0,r.jsx)(t.strong,{children:"type"}),", when it is present, will be modified to contain the %GetTypeOf(key) string representing the original type of the returned %DynamicArray element. When this third argument variable is present it changes some of the conversion rules for converting a %DynamicArray element into an ObjectScript value."]}),"\n",(0,r.jsx)(t.p,{children:"If the third parameter variable is present then an element which was originally a JSON format number will be returned as an ObjectScript string containing the JSON format number. If the element was originally an ObjectScript number then the returned value will be an ObjectScript computational canonical number."}),"\n",(0,r.jsxs)(t.p,{children:["If the element in the %DynamicArray was originally an ObjectScript oref then the ",(0,r.jsx)(t.strong,{children:"type"}),' argument will contain "oref". If the element was originally a very long JSON string that could not be converted to an ObjectScript string then the ',(0,r.jsx)(t.strong,{children:"value"})," argument will contain the oref for a readonly ObjectScript ",(0,r.jsx)(t.strong,{children:"%Stream.DynamicCharacter"})," or ",(0,r.jsx)(t.strong,{children:"%Stream.DynamicBinary"})," object containing the JSON string characters but the ",(0,r.jsx)(t.strong,{children:"type"}),' argument will still contain "string" and not "oref".']}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"type"})," value allows you to deterimine whether a %Stream oref returned in the ",(0,r.jsx)(t.strong,{children:"value"})," argument was originally an ObjectScript oref or a long JSON string."]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"type"})," can also allow you to determine whether a ",(0,r.jsx)(t.strong,{children:"value"}),' containing the ObjectScript empty string, "", was originally type "string" or "null" or whether a ',(0,r.jsx)(t.strong,{children:"value"}),' containing 0 or 1 was originally type "number" or type "boolean".']}),"\n",(0,r.jsxs)(t.p,{children:["To call this method, pass the ",(0,r.jsx)(t.strong,{children:"key"})," and ",(0,r.jsx)(t.strong,{children:"value"})," arguments, and optionally the ",(0,r.jsx)(t.strong,{children:"type"})," argument, by reference to receive their return values. To iterate over a %DynamicArray use the following pattern: ",(0,r.jsx)(t.code,{children:"while iterator.%GetNext(.key,.value,.type) { // key contains the element key index // and value contains the value // and type contains a %GetTypeOf string }"})]})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var r=n(96540);const a={},i=r.createContext(a);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);