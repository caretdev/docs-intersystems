"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[12748],{42761:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>l,default:()=>d,frontMatter:()=>o,toc:()=>i});var n=t(74848),a=t(28453);const o={pagination_prev:null,pagination_next:null},l="%ZEN.DataModel.DataModel",i=[{value:"Parameters",id:"parameters",level:2},{value:"READONLYMODEL",id:"readonlymodel",level:3},{value:"Properties",id:"properties",level:2},{value:"%id",id:"id",level:3},{value:"%seriesCount",id:"seriescount",level:3},{value:"%seriesNames",id:"seriesnames",level:3},{value:"Methods",id:"methods",level:2},{value:"%OpenModel",id:"openmodel",level:3},{value:"%OnOpenSource",id:"onopensource",level:3},{value:"%OnNewSource",id:"onnewsource",level:3},{value:"%OnLoadModel",id:"onloadmodel",level:3},{value:"%SaveModel",id:"savemodel",level:3},{value:"%OnStoreModel",id:"onstoremodel",level:3},{value:"%OnSaveSource",id:"onsavesource",level:3},{value:"%DeleteModel",id:"deletemodel",level:3},{value:"%OnDeleteModel",id:"ondeletemodel",level:3},{value:"%OnDeleteSource",id:"ondeletesource",level:3},{value:"%IsReadOnly",id:"isreadonly",level:3},{value:"%InvokeAction",id:"invokeaction",level:3},{value:"%OnInvokeAction",id:"oninvokeaction",level:3},{value:"%CopyDataToModel",id:"copydatatomodel",level:3},{value:"%CopyDataFromModel",id:"copydatafrommodel",level:3},{value:"%GetPropertyInfo",id:"getpropertyinfo",level:3},{value:"%OnGetPropertyInfo",id:"ongetpropertyinfo",level:3},{value:"%GetPropertyList",id:"getpropertylist",level:3},{value:"%SubmitHandler",id:"submithandler",level:3},{value:"%OnSubmit",id:"onsubmit",level:3}];function r(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"zendatamodeldatamodel",children:"%ZEN.DataModel.DataModel"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class %ZEN.DataModel.DataModel Extends %RegisteredObject [ Abstract, DependsOn = (%ZEN.Generator, %ZEN.DataModelUtils), Deprecated, System = 3 ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This is the abstract base class used by all model classes within the Zen Model-View-Controller mechanism.",(0,n.jsx)(s.br,{}),"\nSubclasses of this class are used to implement the Model portion of the Zen Model-View-Controller mechanism.",(0,n.jsx)(s.br,{}),"\nA DataModel class provides a generic mechanism to take data values from one or more sources (such as from a persistent object, external database, or directly from a global) and place these values into the properties of the DataModel."]}),"\n",(0,n.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(s.h3,{id:"readonlymodel",children:"READONLYMODEL"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter READONLYMODEL As BOOLEAN = 0;\n"})}),"\n",(0,n.jsx)(s.p,{children:"If this parameter is true, then this is a read-only data model. Instances of this data model cannot be saved or deleted."}),"\n",(0,n.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(s.h3,{id:"id",children:"%id"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Property %id As %ZEN.Datatype.string(XMLPROJECTION = "NONE") [ ClientName = dataModelId, Transient ];\n'})}),"\n",(0,n.jsxs)(s.p,{children:["The ID value used to identify a specific instance of DataModel object.",(0,n.jsx)(s.br,{}),"\nThe form and possible values of the ID are up the implementor of a specific DataModel class."]}),"\n",(0,n.jsx)(s.h3,{id:"seriescount",children:"%seriesCount"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Property %seriesCount As %ZEN.Datatype.integer(XMLPROJECTION = "NONE") [ InitialExpression = 1, Transient ];\n'})}),"\n",(0,n.jsx)(s.p,{children:"Number of data series contained within the data model."}),"\n",(0,n.jsx)(s.h3,{id:"seriesnames",children:"%seriesNames"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Property %seriesNames As %ZEN.Datatype.string(XMLPROJECTION = "NONE") [ MultiDimensional, Transient ];\n'})}),"\n",(0,n.jsx)(s.p,{children:"An array containing the display names for data series subscripted by series number (1-based)."}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"openmodel",children:"%OpenModel"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %OpenModel(pID As %String, pConcurrency As %Integer = -1, Output pSC As %Status = {$$$OK}) As %RegisteredObject\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Create an in-memory instance of a DataModel object and load data into it properties.",(0,n.jsx)(s.br,{}),"\nThis is implemented by the subclasses of this class. The signature of this method is designed to match the %OpenId method of persistent classes."]}),"\n",(0,n.jsx)(s.h3,{id:"onopensource",children:"%OnOpenSource"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnOpenSource(pID As %String, pConcurrency As %Integer = -1, Output pSC As %Status = {$$$OK}) As %RegisteredObject\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method is invoked when a DataModel is opened. If implemented, it opens an instance of the data source object used by the DataModel."}),"\n",(0,n.jsx)(s.h3,{id:"onnewsource",children:"%OnNewSource"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnNewSource(Output pSC As %Status = {$$$OK}) As %RegisteredObject\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method is invoked when a DataModel needs a new instance. If implemented, it opens a new (unsaved) instance of the data source object used by the DataModel."}),"\n",(0,n.jsx)(s.h3,{id:"onloadmodel",children:"%OnLoadModel"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnLoadModel(pSource As %RegisteredObject) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method does the actual work of loading values from the data source into this DataModel object."}),"\n",(0,n.jsx)(s.h3,{id:"savemodel",children:"%SaveModel"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %SaveModel() As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Save the data in this instance of DataModel back to its original source, if possible.",(0,n.jsx)(s.br,{}),"\nThis is implemented by the subclasses of this class."]}),"\n",(0,n.jsx)(s.h3,{id:"onstoremodel",children:"%OnStoreModel"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnStoreModel(pSource As %RegisteredObject) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method does the actual work of copying values from the DataModel to the data source."}),"\n",(0,n.jsx)(s.h3,{id:"onsavesource",children:"%OnSaveSource"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnSaveSource(pSource As %RegisteredObject) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method is called when the DataModel is saved. If implemented, it is responsible for saving changes to the data source."}),"\n",(0,n.jsx)(s.h3,{id:"deletemodel",children:"%DeleteModel"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %DeleteModel(pID As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Delete a given DataModel instance.",(0,n.jsx)(s.br,{}),"\nThis is implemented by the subclasses of this class."]}),"\n",(0,n.jsx)(s.h3,{id:"ondeletemodel",children:"%OnDeleteModel"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %OnDeleteModel(pID As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method is invoked when the DataModel is deleted. This is implemented by the subclasses of this class."}),"\n",(0,n.jsx)(s.h3,{id:"ondeletesource",children:"%OnDeleteSource"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %OnDeleteSource(pID As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This callback method is called when the DataModel is deleted. If implemented, it is responsible for making the appropriate deletes against the data source."}),"\n",(0,n.jsx)(s.h3,{id:"isreadonly",children:"%IsReadOnly"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %IsReadOnly() As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns whether this data model class is readonly."}),"\n",(0,n.jsx)(s.h3,{id:"invokeaction",children:"%InvokeAction"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %InvokeAction(pAction As %String, pData As %String) As %Status [ Final ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Invoke a user-defined named action on this model object.",(0,n.jsx)(s.br,{}),"\nThe actual work of perfoming the action is carried out by the %OnInvokeAction callback method."]}),"\n",(0,n.jsx)(s.h3,{id:"oninvokeaction",children:"%OnInvokeAction"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnInvokeAction(pAction As %String, pData As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Invoke a user-defined named action on this model object.",(0,n.jsx)(s.br,{}),"\nThis is implemented by the subclasses of this class."]}),"\n",(0,n.jsx)(s.h3,{id:"copydatatomodel",children:"%CopyDataToModel"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %CopyDataToModel(ByRef pData) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Internal method.",(0,n.jsx)(s.br,{}),"\nCalled by the dataController to move data into this model. Copies the values in the array pData (subscripted by property name) into this data model."]}),"\n",(0,n.jsx)(s.h3,{id:"copydatafrommodel",children:"%CopyDataFromModel"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %CopyDataFromModel(Output pData, Output pTypes) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Internal method.",(0,n.jsx)(s.br,{}),"\nCalled by the dataController to get data from this model. Copies the values in the data demo to the array pData (subscripted by property name). pTypes holds type information about the properties, as needed."]}),"\n",(0,n.jsx)(s.h3,{id:"getpropertyinfo",children:"%GetPropertyInfo"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %GetPropertyInfo(Output pList As %String, pExtended As %Boolean = 0, pContainer As %String = "") As %Status\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Return a list describing the properties within this DataModel.",(0,n.jsx)(s.br,{}),"\nThese are returned as an array of the form:",(0,n.jsx)(s.br,{}),"\npList(propname) = seqno",(0,n.jsx)(s.br,{}),"\nseqno, if present, is the ordinal position of this control on the form.",(0,n.jsx)(s.br,{}),"\nIf pExtended is true (1), then the array will include additional nodes for each property. This information is used to create dynamic forms for this model. The extra nodes may include:",(0,n.jsx)(s.br,{}),'\npList(name,"%type") = suggested control type for dynaForm<.br> pList(name,"size") = size used for controls.',(0,n.jsx)(s.br,{}),'\npList(name,"group") = id of group within dynaForm to place control.',(0,n.jsx)(s.br,{}),"\npContainer is the name of the containing property if this data model is embedded in another data model object."]}),"\n",(0,n.jsx)(s.h3,{id:"ongetpropertyinfo",children:"%OnGetPropertyInfo"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %OnGetPropertyInfo(pIndex As %Integer, ByRef pList As %String, pExtended As %Boolean = 0) As %Status [ Abstract ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This callback method, if present, is called by the %GetPropertyInfo method. This gives subclasses the opportunity to add additional property descriptions to the DataModel.",(0,n.jsx)(s.br,{}),"\npIndex is the number of elements (plus one) already in the list. This should be used as a starting sequence number when adding new properties to the list."]}),"\n",(0,n.jsx)(s.h3,{id:"getpropertylist",children:"%GetPropertyList"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %GetPropertyList(pModelId As %String) As %String [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:'Return a comma-delimited list of properties within this DataModel, including any virtual properties provided by the %OnGetPropertyInfo A property may optionally specify a type, such as "Memo:stream".'}),"\n",(0,n.jsx)(s.h3,{id:"submithandler",children:"%SubmitHandler"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %SubmitHandler(pSubmit As %ZEN.Submit) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Internal method.",(0,n.jsx)(s.br,{}),"\nIf a form connected to this DataModel is submitted, this method handles the server-side processing of the submit."]}),"\n",(0,n.jsx)(s.h3,{id:"onsubmit",children:"%OnSubmit"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnSubmit(pSubmit As %ZEN.Submit) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["If defined, this callback is called when a form connected to this DataModel is submitted.",(0,n.jsx)(s.br,{}),"\nThe contents of this DataModel will be filled in from the submitted values before this callback is invoked."]})]})}function d(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(r,{...e})}):r(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>i});var n=t(96540);const a={},o=n.createContext(a);function l(e){const s=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),n.createElement(o.Provider,{value:s},e.children)}}}]);