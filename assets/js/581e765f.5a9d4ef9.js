"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[57172],{98425:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>l,frontMatter:()=>r,toc:()=>o});var s=n(74848),a=n(28453);const r={pagination_prev:null,pagination_next:null},i="%ZEN.Auxiliary.altJSONProvider",o=[{value:"Parameters",id:"parameters",level:2},{value:"SYSMODULE",id:"sysmodule",level:3},{value:"DEFAULTVISIBLE",id:"defaultvisible",level:3},{value:"Properties",id:"properties",level:2},{value:"targetClass",id:"targetclass",level:3},{value:"%TargetObject",id:"targetobject",level:3},{value:"%ObjectReplacement",id:"objectreplacement",level:3},{value:"content",id:"content",level:3},{value:"error",id:"error",level:3},{value:"parameters",id:"parameters-1",level:3},{value:"%Format",id:"format",level:3},{value:"OnGetTargetObject",id:"ongettargetobject",level:3},{value:"OnGetArray",id:"ongetarray",level:3},{value:"OnSubmitContent",id:"onsubmitcontent",level:3},{value:"OnRenderJSON",id:"onrenderjson",level:3},{value:"seriesNameProperty",id:"seriesnameproperty",level:3},{value:"contentType",id:"contenttype",level:3},{value:"propertyList",id:"propertylist",level:3},{value:"%containerClass",id:"containerclass",level:3},{value:"documentId",id:"documentid",level:3},{value:"Methods",id:"methods",level:2},{value:"%DrawJSON",id:"drawjson",level:3},{value:"%SetTargetObject",id:"settargetobject",level:3},{value:"%OnGetArray",id:"ongetarray-1",level:3},{value:"%OnGetTargetObject",id:"ongettargetobject-1",level:3},{value:"%OnSubmitContent",id:"onsubmitcontent-1",level:3},{value:"%OnRenderJSON",id:"onrenderjson-1",level:3},{value:"SubmitToServer",id:"submittoserver",level:3},{value:"SubmitToServerAsync",id:"submittoserverasync",level:3},{value:"RefreshFromServer",id:"refreshfromserver",level:3},{value:"RefreshFromServerAsynch",id:"refreshfromserverasynch",level:3},{value:"hasObjContent",id:"hasobjcontent",level:3},{value:"%ZPOToAET",id:"zpotoaet",level:3},{value:"%AbstractListToAET",id:"abstractlisttoaet",level:3},{value:"%AbstractArrayToAET",id:"abstractarraytoaet",level:3},{value:"%COSObjectToAET",id:"cosobjecttoaet",level:3},{value:"%ObjectToAET",id:"objecttoaet",level:3},{value:"%ConvertAETScalar",id:"convertaetscalar",level:3},{value:"%ObjectToJSON",id:"objecttojson",level:3},{value:"%ArrayToAET",id:"arraytoaet",level:3},{value:"%ArrayToJSON",id:"arraytojson",level:3},{value:"LogMessage",id:"logmessage",level:3},{value:"%ConvertAETToZPO",id:"convertaettozpo",level:3},{value:"%TestForNestedObjects",id:"testfornestedobjects",level:3},{value:"%GetTypeInfo",id:"gettypeinfo",level:3},{value:"%UnpackArrayToCOSObject",id:"unpackarraytocosobject",level:3},{value:"%UnpackObjectToCOSObject",id:"unpackobjecttocosobject",level:3},{value:"%UnpackAETToObject",id:"unpackaettoobject",level:3},{value:"%ParseJSON",id:"parsejson",level:3},{value:"%WriteJSONToFile",id:"writejsontofile",level:3},{value:"%ParseFile",id:"parsefile",level:3},{value:"%ClearContentModified",id:"clearcontentmodified",level:3},{value:"%SetContentModified",id:"setcontentmodified",level:3},{value:"%OnDrawObjectProperties",id:"ondrawobjectproperties",level:3},{value:"%OnObjectSynch",id:"onobjectsynch",level:3},{value:"%AcquireData",id:"acquiredata",level:3},{value:"%WriteJSONFromArray",id:"writejsonfromarray",level:3},{value:"%WriteJSONFromObject",id:"writejsonfromobject",level:3},{value:"%ConvertJSONToObject",id:"convertjsontoobject",level:3},{value:"%WriteJSONStreamFromArray",id:"writejsonstreamfromarray",level:3},{value:"%WriteJSONStreamFromObject",id:"writejsonstreamfromobject",level:3},{value:"redirects",id:"redirects",level:3},{value:"getSuperClassList",id:"getsuperclasslist",level:3},{value:"getOrderedProps",id:"getorderedprops",level:3},{value:"getContentObject",id:"getcontentobject",level:3},{value:"getContentType",id:"getcontenttype",level:3},{value:"setContentType",id:"setcontenttype",level:3},{value:"setContentObject",id:"setcontentobject",level:3},{value:"setContentText",id:"setcontenttext",level:3},{value:"submitContent",id:"submitcontent",level:3},{value:"reloadContents",id:"reloadcontents",level:3},{value:"reloadContentsAsynch",id:"reloadcontentsasynch",level:3},{value:"refreshHandler",id:"refreshhandler",level:3},{value:"submitHandler",id:"submithandler",level:3},{value:"refreshContent",id:"refreshcontent",level:3},{value:"getError",id:"geterror",level:3},{value:"toJSON",id:"tojson",level:3},{value:"setProperty",id:"setproperty",level:3},{value:"getDimensions",id:"getdimensions",level:3},{value:"resetMetaData",id:"resetmetadata",level:3},{value:"findMetaData",id:"findmetadata",level:3},{value:"getObjectMetaData",id:"getobjectmetadata",level:3},{value:"getDimSize",id:"getdimsize",level:3},{value:"getDataAsArrays",id:"getdataasarrays",level:3},{value:"getLabel",id:"getlabel",level:3},{value:"getDataSourceCaption",id:"getdatasourcecaption",level:3},{value:"getDataByName",id:"getdatabyname",level:3},{value:"getData",id:"getdata",level:3},{value:"setData",id:"setdata",level:3},{value:"getPropertyName",id:"getpropertyname",level:3},{value:"setDataByName",id:"setdatabyname",level:3},{value:"hasData",id:"hasdata",level:3},{value:"onloadHandler",id:"onloadhandler",level:3},{value:"findObjectValue",id:"findobjectvalue",level:3},{value:"setObjectValue",id:"setobjectvalue",level:3},{value:"isArray",id:"isarray",level:3},{value:"save",id:"save",level:3},{value:"getContentArray",id:"getcontentarray",level:3}];function c(e){const t={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"zenauxiliaryaltjsonprovider",children:"%ZEN.Auxiliary.altJSONProvider"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %ZEN.Auxiliary.altJSONProvider Extends %ZEN.Auxiliary.abstractController [ Deprecated, System = 3 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The jsonProvider component provides a way to transport object data between a server and client (and vice versa) using JavaScript Object Notation (commonly abbreviated as JSON), as defined in RFC4627.",(0,s.jsx)(t.br,{}),"\nJSON format refers to a common JavaScript programming technique where you define a set of one or more objects using object literal syntax:",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.code,{children:'var obj = { "name": "Bill" };'})," The jsonProvider works as follows:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"You place an instance of the (invisible) jsonProvider component on your page."}),"\n",(0,s.jsx)(t.li,{children:"You supply a callback method, OnGetTargetObject, that creates an object or set of objects and returns it. This can be an instance of a specific class or classes or it can use the generic %ZEN.proxyObject."}),"\n",(0,s.jsx)(t.li,{children:"The jsonProvider converts the target object to a set of JavaScript objects when the page is rendered (which you can see if you view the source of the page as sent to the client)."}),"\n",(0,s.jsx)(t.li,{children:"The jsonProvider has a client-side method, getContentObject(), which returns the client-side version of the target object. This is simply a graph of generic JavaScript Object objects. These objects will have the same properties and values as the target objects. If the target objects refer to other objects or have collections (literal or object-valued) then the JavaScript object will have corresponding object or collection properties."}),"\n",(0,s.jsx)(t.li,{children:"The client can modify these client-side objects or replace them completely using the setContentObject() method."}),"\n",(0,s.jsx)(t.li,{children:"The client can ship its content objects back to the server for processing by calling the submitContent() method. This converts the objects back into server-side objects and invokes the callback method specified by the OnSubmitContent property."}),"\n",(0,s.jsx)(t.li,{children:"The callback defined by OnSubmitContent can modify the objects shipped to it or return a completely different set of objects. This makes it possible to use the jsonProvider as a way to execute different types of server operations.\nUsing the jsonProvider component as an object transport has advantages and disadvantages when compared with other mechanisms provided by Zen, such as the built-in transport provided for Zen components. The main advantage is that you can transport data without having to create or modify server classes \u2014 you can ship most any server-side object using this technique. The disadvantages are:"}),"\n",(0,s.jsx)(t.li,{children:'You can ship a set of objects, but the objects must form a graph from a "parent" object down through levels of "children" (this is due to how JSON format data is reconstituted on the client). You cannot have child objects refer to parents, siblings or other objects outside of the graph.'}),"\n",(0,s.jsx)(t.li,{children:"This approach uses late binding so it is not as efficient as the code generated approach used by Zen components."}),"\n",(0,s.jsx)(t.li,{children:'Not all object properties are supported: you cannot ship binary streams or values. Only references to "child" objects are transported. Any user-defined Javascript properties whose name starts with "_" (an underscore) are not included in the content shipped back to the server.\nThe jsonProvider code may also be invoked from a non-Zen context by calling one of the following APIs:'}),"\n",(0,s.jsx)(t.li,{children:"%WriteJSONFromArray"}),"\n",(0,s.jsx)(t.li,{children:"%WriteJSONFromObject"}),"\n",(0,s.jsx)(t.li,{children:"%WriteJSONStreamFromArray"}),"\n",(0,s.jsx)(t.li,{children:"%WriteJSONStreamFromObject"}),"\n",(0,s.jsx)(t.li,{children:"%ConvertJSONToObject"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(t.h3,{id:"sysmodule",children:"SYSMODULE"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter SYSMODULE = "json";\n'})}),"\n",(0,s.jsx)(t.h3,{id:"defaultvisible",children:"DEFAULTVISIBLE"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter DEFAULTVISIBLE = 0;\n"})}),"\n",(0,s.jsx)(t.p,{children:"This component is not visible."}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"targetclass",children:"targetClass"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property targetClass As %ZEN.Datatype.className;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Class name of the target object expected to be served by this component. Setting the target object will also set this as a side effect."}),"\n",(0,s.jsx)(t.h3,{id:"targetobject",children:"%TargetObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property %TargetObject As %RegisteredObject(XMLPROJECTION = "none") [ Internal, Private ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"Used to hold the target object."}),"\n",(0,s.jsx)(t.h3,{id:"objectreplacement",children:"%ObjectReplacement"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property %ObjectReplacement As %RegisteredObject(XMLPROJECTION = "none") [ Internal, Private ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"Used to temporarily hold the response object returned by the OnSubmitContent() callback."}),"\n",(0,s.jsx)(t.h3,{id:"content",children:"content"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property content As %ZEN.Datatype.string(XMLPROJECTION = "none", ZENSETTING = 0) [ Internal ];\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This property contains the JSON-notation content of the target object.",(0,s.jsx)(t.br,{}),"\nThis is automatically set in any of the following ways:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"When the server-side OnGetTargetObject callback is called."}),"\n",(0,s.jsx)(t.li,{children:"When the server-side %SetTargetObject() method is called."}),"\n",(0,s.jsx)(t.li,{children:"When the client-side setContentObject() method is called."}),"\n",(0,s.jsx)(t.li,{children:"When the client-side setContentText() method is called.\nUse the getContentObject() method to get the contents of this property."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"error",children:"error"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property error As %ZEN.Datatype.string(XMLPROJECTION = "none", ZENSETTING = 0);\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Run-time value. Set to indicate an error within this component.",(0,s.jsx)(t.br,{}),"\nThis is primarily used by controls. It is defined here for flexibility."]}),"\n",(0,s.jsx)(t.h3,{id:"parameters-1",children:"parameters"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property parameters As array Of %ZEN.Auxiliary.parameter(XMLKEYNAME = "paramName", XMLNAME = "parameter", XMLPROJECTION = "ELEMENT");\n'})}),"\n",(0,s.jsx)(t.p,{children:"User-defined set of parameters. These values are passed on to the user callback function that provides the contents of this view. Typically this is used to hold search parameters."}),"\n",(0,s.jsx)(t.h3,{id:"format",children:"%Format"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property %Format As %ZEN.Datatype.string [ InitialExpression = "aceloqtw" ];\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Flags string consisting of character options that control output formatting.",(0,s.jsx)(t.br,{}),"\nJSON written out using the OnRenderJSON callback is not affected by this value. See the description of method %ObjectToJSON() for a list of options this value may include."]}),"\n",(0,s.jsx)(t.h3,{id:"ongettargetobject",children:"OnGetTargetObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property OnGetTargetObject As %ZEN.Datatype.delegator(FORMALSPEC = "&pParameters:%String,*pObject:%RegisteredObject", RETURNTYPE = "%Status");\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Supply data for the JSON provider as a set of server objects.",(0,s.jsx)(t.br,{}),"\nThis callback method is invoked when the page containing this jsonProvider is rendered. It is expected to return (by reference) an instance of the object whose data is to be provided to the client in JSON format.",(0,s.jsx)(t.br,{}),"\nFor example:",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.code,{children:'Method GetTarget( ByRef pParameters As %String, Output pObject As %RegisteredObject) As %Status { Set pObject = ##class(MyApp.MyClass).%New() Set pObject.Name = "Bob" Quit $$$OK }'})]}),"\n",(0,s.jsx)(t.h3,{id:"ongetarray",children:"OnGetArray"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property OnGetArray As %ZEN.Datatype.delegator(FORMALSPEC = "&pParameters:%String,*pMetaData,*pData", RETURNTYPE = "%Status");\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Supply data for the JSON provider as a server-side array.",(0,s.jsx)(t.br,{}),"\nThis callback method is invoked when the page containing this jsonProvider is rendered.",(0,s.jsx)(t.br,{}),"\nThis callback provides an easy way to ship a set of identical objects to the client by filling in a multidimensional array. The callback method is expected to fill in two structures:",(0,s.jsx)(t.br,{}),"\npMetaData is a $List containing the names of the properties of the objects in the order in which they will appear.",(0,s.jsx)(t.br,{}),"\npData is an array containing the data. Each node in the array should be a $List containing values for properties. This should match the meta data provided in pMetaData. The array of data can use any subscript value its wants. It is possible to define a hierarchical array. In this case, children nodes are placed within a parent collection called children.",(0,s.jsx)(t.br,{}),"\nIf this callback is defined, then the OnGetTargetObject callback will not be invoked. For example:",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.code,{children:'Method GetArray( ByRef pParameters As %String, Output pMetaData, Output pData) As %Status { Set pMetaData = $LB("name","rank","serialNo") Set pData(1) = $LB("Smith","Captain","444-33-2222") Set pData(1,1) = $LB("Jones","Corporal","333-22-3333") Quit $$$OK }'})," This would result in the two objects being shipped to the client (in JSON format): ",(0,s.jsx)(t.code,{children:'var content = { "name": "Smith", "rank": "Captain", "serialNo": "444-33-2222", "children": [ { "name": "Jones", "rank": "Corporal", "serialNo": "333-22-3333" } ] };'})]}),"\n",(0,s.jsx)(t.h3,{id:"onsubmitcontent",children:"OnSubmitContent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property OnSubmitContent As %ZEN.Datatype.delegator(FORMALSPEC = "pCommand:%String,pProvider:%ZEN.Auxiliary.jsonProvider,pSubmitObject:%RegisteredObject,&pResponseObject:%RegisteredObject", RETURNTYPE = "%Status");\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This callback method is invoked when the client submits an object to the server by calling the submitContent() method. The callback is passed the submitted object in pSubmitObject after it has been converted from JSON format back into an object instance. It is also passed the command string supplied to the submitContent() method in pCommand.",(0,s.jsx)(t.br,{}),"\nIf the callback method returns an object via the pResponseObject argument, then this object is returned to the client and becomes the new content of the JSON provider.",(0,s.jsx)(t.br,{}),"\nFor example:",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.code,{children:"Method SubmitHandler( pCommand As %String, pProvider As %ZEN.Auxiliary.jsonProvider, pSubmitObject As %RegisteredObject, Output pResponseObject As %RegisteredObject) As %Status { Set tSC = $$$OK If ($IsObject(pObject)) { Set tSC = pObject.%Save() } Quit tSC }"})]}),"\n",(0,s.jsx)(t.h3,{id:"onrenderjson",children:"OnRenderJSON"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property OnRenderJSON As %ZEN.Datatype.delegator(FORMALSPEC = "&pParameters:%String", RETURNTYPE = "%Status");\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Optional. If implemented this callback is expected to write out to the current device the contents of a set of related objects in JSON format.",(0,s.jsx)(t.br,{}),"\nIf present, this overrides the default behavior of this component and the OnGetTargetObject callback is ignored."]}),"\n",(0,s.jsx)(t.h3,{id:"seriesnameproperty",children:"seriesNameProperty"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property seriesNameProperty As %ZEN.Datatype.string [ InitialExpression = "caption" ];\n'})}),"\n",(0,s.jsx)(t.p,{children:'Optional. When this provider is used as a data controller, this is the name of the property in the JSON data that provides the series names to view connected to the provider. The default is "caption".'}),"\n",(0,s.jsx)(t.h3,{id:"contenttype",children:"contentType"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property contentType As %ZEN.Datatype.string [ Internal ];\n"})}),"\n",(0,s.jsxs)(t.p,{children:['Indicates what kind of data is supplied by this provider. This can be: "object" (an object or graph of objects) or "array" (an array of objects).',(0,s.jsx)(t.br,{}),"\nThis is set automatically. For custom JSON output, the user specified value is used."]}),"\n",(0,s.jsx)(t.h3,{id:"propertylist",children:"propertyList"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property propertyList As %ZEN.Datatype.csv;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Optional. If supplied this is an comma-delimited list of property names. These names are used to define the default ordering of properties supplied by this provider. If a property name is in the list but not in the content data, it is used but will have a value of ''. Properties in the content object but not in this list are listed at the end."}),"\n",(0,s.jsx)(t.h3,{id:"containerclass",children:"%containerClass"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %containerClass As %ZEN.Datatype.string [ Internal ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Name of class containing callback methods when this provider is used in direct (non-Zen) mode. See %WriteJSONFromArray for details."}),"\n",(0,s.jsx)(t.h3,{id:"documentid",children:"documentId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property documentId As %ZEN.Datatype.string;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Optional. If provided (and no other callbacks are defined), then this is the id of a document interface (subclass of %ZEN.DataModel.AbstractDocument) that is used to supply data to the provider.",(0,s.jsx)(t.br,{}),'\nA document id takes the form "docName/docInstance", where *docName* is the logical name of a data document and *docInstance* is a instance id.']}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"drawjson",children:"%DrawJSON"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %DrawJSON() As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Draw JSON output for the target object."}),"\n",(0,s.jsx)(t.h3,{id:"settargetobject",children:"%SetTargetObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetTargetObject(pObject As %RegisteredObject) As %Status\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Set pObject as the target object for this provider.",(0,s.jsx)(t.br,{}),"\nSet targetClass to the target object class."]}),"\n",(0,s.jsx)(t.h3,{id:"ongetarray-1",children:"%OnGetArray"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnGetArray(ByRef pParms, Output pMetaData, Output pData) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Invoke the OnGetArray callback."}),"\n",(0,s.jsx)(t.h3,{id:"ongettargetobject-1",children:"%OnGetTargetObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnGetTargetObject(ByRef pParms, Output pObject As %RegisteredObject) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Invoke the OnGetTargetObject callback."}),"\n",(0,s.jsx)(t.h3,{id:"onsubmitcontent-1",children:"%OnSubmitContent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnSubmitContent(pCommand As %String, pSubmitObject As %RegisteredObject, ByRef pResponseObject As %RegisteredObject) As %Status [ Internal ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Invoke the OnSubmitContent callback.",(0,s.jsx)(t.br,{}),"\nIf pResponseObject is returned, then it is passed back to the client."]}),"\n",(0,s.jsx)(t.h3,{id:"onrenderjson-1",children:"%OnRenderJSON"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnRenderJSON(ByRef pParms) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Invoke the OnRenderJSON callback."}),"\n",(0,s.jsx)(t.h3,{id:"submittoserver",children:"SubmitToServer"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method SubmitToServer(pCommand As %String, pContent As %String, pTargetClass As %String) As %Boolean [ Internal, ZenMethod ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This server-side method is called by the submitContent() method."}),"\n",(0,s.jsx)(t.h3,{id:"submittoserverasync",children:"SubmitToServerAsync"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method SubmitToServerAsync(pCommand As %String, pContent As %String, pTargetClass As %String) [ Internal, ZenMethod ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This server-side method is called by the submitContent() method in async mode."}),"\n",(0,s.jsx)(t.h3,{id:"refreshfromserver",children:"RefreshFromServer"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method RefreshFromServer() As %Boolean [ Internal, ZenMethod ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This server-side method is called by the reloadContents() method."}),"\n",(0,s.jsx)(t.h3,{id:"refreshfromserverasynch",children:"RefreshFromServerAsynch"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method RefreshFromServerAsynch() [ Internal, ZenMethod ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This server-side method is called by the reloadContentsAsynch() method."}),"\n",(0,s.jsx)(t.h3,{id:"hasobjcontent",children:"hasObjContent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod hasObjContent(pObject As %RegisteredObject, ByRef pVisited, pFormat As %String, pRecursing As %Boolean = 0) As %Boolean [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Drill down just enough to find out if the object has any content displayable as JSON given the current pFormat options."}),"\n",(0,s.jsx)(t.h3,{id:"zpotoaet",children:"%ZPOToAET"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ZPOToAET(pZPO As %ZEN.proxyObject, pLevel As %Integer = 0, pFormat As %String = "aelo") As %DynamicAbstractObject [ Internal ]\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Repack the contents of a Zen proxy object to an abstract entity tree.",(0,s.jsx)(t.br,{}),"\npFormat is a flags string to control output formatting options.",(0,s.jsx)(t.br,{}),"\nThe following character option codes are supported:",(0,s.jsx)(t.br,{}),'\nc - output the ObjectScript-specific "_class" and "_id" properties (if a child property is an instance of a concrete object class)']}),"\n",(0,s.jsx)(t.h3,{id:"abstractlisttoaet",children:"%AbstractListToAET"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %AbstractListToAET(pObject As %RegisteredObject, ByRef pVisited, pLevel As %Integer = 0, pFormat As %String = "acelo") As %DynamicAbstractObject [ Internal ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Convert an instance of AbstractList to an AET structure returning that structure is successful or -1 if the structure cannot be converted for some reason"}),"\n",(0,s.jsx)(t.h3,{id:"abstractarraytoaet",children:"%AbstractArrayToAET"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %AbstractArrayToAET(pObject As %RegisteredObject, ByRef pVisited, pLevel As %Integer = 0, pFormat As %String = "acelo") As %DynamicAbstractObject [ Internal ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Convert an instance of AbstractArray to an AET structure returning that structure is successful or -1 if the structure cannot be converted for some reason"}),"\n",(0,s.jsx)(t.h3,{id:"cosobjecttoaet",children:"%COSObjectToAET"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %COSObjectToAET(pObject As %RegisteredObject, ByRef pVisited, pLevel As %Integer = 0, pFormat As %String = "acelo") As %DynamicAbstractObject [ Internal ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Convert an instance of a COS Object to an AET structure returning that structure is successful or -1 if the structure cannot be converted for some reason"}),"\n",(0,s.jsx)(t.h3,{id:"objecttoaet",children:"%ObjectToAET"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ObjectToAET(pObject As %RegisteredObject, ByRef pVisited, pLevel As %Integer = 0, pFormat As %String = "acelo") As %DynamicAbstractObject\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Convert the contents of object instance pObject to an abstract entity tree. pFormat is a flags string to control output options. The following character option codes are supported:",(0,s.jsx)(t.br,{}),'\nc - output the ObjectScript-specific "_class" and "_id" properties',(0,s.jsx)(t.br,{}),'\nd - output numeric properties that have value "" as null']}),"\n",(0,s.jsx)(t.h3,{id:"convertaetscalar",children:"%ConvertAETScalar"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %ConvertAETScalar(pValue As %String, pDataType As %String, pFormat As %String) As %String [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"objecttojson",children:"%ObjectToJSON"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ObjectToJSON(pObject As %RegisteredObject, ByRef pVisited, pLevel As %Integer = 0, pFormat As %String = "aceloqstw") As %Status\n'})}),"\n",(0,s.jsx)(t.p,{children:"Write out the contents of object instance pObject to the current device using JSON notation."}),"\n",(0,s.jsx)(t.h3,{id:"arraytoaet",children:"%ArrayToAET"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %ArrayToAET(ByRef pMetaData, ByRef pData) As %DynamicAbstractObject [ PublicList = pData ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Convert the contents of the local array pData to an AET structure pMetaData is a $List containing the names of the properties of the objects in the order in which they will appear.",(0,s.jsx)(t.br,{}),"\npData is an array containing the data. Each node in the array should be a $List containing values for properties. This should match the meta data provided in pMetaData. The array of data can use any subscript value its wants. It is possible to define a hierarchical array. In this case, children nodes are placed within a parent collection called children."]}),"\n",(0,s.jsx)(t.h3,{id:"arraytojson",children:"%ArrayToJSON"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ArrayToJSON(ByRef pMetaData, ByRef pData, pFormat As %String = "tw") As %Status [ PublicList = pData ]\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Write out the contents of the local array pData to the current device using JSON notation pMetaData is a $List containing the names of the properties of the objects in the order in which they will appear.",(0,s.jsx)(t.br,{}),"\npData is an array containing the data. Each node in the array should be a $List containing values for properties. This should match the meta data provided in pMetaData. The array of data can use any subscript value its wants. It is possible to define a hierarchical array. In this case, children nodes are placed within a parent collection called children.",(0,s.jsx)(t.br,{}),"\npFormat is a flags string that controls output formatting options.",(0,s.jsx)(t.br,{}),"\nThe following character option codes are supported:",(0,s.jsx)(t.br,{}),"\n1-9 : indent with this number of spaces (4 is the default with the 'i' format specifier)",(0,s.jsx)(t.br,{}),"\nb - line break before opening { of objects",(0,s.jsx)(t.br,{}),"\ni - indent with 4 spaces unless 't' or 1-9",(0,s.jsx)(t.br,{}),"\nn - newline (lf)",(0,s.jsx)(t.br,{}),"\ns - use strict JSON output - ",(0,s.jsx)(t.strong,{children:"NOTE:"})," special care should be taken when sending data to a browser, as using this flag may expose you to cross site scripting (XSS) vulnerabilities if the data is sent inside ",(0,s.jsx)(t.code,{children:"<script>"})," tags. Zen uses this technique extensively, so this flag should ",(0,s.jsx)(t.strong,{children:"NOT"})," be specified for jsonProviders in Zen pages.",(0,s.jsx)(t.br,{}),"\nt - indent with tab character",(0,s.jsx)(t.br,{}),"\nu - output pre-converted to UTF-8 instead of in native internal format",(0,s.jsx)(t.br,{}),"\nw - Windows-style cr/lf newline"]}),"\n",(0,s.jsx)(t.h3,{id:"logmessage",children:"LogMessage"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod LogMessage(msg As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.h3,{id:"convertaettozpo",children:"%ConvertAETToZPO"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %ConvertAETToZPO(obj As %DynamicAbstractObject, rootType As %String) As %ZEN.proxyObject [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Given an Abstract Entity Tree of potentially nested %DynamicObject and %DynamicArray nodes, convert this memory structure to one using the legacy %ZEN.proxyObject and %Collection.AbstractList"}),"\n",(0,s.jsx)(t.h3,{id:"testfornestedobjects",children:"%TestForNestedObjects"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %TestForNestedObjects(pObj As %DynamicArray) As %Boolean\n"})}),"\n",(0,s.jsx)(t.h3,{id:"gettypeinfo",children:"%GetTypeInfo"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetTypeInfo(pClass As %String, pProperty As %String) As %DynamicObject\n"})}),"\n",(0,s.jsx)(t.h3,{id:"unpackarraytocosobject",children:"%UnpackArrayToCOSObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %UnpackArrayToCOSObject(obj As %DynamicAbstractObject, targetObj As %RegisteredObject, pMember As %String, pIgnoreUnknownProps As %Boolean = 0) [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Given an AET Array node of potentially nested %DynamicObject and %DynamicArray nodes, convert this memory structure to one using the the provided COS object class"}),"\n",(0,s.jsx)(t.h3,{id:"unpackobjecttocosobject",children:"%UnpackObjectToCOSObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %UnpackObjectToCOSObject(obj As %DynamicAbstractObject, pClass As %String, pIgnoreUnknownProps As %Boolean = 0) As %RegisteredObject [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Given an AET Object node of potentially nested %DynamicObject and %DynamicArray nodes, convert this memory structure to one using the the provided COS object class"}),"\n",(0,s.jsx)(t.h3,{id:"unpackaettoobject",children:"%UnpackAETToObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %UnpackAETToObject(obj As %DynamicAbstractObject, rootType As %String, pClass As %String, pIgnoreUnknownProps As %Boolean = 0) As %RegisteredObject [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Given an Abstract Entity Tree of potentially nested %DynamicObject and %DynamicArray nodes, convert this memory structure to one using the the provided COS object class"}),"\n",(0,s.jsx)(t.h3,{id:"parsejson",children:"%ParseJSON"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ParseJSON(pJSON As %String, pClass As %String = "", Output pObject As %RegisteredObject, Output pCharsProcessed As %Integer, pLevel As %Integer = 1, pFirstChar As %String = "", pIgnoreUnknownProps As %Boolean = 0) As %Status [ Internal ]\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Parse the string pJSON containing JSON notation and convert it to an object instance pObject.",(0,s.jsx)(t.br,{}),"\npJSON could also be a character stream.",(0,s.jsx)(t.br,{}),'\npClass is the name of the class to create to hold the instantiated object. This class must match the data within the JSON notation. If pClass is empty (""), then an instance of the generic class %ZEN.proxyObject will be created. pCharsProcessed and pLevel are used internally and do not have to be supplied. pIgnoreUnknownProps controls whether we will ignore errors when we process a property that isn\'t expected. The default behaviour is to treat this as an error.',(0,s.jsx)(t.br,{}),"\nNote that this method assumes well-formed JSON notation: it does not perform complete error checking."]}),"\n",(0,s.jsx)(t.h3,{id:"writejsontofile",children:"%WriteJSONToFile"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %WriteJSONToFile(pJSON As %String, pFileName As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Diagnostic method: write JSON content to the given file."}),"\n",(0,s.jsx)(t.h3,{id:"parsefile",children:"%ParseFile"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ParseFile(pFileName As %String, pClass As %String = "", Output pObject As %RegisteredObject) As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Test method: process JSON content from the given file."}),"\n",(0,s.jsx)(t.h3,{id:"clearcontentmodified",children:"%ClearContentModified"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ClearContentModified() [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Clear the (shadow) modified bit for the content property."}),"\n",(0,s.jsx)(t.h3,{id:"setcontentmodified",children:"%SetContentModified"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetContentModified() [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Set the (shadow) modified bit for the content property."}),"\n",(0,s.jsx)(t.h3,{id:"ondrawobjectproperties",children:"%OnDrawObjectProperties"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnDrawObjectProperties() [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Render the JSON content of the target object along with the other properties of the provider."}),"\n",(0,s.jsx)(t.h3,{id:"onobjectsynch",children:"%OnObjectSynch"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnObjectSynch() As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Render the JSON content of the target object along with the other properties of the provider."}),"\n",(0,s.jsx)(t.h3,{id:"acquiredata",children:"%AcquireData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %AcquireData() As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Acquire data from the associated DataModel object. This is typically called on the server before a page is served in order to get initial values for bound components."}),"\n",(0,s.jsx)(t.h3,{id:"writejsonfromarray",children:"%WriteJSONFromArray"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %WriteJSONFromArray(pVar As %String = "", pClass As %String = "", pArrayMethod As %String = "", ByRef pParms As %String, pReturnStatus As %Boolean = 0, pFormat As %String) As %String\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Utility method to allow direct use of JSON from a non-ZEN context (such as a CSP page).",(0,s.jsx)(t.br,{}),"\nCalls the class method pArrayMethod within the class pClass and converts the resulting array to an array of objects in JSON format using the convention of the OnGetArray callback.",(0,s.jsx)(t.br,{}),"\nThe JSON notation is written out to the current device.",(0,s.jsx)(t.br,{}),"\npVar is the optional name of the client-side Javascript variable that refers to the JSON notation.",(0,s.jsx)(t.br,{}),"\npParms is an optional array of parameter names and values that is passed to the callback method.",(0,s.jsx)(t.br,{}),"\npReturnStatus is a flag to control whether the status code from the method should be returned to the caller. If pReturnStatus is 0, an alert will be raised via Javascript. If pReturnStatus is 1, the status code will be used as the return value from the method and an alert will NOT be raised.",(0,s.jsx)(t.br,{}),"\npFormat is provided for signature compatibility with the legacy jsonProvider class, but using it to pretty-print the output stream is not supported by this class.",(0,s.jsx)(t.br,{}),"\nFrom a CSP page, you could invoke the method as follows:",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.code,{children:'#(##class(%ZEN.Auxiliary.jsonProvider).%WriteJSONFromArray("json",$classname(),"GetArray"))#'})]}),"\n",(0,s.jsx)(t.h3,{id:"writejsonfromobject",children:"%WriteJSONFromObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %WriteJSONFromObject(pVar As %String = "", pClass As %String = "", pMethod As %String = "", ByRef pParms As %String, pReturnStatus As %Boolean = 0, pFormat As %String) As %String\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Utility method to allow direct use of JSON from a non-ZEN context (such as a CSP page).",(0,s.jsx)(t.br,{}),"\nCalls the class method pMethod within the class pClass and converts the resulting object to JSON format using the convention of the OnGetTargetObject callback.",(0,s.jsx)(t.br,{}),"\nThe JSON notation is written out to the current device.",(0,s.jsx)(t.br,{}),"\npVar is the optional name of the client-side Javascript variable that refers to the JSON notation.",(0,s.jsx)(t.br,{}),"\npParms is an optional array of parameter names and values that is passed to the callback method.",(0,s.jsx)(t.br,{}),"\npReturnStatus is a flag to control whether the status code from the method should be returned to the caller. If pReturnStatus is 0, an alert will be raised via Javascript. If pReturnStatus is 1, the status code will be used as the return value from the method and an alert will NOT be raised.",(0,s.jsx)(t.br,{}),"\npFormat is provided for signature compatibility with the legacy jsonProvider class, but using it to pretty-print the output stream is not supported by this class.",(0,s.jsx)(t.br,{}),"\nFrom a CSP page, you could invoke the method as follows:",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.code,{children:'#(##class(%ZEN.Auxiliary.jsonProvider).%WriteJSONFromObject("json",$classname(),"GetObject"))#'})]}),"\n",(0,s.jsx)(t.h3,{id:"convertjsontoobject",children:"%ConvertJSONToObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ConvertJSONToObject(pContent As %String, pTargetClass As %String = "", Output pObject As %RegisteredObject, pIgnoreUnknownProps As %Boolean = 0) As %Status [ CodeMode = expression ]\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Utility method to allow direct use of JSON from a non-ZEN context (such as a CSP page).",(0,s.jsx)(t.br,{}),"\npContent is a string or a stream containing JSON notation.",(0,s.jsx)(t.br,{}),"\npTargetClass is an optional class type for the resulting object; if not provided, %ZEN.proxyObject is used.",(0,s.jsx)(t.br,{}),"\npObject is the object created from the JSON. pIgnoreUnknownProps controls whether properties that are not defined in the object structure will be ignored or treated as an error condition. The default behaviour is to stop processing the incoming JSON."]}),"\n",(0,s.jsx)(t.h3,{id:"writejsonstreamfromarray",children:"%WriteJSONStreamFromArray"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %WriteJSONStreamFromArray(pStream As %Stream.Object, pClass As %String, pArrayMethod As %String, ByRef pParms As %String, pRewindStream As %Boolean = 0, pFormat As %String) As %Status [ ProcedureBlock = 0 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Utility method to allow JSON output to be written to a stream from a general non-ZEN context.",(0,s.jsx)(t.br,{}),"\nCalls the class method pArrayMethod within the class pClass and converts the resulting array to an array of objects in JSON format using the convention of the OnGetArray callback.",(0,s.jsx)(t.br,{}),"\nThe JSON notation is written out to the stream supplied in pStream.",(0,s.jsx)(t.br,{}),"\npParms is an optional array of parameter names and values that is passed to the callback method.",(0,s.jsx)(t.br,{}),"\npRewindStream is a flag to control whether the stream should be rewound after the data is written to it.",(0,s.jsx)(t.br,{}),"\npFormat is provided for signature compatibility with the legacy jsonProvider class, but using it to pretty-print the output stream is not supported by this class."]}),"\n",(0,s.jsx)(t.h3,{id:"writejsonstreamfromobject",children:"%WriteJSONStreamFromObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %WriteJSONStreamFromObject(pStream As %Stream.Object, pObject As %String, pMethod As %String, ByRef pParms As %String, pRewindStream As %Boolean = 0, pFormat As %String) As %Status [ ProcedureBlock = 0 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Utility method to allow JSON output to be written to a stream from a general non-ZEN context.",(0,s.jsx)(t.br,{}),"\nCalls the class method pMethod within the class pClass and converts the resulting object to JSON format using the convention of the OnGetTargetObject callback. However, if an object is supplied in pClass, then the supplied object will be used as the source object.",(0,s.jsx)(t.br,{}),"\nThe JSON notation is written out to the stream supplied in pStream.",(0,s.jsx)(t.br,{}),"\npParms is an optional array of parameter names and values that is passed to the callback method. If pClass is an object, these parameters will be ignored.",(0,s.jsx)(t.br,{}),"\npRewindStream is a flag to control whether the stream should be rewound after the data is written to it.",(0,s.jsx)(t.br,{}),"\npFormat is provided for signature compatibility with the legacy jsonProvider class, but using it to pretty-print the output stream is not supported by this class."]}),"\n",(0,s.jsx)(t.h3,{id:"redirects",children:"redirects"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod redirects() [ Internal, Private, ProcedureBlock = 0 ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getsuperclasslist",children:"getSuperClassList"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod getSuperClassList(pClass As %String, ByRef pList As %String, ByRef pSkip As %String, ByRef pSkipPackage As %String) [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Build a list of super classes (indexed by number) starting from (and including) pClass. Stop when any of the classes in the list pSkip are reached. Skip any classes in any of the packages in the list pSkipPackage are reached."}),"\n",(0,s.jsx)(t.h3,{id:"getorderedprops",children:"getOrderedProps"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod getOrderedProps(pClass As %Dictionary.CompiledClass, ByRef pList) [ Internal ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Build a list of properties in sequence order, including inherited properties.",(0,s.jsx)(t.br,{}),"\nOn return, pList is a list of properties names (subscripted by order number)."]}),"\n",(0,s.jsx)(t.h3,{id:"getcontentobject",children:"getContentObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getContentObject() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return the client-side JSON data as an object or null."}),"\n",(0,s.jsx)(t.h3,{id:"getcontenttype",children:"getContentType"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getContentType() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:'Return the type of the data supplied by this provider: "object" or "array".'}),"\n",(0,s.jsx)(t.h3,{id:"setcontenttype",children:"setContentType"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod setContentType(type) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:'Set the type of the data supplied by this provider: "object" or "array".'}),"\n",(0,s.jsx)(t.h3,{id:"setcontentobject",children:"setContentObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod setContentObject(obj) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Make obj the new target object for this provider."}),"\n",(0,s.jsx)(t.h3,{id:"setcontenttext",children:"setContentText"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod setContentText(json) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Set the content for this provider using the string json. json is expected to contain object data in JSON format."}),"\n",(0,s.jsx)(t.h3,{id:"submitcontent",children:"submitContent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod submitContent(command, targetClass, notify, time) [ Language = javascript ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Send the current target object for this provider to the server for processing. This will recreate the object on the server and invoke the OnSubmitContent callback.",(0,s.jsx)(t.br,{}),"\nThis method will return true if successful and false otherwise. If the method fails, an error string is placed in this object's error property (accessible via the getError() method).",(0,s.jsx)(t.br,{}),"\ncommand is an optional string that is passed on to the server callback method to allow for different behaviors in the server logic.",(0,s.jsx)(t.br,{}),"\ntargetClass is an optional argument that, if specified, should be the name of the server-class that you wish to have instantiated on the server. This has the same effect as setting the targetClass property. This makes it possible to submit content for different object classes. If the server cannot create an instance of the specified class, it will return an error.",(0,s.jsx)(t.br,{}),"\nNormally the submit operation is synchronous. If the optional notify parameter is a function, then the operation will be invoked ",(0,s.jsx)(t.em,{children:"asynchronously"})," and notify will be invoked when the operation is complete. Note that only one asynchronous operation can be handled at a time.",(0,s.jsx)(t.br,{}),"\nIf time is defined, then raise the notify function every time milliseconds until the task is complete."]}),"\n",(0,s.jsx)(t.h3,{id:"reloadcontents",children:"reloadContents"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod reloadContents() [ Language = javascript ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Reload the contents of the provider with data from the server.",(0,s.jsx)(t.br,{}),"\nUnlike the submitContent() method, this does not send data to the server.",(0,s.jsx)(t.br,{}),"\nThis is typically used in conjunction with the OnGetArray callback \u2014 this method will call the server and the server, in turn, will invoke the OnGetArray callback to create new content to ship back to the client."]}),"\n",(0,s.jsx)(t.h3,{id:"reloadcontentsasynch",children:"reloadContentsAsynch"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod reloadContentsAsynch(notify, time) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reload the contents of the json provider asynchronously; invoke the function notify when complete. If time is defined, then raise the notify function every time ms until the task is complete."}),"\n",(0,s.jsx)(t.h3,{id:"refreshhandler",children:"refreshHandler"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod refreshHandler(final, notify) [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Called when async refresh is complete (final is true) or when the notifier timer fires."}),"\n",(0,s.jsx)(t.h3,{id:"submithandler",children:"submitHandler"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod submitHandler(final, notify) [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Called when async submit is complete (final is true) or when the notifier timer fires."}),"\n",(0,s.jsx)(t.h3,{id:"refreshcontent",children:"refreshContent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod refreshContent() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Deprecated: use reloadContents()."}),"\n",(0,s.jsx)(t.h3,{id:"geterror",children:"getError"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getError() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Get the current value of the error property. This is set when a server-side method encounters an error."}),"\n",(0,s.jsx)(t.h3,{id:"tojson",children:"toJSON"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod toJSON(obj, cycle, level) [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Convert object obj to JavaScript object literal syntax (JSON) so that it can be shipped to the server.",(0,s.jsx)(t.br,{}),"\nNote that you cannot convert objects that refer to native types to JSON, this includes any HTML elements or Zen components."]}),"\n",(0,s.jsx)(t.h3,{id:"setproperty",children:"setProperty"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod setProperty(property, value, value2) [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Set the value of a named property.",(0,s.jsx)(t.br,{}),"\nThis is part of the data controller API."]}),"\n",(0,s.jsx)(t.h3,{id:"getdimensions",children:"getDimensions"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getDimensions() [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return number of dimensions in the data. Fixed at 2 for JSON."}),"\n",(0,s.jsx)(t.h3,{id:"resetmetadata",children:"resetMetaData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod resetMetaData() [ Final, Internal, Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reset the metadata for this provider. When used as a data controller this will force recalculation of the meta data (property names) when this data is next used for rendering."}),"\n",(0,s.jsx)(t.h3,{id:"findmetadata",children:"findMetaData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod findMetaData() [ Final, Internal, Language = javascript ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Determine the property names for the current data.",(0,s.jsx)(t.br,{}),'\nIf the content type is "array", then assume that the model is an array of children and all children are the same. If the content type is "object", use the properties of the object.']}),"\n",(0,s.jsx)(t.h3,{id:"getobjectmetadata",children:"getObjectMetaData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getObjectMetaData(data, metaData, props, parent) [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Add the properties in object data to the metaData list. Ignore any properties in props."}),"\n",(0,s.jsx)(t.h3,{id:"getdimsize",children:"getDimSize"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getDimSize(dim) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return the number of items in the specified dimension (dim is 1,2, or 3)."}),"\n",(0,s.jsx)(t.h3,{id:"getdataasarrays",children:"getDataAsArrays"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getDataAsArrays() [ Final, Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This is a specialized variant of getData() that returns the data in this controller as an array of arrays (used by charts)."}),"\n",(0,s.jsx)(t.h3,{id:"getlabel",children:"getLabel"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getLabel(n, dim) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Get the label at position n (0-based) in the given dimension (1,2, or 3)."}),"\n",(0,s.jsx)(t.h3,{id:"getdatasourcecaption",children:"getDataSourceCaption"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getDataSourceCaption(which, text) [ Language = javascript ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Return a title to display for this data source. This provides the title for a chart.",(0,s.jsx)(t.br,{}),'\nwhich indicates which type of caption: "title", "subtitle",etc. text is the original text for the caption.']}),"\n",(0,s.jsx)(t.h3,{id:"getdatabyname",children:"getDataByName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getDataByName(property, series) [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Data API. Lookup a value by its name."}),"\n",(0,s.jsx)(t.h3,{id:"getdata",children:"getData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getData(d1, d2, d3) [ Language = javascript ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["dataSet API",(0,s.jsx)(t.br,{}),"\nReturn the data contained in the specified location. Location is 0-based."]}),"\n",(0,s.jsx)(t.h3,{id:"setdata",children:"setData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod setData(value, d1, d2, d3) [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Set the data contained in the specified location. Location is 0-based.",(0,s.jsx)(t.br,{}),"\nThis is part of the dataController API."]}),"\n",(0,s.jsx)(t.h3,{id:"getpropertyname",children:"getPropertyName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getPropertyName(n) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Given a 0-based index, return the corresponding property name."}),"\n",(0,s.jsx)(t.h3,{id:"setdatabyname",children:"setDataByName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod setDataByName(property, value, series) [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This is part of the data controller API. Set a data value, by property name, into this dataController.",(0,s.jsx)(t.br,{}),'\nIf property is "%id", then change the id of this controller.',(0,s.jsx)(t.br,{}),'\nIf property is "%series", then change the defaultSeries of this controller.']}),"\n",(0,s.jsx)(t.h3,{id:"hasdata",children:"hasData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod hasData() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return true if this controller currently contains data."}),"\n",(0,s.jsx)(t.h3,{id:"onloadhandler",children:"onloadHandler"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod onloadHandler() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This client event, if present, is fired when the page is loaded."}),"\n",(0,s.jsx)(t.h3,{id:"findobjectvalue",children:"findObjectValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod findObjectValue(data, prop) [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Decode a reference to a property within the given data and return its value."}),"\n",(0,s.jsx)(t.h3,{id:"setobjectvalue",children:"setObjectValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod setObjectValue(data, prop, value) [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Decode a reference to a property within the given data and set its value."}),"\n",(0,s.jsx)(t.h3,{id:"isarray",children:"isArray"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod isArray(obj) [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Internal method. Test if an object is an array."}),"\n",(0,s.jsx)(t.h3,{id:"save",children:"save"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod save() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Save data from this dataController back to the DataModel on the server. Return the id with which the model was saved or '' if it was not saved."}),"\n",(0,s.jsx)(t.h3,{id:"getcontentarray",children:"getContentArray"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getContentArray() [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return the array within the content object that supplies the values to a dataView."})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(96540);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);