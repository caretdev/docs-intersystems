"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[9752],{12712:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>a,default:()=>c,frontMatter:()=>r,toc:()=>l});var n=t(74848),i=t(28453);const r={pagination_prev:null,pagination_next:null},a="%MV.SelectList",l=[{value:"Properties",id:"properties",level:2},{value:"%Type",id:"type",level:3},{value:"%LastReturnedId",id:"lastreturnedid",level:3},{value:"%NextOffset",id:"nextoffset",level:3},{value:"%GlobalName",id:"globalname",level:3},{value:"%Namespace",id:"namespace",level:3},{value:"%Values",id:"values",level:3},{value:"%Count",id:"count",level:3},{value:"%IndexName",id:"indexname",level:3},{value:"%IndexFlags",id:"indexflags",level:3},{value:"%IndexColl",id:"indexcoll",level:3},{value:"%InReverse",id:"inreverse",level:3},{value:"%LastReturnedMVPos",id:"lastreturnedmvpos",level:3},{value:"%LastReturnedKey",id:"lastreturnedkey",level:3},{value:"%CurSub",id:"cursub",level:3},{value:"%MaxSub",id:"maxsub",level:3},{value:"%ExplodeFlag",id:"explodeflag",level:3},{value:"Methods",id:"methods",level:2},{value:"Dump",id:"dump",level:3},{value:"%OnClose",id:"onclose",level:3}];function o(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"mvselectlist",children:"%MV.SelectList"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class %MV.SelectList Extends %RegisteredObject [ LegacyInstanceContext, OdbcType = LONGVARCHAR, ServerOnly = 1, System = 4 ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"The SelectList class is for internal use in the InterSystems MultiValue product. The internals of this class can be changed by InterSystems without prior notice. Application code should not inherit this class nor should application code manipulate the properties and methods in this class. The class may be examined for the purpose of debugging MultiValue applications."}),"\n",(0,n.jsx)(s.p,{children:"The SelectList class represents an MVBASIC Select variable in various states such as:"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"Traversing through values supplied via a dynamic array SELECT var TO list"}),"\n",(0,n.jsx)(s.li,{children:"Traversing through the item IDs represented in a Global or a directory"}),"\n",(0,n.jsx)(s.li,{children:"Traversing through values taken from a different list SELECT list TO list"}),"\n",(0,n.jsx)(s.li,{children:"Traversing through values in an index"}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"Because there are various states associated with each type of list, a class with appropriate properties to track these states is required."}),"\n",(0,n.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(s.h3,{id:"type",children:"%Type"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %Type As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"Indicates what type of select list the object instance is representing:"}),"\n",(0,n.jsxs)(s.p,{children:["0 - Simple dynamic array of attributes, stored herein",(0,n.jsx)(s.br,{}),"\n1 - Item IDs returned from a global",(0,n.jsx)(s.br,{}),"\n2 - Elements, (keys, IDs and MV positions), returned from an index"]}),"\n",(0,n.jsx)(s.h3,{id:"lastreturnedid",children:"%LastReturnedId"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %LastReturnedId As %String;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Holds the value of the last element read from the list. This is used only by those types of lists that are traversing indexes or files, where the last key used allows us to pick up the next key efficiently"}),"\n",(0,n.jsx)(s.h3,{id:"nextoffset",children:"%NextOffset"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %NextOffset As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"The last offset is the offset within the Values property that should be used to pick up the next ID. This allows us to optimize the list traversal so that we do not scan from the start of the value list each time we need the next element within it. In order to avoid copying the values in the Values property, we store the values in an mvv variable when first accessed or when another list reference knocks it out of the Last Used SelectList positions."}),"\n",(0,n.jsx)(s.h3,{id:"globalname",children:"%GlobalName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %GlobalName As %String;\n"})}),"\n",(0,n.jsx)(s.p,{children:"When the SelectList is traversing keys in a Global, we need to know the name of the global we are traversing, and so we store it here."}),"\n",(0,n.jsx)(s.h3,{id:"namespace",children:"%Namespace"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %Namespace As %String;\n"})}),"\n",(0,n.jsx)(s.p,{children:"When the selectlist is being used to traverse a global, we need to know the name space that the global lives in. This property serves that function."}),"\n",(0,n.jsx)(s.h3,{id:"values",children:"%Values"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %Values As %String [ MultiDimensional ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"This value is a string containing all the values contained in a list that was initialized from an expression or other dynamic array. It is not normally traversed directly from the object as we would have to keep copying the value onto the stack before looking to the next element in the list. We do not use a ObjectScript $list for this property as it offers little advantage in terms of traversing large lists in sequence."}),"\n",(0,n.jsx)(s.h3,{id:"count",children:"%Count"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %Count As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"This value is an integer count of the number of elements that the list contains. We don't always know this value (for instance if this is traversing the items in Global representing an MV file we don't want to $order() the lot just to find out we have 6,000,000 elements we can read. However after CMQL statements or if we have done a writelist or readlist or something similar we can count the elements as we go without much of a penalty and can store the value here. If we know we have elements in the list but not how many then we store -1 in this value, otherwise it is 0 when we create an object."}),"\n",(0,n.jsx)(s.h3,{id:"indexname",children:"%IndexName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %IndexName As %String;\n"})}),"\n",(0,n.jsx)(s.p,{children:"When the select list is of Type = 2, then we need to know which index we are traversing so we can construct the global reference. The name of the index that is being traversed is stored here."}),"\n",(0,n.jsx)(s.h3,{id:"indexflags",children:"%IndexFlags"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %IndexFlags As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"When the select list is of Type = 2, then we need to know the type of the index that is being traversed. At the moment, we only allow standard indexes to be traversed (not bitmap and bitslice), but I have specified these types here for future examination. If it were not for the fact that we must be able to traverse the index backwards, we would use SQL cursors to traverse indexes, however, MVBASIC expects to be efficient and so we traverse the structure directly in the associated globals as this is readonly access. Future enhancements should include returning the associated data stored with the index - IE the data that is stored with the index key that does not form the actual key."}),"\n",(0,n.jsx)(s.p,{children:"Types are:"}),"\n",(0,n.jsxs)(s.p,{children:["1 - Single valued index, no multivalues",(0,n.jsx)(s.br,{}),"\n2 - Multivalued index, no key (MV position stored)",(0,n.jsx)(s.br,{}),"\n4 - Multivalued index, includes key (MV position)",(0,n.jsx)(s.br,{}),"\n8 - This is an index variable generated by SELECTINDEX"]}),"\n",(0,n.jsx)(s.h3,{id:"indexcoll",children:"%IndexColl"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %IndexColl As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"A select list can represent an index. An index stores the actual keys as oppposed to the key values returned by READNEXT in collated encoding sequence such as MV R or SPACE (equivalant to MV L) etc. This property defines the collation in use for the index."}),"\n",(0,n.jsx)(s.h3,{id:"inreverse",children:"%InReverse"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %InReverse As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"A select list can be read forwards or backwards and my change direction at any time. In this case, we have a boundary condition when the first READPREV or READFORWARD is called and when we change direction on some types of selectlist. To cater for this we always return the key that is currently being flagged as the LASTID, if this flag is set to 1 and the operation is a READPREV. The list is so arranged that READNEXT does not need to worry about this as the last ID will always be the one that WAS last returned to a READNEXT."}),"\n",(0,n.jsx)(s.h3,{id:"lastreturnedmvpos",children:"%LastReturnedMVPos"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %LastReturnedMVPos As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"Multivalue indices must track the last Key, ItemID and MVPOS while traversing the index. Hence we need a property to hold the last MVPos that we returned"}),"\n",(0,n.jsx)(s.h3,{id:"lastreturnedkey",children:"%LastReturnedKey"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %LastReturnedKey As %String;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Tracks the last index key that was returned when traversing an index"}),"\n",(0,n.jsx)(s.h3,{id:"cursub",children:"%CurSub"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %CurSub As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"For dynamic array type select lists, this is the current subscript under Values"}),"\n",(0,n.jsx)(s.h3,{id:"maxsub",children:"%MaxSub"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %MaxSub As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"For dynamic array type select lists, this is the maximum subscript under Values"}),"\n",(0,n.jsx)(s.h3,{id:"explodeflag",children:"%ExplodeFlag"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property %ExplodeFlag As %Integer [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"This is 0 for normal select lists, 1 for exploded select lists, and 2 for subvalue exploded select lists"}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"dump",children:"Dump"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Dump() As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status [ Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"If process private global %MV.SelectTempnnn in use then decrement the use count in %MV.SelectTempnnn and Kill global if the use count goes to 0"})]})}function c(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>l});var n=t(96540);const i={},r=n.createContext(i);function a(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);