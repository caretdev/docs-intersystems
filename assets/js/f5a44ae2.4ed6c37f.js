"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[78407],{68442:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>o,frontMatter:()=>i,toc:()=>c});var s=n(74848),a=n(28453);const i={pagination_prev:null,pagination_next:null},r="%Stream.Object",c=[{value:"Parameters",id:"parameters",level:2},{value:"DEFAULTCONCURRENCY",id:"defaultconcurrency",level:3},{value:"Properties",id:"properties",level:2},{value:"%Concurrency",id:"concurrency",level:3},{value:"AtEnd",id:"atend",level:3},{value:"Id",id:"id",level:3},{value:"LastModified",id:"lastmodified",level:3},{value:"%Location",id:"location",level:3},{value:"%Locked",id:"locked",level:3},{value:"%LockRef",id:"lockref",level:3},{value:"Size",id:"size",level:3},{value:"Methods",id:"methods",level:2},{value:"%LocationSet",id:"locationset",level:3},{value:"IsCharacter",id:"ischaracter",level:3},{value:"%Id",id:"id-1",level:3},{value:"%Delete",id:"delete",level:3},{value:"%DeleteId",id:"deleteid",level:3},{value:"%Open",id:"open",level:3},{value:"%LoadInit",id:"loadinit",level:3},{value:"%OpenId",id:"openid",level:3},{value:"%DeleteExtent",id:"deleteextent",level:3},{value:"%DowngradeConcurrency",id:"downgradeconcurrency",level:3},{value:"%GetSwizzleObject",id:"getswizzleobject",level:3},{value:"%LockStream",id:"lockstream",level:3},{value:"%UnlockStream",id:"unlockstream",level:3},{value:"%GetLockReference",id:"getlockreference",level:3},{value:"%Oid",id:"oid",level:3},{value:"GetStreamId",id:"getstreamid",level:3},{value:"%Reload",id:"reload",level:3},{value:"%RollBack",id:"rollback",level:3},{value:"%Save",id:"save",level:3},{value:"%UpgradeConcurrency",id:"upgradeconcurrency",level:3},{value:"%AcquireLock",id:"acquirelock",level:3},{value:"%CheckUnique",id:"checkunique",level:3},{value:"%LoadData",id:"loaddata",level:3},{value:"%SaveData",id:"savedata",level:3},{value:"%DeleteData",id:"deletedata",level:3},{value:"%OnConstructClone",id:"onconstructclone",level:3},{value:"%Exists",id:"exists",level:3},{value:"%ExistsId",id:"existsid",level:3},{value:"%KillExtent",id:"killextent",level:3},{value:"%ReleaseLock",id:"releaselock",level:3},{value:"%OnDelete",id:"ondelete",level:3},{value:"%OnBeforeSave",id:"onbeforesave",level:3},{value:"%OnAfterSave",id:"onaftersave",level:3},{value:"%OnOpen",id:"onopen",level:3},{value:"%OnReload",id:"onreload",level:3},{value:"%OnClose",id:"onclose",level:3},{value:"%OnRollBack",id:"onrollback",level:3},{value:"Read",id:"read",level:3},{value:"ReadLine",id:"readline",level:3},{value:"ReadLineIntoStream",id:"readlineintostream",level:3},{value:"Write",id:"write",level:3},{value:"WriteLine",id:"writeline",level:3},{value:"CopyFrom",id:"copyfrom",level:3},{value:"Clear",id:"clear",level:3},{value:"MoveToEnd",id:"movetoend",level:3},{value:"OutputToDevice",id:"outputtodevice",level:3},{value:"InputFromDevice",id:"inputfromdevice",level:3},{value:"LastModifiedGet",id:"lastmodifiedget",level:3},{value:"OutputToDeviceAt",id:"outputtodeviceat",level:3},{value:"FindAt",id:"findat",level:3},{value:"MoveTo",id:"moveto",level:3},{value:"Rewind",id:"rewind",level:3},{value:"Flush",id:"flush",level:3},{value:"IsNull",id:"isnull",level:3},{value:"%IsNull",id:"isnull-1",level:3},{value:"%ObjectIsNull",id:"objectisnull",level:3},{value:"CopyFromAndSave",id:"copyfromandsave",level:3},{value:"SerializeToSyncSet",id:"serializetosyncset",level:3},{value:"SyncStreamIn",id:"syncstreamin",level:3},{value:"SizeGet",id:"sizeget",level:3},{value:"ReadSQL",id:"readsql",level:3},{value:"StreamOIDIsNull",id:"streamoidisnull",level:3},{value:"%ObjectSize",id:"objectsize",level:3},{value:"%ObjectSizeInternal",id:"objectsizeinternal",level:3},{value:"%LOBPrefetch",id:"lobprefetch",level:3},{value:"%LOBPrefetchInternal",id:"lobprefetchinternal",level:3}];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"streamobject",children:"%Stream.Object"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Stream.Object Extends %Library.RegisteredObject [ Abstract, ClassType = stream, MemberSuper = %Compiler.Type.Stream, System = 2 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"For information on this class"}),", see ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+%25Stream.Object",children:"Working with Streams"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"The %Stream.Object class provides the basic mechanism by which stream objects are stored to and retrieved from a database."}),"\n",(0,s.jsx)(t.p,{children:"A stream represents an arbitrary array of characters (or bytes) and a current position. The basic stream interface provides the ability to read data from a stream, write data to the stream, and rewind the current position to the beginning of the stream."}),"\n",(0,s.jsx)(t.p,{children:"Within InterSystems IRIS, streams are used to create large (greater than 32K) object attributes."}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(t.h3,{id:"defaultconcurrency",children:"DEFAULTCONCURRENCY"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter DEFAULTCONCURRENCY = "$zu(115,10)";\n'})}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"concurrency",children:"%Concurrency"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %Concurrency As %RawString [ InitialExpression = {$zu(115,10)}, Private, Transient ];\n"})}),"\n",(0,s.jsx)(t.h3,{id:"atend",children:"AtEnd"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property AtEnd As %Boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"The AtEnd property is set to true (1) when, during a read, a stream has reached the end of its data source."}),"\n",(0,s.jsx)(t.h3,{id:"id",children:"Id"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Id As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Id is the unique identifier for a stream within the %Location."}),"\n",(0,s.jsx)(t.h3,{id:"lastmodified",children:"LastModified"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property LastModified As %TimeStamp [ Calculated ];\n"})}),"\n",(0,s.jsx)(t.p,{children:'LastModified is a read-only property containing the %TimeStamp of the last modification to this stream. If the stream is null then it will report "".'}),"\n",(0,s.jsx)(t.h3,{id:"location",children:"%Location"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %Location As %String(MAXLEN = 1024);\n"})}),"\n",(0,s.jsx)(t.p,{children:"%Location is place where stream data is stored. For global streams this will be a global reference. For file streams it may be a directory. This is not the location of this specific stream, but the root location of what may be multiple streams."}),"\n",(0,s.jsx)(t.h3,{id:"locked",children:"%Locked"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %Locked As %Integer [ InitialExpression = 0, Internal, Private, Transient ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"%Locked is an integer that indicates whether or not the object is currently locked."}),"\n",(0,s.jsx)(t.h3,{id:"lockref",children:"%LockRef"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %LockRef As %RawString [ Internal, Private, Transient ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"%LockRef is the global reference used for locking this stream object. This value is generated by calling %GetLockRef(Location,Id) where Location is the value of the %Location property and Id is the value of the Id property. If this value is null then no locks are taken out. All retained locks are shared locks. Exclusive locks are acquired and released in %Save and in %Delete. %LockRef must be set in order for any locking to occur. This property is not set typically until the stream is locked."}),"\n",(0,s.jsx)(t.h3,{id:"size",children:"Size"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property Size As %Integer [ Calculated ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Size is a read-only property containing the current size of the stream (in bytes for a binary stream and characters for a character stream)."}),"\n",(0,s.jsx)(t.p,{children:"If a specific stream implementation cannot determine the size of the stream then Size will be equal to -1."}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"locationset",children:"%LocationSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %LocationSet(val As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.h3,{id:"ischaracter",children:"IsCharacter"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod IsCharacter() As %String [ CodeMode = generator ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return true if this is a character stream and false if it is a binary stream."}),"\n",(0,s.jsx)(t.h3,{id:"id-1",children:"%Id"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Id() As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the persistent object Id, if there is one, of this object."}),"\n",(0,s.jsx)(t.p,{children:"Returns a null string if there is no object Id."}),"\n",(0,s.jsx)(t.h3,{id:"delete",children:"%Delete"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %Delete(oid As %ObjectIdentity = "", concurrency As %Integer) As %Status [ Final ]\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Deletes the stored version of the object with OID oid from the database. It does not remove any in-memory versions of the object that may be present. Refer to ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ%5Fconcurrency",children:"Object Concurrency Options"})," for more details on the optional concurrency argument."]}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.p,{children:"Internally, %Delete initiates a transaction and then invokes the storage interface method %DeleteData. If %DeleteData succeeds, the transaction is committed, otherwise it is rolled back."}),"\n",(0,s.jsx)(t.h3,{id:"deleteid",children:"%DeleteId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %DeleteId(id As %String, concurrency As %Integer) As %Status [ CodeMode = expression, Final ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Deletes the stored version of the object with ID id from the database."}),"\n",(0,s.jsxs)(t.p,{children:["%DeleteId is identical in operation to the %Delete method except that it uses and Id value instead of an OID value to find an object. Refer to ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ%5Fconcurrency",children:"Object Concurrency Options"})," for more details on the optional concurrency argument."]}),"\n",(0,s.jsx)(t.h3,{id:"open",children:"%Open"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %Open(soid As %ObjectIdentity, concurrency As %Integer, ByRef sc As %Status = {$$$OK}) As %ObjectHandle [ Final ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Loads an object from the database into memory and returns an OREF referring to the object. oid is the OID value of the object to load. If oid is a partially-formed OID, that is it does not include a class name, then %Open does the following: it assumes the class name is the same as the object class on which %Open was called."}),"\n",(0,s.jsxs)(t.p,{children:["If a version of the specified object is already in memory, then %Open increments the object's reference count and returns the OREF value referring to this version. %Open also an optional concurrency argument which specifies the concurrency setting for this object (and sets the value of the %Concurrency attribute). If the concurrency argument is omitted then the system default value (1: ",(0,s.jsx)(t.em,{children:"Atomic"}),") is used. Refer to ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ%5Fconcurrency",children:"Object Concurrency Options"})," for more details on the optional concurrency argument."]}),"\n",(0,s.jsx)(t.p,{children:"%Open returns an OREF value that refers to the in-memory object instance or a null reference ($$$NULLOREF) if it cannot find or otherwise load the object."}),"\n",(0,s.jsx)(t.h3,{id:"loadinit",children:"%LoadInit"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %LoadInit(concurrency As %Integer, soid As %ObjectIdentity) As %Status [ CodeMode = generator, Final, Internal, Private ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"openid",children:"%OpenId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OpenId(id As %String, concurrency As %Integer, ByRef sc As %Status = {$$$OK}) As %ObjectHandle [ CodeMode = expression, Final ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Loads an object from the database into memory and returns an OREF referring to the object. id is the Id (not a full OID) value of the object to load."}),"\n",(0,s.jsxs)(t.p,{children:["%OpenId is identical in operation to the %Open method except that it uses and Id value instead of an OID value to find an object instance. Refer to ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ%5Fconcurrency",children:"Object Concurrency Options"})," for more details on the optional concurrency argument."]}),"\n",(0,s.jsx)(t.p,{children:"%OpenId returns an OREF value that refers to the in-memory object instance or a null reference ($$$NULLOREF) if it cannot find or otherwise load the object."}),"\n",(0,s.jsx)(t.h3,{id:"deleteextent",children:"%DeleteExtent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %DeleteExtent(concurrency As %Integer, ByRef deletecount, ByRef instancecount) As %Status [ CodeMode = generator ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Delete all instances of this class from its extent. On exit instancecount contains the original number of instances while deletecount contains the number of instances actually deleted."}),"\n",(0,s.jsxs)(t.p,{children:["Internally, %DeleteExtent iterates over the set of instances in the collection and invokes the %Delete method. Refer to ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ%5Fconcurrency",children:"Object Concurrency Options"})," for more details on the optional concurrency argument."]}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"downgradeconcurrency",children:"%DowngradeConcurrency"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %DowngradeConcurrency(concurrency) As %Status [ Final, Internal ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Changes the concurrency level of an instance in memory to a lower level by changing the lock type specified in the %Open method for the object's instance. Fails if it cannot lower the concurrency level. Refer to ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ%5Fconcurrency",children:"Object Concurrency Options"})," for more details on the concurrency argument."]}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"getswizzleobject",children:"%GetSwizzleObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetSwizzleObject(force As %Integer = 0, ByRef oid As %ObjectIdentity) As %Status [ Final ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%GetSwizzleObject is used to obtain a state of the object that can later be used to restore the object. In the case of a persistent object, it returns the OID."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"lockstream",children:"%LockStream"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %LockStream() [ ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%LockStream() Obtain a shared lock on the current stream object. %Locked is set to 1 if the stream was successfully locked. If the stream cannot be locked then %Locked is set to 0. No lock is attempted unless %GetLockReference returns a non-null value. If a lock is attempted but cannot be acquired (lock timeout expires) then this method will throw an exception. The caller is expected to catch the exception and process it appropriately. Throws %Exception.AbstractException, most often a StatusException."}),"\n",(0,s.jsx)(t.h3,{id:"unlockstream",children:"%UnlockStream"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %UnlockStream(immediate As %Boolean = 0) [ ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:'%UnlockStream() Release the shared lock on the current stream object. If the immediate argument is 1 then the lock is released using the "I" flag.'}),"\n",(0,s.jsx)(t.h3,{id:"getlockreference",children:"%GetLockReference"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %GetLockReference(pLocation As %String(MAXLEN="") = "", pId As %String(MAXLEN="") = "") As %String(MAXLEN="") [ Private ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Returns the global reference used to lock the current stream object Throws %Exception.AbstractException"}),"\n",(0,s.jsx)(t.h3,{id:"oid",children:"%Oid"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Oid() As %ObjectIdentity\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the OID of this object."}),"\n",(0,s.jsx)(t.h3,{id:"getstreamid",children:"GetStreamId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetStreamId() As %String [ CodeMode = call ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns an full id value (including class name) with which the Stream implementation has stored the stream."}),"\n",(0,s.jsx)(t.h3,{id:"reload",children:"%Reload"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Reload() As %Status [ CodeMode = generator ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%Reload is an instance method that re-reads an object from disk into the current instance. Calling %Reload is similar to calling %Close and then %Open, but it uses the same OREF."}),"\n",(0,s.jsx)(t.p,{children:"After %Reload is called, there are no swizzled references for the object, and %IsModified returns 0."}),"\n",(0,s.jsx)(t.p,{children:"%Reload performs the following steps. First, all swizzled objects for the instance are unswizzled. Then the object is reloaded from disk, using the %Id of the current object. Finally, the modified bit for each property is cleared."}),"\n",(0,s.jsx)(t.h3,{id:"rollback",children:"%RollBack"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %RollBack() As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"This method is called by %Save when a transaction is rolled back. It will invoke a user-supplied %OnRollBack method if it exists."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"save",children:"%Save"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Save(related As %Integer = 1) As %Status [ Final, GenerateAfter = (%OnBeforeSave, %OnAfterSave) ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Stores an in-memory version of an object to disk. If the object was stored previously (and thus, already has an OID), %Save updates the on-disk version. Otherwise, %Save saves the object and generates a new OID for it."}),"\n",(0,s.jsx)(t.p,{children:"The related argument specifies how %Save handles references to other objects. It can take the following values:"}),"\n",(0,s.jsxs)(t.p,{children:["0: ",(0,s.jsx)(t.em,{children:"Shallow Save"})]}),"\n",(0,s.jsx)(t.p,{children:"If this object has been modified then save it. Only save related objects if they have never been saved (do not have an OID value) and must be saved in order to allocate the OID needed by this object."}),"\n",(0,s.jsxs)(t.p,{children:["1: ",(0,s.jsx)(t.em,{children:"Deep Save"})]}),"\n",(0,s.jsx)(t.p,{children:'Save this object and all "related" objects that have been edited. In this case, "related" means any in-memory objects it refers to, and any in-memory objects they in turn refer to, and so on. However, only objects that have been changed (%IsModified returns true) will actually be saved to the database, including the object upon which %Save was initially called.'}),"\n",(0,s.jsx)(t.p,{children:"%Save automatically detects and handles circular references between objects. For example, %Save will detect if object A refers to object B and object B likewise refers to object A. In this case it will avoid falling into an infinite, recursive loop."}),"\n",(0,s.jsx)(t.p,{children:"Note that either reference attribute, A to B or B to A, can be specified as being a required attribute but not both of them. If both reference attributes are required then %Save will fail."}),"\n",(0,s.jsxs)(t.p,{children:["By default %Save automatically manages transactions. You can enable and disable automatic transaction support using the ",(0,s.jsx)(t.code,{children:"$$SetTransactionMode^%apiOBJ()"})," routine."]}),"\n",(0,s.jsx)(t.p,{children:"When %Save saves an object to the database, it initiates one transaction (by calling TSTART) for the entire set of saves, including the original object and any related objects. If the save operation is successful, %Save will issue a TCOMMIT command to commit the transaction and write the data to the database. If %Save encounters a problem when saving the original object or any of its related objects, it rolls back the entire transaction and performs the following actions:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"It issues a TROLLBACK command to rollback any changes to the database that may have occurred. (In the case of the %Storage.Persistent class, changes to the on-disk counter value, used to determine the next available object id number, are not rolled back.)"}),"\n",(0,s.jsx)(t.li,{children:'It restores the in-memory state of all the objects involved in the transaction to their pre-transaction state. This includes restoring any modified flags, and restoring to null ("") any OID values that have been assigned during the course of the transaction. Additional property values changed during the course of the transaction are not restored, however.'}),"\n",(0,s.jsx)(t.li,{children:"It calls the %RollBack method on each object involved with the transaction. The order in which the %RollBack methods are called is undefined. %RollBack will call a user-written %OnRollback method if it is present."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"upgradeconcurrency",children:"%UpgradeConcurrency"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %UpgradeConcurrency(concurrency) As %Status [ Final, Internal ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Elevates the concurrency level of an instance in memory to a higher level by changing the lock type specified in the %Open method for the object's instance. Fails if it cannot elevate the concurrency level. Refer to ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ%5Fconcurrency",children:"Object Concurrency Options"})," for more details on the concurrency argument."]}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"acquirelock",children:"%AcquireLock"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %AcquireLock(locktype) As %Status [ Private ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Acquires a lock for the current instance."}),"\n",(0,s.jsx)(t.p,{children:"The locktype argument specifies the type of lock to acquire. It can take the following values:"}),"\n",(0,s.jsxs)(t.p,{children:['"e": ',(0,s.jsx)(t.em,{children:"Exclusive"})]}),"\n",(0,s.jsx)(t.p,{children:"An exclusive lock will prevent any other process from acquiring any type of lock on this object."}),"\n",(0,s.jsxs)(t.p,{children:['"s": ',(0,s.jsx)(t.em,{children:"Shared"})]}),"\n",(0,s.jsx)(t.p,{children:"A shared lock will allow other processes to acquire shared locks but will prevent other processes from acquiring an exclusive lock."}),"\n",(0,s.jsx)(t.p,{children:"Fails if the locktype parameter is not one of the values described above. Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"checkunique",children:"%CheckUnique"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %CheckUnique(idxlist As %List = "") As %Status\n'})}),"\n",(0,s.jsx)(t.h3,{id:"loaddata",children:"%LoadData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %LoadData(soid As %String) As %Status [ Private ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"savedata",children:"%SaveData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SaveData(ByRef id As %String) As %Status [ Private ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"deletedata",children:"%DeleteData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %DeleteData(soid As %String, concurrency As %Integer) As %Status [ Private ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"onconstructclone",children:"%OnConstructClone"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnConstructClone(object As %RegisteredObject, deep As %Boolean = 0, ByRef cloned As %String) As %Status [ CodeMode = expression, Private ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"exists",children:"%Exists"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %Exists(soid As %ObjectIdentity) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Checks to see if the object identified by the OID oid exists in the extent."}),"\n",(0,s.jsx)(t.p,{children:"Returns %Boolean TRUE is it exists, FALSE if it does not."}),"\n",(0,s.jsx)(t.h3,{id:"existsid",children:"%ExistsId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %ExistsId(id As %String) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Checks to see if the object identified by the ID id exists in the extent."}),"\n",(0,s.jsx)(t.p,{children:"Returns %Boolean TRUE is it exists, FALSE if it does not."}),"\n",(0,s.jsx)(t.h3,{id:"killextent",children:"%KillExtent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %KillExtent() As %Status\n"})}),"\n",(0,s.jsx)(t.h3,{id:"releaselock",children:"%ReleaseLock"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ReleaseLock(locktype) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Releases a lock for the current instance."}),"\n",(0,s.jsx)(t.p,{children:"The locktype argument specifies the type of lock to release. It can take the following values:"}),"\n",(0,s.jsxs)(t.p,{children:['"e": ',(0,s.jsx)(t.em,{children:"Exclusive"})]}),"\n",(0,s.jsx)(t.p,{children:"An exclusive lock will prevent any other process from acquiring any type of lock on this object."}),"\n",(0,s.jsxs)(t.p,{children:['"s": ',(0,s.jsx)(t.em,{children:"Shared"})]}),"\n",(0,s.jsx)(t.p,{children:"A shared lock will allow other processes to acquire shared locks but will prevent other processes from acquiring an exclusive lock."}),"\n",(0,s.jsx)(t.p,{children:"Fails if the locktype parameter is not one of the values described above. Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"ondelete",children:"%OnDelete"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %OnDelete(oid As %ObjectIdentity) As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %Delete method to provide notification that the object specified by oid is being deleted."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then the object will not be deleted."}),"\n",(0,s.jsx)(t.h3,{id:"onbeforesave",children:"%OnBeforeSave"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnBeforeSave(insert As %Boolean) As %Status [ Abstract, Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %Save method to provide notification that the object is being saved. It is called before any data is written to disk."}),"\n",(0,s.jsx)(t.p,{children:"insert will be set to 1 if this object is being saved for the first time."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then the call to %Save will fail."}),"\n",(0,s.jsx)(t.h3,{id:"onaftersave",children:"%OnAfterSave"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnAfterSave(insert As %Boolean) As %Status [ Abstract, Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %Save method to provide notification that the object is being saved. It is called after the object's data has been successfully written to disk."}),"\n",(0,s.jsx)(t.p,{children:"insert will be set to 1 if this object is being saved for the first time."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then the call to %Save will fail."}),"\n",(0,s.jsx)(t.h3,{id:"onopen",children:"%OnOpen"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnOpen() As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %Open method to provide notification that the object specified by oid is being opened."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then the object will not be opened."}),"\n",(0,s.jsx)(t.h3,{id:"onreload",children:"%OnReload"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnReload() As %Status [ Abstract, Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %Reload method to provide notification that the object specified by oid was reloaded. %Reload is invoked by %Open when the object identified by the OID is already in memory."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then the object will not be opened."}),"\n",(0,s.jsx)(t.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status [ Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %Close method to provide notification that the current object is being closed."}),"\n",(0,s.jsx)(t.p,{children:"The return value of this method is ignored."}),"\n",(0,s.jsx)(t.h3,{id:"onrollback",children:"%OnRollBack"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnRollBack() As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This callback method is invoked by the %Save method to provide notification that a save transaction is being rolled back."}),"\n",(0,s.jsx)(t.p,{children:"If this method returns an error then the rollback operation will be aborted."}),"\n",(0,s.jsx)(t.h3,{id:"read",children:"Read"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Read(ByRef len As %Integer = 32656, ByRef sc As %Status) As %RawString\n"})}),"\n",(0,s.jsx)(t.p,{children:"Reads up to len characters from the current position in the stream. The current position is advanced by the number of characters read. Upon exit, len is set to the actual number of characters read. If a read occurs when the stream position is at the end of the stream, len will be set to -1 and Read will return a null string (\"\"). If no len is passed in, ie. 'Read()' then it is up to the Read implementation as to how much data to return. Some stream classes use this to optimize the amount of data returned to align this with the underlying storage of the stream."}),"\n",(0,s.jsx)(t.p,{children:"You must call Rewind if you want to read a stream from the beginning again. Calling Read after Write implicitly ends the Write operation and rewinds to the start of the stream."}),"\n",(0,s.jsx)(t.p,{children:"Returns a string up to len characters long. The byref argument sc will return a %Status if any error occurred during the read."}),"\n",(0,s.jsx)(t.h3,{id:"readline",children:"ReadLine"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method ReadLine(ByRef len As %Integer = 32000, ByRef sc As %Status, ByRef eol As %Boolean) As %RawString\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Read a line from the stream. This will look for the line terminator in the stream and once it finds the terminator it will return the string minus the terminator character/s. If it reaches the end of the stream before it finds a terminator it will return the data it has so far, and if you specify a maximum size in len it will only read up to this number of characters. On exit len will contain the actual number of characters read. The byref argument sc will return a %Status if any error occured during the read and the byref argument eol is true if it found the line terminator and false otherwise. So for example you can read in a stream a line at a time and output the results to the current device with: ",(0,s.jsx)(t.code,{children:'While \'stream.AtEnd { Write stream.ReadLine(,.sc,.eol) If $$$ISERR(sc) { Write "ERROR" Quit } If eol { Write ! } }'})]}),"\n",(0,s.jsx)(t.h3,{id:"readlineintostream",children:"ReadLineIntoStream"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method ReadLineIntoStream(ByRef sc As %Status) As %Stream.Object\n"})}),"\n",(0,s.jsx)(t.h3,{id:"write",children:"Write"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Write(data As %RawString) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Appends the string data to the stream and advances the current stream position by the number of characters in data."}),"\n",(0,s.jsx)(t.p,{children:"Note that a write operation immediately following a read or rewind will clear out the existing data in the stream."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"writeline",children:"WriteLine"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method WriteLine(data As %RawString = "") As %Status [ CodeMode = expression ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Appends the string data along with a line terminator to the stream and advances the current stream position by the number of characters in data plus the line terminator."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"copyfrom",children:"CopyFrom"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method CopyFrom(source As %Stream.Object) As %Status\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Copies the contents of ",(0,s.jsx)(t.em,{children:"source"})," into this Stream. Does not call Rewind on this Stream before copying."]}),"\n",(0,s.jsxs)(t.p,{children:["For example, you can copy oldstream into a new stream: ",(0,s.jsx)(t.code,{children:"Set newstream=##class(%GlobalCharacterStream).%New() Do newstream.CopyFrom(oldstream)"})]}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"clear",children:"Clear"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Clear() As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Clear the contents of this Stream from permanent storage. This will remove the permanent stream storage and any temporary stream and initialise the stream to its initial state that it starts in, including removing all the stream attributes."}),"\n",(0,s.jsx)(t.p,{children:"Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"movetoend",children:"MoveToEnd"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method MoveToEnd() As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Move to the end of the stream so the next Write will be appended to the end. This allows you to read from a stream, then MoveToEnd() and append new data, where just calling Write after a read will clear the stream before writing new data. Returns a %Status value indicating success or failure."}),"\n",(0,s.jsx)(t.h3,{id:"outputtodevice",children:"OutputToDevice"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OutputToDevice(ByRef len As %Integer = -1) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Write out len characters of the stream to the current device starting from the current position. This method is optimised for performance by the various sub classes. If len is omitted or set to -1 then it will write out the entire stream starting at the beginning."}),"\n",(0,s.jsx)(t.h3,{id:"inputfromdevice",children:"InputFromDevice"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method InputFromDevice(ByRef len As %Integer = 0, timeout As %Integer = 20) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Input len characters from the current device into the stream. This is equivalent to doing a series of reads and calling Write for each of them but it may be optimised by the subclasses. On return len will be the number of characters still to read in (if no timeout has occured this should be 0)."}),"\n",(0,s.jsx)(t.h3,{id:"lastmodifiedget",children:"LastModifiedGet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method LastModifiedGet() As %TimeStamp [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"outputtodeviceat",children:"OutputToDeviceAt"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method OutputToDeviceAt(position As %Integer, ByRef length As %Integer) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Output the stream to the current device starting at position of length length. The length if passed is the number of characters to output, if not passed it will output from position to the end of the stream."}),"\n",(0,s.jsx)(t.h3,{id:"findat",children:"FindAt"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method FindAt(position As %Integer, target As %RawString, ByRef tmpstr As %RawString = "", caseinsensitive As %Boolean = 0) As %Integer\n'})}),"\n",(0,s.jsx)(t.p,{children:"Find the first occurrence of target in the stream, starting the search at position. The method returns the position of this match, counting from the beginning of the stream, and leaves the stream positioned at an indeterminate location. If it does not find the target string, it returns -1."}),"\n",(0,s.jsx)(t.p,{children:"If position=-1 then it starts searching from the location found in the previous search and returns the offset from the last search. This is useful for searching through the entire file. If you are doing this, you should pass in tmpstr by reference in every call. This is used to store the last buffer read, so the next call will start where the last one left off. If caseinsensitive=1 then the search will be case insensitive, rather than the default case-sensitive search."}),"\n",(0,s.jsx)(t.h3,{id:"moveto",children:"MoveTo"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method MoveTo(position As %Integer) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Move to this position in the stream. If this suceeds then return true, else return false. Note this implementation is not efficient because it searches from the start of the stream, it can be improved upon in specific subclasses. Note that moving to position 1 will be at the start of the stream, position 2 will be at the second character of the stream, etc."}),"\n",(0,s.jsx)(t.h3,{id:"rewind",children:"Rewind"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Rewind() As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Go back to the start of the stream."}),"\n",(0,s.jsx)(t.h3,{id:"flush",children:"Flush"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method Flush() As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Flush any output in the stream not already saved."}),"\n",(0,s.jsx)(t.h3,{id:"isnull",children:"IsNull"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method IsNull() As %Boolean [ CodeMode = call ]\n"})}),"\n",(0,s.jsx)(t.p,{children:'Returns true if this is a "NULL" stream; that is, a stream which has never been written to and saved and has no stream attributes. This is used by the InterSystems IRIS ODBC server.'}),"\n",(0,s.jsx)(t.h3,{id:"isnull-1",children:"%IsNull"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %IsNull() As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.p,{children:'Returns true if this is a "NULL" stream; that is, a stream which has never been written to and saved and has no stream attributes. This is used by the InterSystems IRIS ODBC server.'}),"\n",(0,s.jsx)(t.h3,{id:"objectisnull",children:"%ObjectIsNull"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %ObjectIsNull(soid As %ObjectIdentity) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return true if this stream oid is a null stream and false if the stream is not null"}),"\n",(0,s.jsx)(t.h3,{id:"copyfromandsave",children:"CopyFromAndSave"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method CopyFromAndSave(source As %Stream.Object) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Copy the stream from source into the current stream ignoring anything already in the current stream and save the result to the permanent location. This is used to optimise the copying of say a %GlobalCharacterStream to another %GlobalCharacterStream to avoid copying into temporary storage first and then moving this to the permanent storage when SaveStream is called."}),"\n",(0,s.jsx)(t.p,{children:"Note that any locking or transaction handling must be done by the caller."}),"\n",(0,s.jsx)(t.h3,{id:"serializetosyncset",children:"SerializeToSyncSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method SerializeToSyncSet(ss As %SYNC.SyncSet, iPtr As %Integer, property As %String) As %Status [ CodeMode = generator ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"SerializeToSyncSet copies the stream value from the current object to the sync set global. When the sync set is imported into another system the stream value will be copied from the global back to a stream of the container property's current type."}),"\n",(0,s.jsx)(t.h3,{id:"syncstreamin",children:"SyncStreamIn"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method SyncStreamIn(ss As %SYNC.SyncSet, iPtr As %Integer, property As %String) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"SyncStreamIn copies the stream value from the sync set global into the current object."}),"\n",(0,s.jsx)(t.h3,{id:"sizeget",children:"SizeGet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method SizeGet() As %Integer\n"})}),"\n",(0,s.jsx)(t.h3,{id:"readsql",children:"ReadSQL"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method ReadSQL(start As %Integer = 1, end As %Integer = -1) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"SQL specific method for reading stream data"}),"\n",(0,s.jsx)(t.h3,{id:"streamoidisnull",children:"StreamOIDIsNull"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod StreamOIDIsNull(soid As %ObjectIdentity) As %Boolean [ CodeMode = call ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return true if this stream oid is a null stream and false if the stream is not null"}),"\n",(0,s.jsx)(t.h3,{id:"objectsize",children:"%ObjectSize"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %ObjectSize(soid As %ObjectIdentity) As %Integer\n"})}),"\n",(0,s.jsx)(t.p,{children:"Returns the size of the stream pointed to by soid in the most efficient way possible."}),"\n",(0,s.jsx)(t.h3,{id:"objectsizeinternal",children:"%ObjectSizeInternal"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %ObjectSizeInternal(soid As %ObjectIdentity) As %Integer [ Private ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"lobprefetch",children:"%LOBPrefetch"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %LOBPrefetch(soid As %ObjectIdentity, prefetchsize As %Integer, ByRef data As %String) As %Integer\n"})}),"\n",(0,s.jsx)(t.p,{children:"Given a soid if the length is <= prefetchsize then return the data in data. The return value is 0 meaning the stream is over this size, 1 for character stream 2 for binary stream. 3 for non-NULL empty Stream (Size=0)"}),"\n",(0,s.jsx)(t.h3,{id:"lobprefetchinternal",children:"%LOBPrefetchInternal"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %LOBPrefetchInternal(soid As %ObjectIdentity, prefetchsize As %Integer, ByRef data As %String) As %Integer [ Private ]\n"})})]})}function o(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var s=n(96540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);