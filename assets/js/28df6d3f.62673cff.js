"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[63570],{1019:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>i,default:()=>o,frontMatter:()=>a,toc:()=>l});var r=t(74848),n=t(28453);const a={pagination_prev:null,pagination_next:null},i="SYS.History.Hourly",l=[{value:"Properties",id:"properties",level:2},{value:"DateTime",id:"datetime",level:3},{value:"PerfCount",id:"perfcount",level:3},{value:"SysCount",id:"syscount",level:3},{value:"WDCount",id:"wdcount",level:3},{value:"Perf",id:"perf",level:3},{value:"WD",id:"wd",level:3},{value:"Sys",id:"sys",level:3},{value:"DB",id:"db",level:3},{value:"ZDATE",id:"zdate",level:3},{value:"ZTIME",id:"ztime",level:3},{value:"Methods",id:"methods",level:2},{value:"Purge",id:"purge",level:3},{value:"Export",id:"export",level:3},{value:"SetPurge",id:"setpurge",level:3}];function c(e){const s={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"syshistoryhourly",children:"SYS.History.Hourly"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Class SYS.History.Hourly Extends (%Persistent, %XML.Adaptor) [ System = 4 ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"This class is an Hourly summary of the detail PerfData and SysData collections. For each class sample collected you may chose to have the Average, Maximum, Minimum, Median, Standard Deviation, and Total maintained for the day. By default Average, Maximum, and Standard Deviation are kept. Use the SetSummary method in each individual class (Performance, SystemUsage, etc.) to modify this. Performance counters (SYS.History.Performance) are normalized to a per-second rate for all the calculations."}),"\n",(0,r.jsx)(s.p,{children:"By default, this data is automatically purged after 60 days."}),"\n",(0,r.jsxs)(s.p,{children:["For details, see ",(0,r.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+SYS.History.Hourly",children:"History Monitor"}),"."]}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.h3,{id:"datetime",children:"DateTime"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property DateTime As %TimeStamp [ SqlColumnNumber = 2 ];\n"})}),"\n",(0,r.jsx)(s.p,{children:"Time of summary"}),"\n",(0,r.jsx)(s.h3,{id:"perfcount",children:"PerfCount"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property PerfCount As %Integer;\n"})}),"\n",(0,r.jsx)(s.p,{children:"Number of Performance samples in this Hourly period"}),"\n",(0,r.jsx)(s.h3,{id:"syscount",children:"SysCount"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property SysCount As %Integer;\n"})}),"\n",(0,r.jsx)(s.p,{children:"Number of SystemUsage samples in this Hourly period"}),"\n",(0,r.jsx)(s.h3,{id:"wdcount",children:"WDCount"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property WDCount As %Integer;\n"})}),"\n",(0,r.jsx)(s.p,{children:"Number of WriteDaemon cycles in this Hourly period"}),"\n",(0,r.jsx)(s.h3,{id:"perf",children:"Perf"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Perf As array Of SYS.History.Performance;\n"})}),"\n",(0,r.jsx)(s.p,{children:"Performance metrics"}),"\n",(0,r.jsx)(s.h3,{id:"wd",children:"WD"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property WD As array Of SYS.History.WriteDaemon;\n"})}),"\n",(0,r.jsx)(s.p,{children:"WriteDaemon metrics"}),"\n",(0,r.jsx)(s.h3,{id:"sys",children:"Sys"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property Sys As array Of SYS.History.SystemUsage;\n"})}),"\n",(0,r.jsx)(s.p,{children:"System Usage metrics"}),"\n",(0,r.jsx)(s.h3,{id:"db",children:"DB"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property DB As array Of SYS.History.Database;\n"})}),"\n",(0,r.jsx)(s.p,{children:"Database metrics"}),"\n",(0,r.jsx)(s.h3,{id:"zdate",children:"ZDATE"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ZDATE As %Integer;\n"})}),"\n",(0,r.jsx)(s.p,{children:"UTC date key"}),"\n",(0,r.jsx)(s.h3,{id:"ztime",children:"ZTIME"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property ZTIME As %Integer;\n"})}),"\n",(0,r.jsx)(s.p,{children:"UTC time key"}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"purge",children:"Purge"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Purge(Keep As %Integer = 0) As %Integer\n"})}),"\n",(0,r.jsx)(s.p,{children:"Purge Hourly total data, keeping the last 'Keep' days. This is typically called at the start of each day from the %Monitor.System.History* classes, using the current system default for 'Keep' (see the SetPurge() method). The 'Keep' argument allows you to over ride the system default (a value of \"0\" or \"\" uses the system default)"}),"\n",(0,r.jsx)(s.p,{children:"Returns the number of entries purged."}),"\n",(0,r.jsx)(s.h3,{id:"export",children:"Export"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Export(FileName As %String, Start As %TimeStamp, End As %TimeStamp, Class As %String, Function As %String, Database As %String) As %Status\n"})}),"\n",(0,r.jsx)(s.p,{children:"Export Hourly data for a time range in CSV format. The default is all of the Perf, Sys and WD data currently in the Hourly class."}),"\n",(0,r.jsxs)(s.p,{children:["The default FileName is HistoryHour_config_date_time.csv in the MGR directory.",(0,r.jsx)(s.br,{}),"\n'Start' and 'End' times (if necessary) are in YYYY-MM-DD HH:MM:SS format.",(0,r.jsx)(s.br,{}),'\n\'Class\' can be a comma-delimited list one or more of these classes of metrics: "Perf", "Sys", "WD". Or it can be "DB" to select the Database properties. The Database class can not be mixed with the other classes since it uses a different key structure to accommodate multiple databaes.',(0,r.jsx)(s.br,{}),'\n\'Function\' can be a comma-delimited list one or more of these summary functions: "Avg", "Max", "Min", StDev", Med" or "Tot". The default is to include all summary functions.',(0,r.jsx)(s.br,{}),"\n'Database' can be used to select a specific database (by name). Only used if \"DB\" is selected in 'Class'"]}),"\n",(0,r.jsx)(s.h3,{id:"setpurge",children:"SetPurge"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SetPurge(Keep As %Integer = "") As %Integer\n'})}),"\n",(0,r.jsx)(s.p,{children:'Set the system parameter for the number of days of hourly data to keep. Initial system default is 60 days. Return value is the previous setting, and executing this method with a "" argument will return the current setting without modifying it.'})]})}function o(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>l});var r=t(96540);const n={},a=r.createContext(n);function i(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);