"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[83092],{80755:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>n,default:()=>h,frontMatter:()=>i,toc:()=>r});var a=s(74848),l=s(28453);const i={pagination_prev:null,pagination_next:null},n="%SYSTEM.SQL.Stats.Table",r=[{value:"Methods",id:"methods",level:2},{value:"Export",id:"export",level:3},{value:"Import",id:"import",level:3},{value:"GatherSchemaStats",id:"gatherschemastats",level:3},{value:"GatherTableStats",id:"gathertablestats",level:3},{value:"SetFieldSelectivity",id:"setfieldselectivity",level:3},{value:"SetExtentSize",id:"setextentsize",level:3},{value:"ClearSchemaStats",id:"clearschemastats",level:3},{value:"ClearTableStats",id:"cleartablestats",level:3}];function c(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"systemsqlstatstable",children:"%SYSTEM.SQL.Stats.Table"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"Class %SYSTEM.SQL.Stats.Table Extends %SYSTEM.Help [ Abstract, Not ProcedureBlock, System = 4 ]\n"})}),"\n",(0,a.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(t.h3,{id:"export",children:"Export"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod Export(pFilename As %Library.String, pSchemaFilter As %Library.String = "", pTableFilter As %Library.String = "", pDisplay As %Library.Boolean = 1) As %Library.Status [ ProcedureBlock = 1 ]\n'})}),"\n",(0,a.jsx)(t.p,{children:"Export extentsize and selectivity for tables/fields to an XML file. Generated file can be loaded using $SYSTEM.SQL.Stats.Table.Import()."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameter:"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"pFilename"})," Name of the file to output the table(s) tuning statistics to. ",(0,a.jsx)(t.em,{children:"pSchemaFilter"})," Filter to limit the schemas output. The default is \"\", which means there is no filter applied and all schemas in the namespace are exported. pSchemaFilter uses '_' to signify any single character, '*' to signify 0 through N characters, and ' to signify NOT. ",(0,a.jsx)(t.em,{children:"pTableFilter"})," Filter to limit the tables output. The default is \"\", which means there is no filter applied and all tables in the specified schemas are exported. pTableFilter uses '_' to signify any single character, '*' to signify 0 through N characters, and ' to signify NOT. ",(0,a.jsx)(t.em,{children:"pDisplay"})," TRUE(1)/FALSE(0) flag. Displays progress messages to the current device if TRUE. The default is TRUE (1). ",(0,a.jsx)(t.strong,{children:"Examples"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.Export("C:\\AllStats.xml") // Exports TuneTable Statistics for all schemas/tables in the current namespace'}),"\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.Export("C:\\SampleStats.xml","Sample") // Exports TuneTable Statistics for all Sample.* tables in the current namespace'}),"\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.Export("C:\\SamplePStats.xml","Sample","P*") // Exports TuneTable Statistics for all Sample.P* in the current namespace'}),"\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.Export("C:\\SamplePersonStats.xml","Sample","Person") // Exports TuneTable Statistics for table Sample.Person in the current namespace'}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"import",children:"Import"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod Import(pFilename As %Library.String, pDisplay As %Library.Boolean = 1, pClearCurrentStats As %Library.Boolean = 0) As %Library.Status [ ProcedureBlock = 1 ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Import extentsize, selectivity, blockcount for a table and its fields from a file created by $SYSTEM.SQL.Stats.Table.Export()."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameter:"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"pFilename"})," Name of the file to output the table(s) tuning statistics to. ",(0,a.jsx)(t.em,{children:"pDisplay"})," TRUE(1)/FALSE(0) flag. Displays progress messages to the current device if TRUE. The default is TRUE (1). ",(0,a.jsx)(t.em,{children:"pClearCurrentStats"})," TRUE(1)/FALSE(0) flag. If TRUE(1), any EXTENTSIZE, SELECTIVITY, BLOCKCOUNT, etc. will be cleared from the existing table prior to importing the stats. This can be used if you want to completely clear stats that are not specified in the import file instead of leaving them defined in class/table. The default is FALSE (0) ",(0,a.jsx)(t.strong,{children:"Examples"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.Import("C:\\AllStats.xml") // Import TuneTable Statistics for all schemas/tables that were exported with the $SYSTEM.SQL.Stats.Table.Export() to the AllStats.xml file'}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"gatherschemastats",children:"GatherSchemaStats"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GatherSchemaStats(schema As %Library.String, logFile As %Library.String = "") As %Status\n'})}),"\n",(0,a.jsx)(t.p,{children:"Calculate and update extentsize and selectivity for all classes/tables and their properties/fields within a schema."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"schema"})," Name of a schema to tune tables. If the schema name is omitted, the default schema is used. ",(0,a.jsx)(t.em,{children:"logFile"})," Optional name of a file to log the output of the TuneTable utility to. If ",(0,a.jsx)(t.em,{children:"logFile"})," isn't supplied, the output will go to the current device. ",(0,a.jsx)(t.strong,{children:"Examples"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.GatherSchemaStats("MedLab","TuneLog.txt")'}),"\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.GatherSchemaStats("""Medical Lab""")'}),"\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.GatherSchemaStats("") ; Tunes SQLUser schema'}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"gathertablestats",children:"GatherTableStats"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GatherTableStats(table As %Library.String, logFile As %Library.String = "") As %Status\n'})}),"\n",(0,a.jsx)(t.p,{children:"Calculate and update extentsize and selectivity for a class/table and its properties/fields."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameter:"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"table"}),' Name of a table or "*" to tune all tables in the current namespace. The name may be qualified with a schema name: ',(0,a.jsx)(t.em,{children:"Medical.Patient"})," If the schema name is omitted, the default schema is used. ",(0,a.jsx)(t.em,{children:"logFile"})," Optional name of a file to log the output of the TuneTable utility to. If ",(0,a.jsx)(t.em,{children:"logFile"})," isn't supplied, the output will go to the current device. ",(0,a.jsx)(t.strong,{children:"Examples"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.GatherTableStats("MedLab.Patient","Tune.log")'}),"\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.GatherTableStats("""Medical Lab"".Patient")'}),"\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.GatherTableStats("IscPerson") ; Tunes SQLUser.IscPerson'}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"setfieldselectivity",children:"SetFieldSelectivity"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetFieldSelectivity(schema As %Library.String, tablename As %Library.String, fieldname As %Library.String, selectivity As %Library.String) As %Library.Status [ ProcedureBlock = 1 ]\n"})}),"\n",(0,a.jsx)(t.p,{children:"Set the SELECTIVITY of a field and property to the value of the given selectivity"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameter:"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"schema"})," Name of the table's schema. Default is the default schema. ",(0,a.jsx)(t.em,{children:"tablename"})," Name of the table the field is in (required). ",(0,a.jsx)(t.em,{children:"fieldname"})," Name of the field to set the SELECTIVITY for (required). ",(0,a.jsx)(t.em,{children:"selectivity"}),' New selectivity value for the field (required). The selectivity of a property specifies the approximate frequency of specific values within the entire distribution of values. The Selectivity value for a column is generally the percentage of rows within a table that would be returned as a result of query searching for a typical value of the column. For example, suppose a table contains a Gender column whose value is evenly distributed between "M" and "F". The Selectivity value for the Gender column would be 50%, as a typical query based on Gender would find 50% of the rows within the table. The Selectivity value for a more unique property, such as TaxID, is typically a small percentage that varies according to the size of the table. Examples of values you can specify here are:']}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:'"10%" - Means that typical values for this column will return 10% of the rows in the table'}),"\n",(0,a.jsxs)(t.li,{children:['"1" - Means this field is unique. For any given value, it will return 1 row from the table.\n- A pure number will calculate the selectivity as EXTENTSIZE/',(0,a.jsx)(t.em,{children:"selectivity"}),". For example, if EXTENTSIZE is 100000 and ",(0,a.jsx)(t.em,{children:"selectivity"})," is 1000, this will set the selectivity to 1%."]}),"\n",(0,a.jsx)(t.li,{children:'"NUMROWS" - This is the same as specifying "1", it means the field is unique. This is allowed for legacy support of M/SQL tables that have been converted to class definitions.'}),"\n",(0,a.jsx)(t.li,{children:'NUMROWS/positive_integer - This will calculate the SQL SELECTIVITY as EXTENTSIZE/positive_integer. For example if EXTENTSIZE is 100000 and you specify NUMROWS/5000, this will set the SQL SELECTIVITY to 20, which means for a typical value for the field, 20 rows of the table will be returned. This is allowed for legacy support of M/SQL tables that have been converted to class definitions.\nThere is no validation of the value you enter for the SELECTIVITY. If you enter something not recognized as a valid SELECTIVITY, such as the string "nonsense", it will be turned into a value of 0. If the SQL query processor sees a SELECTIVITY of 0, it will attempt to come up with a typical SELECTIVITY value for the field based on how many rows are in the table and whether or not the field is a reference column, is part of the IDKEY field, has a VALUELIST specification, etc.'}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,a.jsx)(t.p,{children:"Status Code"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Example"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.SetFieldSelectivity("MedLab","Patient","Home_Phone","2.5%")'}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"setextentsize",children:"SetExtentSize"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod SetExtentSize(schema As %Library.String, tablename As %Library.String, newextentsize As %Library.String) As %Library.Status [ ProcedureBlock = 1 ]\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Set the EXTENTSIZE of a table to the value of the given extentsize ",(0,a.jsx)(t.strong,{children:"Parameter:"})]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"schema"})," Name of the table's schema. Default is the default schema. ",(0,a.jsx)(t.em,{children:"tablename"})," Name of the table the field is in (required). ",(0,a.jsx)(t.em,{children:"newextentsize"})," New extent size value for the field (required). The extent size of a table is the number of rows. Must be a positive number. ",(0,a.jsx)(t.strong,{children:"Returns:"})," Status Code"]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Example"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.SetExtentSize("Sample","Person",135)'}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"clearschemastats",children:"ClearSchemaStats"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ClearSchemaStats(schema As %Library.String) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Clear the table stats (selectivity, histogram info, extent size, etc.) for all classes/tables and their properties/fields within a schema."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"schema"})," Name of a schema to tune tables. If the schema name is omitted, the default schema is used. ",(0,a.jsx)(t.strong,{children:"Examples"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.ClearSchemaStats("MedLab")'}),"\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.ClearSchemaStats("") ; Clear the table stats for SQLUser schema'}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"cleartablestats",children:"ClearTableStats"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod ClearTableStats(table As %Library.String) As %Status\n"})}),"\n",(0,a.jsx)(t.p,{children:"Clear the table stats (selectivity, histogram info, extent size, etc.) for a class/table and its properties/fields."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Parameter:"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.em,{children:"table"}),' Name of a table or "*" to Clear the table stats for all tables in the current namespace. The name may be qualified with a schema name: ',(0,a.jsx)(t.em,{children:"Medical.Patient"})," If the schema name is omitted, the default schema is used. ",(0,a.jsx)(t.strong,{children:"Examples"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.ClearTableStats("MedLab.Patient")'}),"\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.ClearTableStats("""Medical Lab"".Patient")'}),"\n",(0,a.jsx)(t.li,{children:'Do $SYSTEM.SQL.Stats.Table.ClearTableStats("IscPerson") ; Clear the table stats for SQLUser.IscPerson'}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>n,x:()=>r});var a=s(96540);const l={},i=a.createContext(l);function n(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:n(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);