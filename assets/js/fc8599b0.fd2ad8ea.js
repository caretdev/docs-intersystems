"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[98391],{36458:(e,a,i)=>{i.r(a),i.d(a,{contentTitle:()=>t,default:()=>c,frontMatter:()=>o,toc:()=>n});var l=i(74848),s=i(28453);const o={pagination_prev:null,pagination_next:null},t="%Library.PosixTime",n=[{value:"Parameters",id:"parameters",level:2},{value:"MAXVAL",id:"maxval",level:3},{value:"MINVAL",id:"minval",level:3},{value:"DATEFORMAT",id:"dateformat",level:3},{value:"TIMEFORMAT",id:"timeformat",level:3},{value:"XMLTIMEZONE",id:"xmltimezone",level:3},{value:"XMLDEFAULTVALUE",id:"xmldefaultvalue",level:3},{value:"XSDTYPE",id:"xsdtype",level:3},{value:"INDEXNULLMARKER",id:"indexnullmarker",level:3},{value:"JSONTYPE",id:"jsontype",level:3},{value:"Methods",id:"methods",level:2},{value:"XSDToLogical",id:"xsdtological",level:3},{value:"LogicalToXSD",id:"logicaltoxsd",level:3},{value:"JSONToLogical",id:"jsontological",level:3},{value:"LogicalToJSON",id:"logicaltojson",level:3},{value:"OdbcToLogical",id:"odbctological",level:3},{value:"LogicalToOdbc",id:"logicaltoodbc",level:3},{value:"DisplayToLogical",id:"displaytological",level:3},{value:"LogicalToDisplay",id:"logicaltodisplay",level:3},{value:"IsValid",id:"isvalid",level:3},{value:"Normalize",id:"normalize",level:3},{value:"DateToLogical",id:"datetological",level:3},{value:"LogicalToDate",id:"logicaltodate",level:3},{value:"LogicalToTime",id:"logicaltotime",level:3},{value:"TimeToLogical",id:"timetological",level:3},{value:"TimeStampToLogical",id:"timestamptological",level:3},{value:"LogicalToTimeStamp",id:"logicaltotimestamp",level:3},{value:"LogicalToUnixTime",id:"logicaltounixtime",level:3},{value:"UnixTimeToLogical",id:"unixtimetological",level:3},{value:"CurrentTimeStamp",id:"currenttimestamp",level:3},{value:"CurrentUTCTimeStamp",id:"currentutctimestamp",level:3}];function r(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(a.header,{children:(0,l.jsx)(a.h1,{id:"libraryposixtime",children:"%Library.PosixTime"})}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"Class %Library.PosixTime [ ClassType = datatype, ClientDataType = TIMESTAMP, OdbcType = TIMESTAMP, SqlCategory = POSIXTS, System = 2 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"The %PosixTime data type class represents a time stamp value."}),"\n",(0,l.jsx)(a.p,{children:"The logical value of the %PosixTime data type is based on the number of seconds since (or before) January 1, 1970 00:00:00. The logical values will never collide with those of %Date in a valid range, and will sort chronologically when stored in globals. %PosixTime takes up less disk space and memory than %TimeStamp datatype, and is better for performance than %TimeStamp."}),"\n",(0,l.jsx)(a.p,{children:"The earliest date supported by %PosixTime is 0001-01-01 00:00:00, which has a logical value of -6979664624441081856. The last date supported is 9999-12-31 23:59:59.999999, which has a logical value of 1406323805406846975. Dates prior to 1970-01-01 00:00:00 have a negative logical value. %PosixTime values have a 1 microsecond resolution. To convert between %PosixTime and %TimeStamp format, call LogicalToTimeStamp(posixtime_value)"}),"\n",(0,l.jsx)(a.p,{children:"To convert between %TimeStamp and %PosixTime format, call TimeStampToLogical(timestamp_value)"}),"\n",(0,l.jsx)(a.p,{children:"To convert between %PosixTime and %Date format, call LogicalToDate(posixtime_value)."}),"\n",(0,l.jsx)(a.p,{children:"To convert between %Date and %PosixTime format, call DateToLogical(date_value). A time of 00:00:00 is used."}),"\n",(0,l.jsx)(a.p,{children:"To convert between %PosixTime and %Time format, call LogicalToTime(posixtime_value)."}),"\n",(0,l.jsx)(a.p,{children:"To convert between %Time and %PosixTime format, call TimeToLogical(time_value). The current date is used."}),"\n",(0,l.jsx)(a.p,{children:"To determine if a value is a valid logical %PosixTime value, call IsValid(posixtime_value)."}),"\n",(0,l.jsx)(a.p,{children:"To get the current, local datetime %PosixTime logical value, call CurrentTimeStamp(precision)."}),"\n",(0,l.jsx)(a.p,{children:"To get the current, UTC datetime %PosixTime logical value, call CurrentUTCTimeStamp(precision)."}),"\n",(0,l.jsx)(a.p,{children:"To get a Unix Timestamp value from a %PosixTime logical (local time) value, call LogicalToUnixTime(posixtime_value)."}),"\n",(0,l.jsx)(a.p,{children:"To get a %PosixTime logical value from a Unix Timestamp value, call UnixTimeToLogical(unix_timestamp_value)."}),"\n",(0,l.jsx)(a.h2,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsx)(a.h3,{id:"maxval",children:"MAXVAL"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter MAXVAL = 1406323805406846975;\n"})}),"\n",(0,l.jsx)(a.p,{children:"The maximum allowed logical value for the data type. By default, a Logical value of 1406323805406846975, which is 9999-12-31 23:59:59.999999."}),"\n",(0,l.jsx)(a.h3,{id:"minval",children:"MINVAL"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter MINVAL = -6979664624441081856;\n"})}),"\n",(0,l.jsx)(a.p,{children:"The minimum allowed logical value for the data type. By default, a logical value of -6979664624441081856, which is 0001-01-01 00:00:00."}),"\n",(0,l.jsx)(a.h3,{id:"dateformat",children:"DATEFORMAT"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter DATEFORMAT = 3;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["The format specification for the data type's date component display value. The value of the DATEFORMAT parameter corresponds to the available parameters of the ",(0,l.jsx)(a.code,{children:"$ZDATETIME"})," and ",(0,l.jsx)(a.code,{children:"$ZDATETIMEH"})," function's fformat value, which is used to perform the formatting of the time component of the timestamp value."]}),"\n",(0,l.jsx)(a.h3,{id:"timeformat",children:"TIMEFORMAT"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter TIMEFORMAT = 1;\n"})}),"\n",(0,l.jsxs)(a.p,{children:["The format specification for the data type's time component display value. The value of the TIMEFORMAT parameter corresponds to the available parameters of the ",(0,l.jsx)(a.code,{children:"$ZDATETIME"})," and ",(0,l.jsx)(a.code,{children:"$ZDATETIMEH"})," function's tformat value, which is used to perform the formatting of the time component of the timestamp value."]}),"\n",(0,l.jsx)(a.h3,{id:"xmltimezone",children:"XMLTIMEZONE"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:'Parameter XMLTIMEZONE [ Constraint = "IGNORE,UTC", Flags = ENUM ] = "UTC";\n'})}),"\n",(0,l.jsx)(a.p,{children:'XMLTIMEZONE specifies the handling of timezone part of the XML format dateTime. "UTC" means convert to UTC on input. "IGNORE means ignore the timezone.'}),"\n",(0,l.jsx)(a.h3,{id:"xmldefaultvalue",children:"XMLDEFAULTVALUE"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"Parameter XMLDEFAULTVALUE As STRING [ Internal ];\n"})}),"\n",(0,l.jsx)(a.p,{children:'XMLDEFAULTVALUE specifies the value to use if the date fails validity check by $zdatetimeh. By default "" is used which will result in an XMLImport error. A dateTime such as "1841-01-1 00:00:00" may be specified to replace dates such as 0001-01-01 00:00:00 which are not valid %TimeStamp dates. For ease of use, specify a %TimeStamp style logical value for XMLDEFAULTVALUE, not a %PosixTime logical value (which is a 64-bit integer).'}),"\n",(0,l.jsx)(a.h3,{id:"xsdtype",children:"XSDTYPE"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:'Parameter XSDTYPE = "dateTime";\n'})}),"\n",(0,l.jsx)(a.p,{children:"Declares the XSD type used when projecting XML Schemas."}),"\n",(0,l.jsx)(a.h3,{id:"indexnullmarker",children:"INDEXNULLMARKER"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:'Parameter INDEXNULLMARKER = "-1E19";\n'})}),"\n",(0,l.jsx)(a.p,{children:"Declares the default null marker value to use in index subscripts for properties of type %PosixTime"}),"\n",(0,l.jsx)(a.h3,{id:"jsontype",children:"JSONTYPE"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:'Parameter JSONTYPE = "number";\n'})}),"\n",(0,l.jsx)(a.p,{children:"JSONTYPE is JSON type used for this datatype."}),"\n",(0,l.jsx)(a.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(a.h3,{id:"xsdtological",children:"XSDToLogical"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod XSDToLogical(%val As %String) As %PosixTime [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts the SOAP encoded input datetime value into a %PosixTime value."}),"\n",(0,l.jsx)(a.h3,{id:"logicaltoxsd",children:"LogicalToXSD"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToXSD(%val As %PosixTime) As %String [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts the %PosixTime value to the canonical SOAP encoded value."}),"\n",(0,l.jsx)(a.h3,{id:"jsontological",children:"JSONToLogical"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod JSONToLogical(%val As %BigInt) As %PosixTime [ CodeMode = generator ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts the JSON UNIX time to logical %PosixTime."}),"\n",(0,l.jsx)(a.h3,{id:"logicaltojson",children:"LogicalToJSON"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToJSON(%val As %FilemanTimeStamp) As %BigInt [ CodeMode = generator ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts the logical %PosixTime value to the JSON integer UNIX time value."}),"\n",(0,l.jsx)(a.h3,{id:"odbctological",children:"OdbcToLogical"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod OdbcToLogical(%val As %RawString) As %Library.PosixTime [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts %val, which represents either a Timestamp in ODBC format, or a Date in ODBC format, into a logical %PosixTime value."}),"\n",(0,l.jsx)(a.p,{children:"Returns the logical %PosixTime value of the ODBC Timestamp string %val."}),"\n",(0,l.jsx)(a.h3,{id:"logicaltoodbc",children:"LogicalToOdbc"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToOdbc(%val As %PosixTime) As %TimeStamp [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts %val, which represents a logical %PosixTime value into an ODBC format TIMESTAMP value"}),"\n",(0,l.jsx)(a.h3,{id:"displaytological",children:"DisplayToLogical"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod DisplayToLogical(%val As %RawString) As %PosixTime [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts the input value %val, which represents a display timestamp value, in a logical %PosixTime value."}),"\n",(0,l.jsx)(a.h3,{id:"logicaltodisplay",children:"LogicalToDisplay"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToDisplay(%val As %PosixTime) As %String [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts the value of %val, which is in logical format as the encoded number of seconds since Jan 01, 1970 00:00:00, into a display timestamp string."}),"\n",(0,l.jsx)(a.h3,{id:"isvalid",children:"IsValid"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod IsValid(%val As %RawString) As %Status [ CodeMode = generator, ServerOnly = 0 ]\n"})}),"\n",(0,l.jsxs)(a.p,{children:["Tests if the logical value %val, which represents a %PosixTime value, is valid. Input value of a valid %TimeStamp logical value or %Date ODBC value is also allowed. If %TimeStamp logical value or %Date ODBC value is given, it will first be converted to a %PosixTime value The validation is based on the class parameter settings used for the class attribute this data type is associated with. In this case, ",(0,l.jsx)(a.a,{href:"#MAXVAL",children:"MAXVAL"})," and ",(0,l.jsx)(a.a,{href:"#MINVAL",children:"MINVAL"}),"."]}),"\n",(0,l.jsx)(a.h3,{id:"normalize",children:"Normalize"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod Normalize(%val As %RawString) As %PosixTime [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts %val to a normalized %PosixTime value. Input value of a valid %TimeStamp logical value, %Date ODBC value, or %Date logical value is also allowed. If %TimeStamp logical value , %Date ODBC value, or %Date logical value is given, it will first be converted to a %PosixTime value"}),"\n",(0,l.jsx)(a.h3,{id:"datetological",children:"DateToLogical"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod DateToLogical(%val As %Date) As %Library.PosixTime [ CodeMode = expression, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts a logical %Date value to logical %PosixTime value."}),"\n",(0,l.jsx)(a.h3,{id:"logicaltodate",children:"LogicalToDate"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToDate(%val As %Library.PosixTime) As %Library.Date [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts a logical %PosixTime value to a logical %Date value."}),"\n",(0,l.jsx)(a.h3,{id:"logicaltotime",children:"LogicalToTime"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToTime(%val As %Library.PosixTime) As %Library.Time [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts a logical %PosixTime value to a logical %Time value."}),"\n",(0,l.jsx)(a.h3,{id:"timetological",children:"TimeToLogical"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod TimeToLogical(%val As %Library.Time) As %Library.PosixTime [ CodeMode = expression, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts a logical %Time value to a logical %PosixTime value."}),"\n",(0,l.jsx)(a.h3,{id:"timestamptological",children:"TimeStampToLogical"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod TimeStampToLogical(%val As %Library.TimeStamp) As %Library.PosixTime [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts a logical %TimeStamp value to a logical %PosixTime value."}),"\n",(0,l.jsx)(a.h3,{id:"logicaltotimestamp",children:"LogicalToTimeStamp"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToTimeStamp(%val As %Library.PosixTime) As %Library.TimeStamp [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts a logical %PosixTime value to a logical %TimeStamp value."}),"\n",(0,l.jsx)(a.h3,{id:"logicaltounixtime",children:"LogicalToUnixTime"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod LogicalToUnixTime(%val As %Library.PosixTime) As %Library.Decimal [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts a logical %PosixTime value to a Unix time value (number of seconds before or after 01 Jan 1970 00:00:00.000000)."}),"\n",(0,l.jsx)(a.h3,{id:"unixtimetological",children:"UnixTimeToLogical"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod UnixTimeToLogical(%val As %Library.Decimal) As %Library.PosixTime [ CodeMode = generator, ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Converts a a Unix time value (number of seconds before or after 01 Jan 1970 00:00:00.000000 UTC) to a logical local %PosixTime value."}),"\n",(0,l.jsx)(a.h3,{id:"currenttimestamp",children:"CurrentTimeStamp"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod CurrentTimeStamp(precision As %Library.Integer = 6) As %Library.PosixTime [ ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Returns the current logical %PosixTime value."}),"\n",(0,l.jsx)(a.h3,{id:"currentutctimestamp",children:"CurrentUTCTimeStamp"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod CurrentUTCTimeStamp(precision As %Library.Integer = 6) As %Library.PosixTime [ ServerOnly = 1 ]\n"})}),"\n",(0,l.jsx)(a.p,{children:"Returns the current logical UTC %PosixTime value."})]})}function c(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,l.jsx)(a,{...e,children:(0,l.jsx)(r,{...e})}):r(e)}},28453:(e,a,i)=>{i.d(a,{R:()=>t,x:()=>n});var l=i(96540);const s={},o=l.createContext(s);function t(e){const a=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function n(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),l.createElement(o.Provider,{value:a},e.children)}}}]);