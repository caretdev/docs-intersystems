"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[35606],{91704:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>o,frontMatter:()=>r,toc:()=>l});var s=n(74848),a=n(28453);const r={pagination_prev:null,pagination_next:null},i="%Library.DynamicAbstractObject",l=[{value:"Methods",id:"methods",level:2},{value:"clear",id:"clear",level:3},{value:"contains",id:"contains",level:3},{value:"containsAll",id:"containsall",level:3},{value:"get",id:"get",level:3},{value:"iterator",id:"iterator",level:3},{value:"put",id:"put",level:3},{value:"putAll",id:"putall",level:3},{value:"putIfAbsent",id:"putifabsent",level:3},{value:"putAllIfAbsent",id:"putallifabsent",level:3},{value:"remove",id:"remove",level:3},{value:"removeAll",id:"removeall",level:3},{value:"removeIf",id:"removeif",level:3},{value:"rename",id:"rename",level:3},{value:"replace",id:"replace",level:3},{value:"replaceAll",id:"replaceall",level:3},{value:"size",id:"size",level:3},{value:"toString",id:"tostring",level:3},{value:"%OnClose",id:"onclose",level:3},{value:"%GetTypeOf",id:"gettypeof",level:3},{value:"%Size",id:"size-1",level:3},{value:"%FromJSON",id:"fromjson",level:3},{value:"%FromJSONFile",id:"fromjsonfile",level:3},{value:"%FromJSONStats",id:"fromjsonstats",level:3},{value:"%ToJSON",id:"tojson",level:3},{value:"%FromPVA",id:"frompva",level:3},{value:"%ToPVA",id:"topva",level:3},{value:"ConvertStreamToValue",id:"convertstreamtovalue",level:3},{value:"%GetObjectType",id:"getobjecttype",level:3},{value:"%GetIterator",id:"getiterator",level:3},{value:"ToZWrite",id:"tozwrite",level:3},{value:"%SetKeyMap",id:"setkeymap",level:3},{value:"%SetKeyMapRecursive",id:"setkeymaprecursive",level:3},{value:"%GetKeyMap",id:"getkeymap",level:3},{value:"%GetSwizzleObject",id:"getswizzleobject",level:3},{value:"%GetSerial",id:"getserial",level:3},{value:"%SetSerial",id:"setserial",level:3},{value:"%SetDocumentMetadata",id:"setdocumentmetadata",level:3},{value:"%GetDocumentCollection",id:"getdocumentcollection",level:3},{value:"getDocumentCollection",id:"getdocumentcollection-1",level:3},{value:"getDocumentId",id:"getdocumentid",level:3},{value:"toJson",id:"tojson-1",level:3},{value:"getDocumentVersion",id:"getdocumentversion",level:3},{value:"%GetDocumentID",id:"getdocumentid-1",level:3},{value:"%GetDocumentLID",id:"getdocumentlid",level:3},{value:"%GetDocumentVersion",id:"getdocumentversion-1",level:3},{value:"%GetDocumentMetadata",id:"getdocumentmetadata",level:3},{value:"%SetDocumentCollection",id:"setdocumentcollection",level:3},{value:"%SetDocumentID",id:"setdocumentid",level:3},{value:"%SetDocumentLID",id:"setdocumentlid",level:3},{value:"%SetDocumentVersion",id:"setdocumentversion",level:3},{value:"%SetMetadata",id:"setmetadata",level:3},{value:"%GetMetadata",id:"getmetadata",level:3},{value:"toPVA",id:"topva-1",level:3},{value:"fromPVA",id:"frompva-1",level:3},{value:"%Clear",id:"clear-1",level:3},{value:"%Clone",id:"clone",level:3},{value:"%FromOref",id:"fromoref",level:3},{value:"request object",id:"request-object",level:4},{value:"%FromObject",id:"fromobject",level:3},{value:"%FromObjectSwizzle",id:"fromobjectswizzle",level:3},{value:"%FromObjectMulti",id:"fromobjectmulti",level:3},{value:"addList",id:"addlist",level:3},{value:"&quot;_isLabeled&quot;",id:"_islabeled",level:3}];function c(e){const t={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"librarydynamicabstractobject",children:"%Library.DynamicAbstractObject"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %Library.DynamicAbstractObject Extends %Library.AbstractSet [ Abstract, ClassType = dynamic, System = 1 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"For information on the API provided by this superclass"}),", see ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+%25Library.DynamicAbstractObject",children:"Using Dynamic Entities"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Dynamic Entity base class."}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"clear",children:"clear"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method clear() [ CodeMode = call ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"remove all elements of the current set, throws an exception if this operation is not supported or the set cannot be cleared."}),"\n",(0,s.jsx)(t.h3,{id:"contains",children:"contains"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method contains(key As %DataType) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"return true if the key is currently an element of the set, false otherwise."}),"\n",(0,s.jsx)(t.h3,{id:"containsall",children:"containsAll"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method containsAll(array As %Library.DynamicArray) As %Boolean\n"})}),"\n",(0,s.jsx)(t.p,{children:"return true if the set contains() all key[n] where 0\u2264n\u2264 size(array)"}),"\n",(0,s.jsx)(t.h3,{id:"get",children:"get"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method get(key As %DataType) As %Library.Any [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"get the element identified by key"}),"\n",(0,s.jsx)(t.h3,{id:"iterator",children:"iterator"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method iterator() As %Iterator [ CodeMode = call ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"return an iterator over the elements of this set"}),"\n",(0,s.jsx)(t.h3,{id:"put",children:"put"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method put(key As %DataType, value As %Library.Any, type As %Library.String) As %Library.DynamicAbstractObject [ CodeMode = call ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"put the value into the set with the element name (id) of key. If an element with this key is already present in the set then that element's value is replaced by value"}),"\n",(0,s.jsx)(t.p,{children:"parameters:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"key: key to put into the set"}),"\n",(0,s.jsx)(t.li,{children:"value: value to put into the set"}),"\n",(0,s.jsx)(t.li,{children:"type: type of the value, refer to %GetTypeOf for a list of supported types"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"returns:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"oref referencing the modified DAO, this may be different from the current oref"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"throws:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"exception"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"putall",children:"putAll"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method putAll(key As %Library.DynamicAbstractObject, value As %Library.DynamicArray) As %Library.DynamicAbstractObject\n"})}),"\n",(0,s.jsx)(t.p,{children:"put all {keys[n], values[n]} elements where 0\u2264n\u2264 size(keys) into the DAO"}),"\n",(0,s.jsx)(t.p,{children:"parameters:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"keys: array of keys to put into the DAO"}),"\n",(0,s.jsx)(t.li,{children:"values: array of values to put into the DAO"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"returns:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"oref referencing the modified DAO"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"throws:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"exception"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"putifabsent",children:"putIfAbsent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method putIfAbsent(key As %DataType, value As %Library.Any) As %Library.AbstractSet\n"})}),"\n",(0,s.jsx)(t.p,{children:"put the {key, value} element into the set. If contains(key) is false or get(key) is null then put(key,value)"}),"\n",(0,s.jsx)(t.p,{children:"parameters:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"key: key to put into the set"}),"\n",(0,s.jsx)(t.li,{children:"value: value to put into the set\nreturns:"}),"\n",(0,s.jsx)(t.li,{children:"oref referencing the modified set"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"throws:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"exception"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"putallifabsent",children:"putAllIfAbsent"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method putAllIfAbsent(key As %Library.DynamicAbstractObject, value As %Library.DynamicArray) As %Library.DynamicAbstractObject\n"})}),"\n",(0,s.jsx)(t.p,{children:"put all {keys[n], values[n]} elements where 0\u2264n\u2264 size(keys) and keys[n] is not already associated with a value in the set."}),"\n",(0,s.jsx)(t.p,{children:"parameters:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"keys: array of keys to be put into the set"}),"\n",(0,s.jsx)(t.li,{children:"values: array of values to be put into the set"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"returns:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"oref referencing the modified set"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"throws:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"exception"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"remove",children:"remove"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method remove(key As %DataType) As %Library.Any [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"remove the element identified by key from the set"}),"\n",(0,s.jsx)(t.p,{children:"parameters:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"key: key of element to be removed from the set"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"returns:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"the removed element or null if that element doesn't exist"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"throws:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"exception"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"removeall",children:"removeAll"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method removeAll(key As %Library.DynamicArray) As %Library.DynamicArray\n"})}),"\n",(0,s.jsx)(t.p,{children:"remove all elements identified by keys[n] where 0\u2264n\u2264 size(keys) from the set"}),"\n",(0,s.jsx)(t.p,{children:"parameters:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"keys: array of keys to be removed from the set"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"returns:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"array of removed elements (null element if key doesn't exist)"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"throws:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"exception"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"removeif",children:"removeIf"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method removeIf(expression As %RawString) As %Library.DynamicArray [ Abstract ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"remove all of the elements matching the expression"}),"\n",(0,s.jsx)(t.p,{children:"parameters:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"expression: elements matching expression are to be removed"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"returns:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"array of removed elements (null element if key doesn't exist)"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"throws:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"exception"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"rename",children:"rename"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method rename(currentkey As %DataType, newkey As %DataType) As %DataType\n"})}),"\n",(0,s.jsx)(t.p,{children:"replace the key of the element identified by currentKey with newKey"}),"\n",(0,s.jsx)(t.p,{children:"parameters:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"currentkey - current key of the element to be renamed"}),"\n",(0,s.jsx)(t.li,{children:"newkey - new key to assign to the element\nreturns:"}),"\n",(0,s.jsx)(t.li,{children:"the current key if the element exists, null otherwise"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"throws:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"exception"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"replace",children:"replace"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method replace(key As %DataType, value As %Library.Any) As %Library.Any\n"})}),"\n",(0,s.jsx)(t.p,{children:"replace the value of the element identified by key with value"}),"\n",(0,s.jsx)(t.p,{children:"parameters:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"key - key of the element to be replaced"}),"\n",(0,s.jsx)(t.li,{children:"value - new value of the element\nreturns:"}),"\n",(0,s.jsx)(t.li,{children:"return the previous value of the element"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"throws:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"exception"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"replaceall",children:"replaceAll"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method replaceAll(key As %Library.DynamicArray, value As %Library.DynamicArray) As %Library.DynamicArray\n"})}),"\n",(0,s.jsx)(t.p,{children:"replace all {keys[n], values[n]} members, return an array containing the replaced values"}),"\n",(0,s.jsx)(t.p,{children:"parameters:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"keys: array of keys of the elements to be replaced"}),"\n",(0,s.jsx)(t.li,{children:"values: array of values of the elements"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"returns:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"array of previous element values"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"throws:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"exception"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"size",children:"size"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method size() As %Integer [ CodeMode = call ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"return the number of elements in the current set"}),"\n",(0,s.jsx)(t.h3,{id:"tostring",children:"toString"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method toString() As %String [ CodeMode = expression ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"The toString() method returns the contents of a set as a string."}),"\n",(0,s.jsx)(t.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status\n"})}),"\n",(0,s.jsx)(t.h3,{id:"gettypeof",children:"%GetTypeOf"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetTypeOf(key As %DataType) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Find out the type of value."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Returns"})," One of the following strings are returned.",(0,s.jsx)(t.br,{}),'\n"null" - JSON null',(0,s.jsx)(t.br,{}),'\n"boolean" - Either "true" or "false"',(0,s.jsx)(t.br,{}),'\n"number" - Any numeric value',(0,s.jsx)(t.br,{}),'\n"oref" - An %ObjectHandle (an ObjectScript oref)',(0,s.jsx)(t.br,{}),'\n"object" - A nested object',(0,s.jsx)(t.br,{}),'\n"array" - A nested array',(0,s.jsx)(t.br,{}),'\n"string" - Normal text string',(0,s.jsx)(t.br,{}),'\n"unassigned" - The value is unassigned']}),"\n",(0,s.jsx)(t.h3,{id:"size-1",children:"%Size"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Size() As %Integer\n"})}),"\n",(0,s.jsx)(t.p,{children:"Find the size of an %DynamicArray or a %DynamicObject."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Returns"})," An integer showing the size of the array or object. In the case of an array, the size includes unassigned entries within the array. In the case of an object, the size only includes elements that have assigned values."]}),"\n",(0,s.jsx)(t.h3,{id:"fromjson",children:"%FromJSON"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %FromJSON(str As %RawString) As %DynamicAbstractObject\n"})}),"\n",(0,s.jsx)(t.p,{children:"Given a JSON source, parse the source and return an object of type %DynamicAbstractObject. If an error occurs during parsing, an exception will be thrown."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"str"})," The input can be from a number of sources"]}),"\n",(0,s.jsxs)(t.p,{children:["(1) A string value containing the source.",(0,s.jsx)(t.br,{}),"\n(2) A stream object to read the source from."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Returns"})," An object of type %DynamicAbstractObject containing the parsed JSON."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"NOTE:"})," RFC 7159 specifies that the default encoding for JSON values uses UTF-8. This implies that for streams not containing 16-bit Unicode it ",(0,s.jsx)(t.em,{children:"may"}),' be necessary to explicitly convert individual character values via a call to $ZCONVERT (e.g. $zcvt(value,"I","UTF8") ) or entire streams by setting the TranslateTable attribute of the stream to "UTF8". ',(0,s.jsx)(t.code,{children:'set filename = "c:/iscsrc/json/greg4.json" set stream = ##class(%Stream.FileCharacter).%New() set sc = stream.LinkToFile(filename) if (\'sc) { w "Error on linking file "_filename,! q } try { set obj = ##class(%DynamicAbstractObject).%FromJSON(stream) } catch ex { w "Error. Unable to parse file "_filename,! w "Error type "_ex.Name,! w "Error code "_ex.Code,! w "Error location "_ex.Location,! set obj = "" } q obj'})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:'set src = "{""name"" : ""greg"", ""weight"" : 220 }" set obj = ##class(%DynamicAbstractObject).%FromJSON(src)'})}),"\n",(0,s.jsx)(t.p,{children:"An alternative in the catch block, to see formatted exception information, is to do $SYSTEM.OBJ.DisplayError(%objlasterror)."}),"\n",(0,s.jsx)(t.h3,{id:"fromjsonfile",children:"%FromJSONFile"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %FromJSONFile(filename As %RawString, TranslateTable As %String = "UTF8") As %DynamicAbstractObject\n'})}),"\n",(0,s.jsx)(t.p,{children:"Given a filename, parse the contents and return an object of type %DynamicAbstractObject. If an error occurs during parsing, an exception will be thrown. See the example in %FromJSON for how to handle an exception."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"filename"})," A file URI where the JSON source can be read. By default, the file must be encoded as UTF8."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"TranslateTable"}),' An optional parameter specifying the character encoding used in the JSON source file. If the parameter is missing, the file will use the "UTF8" encoding. See ',(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=LANDING+TRANSLATETABLES",children:"Translation Tables"})," for other available Translation Tables."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Returns"})," An object of type %DynamicAbstractObject containing the parsed JSON."]}),"\n",(0,s.jsx)(t.h3,{id:"fromjsonstats",children:"%FromJSONStats"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %FromJSONStats(str As %RawString, stats As %RawString) As %DynamicAbstractObject [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"INTERNAL ONLY!"}),"\n",(0,s.jsx)(t.p,{children:"The %FromJSONStats(...) method is for internal use only. The actions taken by this method may change in the future as additional capabilities are added to %DynamicAbstractObject class objects."}),"\n",(0,s.jsx)(t.h3,{id:"tojson",children:"%ToJSON"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ToJSON(outstrm As %Stream.Object) As %String\n"})}),"\n",(0,s.jsx)(t.p,{children:"Convert a %DynamicAbstractObject into a JSON string."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"outstrm"})," is optional. There are a number of possibilities:",(0,s.jsx)(t.br,{}),"\n(1) Parameter ",(0,s.jsx)(t.strong,{children:"outstrm"})," is not defined and the method is called via 'DO'. In this case the JSON string is written to the current output device.",(0,s.jsx)(t.br,{}),"\n(2) Parameter ",(0,s.jsx)(t.strong,{children:"outstrm"})," is not defined and the method is called as an expression. In this case the JSON string becomes the value of the expression.",(0,s.jsx)(t.br,{}),"\n(3) Parameter ",(0,s.jsx)(t.strong,{children:"outstrm"})," is defined. If it is %Stream object then the JSON string will be written to the stream. If outstrm is present but not an object then it is presumed to be a fully qualified file specification. In that case, a %Stream.FileCharacter stream is created, linked to that file and the JSON string is written to that stream. On completion, this stream is saved. The full path to the file must be defined. If outstrm is an object but is not an instance of %Stream.Object then an exception will be thrown."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"NOTE:"})," RFC 7159 specifies that the default encoding for JSON values uses UTF-8. When writing a stream containing 8-bit characters this implies that it ",(0,s.jsx)(t.em,{children:"may"}),' be necessary to explicitly convert individual values via a call to $ZCONVERT (e.g. $zcvt(value,"O","UTF8") ) or entire streams by setting the TranslateTable attribute of the stream to "UTF8" ',(0,s.jsx)(t.code,{children:'set obj = {"title" : "MR" , "lastname" : "JONES"} set obj.firstname = "JIMMY" do obj.%ToJSON() {"title":"MR","lastname":"JONES","firstname":"JIMMY"} set source = obj.%ToJSON() write source {"title":"MR","lastname":"JONES","firstname":"JIMMY"}'})]}),"\n",(0,s.jsx)(t.h3,{id:"frompva",children:"%FromPVA"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %FromPVA(Global As %String) As %DynamicAbstractObject [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This method is for INTERNAL USE only. It's specifications will change in the future."}),"\n",(0,s.jsxs)(t.p,{children:["Convert the Packed Vector Array binary representation (PVA representation) stored in a global array into a tree of class objects defined the %DynamicAbstractObject subclasses. The subclass of objects from the $DynamicAbstractObject classes will be abbreviated as the %DAO objects. The PVA binary representation can be created by executing",(0,s.jsx)(t.br,{}),"\nDO DynObj.%ToPVA(Global)"]}),"\n",(0,s.jsxs)(t.p,{children:["The conversion can be done by evaluating:",(0,s.jsx)(t.br,{}),"\nSET dao=##class(%DynamicAbstractObject).%FromPFA(Global) which sets the local variable 'dao' to be a reference of the root of a tree of %DAOs described in the global array 'Global'."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Global"})," is the $NAME representation of the root of a global subtree."]}),"\n",(0,s.jsxs)(t.p,{children:["If you execute",(0,s.jsx)(t.br,{}),'\nSET dao=##class(%DynamicAbstractObject).%FromPVA("^Docs(""alpha"",""book1"")")',(0,s.jsx)(t.br,{}),"\nor execute",(0,s.jsx)(t.br,{}),'\nSET dao=##class(%DynamicAbstractObject).%FromPVA($NAME(^Docs("alpha","book1"))',(0,s.jsx)(t.br,{}),"\nthen the binary PVA will be extracted from the data under the global ^Docs(alpha,book1)."]}),"\n",(0,s.jsx)(t.p,{children:"In the future the %FromPVA(Stream,Global) will accept PVA binary data from a %Stream and will distribute it into the 'Global' array entry."}),"\n",(0,s.jsx)(t.h3,{id:"topva",children:"%ToPVA"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ToPVA(Global As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This method is for INTERNAL USE only. It's specifications will change in the future."}),"\n",(0,s.jsx)(t.p,{children:"Convert an object of the %DynamicAbstractObject subclass into the binary Packed Vector Array representation which will be stored into global tree by executing DO DynObj.%ToPVA(Global)."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Global"})," is the $NAME representation of the root of a global subtree."]}),"\n",(0,s.jsxs)(t.p,{children:['If you execute DO DynObj.%ToPVA("^Docs(""alpha"",""book1"")")',(0,s.jsx)(t.br,{}),'\nor execute DO DynObj.%ToPVA($NAME(^Docs("alpha","book1"))',(0,s.jsx)(t.br,{}),"\nthen binary data will be created under ^Docs(alpha,book1)."]}),"\n",(0,s.jsx)(t.p,{children:"The preexisting data at ^Docs(alpha,book1) will be KILL-ed."}),"\n",(0,s.jsx)(t.p,{children:"The newly created data will look like: ^Docs(alpha,book1,0,0),...,^Docs(alpha,book1,0,N0-1) where the binary data is broken in 'N0' chunks of binary strings. The binary strings always contain 8-bit binary bytes, even on Unicode instances of IRIS. Complicated %DynamicAbstractObject objects may also generate additional subtrees of the form ^Docs(alpha,book1,1,0), ..., ^Docs(alpha,book1,1,N1-1) where additional binary data is broken into 'N1' chunks of binary strings. And %ToPVA may need to generate additional chunks, like ^Docs(alpha,book1,i,j), when the necessary. These additional chunks are created to simplify generation and retrieval of the binary Packed Vector Array data."}),"\n",(0,s.jsx)(t.h3,{id:"convertstreamtovalue",children:"ConvertStreamToValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method ConvertStreamToValue(value) As %DynamicAbstractObject [ Internal, Private ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"The parameter 'value' must be a %Stream. The contents of 'value' will be placed in a %DynamicString, %DynamicBinary or %DynamicBase64 object."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Returns"})," The generated %DynamicString, %DynamicBinary or %DynamicBase64 object."]}),"\n",(0,s.jsx)(t.h3,{id:"getobjecttype",children:"%GetObjectType"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetObjectType() As %Integer [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getiterator",children:"%GetIterator"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetIterator() As %Iterator.AbstractIterator [ Abstract ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Performs an iteration over all the values in a %DynamicAbstractObject subclass. Adding or removing an element of the %DynamicAbstractObject subclass will cause further calls on the %GetNext(.key,.value,.type) method to have undefined behavior."}),"\n",(0,s.jsxs)(t.p,{children:["In the example below, we will output all values contained in a %DynamicArray or a %DynamicObject. ",(0,s.jsx)(t.code,{children:'set iter = AbstractObject.%GetIterator() while iter.%GetNext(.key, .value, .type ) { write "key = "_key_", value = "_value_", type = "_type,! }'})," See the descriptions of the %GetNext in the %Iterator.Array and %Iterator.Object classes for more details."]}),"\n",(0,s.jsx)(t.h3,{id:"tozwrite",children:"ToZWrite"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method ToZWrite() As %String [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"INTERNAL USE ONLY."}),"\n",(0,s.jsx)(t.p,{children:"The ToZWrite() method is for internal use only. It provides output for the ZWRITE command. It returns the contents of a %DynamicAbstractObject as a %String using combined JSON/%String syntax."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:'set obj = {"NaNvalue" : ($DOUBLE("NAN")), "Infinity":($DOUBLE("Inf"))} write obj.ToZWrite()'})}),"\n",(0,s.jsx)(t.h3,{id:"setkeymap",children:"%SetKeyMap"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetKeyMap(keymap As %DynamicKeyMap, flags = 0) As %Integer [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"INTERNAL ONLY!"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"%SetKeyMap(keymap)"})," method is for internal use only. The actions taken by this method may change in the future as additional capabilities are added to %DynamicAbstractObject class objects."]}),"\n",(0,s.jsxs)(t.p,{children:["The statement ",(0,s.jsx)(t.strong,{children:"SET count=dao.%SetKeyMap(dkm)"})," will attach the %DynamicKeyMap ",(0,s.jsx)(t.strong,{children:"dkm"})," to the %DynamicAbstractObject ",(0,s.jsx)(t.strong,{children:"dao"}),", replacing the key map that was previously attached to ",(0,s.jsx)(t.strong,{children:"dao"}),". If ",(0,s.jsx)(t.strong,{children:"dao"})," is a %DynamicObject then its internal key index array will be modified to use the ",(0,s.jsx)(t.strong,{children:"dkm"})," %DynamicKeyMap. If necessary, additional key names will be added to the ",(0,s.jsx)(t.strong,{children:"dkm"})," key map. The ",(0,s.jsx)(t.strong,{children:"count"})," value returned by the ",(0,s.jsx)(t.strong,{children:"%SetKeyMap(dkm)"})," call is a count of the number of the key name strings added to the ",(0,s.jsx)(t.strong,{children:"dkm"})," key map. If the ",(0,s.jsx)(t.strong,{children:"dkm"})," key map is not modified by ",(0,s.jsx)(t.strong,{children:"%SetKeyMap"})," then the value zero is returned."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"dkm"})," is the %DynamicKeyMap to replace the key map currently used by the %DynamicAbstractObject."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"flags"})," is optional. When present it is a bit encoded integer of flag values. The 0x1 bit clears the key map value used by a %DynamicArray. The 0x2 bit clears the key map values used by a %DynamicObject ",(0,s.jsx)(t.strong,{children:"BUT"})," the key index arrays of the %DynamicObject are modified to conform to the new ",(0,s.jsx)(t.strong,{children:"dkm"})," key map ordering. ",(0,s.jsx)(t.strong,{children:"Returns"})," The count of the number of key name strings added to the ",(0,s.jsx)(t.strong,{children:"dkm"})," key map."]}),"\n",(0,s.jsx)(t.h3,{id:"setkeymaprecursive",children:"%SetKeyMapRecursive"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetKeyMapRecursive(keymap As %DynamicKeyMap, flags = 0) As %Integer [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"INTERNAL ONLY!"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"%SetKeyMapRecursive(keymap)"})," method is for internal use only. The actions taken by this method may change in the future as additional capabilities are added to %DynamicAbstractObject class objects."]}),"\n",(0,s.jsxs)(t.p,{children:["The statement ",(0,s.jsx)(t.strong,{children:"SET count=dao.%SetKeyMapRecursive(dkm)"})," will attach the %DynamicKeyMap ",(0,s.jsx)(t.strong,{children:"dkm"})," to the %DynamicAbstractObject ",(0,s.jsx)(t.strong,{children:"dao"})," and to all decendant %DynamicAbstractObject-s in the tree rooted at ",(0,s.jsx)(t.strong,{children:"dao"}),". Every %DynamicObject in the tree rooted at ",(0,s.jsx)(t.strong,{children:"dao"})," will have its internal key index array modified to use the ",(0,s.jsx)(t.strong,{children:"dkm"})," %DynamicKeyMap. If necessary, additional key names will be added to the ",(0,s.jsx)(t.strong,{children:"dkm"})," key map. The ",(0,s.jsx)(t.strong,{children:"count"})," value returned by the ",(0,s.jsx)(t.strong,{children:"%SetKeyMap(dkm)"})," method call is a count of the number of the key name strings added to the ",(0,s.jsx)(t.strong,{children:"dkm"})," key map. If the ",(0,s.jsx)(t.strong,{children:"dkm"})," key map is not modified by ",(0,s.jsx)(t.strong,{children:"%SetKeyMapRecursive"})," then the value zero is returned."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"dkm"})," is the %DynamicKeyMap to replace the key maps currently used by the %DynamicAbstractObject-s in the tree rooted at ",(0,s.jsx)(t.strong,{children:"dao"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"flags"})," is optional. When present it is a bit encoded integer of flag values. The 0x1 bit clears the key map value used by any %DynamicArray in the tree of %DynamicAbstractObject-s. The 0x2 bit clears the key map value used by any %DynamicObject in the tree of %DynamicAbstractObject-s, ",(0,s.jsx)(t.strong,{children:"BUT"})," the key index arrays of the %DynamicObject are modified to conform to the new ",(0,s.jsx)(t.strong,{children:"dkm"})," key map ordering."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Returns"})," The count of the number of key name strings added to the ",(0,s.jsx)(t.strong,{children:"dkm"})," key map."]}),"\n",(0,s.jsx)(t.h3,{id:"getkeymap",children:"%GetKeyMap"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetKeyMap() As %DynamicKeyMap [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"INTERNAL ONLY!"}),"\n",(0,s.jsx)(t.p,{children:"The %GetKeyMap() method is for internal use only. It returns a reference to the %DynamicKeyMap associated with a %DynamicAbstractObject. The formats and semantics of a key map are known only to the routines and methods that implement the %DynamicAbstractObject class and its subclasses. These formats, semantics, routines and methods may change in the future as additional capabilities are added to %DynamicAbstractObject class objects."}),"\n",(0,s.jsx)(t.p,{children:"The %GetKeyMap() method returns a reference to the %DynamicKeyMap used by the %DynamicArray or %DynamicObject. Adding additional key names to this key map will also affect the key map currently attached to the %DynamicAbstractObject, and vice versa. If a %DynamicArray or %DynamicObject has no associated key map then %GetKeyMap() returns the empty string."}),"\n",(0,s.jsx)(t.p,{children:"Most %DynamicObject class objects have a KeyMap attached. When a %DynamicObject is created by the %FromJSON method, abd when there are other %DynamicObject-s created in the same %FromJSON call then all those %DynamicObject-s will share the same KeyMap. A %DynamicArray created by the %FromJSON method may also have a shared KeyMap attached if there was a %DynamicObject created in the same %FromJSON method call."}),"\n",(0,s.jsx)(t.h3,{id:"getswizzleobject",children:"%GetSwizzleObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetSwizzleObject(force As %Integer = 0, ByRef oid As %ObjectIdentity) As %Status [ ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getserial",children:"%GetSerial"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetSerial(force As %Integer = 0) As %String [ CodeMode = expression, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"setserial",children:"%SetSerial"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %SetSerial(val As %String) As %Status [ CodeMode = expression, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"setdocumentmetadata",children:"%SetDocumentMetadata"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %SetDocumentMetadata(documentID As %RawString, documentVersion As %Integer, collectionName As %String(MAXLEN=""), localID As %Integer(MINVALUE=1) = "")\n'})}),"\n",(0,s.jsx)(t.h3,{id:"getdocumentcollection",children:"%GetDocumentCollection"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetDocumentCollection() As %RawString\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getdocumentcollection-1",children:"getDocumentCollection"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method getDocumentCollection() As %RawString [ CodeMode = call ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getdocumentid",children:"getDocumentId"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method getDocumentId() As %RawString [ CodeMode = call ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"tojson-1",children:"toJson"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method toJson(outstrm As %Stream.Object) As %RawString [ CodeMode = call ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getdocumentversion",children:"getDocumentVersion"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method getDocumentVersion() As %Integer [ CodeMode = call ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getdocumentid-1",children:"%GetDocumentID"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetDocumentID() As %RawString\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getdocumentlid",children:"%GetDocumentLID"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetDocumentLID() As %RawString [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getdocumentversion-1",children:"%GetDocumentVersion"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetDocumentVersion() As %Integer\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getdocumentmetadata",children:"%GetDocumentMetadata"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %GetDocumentMetadata(Output documentID As %RawString, Output documentVersion As %Integer, Output collectionName As %String(MAXLEN=""), Output localID As %Integer(MINVALUE=1) = "") [ Internal ]\n'})}),"\n",(0,s.jsx)(t.h3,{id:"setdocumentcollection",children:"%SetDocumentCollection"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetDocumentCollection(collection As %RawString) [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"setdocumentid",children:"%SetDocumentID"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetDocumentID(documentID As %RawString) [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"setdocumentlid",children:"%SetDocumentLID"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetDocumentLID(localID As %RawString) [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"setdocumentversion",children:"%SetDocumentVersion"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetDocumentVersion(version As %Integer) [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"setmetadata",children:"%SetMetadata"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetMetadata(key As %DataType, value As %RawString) [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"getmetadata",children:"%GetMetadata"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetMetadata(key As %DataType) As %RawString [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"topva-1",children:"toPVA"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method toPVA(gloref, options = 0) As %Integer [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"INTERNAL ONLY!"}),"\n",(0,s.jsx)(t.p,{children:"$toPVA() serializes an AbstractObject instance into a packed vector array. The key names can be optionally included, excluded or only the key names included (no data). The form of the packed vector array is not public and the only way to access data serialized as PVA is to extract it from the PVA using $fromPVA."}),"\n",(0,s.jsxs)(t.p,{children:["This method accepts two arguments. The first is the name of the reference where the PVA will be placed. That reference can be a local variable expression or a global variable expression. Typically, this is produced using the $Name function.",(0,s.jsx)(t.br,{}),'\nUSER>set obj = {"name":"test PVA","stuff":"misc"} USER>set id = 6 do obj.$toPVA($Name(mypva(id))) USER>zw mypva mypva(6,1)=']}),"\n",(0,s.jsx)(t.p,{children:"The above example is using a local variable but it could be a global reference, simply place the '^' in front of the variable name."}),"\n",(0,s.jsx)(t.p,{children:"The encoding of the data is proprietary and direct access is not supported."}),"\n",(0,s.jsx)(t.p,{children:"The second argument, options, is used to control whether or not the key names are included in the packed vector array."}),"\n",(0,s.jsx)(t.p,{children:"0x00 - do not include the key names, only include data"}),"\n",(0,s.jsx)(t.p,{children:"0x01 - include the key names and the data"}),"\n",(0,s.jsx)(t.p,{children:"0x02 - means this is the key map being dumped."}),"\n",(0,s.jsx)(t.p,{children:"If the key name map is not included in the packed vector array (options = 1) then the key names cannot be recovered when extracting the contents of the packed vector array. Normally the key name map would be supplied as a separate argument passed to $fromPVA() in that case."}),"\n",(0,s.jsx)(t.p,{children:"This function returns the length of the packed vector."}),"\n",(0,s.jsx)(t.h3,{id:"frompva-1",children:"fromPVA"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod fromPVA(gloref As %RawString, keymap = "") As %Library.DynamicAbstractObject [ Internal ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"INTERNAL ONLY!"}),"\n",(0,s.jsx)(t.p,{children:"fromPVA() extracts the contents of a packed vector array (PVA) into an instance AbstractObject. The form of the packed vector array is not public and the only way to construct a PVA is to invoke $toPVA. This method accepts two arguments. The first is the name of the variable where the PVA is located. That reference can be a local variable expression or a global variable expression. Typically, this is produced using the $Name function. The optional second argument is the key name map. If the packed vector array contained in the reference passed as the first argument includes the key name map then the key name map does not need to be passed as a separate argument. If the packed vector array does not contain the key name map then it must be supplied. The key name map is expected to be an instance of %Library.Array. The key name map can be extracted from a packed vector array or it can be retrieved by invoking $getKeyNameMap. To serialize the key name map as a packed vector array, refer to $toPVA."}),"\n",(0,s.jsx)(t.p,{children:'USER>k USER>set obj = {"name":"test PVA","stuff":"misc"} USER>set id = 6 do obj.$toPVA($Name(mypva(id)),$zh("1")) USER>set obj2 = ##class(%Library.AbstractObject).$fromPVA($Name(mypva(id))) USER>write obj2.$toJSON() {"name":"test PVA","stuff":"misc"}'}),"\n",(0,s.jsx)(t.p,{children:"The encoding of the data is proprietary and direct access is not supported."}),"\n",(0,s.jsx)(t.p,{children:"The above example is using a local variable but it could be a global reference, simply place the '^' in front of the variable name."}),"\n",(0,s.jsx)(t.h3,{id:"clear-1",children:"%Clear"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Clear() As %Library.DynamicAbstractObject\n"})}),"\n",(0,s.jsx)(t.p,{children:"Remove all the data from the dynamic object, leaving a blank object intact. return $this to allow chaining."}),"\n",(0,s.jsx)(t.h3,{id:"clone",children:"%Clone"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Clone() As %DynamicAbstractObject [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"fromoref",children:"%FromOref"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %FromOref(source As %Library.AbstractSet) As %DynamicAbstractObject\n"})}),"\n",(0,s.jsx)(t.p,{children:"%FromOref() will return an instance of %DynamicAbstractObject populated from the source object."}),"\n",(0,s.jsx)(t.h4,{id:"request-object",children:"request object"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Name"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"source"}),(0,s.jsx)(t.td,{children:"Oref of the object to be cast as a DynamicAbstractObject."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"returnValue"}),(0,s.jsx)(t.td,{children:"An oref referencing the DynamicAbstractObject."})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"set person = ##class(Sample.Person).%OpenId(50) set object = ##class(%DynamicObject).%FromOref(person)"}),"\n",(0,s.jsx)(t.h3,{id:"fromobject",children:"%FromObject"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %FromObject(source As %Any) As %DynamicAbstractObject\n"})}),"\n",(0,s.jsx)(t.h3,{id:"fromobjectswizzle",children:"%FromObjectSwizzle"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %FromObjectSwizzle(oref As %Any, property As %String) As %DynamicAbstractObject\n"})}),"\n",(0,s.jsx)(t.h3,{id:"fromobjectmulti",children:"%FromObjectMulti"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %FromObjectMulti(oref As %Any, property As %String) As %DynamicAbstractObject\n"})}),"\n",(0,s.jsx)(t.h3,{id:"addlist",children:"addList"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod addList(type, ByRef json, ByRef source)\n"})}),"\n",(0,s.jsx)(t.h3,{id:"_islabeled",children:'"_isLabeled"'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method "_isLabeled"() As %Boolean [ CodeMode = expression ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"@Override"})]})}function o(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var s=n(96540);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);