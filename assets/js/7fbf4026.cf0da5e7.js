"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[4468],{89026:(e,r,s)=>{s.r(r),s.d(r,{contentTitle:()=>l,default:()=>d,frontMatter:()=>i,toc:()=>a});var n=s(74848),t=s(28453);const i={pagination_prev:null,pagination_next:null},l="%ZEN.Report.RenderServer",a=[{value:"Parameters",id:"parameters",level:2},{value:"DOMAIN",id:"domain",level:3},{value:"TYPE",id:"type",level:3},{value:"Properties",id:"properties",level:2},{value:"Name",id:"name",level:3},{value:"ServerType",id:"servertype",level:3},{value:"Server",id:"server",level:3},{value:"Port",id:"port",level:3},{value:"PingPort",id:"pingport",level:3},{value:"NumThreads",id:"numthreads",level:3},{value:"NumPingThreads",id:"numpingthreads",level:3},{value:"LogLevel",id:"loglevel",level:3},{value:"LogFile",id:"logfile",level:3},{value:"MaxLogFileSize",id:"maxlogfilesize",level:3},{value:"LogRotationCount",id:"logrotationcount",level:3},{value:"InitializationTimeout",id:"initializationtimeout",level:3},{value:"ConnectionTimeout",id:"connectiontimeout",level:3},{value:"InitQueueSize",id:"initqueuesize",level:3},{value:"ThresholdPollingPeriod",id:"thresholdpollingperiod",level:3},{value:"MemoryThreshold",id:"memorythreshold",level:3},{value:"JavaHome",id:"javahome",level:3},{value:"JVMArgs",id:"jvmargs",level:3},{value:"ConfigFile",id:"configfile",level:3},{value:"Methods",id:"methods",level:2},{value:"PortToName",id:"porttoname",level:3},{value:"GetState",id:"getstate",level:3},{value:"Start",id:"start",level:3},{value:"StartByPort",id:"startbyport",level:3},{value:"Stop",id:"stop",level:3},{value:"CmdLine",id:"cmdline",level:3},{value:"ByServerExecute",id:"byserverexecute",level:3},{value:"ByServerFetch",id:"byserverfetch",level:3},{value:"ByServerClose",id:"byserverclose",level:3},{value:"LogStart",id:"logstart",level:3},{value:"LogStartFailure",id:"logstartfailure",level:3},{value:"LogReportInfo",id:"logreportinfo",level:3},{value:"LogStop",id:"logstop",level:3},{value:"TerminateAllRenderServers",id:"terminateallrenderservers",level:3},{value:"TerminateAllRenderServers2",id:"terminateallrenderservers2",level:3},{value:"ZenReportServerExists",id:"zenreportserverexists",level:3},{value:"%OnValidateObject",id:"onvalidateobject",level:3}];function o(e){const r={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"zenreportrenderserver",children:"%ZEN.Report.RenderServer"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Class %ZEN.Report.RenderServer Extends %Persistent [ Deprecated, System = 3 ]\n"})}),"\n",(0,n.jsx)(r.p,{children:"Zen Report Render Server definition and utility methods/queries. Also a superclass for other types of Zen Report Hot Servers."}),"\n",(0,n.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(r.h3,{id:"domain",children:"DOMAIN"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:'Parameter DOMAIN = "%Utility";\n'})}),"\n",(0,n.jsx)(r.h3,{id:"type",children:"TYPE"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Parameter TYPE = 0;\n"})}),"\n",(0,n.jsx)(r.p,{children:'"0" indicates a Render Server. Subclasses must override this parameter.'}),"\n",(0,n.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(r.h3,{id:"name",children:"Name"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property Name As %String [ Required ];\n"})}),"\n",(0,n.jsx)(r.p,{children:"Index for property Name. Unique mnemonic identifier."}),"\n",(0,n.jsx)(r.h3,{id:"servertype",children:"ServerType"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:'Property ServerType As %String [ InitialExpression = "0" ];\n'})}),"\n",(0,n.jsx)(r.p,{children:'Type is "0" (or null/empty for backward compatibility) for Render Servers.'}),"\n",(0,n.jsx)(r.h3,{id:"server",children:"Server"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:'Property Server As %String [ InitialExpression = "127.0.0.1", Required ];\n'})}),"\n",(0,n.jsx)(r.p,{children:"IP address or name of the machine where the JVM to be used by the Render Server is located. Currently not exposed to the UI as we only support local JVMs."}),"\n",(0,n.jsx)(r.h3,{id:"port",children:"Port"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property Port As %String [ Required ];\n"})}),"\n",(0,n.jsx)(r.p,{children:"TCP port number for communication with the Render Server."}),"\n",(0,n.jsx)(r.h3,{id:"pingport",children:"PingPort"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property PingPort As %String [ Required ];\n"})}),"\n",(0,n.jsx)(r.p,{children:"TCP port number for pinging the Render Server."}),"\n",(0,n.jsx)(r.h3,{id:"numthreads",children:"NumThreads"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property NumThreads As %Integer(MAXVAL = 100, MINVAL = 1) [ InitialExpression = 5 ];\n"})}),"\n",(0,n.jsx)(r.p,{children:"Number of threads."}),"\n",(0,n.jsx)(r.h3,{id:"numpingthreads",children:"NumPingThreads"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property NumPingThreads As %Integer(MAXVAL = 10, MINVAL = 1) [ InitialExpression = 5 ];\n"})}),"\n",(0,n.jsx)(r.p,{children:"Number of ping threads."}),"\n",(0,n.jsx)(r.h3,{id:"loglevel",children:"LogLevel"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:'Property LogLevel As %String [ InitialExpression = "3", Required ];\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Log level:",(0,n.jsx)(r.br,{}),"\n0 = no logging,",(0,n.jsx)(r.br,{}),"\n1 = log errors,",(0,n.jsx)(r.br,{}),"\n2 = log warnings,",(0,n.jsx)(r.br,{}),"\n3 = log info (default). The logs are created in the user's home directory. These logs have the name renderserver.log.n. renderserver.log.0 is the current log."]}),"\n",(0,n.jsx)(r.h3,{id:"logfile",children:"LogFile"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property LogFile As %String(MAXLEN = 260);\n"})}),"\n",(0,n.jsx)(r.p,{children:"Fully qualified name of the log file. If a file name is not specified and logging is enabled, the file used is renderserver.log in the user's home directory (or the root directory if the home directory does not exist)."}),"\n",(0,n.jsx)(r.h3,{id:"maxlogfilesize",children:"MaxLogFileSize"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property MaxLogFileSize As %Integer(MAXVAL = 2147483647, MINVAL = 0) [ InitialExpression = 32000 ];\n"})}),"\n",(0,n.jsx)(r.p,{children:"Maximum size, in bytes, for each log file. The default is 32000 bytes and the maximum allowed is 2147483647 bytes (2 GB). A value of 0 indicates no maximum defined."}),"\n",(0,n.jsx)(r.h3,{id:"logrotationcount",children:"LogRotationCount"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property LogRotationCount As %Integer(MAXVAL = 1000, MINVAL = 1) [ InitialExpression = 100 ];\n"})}),"\n",(0,n.jsx)(r.p,{children:"Number of log files accumulated before we recycle through log files. The default is 100."}),"\n",(0,n.jsx)(r.h3,{id:"initializationtimeout",children:"InitializationTimeout"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property InitializationTimeout As %Integer(MAXVAL = 300, MINVAL = 2) [ InitialExpression = 5 ];\n"})}),"\n",(0,n.jsx)(r.p,{children:"Number of seconds to wait for the Render Server to start up. The default is 5 s."}),"\n",(0,n.jsx)(r.h3,{id:"connectiontimeout",children:"ConnectionTimeout"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property ConnectionTimeout As %Integer(MAXVAL = 60, MINVAL = 2) [ InitialExpression = 5 ];\n"})}),"\n",(0,n.jsx)(r.p,{children:"Number of seconds to wait for a connection to be established with the Render Server. The default is 5 s."}),"\n",(0,n.jsx)(r.h3,{id:"initqueuesize",children:"InitQueueSize"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property InitQueueSize As %Integer;\n"})}),"\n",(0,n.jsx)(r.p,{children:"Initial size of rendering queue. If left blank (default) it will be the same as the number of threads; otherwise it must be an integer between 1 and the number of threads."}),"\n",(0,n.jsx)(r.h3,{id:"thresholdpollingperiod",children:"ThresholdPollingPeriod"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property ThresholdPollingPeriod As %Integer(MINVAL = 0) [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(r.p,{children:"Miliseconds to wait to poll memory threshold. Used for memory checking. The default is 0 (off)."}),"\n",(0,n.jsx)(r.h3,{id:"memorythreshold",children:"MemoryThreshold"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property MemoryThreshold As %Integer(MINVAL = 0) [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(r.p,{children:"Number of bytes that define memory usage threshold. Used for memory checking. The default is 0 (off)."}),"\n",(0,n.jsx)(r.h3,{id:"javahome",children:"JavaHome"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property JavaHome As %String(MAXLEN = 260);\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Location of the JVM (similar to the JAVA_HOME environment variable). It is used to find the target JVM and assemble the command to start the Render Server.",(0,n.jsx)(r.br,{}),"\nIf there is a default JVM on the machine that is usable without the need to specify its location, this setting may be left blank."]}),"\n",(0,n.jsx)(r.h3,{id:"jvmargs",children:"JVMArgs"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property JVMArgs As %String(MAXLEN = 32000);\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Optional additional arguments to be passed to the Java Virtual Machine (JVM) to include when assembling the command to start the Render Server.",(0,n.jsx)(r.br,{}),"\nFor example, you can specify system properties: ",(0,n.jsx)(r.strong,{children:"Dsystemvar=value"}),(0,n.jsx)(r.br,{}),"\nor set the maximum heap size: ",(0,n.jsx)(r.strong,{children:"Xmx256mb"}),(0,n.jsx)(r.br,{}),"\nand so on, as needed."]}),"\n",(0,n.jsx)(r.h3,{id:"configfile",children:"ConfigFile"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Property ConfigFile As %String(MAXLEN = 260);\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Fully qualified name of the renderer configuration file.",(0,n.jsx)(r.br,{}),"\nNote: This property applies to Render Servers only."]}),"\n",(0,n.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(r.h3,{id:"porttoname",children:"PortToName"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod PortToName(pPort As %String, Output pName As %String) As %Status\n"})}),"\n",(0,n.jsx)(r.p,{children:"Get the Zen Report Hot Server name given its port."}),"\n",(0,n.jsx)(r.h3,{id:"getstate",children:"GetState"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod GetState(port As %Integer, pingport As %Integer, timeout As %Integer = 5, Output reportedPort As %String, Output reportedType As %String) As %Integer\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Determine the state of a Hot Server:",(0,n.jsx)(r.br,{}),"\n0 = Inactive and ready to be started;",(0,n.jsx)(r.br,{}),"\n1 = Active and responsive to PING;",(0,n.jsx)(r.br,{}),"\n2 = Unresponsive (one or both ports are in use but it is unresponsive to PING);",(0,n.jsx)(r.br,{}),"\n3 = Troubled (main port is not in use but it is responsive to PING);",(0,n.jsx)(r.br,{}),"\n4 = Error with port and/or ping port configuration;",(0,n.jsx)(r.br,{}),"\n5 = Ping returns mismatching main port and/or server type."]}),"\n",(0,n.jsx)(r.h3,{id:"start",children:"Start"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod Start(pName As %String, Output pPreviousState As %Integer, Output pReturn As %String, pVerbose As %Boolean = 0) As %Status\n"})}),"\n",(0,n.jsx)(r.p,{children:"/ Startup a Zen Report Hot Server given its name."}),"\n",(0,n.jsx)(r.h3,{id:"startbyport",children:"StartByPort"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod StartByPort(pPort As %String, Output pPreviousState As %Integer, Output pReturn As %String, pVerbose As %Boolean = 0) As %Status\n"})}),"\n",(0,n.jsx)(r.p,{children:"Startup a Zen Report Hot Server given its main port."}),"\n",(0,n.jsx)(r.h3,{id:"stop",children:"Stop"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod Stop(pName, pVerbose As %Boolean = 0) As %Status\n"})}),"\n",(0,n.jsx)(r.p,{children:"Stop a Zen Report Hot Server given its name."}),"\n",(0,n.jsx)(r.h3,{id:"cmdline",children:"CmdLine"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod CmdLine(pReportServer As %ZEN.Report.RenderServer, Output pCmd As %String, Output pCmdArgs) As %String\n"})}),"\n",(0,n.jsx)(r.p,{children:"Generate the command line to run the script to start up the Render Server. Subclasses must override this method."}),"\n",(0,n.jsx)(r.h3,{id:"byserverexecute",children:"ByServerExecute"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod ByServerExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(r.p,{children:"Lookup Zen Report Render Servers, get basic data plus state. Subclasses must override query methods as needed."}),"\n",(0,n.jsx)(r.h3,{id:"byserverfetch",children:"ByServerFetch"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod ByServerFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ByServerExecute ]\n"})}),"\n",(0,n.jsx)(r.h3,{id:"byserverclose",children:"ByServerClose"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod ByServerClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ByServerExecute ]\n"})}),"\n",(0,n.jsx)(r.h3,{id:"logstart",children:"LogStart"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod LogStart(time As %String = "0", name As %String = "", cmd As %String = "", return As %String)\n'})}),"\n",(0,n.jsx)(r.p,{children:"Lookup all Zen Report Render Servers."}),"\n",(0,n.jsx)(r.h3,{id:"logstartfailure",children:"LogStartFailure"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod LogStartFailure(time As %String = "0", name As %String = "", state As %String = "", tSC As %String = "")\n'})}),"\n",(0,n.jsx)(r.h3,{id:"logreportinfo",children:"LogReportInfo"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod LogReportInfo(time As %String = "0", endtime As %String = "0", port As %String = "", tSC As %String = "", info As %String = "", filename As %String = "")\n'})}),"\n",(0,n.jsx)(r.h3,{id:"logstop",children:"LogStop"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod LogStop(time As %String = "0", name As %String = "", tSC As %String = "")\n'})}),"\n",(0,n.jsx)(r.h3,{id:"terminateallrenderservers",children:"TerminateAllRenderServers"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod TerminateAllRenderServers()\n"})}),"\n",(0,n.jsx)(r.p,{children:"Invoked on system shutdown to terminate the external Hot JVM processes. Lookup active (registered) Zen Report Servers."}),"\n",(0,n.jsx)(r.h3,{id:"terminateallrenderservers2",children:"TerminateAllRenderServers2"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod TerminateAllRenderServers2()\n"})}),"\n",(0,n.jsx)(r.p,{children:"Invoked on system shutdown to terminate the external Hot JVM processes. Lookup all Zen Report Server definitions."}),"\n",(0,n.jsx)(r.h3,{id:"zenreportserverexists",children:"ZenReportServerExists"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod ZenReportServerExists(pName As %String, Output pType As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(r.p,{children:"Lookup all servers of all types Check if there exists a Zen Report Hot Server with a given name."}),"\n",(0,n.jsx)(r.h3,{id:"onvalidateobject",children:"%OnValidateObject"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Method %OnValidateObject() As %Status [ Internal, Private, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(r.p,{children:"This callback method is invoked by the %ValidateObject method to provide notification that the current object is being validated."}),"\n",(0,n.jsx)(r.p,{children:"If this method returns an error then %ValidateObject will fail."})]})}function d(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>l,x:()=>a});var n=s(96540);const t={},i=n.createContext(t);function l(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);