"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[51446],{2997:(e,r,s)=>{s.r(r),s.d(r,{contentTitle:()=>a,default:()=>l,frontMatter:()=>t,toc:()=>o});var n=s(74848),i=s(28453);const t={pagination_prev:null,pagination_next:null},a="%SYSTEM.Mirror",o=[{value:"Methods",id:"methods",level:2},{value:"IsMember",id:"ismember",level:3},{value:"IsPrimary",id:"isprimary",level:3},{value:"IsBackup",id:"isbackup",level:3},{value:"IsAsyncMember",id:"isasyncmember",level:3},{value:"MirrorName",id:"mirrorname",level:3},{value:"GetMirrorNames",id:"getmirrornames",level:3},{value:"GetStatus",id:"getstatus",level:3},{value:"GetMemberStatus",id:"getmemberstatus",level:3},{value:"MemberStatusLogicalToDisplay",id:"memberstatuslogicaltodisplay",level:3},{value:"GetMemberType",id:"getmembertype",level:3},{value:"IsNamespaceMirrored",id:"isnamespacemirrored",level:3}];function c(e){const r={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",m:"m",n:"n",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"systemmirror",children:"%SYSTEM.Mirror"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"Class %SYSTEM.Mirror Extends Help [ Abstract, System = 4 ]\n"})}),"\n",(0,n.jsx)(r.p,{children:"This class contains public mirroring methods which are accessable from any namespace. These methods can be invoked either via ##class(%SYSTEM.Mirror).(< methodname >) or via $SYSTEM.Mirror.(< methodname >). Most of the public API for mirroring is in the SYS.Mirror class however that class is only accessable to programs running in %SYS."}),"\n",(0,n.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(r.h3,{id:"ismember",children:"IsMember"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod IsMember() As %Integer\n"})}),"\n",(0,n.jsx)(r.p,{children:"Test whether this system is configured to join a mirror."}),"\n",(0,n.jsx)(r.p,{children:"This method is useful when a site has code that should only be run on the Primary node when the node is a mirror member. This could be used in ^ZSTART or ^ZSTU to skip this code during startup when the node is a mirror member (startup code for mirrors should go in NotifyBecomePrimary^ZMIRROR)."}),"\n",(0,n.jsxs)(r.p,{children:["This is also useful in conjunction with $SYSTEM.Mirror.IsPrimary in other code, such as code that is run periodically via the TaskManager, to skip running the code on non-primary mirror members as in",(0,n.jsx)(r.br,{}),"\nquit:($SYSTEM.Mirror.IsMember() & '$SYSTEM.Mirror.IsPrimary())"]}),"\n",(0,n.jsxs)(r.p,{children:["Return Value:",(0,n.jsx)(r.br,{}),"\n0 - Node is not configured to join a mirror",(0,n.jsx)(r.br,{}),"\n1 - Node is configured as a failover mirror member",(0,n.jsx)(r.br,{}),"\n2 - Node is configured as an async mirror member"]}),"\n",(0,n.jsx)(r.h3,{id:"isprimary",children:"IsPrimary"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod IsPrimary() As %Boolean\n"})}),"\n",(0,n.jsx)(r.p,{children:"Test whether this system is the primary mirror member."}),"\n",(0,n.jsxs)(r.p,{children:["Return Value:",(0,n.jsx)(r.br,{}),"\n1 = node is the primary",(0,n.jsx)(r.br,{}),"\n0 = node is not the primary"]}),"\n",(0,n.jsx)(r.h3,{id:"isbackup",children:"IsBackup"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod IsBackup() As %Boolean\n"})}),"\n",(0,n.jsx)(r.p,{children:"Test whether this system is a backup mirror member."}),"\n",(0,n.jsx)(r.p,{children:"A failover mirror member might report false for both IsPrimary and IsBackup if it is in the process of connecting or has failed to connect for some reason. IsBackup() is only true while the mirror data channel exists."}),"\n",(0,n.jsxs)(r.p,{children:["Return Value:",(0,n.jsx)(r.br,{}),"\nTRUE = node is currently connected to a mirror as a backup",(0,n.jsx)(r.br,{}),"\nFALSE = node is not currently connected to a mirror as a backup"]}),"\n",(0,n.jsx)(r.h3,{id:"isasyncmember",children:"IsAsyncMember"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod IsAsyncMember() As %Boolean\n"})}),"\n",(0,n.jsx)(r.p,{children:"Test whether this system is connected to a primary as an async mirror member."}),"\n",(0,n.jsx)(r.p,{children:"This reports true when this node has a data channel established to a primary mirror member as an async member. The node can be configured as an async member but this will report false if it does not have any data channels established at the time."}),"\n",(0,n.jsxs)(r.p,{children:["Return Value:",(0,n.jsx)(r.br,{}),"\nTRUE = node is currently connected to a mirror as an async member",(0,n.jsx)(r.br,{}),"\nFALSE = node is not currently connected to a mirror as an async member"]}),"\n",(0,n.jsx)(r.h3,{id:"mirrorname",children:"MirrorName"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod MirrorName() As %String\n"})}),"\n",(0,n.jsx)(r.p,{children:"Returns the name of the mirror if the instance is configured as a failover mirror member or NULL if it is not."}),"\n",(0,n.jsx)(r.h3,{id:"getmirrornames",children:"GetMirrorNames"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod GetMirrorNames() As %String\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Returns the names of the mirrors the instance is a member of in ",(0,n.jsx)(r.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$LIST"})," format, or NULL if the instance is not a mirror member."]}),"\n",(0,n.jsx)(r.h3,{id:"getstatus",children:"GetStatus"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod GetStatus(MirrorName As %String = "") As %String\n'})}),"\n",(0,n.jsx)(r.p,{children:"GetStatus([MirrorName]) returns the current status of this mirror member."}),"\n",(0,n.jsx)(r.p,{children:'On failover members, and non-failover members which track only a single mirror, the MirrorName is optional. On instances which track more than one mirror, omitting the MirrorName (or passing "") returns summary information regarding the connection status. Specifying the MirrorName returns the detailed information below regarding that mirror. GetMemberStatus returns the same information in a for more suitable for displaying to a user. The form returned here may be more suitiable for testing against in a program.'}),"\n",(0,n.jsx)(r.p,{children:"Return Value:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"NOTINIT"})," - This instance is not yet initialized or not a member of the specified mirror."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"PRIMARY"})," - This instance is the primary mirror member. Like IsMember this indicates that the node is active as the primary."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"BACKUP"})," - This instance is connected to the primary as a backup member."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"CONNECTED"})," - This instance is an async member currently connected to its server."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"TRANSITION"})," - In a transitional state that will soon change when initialization or another operation completes. This status prompts processes querying a member's status to query again shortly. Failover members remain in this state while retrieving and applying journals when no other failover member is primary. This is an indication that it may become primary upon finishing, so a caller that is waiting for this member to become primary may wish to continue waiting; if there is another failover member that is primary, the state will be ",(0,n.jsx)(r.strong,{children:"SYNCHRONIZING"})," instead. An instance may also enter the transition while stopping or restarting mirroring."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"SYNCHRONIZING"})," - Starting up or reconnecting after being stopped or disconnected, retrieving and applying journal files in order to synchronize the database and journal state before becoming Backup or Connected."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"WAITING"})," - For a failover member this means the member is unable to become the primary or backup for some reason. For an async member this has similar meaning, either there is some trouble preparing to contact the mirror or it failed to establish a connection to the mirror. In all cases a there should be a note in the console log as to the problem and the member should be retrying to detect when the trouble condition is resolved."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"STOPPED"})," - Mirroring is configured but not running and will not start automatically. Either the mirror management interface has been used to stop mirroring or the current state of the system has prevented mirroring from starting (examples include emergency startup mode, insufficient license, mirror service disabled, certain errors during mirroring initialization)."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"CRASHED"})," - The mirror master job for this mirror is no longer running. Restarting InterSystems IRIS is required for mirroring to work again."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsxs)(r.strong,{children:["MULTIASYNC^",(0,n.jsxs)(r.m,{children:["/",(0,n.jsx)(r.n,{})]})]})," - Returned for async members which connect to more than one mirror when the MirrorName argument is omitted. ",(0,n.jsxs)(r.m,{children:[" is the number of mirrors the instance is currently connected to, ",(0,n.jsx)(r.n,{children:" is the number of mirrors the instance is configured to connect to."})]})]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"getmemberstatus",children:"GetMemberStatus"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod GetMemberStatus(MirrorName As %String = "") As %List\n'})}),"\n",(0,n.jsx)(r.p,{children:"GetMemberStatus(MirrorName) returns the current status of this mirror member based on the result from GetStatus. The values returned here are more suitable for displaying to a user."}),"\n",(0,n.jsx)(r.p,{children:'On failover members, and non-failover members which track only a single mirror, the MirrorName is optional. On instances which track more than one mirror, omitting the MirrorName (or passing "") returns summary information regarding the connection status (eg. m/n connected). Specifying the MirrorName returns the detailed information below regarding that mirror.'}),"\n",(0,n.jsxs)(r.p,{children:["Return values are in ",(0,n.jsx)(r.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$LIST"})," format. The 1st item in the list is the current status of the member. In the future some status values may have additional pieces which carry more information."]}),"\n",(0,n.jsx)(r.h3,{id:"memberstatuslogicaltodisplay",children:"MemberStatusLogicalToDisplay"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod MemberStatusLogicalToDisplay(status As %String) As %String [ Internal ]\n"})}),"\n",(0,n.jsx)(r.p,{children:"Used to convert the string returned from $SYSTEM.Mirror.GetStatus() into something more suitable for displaying to the user. The raw string returned from GetMemberStatus is also returned from GetNodeInfo^MIRRORCTL so we need a common subroutine to translate the results."}),"\n",(0,n.jsx)(r.h3,{id:"getmembertype",children:"GetMemberType"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod GetMemberType() As %String\n"})}),"\n",(0,n.jsx)(r.p,{children:"GetMemberType() returns the mirror member type of this instance"}),"\n",(0,n.jsx)(r.h3,{id:"isnamespacemirrored",children:"IsNamespaceMirrored"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod IsNamespaceMirrored(Namespace As %String) As %Integer [ Internal ]\n"})}),"\n",(0,n.jsx)(r.p,{children:"Used to detect whether the default database for globals associated with a given namepspace is mirrored. If namespace is the null string or omitted, information about the current namespace is returned."}),"\n",(0,n.jsx)(r.p,{children:"Returns:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"non-zero - When the default database for globals is mirrored, this is -1 if it is a remote database or the sfn if it is a local database. The sfn is an internal value which identifies a given database and can be passed to other functions to retrieve information about that database. SFN assignments can change across InterSystems IRIS restarts. A non-zero value is returned even if mirroring is currently stopped."}),"\n",(0,n.jsx)(r.li,{children:"zero - The default database for global is not mirrored or there was some trouble executing the operation such as the namespace or the database does not exist."}),"\n"]})]})}function l(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>a,x:()=>o});var n=s(96540);const i={},t=n.createContext(i);function a(e){const r=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);