"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[72984],{84119:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>l,default:()=>d,frontMatter:()=>i,toc:()=>a});var t=n(74848),r=n(28453);const i={pagination_prev:null,pagination_next:null},l="%SQL.HLL",a=[{value:"Parameters",id:"parameters",level:2},{value:"ENCODE",id:"encode",level:3},{value:"SEED",id:"seed",level:3},{value:"%MODULENAME",id:"modulename",level:3},{value:"Properties",id:"properties",level:2},{value:"id",id:"id",level:3},{value:"type",id:"type",level:3},{value:"precision",id:"precision",level:3},{value:"libIndex",id:"libindex",level:3},{value:"Methods",id:"methods",level:2},{value:"getFunctionID",id:"getfunctionid",level:3},{value:"getLibraryID",id:"getlibraryid",level:3},{value:"%OnNew",id:"onnew",level:3},{value:"updateHash",id:"updatehash",level:3},{value:"update",id:"update",level:3},{value:"merge",id:"merge",level:3},{value:"estimate",id:"estimate",level:3},{value:"get",id:"get",level:3},{value:"releaseSketch",id:"releasesketch",level:3},{value:"info",id:"info",level:3},{value:"typeGet",id:"typeget",level:3},{value:"precisionGet",id:"precisionget",level:3},{value:"%OnClose",id:"onclose",level:3},{value:"version",id:"version",level:3}];function c(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"sqlhll",children:"%SQL.HLL"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %SQL.HLL Extends %RegisteredObject\n"})}),"\n",(0,t.jsx)(s.p,{children:"ObjectScript API for building Hyper Log Log estimates of the number of unique elements (cardinality) in a group of data."}),"\n",(0,t.jsxs)(s.p,{children:["The estimates are kept in containers called sketches. The containers are identified by the id of this class.",(0,t.jsx)(s.br,{}),"\nLets assume you have 1 million pieces of data and want to know how many of those pieces are unique:"]}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Use %New to instantiate a new HLL object:"}),"\n",(0,t.jsx)(s.p,{children:"set hll= ##class(%SQL.HLL).%New()"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Feed one million pieces of data into the sketch with update:"}),"\n",(0,t.jsx)(s.p,{children:"for i=1:1:1000000 {do hll.update(i)}"}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Get an estimate of the cardinality by calling estimate"}),"\n",(0,t.jsx)(s.p,{children:"write hll.estimate()"}),"\n",(0,t.jsx)(s.p,{children:"996537"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Notes: We test this class at Intersystems by using murmur hash with a seed of hll.#SEED:",(0,t.jsx)(s.br,{}),"\n$zcrc(yourdata,9,2059198193) or $zcrc(yourdata,9,hll.#SEED)",(0,t.jsx)(s.br,{}),"\nThe underlying library uses 64 bits of this 128 bit hash."]}),"\n",(0,t.jsxs)(s.p,{children:["Estimate Partitioning: pass an existing sketch into %New to initialize its state",(0,t.jsx)(s.br,{}),"\nfrom the standard serialized form (optionally Base64 encoded).",(0,t.jsx)(s.br,{}),"\nTo combine estimates get and merge your sketches, if your data is distributed",(0,t.jsx)(s.br,{}),"\nacross many processes."]}),"\n",(0,t.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(s.h3,{id:"encode",children:"ENCODE"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter ENCODE = 1;\n"})}),"\n",(0,t.jsx)(s.p,{children:"Whether or not to Base64 encode/decode by default during get and %New"}),"\n",(0,t.jsx)(s.h3,{id:"seed",children:"SEED"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter SEED = 2059198193;\n"})}),"\n",(0,t.jsx)(s.p,{children:"Murmur hash seed to use for $zcrc(,9,)"}),"\n",(0,t.jsx)(s.h3,{id:"modulename",children:"%MODULENAME"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter %MODULENAME [ Internal ] = 15;\n"})}),"\n",(0,t.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(s.h3,{id:"id",children:"id"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property id As %Integer [ Internal, ReadOnly ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Internal identifier of allocated memory for this HLL sketch's representation as managed by the callout library"}),"\n",(0,t.jsx)(s.h3,{id:"type",children:"type"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property type As %String [ Calculated, ReadOnly ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Whether the estimator is currently sparse or dense"}),"\n",(0,t.jsx)(s.h3,{id:"precision",children:"precision"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property precision As %Integer [ Calculated, ReadOnly ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Precision of the estimator"}),"\n",(0,t.jsx)(s.h3,{id:"libindex",children:"libIndex"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property libIndex As %Integer [ Internal, MultiDimensional, Private ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Index of $zf(-4) addresses"}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"getfunctionid",children:"getFunctionID"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method getFunctionID(function As %String) As %Integer [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"getlibraryid",children:"getLibraryID"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod getLibraryID() As %Integer [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method %OnNew(sketch As %Binary = "", decode As %Boolean = {..#ENCODE}, Output err As %String = "") As %Status\n'})}),"\n",(0,t.jsx)(s.p,{children:"Creates the memory and sets id for a new sketch. If you pass the sketch parameter, the new sketch will be initialized with the serialized sketch you passed in."}),"\n",(0,t.jsx)(s.h3,{id:"updatehash",children:"updateHash"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method updateHash(hash As %Binary) As %Integer [ Language = cpp ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Updates this sketch with the user supplied hash value",(0,t.jsx)(s.br,{}),"\nUse $zcrc(yourdata,9,2059198193) or $zcrc(yourdata,9,hll.#SEED) to get the hash."]}),"\n",(0,t.jsx)(s.h3,{id:"update",children:"update"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method update(stringdata As %Binary) As %Integer [ Language = cpp ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Updates this sketch with the $zcrc(,9,) hash of the stringdata. Hash done inside API."}),"\n",(0,t.jsx)(s.h3,{id:"merge",children:"merge"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method merge(other As %SQL.HLL, Output err As %String = "") As %Status\n'})}),"\n",(0,t.jsx)(s.p,{children:"Merges the supplied sketch object into the current one. This merges the cardinality estimates."}),"\n",(0,t.jsx)(s.h3,{id:"estimate",children:"estimate"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method estimate(Output err As %String = "") As %Integer\n'})}),"\n",(0,t.jsx)(s.p,{children:"Returns the current unique value estimate (cardinality) for this sketch."}),"\n",(0,t.jsx)(s.h3,{id:"get",children:"get"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method get(encode As %Boolean = {..#ENCODE}, Output err As %String = "") As %Binary\n'})}),"\n",(0,t.jsx)(s.p,{children:"Returns the serialized form of the current sketch so that multiple sketches can be merged. Potentially you might obtain the sketch from a different process."}),"\n",(0,t.jsx)(s.h3,{id:"releasesketch",children:"releaseSketch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method releaseSketch(Output err As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"Frees up the memory associated with this sketch. After this method has been called, subsequent calls for this sketch will yield a  error. This method is called implicitly by the object destructor."}),"\n",(0,t.jsx)(s.h3,{id:"info",children:"info"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method info(Output type As %String, Output precision As %String, Output err As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Helper method to retrieve metadata for the current sketch."}),"\n",(0,t.jsx)(s.h3,{id:"typeget",children:"typeGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method typeGet() As %String [ Internal, ServerOnly = 1 ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"precisionget",children:"precisionGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method precisionGet() As %Integer [ Internal, ServerOnly = 1 ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"version",children:"version"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod version() As %Integer\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the version of the underlying callout library."})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>a});var t=n(96540);const r={},i=t.createContext(r);function l(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);