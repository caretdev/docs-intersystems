"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[24838],{35277:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>i,default:()=>o,frontMatter:()=>s,toc:()=>l});var r=a(74848),n=a(28453);const s={pagination_prev:null,pagination_next:null},i="%iKnow.Source.Converter",l=[{value:"Properties",id:"properties",level:2},{value:"Params",id:"params",level:3},{value:"MetaData",id:"metadata",level:3},{value:"CurrentRef",id:"currentref",level:3},{value:"DomainId",id:"domainid",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"BufferString",id:"bufferstring",level:3},{value:"Convert",id:"convert",level:3},{value:"NextConvertedPart",id:"nextconvertedpart",level:3},{value:"GetMetadataKeys",id:"getmetadatakeys",level:3},{value:"GetMetadataValues",id:"getmetadatavalues",level:3},{value:"ResetMetadataValues",id:"resetmetadatavalues",level:3},{value:"GetCurrentMetadataKeys",id:"getcurrentmetadatakeys",level:3},{value:"SetCurrentMetadataValues",id:"setcurrentmetadatavalues",level:3},{value:"SetContext",id:"setcontext",level:3},{value:"ReportWarning",id:"reportwarning",level:3},{value:"SetParams",id:"setparams",level:3},{value:"Test",id:"test",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"iknowsourceconverter",children:"%iKnow.Source.Converter"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Class %iKnow.Source.Converter Extends %RegisteredObject [ Abstract, Deprecated, System = 4 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"This is the base class for any Converter implementations. Converter classes are used during the processing step to extract textual data and, optionally, source metadata from the context of different file formats. If a converter is defined in the loading process, the processor will call this object to extract the required data before the data is pushed to the iKnow Indexer."}),"\n",(0,r.jsx)(t.p,{children:"Converter objects are handled by the loading framework automatically and custom code should never instantiate a Converter object or call any of its methods directly."}),"\n",(0,r.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(t.h3,{id:"params",children:"Params"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property Params As %String;\n"})}),"\n",(0,r.jsx)(t.h3,{id:"metadata",children:"MetaData"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property MetaData As %List [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"currentref",children:"CurrentRef"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property CurrentRef As %List [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(t.h3,{id:"domainid",children:"DomainId"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property DomainId As %Integer [ Internal, Private ];\n"})}),"\n",(0,r.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(t.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnNew(params As %String) As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"bufferstring",children:"BufferString"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method BufferString(data As %String) As %Status\n"})}),"\n",(0,r.jsx)(t.p,{children:"This method takes the raw input text and buffers it internally in the converter. The text is provided in chunks of 32k. Every custom converter will need to implement this method so that it can take in the raw data."}),"\n",(0,r.jsx)(t.h3,{id:"convert",children:"Convert"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method Convert() As %Status\n"})}),"\n",(0,r.jsx)(t.p,{children:"This method is called after all data has been buffered. In this method the converter will need to parse the raw data and extract/convert it into plain text data. If any metadata is present within the document the converter can extract that metadata here, and provide it to the system. Metadata can be reported by using the SetCurrentMetadataValues function."}),"\n",(0,r.jsx)(t.h3,{id:"nextconvertedpart",children:"NextConvertedPart"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method NextConvertedPart() As %String\n"})}),"\n",(0,r.jsx)(t.p,{children:'When conversion is done, this method will be called to fetch the converted data back from the converter. The method should return the converted text in chuncks of maximum 32k in size. When no more data is available, the method should return the empty string ("") to signal that all data has been transferred.'}),"\n",(0,r.jsx)(t.h3,{id:"getmetadatakeys",children:"GetMetadataKeys"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod GetMetadataKeys(params As %String) As %List\n"})}),"\n",(0,r.jsx)(t.p,{children:"If the Converter extracts metadata, this method should return a list of keys of the metadata fields that are extracted from the contents. The values will be exposed in the Convert method in the same order as they are reported here."}),"\n",(0,r.jsx)(t.h3,{id:"getmetadatavalues",children:"GetMetadataValues"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetMetadataValues() As %String [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"resetmetadatavalues",children:"ResetMetadataValues"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method ResetMetadataValues() As %Status [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"getcurrentmetadatakeys",children:"GetCurrentMetadataKeys"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method GetCurrentMetadataKeys() As %List [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"setcurrentmetadatavalues",children:"SetCurrentMetadataValues"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method SetCurrentMetadataValues(metaValues As %List) As %Status [ Final, Private ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Use this function to report metadata from within the Convert function. The method takes a list of metadata values. The values should be in the same order as the order of the keys as reported by the GetMetadataKeys method."}),"\n",(0,r.jsx)(t.h3,{id:"setcontext",children:"SetContext"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method SetContext(domainId As %Integer, ref As %List) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(t.h3,{id:"reportwarning",children:"ReportWarning"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'Method ReportWarning(ref As %List, message As %String, location As %String = "") As %Status [ Final, Private ]\n'})}),"\n",(0,r.jsx)(t.p,{children:"Utility method to report warnings for the current source, which won't disrupt further processing."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"NOTE"}),": to report errors, simply pass back the error code as the output of Convert or BufferString"]}),"\n",(0,r.jsx)(t.h3,{id:"setparams",children:"SetParams"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method SetParams(params As %String) As %Status\n"})}),"\n",(0,r.jsx)(t.p,{children:"Utility method called by the %iKnow.Source.Processor and %iKnow.Source.Loader logic to register any new or changed parameter values."}),"\n",(0,r.jsx)(t.h3,{id:"test",children:"Test"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod Test(ByRef pInput As %String, pParams As %List = "", Output pSC As %Status) As %String\n'})}),"\n",(0,r.jsx)(t.p,{children:"Utility method to test a converter class. pInput can be either a straight string, or an array of string values that need to be concatenated. The result is a straight string."})]})}function o(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>l});var r=a(96540);const n={},s=r.createContext(n);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);