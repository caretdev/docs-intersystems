"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[33489],{68557:(e,n,s)=>{s.r(n),s.d(n,{contentTitle:()=>a,default:()=>c,frontMatter:()=>i,toc:()=>o});var t=s(74848),r=s(28453);const i={pagination_prev:null,pagination_next:null},a="%iKnow.Source.Converter.Html",o=[{value:"Properties",id:"properties",level:2},{value:"Unescape",id:"unescape",level:3},{value:"SkipTags",id:"skiptags",level:3},{value:"BreakLines",id:"breaklines",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"SetParams",id:"setparams",level:3},{value:"BufferString",id:"bufferstring",level:3},{value:"Convert",id:"convert",level:3},{value:"NextConvertedPart",id:"nextconvertedpart",level:3},{value:"%OnClose",id:"onclose",level:3},{value:"StripHTML",id:"striphtml",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"iknowsourceconverterhtml",children:"%iKnow.Source.Converter.Html"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Class %iKnow.Source.Converter.Html Extends %iKnow.Source.Converter [ Deprecated, System = 4 ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is a sample implementation for %iKnow.Source.Converter, designed to weed out HTML tags from plain text input. Data is first buffered into a process-private global and stripped of HTML in the Convert call."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Converter parameters"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unescape"}),' As %Boolean: set to 1 to unescape HTML special characters such as converting "&" to "&" (default = 1)']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SkipTags"}),' As %String: comma-separated list of tags whose content (text nested between the start and end tag) is to be left out (default = "script,style")']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"BreakLines"})," As %Boolean: whether or not to insert double line breaks for non-inline tags (such as p, br, td, ...), in order for the iKnow engine to split sentences at those positions (default = 1)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(n.h3,{id:"unescape",children:"Unescape"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property Unescape As %Boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,t.jsx)(n.h3,{id:"skiptags",children:"SkipTags"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'Property SkipTags As %String(MAXLEN = "") [ InitialExpression = ",script,style," ];\n'})}),"\n",(0,t.jsx)(n.h3,{id:"breaklines",children:"BreakLines"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Property BreakLines As %Boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method %OnNew(params As %String) As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Make sure the PPG is empty"}),"\n",(0,t.jsx)(n.h3,{id:"setparams",children:"SetParams"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method SetParams(params As %String) As %Status\n"})}),"\n",(0,t.jsx)(n.p,{children:"Utility method called by the %iKnow.Source.Processor and %iKnow.Source.Loader logic to register any new or changed parameter values."}),"\n",(0,t.jsx)(n.h3,{id:"bufferstring",children:"BufferString"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method BufferString(data As %String) As %Status\n"})}),"\n",(0,t.jsx)(n.p,{children:"Buffer data in the PPG"}),"\n",(0,t.jsx)(n.h3,{id:"convert",children:"Convert"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method Convert() As %Status\n"})}),"\n",(0,t.jsx)(n.p,{children:"Loop through buffered data and strip off HTML tags. Reset the pointer in the root PPG node at the end, for NextConverterdPart to know where to start."}),"\n",(0,t.jsx)(n.h3,{id:"nextconvertedpart",children:"NextConvertedPart"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method NextConvertedPart() As %String\n"})}),"\n",(0,t.jsx)(n.p,{children:"Loop through the PPG again and return processed strings."}),"\n",(0,t.jsx)(n.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"striphtml",children:"StripHTML"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod StripHTML(ByRef pText As %String, pUnescape As %Boolean = 1, pSkipTags As %String = "script,style", pBreakLines As %Boolean = 1, Output pSC As %Status) As %String\n'})}),"\n",(0,t.jsx)(n.p,{children:"Utility method to strip HTML tags from the supplied string. See the class documentation for more details on the available parameters."})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(96540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);