"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[66399],{13656:(e,i,n)=>{n.r(i),n.d(i,{contentTitle:()=>t,default:()=>l,frontMatter:()=>r,toc:()=>c});var s=n(74848),o=n(28453);const r={pagination_prev:null,pagination_next:null},t="%SOAP.Configuration",c=[{value:"Parameters",id:"parameters",level:2},{value:"REPORTANYERROR",id:"reportanyerror",level:3},{value:"Methods",id:"methods",level:2},{value:"GetConfigId",id:"getconfigid",level:3},{value:"AssociateConfiguration",id:"associateconfiguration",level:3},{value:"RemoveConfiguration",id:"removeconfiguration",level:3},{value:"GetSOAPClasses",id:"getsoapclasses",level:3},{value:"FindWSDLPolicies",id:"findwsdlpolicies",level:3},{value:"WriteReferencedPolicies",id:"writereferencedpolicies",level:3},{value:"WriteWSDLPolicy",id:"writewsdlpolicy",level:3},{value:"WriteConfiguration",id:"writeconfiguration",level:3},{value:"WriteOneConfig",id:"writeoneconfig",level:3},{value:"WritePolicy",id:"writepolicy",level:3},{value:"WriteMethod",id:"writemethod",level:3},{value:"IsName",id:"isname",level:3},{value:"OnConfigurationCompile",id:"onconfigurationcompile",level:3},{value:"ParseAll",id:"parseall",level:3},{value:"ParseOpen",id:"parseopen",level:3},{value:"ParseConfigurationPolicy",id:"parseconfigurationpolicy",level:3},{value:"ParseConfiguration",id:"parseconfiguration",level:3},{value:"ParseService",id:"parseservice",level:3},{value:"ParseMethod",id:"parsemethod",level:3},{value:"ParseIO",id:"parseio",level:3},{value:"ParseAnalyze",id:"parseanalyze",level:3},{value:"ParsePolicy",id:"parsepolicy",level:3},{value:"WriteAlternative",id:"writealternative",level:3},{value:"AnalyzeAssertion",id:"analyzeassertion",level:3}];function a(e){const i={a:"a",code:"code",configuration:"configuration",h1:"h1",h2:"h2",h3:"h3",header:"header",method:"method",p:"p",pre:"pre",request:"request",response:"response",service:"service",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"soapconfiguration",children:"%SOAP.Configuration"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"Class %SOAP.Configuration Extends %RegisteredObject [ Abstract, System = 3 ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Abstract super class of class to contain configuration of a SOAP web service or web client. %SOAP.Configuration should be subclassed to specify the configuration. No methods or properties of %SOAP.Configuration should be directly accessed."}),"\n",(0,s.jsx)(i.p,{children:"The configuration is specified as XML content in an XData member of a subclass. Each XData member may contain one configuration. However, only one configuration may be specified for each web service or web client class across all %SOAP.Configuration subclasses in a namespace. The format of the configuration as follows:"}),"\n",(0,s.jsxs)(i.p,{children:['<configuration name="xs:NCNAME"? xmlns="',(0,s.jsx)(i.a,{href:"http://www.intersystems.com/configuration%22%3E",children:'http://www.intersystems.com/configuration">'}),"    ",(0,s.jsxs)(i.service,{className:"xs:NCNAME",children:['       ( (<wsp:Policy cfg:wsdlElement="s:string"? ...> ... </wsp:Policy>)        |(<wsp:PolicyReference URI="#policyId cfg:wsdlElement="s:string"?>)) *       ',(0,s.jsxs)(i.method,{name:"xs:NCNAME",children:['          ( (<wsp:Policy cfg:wsdlElement="s:string"? ...> ... </wsp:Policy>)           |(<wsp:PolicyReference URI="#policyId cfg:wsdlElement="s:string"?>)) *          ',(0,s.jsx)(i.request,{children:'             ( (<wsp:Policy cfg:wsdlElement="s:string"? ...> ... </wsp:Policy>)              |(<wsp:PolicyReference URI="#policyId cfg:wsdlElement="s:string"?>)) *          '})," ?          ",(0,s.jsx)(i.response,{children:'             ( (<wsp:Policy cfg:wsdlElement="s:string"? ...> ... </wsp:Policy>)              |(<wsp:PolicyReference URI="#policyId cfg:wsdlElement="s:string"?>)) *          '})," ?       "]})," *    "]})," + ",(0,s.jsx)(i.configuration,{children:" Cardinality is indicated by ? (0 or 1), * (0 or more) and + (1 or more).  The following describes the elements and attributes: /configuration     Identifies a configuration /configuration/@name     Optional name of the configuration.     If specified this name must match the name of the XData block. /configuration/service     Identifies the service that is being configured /configuration/service/@classname     The name of the web service or web client class that is being configured. /configuration/service/wsp:Policy     The optional WS-Policy 1.2 or WS-Policy 1.5 to be applied to the endpoint or service subject for     this web service or client. /configuration/service/wsp:Policy/@cfg:wsdlElement     Specifies WSDL attachment elements: service, port, binding, portType /configuration/service/wsp:PolicyReference     The optional WS-Policy 1.2 or WS-Policy 1.5 to be applied to the endpoint or service subject for     to this method in the SOAP binding for this web service or client.     The policyId is a reference to a local policy defined in a different XData section. /configuration/service/wsp:PolicyReference/@cfg:wsdlElement     Specifies WSDL attachment elements: service, port, binding, portType  /configuration/service/method     The configuration for the operation corresponding to this method in the SOAP binding     for this web service or client. /configuration/service/method/@name     The name of the method /configuration/service/method/wsp:Policy     The optional WS-Policy 1.2 or WS-Policy 1.5 to be applied to the operation corresponding     to this method in the SOAP binding for this web service or client. /configuration/service/method/wsp:Policy/@cfg:wsdlElement     Specifies WSDL attachment elements: binding, portType /configuration/service/method/wsp:PolicyReference     The optional reference WS-Policy 1.2 or WS-Policy 1.5 to be applied to the operation corresponding     to this method in the SOAP binding for this web service or client.     The policyId is a reference to a local policy defined in a different XData section. /configuration/service/method/wsp:PolicyReference/@cfg:wsdlElement     Specifies WSDL attachment elements: binding, portType  /configuration/service/method/request     The configuration for the request message corresponding to this method for     this web service or client. /configuration/service/method/request/wsp:Policy     The optional WS-Policy 1.2 or WS-Policy 1.5 to be applied to the request message corresponding     to this method for this web service or client. /configuration/service/method/request/wsp:Policy/@cfg:wsdlElement     Specifies WSDL attachment elements: binding, portType, message /configuration/service/method/request/wsp:PolicyReference     The optional WS-Policy 1.2 or WS-Policy 1.5 to be applied to the request message corresponding     to this method for this web service or client.     The policyId is a reference to a local policy defined in a different XData section. /configuration/service/method/request/wsp:PolicyReference/@cfg:wsdlElement     Specifies WSDL attachment elements: binding, portType, message  /configuration/service/method/response     The configuration for the response message corresponding to this method for     this web service or client. /configuration/service/method/response/wsp:Policy     The optional WS-Policy 1.2 or WS-Policy 1.5 to be applied to the response message corresponding     to this method for this web service or client. /configuration/service/method/response/wsp:Policy/@cfg:wsdlElement     Specifies WSDL attachment elements: binding, portType, message /configuration/service/method/response/wsp:PolicyReference     The optional WS-Policy 1.2 or WS-Policy 1.5 to be applied to the response message corresponding     to this method for this web service or client.     The policyId is a reference to a local policy defined in a different XData section. /configuration/service/method/response/wsp:PolicyReference/@cfg:wsdlElement     Specifies WSDL attachment elements: binding, portType, message"})]}),"\n",(0,s.jsx)(i.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(i.h3,{id:"reportanyerror",children:"REPORTANYERROR"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"Parameter REPORTANYERROR As BOOLEAN = 1;\n"})}),"\n",(0,s.jsx)(i.p,{children:"If REPORTANYERROR is true (1), Report error when compiling policy if any alternative is invalid. Otherwise only report an error if all aternatives are invalid. In this latter case, we are looking for any alternative to use in a policy supplied by a thrid party."}),"\n",(0,s.jsx)(i.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(i.h3,{id:"getconfigid",children:"GetConfigId"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod GetConfigId(classname As %String) As %String [ CodeMode = expression, Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Get configuration id for specified class"}),"\n",(0,s.jsx)(i.h3,{id:"associateconfiguration",children:"AssociateConfiguration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"Method AssociateConfiguration(soapClassname As %String, configName As %String) [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Associate configuration with SOAP class"}),"\n",(0,s.jsx)(i.h3,{id:"removeconfiguration",children:"RemoveConfiguration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"Method RemoveConfiguration(soapClassname As %String) [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Remove Association of configuration with SOAP class"}),"\n",(0,s.jsx)(i.h3,{id:"getsoapclasses",children:"GetSOAPClasses"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod GetSOAPClasses(configId As %String, Output SOAPClasses As %String) [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Get names of all SOAP classes which are configured in the specified configuration class."}),"\n",(0,s.jsx)(i.h3,{id:"findwsdlpolicies",children:"FindWSDLPolicies"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod FindWSDLPolicies(configId As %String, ByRef methods, Output policyList, Output version) [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Find all policies referenced using Policyreference or included as an inline Policy. by one of the specified methods in the specified configuration. List value is 1 if referenced policy, else 0."}),"\n",(0,s.jsx)(i.h3,{id:"writereferencedpolicies",children:"WriteReferencedPolicies"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod WriteReferencedPolicies(writer As %XML.Writer, ByRef policyList) [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Write all policies referenced using Policyreference by one of the specified methods in the specified configuration"}),"\n",(0,s.jsx)(i.h3,{id:"writewsdlpolicy",children:"WriteWSDLPolicy"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod WriteWSDLPolicy(writer As %XML.Writer, configId As %String, wsdlElement As %String, methodName As %String, reqres As %String) [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Write inline Policy or PolicyReference for specified wsdlElement"}),"\n",(0,s.jsx)(i.h3,{id:"writeconfiguration",children:"WriteConfiguration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:'ClassMethod WriteConfiguration(configName As %String = "", normalized As %Boolean = 0) As %Status [ Internal ]\n'})}),"\n",(0,s.jsx)(i.p,{children:'Write a policy for the configuration class configName is the name of configuration or "" for all configurations in the class.'}),"\n",(0,s.jsx)(i.h3,{id:"writeoneconfig",children:"WriteOneConfig"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod WriteOneConfig(writer As %XML.Writer, configName As %String, normalized As %Boolean) [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Write a single configuration"}),"\n",(0,s.jsx)(i.h3,{id:"writepolicy",children:"WritePolicy"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod WritePolicy(writer As %XML.Writer, policyIndex As %Integer, uri As %String, wsdlElement As %String, internal As %Boolean) [ Internal ]\n"})}),"\n",(0,s.jsx)(i.h3,{id:"writemethod",children:"WriteMethod"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod WriteMethod(writer As %XML.Writer, configName As %String, methodName As %String, normalized As %Boolean) [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Write a method element"}),"\n",(0,s.jsx)(i.h3,{id:"isname",children:"IsName"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod IsName(name As %String) As %Boolean [ CodeMode = expression, Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Return true if this is a name rather than a defined type"}),"\n",(0,s.jsx)(i.h3,{id:"onconfigurationcompile",children:"OnConfigurationCompile"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod OnConfigurationCompile() [ CodeMode = objectgenerator, Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Parse all configurations defined in specified class."}),"\n",(0,s.jsx)(i.h3,{id:"parseall",children:"ParseAll"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod ParseAll(classname As %String, compiledclass As %Dictionary.CompiledClass) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Parse all configurations defined in specified class."}),"\n",(0,s.jsx)(i.h3,{id:"parseopen",children:"ParseOpen"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod ParseOpen(stream As %GlobalCharacterStream, configName As %String, Output reader As %XML.Reader, Output root As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Parse the XML content of the XDATA block to determine if valid Policy or configuration"}),"\n",(0,s.jsx)(i.h3,{id:"parseconfigurationpolicy",children:"ParseConfigurationPolicy"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod ParseConfigurationPolicy(reader As %XML.Reader, configName As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Parse a wsp:Policy within a configuration file which is defined as an XData block."}),"\n",(0,s.jsx)(i.h3,{id:"parseconfiguration",children:"ParseConfiguration"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod ParseConfiguration(reader As %XML.Reader, configName As %String) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Parse a SOAP configuration which is defined as an XData block."}),"\n",(0,s.jsx)(i.h3,{id:"parseservice",children:"ParseService"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod ParseService(node As %XML.Node, configName As %String) [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Parse the service configuration"}),"\n",(0,s.jsx)(i.h3,{id:"parsemethod",children:"ParseMethod"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod ParseMethod(node As %XML.Node, configName As %String, servicePolicy As %SOAP.Policy) [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Parse the method element of the configuration"}),"\n",(0,s.jsx)(i.h3,{id:"parseio",children:"ParseIO"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod ParseIO(node As %XML.Node, configName As %String, kind As %String, methodName As %String, methodPolicy As %SOAP.Policy, methodPolicyIndex As %Integer) [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Parse the request or response element of the configuration"}),"\n",(0,s.jsx)(i.h3,{id:"parseanalyze",children:"ParseAnalyze"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod ParseAnalyze(policy As %SOAP.Policy, policyIndex As %Integer) [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Analyze a policy"}),"\n",(0,s.jsx)(i.h3,{id:"parsepolicy",children:"ParsePolicy"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod ParsePolicy(node As %XML.Node, configName As %String, kind As %String, validWSDL As %List, inline As %Boolean, Output policyIndex As %Integer, basePolicy As %SOAP.Policy, Output normalizedPolicyIndex As %Integer) As %SOAP.Policy [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Parse a wsp:Policy element in the configuration"}),"\n",(0,s.jsx)(i.h3,{id:"writealternative",children:"WriteAlternative"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:'ClassMethod WriteAlternative(ByRef alternative, indent As %String = "   ") As %String [ Internal ]\n'})}),"\n",(0,s.jsx)(i.p,{children:"$$$SOAPPolicy(configClass,$$$SOAPConfigPolicyId,policyId)=policyIndex $$$SOAPPolicy(configClass,$$$SOAPConfigPolicyName,policyName)=policyIndex $$$SOAPPolicy(configClass,$$$SOAPConfigPolicyVersion)=policyVersion Write out configuration policy -- should never be called."}),"\n",(0,s.jsx)(i.h3,{id:"analyzeassertion",children:"AnalyzeAssertion"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-objectscript-class",children:"ClassMethod AnalyzeAssertion(policy As %SOAP.Policy, nodeId As %Integer, ByRef alternative) As %Status [ Internal ]\n"})}),"\n",(0,s.jsx)(i.p,{children:"Analyze ISC configuraation assertion -- should never be called."})]})}function l(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>c});var s=n(96540);const o={},r=s.createContext(o);function t(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);