"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[15898],{38602:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>o,default:()=>l,frontMatter:()=>a,toc:()=>i});var s=r(74848),n=r(28453);const a={pagination_prev:null,pagination_next:null},o="%SQL.CustomQuery",i=[{value:"Parameters",id:"parameters",level:2},{value:"SQLNAME",id:"sqlname",level:3},{value:"Methods",id:"methods",level:2},{value:"%OpenCursor",id:"opencursor",level:3},{value:"%FetchCursor",id:"fetchcursor",level:3},{value:"%CloseCursor",id:"closecursor",level:3},{value:"%OnNew",id:"onnew",level:3},{value:"%Next",id:"next",level:3},{value:"%OnClose",id:"onclose",level:3},{value:"%Get",id:"get",level:3},{value:"%GetData",id:"getdata",level:3},{value:"%SendODBC",id:"sendodbc",level:3},{value:"%SendObjects",id:"sendobjects",level:3},{value:"%GetSerializedMetadata",id:"getserializedmetadata",level:3}];function c(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"sqlcustomquery",children:"%SQL.CustomQuery"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %SQL.CustomQuery Extends %SQL.IResultSet [ Abstract, System = 4 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%SQL.CustomQuery is the root class for custom query function classes. You can extend this class to implement SQL Table-Valued Functions that can be used in SQL statements. Custom query functions are similar to queries with TYPE = %Library.Query. Subclassing %SQL.CustomQuery has a few advantages over custom class queries. The result set returned by executing, either directly or as a function in an SQL statement, is more efficient when interacting with the server. The metadata for a result set is constructed from the class definition so there is never a need to explicitly define a ROWSPEC."}),"\n",(0,s.jsx)(t.p,{children:"When subclassing %SQL.CustomQuery, there are a few steps that you must follow in order to produce a working table-valued function."}),"\n",(0,s.jsxs)(t.p,{children:["1. Override the SQLNAME parameter to assign a name to the custom function; 2. Define properties that correspond to each column in the result row. These properties correspond to the columns that form the ROWTYPE of the table function. Column numbers are assigned in the order in which the properties appear in the class definition. If the property type is swizzleable then any direct access to the property will trigger swizzling. %Get, %GetData and the various %Send methods will not swizzle the object.",(0,s.jsx)(t.br,{}),"\nNote: Properties inherited from a system superclass are not considered to be part of the row."]}),"\n",(0,s.jsx)(t.p,{children:"3. Define any private properties needed to maintain the current state of the cursor. Any property defined as PRIVATE is automatically excluded from the ROWTYPE."}),"\n",(0,s.jsx)(t.p,{children:"4. Override and implement %OpenCursor. Formal arguments defined by %OpenCursor become the formal arguments for the projected table-value function. Code in this method initializes the cursor and prepares the data to be fetched."}),"\n",(0,s.jsx)(t.p,{children:"5. Override and implement %FetchCursor. Code in this method retrieves the next row and sets the properties corresponding to columns in the row to the appropriate value. If no row is found this method returns 0, otherwise it returns 1. This method must also maintain the value of the %ROWCOUNT property."}),"\n",(0,s.jsx)(t.p,{children:"5. Override and implement %CloseCursor. This is only necessary if you need to perform some clean up. %CloseCursor is called when the object is destructed."}),"\n",(0,s.jsx)(t.p,{children:"The following class definition is an example of a simple custom query. This example accepts a JSON array and presents the name and city properties from each element of the array as a row."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'Class User.TVF Extends %SQL.CustomQuery \t{  \tParameter SQLNAME = "custom_tvf";  \tProperty name As %String;  \tProperty city As %String;  \tProperty sourceData As %Library.DynamicArray [ Private ];  \tProperty iterator As %Iterator.Array [ Private ];  \tMethod %OpenCursor(sourceData As %String(MAXLEN="")) [ Private ] \t{ \t\tif (\'$isObject(sourceData)) || (\'sourceData.%IsA("%Library.DynamicAbstractObject")) { \t\t\tset ..sourceData = ##class(%Library.DynamicAbstractObject).%FromJSON(sourceData) \t\t} else { \t\t\tset ..sourceData = sourceData \t\t} \t\tset ..iterator = ..sourceData.%GetIterator() \t}  \tMethod %CloseCursor() [ PlaceAfter = %Next, Private ] \t{ \t\tset ..iterator = "" \t\tset ..sourceData = "" \t}  \tMethod %FetchCursor(ByRef sc As %Library.Status = {$$$OK}) As %Library.Integer \t{ \t\tif ($isObject(..iterator)) && (..iterator.%GetNext(.key,.value)) { \t\t\tset ..name = value.name \t\t\tset ..city = value.city \t\t} else { \t\t\tset ..iterator = "" \t\t\treturn 0 \t\t} \t\treturn 1 \t}  \t} \n'})}),"\n",(0,s.jsx)(t.p,{children:"The above example can be referenced in the from clause of a SELECT statement."}),"\n",(0,s.jsx)(t.p,{children:'select * from custom_tvf(\'[{"name":"Hermann, George","city":"New York, NY"},{"name":"Orr, Bobby","city":"Boston, MA"}]\') order by city'}),"\n",(0,s.jsx)(t.p,{children:"| name               | city         |  | Orr, Bobby | Boston, MA |\n| ------------------ | ------------ |  | ---------- | ---------- |\n| Hermann, George    | New York, NY |  |            |            |\n| 2 Rows(s) Affected |              |  |            |            |"}),"\n",(0,s.jsx)(t.p,{children:"A custom query function can also be instantiated directly and iterated over using the result set interface. The first argument passed to %New() is SELECTMODE, as is defined by the %SQL.IResultSet interface. Subsequent arguments are as defined by the %OpenCursor."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'USER>set cursor = ##class(TVF).%New(,[{"name":"Hermann, George","city":"New York, NY"},{"name":"Orr, Bobby","city":"Boston, MA"}])  \tUSER>write cursor.%Next() \t1 \tUSER>write cursor.name \tHermann, George \tUSER>write cursor.city \tNew York, NY \tUSER>write cursor.%SQLCODE \t0 \tUSER>write cursor.%Next() \t1 \tUSER>write cursor.name \tOrr, Bobby \tUSER>write cursor.%Next() \t0 \tUSER>write cursor.%SQLCODE \t100 \n'})}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(t.h3,{id:"sqlname",children:"SQLNAME"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter SQLNAME As String = "{..#SQLNAME}";\n'})}),"\n",(0,s.jsx)(t.p,{children:"Override this parameter to define the SQLNAME of the query procedure. If this value is not specified then a default procedure name will be generated using the standard procedure naming convention."}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"opencursor",children:"%OpenCursor"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OpenCursor() [ Private ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Implement code to open the cursor here. You may also define new formal arguments. Any arguments defined will be automatically added to the table-valued function project to SQL and to the constructor interface. Callers can specify actual arguments in the call to %New() when invoking the function from an SQL statement."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'\tmethod %OpenCursor(pBeginDate as %Date = "", pEndDate as %Date = "") as %Library.Status [ private ] \t\t{ \t\t\tset ..BeginDate = pBeginDate \t\t\tset ..EndDate = $Select(pEndDate\'="":pEndDate,1:$H) \t\t} \n'})}),"\n",(0,s.jsx)(t.p,{children:"Given the above example implementation of %OpenCursor, the following is a valid call to instantiate a new instance."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"\tset tResult = ##class(MyCustom.Query).%New(,$H-30,$H-10) \n"})}),"\n",(0,s.jsx)(t.p,{children:"To report an error set %SQLCODE and %Message to appropriate values. To report no rows found, set %SQLCODE to 100. Errors are indicated by negative ..%SQLCODE values. It is also acceptable to simply throw an exception and the system will assign appropriate values to %SQLCODE and %Message."}),"\n",(0,s.jsx)(t.h3,{id:"fetchcursor",children:"%FetchCursor"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %FetchCursor() As %Library.Integer\n"})}),"\n",(0,s.jsx)(t.p,{children:"Advance the cursor to the next row. If the cursor is found to be at the end of the data then return 0, otherwise populate the row properties and return 1."}),"\n",(0,s.jsx)(t.p,{children:"To report an error set %SQLCODE and %Message to appropriate values. It is also acceptable to simply throw an exception and the system will assign appropriate values to %SQLCODE and %Message."}),"\n",(0,s.jsx)(t.h3,{id:"closecursor",children:"%CloseCursor"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %CloseCursor() [ PlaceAfter = %Next, Private ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Implement %CloseCursor to clean up any temporary structures that are used by the custom query such as temporary globals, etc. This method is invoked by the object destructor."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"\tmethod %CloseCursor() [ private ] \t\t{ \t\t\t&sql(close myCursor) \t\t\t\tkill ^||mytempglobal \t\t\tquit $$$OK \t\t} \n"})}),"\n",(0,s.jsx)(t.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnNew(pSelectMode As %Integer = {$zu(115,5)}) As %Library.Status [ CodeMode = generator, GenerateAfter = %OpenCursor, Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%OnNew is called by the constructor. It supports a variable number of arguments passed by value. The first argument is the runtime SELECTMODE value and it defaults to $system.SQL.GetSelectMode(). This method is generated as final. It invokes the user implemented %OpenCursor method. Any formal arguments defined by the %OpenCursor method will be added to the formal spec of %OnNew. Actual values for these arguments can be specified when calling %New(). Errors are reported by setting ..%SQLCODE, ..%Message. Do not override this method."}),"\n",(0,s.jsx)(t.h3,{id:"next",children:"%Next"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Next(ByRef sc As %Library.Status = {$$$OK}) As %Library.Integer [ Final, Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Advance the cursor to the next row. Returns 0 if the cursor is at the end of the data. An optional argument contains a %Library.Status value on return. This %Status value indicates success or failure of the %Next call. %SQLCODE is also set by %Next. This implementation is overridden by classes that implement the result set interface. Do not override this method."}),"\n",(0,s.jsx)(t.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Library.Status [ Final, Internal, Private, ProcedureBlock = 1, PublicList = SQLCODE, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"This method is invoked by the %Close method to provide notification that the current object is being closed. It is invoked automatically when the instance is destructed."}),"\n",(0,s.jsx)(t.p,{children:"The return value of this method is ignored."}),"\n",(0,s.jsx)(t.h3,{id:"get",children:"%Get"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %Get(colname As %String = "") As %Library.String [ CodeMode = generator ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Returns the value of the column with the name colname in the current row of the result set."}),"\n",(0,s.jsx)(t.p,{children:"If colname is not a valid column name, this method throws a  error."}),"\n",(0,s.jsx)(t.h3,{id:"getdata",children:"%GetData"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetData(colnbr As %Integer = 0) As %Library.String [ CodeMode = generator, ProcedureBlock = 0 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%GetData() Returns the value of the column referenced by colnbr. Object values are not swizzled automatically."}),"\n",(0,s.jsx)(t.h3,{id:"sendodbc",children:"%SendODBC"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SendODBC() As %Library.Integer [ CodeMode = generator, ProcedureBlock = 0 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Fetch and send a series of rows for the ODBC/JDBC server. For internal use only."}),"\n",(0,s.jsx)(t.h3,{id:"sendobjects",children:"%SendObjects"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SendObjects() As %Library.Integer [ CodeMode = generator, Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Fetch and send a series of rows for the ODBC/JDBC server. For internal use only."}),"\n",(0,s.jsx)(t.h3,{id:"getserializedmetadata",children:"%GetSerializedMetadata"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %GetSerializedMetadata(ByRef pMetadata As %RawString = "") As %Status [ CodeMode = generator, Internal ]\n'})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"DO NOT USE DIRECTLY"})," - use %GetClientMetadata instead Builds the serialized metadata for this result set."]})]})}function l(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>i});var s=r(96540);const n={},a=s.createContext(n);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);