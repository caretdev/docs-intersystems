"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[1418],{72209:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>l,default:()=>c,frontMatter:()=>i,toc:()=>a});var r=n(74848),t=n(28453);const i={pagination_prev:null,pagination_next:null},l="%iKnow.Source.File.Lister",a=[{value:"Properties",id:"properties",level:2},{value:"PathSeparator",id:"pathseparator",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"ExpandList",id:"expandlist",level:3},{value:"SplitFullRef",id:"splitfullref",level:3},{value:"BuildFullRef",id:"buildfullref",level:3},{value:"GetAlias",id:"getalias",level:3},{value:"FormatParams",id:"formatparams",level:3},{value:"TestParams",id:"testparams",level:3},{value:"BuildSimpleRefFromComposite",id:"buildsimplereffromcomposite",level:3}];function o(e){const s={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"iknowsourcefilelister",children:"%iKnow.Source.File.Lister"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Class %iKnow.Source.File.Lister Extends %iKnow.Source.Lister [ Deprecated, System = 4 ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Lister implementation for scanning a filesystem."}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Lister Parameters"})," to be supplied to AddListToBatch and ProcessList calls:"]}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"path"})," As %String - the directory where to look for files"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"extensions"})," As %List - the extensions (without leading dot) to load"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"recursive"})," As %Boolean - whether or not to recurse into subdirectories"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"filter"})," As %String - a code fragment that can be called through $xecute to evaluate a filename and directory. For example:"]}),"\n"]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.p,{children:'"(fn,dir) quit \'$find(fn,""draft"")"'}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"External ID structure:"})," [GroupName][LocalRef]"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"GroupName = full path to the directory containing the file"}),"\n",(0,r.jsx)(s.li,{children:"LocalRef = file name, including extension"}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Lister alias:"}),' "FILE"']}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Default Processor:"})," %iKnow.Source.File.Processor"]}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.h3,{id:"pathseparator",children:"PathSeparator"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property PathSeparator As %String [ Private ];\n"})}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnNew(domId As %Integer) As %Status [ Private, ServerOnly = 1 ]\n"})}),"\n",(0,r.jsx)(s.h3,{id:"expandlist",children:"ExpandList"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method ExpandList(listparams As %List) As %Status\n"})}),"\n",(0,r.jsx)(s.p,{children:"Scans through the directory as dictated by the Lister Parameters. No metadata is gathered along the way."}),"\n",(0,r.jsx)(s.p,{children:"See also ExpandList in %iKnow.Source.Lister."}),"\n",(0,r.jsx)(s.h3,{id:"splitfullref",children:"SplitFullRef"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SplitFullRef(domainId As %Integer, fullRef As %String, Output groupName As %String, Output localRef As %String) As %Status [ Private ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Splits the Full Reference into a Group Name and Local Reference based on their path."}),"\n",(0,r.jsx)(s.p,{children:"See also SplitFullRef in %iKnow.Source.Lister."}),"\n",(0,r.jsx)(s.h3,{id:"buildfullref",children:"BuildFullRef"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod BuildFullRef(domainId As %Integer, groupName As %String, localRef As %String) As %String [ Private ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Appends the file name (local reference) directly to the directory (group name) to form the Full Reference."}),"\n",(0,r.jsx)(s.p,{children:"See also BuildFullRef in %iKnow.Source.Lister."}),"\n",(0,r.jsx)(s.h3,{id:"getalias",children:"GetAlias"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetAlias() As %String\n"})}),"\n",(0,r.jsx)(s.p,{children:'Lister alias: "FILE"'}),"\n",(0,r.jsx)(s.h3,{id:"formatparams",children:"FormatParams"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod FormatParams(listerParams As %List) As %String\n"})}),"\n",(0,r.jsx)(s.h3,{id:"testparams",children:"TestParams"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method TestParams(listerParams...) As %Status\n"})}),"\n",(0,r.jsx)(s.p,{children:"Tests performed by this Lister:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"path: checks whether this is a valid string (no check on whether this is a valid path!)"}),"\n",(0,r.jsx)(s.li,{children:"extensions: no checks"}),"\n",(0,r.jsx)(s.li,{children:"recursive: no checks"}),"\n",(0,r.jsx)(s.li,{children:"filter: if nonempty, checks whether this is a valid expression for $xecute() with two parameters"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"buildsimplereffromcomposite",children:"BuildSimpleRefFromComposite"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod BuildSimpleRefFromComposite(domainId As %Integer, ref As %List, Output sc As %Status = {$$$OK}) As %String [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Builds a reference for use in $$$IKPSIMPLEEXTIDS domains. For File Listers, this defaults to the FULL reference rather than just the Local Ref (overall default)"})]})}function c(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>a});var r=n(96540);const t={},i=r.createContext(t);function l(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);