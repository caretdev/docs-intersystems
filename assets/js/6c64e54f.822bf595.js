"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[32260],{92503:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>o,default:()=>c,frontMatter:()=>r,toc:()=>i});var n=t(74848),a=t(28453);const r={pagination_prev:null,pagination_next:null},o="SYS.DataCheck.System",i=[{value:"Parameters",id:"parameters",level:2},{value:"ProtocolVersion",id:"protocolversion",level:3},{value:"StorageVersion",id:"storageversion",level:3},{value:"Properties",id:"properties",level:2},{value:"JobType",id:"jobtype",level:3},{value:"Debug",id:"debug",level:3},{value:"PeerProtocolVersion",id:"peerprotocolversion",level:3},{value:"Name",id:"name",level:3},{value:"StorageVersion",id:"storageversion-1",level:3},{value:"MirrorName",id:"mirrorname",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnNew",id:"onnew",level:3},{value:"%OnDelete",id:"ondelete",level:3},{value:"SpawnJob",id:"spawnjob",level:3},{value:"JobEntry",id:"jobentry",level:3},{value:"JobMain",id:"jobmain",level:3},{value:"InitMessageQueue",id:"initmessagequeue",level:3},{value:"DeleteMessageQueue",id:"deletemessagequeue",level:3},{value:"AssertMessageQueue",id:"assertmessagequeue",level:3},{value:"EnqueueMessage",id:"enqueuemessage",level:3},{value:"DequeueMessage",id:"dequeuemessage",level:3},{value:"LockJob",id:"lockjob",level:3},{value:"UnlockJob",id:"unlockjob",level:3},{value:"LockJobType",id:"lockjobtype",level:3},{value:"UnlockJobType",id:"unlockjobtype",level:3},{value:"LockSystem",id:"locksystem",level:3},{value:"UnlockSystem",id:"unlocksystem",level:3},{value:"WaitForJobs",id:"waitforjobs",level:3},{value:"SetState",id:"setstate",level:3},{value:"GetState",id:"getstate",level:3},{value:"GetStateBySystem",id:"getstatebysystem",level:3},{value:"GetWorkerMetrics",id:"getworkermetrics",level:3},{value:"Log",id:"log",level:3},{value:"NewNumWorkers",id:"newnumworkers",level:3},{value:"RecvMessage",id:"recvmessage",level:3},{value:"SendMessage",id:"sendmessage",level:3},{value:"SendMirrorInfoMessage",id:"sendmirrorinfomessage",level:3},{value:"Worker",id:"worker",level:3}];function l(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"sysdatachecksystem",children:"SYS.DataCheck.System"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class SYS.DataCheck.System Extends %Persistent [ Abstract ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"DataCheck Overview"}),"\n",(0,n.jsx)(s.p,{children:"The DataCheck system provides a mechanism to compare the state of data on two systems and determine whether they are the matched or discrepant. It is assumed that the global states on both systems may be in transition and the system provides a mechansim to recheck discrepant ranges."}),"\n",(0,n.jsx)(s.p,{children:"One of the two systems must be defined as the destination. All control and output from the system is provided through the destination system. Typically, the destination system is the destination of shadowing or a non-primary mirror member, while the source system is the source of shadowing or another mirror member. See Destination for detail on creating and configuring a DataCheck system."}),"\n",(0,n.jsx)(s.p,{children:"The system operates in units called queries. The query specifies a database, an initial global reference, a target global reference, and a number of nodes. The query is sent by the destination system to the source system. Both systems calculate an answer by traversing N global nodes starting with the initial global reference, and hashing the keys/value pairs. The destination compares the query answers from both systems and records the results in a set of RangeList objects."}),"\n",(0,n.jsx)(s.p,{children:"Queries are created automatically on the destination system based on its settings. The destination system has a Workflow object to specify a strategy for checking globals. The Workflow consists of a number of phases to begin a check, recheck discrepancies, etc. The settings that define what globals to check are stored on the Destination in the RunParameters object."}),"\n",(0,n.jsx)(s.p,{children:"This class, System, is an abstract class containing elements common to both Destination and Source systems."}),"\n",(0,n.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(s.h3,{id:"protocolversion",children:"ProtocolVersion"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter ProtocolVersion [ Internal ] = 1.2;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Version of the DataCheck protocol"}),"\n",(0,n.jsx)(s.h3,{id:"storageversion",children:"StorageVersion"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter StorageVersion [ Internal ] = 1.0;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Version for the DataCheck persistent classes"}),"\n",(0,n.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(s.h3,{id:"jobtype",children:"JobType"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property JobType As %String [ InitialExpression = {$$$JobTypeUser}, Private, Transient ];\n"})}),"\n",(0,n.jsx)(s.p,{children:'Type of system job or "User" if not a system job'}),"\n",(0,n.jsx)(s.h3,{id:"debug",children:"Debug"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Debug As %Integer [ InitialExpression = 0, Internal, Private ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"Static parameter loaded by configuration on the destination If true, detailed messages will by logged to the messages.log"}),"\n",(0,n.jsx)(s.h3,{id:"peerprotocolversion",children:"PeerProtocolVersion"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property PeerProtocolVersion As %String [ Internal, Private ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"Protocol version used by our peer"}),"\n",(0,n.jsx)(s.h3,{id:"name",children:"Name"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Name As SystemName [ ReadOnly ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"Unique name of the system"}),"\n",(0,n.jsx)(s.h3,{id:"storageversion-1",children:"StorageVersion"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property StorageVersion As %String [ Internal ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"Versioning for storage definitions of the DataCheck persistent classes"}),"\n",(0,n.jsx)(s.h3,{id:"mirrorname",children:"MirrorName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property MirrorName As %String [ ReadOnly ];\n"})}),"\n",(0,n.jsx)(s.p,{children:"Name of the mirror that this system is checking or null if not mirrorized"}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Method %OnNew(name As %String, mirrorname As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,n.jsx)(s.h3,{id:"ondelete",children:"%OnDelete"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %OnDelete(oid As %ObjectIdentity) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"spawnjob",children:"SpawnJob"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method SpawnJob(jobtype As %String, batch As %Boolean = 1) [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"jobentry",children:"JobEntry"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod JobEntry(name As %String, jobtype As %String, batch As %Boolean = 1, notifypid As %Integer = 0) [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Become a daemon job of the specified type for the specified system name."}),"\n",(0,n.jsx)(s.h3,{id:"jobmain",children:"JobMain"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method JobMain(jobtype As %String, batch As %Boolean = 1, notifypid As %Integer = 0) [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This is the instance method called by the JobEntry() method and by Source:StartJobFromServer. It sets the process up to act as a DataCheck daemon job of the specified type. This method provides the base level of exception handling for all jobs. Any unexpected exceptions caught by this method will attempt to force all other jobs to stop by deleting the message queues. This method always halts, never returns."}),"\n",(0,n.jsx)(s.h3,{id:"initmessagequeue",children:"InitMessageQueue"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method InitMessageQueue(qname As %String) [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Initialize a message queue for this system with the specified queue name"}),"\n",(0,n.jsx)(s.h3,{id:"deletemessagequeue",children:"DeleteMessageQueue"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method DeleteMessageQueue(qname As %String) [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Delete a message queue for this system with the specified queue name"}),"\n",(0,n.jsx)(s.h3,{id:"assertmessagequeue",children:"AssertMessageQueue"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method AssertMessageQueue(qname As %String) [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Throw a  error in the specified queue name doesn't exist for this system"}),"\n",(0,n.jsx)(s.h3,{id:"enqueuemessage",children:"EnqueueMessage"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method EnqueueMessage(qname As %String, message As %String) [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Enqueue a message on the specified message queue for this system"}),"\n",(0,n.jsx)(s.h3,{id:"dequeuemessage",children:"DequeueMessage"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method DequeueMessage(qname As %String, timeout As %Integer = -1) As %List [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Dequeue a message from the specified message queue for this system. Timeout in seconds or -1 for unlimited"}),"\n",(0,n.jsx)(s.h3,{id:"lockjob",children:"LockJob"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method LockJob(timeout As %Integer = -1) As %Boolean [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Called by JobMain to take out a lock associated with this job's JobType stored in the transient JobType property. Each DataCheck job holds this lock for the duration of its lifetime."}),"\n",(0,n.jsx)(s.h3,{id:"unlockjob",children:"UnlockJob"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method UnlockJob() [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Removes the lock associated with this job's job type."}),"\n",(0,n.jsx)(s.h3,{id:"lockjobtype",children:"LockJobType"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method LockJobType(jobtype As %Integer, shared As %Boolean, timeout As %Integer = -1) As %Boolean [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Obtains a lock on the specified job type. This method is used to wait for a particular job type to exit."}),"\n",(0,n.jsx)(s.h3,{id:"unlockjobtype",children:"UnlockJobType"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method UnlockJobType(jobtype As %Integer, shared As %Boolean) [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Removes a lock on the specified job type."}),"\n",(0,n.jsx)(s.h3,{id:"locksystem",children:"LockSystem"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method LockSystem(timeout As %Integer = -1) As %Boolean [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Obtains a lock on this system. This lock will only be granted when the system has stopped and all DataCheck daemons have exited. This lock will prevent the system from being restarted. This lock only conflicts with the lock held by running DataCheck daemons and the lock required to start the system; it does not conflict with the lock used by the object concurrency control for this object itself."}),"\n",(0,n.jsx)(s.p,{children:"Input Parameters: timeout: Time to wait in seconds. -1 (default) waits forever  Returns: true if successful, false otherwise"}),"\n",(0,n.jsx)(s.h3,{id:"unlocksystem",children:"UnlockSystem"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method UnlockSystem() [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Releases the lock acquired by LockSystem."}),"\n",(0,n.jsx)(s.h3,{id:"waitforjobs",children:"WaitForJobs"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method WaitForJobs(timeout As %Integer = -1) As %Boolean [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Waits for all other DataCheck daemon jobs to exit (release their running locks). This is used by the manager jobs to ensure that we don't more than one instance of any system running at the same time."}),"\n",(0,n.jsx)(s.h3,{id:"setstate",children:"SetState"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method SetState(state As %String, reason As StateReason = {$$$StateReasonUnknown}) [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Set the running state and reason"}),"\n",(0,n.jsx)(s.h3,{id:"getstate",children:"GetState"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetState(Output reason As StateReason) As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns the current running state of the system. Values are constants, defined for convenience in %syDataCheck.inc"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:'"Starting" ($$$StateStarting) - System is in the initial phases of startup'}),"\n",(0,n.jsx)(s.li,{children:'"Stopping" ($$$StateStopping) - System is stopping and will not process any more queries but may not be completely stopped'}),"\n",(0,n.jsx)(s.li,{children:'"Stopped" ($$$StateStopped) - System is stopped'}),"\n",(0,n.jsx)(s.li,{children:'"Connecting" ($$$StateConnecting) - (destination only) System is attempting to establish a connection to the source'}),"\n",(0,n.jsx)(s.li,{children:'"Running" ($$$StateRunning) - System is in the normal running state'}),"\n",(0,n.jsxs)(s.li,{children:['"Waiting" ($$$StateWaiting) - System is waiting for a condition in order to resume the check',(0,n.jsx)(s.br,{}),"\nReturns a reason code by reference to describe why the system is in its current state (particularly the Stopping and Stopped states on the destination system). Reason codes are not provided for all states. The reason will be $$$ReasonUnknown if a specific reason is not provided or not available.",(0,n.jsx)(s.br,{}),"\nThe reason code on the destination of DataCheck can be used to determine whether the system has stopped due to a Workflow stop phase, a user-requested stop or an error. Upon successful return from the Start method on the destination system, its state will be changed to $$$StateStarting. On any subsequent call to this method, the caller can determine whether the system has reached a workflow stop phase by checking the reason code for $$$StateReasonWorkflowStop. While there is no guarantee that a reason will be provided when the system is stopped in all cases, it is guaranteed that if the system stops due to a workflow stop phase, the reason will be set to $$$StateReasonWorkflowStop.",(0,n.jsx)(s.br,{}),"\nSee StateReason for possible reason codes."]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"getstatebysystem",children:"GetStateBySystem"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetStateBySystem(systemname As SystemName, Output reason As StateReason) As %String [ SqlProc ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns current running state of specified system or null on error. Possible state values returned are identical to GetState()"}),"\n",(0,n.jsx)(s.h3,{id:"getworkermetrics",children:"GetWorkerMetrics"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetWorkerMetrics() As %String [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns a string of performance metrics aggregated for all worker jobs."}),"\n",(0,n.jsx)(s.h3,{id:"log",children:"Log"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Log(type As %String, msg As %String) [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Log a message to the messages.log"}),"\n",(0,n.jsx)(s.h3,{id:"newnumworkers",children:"NewNumWorkers"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method NewNumWorkers(current As %Integer, new As %Integer, curbatch As %Boolean, newbatch As %Boolean) [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Called by the manager jobs to dynamically change the number of workers and/or their batch flag."}),"\n",(0,n.jsx)(s.h3,{id:"recvmessage",children:"RecvMessage"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RecvMessage(timeout As %Integer = -1) [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Receive a message on the current device and return it. Timeout in seconds, or -1 for untimed"}),"\n",(0,n.jsx)(s.h3,{id:"sendmessage",children:"SendMessage"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SendMessage(msg) [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Send a message on the current device"}),"\n",(0,n.jsx)(s.h3,{id:"sendmirrorinfomessage",children:"SendMirrorInfoMessage"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method SendMirrorInfoMessage() [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"worker",children:"Worker"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Worker() [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Workers wait for queries on the WorkQ message queue, calculate the answers and send the answers back to the MainQ"})]})}function c(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>i});var n=t(96540);const a={},r=n.createContext(a);function o(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);