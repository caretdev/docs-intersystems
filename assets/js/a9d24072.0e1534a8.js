"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[19796],{8728:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>a,default:()=>o,frontMatter:()=>l,toc:()=>i});var n=t(74848),r=t(28453);const l={pagination_prev:null,pagination_next:null},a="%Library.SQLGatewayConnection",i=[{value:"Properties",id:"properties",level:2},{value:"ConnectionName",id:"connectionname",level:3},{value:"DSN",id:"dsn",level:3},{value:"User",id:"user",level:3},{value:"Password",id:"password",level:3},{value:"DLLName",id:"dllname",level:3},{value:"DLLHandle",id:"dllhandle",level:3},{value:"sqlcode",id:"sqlcode",level:3},{value:"ConnectionHandle",id:"connectionhandle",level:3},{value:"LegacyMode",id:"legacymode",level:3},{value:"GatewayStatus",id:"gatewaystatus",level:3},{value:"DisconnectOnClose",id:"disconnectonclose",level:3},{value:"Methods",id:"methods",level:2},{value:"Connect",id:"connect",level:3},{value:"GetConnection",id:"getconnection",level:3},{value:"GatewayStatusGet",id:"gatewaystatusget",level:3},{value:"GetGTWVersion",id:"getgtwversion",level:3},{value:"GetLastSQLCode",id:"getlastsqlcode",level:3},{value:"GetErrorList",id:"geterrorlist",level:3},{value:"Prepare",id:"prepare",level:3},{value:"PrepareW",id:"preparew",level:3},{value:"getResultSet",id:"getresultset",level:3},{value:"ParamData",id:"paramdata",level:3},{value:"Execute",id:"execute",level:3},{value:"AllocateStatement",id:"allocatestatement",level:3},{value:"Disconnect",id:"disconnect",level:3},{value:"Fetch",id:"fetch",level:3},{value:"RowCount",id:"rowcount",level:3},{value:"MoreResults",id:"moreresults",level:3},{value:"getNextResultSet",id:"getnextresultset",level:3},{value:"BindParameters",id:"bindparameters",level:3},{value:"BindParameter",id:"bindparameter",level:3},{value:"SetParameter",id:"setparameter",level:3},{value:"SetParameterBinary",id:"setparameterbinary",level:3},{value:"DescribeColumns",id:"describecolumns",level:3},{value:"FetchRows",id:"fetchrows",level:3},{value:"Columns",id:"columns",level:3},{value:"ColumnPrivileges",id:"columnprivileges",level:3},{value:"Tables",id:"tables",level:3},{value:"TablePrivileges",id:"tableprivileges",level:3},{value:"ColumnsW",id:"columnsw",level:3},{value:"ColumnPrivilegesW",id:"columnprivilegesw",level:3},{value:"SpecialColumnsW",id:"specialcolumnsw",level:3},{value:"SpecialColumns",id:"specialcolumns",level:3},{value:"TablesW",id:"tablesw",level:3},{value:"TablePrivilegesW",id:"tableprivilegesw",level:3},{value:"PrimaryKeysW",id:"primarykeysw",level:3},{value:"PrimaryKeys",id:"primarykeys",level:3},{value:"DropStatement",id:"dropstatement",level:3},{value:"CloseCursor",id:"closecursor",level:3},{value:"UnbindParameters",id:"unbindparameters",level:3},{value:"SetConnectOption",id:"setconnectoption",level:3},{value:"SetStmtOption",id:"setstmtoption",level:3},{value:"Transact",id:"transact",level:3},{value:"GetParameter",id:"getparameter",level:3},{value:"DescribeProcedureColumns",id:"describeprocedurecolumns",level:3},{value:"DescribeProcedureColumnsW",id:"describeprocedurecolumnsw",level:3},{value:"DescribeProcedures",id:"describeprocedures",level:3},{value:"DescribeProceduresW",id:"describeproceduresw",level:3},{value:"GetData",id:"getdata",level:3},{value:"GetDataL",id:"getdatal",level:3},{value:"GetDataLW",id:"getdatalw",level:3},{value:"PutData",id:"putdata",level:3},{value:"PutDataW",id:"putdataw",level:3},{value:"GetDataW",id:"getdataw",level:3},{value:"GetOneRow",id:"getonerow",level:3},{value:"DescribeParameters",id:"describeparameters",level:3},{value:"GetInfo",id:"getinfo",level:3},{value:"GetTypeInfo",id:"gettypeinfo",level:3},{value:"Statistics",id:"statistics",level:3},{value:"StatisticsW",id:"statisticsw",level:3},{value:"ForeignKeys",id:"foreignkeys",level:3},{value:"ForeignKeysW",id:"foreignkeysw",level:3},{value:"GetUV",id:"getuv",level:3},{value:"UnloadDLL",id:"unloaddll",level:3},{value:"%OnClose",id:"onclose",level:3},{value:"IsTextNetworkError",id:"istextnetworkerror",level:3}];function c(e){const s={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"librarysqlgatewayconnection",children:"%Library.SQLGatewayConnection"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class %Library.SQLGatewayConnection Extends %RegisteredObject [ Not ProcedureBlock, System = 3 ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.strong,{children:"SQLGatewayConnection"})," class provides low-level access to the SQLGateway. The user should understand how to make ODBC calls in order to use this class. Most of the calls which return ",(0,n.jsx)(s.strong,{children:"%Status"})," also set the ",(0,n.jsx)(s.strong,{children:"..sqlcode"})," property. The user should check ..sqlcode if return status is not $$$OK. The user can use a ",(0,n.jsx)(s.strong,{children:"%SQLGatewayConnection"})," class as follows: ",(0,n.jsx)(s.code,{children:'#include %occInclude //Create new Gateway connection object set gc=##class(%SQLGatewayConnection).%New() If gc=$$$NULLOREF quit $$$ERROR($$$GeneralError,"Cannot create %SQLGatewayConnection.") //Make connection to target DSN s pDSN="Samples" s usr="_system" s pwd="SYS" set sc=gc.Connect(pDSN,usr,pwd,0) If $$$ISERR(sc) quit sc if gc.ConnectionHandle="" quit $$$ERROR($$$GeneralError,"Connection failed") set sc=gc.AllocateStatement(.hstmt) if $$$ISERR(sc) quit sc //Prepare statement for execution set pQuery= "select * from Sample.Person" set sc=gc.Prepare(hstmt,pQuery) if $$$ISERR(sc) quit sc //Execute statement set sc=gc.Execute(hstmt) if $$$ISERR(sc) quit sc //Get list of columns returned by query set sc=gc.DescribeColumns(hstmt, .columnlist) if $$$ISERR(sc) quit sc //display column headers delimited by ":" set numcols=$listlength(columnlist)-1 //get number of columns for colnum=2:1:numcols+1 { Write $listget($listget(columnlist,colnum),1),":" } write ! //Return first 200 rows set sc=gc.Fetch(hstmt) if $$$ISERR(sc) quit sc s rownum=1 while((gc.sqlcode\'=100) && (rownum<=200)) { for ii=1:1:numcols { s sc=gc.GetData(hstmt, ii, 1, .val) w " "_val if $$$ISERR(sc) break } s rownum=rownum+1 write ! set sc=gc.Fetch(hstmt) if $$$ISERR(sc) break } //Close cursor and then disconnect set sc=gc.CloseCursor(hstmt) if $$$ISERR(sc) quit sc // Disconnect() should always be called when done with the connection. // On some platforms, not calling Disconnect() can lead to a hang when the process halts set sc=gc.Disconnect() Quit sc'})]}),"\n",(0,n.jsxs)(s.p,{children:["The sample class mentioned here (Sample.Person) is part of ",(0,n.jsx)(s.a,{href:"https://github.com/intersystems/Samples-Data",children:"https://github.com/intersystems/Samples-Data."})," See ",(0,n.jsx)(s.a,{href:"/csp/docbook/DocBook.UI.Page.cls?FIND=landing+githubsamples",children:"Downloading Samples"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(s.h3,{id:"connectionname",children:"ConnectionName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property ConnectionName As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"dsn",children:"DSN"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property DSN As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"user",children:"User"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property User As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"password",children:"Password"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Password As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"dllname",children:"DLLName"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property DLLName As %String;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"dllhandle",children:"DLLHandle"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property DLLHandle As %Binary;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"sqlcode",children:"sqlcode"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property sqlcode As %Integer;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"connectionhandle",children:"ConnectionHandle"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property ConnectionHandle As %Binary;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"legacymode",children:"LegacyMode"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property LegacyMode As %Integer;\n"})}),"\n",(0,n.jsx)(s.h3,{id:"gatewaystatus",children:"GatewayStatus"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property GatewayStatus As %Integer [ Calculated ];\n"})}),"\n",(0,n.jsx)(s.h3,{id:"disconnectonclose",children:"DisconnectOnClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property DisconnectOnClose As %Boolean;\n"})}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"connect",children:"Connect"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Connect(dsn, usr, pwd, timeout) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The method ",(0,n.jsx)(s.strong,{children:"Connect"})," is used for establishing connection to a DSN. If username and password are both empty it calls SQLDriverConnect. If that call is unsuccessful or username/password are specified it calls SQLConnect. SQLSetConnectAttr is called before connection to set SQL_ATTR_LOGIN_TIMEOUT if the ",(0,n.jsx)(s.strong,{children:"timeout"})," parameter is not 0."]}),"\n",(0,n.jsx)(s.h3,{id:"getconnection",children:"GetConnection"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetConnection(conn, timeout) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"GetConnection"})," is used for establishing connection. It uses an entry from InterSystems IRIS configuration for determening the DSN, user name, and password."]}),"\n",(0,n.jsx)(s.h3,{id:"gatewaystatusget",children:"GatewayStatusGet"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GatewayStatusGet() As %Integer\n"})}),"\n",(0,n.jsxs)(s.p,{children:["method ",(0,n.jsx)(s.strong,{children:"GatewayStatusGet"})," returns an error code for the last call. It does not initialize the error code and can be called multiple times. The possible return values are:"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"0 - success"}),"\n",(0,n.jsx)(s.li,{children:"-1 - SQL error"}),"\n",(0,n.jsx)(s.li,{children:"-1000 - critical error"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"getgtwversion",children:"GetGTWVersion"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetGTWVersion() As %Integer\n"})}),"\n",(0,n.jsxs)(s.p,{children:["method ",(0,n.jsx)(s.strong,{children:"GetGTWVersion"})," returns the current version of odbcgateway.dll(so)"]}),"\n",(0,n.jsx)(s.h3,{id:"getlastsqlcode",children:"GetLastSQLCode"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetLastSQLCode() As %Integer\n"})}),"\n",(0,n.jsxs)(s.p,{children:["method ",(0,n.jsx)(s.strong,{children:"GetLastSQLCode"})," returns an SQL code for the last call if this call does not return an SQL code (e.g. SQLGetData)."]}),"\n",(0,n.jsx)(s.h3,{id:"geterrorlist",children:"GetErrorList"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetErrorList(hstmt, Output errorlist As %List) As %Status [ ProcedureBlock = 1 ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"GetErrorList"})," sets a list of errors. It calls SQLDiagRec as long as it returns errors for the given ",(0,n.jsx)(s.strong,{children:"hdbc"}),", ",(0,n.jsx)(s.strong,{children:"hstmt"})," (",(0,n.jsx)(s.strong,{children:"hdbc"})," is set implicitly to the handle of the active connection). ",(0,n.jsx)(s.strong,{children:"errorlist"})," is a delimited string (with platform specific new line characters as delimiters) metalist; each element corresponds to a particular error, in the format: SQLState: (...) NativeError: [...] Message: [... ",(0,n.jsx)(s.strong,{children:"GetErrorList(0, .errorlist)"})," - returns the error status of the ODBC function most recently called with the current hdbc;"]}),"\n",(0,n.jsx)(s.h3,{id:"prepare",children:"Prepare"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Prepare(hstmt, sql) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"Prepare(hstmt, sql)"})," invokes SQLPrepare for a given handle."]}),"\n",(0,n.jsx)(s.h3,{id:"preparew",children:"PrepareW"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method PrepareW(hstmt, sql) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"PrepareW(hstmt, sql)"})," invokes SQLPrepareW for a given handle."]}),"\n",(0,n.jsx)(s.h3,{id:"getresultset",children:"getResultSet"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method getResultSet(hstmt) As %SQL.IResultSet\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The method ",(0,n.jsx)(s.strong,{children:"getResultSet"})," is used for encapsulating data retrival from already executed statement. It return a resultset and all the resultset methods for data and metadata access are internally translated to ODBC calls. It means that if this path is chosen the user should not call Fetch, GetData etc independently, otherwise the results may be not complete and/or correct."]}),"\n",(0,n.jsx)(s.h3,{id:"paramdata",children:"ParamData"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method ParamData(hstmt, ByRef ind As %Integer) As %Status [ ProcedureBlock = 1 ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"ParamData(hstmt)"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLParamData"})," for a given handle."]}),"\n",(0,n.jsx)(s.h3,{id:"execute",children:"Execute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Execute(hstmt) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"Execute(hstmt)"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLExecute"})," for a given handle."]}),"\n",(0,n.jsx)(s.h3,{id:"allocatestatement",children:"AllocateStatement"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method AllocateStatement(ByRef hstmt) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"AllocateStatement(hstmt)"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLAllocHandle"})," and creates the corresponding structures in the SQL Gateway."]}),"\n",(0,n.jsx)(s.h3,{id:"disconnect",children:"Disconnect"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Disconnect() As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"Disconnect"})," closes the connection.",(0,n.jsx)(s.br,{}),"\nDisconnect() should always be called when done with the connection. On some platforms, not calling Disconnect() can lead to a hang when the process halts"]}),"\n",(0,n.jsx)(s.h3,{id:"fetch",children:"Fetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Fetch(hstmt) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"Fetch(hstmt)"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLFetch"}),". It returns an error for all non zero SQL codes. The user should check the ",(0,n.jsx)(s.strong,{children:"..sqlcode"})," property."]}),"\n",(0,n.jsx)(s.h3,{id:"rowcount",children:"RowCount"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method RowCount(hstmt) As %Integer\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"RowCount(hstmt)"})," returns ",(0,n.jsx)(s.strong,{children:"SQLRowCount"})," for the corresponding   ",(0,n.jsx)(s.strong,{children:"hstmt"}),"."]}),"\n",(0,n.jsx)(s.h3,{id:"moreresults",children:"MoreResults"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method MoreResults(hstmt) As %Integer\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"MoreResults(hstmt)"})," returns ",(0,n.jsx)(s.strong,{children:"SQLMoreResults"})," for the corresponding   ",(0,n.jsx)(s.strong,{children:"hstmt"}),"."]}),"\n",(0,n.jsx)(s.h3,{id:"getnextresultset",children:"getNextResultSet"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method getNextResultSet(hstmt, ByRef qrc As %Integer = 0) As %Library.ObjectHandle\n"})}),"\n",(0,n.jsx)(s.h3,{id:"bindparameters",children:"BindParameters"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method BindParameters(hstmt, ptype As %List, dtype As %List, precision As %List, scale As %List, cd As %List) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["BindParameters is used for binding all the parameters for a given statement handle.",(0,n.jsx)(s.br,{}),"\nArguments :"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"hstmt"})," - Statement handle"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"ptype"})," - input/ouput types of the parameters in ",(0,n.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"})," format"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"dtype"})," - SQL datatypes of parameters in the $list format"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"precision"})," - $list of the correponding precision values - used for reserving buffers for parameter values"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"scale"})," - $list of the correponding scale values"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"cd"})," - $list of column sizes"]}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["They are used in the following places of the ",(0,n.jsx)(s.strong,{children:"SQLBindParameter"})," function"]}),"\n",(0,n.jsx)(s.p,{children:"SQLRETURN SQLBindParameter(     SQLHSTMT         StatementHandle,   // hstmt     SQLUSMALLINT     ParameterNumber,     SQLSMALLINT      InputOutputType,   // $list element from ptype     SQLSMALLINT      ValueType,     SQLSMALLINT      ParameterType,     // $list element from dtype     SQLUINTEGER      ColumnSize,        // $list element from cd     SQLSMALLINT      DecimalDigits,     // $list element from scale     SQLPOINTER       ParameterValuePtr ,     SQLINTEGER       BufferLength,     SQLINTEGER *     StrLen_or_IndPtr);"}),"\n",(0,n.jsx)(s.h3,{id:"bindparameter",children:"BindParameter"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method BindParameter(hstmt, ParameterNumber As %Integer, IOType As %Integer, ValueType As %Integer, ParameterType As %Integer, ColumnSize As %Integer, DecimalDigits As %Integer, StrLen As %Integer)\n"})}),"\n",(0,n.jsx)(s.p,{children:"BindParameter is calling SQLBindParameter with the corresponding values, the buffer length is guaranteed to be not less then StrLen."}),"\n",(0,n.jsx)(s.h3,{id:"setparameter",children:"SetParameter"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method SetParameter(hstmt, pvalue, pnbr) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"SetParameter(hstmt, pvalue, pnbr)"})," is used for setting the previously bound parameter with the ordinal number ",(0,n.jsx)(s.strong,{children:"pnbr"})," to the value which is contained in a ",(0,n.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"})," format in ",(0,n.jsx)(s.strong,{children:"pvalue"}),". If the allocated buffer is not sufficient a new buffer will be allocated."]}),"\n",(0,n.jsx)(s.h3,{id:"setparameterbinary",children:"SetParameterBinary"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method SetParameterBinary(hstmt, pvalue, pnbr) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"SetParameterBinary(hstmt, pvalue, pnbr)"})," is used for setting the previously bound binary parameter with the ordinal number ",(0,n.jsx)(s.strong,{children:"pnbr"})," to the value which is contained in a ",(0,n.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"})," format in ",(0,n.jsx)(s.strong,{children:"pvalue"}),". If the allocated buffer is not sufficient a new buffer will be allocated."]}),"\n",(0,n.jsx)(s.h3,{id:"describecolumns",children:"DescribeColumns"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method DescribeColumns(hstmt, Output clist As %List) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"DescribeColumns"})," returns a list with column information in a second argument. It calls ",(0,n.jsx)(s.strong,{children:"SQLDescribeCols"})," and ",(0,n.jsx)(s.strong,{children:"SQLColAttribute"}),". Each list element of the returned list is a list itself. The first list element contains the header in the ",(0,n.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"})," format containing 8 elements:"]}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"the number of columns in the given statement"}),"\n",(0,n.jsx)(s.li,{children:'the string "SqlType"'}),"\n",(0,n.jsx)(s.li,{children:'the string "Precision"'}),"\n",(0,n.jsx)(s.li,{children:'the string "Scale"'}),"\n",(0,n.jsx)(s.li,{children:'the string "Nullable"'}),"\n",(0,n.jsx)(s.li,{children:'the string "Datatype"'}),"\n",(0,n.jsx)(s.li,{children:'the string "DisplaySize"'}),"\n",(0,n.jsx)(s.li,{children:'the string "IsMoney?"'}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"Next elements correspond to the statement column and also contains 8 elements:"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"column name"}),"\n",(0,n.jsx)(s.li,{children:"SQL type of the column"}),"\n",(0,n.jsx)(s.li,{children:"column size"}),"\n",(0,n.jsx)(s.li,{children:"decimal digits"}),"\n",(0,n.jsx)(s.li,{children:"nullable"}),"\n",(0,n.jsx)(s.li,{children:"column datatype"}),"\n",(0,n.jsx)(s.li,{children:"column display size"}),"\n",(0,n.jsx)(s.li,{children:"SQL_TRUE or SQL_FALSE depending whether this is a currency type"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"fetchrows",children:"FetchRows"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method FetchRows(hstmt, Output rlist As %List, nrows As %Integer) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"FetchRows"})," retrieves ",(0,n.jsx)(s.strong,{children:"nrows"})," of rows for the given hstmt (it should be a statement which returns a result set) It returns rlist - a list of row.s If there is no data (SQL_CODE = 100) fetching is assumed to be successful This call truncates character fields up to 120 characters so that more fields would fit in a row. It is advised to use ",(0,n.jsx)(s.strong,{children:"GetData"})," call when non truncated data is needed."]}),"\n",(0,n.jsx)(s.h3,{id:"columns",children:"Columns"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Columns(hstmt, CatalogName As %String, SchemaName As %String, TableName As %String, ColumnName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"Columns"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLColumns"}),". It should be followed by the usual retrieval of a result set. Users should pass empty strings instead of the corresponding null values and ",(0,n.jsx)(s.strong,{children:"$c(0)"})," instead of empty strings. All other ODBC conventions for arguments in catalog functions apply."]}),"\n",(0,n.jsx)(s.h3,{id:"columnprivileges",children:"ColumnPrivileges"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method ColumnPrivileges(hstmt, CatalogName As %String, SchemaName As %String, TableName As %String, ColumnName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"ColumnPrivileges"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLColumnPrivileges"}),". It should be followed by the usual retrieval of a result set. Users should pass empty strings instead of the corresponding null values and ",(0,n.jsx)(s.strong,{children:"$c(0)"})," instead of empty strings. All other ODBC conventions for arguments in catalog functions apply."]}),"\n",(0,n.jsx)(s.h3,{id:"tables",children:"Tables"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Tables(hstmt, CatalogName As %String, SchemaName As %String, TableName As %String, TableType As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"Tables"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLTables"}),". It should be followed by the usual retrieval of a result set. Users should pass empty strings instead of the corresponding null values and ",(0,n.jsx)(s.strong,{children:"$c(0)"})," instead of empty strings. All other ODBC conventions for arguments in catalog functions apply."]}),"\n",(0,n.jsx)(s.h3,{id:"tableprivileges",children:"TablePrivileges"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method TablePrivileges(hstmt, CatalogName As %String, SchemaName As %String, TableName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"TablePrivileges"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLTablePrivileges"}),". It should be followed by the usual retrieval of a result set. Users should pass empty strings instead of the corresponding null values and ",(0,n.jsx)(s.strong,{children:"$c(0)"})," instead of empty strings. All other ODBC conventions for arguments in catalog functions apply."]}),"\n",(0,n.jsx)(s.h3,{id:"columnsw",children:"ColumnsW"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method ColumnsW(hstmt, CatalogName As %String, SchemaName As %String, TableName As %String, ColumnName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The wide version of ",(0,n.jsx)(s.strong,{children:"Columns"}),". See documentation for ",(0,n.jsx)(s.strong,{children:"Columns"})]}),"\n",(0,n.jsx)(s.h3,{id:"columnprivilegesw",children:"ColumnPrivilegesW"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method ColumnPrivilegesW(hstmt, CatalogName As %String, SchemaName As %String, TableName As %String, ColumnName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The wide version of ",(0,n.jsx)(s.strong,{children:"Columns"}),". See documentation for ",(0,n.jsx)(s.strong,{children:"ColumnPrivilegesW"})]}),"\n",(0,n.jsx)(s.h3,{id:"specialcolumnsw",children:"SpecialColumnsW"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method SpecialColumnsW(hstmt, IdentifierType As %Integer, CatalogName As %String, SchemaName As %String, TableName As %String, Scope As %Integer, Nullable As %Integer) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The wide version of ",(0,n.jsx)(s.strong,{children:"SpecialColumns"}),". See documentation for ",(0,n.jsx)(s.strong,{children:"SpecialColumns"})]}),"\n",(0,n.jsx)(s.h3,{id:"specialcolumns",children:"SpecialColumns"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method SpecialColumns(hstmt, IdentifierType As %Integer, CatalogName As %String, SchemaName As %String, TableName As %String, Scope As %Integer, Nullable As %Integer) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"SpecialColumns"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLSpecialColumns"}),". It should be followed by the usual retrieval of a result set. Users should pass empty strings instead of the corresponding null values and ",(0,n.jsx)(s.strong,{children:"$c(0)"})," instead of empty strings. All other ODBC conventions for arguments in catalog functions apply."]}),"\n",(0,n.jsx)(s.h3,{id:"tablesw",children:"TablesW"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method TablesW(hstmt, CatalogName As %String, SchemaName As %String, TableName As %String, TableType As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The wide version of ",(0,n.jsx)(s.strong,{children:"Tables"}),". See documentation for ",(0,n.jsx)(s.strong,{children:"Tables"})]}),"\n",(0,n.jsx)(s.h3,{id:"tableprivilegesw",children:"TablePrivilegesW"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method TablePrivilegesW(hstmt, CatalogName As %String, SchemaName As %String, TableName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The wide version of ",(0,n.jsx)(s.strong,{children:"TablePrivileges"}),". See documentation for ",(0,n.jsx)(s.strong,{children:"Tables"})]}),"\n",(0,n.jsx)(s.h3,{id:"primarykeysw",children:"PrimaryKeysW"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method PrimaryKeysW(hstmt, CatalogName As %String, SchemaName As %String, TableName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The wide version of ",(0,n.jsx)(s.strong,{children:"PrimaryKeys"}),". See documentation for ",(0,n.jsx)(s.strong,{children:"SQLPrimaryKeys"})]}),"\n",(0,n.jsx)(s.h3,{id:"primarykeys",children:"PrimaryKeys"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method PrimaryKeys(hstmt, CatalogName As %String, SchemaName As %String, TableName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"PrimaryKeys"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLPrimaryKeys"}),". It should be followed by the usual retrieval of a result set. Users should pass empty strings instead of the corresponding null values and ",(0,n.jsx)(s.strong,{children:"$c(0)"})," instead of empty strings. All other ODBC conventions for arguments in catalog functions apply."]}),"\n",(0,n.jsx)(s.h3,{id:"dropstatement",children:"DropStatement"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method DropStatement(hstmt) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"DropStatement(hstmt)"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLFreeHandle"})," with ",(0,n.jsx)(s.strong,{children:"SQL_HANDLE_STMT"}),"."]}),"\n",(0,n.jsx)(s.h3,{id:"closecursor",children:"CloseCursor"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method CloseCursor(hstmt) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"CloseCursor(hstmt)"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLCloseCursor"})," ."]}),"\n",(0,n.jsx)(s.h3,{id:"unbindparameters",children:"UnbindParameters"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method UnbindParameters(hstmt) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"UnbindParameters(hstmt)"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLFreeStmt"})," with ",(0,n.jsx)(s.strong,{children:"SQL_UNBIND"}),". Unbinding is done automatically when ",(0,n.jsx)(s.strong,{children:"BindParameters"})," is called."]}),"\n",(0,n.jsx)(s.h3,{id:"setconnectoption",children:"SetConnectOption"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method SetConnectOption(opt, val) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"SetConnectOption(opt, val)"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLSetConnectAttr"}),". Only integer values are supported. Integer values for the ",(0,n.jsx)(s.strong,{children:"opt"})," may be taken from sql.h and sqlext.h header files."]}),"\n",(0,n.jsx)(s.h3,{id:"setstmtoption",children:"SetStmtOption"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method SetStmtOption(hstmt, opt, val) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"SetStmtOption(hstmt, opt, val)"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLSetStmtAttr"}),". Only integer values are supported. Integer values for the ",(0,n.jsx)(s.strong,{children:"opt"})," may be taken from sql.h and sqlext.h header files."]}),"\n",(0,n.jsx)(s.h3,{id:"transact",children:"Transact"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Transact(type) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"Transact( type)"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLEndTran"}),". Pass 0 for SQL_COMMIT and 1 for SQL_ROLLBACK."]}),"\n",(0,n.jsx)(s.h3,{id:"getparameter",children:"GetParameter"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetParameter(hstmt, pnbr, ByRef value) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"GetParameter(hstmt, pnbr, value)"})," returns the current value of the parameter with the ordinal number ",(0,n.jsx)(s.strong,{children:"pnbr"})," in ",(0,n.jsx)(s.strong,{children:"value"}),"."]}),"\n",(0,n.jsx)(s.h3,{id:"describeprocedurecolumns",children:"DescribeProcedureColumns"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method DescribeProcedureColumns(hstmt, CatalogName As %String, SchemaName As %String, ProcName As %String, ColumnName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"DescribeProcedureColumns"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLProcedureColumns"}),". It should be followed by the usual retrieval of a result set. Users should pass empty strings instead of the corresponding null values and ",(0,n.jsx)(s.strong,{children:"$c(0)"})," instead of empty strings. All other ODBC conventions for arguments in catalog functions apply."]}),"\n",(0,n.jsx)(s.h3,{id:"describeprocedurecolumnsw",children:"DescribeProcedureColumnsW"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method DescribeProcedureColumnsW(hstmt, CatalogName As %String, SchemaName As %String, ProcName As %String, ColumnName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"DescribeProcedureColumns"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLProcedureColumns"}),". It should be followed by the usual retrieval of a result set. Users should pass empty strings instead of the corresponding null values and ",(0,n.jsx)(s.strong,{children:"$c(0)"})," instead of empty strings. All other ODBC conventions for arguments in catalog functions apply."]}),"\n",(0,n.jsx)(s.h3,{id:"describeprocedures",children:"DescribeProcedures"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method DescribeProcedures(hstmt, CatalogName As %String, SchemaName As %String, ProcName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"DescribeProcedures"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLProcedures"}),". It should be followed by the usual retrieval of a result set. Users should pass empty strings instead of the corresponding null values and ",(0,n.jsx)(s.strong,{children:"$c(0)"})," instead of empty strings. All other ODBC conventions for arguments in catalog functions apply."]}),"\n",(0,n.jsx)(s.h3,{id:"describeproceduresw",children:"DescribeProceduresW"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method DescribeProceduresW(hstmt, CatalogName As %String, SchemaName As %String, ProcName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"DescribeProcedures"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLProcedures"}),". It should be followed by the usual retrieval of a result set. Users should pass empty strings instead of the corresponding null values and ",(0,n.jsx)(s.strong,{children:"$c(0)"})," instead of empty strings. All other ODBC conventions for arguments in catalog functions apply."]}),"\n",(0,n.jsx)(s.h3,{id:"getdata",children:"GetData"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetData(hstmt, icol, type, ByRef val) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"GetData"})," calls ",(0,n.jsx)(s.strong,{children:"SQLGetData>"})," for the column ",(0,n.jsx)(s.strong,{children:"icol"})," and returns data in the last argument.. The supported types are 1 (SQL_CHAR),-2 (SQL_BINARY) and -8 (SQL_WCHAR). This method may be called repeatedly for the same column in the case when the data length exceeds 31K."]}),"\n",(0,n.jsx)(s.h3,{id:"getdatal",children:"GetDataL"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetDataL(hstmt, icol, type, length, ByRef val) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"GetDataL"})," calls ",(0,n.jsx)(s.strong,{children:"SQLGetData>"})," for the column ",(0,n.jsx)(s.strong,{children:"icol"})," and returns data in the last argument. This method support long strings and requests the specified number of bytes. The supported types are 1 (SQL_CHAR),-2 (SQL_BINARY) and -8 (SQL_WCHAR). This method may be called repeatedly for the same column."]}),"\n",(0,n.jsx)(s.h3,{id:"getdatalw",children:"GetDataLW"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetDataLW(hstmt, icol, type, length, ByRef val) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"GetDataL"})," calls ",(0,n.jsx)(s.strong,{children:"SQLGetData>"})," for the column ",(0,n.jsx)(s.strong,{children:"icol"})," and returns data in the last argument. This method support long strings and requests the specified number of bytes. The supported types are 1 (SQL_CHAR) and -8 (SQL_WCHAR). This method may be called repeatedly for the same column."]}),"\n",(0,n.jsx)(s.h3,{id:"putdata",children:"PutData"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method PutData(hstmt, ByRef val) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"PutData"})," calls ",(0,n.jsx)(s.strong,{children:"SQLPutData>"})," for the column ",(0,n.jsx)(s.strong,{children:"icol"})," and sets the sqlcode property."]}),"\n",(0,n.jsx)(s.h3,{id:"putdataw",children:"PutDataW"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method PutDataW(hstmt, ByRef val) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"PutDataW"})," calls ",(0,n.jsx)(s.strong,{children:"SQLPutData>"})," for the column ",(0,n.jsx)(s.strong,{children:"icol"})," and sets the sqlcode property."]}),"\n",(0,n.jsx)(s.h3,{id:"getdataw",children:"GetDataW"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetDataW(hstmt, icol, type, ByRef val) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"GetDataW"})," calls ",(0,n.jsx)(s.strong,{children:"SQLGetData>"})," for the column ",(0,n.jsx)(s.strong,{children:"icol"})," and returns data in the last argument.. The supported types are 1 (SQL_CHAR) and -8 (SQL_WCHAR). This method may be called repeatedly for the same column in the case when the data length exceeds 31K."]}),"\n",(0,n.jsx)(s.h3,{id:"getonerow",children:"GetOneRow"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetOneRow(hstmt, ByRef row) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"GetOneRow"})," retrieves the next for the given hstmt (it should be a statement which returns a result set) It returns rlist - a list of fields If there is no data (SQL_CODE = 100) fetching is assumed to be successful but the return list is empty. This call truncates character fields up to 120 characters so that more fields would fit in a row. It is advised to use ",(0,n.jsx)(s.strong,{children:"GetData"})," call when non truncated data is needed."]}),"\n",(0,n.jsx)(s.h3,{id:"describeparameters",children:"DescribeParameters"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method DescribeParameters(hstmt, Output plist As %List) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"DescribeParameters"})," returns a list with parameter information in a second argument. It calls ",(0,n.jsx)(s.strong,{children:"SQLDescribeParam"})," and ",(0,n.jsx)(s.strong,{children:"SQLNumParams"}),". Each list element of the returned list is a list itself. The first list element contains the header in ",(0,n.jsx)(s.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"})," format containing 5 elements:"]}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"the number of parameters in the given statement"}),"\n",(0,n.jsx)(s.li,{children:'the string "SqlType"'}),"\n",(0,n.jsx)(s.li,{children:'the string "Precision"'}),"\n",(0,n.jsx)(s.li,{children:'the string "Scale"'}),"\n",(0,n.jsx)(s.li,{children:'the string "Nullable"'}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"The next elements correspond to the statement parameter and contains 4 elements:"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"the SQL type of the parameter"}),"\n",(0,n.jsx)(s.li,{children:"the parameter size"}),"\n",(0,n.jsx)(s.li,{children:"the scale"}),"\n",(0,n.jsx)(s.li,{children:"whether the value is nullable"}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"getinfo",children:"GetInfo"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetInfo(infotype, ByRef infoval) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"GetInfo"})," calls ",(0,n.jsx)(s.strong,{children:"SQLGetInfo"})," for the current connection handle."]}),"\n",(0,n.jsx)(s.h3,{id:"gettypeinfo",children:"GetTypeInfo"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetTypeInfo(hstmt, infotype As %Integer) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"GetInfo"})," calls ",(0,n.jsx)(s.strong,{children:"SQLGetTypeInfo"})," for the current connection handle."]}),"\n",(0,n.jsx)(s.h3,{id:"statistics",children:"Statistics"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Statistics(hstmt, CatalogName As %String, SchemaName As %String, TableName As %String, unique As %Integer) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"Statistics"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLStatistics"}),". It should be followed by the usual retrieval of a result set. Users should pass empty strings instead of the corresponding null values and ",(0,n.jsx)(s.strong,{children:"$c(0)"})," instead of empty strings. All other ODBC conventions for arguments in catalog functions apply."]}),"\n",(0,n.jsx)(s.h3,{id:"statisticsw",children:"StatisticsW"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method StatisticsW(hstmt, CatalogName As %String, SchemaName As %String, TableName As %String, unique As %Integer) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"StatisticsW"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLStatisticsW"}),". It should be followed by the usual retrieval of a result set. Users should pass empty strings instead of the corresponding null values and ",(0,n.jsx)(s.strong,{children:"$c(0)"})," instead of empty strings. All other ODBC conventions for arguments in catalog functions apply."]}),"\n",(0,n.jsx)(s.h3,{id:"foreignkeys",children:"ForeignKeys"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method ForeignKeys(hstmt, CatalogName As %String, SchemaName As %String, TableName As %String, ForeignCatalogName As %String, ForeignSchemaName As %String, ForeignTableName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"ForeignKeys"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLForeignKeys"}),". It should be followed by the usual retrieval of a result set. Users should pass empty strings instead of the corresponding null values and ",(0,n.jsx)(s.strong,{children:"$c(0)"})," instead of empty strings. All other ODBC conventions for arguments in catalog functions apply."]}),"\n",(0,n.jsx)(s.h3,{id:"foreignkeysw",children:"ForeignKeysW"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method ForeignKeysW(hstmt, CatalogName As %String, SchemaName As %String, TableName As %String, ForeignCatalogName As %String, ForeignSchemaName As %String, ForeignTableName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"ForeignKeysW"})," invokes ",(0,n.jsx)(s.strong,{children:"SQLForeignKeysW"}),". It should be followed by the usual retrieval of a result set. Users should pass empty strings instead of the corresponding null values and ",(0,n.jsx)(s.strong,{children:"$c(0)"})," instead of empty strings. All other ODBC conventions for arguments in catalog functions apply."]}),"\n",(0,n.jsx)(s.h3,{id:"getuv",children:"GetUV"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetUV(ByRef infoval) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Method ",(0,n.jsx)(s.strong,{children:"GetUV"})," returns whether the dll was built as Unicode."]}),"\n",(0,n.jsx)(s.h3,{id:"unloaddll",children:"UnloadDLL"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method UnloadDLL() As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method unloads odbcgateway.dll from the process memory."}),"\n",(0,n.jsx)(s.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"istextnetworkerror",children:"IsTextNetworkError"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsTextNetworkError(ErrorText As %String) As %Boolean [ ProcedureBlock = 1 ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Decide whether the text of an error returned from the driver represents a disconnection implying the need to re-connect. If you encounter other error signatures that ought to be in this list, please contact InterSystems so that we may update this method."})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>i});var n=t(96540);const r={},l=n.createContext(r);function a(e){const s=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(l.Provider,{value:s},e.children)}}}]);