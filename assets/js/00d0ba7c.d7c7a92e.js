"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[45198],{7291:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>n,default:()=>c,frontMatter:()=>a,toc:()=>l});var r=t(74848),i=t(28453);const a={pagination_prev:null,pagination_next:null},n="%OAuth2.Server.Properties",l=[{value:"Properties",id:"properties",level:2},{value:"RequestProperties",id:"requestproperties",level:3},{value:"ResponseProperties",id:"responseproperties",level:3},{value:"CustomProperties",id:"customproperties",level:3},{value:"ServerProperties",id:"serverproperties",level:3},{value:"IDTokenClaims",id:"idtokenclaims",level:3},{value:"UserinfoClaims",id:"userinfoclaims",level:3},{value:"IntrospectionClaims",id:"introspectionclaims",level:3},{value:"JWTClaims",id:"jwtclaims",level:3},{value:"JWTHeaderClaims",id:"jwtheaderclaims",level:3},{value:"ClaimValues",id:"claimvalues",level:3},{value:"Methods",id:"methods",level:2},{value:"SetClaimValue",id:"setclaimvalue",level:3},{value:"RemoveClaimValue",id:"removeclaimvalue",level:3},{value:"GetClaimValue",id:"getclaimvalue",level:3},{value:"GetConvertedClaimValue",id:"getconvertedclaimvalue",level:3},{value:"NextClaimValue",id:"nextclaimvalue",level:3},{value:"LogProperties",id:"logproperties",level:3}];function o(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"oauth2serverproperties",children:"%OAuth2.Server.Properties"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Class %OAuth2.Server.Properties Extends %Persistent [ System = 4 ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["%OAuth2.Server.Properties stores the properties and claims that are used to communicate between various parts of the OAuth 2.0 authorization server. See the description of each property of this class to understand usage of the properties and claims.",(0,r.jsx)(s.br,{}),"\nNote that storage is not in a % global. Therefore allowing the claim to be viewed from any namespace, but only opened or saved with the proper credentials."]}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.h3,{id:"requestproperties",children:"RequestProperties"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Property RequestProperties As array Of %String(MAXLEN = "");\n'})}),"\n",(0,r.jsxs)(s.p,{children:["RequestProperties contains the query parameters from the authorization request.",(0,r.jsx)(s.br,{}),"\nRequestProperties.GetAt() is the value of the  query parameter."]}),"\n",(0,r.jsx)(s.h3,{id:"responseproperties",children:"ResponseProperties"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Property ResponseProperties As array Of %String(MAXLEN = "");\n'})}),"\n",(0,r.jsxs)(s.p,{children:["ResponseProperties contains the properties to be added to the JSON response object to a token request.",(0,r.jsx)(s.br,{}),"\nResponseProperties.GetAt() is the value of the  JSON response property."]}),"\n",(0,r.jsx)(s.h3,{id:"customproperties",children:"CustomProperties"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Property CustomProperties As array Of %String(MAXLEN = "");\n'})}),"\n",(0,r.jsxs)(s.p,{children:["CustomProperties contains the custom properties to be used to communicate between various pieces of customization code.",(0,r.jsx)(s.br,{}),"\nCustomProperties.GetAt() is the value of the  property."]}),"\n",(0,r.jsx)(s.h3,{id:"serverproperties",children:"ServerProperties"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Property ServerProperties As array Of %String(MAXLEN = "");\n'})}),"\n",(0,r.jsxs)(s.p,{children:["ServerProperties contains properties that the authorization server chooses to share with the customization code.",(0,r.jsx)(s.br,{}),"\nThe logo_uri, client_uri, policy_uri and tos_uri client properties are shared in this way for use by the Authentication Class.",(0,r.jsx)(s.br,{}),"\nServerProperties.GetAt() is the value of the  property."]}),"\n",(0,r.jsx)(s.h3,{id:"idtokenclaims",children:"IDTokenClaims"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property IDTokenClaims As array Of %OAuth2.Server.Claim;\n"})}),"\n",(0,r.jsxs)(s.p,{children:['IDTokenClaims specifies the claims that are needed for the IDToken beyond the base set of required claims. The "iss", "sub", "exp", "sid", "aud" and "azp" claims will be returned even if not in IDTokenClaims. The claims are defined based on the scope and request claims parameter. The value to be returned for the claim will have the same key in the ClaimValues property. The value of the claims will usually be set by the ValidateUser class.',(0,r.jsx)(s.br,{}),"\nIDTokenClaims.GetAt() defines the  claim."]}),"\n",(0,r.jsx)(s.h3,{id:"userinfoclaims",children:"UserinfoClaims"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property UserinfoClaims As array Of %OAuth2.Server.Claim;\n"})}),"\n",(0,r.jsxs)(s.p,{children:['UserinfoClaims specifies the claims that need to be returned by the Userinfo endpoint beyond the base required claims. The "sub" claim will be returned even if not in UserinfoClaims. The claims are defined based on the scope and request claims parameter. The value to be returned for the claim will have the same key in the ClaimValues property. The value of the claims will usually be set by the ValidateUser class.',(0,r.jsx)(s.br,{}),"\nUserinfoClaims.GetAt() defines the  claim."]}),"\n",(0,r.jsx)(s.h3,{id:"introspectionclaims",children:"IntrospectionClaims"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property IntrospectionClaims As array Of %OAuth2.Server.Claim;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["IntrospectionClaims specifies the claims that need to be returned by the Introspection endpoint beyond the base required claims. The scope, client_id, username, token_type, exp, iat, nbf, sub, aud, iss and jti claims will be returned even if they are not in IntrospectionClaims. The value of the claims will usually be set by the ValidateUser class.",(0,r.jsx)(s.br,{}),"\nIntrospectionClaims.GetAt() defines the  claim."]}),"\n",(0,r.jsx)(s.h3,{id:"jwtclaims",children:"JWTClaims"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property JWTClaims As array Of %OAuth2.Server.Claim;\n"})}),"\n",(0,r.jsxs)(s.p,{children:['JWTClaims specifies the claims that are needed for the JWT access token that is returned by the default JWT based access token class (%OAuth2.Server.JWT) beyond the base set of required claims. The "iss", "sub", "exp", "aud", "jti", and "scope" claims will be returned even if not in JWTClaims. The claims are defined by the customization code. The value to be returned for the claim will have the same key in the ClaimValues property. The value of the claims will usually be set by the ValidateUser class.',(0,r.jsx)(s.br,{}),"\nJWTClaims.GetAt() defines the  claim."]}),"\n",(0,r.jsx)(s.h3,{id:"jwtheaderclaims",children:"JWTHeaderClaims"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Property JWTHeaderClaims As array Of %OAuth2.Server.Claim;\n"})}),"\n",(0,r.jsxs)(s.p,{children:['JWTHeaderClaims specifies the claims to include in the JOSE Header for the JWT access token that is returned by the default JWT based access token class (%OAuth2.Server.JWT) beyond the set of headers required by the signature or encryption options in use. The key can be either the name of a claim that exists in the ClaimValues property, or "jku" or "jwk". If "jku" is specified, then the "jku" field will be defined in JOSE header, containing the value of the relevant JWKS URL. If "jwk" is specified, then the "jwk" field will be defined, containing the JWK for the relvant public key. In both cases, the field will only be defined in the header if signing or encryption is being used with an asymmetric algorithm. It is not valid to specify other JOSE header fields defined by RFC 7515.',(0,r.jsx)(s.br,{}),"\nThe claims are defined by the customization code. The value to be returned for the claim will have the same key in the ClaimValues property. The value of the claims will usually be set by the ValidateUser class.",(0,r.jsx)(s.br,{}),"\nJWTHeaderClaims.GetAt() defines the  claim."]}),"\n",(0,r.jsx)(s.h3,{id:"claimvalues",children:"ClaimValues"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Property ClaimValues As array Of %String(MAXLEN = "");\n'})}),"\n",(0,r.jsxs)(s.p,{children:["ClaimValues associates the value to be returned for the claim will with the claim having the same key in a claims array.",(0,r.jsx)(s.br,{}),'\nEach claim value is stored as $lb(type,value) where type = "string", "boolean", "number" or "object".',(0,r.jsx)(s.br,{}),'\nIf type="object", then value is the JSON object serialized as a string. For all types, if the value is a $list, then it is an array of the specified type.']}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"setclaimvalue",children:"SetClaimValue"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Method SetClaimValue(name As %String, value As %String, type As %String = "string")\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Set the value of the claim named by the name argument.",(0,r.jsx)(s.br,{}),'\ntype = "string", "boolean", "number" or "object". The default type is "string" If type="object", then value is the JSON object serialized as a string. For all types, if the value is a $list, then it is an array of the specified type.']}),"\n",(0,r.jsx)(s.h3,{id:"removeclaimvalue",children:"RemoveClaimValue"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method RemoveClaimValue(name As %String)\n"})}),"\n",(0,r.jsx)(s.p,{children:"Remove the value of the claim named by the name argument."}),"\n",(0,r.jsx)(s.h3,{id:"getclaimvalue",children:"GetClaimValue"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetClaimValue(name As %String, Output type) As %String\n"})}),"\n",(0,r.jsx)(s.p,{children:"Get the value and type of the claim named by the name argument."}),"\n",(0,r.jsx)(s.h3,{id:"getconvertedclaimvalue",children:"GetConvertedClaimValue"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetConvertedClaimValue(name As %String, Output type) As %String\n"})}),"\n",(0,r.jsx)(s.p,{children:"Get the value and type of the claim named by the name argument with $list value converted to %DynamicArray"}),"\n",(0,r.jsx)(s.h3,{id:"nextclaimvalue",children:"NextClaimValue"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method NextClaimValue(name As %String) As %String\n"})}),"\n",(0,r.jsx)(s.p,{children:"Get the next name from the ClaimValues property"}),"\n",(0,r.jsx)(s.h3,{id:"logproperties",children:"LogProperties"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method LogProperties(ByRef data) [ Internal ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Log a server token"})]})}function c(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>n,x:()=>l});var r=t(96540);const i={},a=r.createContext(i);function n(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);