"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[68632],{92992:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>d,frontMatter:()=>l,toc:()=>i});var s=n(74848),a=n(28453);const l={pagination_prev:null,pagination_next:null},o="%ZEN.Component.dataCombo",i=[{value:"Parameters",id:"parameters",level:2},{value:"DOMAIN",id:"domain",level:3},{value:"USECACHEDIV",id:"usecachediv",level:3},{value:"Properties",id:"properties",level:2},{value:"multiColumn",id:"multicolumn",level:3},{value:"choiceColumn",id:"choicecolumn",level:3},{value:"valueColumn",id:"valuecolumn",level:3},{value:"displayColumns",id:"displaycolumns",level:3},{value:"columnHeaders",id:"columnheaders",level:3},{value:"contentType",id:"contenttype",level:3},{value:"auxColumn",id:"auxcolumn",level:3},{value:"searchKeyLen",id:"searchkeylen",level:3},{value:"sqlLookup",id:"sqllookup",level:3},{value:"showQuery",id:"showquery",level:3},{value:"showEmpty",id:"showempty",level:3},{value:"emptyText",id:"emptytext",level:3},{value:"cached",id:"cached",level:3},{value:"clearOnLoad",id:"clearonload",level:3},{value:"dataLoaded",id:"dataloaded",level:3},{value:"parameters",id:"parameters-1",level:3},{value:"conditions",id:"conditions",level:3},{value:"loadingMessage",id:"loadingmessage",level:3},{value:"modelClass",id:"modelclass",level:3},{value:"onshowDropdown",id:"onshowdropdown",level:3},{value:"itemCount",id:"itemcount",level:3},{value:"Methods",id:"methods",level:2},{value:"%DrawHTML",id:"drawhtml",level:3},{value:"%SetDefaultValues",id:"setdefaultvalues",level:3},{value:"%GetDisplayValue",id:"getdisplayvalue",level:3},{value:"%OnDrawCacheDiv",id:"ondrawcachediv",level:3},{value:"%DrawDropDownContents",id:"drawdropdowncontents",level:3},{value:"LoadDropDownContents",id:"loaddropdowncontents",level:3},{value:"executeQuery",id:"executequery",level:3},{value:"renderDropdown",id:"renderdropdown",level:3},{value:"loadDropdown",id:"loaddropdown",level:3},{value:"clearCache",id:"clearcache",level:3},{value:"getOptionCount",id:"getoptioncount",level:3},{value:"getOptionValue",id:"getoptionvalue",level:3},{value:"getOptionText",id:"getoptiontext",level:3},{value:"getOptionAux",id:"getoptionaux",level:3},{value:"getAuxValue",id:"getauxvalue",level:3},{value:"findDisplayValue",id:"finddisplayvalue",level:3},{value:"LookupDisplayValue",id:"lookupdisplayvalue",level:3},{value:"selectItem",id:"selectitem",level:3},{value:"storeConditionalStyle",id:"storeconditionalstyle",level:3},{value:"restoreConditionalStyle",id:"restoreconditionalstyle",level:3},{value:"setProperty",id:"setproperty",level:3}];function r(e){const t={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"zencomponentdatacombo",children:"%ZEN.Component.dataCombo"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %ZEN.Component.dataCombo Extends (abstractComboBox, querySource) [ Deprecated, Inheritance = right, System = 3 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"A dataCombo is a specialized type of abstractComboBox that presents the user with a set of options that are provided by querying the database."}),"\n",(0,s.jsx)(t.p,{children:"Contents of the dataCombo Dropdown"}),"\n",(0,s.jsxs)(t.p,{children:["The contents of the dataCombo dropdown are provided by creating, executing, and fetching from a %ResultSet object on the server.",(0,s.jsx)(t.br,{}),"\nInitially the contents of the dropdown are empty until the user causes the dropdown to appear at which point a call to the server is made to fetch the dropdown contents. You can change this behavior by setting the cached property.",(0,s.jsx)(t.br,{}),"\nYou can specify how this %ResultSet object is created using the properties inherited from the querySource class.",(0,s.jsx)(t.br,{}),"\nThe number of columns returned by the %ResultSet determines what is displayed within the dropdown list in the following way:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"If the %ResultSet has one column, then the contents of this column are used as both the logical and display values within the dropdown."}),"\n",(0,s.jsx)(t.li,{children:"If the %ResultSet has two (or more) columns, then the contents of the first column supply the logical value and the contents of the second column supply the display values. You can change which columns are used to provide the logical and display values using the valueColumn and choiceColumn properties."}),"\n",(0,s.jsx)(t.li,{children:"If the %ResultSet has more than two columns, then you can use the displayColumns and columnHeaders properties to specify that the dropdown should display multiple columns (only one column will be used for a display value)."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Logical and Display Values"}),"\n",(0,s.jsxs)(t.p,{children:["A combobox has two current values: a logical value (its internal value returned by the getValue method), and a display value (the value displayed to the user). (In some cases, the logical and display values may be the same).",(0,s.jsx)(t.br,{}),"\nUnlike a traditional HTML select control, the ZEN dataCombo does not contain every possible logical/display value within its dropdown list. Instead it constructs the contents of its dropdown list on demand. This behavior makes it much better suited for database applications (where the set of possible values can be long and unwieldy).",(0,s.jsx)(t.br,{}),"\nWhen an application sets the value of a dataCombo control, it sets the ",(0,s.jsx)(t.em,{children:"logical"})," value of the control. Internally, the dataCombo tries to find the display value that best matches this logical value. On the server, this works by executing the SQL statement defined by the sqlLookup property of the dataCombo.",(0,s.jsx)(t.br,{}),"\nOn the client, the dataCombo first looks for a match for a given logical value within its dropdown cache. If it does not find a match, then it executes a server method to execute the sqlLookup query.",(0,s.jsx)(t.br,{}),"\nFor example: suppose we want to define a dataCombo to show a set of Customer names; the display value will be Name while the logical value is the ID of the Customer. To do this we define a dataCombo using 2 SQL statements: `` This does the following:"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"The query defined by sql is called when the dropDown list is displayed. It provides a set of logical (ID) and display (Name) values. The ? parameter is supplied by the contents of the combobox text area at the time the dropdown appears (up to the first 10 characters are used, as specified by searchKeyLen). The dataCombo remembers the results of the last query it ran in a local cache."}),"\n",(0,s.jsx)(t.li,{children:"The query defined by sqlLookup is used to find a specific display value for a specific logical value. The ? in this case is a logical value. This query should only return one row.\nIf, at run-time, the application tries to set the logical value of this combobox, then (if the answer is not in the cache) the sqlLookup query will be executed."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Query Parameters"}),"\n",(0,s.jsx)(t.p,{children:"The query used to provide the contents of the dropdown list may contain one or more run-time ? parameters (e.g., WHERE Name %STARTSWITH ?). If this is the case, the values for query parameters are provided as follows:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["The dataCombo can define a parameters list. The values of these parameters are used as query parameters when executing the query to fill the dropdown list. The parameter values will replace ? parameters in the order in which they appear in the SQL query.",(0,s.jsx)(t.br,{}),"\nIt is possible to modify the values of these parameters within client code, if desired. The application should call the dataCombo's clearCache in this case to make sure that the dropdown query is re-executed with the new values."]}),"\n",(0,s.jsxs)(t.li,{children:["If the searchKeyLen property is set to a non-zero value, ",(0,s.jsx)(t.em,{children:"and"}),' the dataCombo is editable, then the current contents (the first searchKeyLen characters) of the combo input box are used as the value for the first query parameter. (first ? appearing within the query). In this case, additional members of the parameters list are treated as if they start from the second position within the list (the first being the search key). Any additional ? parameters within the SQL are provided from the parameters list, with one exception: if any parameter value is equal to "?", then the current search key value (i.e., the value used for the first parameter) will also be used for this query parameter.']}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(t.h3,{id:"domain",children:"DOMAIN"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Parameter DOMAIN = "%ZEN";\n'})}),"\n",(0,s.jsx)(t.h3,{id:"usecachediv",children:"USECACHEDIV"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Parameter USECACHEDIV = 1;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Indicates that this combobox should cache its dropdown contents."}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"multicolumn",children:"multiColumn"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property multiColumn As %ZEN.Datatype.boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"If true (the default), then display multiple columns in the drop down box if the result set contains more than 2 columns."}),"\n",(0,s.jsx)(t.h3,{id:"choicecolumn",children:"choiceColumn"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property choiceColumn As %ZEN.Datatype.integer(MINVAL = 1, ZENSETTING = 0) [ InitialExpression = 2 ];\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If there are multiple data columns displayed within the dropdown list this is the column number (1-based) of the column that will provide the display value for this control.",(0,s.jsx)(t.br,{}),"\nIf this value is greater than the number of columns in the query then the second column will be used."]}),"\n",(0,s.jsx)(t.h3,{id:"valuecolumn",children:"valueColumn"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property valueColumn As %ZEN.Datatype.integer(MINVAL = 1, ZENSETTING = 0) [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If there are multiple data columns displayed in the dropdown list this is the column number (1-based) of the column that will provide the logical value for this control.",(0,s.jsx)(t.br,{}),"\nIf this value is greater than the number of columns in the query then the first column will be used."]}),"\n",(0,s.jsx)(t.h3,{id:"displaycolumns",children:"displayColumns"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property displayColumns As %ZEN.Datatype.csv(ZENSETTING = 0);\n"})}),"\n",(0,s.jsx)(t.p,{children:"If there are multiple data columns displayed in the dropdown list, this optional property defines a comma-delimited list of the column numbers of the column that should be displayed."}),"\n",(0,s.jsx)(t.h3,{id:"columnheaders",children:"columnHeaders"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property columnHeaders As %ZEN.Datatype.csv(ZENLOCALIZE = 1);\n"})}),"\n",(0,s.jsx)(t.p,{children:"If defined, this is a comma-delimited list of column headers displayed in the dropdown list."}),"\n",(0,s.jsx)(t.h3,{id:"contenttype",children:"contentType"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property contentType As %ZEN.Datatype.string(VALUELIST = ",text,html") [ InitialExpression = "text" ];\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Indicates how display values should be rendered:",(0,s.jsx)(t.br,{}),'\nIf contentType is "text" (the default) then the display values will be HTML-escaped before being rendered.',(0,s.jsx)(t.br,{}),'\nIf contentType is "html" then the display values will not be HTML-escaped before being rendered. Use this when your display values contain HTML markup that you do not want escaped.']}),"\n",(0,s.jsx)(t.h3,{id:"auxcolumn",children:"auxColumn"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property auxColumn As %ZEN.Datatype.string [ InitialExpression = "1" ];\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Optional. If there are multiple data columns displayed in the dropdown list this is the comma-delimited (1-based) list of the column numbers that will provide additional auxiliary values for this control.",(0,s.jsx)(t.br,{}),"\nThis provides a way to supply an additional value that is not the display or logical value.",(0,s.jsx)(t.br,{}),"\nIf this value is not a valid column number, then no auxiliary data will be provided."]}),"\n",(0,s.jsx)(t.h3,{id:"searchkeylen",children:"searchKeyLen"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property searchKeyLen As %ZEN.Datatype.integer(MINVAL = 0) [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If non-zero, this is the maximum number of search characters taken from the combo input box and passed as a parameter to the query (defined by sql that provides the contents of the dropdown box.",(0,s.jsx)(t.br,{}),"\nIf zero, then the contents of the input box are not used as a parameter."]}),"\n",(0,s.jsx)(t.h3,{id:"sqllookup",children:"sqlLookup"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property sqlLookup As %ZEN.Datatype.sql(ZENSETTING = 0);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["(optional) SQL statement that, given a value, finds a display value to show in the combo box. If present, this is used to find a display value for a given logical value.",(0,s.jsx)(t.br,{}),"\nThe value of this property should be an SQL statement that returns a single row containing a display value for a given logical value. When this query is executed, a logical value is provided as a query input parameter (i.e., as a ? within the SQL statement.",(0,s.jsx)(t.br,{}),"\nFor example:",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.code,{children:'sqlLookup="SELECT Name FROM MyApp.MyTable WHERE ID = ?"'})]}),"\n",(0,s.jsx)(t.h3,{id:"showquery",children:"showQuery"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property showQuery As %ZEN.Datatype.boolean(ZENENCRYPT = 1, ZENEXPRESSION = 1) [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Server-side diagnostic flag. If true, display the query used to get data for the dropdown.",(0,s.jsx)(t.br,{}),"\nThis is an encrypted value and cannot be set on the client."]}),"\n",(0,s.jsx)(t.h3,{id:"showempty",children:"showEmpty"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property showEmpty As %ZEN.Datatype.boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"If true (the default), insert an extra row with the value of emptyText at the top of the dropdown, unless required is true."}),"\n",(0,s.jsx)(t.h3,{id:"emptytext",children:"emptyText"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property emptyText As %ZEN.Datatype.caption;\n"})}),"\n",(0,s.jsx)(t.p,{children:'The text to be displayed in the "empty" item displayed if showEmpty is true. The default is "".'}),"\n",(0,s.jsx)(t.h3,{id:"cached",children:"cached"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property cached As %ZEN.Datatype.boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"If true (the default is false) then the following behavior occurs:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"When the page is first displayed, a query is executed to fetch the initial contents of the dropdown. The itemCount property will be set to the number of items within the dropdown."}),"\n",(0,s.jsx)(t.li,{children:"The client will use these results instead of going back to the server to fetch the contents of the dropdown.\nThe clearCache"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"clearonload",children:"clearOnLoad"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property clearOnLoad As %ZEN.Datatype.boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"If this is set true and this dataCombo is bound to a data controller, then the contents of this combo box will be cleared whenever a new instance is loaded into the controller."}),"\n",(0,s.jsx)(t.h3,{id:"dataloaded",children:"dataLoaded"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property dataLoaded As %ZEN.Datatype.boolean(XMLPROJECTION = "none", ZENSETTING = 0) [ InitialExpression = 0, Internal ];\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Internal property",(0,s.jsx)(t.br,{}),"\nclient flag used to track if data for the dropdown has been loaded."]}),"\n",(0,s.jsx)(t.h3,{id:"parameters-1",children:"parameters"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property parameters As list Of %ZEN.Auxiliary.parameter(XMLNAME = "parameter", XMLPROJECTION = "ELEMENT");\n'})}),"\n",(0,s.jsxs)(t.p,{children:["User-defined list of query parameters.",(0,s.jsx)(t.br,{}),"\nThese values are passed on to the user callback function that provides the query for this component in order to provide values for any run-time query parameters."]}),"\n",(0,s.jsx)(t.h3,{id:"conditions",children:"conditions"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property conditions As list Of %ZEN.Auxiliary.condition(XMLPROJECTION = "ELEMENT", XMLREF = 1, XMLTYPECONSTRAINT = "CHOICE");\n'})}),"\n",(0,s.jsx)(t.p,{children:"A list of conditions. These are special expression objects that are evaluated to add data-dependent styles to the dataCombo."}),"\n",(0,s.jsx)(t.h3,{id:"loadingmessage",children:"loadingMessage"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property loadingMessage As %ZEN.Datatype.caption;\n"})}),"\n",(0,s.jsxs)(t.p,{children:['Localized "loading" message displayed by control.',(0,s.jsx)(t.br,{}),"\nThis message is temporarily displayed while a server-side query is running."]}),"\n",(0,s.jsx)(t.h3,{id:"modelclass",children:"modelClass"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property modelClass As %ZEN.Datatype.string(XMLPROJECTION = "none", ZENSETTING = 0) [ Internal ];\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Internal property.",(0,s.jsx)(t.br,{}),"\nUsed for bound dataCombo controls."]}),"\n",(0,s.jsx)(t.h3,{id:"onshowdropdown",children:"onshowDropdown"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property onshowDropdown As %ZEN.Datatype.eventHandler;\n"})}),"\n",(0,s.jsx)(t.p,{children:"onshowDropdown event handler: This event is fired just before the dropdown is displayed. If the event handler returns a value, then this value is used as the filter value for the dropdown query instead of the value typed into the input box."}),"\n",(0,s.jsx)(t.h3,{id:"itemcount",children:"itemCount"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property itemCount As %ZEN.Datatype.integer(XMLPROJECTION = "none", ZENSETTING = 0) [ InitialExpression = 0 ];\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Number of items in the drop down.",(0,s.jsx)(t.br,{}),"\nNote that this value is set as a side effect of populating the dropdown list. When a dataCombo is first displayed, it typically has no entries in its dropdown list until the user causes the dropdown to appear. After this, itemCount will be set to the current number of items in the dropdown.",(0,s.jsx)(t.br,{}),"\nIf you set the cached to true, then the dropdown list will be populated when the control is initially displayed and itemCount will be set. Note that in this case, the value is set ",(0,s.jsx)(t.em,{children:"after"})," the page's %OnAfterCreatePage callback method is invoked."]}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"drawhtml",children:"%DrawHTML"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %DrawHTML()\n"})}),"\n",(0,s.jsx)(t.h3,{id:"setdefaultvalues",children:"%SetDefaultValues"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetDefaultValues()\n"})}),"\n",(0,s.jsx)(t.p,{children:"This method fills in reasonable default values for this control. Used by tools (such as Control Tester) to dynamically create controls."}),"\n",(0,s.jsx)(t.h3,{id:"getdisplayvalue",children:"%GetDisplayValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetDisplayValue(pValue As %String) As %String\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Lookup up the display value for the combobox given a logical value.",(0,s.jsx)(t.br,{}),"\nThis is called when the control is initially drawn."]}),"\n",(0,s.jsx)(t.h3,{id:"ondrawcachediv",children:"%OnDrawCacheDiv"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnDrawCacheDiv() As %Boolean [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"If implemented, allow control to provide initial contents of cache div."}),"\n",(0,s.jsx)(t.h3,{id:"drawdropdowncontents",children:"%DrawDropDownContents"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %DrawDropDownContents(searchParm As %String, Output pCount As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Internal method.",(0,s.jsx)(t.br,{}),"\nServer-side method to provide contents of the list box. This is called from the client."]}),"\n",(0,s.jsx)(t.h3,{id:"loaddropdowncontents",children:"LoadDropDownContents"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method LoadDropDownContents(searchParm As %String, cached As %Boolean = 0) [ Internal, ZenMethod ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Internal method.",(0,s.jsx)(t.br,{}),"\nServer-side method to load contents of the drop down box by executing query associated with this control. If cached, load contents into cache div"]}),"\n",(0,s.jsx)(t.h3,{id:"executequery",children:"executeQuery"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod executeQuery(param) [ Language = javascript ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Execute the server-side associated with this dataCombo using param as an input parameter.",(0,s.jsx)(t.br,{}),"\nNote: the results of running this query are not displayed, instead the results are written to the cache div element maintained by the dataCombo.",(0,s.jsx)(t.br,{}),"\nThe searchKeyLen property is used to truncate the value of param.",(0,s.jsx)(t.br,{}),"\nThe query is executed asynchronously, so results may not be available immediately."]}),"\n",(0,s.jsx)(t.h3,{id:"renderdropdown",children:"renderDropdown"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod renderDropdown() [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Internal method.",(0,s.jsx)(t.br,{}),"\nCreate contents of drop down box using DHTML. If loadOnly is defined and true, then load the contents into the cached div, but do not show."]}),"\n",(0,s.jsx)(t.h3,{id:"loaddropdown",children:"loadDropdown"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod loadDropdown(value, show) [ Internal, Language = javascript ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Internal method.",(0,s.jsx)(t.br,{}),"\nCreate contents of drop down box using DHTML. value is used as search filter. If show is false, then load the contents into the cached div, but do not show."]}),"\n",(0,s.jsx)(t.h3,{id:"clearcache",children:"clearCache"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod clearCache() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Clears any cached data held by this control. This will force the dropdown to re-execute its query the next time the dropdown is displayed."}),"\n",(0,s.jsx)(t.h3,{id:"getoptioncount",children:"getOptionCount"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getOptionCount() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return the current number of items within in the dropdown list."}),"\n",(0,s.jsx)(t.h3,{id:"getoptionvalue",children:"getOptionValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getOptionValue(idx) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return the logical value of the given item (0-based) in the dropdown list."}),"\n",(0,s.jsx)(t.h3,{id:"getoptiontext",children:"getOptionText"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getOptionText(idx) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return the display value for the given item (0-based) in the dropdown list."}),"\n",(0,s.jsx)(t.h3,{id:"getoptionaux",children:"getOptionAux"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getOptionAux(idx) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return the auxiliary value for the given item (0-based) in the dropdown list."}),"\n",(0,s.jsx)(t.h3,{id:"getauxvalue",children:"getAuxValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod getAuxValue() [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Return the current auxiliary value (if any) for the dropdown list."}),"\n",(0,s.jsx)(t.h3,{id:"finddisplayvalue",children:"findDisplayValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod findDisplayValue(value) [ Language = javascript ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Given a logical value, lookup the display value within the current set of options. Returns null if no match is found.",(0,s.jsx)(t.br,{}),"\nSubclasses may override this to add additional lookup behavior."]}),"\n",(0,s.jsx)(t.h3,{id:"lookupdisplayvalue",children:"LookupDisplayValue"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method LookupDisplayValue(value As %String) As %String [ Internal, ZenMethod ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Internal method.",(0,s.jsx)(t.br,{}),"\nServer-side method to find a display value for a logical value by executing the sqlLookup query associated with this control."]}),"\n",(0,s.jsx)(t.h3,{id:"selectitem",children:"selectItem"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod selectItem(idx, show, update) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"User has selected an item in the DropDown box. If show is true, make item visible. If update is true, update value of control."}),"\n",(0,s.jsx)(t.h3,{id:"storeconditionalstyle",children:"storeConditionalStyle"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod storeConditionalStyle(trEl) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Stores the style for trEl, a row in the dropdown table. This is used to handle selected-row style."}),"\n",(0,s.jsx)(t.h3,{id:"restoreconditionalstyle",children:"restoreConditionalStyle"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod restoreConditionalStyle(trEl) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Retores the conditional style for trEl, a row in the dropdown table. This is used to handle selected-row style."}),"\n",(0,s.jsx)(t.h3,{id:"setproperty",children:"setProperty"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClientMethod setProperty(property, value, value2) [ Language = javascript ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Set the value of a named property."})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(96540);const a={},l=s.createContext(a);function o(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);