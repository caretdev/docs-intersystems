"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[57441],{23686:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>d,frontMatter:()=>r,toc:()=>l});var s=n(74848),a=n(28453);const r={pagination_prev:null,pagination_next:null},i="%SQL.Statement",l=[{value:"Dynamic SQL",id:"dynamic-sql",level:2},{value:"Properties",id:"properties",level:2},{value:"%Dialect",id:"dialect",level:3},{value:"%ObjectSelectMode",id:"objectselectmode",level:3},{value:"%SchemaPath",id:"schemapath",level:3},{value:"%SelectMode",id:"selectmode",level:3},{value:"%StatementActualArgs",id:"statementactualargs",level:3},{value:"%msqlvar",id:"msqlvar",level:3},{value:"%DialectParameterMetadata",id:"dialectparametermetadata",level:3},{value:"%RTPCRuntimeCQName",id:"rtpcruntimecqname",level:3},{value:"%StatementArgs",id:"statementargs",level:3},{value:"%StatementArgCount",id:"statementargcount",level:3},{value:"%PreparedStatement",id:"preparedstatement",level:3},{value:"%StatementGUID",id:"statementguid",level:3},{value:"%StatementHash",id:"statementhash",level:3},{value:"%Metadata",id:"metadata",level:3},{value:"%StatementText",id:"statementtext",level:3},{value:"%StatementType",id:"statementtype",level:3},{value:"Methods",id:"methods",level:2},{value:"%DialectSet",id:"dialectset",level:3},{value:"bindArguments",id:"bindarguments",level:3},{value:"%PreparedStatementSet",id:"preparedstatementset",level:3},{value:"%ExecDirect",id:"execdirect",level:3},{value:"%ExecDirectNoPriv",id:"execdirectnopriv",level:3},{value:"%ExecDirectNoAudit",id:"execdirectnoaudit",level:3},{value:"%ExecDirectNoPrivNoAudit",id:"execdirectnoprivnoaudit",level:3},{value:"%Prepare",id:"prepare",level:3},{value:"%PrepareClassQuery",id:"prepareclassquery",level:3},{value:"prepare",id:"prepare-1",level:3},{value:"prepareForServer",id:"prepareforserver",level:3},{value:"preparse",id:"preparse",level:3},{value:"%Execute",id:"execute",level:3},{value:"execute",id:"execute-1",level:3},{value:"%ShardExecute",id:"shardexecute",level:3},{value:"%MetadataGet",id:"metadataget",level:3},{value:"%OnClose",id:"onclose",level:3},{value:"%OnNew",id:"onnew",level:3},{value:"%Display",id:"display",level:3},{value:"%GetImplementationDetails",id:"getimplementationdetails",level:3},{value:"%ClassPath",id:"classpath",level:3}];function c(e){const t={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"sqlstatement",children:"%SQL.Statement"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %SQL.Statement Extends %Library.RegisteredObject [ ClientDataType = HANDLE, Final, System = 4 ]\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"For details on using this class"}),", see ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSES+%25SQL.Statement",children:"Using Dynamic SQL"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The sample class mentioned here (Sample.Person) is part of ",(0,s.jsx)(t.a,{href:"https://github.com/intersystems/Samples-Data",children:"https://github.com/intersystems/Samples-Data."})," See ",(0,s.jsx)(t.a,{href:"/csp/docbook/DocBook.UI.Page.cls?FIND=landing+githubsamples",children:"Downloading Samples"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"%SQL.Statement implements an interface to prepare and execute dynamic SQL statements."}),"\n",(0,s.jsx)(t.h2,{id:"dynamic-sql",children:"Dynamic SQL"}),"\n",(0,s.jsx)(t.p,{children:"The %SQL.Statement class implements an interface for managing dynamic SQL statements. The interface consists of the %Prepare, %Execute, %ExecDirect methods and the %Dialect, %Metadata, %SchemaPath, and %SelectMode properties."}),"\n",(0,s.jsx)(t.p,{children:"To prepare and execute a dynamic SQL statement, use an instance of %SQL.Statement, such as:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:'set tStatement = ##class(%SQL.Statement).%New(2,"Sample")'})}),"\n",(0,s.jsxs)(t.p,{children:["%New accepts three optional parameters as follows: %New(selectmode,schemapath,dialect) where ",(0,s.jsx)(t.em,{children:"selectmode"})," is one of the allowed values of the %SelectMode property of this class, ",(0,s.jsx)(t.em,{children:"schemapath"})," is one of the allowed values of the %SchemaPath property of this class, and ",(0,s.jsx)(t.em,{children:"dialect"})," is one of the allowed values of the %Dialect property of this class. You can explicitly set these properties at any time; the value of each affects subsequent statement preparation and execution."]}),"\n",(0,s.jsx)(t.p,{children:"Next, prepare the dynamic statement by invoking the %Prepare method. %Prepare() accepts an SQL statement in the form of a simple value or in an array passed by reference. For an array, the value of the base node is the number of lines in the array and each node\u2019s subscript specifies its line number; the value of each subnode is a portion of the SQL statement. An example of preparing an array is:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:'set tSQL = 3 set tSQL(1) = "select %ID as id, Name, DOB, Home_State" set tSQL(2) = "from Person where Age > 80" set tSQL(3) = "order by 2" set tStatus = tStatement.%Prepare(.tSQL)'})}),"\n",(0,s.jsx)(t.p,{children:"%Prepare returns a status value that indicates success or failure. If the statement is successfully prepared, the next step is to execute it by invoking the %Execute method."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"set tResult = tStatement.%Execute()"})}),"\n",(0,s.jsx)(t.p,{children:"The %Execute method returns an instance of the %SQL.StatementResult class. Refer to that class for more information on the result object interface. All result objects support a %Display() method that is useful for testing."}),"\n",(0,s.jsx)(t.p,{children:"The following example demonstrates the use of the %Prepare(), %Execute, and %Display() methods:"}),"\n",(0,s.jsx)(t.p,{children:"SAMPLES>s tStatus = tStatement.%Prepare(.tSQL)   SAMPLES>w tStatus  1  SAMPLES>s tResult = tStatement.%Execute()   SAMPLES>d tResult.%Display()  id    Name                  DOB           Home_State  99    Finn,George V.        03/23/1928    MA  140   Hanson,James K.       04/02/1928    VT  14    Klein,Michael X.      06/17/1923    WV  159   Klingman,Brenda U.    07/09/1924    WA  49    Paladino,Rhonda H.    06/29/1923    AR  63    Vonnegut,Nellie K.    03/24/1926    HI  146   Zimmerman,Martin K.   05/25/1924    OH   7 Rows(s) Affected"}),"\n",(0,s.jsx)(t.p,{children:"Once an SQL statement has been successfully prepared, its %Metadata property is available. %Metadata is an instance of the %SQL.StatementMetadata class. %SQL.Metadata implements a %Display() method that is useful for examining the metadata interactively, such as:"}),"\n",(0,s.jsx)(t.p,{children:"SAMPLES>do tStatement.%Metadata.%Display()  Columns (property 'columns'):  Column Name  Type Prec Scale Null  -----------  ---- ---- ----- ----  id              4   10     0    0 id           Person       Sample       0            Y  N  N  Y0    1  Name           12   50     0    0 Name         Person       Sample       0            N  N  N  N0    0  DOB             9   10     0    1 DOB          Person       Sample       0            N  N  N  N0    0  Home_State     12    2     0    1 Home_State   Person       Sample       0            N  N  N  N0    0   Statement Parameters (property 'parameters'):   Nbr. Type precision scale nullable colName      columntype  ---- ---- --------- ----- -------- ------------ ----------     1    4     10        0     1    %parm(1)        1     2   12      2        0     1    %parm(2)        1   Formal Parameters (property 'formalParameters'):   Nbr. Type precision scale nullable colName      columntype  ---- ---- --------- ----- -------- ------------ ----------     2    4     10        0     1    %parm(1)        1     2   12      2        0     1    %parm(2)        1   Objects:   Column Name    Extent    ExportCall  -----------    ------    ----------  %%ID        Sample.Person    %QuickLoad^Sample.Person.T1(%rowid,%nolock,0,0,1)  SAMPLES>"}),"\n",(0,s.jsx)(t.p,{children:"You can execute a successfully prepared statement repeatedly. This is most useful when the statement includes parameters, where a parameter is defined in the SQL statement source by a question mark (\u201c?\u201d). A statement may include an arbitrary number of parameters. (There are system limitations that limit the number of dynamic parameters; up to 200 are always supported.)"}),"\n",(0,s.jsx)(t.p,{children:"The %Execute method accepts parameter values in the order in which they appear in the source statement. For example:"}),"\n",(0,s.jsx)(t.p,{children:'SAMPLES>set tSQL=3   SAMPLES>set tSQL(1)="select %ID as id,Name,DOB,Home_State"   SAMPLES>set tSQL(2)="from Person where Age > ? and Home_State = ?"   SAMPLES>set tSQL(3)="order by 2"   SAMPLES>set tStatus = tStatement.%Prepare(.tSQL)   SAMPLES>set tResult = tStatement.%Execute(80,"VT")   SAMPLES>do tResult.%Display()  id     Name                DOB           Home_State  140    Hanson,James K.     04/02/1928    VT   1 Rows(s) Affected  SAMPLES>set tResult = tStatement.%Execute(50,"VT")   SAMPLES>do tResult.%Display()  id     Name                DOB           Home_State  3      Eagleman,Emilio N.  09/01/1946    VT  140    Hanson,James K.     04/02/1928    VT  167    Hertz,Keith O.      01/01/1952    VT   3 Rows(s) Affected  SAMPLES>'}),"\n",(0,s.jsx)(t.p,{children:"You can also use the same statement object for many different statements by simply invoking %Prepare with the new statement. This is because %Prepare() initializes the statement\u2019s execution plan and metadata. Also, an arbitrary number of statement objects can coexist in the same process."}),"\n",(0,s.jsx)(t.p,{children:"You can also prepare and execute dynamic SQL statements by calling %ExecDirect. This method prepares the statement and, if it prepares the statement successfully, executes it with the supplied argument values. An optional by-reference parameter returns an instance of %SQL.Statement; this instance contains the currently prepared statement. You can then execute that statement instance just as if it had been instantiated by invoking %New() followed by a call to %Prepare(). You can also use that statement instance to prepare other dynamic statements just as if it were instantiated by %New()."}),"\n",(0,s.jsx)(t.p,{children:"If an error occurs during either statement preparation or execution, then the error is described in the result object properties of %SQLCODE and %Message. Always check the result property %SQLCODE for an error following %Execute() and %ExecDirect()."}),"\n",(0,s.jsx)(t.p,{children:'SAMPLES>set tResult = ##class(%SQL.Statement).%ExecDirect(.tStatement,"select name,age from Sample.Person where age > ? and home_state = ?",50,"VT")   SAMPLES>write tResult.%SQLCODE  0  SAMPLES>do tResult.%Display()  Name                  Age  Eagleman,Emilio N.    62  Hanson,James K.       81  Hertz,Keith O.        57   3 Rows(s) Affected   SAMPLES>write tStatement   1@%SQL.Statement   SAMPLES>set tResult = tStatement.%Execute(40,"AK")   SAMPLES>do tResult.%Display()  Name                  Age  Finn,Quentin O.       66   1 Rows(s) Affected   SAMPLES>'}),"\n",(0,s.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(t.h3,{id:"dialect",children:"%Dialect"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %Dialect As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"%Dialect defines the SQL dialect used to prepare dynamic SQL statements. Valid values are IRIS, MSSQLSERVER, MSSQL, and SYBASE. The default is IRIS. Support for MSSQLSERVER and SYBASE dialects is limited to a subset of the TSQL grammar supported by the InterSystems IRIS TSQL language mode."}),"\n",(0,s.jsx)(t.h3,{id:"objectselectmode",children:"%ObjectSelectMode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %ObjectSelectMode As %Library.Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"%ObjectSelectMode allows you to specify how columns whose type class is a swizzleable class will be defined in the result set class generated from a SELECT statement."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"If %ObjectSelectMode is false (the default), then the property corresponding to the swizzleable column will be defined in result sets as a simple literal type corresponding to the SQL table's ROWID type."}),"\n",(0,s.jsx)(t.li,{children:"If %ObjectSelectMode is true, then the property will be defined with the column's declared type. That means that accessing the result set property will trigger swizzling."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"schemapath",children:"%SchemaPath"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property %SchemaPath As %String(MAXLEN = "");\n'})}),"\n",(0,s.jsx)(t.p,{children:"%SchemaPath provides a list of schema names for resolving unqualified names during statement preparation. By default, its value is null; to set its value, use a comma-delimited list of schema names:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:'Set %SQL.Statement.%SchemaPath = "My_Schema,Your_Schema,DEFAULT_SCHEMA"'})}),"\n",(0,s.jsx)(t.p,{children:"This is equivalent to the macro-preprocessor directive for embedded SQL:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"#sqlcompile PATH = My_Schema,Your_Schema,DEFAULT_SCHEMA"})}),"\n",(0,s.jsx)(t.p,{children:"PATH is a search path: if the unqualified name is found in a schema in the PATH, then this schema is used to qualify the name and no further searching is performed."}),"\n",(0,s.jsx)(t.p,{children:"You can set the value of %SchemaPath at any time, but it is only used by the %Prepare method."}),"\n",(0,s.jsx)(t.p,{children:"%SchemaPath can contain special schema name tokens that are resolved by the SQL compiler. Special tokens are:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"CURRENT_SCHEMA is the current default schema. If the %SQL.Statement call is defined in a class method, CURRENT_SCHEMA is the schema mapped to the current class package. If the statement is defined in a .MAC routine, CURRENT_SCHEMA is the configuration default schema."}),"\n",(0,s.jsx)(t.li,{children:"CURRENT_PATH is the currently defined schema search path. You can use this to add an additional schema to the search path while retaining the current search path."}),"\n",(0,s.jsx)(t.li,{children:"DEFAULT_SCHEMA specifies the use of the system-defined default schema."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"You can also set %SchemaPath to a PATH value that is constructed from a given class definition; simply set %SchemaPath to ##class(%SQL.Statement).%ClassPath(classname)."}),"\n",(0,s.jsx)(t.h3,{id:"selectmode",children:"%SelectMode"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %SelectMode As %Library.String [ InitialExpression = {$zu(115,5)} ];\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This property is set on instantiation to the current select mode as returned by $system.SQL.GetSelectMode(); see %SYSTEM.SQL. You can set this property directly. The statement object uses this property to establish the SQL SELECTMODE value used by dynamic statements.",(0,s.jsx)(t.br,{}),"\nPossible values are:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"0 for LOGICAL mode."}),"\n",(0,s.jsx)(t.li,{children:"1 for ODBC mode."}),"\n",(0,s.jsx)(t.li,{children:"2 for DISPLAY mode."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"statementactualargs",children:"%StatementActualArgs"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property %StatementActualArgs As %String(MAXLEN = "") [ Internal, Private ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"%StatementActualArgs are the actual values bound to formal statement arguments. This value is established during %Prepare from the %StatementArgs value. This value is used to form the actual arguments passed when executing the currently prepared statement. The value of %StatementActualArgs includes and literals and host variables replaced during preparsing as well as the local variables used to hold actual parameter values passed to %Execute. We use two types of locals - %parm(parameter_ordinal_position) for non-CALL statements and parm_parameter_ordinal_position (for example, parm1 for the first '?') for CALL statements. The reason for the difference is that we need to preserve 'undefinedness' of parameters passed to SQL invoked routines."}),"\n",(0,s.jsx)(t.h3,{id:"msqlvar",children:"%msqlvar"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %msqlvar As %String [ Internal ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"This property is used to set %msqlvars during the compilation of the cached query. If defined, %msqlvars will be placed into the cached query methods as #EXECUTE set %msqlvar=<%msqlvar>"}),"\n",(0,s.jsx)(t.h3,{id:"dialectparametermetadata",children:"%DialectParameterMetadata"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %DialectParameterMetadata As %String [ Internal ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"This property is for xDBC DialectExecuteParameter to define the sqlBatch method with the proper formalspec This property is for internal use only"}),"\n",(0,s.jsx)(t.h3,{id:"rtpcruntimecqname",children:"%RTPCRuntimeCQName"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %RTPCRuntimeCQName As %String;\n"})}),"\n",(0,s.jsx)(t.p,{children:"This property is used to keep track of RTPC runtime cached query name for the query that triggers RTPC"}),"\n",(0,s.jsx)(t.h3,{id:"statementargs",children:"%StatementArgs"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property %StatementArgs As %String(MAXLEN = "") [ Internal, Private ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"statementArgs are literals, host variables (not supported here), and parameters (as ?) This value is established during preparsing and is a $list consisting of n*2 elements where 'n' is the number of arguments discovered by the preparser. For a non-empty list, the first element of the list is the argType and the second is the argValue for the first argument discovered. This structure repeats for each argument. Arguments are either constants, (argType = 'C', argValue is a literal), host variables (argType = 'V', argValue is a legal COS identifier), or replacable parameter (argType = '?', argValue = '?'). This value is processed during %Prepare to construct the %StatementActualArgs value. This value is retained for metadata reporting as the actual statement prepared might have a different formal argument specification."}),"\n",(0,s.jsx)(t.h3,{id:"statementargcount",children:"%StatementArgCount"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %StatementArgCount As %Integer [ InitialExpression = 0, Internal, Private ];\n"})}),"\n",(0,s.jsx)(t.h3,{id:"preparedstatement",children:"%PreparedStatement"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %PreparedStatement As %ObjectHandle [ Internal, Private ];\n"})}),"\n",(0,s.jsx)(t.h3,{id:"statementguid",children:"%StatementGUID"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %StatementGUID As %Binary [ Internal, Private ];\n"})}),"\n",(0,s.jsx)(t.h3,{id:"statementhash",children:"%StatementHash"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %StatementHash As %Binary [ Internal, Private ];\n"})}),"\n",(0,s.jsx)(t.h3,{id:"metadata",children:"%Metadata"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %Metadata As %SQL.StatementMetadata;\n"})}),"\n",(0,s.jsx)(t.p,{children:"%Metadata is the statement descriptor. It is an instance of %SQL.StatementMetadata."}),"\n",(0,s.jsx)(t.h3,{id:"statementtext",children:"%StatementText"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Property %StatementText As %String(MAXLEN = "") [ Internal, MultiDimensional, Private ];\n'})}),"\n",(0,s.jsx)(t.p,{children:"Internal property containing the actual SQL statement submitted to prepare()."}),"\n",(0,s.jsx)(t.h3,{id:"statementtype",children:"%StatementType"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Property %StatementType As %Integer [ Internal, Private ];\n"})}),"\n",(0,s.jsx)(t.p,{children:"Integer value indicating the type of statement."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"1"}),(0,s.jsx)(t.th,{children:"SELECT"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"2"}),(0,s.jsx)(t.td,{children:"INSERT (also 'INSERT OR UPDATE')"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"3"}),(0,s.jsx)(t.td,{children:"UPDATE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"4"}),(0,s.jsx)(t.td,{children:"DELETE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"5"}),(0,s.jsx)(t.td,{children:"COMMIT"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"6"}),(0,s.jsx)(t.td,{children:"ROLLBACK"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"7"}),(0,s.jsx)(t.td,{children:"GRANT"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"8"}),(0,s.jsx)(t.td,{children:"REVOKE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"9"}),(0,s.jsx)(t.td,{children:"CREATE TABLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"10"}),(0,s.jsx)(t.td,{children:"ALTER TABLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"11"}),(0,s.jsx)(t.td,{children:"DROP TABLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"12"}),(0,s.jsx)(t.td,{children:"CREATE VIEW"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13"}),(0,s.jsx)(t.td,{children:"ALTER VIEW"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"14"}),(0,s.jsx)(t.td,{children:"DROP VIEW"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"15"}),(0,s.jsx)(t.td,{children:"CREATE INDEX"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"16"}),(0,s.jsx)(t.td,{children:"ALTER INDEX (Not supported)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"17"}),(0,s.jsx)(t.td,{children:"DROP INDEX"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"18"}),(0,s.jsx)(t.td,{children:"CREATE ROLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"19"}),(0,s.jsx)(t.td,{children:"DROP ROLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"20"}),(0,s.jsx)(t.td,{children:"SET TRANSACTION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"21"}),(0,s.jsx)(t.td,{children:"START TRANSACTION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"22"}),(0,s.jsx)(t.td,{children:"%INTRANSACTION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"23"}),(0,s.jsx)(t.td,{children:"%BEGTRANS (Alias for START TRANSACTION)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"24"}),(0,s.jsx)(t.td,{children:"%INTRANS (Alias for %INTRANSACTION)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"25"}),(0,s.jsx)(t.td,{children:"GET (Not supported)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"26"}),(0,s.jsx)(t.td,{children:"SET OPTION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"27"}),(0,s.jsx)(t.td,{children:"STATISTICS (UPDATE STATISTICS, not supported))"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"28"}),(0,s.jsx)(t.td,{children:"%CHECKPRIV"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"29"}),(0,s.jsx)(t.td,{children:"CREATE USER"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"30"}),(0,s.jsx)(t.td,{children:"ALTER USER"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"31"}),(0,s.jsx)(t.td,{children:"DROP USER"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"32"}),(0,s.jsx)(t.td,{children:"%CHECKPRIV (SQL Admin Privilege)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"33"}),(0,s.jsx)(t.td,{children:"GRANT (SQL Admin Privilege)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"34"}),(0,s.jsx)(t.td,{children:"REVOKE (SQL Admin Privilege)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"35"}),(0,s.jsx)(t.td,{children:"CREATE FUNCTION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"36"}),(0,s.jsx)(t.td,{children:"CREATE METHOD"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"37"}),(0,s.jsx)(t.td,{children:"CREATE PROCEDURE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"38"}),(0,s.jsx)(t.td,{children:"CREATE QUERY"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"39"}),(0,s.jsx)(t.td,{children:"DROP FUNCTION"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"40"}),(0,s.jsx)(t.td,{children:"DROP METHOD"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"41"}),(0,s.jsx)(t.td,{children:"DROP PROCEDURE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"42"}),(0,s.jsx)(t.td,{children:"DROP QUERY"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"43"}),(0,s.jsx)(t.td,{children:"CREATE TRIGGER"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"44"}),(0,s.jsx)(t.td,{children:"DROP TRIGGER"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"45"}),(0,s.jsx)(t.td,{children:"CALL"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"46"}),(0,s.jsx)(t.td,{children:"SAVEPOINT"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"47"}),(0,s.jsx)(t.td,{children:"LOCK TABLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"48"}),(0,s.jsx)(t.td,{children:"UNLOCK TABLE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"49"}),(0,s.jsx)(t.td,{children:"CREATE DATABASE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"50"}),(0,s.jsx)(t.td,{children:"DROP DATABASE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"51"}),(0,s.jsx)(t.td,{children:"USE DATABASE"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"99"}),(0,s.jsx)(t.td,{children:"Anything not list above"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"dialectset",children:"%DialectSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %DialectSet(pValue As %String = "") As %Status\n'})}),"\n",(0,s.jsx)(t.h3,{id:"bindarguments",children:"bindArguments"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method bindArguments(ByRef pActual As %String(MAXLEN=""), ByRef %CallArgs As %String) As %Integer [ Internal, Private ]\n'})}),"\n",(0,s.jsx)(t.h3,{id:"preparedstatementset",children:"%PreparedStatementSet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %PreparedStatementSet(pPS As %ObjectHandle) As %Status [ ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"execdirect",children:"%ExecDirect"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ExecDirect(ByRef pHStatement As %SQL.Statement = {$$$NULLOREF}, ByRef pStatementText As %RawString = "", %parm...) As %SQL.StatementResult [ PublicList = SQLCODE ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Prepare and execute an SQL statement. If no statement handle is allocated in pHStatement then a new statement handle will be allocated and returned by reference. That behavior is different from SQLPrepare. Formal Parameters:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"pHStatement - OPTIONAL (byref) the statement handle. If an actual arg is passed by reference then it will be populated with an OREF to a new statement object."}),"\n",(0,s.jsx)(t.li,{children:"pStatementText - (byref) SQL statement text. This can be an array of SQL statement lines with the base node set to the number of lines or - it can be a single string."}),"\n",(0,s.jsxs)(t.li,{children:["%parm... - variable number of arguments that represent the values to be bound to parameters contained in pStatementText. Only parameters with input direction (input or input-output) are actually used but a position for each '?' contained in pStatementText needs to be represented. In the statement:",(0,s.jsx)(t.br,{}),"\n? = call Sample.PersonSets(?,?)",(0,s.jsx)(t.br,{}),"\nThe %parms... list must contain an empty position for the return value. An example of a call to %ExecDirect for such a statement is: ",(0,s.jsx)(t.code,{children:'set tRes = ##class(%SQL.Statement).%ExecDirect(.tStmt,"?=call Sample.PersonSets(?,?)",,"A","NY")'}),' In this example, the return value is allocated a position in the %parms list (the ,,), "A" is bound to the first argument passed to Sample.PersonSets and "NY" is bound to the second.\nThis method returns a %SQL.StatementResult object.']}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"execdirectnopriv",children:"%ExecDirectNoPriv"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ExecDirectNoPriv(ByRef pHStatement As %SQL.Statement = {$$$NULLOREF}, ByRef pStatementText As %RawString = "", %parm...) As %SQL.StatementResult [ PublicList = SQLCODE ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"This method returns a %SQL.StatementResult object. This is the same as %ExecDirect but no SQL privileges are checked."}),"\n",(0,s.jsx)(t.h3,{id:"execdirectnoaudit",children:"%ExecDirectNoAudit"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ExecDirectNoAudit(ByRef pHStatement As %SQL.Statement = {$$$NULLOREF}, ByRef pStatementText As %RawString = "", %parm...) As %SQL.StatementResult [ PublicList = SQLCODE ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"This method returns a %SQL.StatementResult object. This is the same as %ExecDirect but the statement is not auditted."}),"\n",(0,s.jsx)(t.h3,{id:"execdirectnoprivnoaudit",children:"%ExecDirectNoPrivNoAudit"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ExecDirectNoPrivNoAudit(ByRef pHStatement As %SQL.Statement = {$$$NULLOREF}, ByRef pStatementText As %RawString = "", %parm...) As %SQL.StatementResult [ PublicList = SQLCODE ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"This method returns a %SQL.StatementResult object. This is the same as %ExecDirect but no SQL privileges are checked and the statement is not auditted."}),"\n",(0,s.jsx)(t.h3,{id:"prepare",children:"%Prepare"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Prepare(ByRef pStatementText As %RawString, checkPriv As %Boolean = 1, noAudit As %Boolean = 0) As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Prepares an SQL statement and returns a %Status indicating success or failure. You can pass the statement as a simple string or an array of lines with the root containing the number of lines. If this method returns success, use %Execute to execute the class query and obtain the result set."}),"\n",(0,s.jsx)(t.p,{children:"The checkPriv argument can be used to not perform SQL privilege checking on the statement if checkPriv=0. The default is that privileges will be checked."}),"\n",(0,s.jsx)(t.h3,{id:"prepareclassquery",children:"%PrepareClassQuery"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %PrepareClassQuery(pClassName As %String = "", pQueryName As %String = "", checkPriv As %Boolean = 1) As %Library.Status\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Generates the appropriate CALL statement for invoking a class query, prepares the generated statement, and returns a %Status indicating success or failure. For example, the following prepares the FileSet query of the %Library.File class: ",(0,s.jsx)(t.code,{children:'set status = stmt.%PrepareClassQuery("%Library.File","FileSet")'})," If this method returns success, use %Execute to execute the class query and obtain the result set."]}),"\n",(0,s.jsx)(t.p,{children:"All parameters defined in the formal specification of the query are assigned placeholder '?' in the generated CALL statement. Actual values for those parameters can be passed in the %Execute() call. %Metadata is available after a successful prepare."}),"\n",(0,s.jsxs)(t.p,{children:["Because this method generates a CALL statement, the executed class query must have the ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=CLASSDEF+SQLPROC+QUERY",children:"SqlProc"})," keyword set to True. Class queries defined with SqlProc = False cannot be called by %PrepareClassQuery."]}),"\n",(0,s.jsx)(t.p,{children:"The checkPriv argument can be used to not perform SQL EXECUTE privilege checking on the class queryes procedure call if checkPriv=0. The default is that privileges will be checked."}),"\n",(0,s.jsx)(t.h3,{id:"prepare-1",children:"prepare"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method prepare(ByRef pStatementText As %RawString = "", checkPriv As %Boolean = 1, noAudit As %Boolean = 0) [ Internal ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Internal method that does the actual work of preparing a statement. This method throws an exception if any error is encountered."}),"\n",(0,s.jsx)(t.h3,{id:"prepareforserver",children:"prepareForServer"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method prepareForServer(ByRef pServerStatement As %Binary, pStatementHandle As %Integer = 0, ByRef pMetadata As %Binary = "") [ Internal ]\n'})}),"\n",(0,s.jsx)(t.p,{children:'Internal method that is called by the xDBC server. It constructs metadata specific to the server and populates the server statement object. (%qsc(%qacn) ($$$CQClassname) is where the server "statement object" is kept). **NOTE** THIS METHOD IS INTERNAL, ISC USE ONLY!!'}),"\n",(0,s.jsx)(t.h3,{id:"preparse",children:"preparse"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod preparse(ByRef pStatementText, ByRef pStatementPreparsed, ByRef pStatementArgs) As %Integer [ PublicList = SQLCODE ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"execute",children:"%Execute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Execute(%parm...) As %SQL.StatementResult [ CodeMode = call, PublicList = SQLCODE ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Executes the current statement and returns the result as an instance of %SQL.StatementResult. The result of the execute is always the return value. Success/Failure information is reported in the result object as %SQLCODE, %Message, %ROWCOUNT, and/or %ROWID."}),"\n",(0,s.jsx)(t.p,{children:"The %Execute() method accepts parameter values in the order in which they appear in the source statement. For example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'SAMPLES>set tSQL=3     SAMPLES>set tSQL(1)="select %ID as id,Name,DOB,Home_State"     SAMPLES>set tSQL(2)="from Person where Age > ? and Home_State = ?"     SAMPLES>set tSQL(3)="order by 2"     SAMPLES>set tStatus = tStatement.%Prepare(.tSQL)     SAMPLES>set tResult = tStatement.%Execute(80,"VT")     SAMPLES>do tResult.%Display()    id     Name                DOB           Home_State    140    Hanson,James K.     04/02/1928    VT     1 Rows(s) Affected    SAMPLES>set tResult = tStatement.%Execute(50,"VT")     SAMPLES>do tResult.%Display()    id     Name                DOB           Home_State    3      Eagleman,Emilio N.  09/01/1946    VT    140    Hanson,James K.     04/02/1928    VT    167    Hertz,Keith O.      01/01/1952    VT     3 Rows(s) Affected    SAMPLES>    \n'})}),"\n",(0,s.jsx)(t.p,{children:"You can also use the same statement object for many different statements by simply invoking %Prepare with the new statement. This is because %Prepare() initializes the statement\u2019s execution plan and metadata. Also, an arbitrary number of statement objects can coexist in the same process."}),"\n",(0,s.jsx)(t.p,{children:"The %parm... input parameter represents a variable number of arguments that represent the values to be bound to parameters contained in pStatementText. Only parameters with input direction (input or input-output) are actually used but the position of each '?' contained in the source statement must be maintained."}),"\n",(0,s.jsxs)(t.p,{children:['An example of calling %Execute for a prepared statement "? = call Sample.PersonSets(?,?)" is: ',(0,s.jsx)(t.code,{children:'set tStatement = ##class(%SQL.Statement).%New() set tStatus = tStatement.%Prepare("?=call Sample.PersonSets(?,?)") set tResult = tStatement.%Execute(,"A","NY")'}),' In this example, the return value is allocated a position in the %parms list (the \',\'), "A" is bound to the first argument passed to Sample.PersonSets and "NY" is bound to the second.']}),"\n",(0,s.jsx)(t.h3,{id:"execute-1",children:"execute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method execute(%parm...) As %SQL.StatementResult [ PublicList = SQLCODE ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"shardexecute",children:"%ShardExecute"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %ShardExecute(parm As %String(MAXLEN="")) As %SQL.StatementResult [ Internal, PublicList = SQLCODE ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"Shard-specific execute method, identical to regular %Execute except for argument binding."}),"\n",(0,s.jsx)(t.h3,{id:"metadataget",children:"%MetadataGet"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %MetadataGet() As %SQL.StatementMetadata [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status [ Internal, Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Purges the just-used cached query for certain statement types, like DDL statements."}),"\n",(0,s.jsx)(t.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %OnNew(pSelectMode As %RawString, pPath As %RawString, pDialect As %RawString) As %Status [ Internal, Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"%OnNew accepts three optional parameters, the values of these three parameters are the initial values of %SelectMode, %SchemaPath and %Dialect."}),"\n",(0,s.jsx)(t.h3,{id:"display",children:"%Display"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method %Display()\n"})}),"\n",(0,s.jsx)(t.p,{children:"Displays the details of the currently prepared statement."}),"\n",(0,s.jsx)(t.h3,{id:"getimplementationdetails",children:"%GetImplementationDetails"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'Method %GetImplementationDetails(Output pClassName As %Library.String(MAXLEN=300), Output pStatementText As %Library.String(MAXLEN=""), Output pArguments As %Library.List, Output pStatementType As %Integer, Output pRuntimeClassName As %Library.String(MAXLEN=300)) As %Integer\n'})}),"\n",(0,s.jsx)(t.p,{children:"Returns the details of the currently prepared statement. This method returns the implementation class, the statement text, and the actual arguments bound to formal statement arguments."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"pClassName contains the name of the current statement's implementation class."}),"\n",(0,s.jsx)(t.li,{children:"pStatementText contains the statement text. This variable is either a simple string or an array of strings where pStatementText is the number of lines and pStatementText(line) is a line of statement text."}),"\n",(0,s.jsxs)(t.li,{children:["pArguments is a ",(0,s.jsx)(t.a,{href:"/csp/docbook/Doc.View.cls?FIND=OBJECTSCRIPT+$LIST+FUNCTION",children:"$list"})," containing argument types and argument value in the form $list(arg1type, arg1value[, arg2type, arg2value...argNtype, argNvalue]). There are three argument types: 'c' = constant, 'v' = host variable and '?' is a parameter. All three argument types are replaced by ? arguments during statement prepare to improve the efficiency of the statement cache. Only actual arguments of type '?' require a value to be supplied when executing the statement."]}),"\n",(0,s.jsx)(t.li,{children:"pStatementType is an integer value corresponding to the internal type number for the type of statement. This type number is for internal use and subject to change."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"This method returns 1 for success and 0 for failure. This method fails when no statement has been prepared."}),"\n",(0,s.jsx)(t.h3,{id:"classpath",children:"%ClassPath"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ClassPath(pClassName As %Library.String) As %Library.String(MAXLEN="")\n'})}),"\n",(0,s.jsx)(t.p,{children:"Returns the PATH string for a given class name. The PATH string is essentially the same as a default schema that is determined from the compiled class. If no extra IMPORT or inheritance rules are present, the default schema within a class context is determined from the class's package. IMPORT and inheritance add additional items to the PATH."})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var s=n(96540);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);