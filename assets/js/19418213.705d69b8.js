"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[55166],{26345:(e,n,r)=>{r.r(n),r.d(n,{contentTitle:()=>i,default:()=>d,frontMatter:()=>s,toc:()=>l});var o=r(74848),t=r(28453);const s={pagination_prev:null,pagination_next:null},i="%Library.SyntaxColorReader",l=[{value:"Properties",id:"properties",level:2},{value:"CSV",id:"csv",level:3},{value:"AtEnd",id:"atend",level:3},{value:"BufferedStream",id:"bufferedstream",level:3},{value:"PositionIsNoted",id:"positionisnoted",level:3},{value:"InfoLine",id:"infoline",level:3},{value:"ErrorInfo",id:"errorinfo",level:3},{value:"RewoundErrorInfo",id:"rewounderrorinfo",level:3},{value:"Methods",id:"methods",level:2},{value:"AtEndGet",id:"atendget",level:3},{value:"FromCode",id:"fromcode",level:3},{value:"%OnNew",id:"onnew",level:3},{value:"NextLine",id:"nextline",level:3},{value:"SkipLines",id:"skiplines",level:3},{value:"Rewind",id:"rewind",level:3},{value:"NotePosition",id:"noteposition",level:3},{value:"RestoreNotedPosition",id:"restorenotedposition",level:3},{value:"ForgetNotedPosition",id:"forgetnotedposition",level:3},{value:"GetInfoLine",id:"getinfoline",level:3},{value:"NextErrorInfo",id:"nexterrorinfo",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"librarysyntaxcolorreader",children:"%Library.SyntaxColorReader"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Class %Library.SyntaxColorReader Extends %RegisteredObject [ System = 4 ]\n"})}),"\n",(0,o.jsx)(n.p,{children:"Front end for reading the CSV output from %SyntaxColor:Color. Instead of reading the stream directly and reconstructing the lines you can use a %SyntaxColorReader object and call its NextLine method."}),"\n",(0,o.jsx)(n.p,{children:"To create a %SyntaxColorReader object you can pass a CSV stream to %New; alternatively you can call FromCode and it will call %SyntaxColor for you."}),"\n",(0,o.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsx)(n.h3,{id:"csv",children:"CSV"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Property CSV As %RegisteredObject [ Private ];\n"})}),"\n",(0,o.jsx)(n.h3,{id:"atend",children:"AtEnd"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Property AtEnd As %Boolean [ Calculated, Private ];\n"})}),"\n",(0,o.jsx)(n.h3,{id:"bufferedstream",children:"BufferedStream"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Property BufferedStream As %Boolean [ Private ];\n"})}),"\n",(0,o.jsx)(n.p,{children:"This is here so that we can give better error messages"}),"\n",(0,o.jsx)(n.h3,{id:"positionisnoted",children:"PositionIsNoted"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Property PositionIsNoted As %Boolean [ Private ];\n"})}),"\n",(0,o.jsx)(n.h3,{id:"infoline",children:"InfoLine"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Property InfoLine As %String [ Private ];\n"})}),"\n",(0,o.jsx)(n.p,{children:"Not valid until AtEnd"}),"\n",(0,o.jsx)(n.h3,{id:"errorinfo",children:"ErrorInfo"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Property ErrorInfo As %Stream.Object [ Private ];\n"})}),"\n",(0,o.jsx)(n.p,{children:"Not valid until AtEnd"}),"\n",(0,o.jsx)(n.h3,{id:"rewounderrorinfo",children:"RewoundErrorInfo"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Property RewoundErrorInfo As %Boolean [ Private ];\n"})}),"\n",(0,o.jsx)(n.p,{children:"Whether or not we've rewound ErrorInfo"}),"\n",(0,o.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsx)(n.h3,{id:"atendget",children:"AtEndGet"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Method AtEndGet() As %Boolean\n"})}),"\n",(0,o.jsx)(n.p,{children:"The AtEnd property can be used to check for the end of the reader over the CSV stream"}),"\n",(0,o.jsx)(n.h3,{id:"fromcode",children:"FromCode"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod FromCode(Code As %Stream.Object, Language As %String, ExtraFlags As %String, ByRef Reader As %Library.SyntaxColorReader, ByRef AnyColoringErrors As %Boolean, ByRef AnyColoringWarnings As %Boolean, Symbols As %String = "", BufferStream As %Boolean = 0) As %Status\n'})}),"\n",(0,o.jsx)(n.p,{children:"Given a code stream, language, optional extra flags and/or symbols string for %SyntaxColor:Color"}),"\n",(0,o.jsx)(n.p,{children:"Return a %SyntaxColorReader over the resulting CSV and whether there were any coloring errors/warnings (anywhere in the document)"}),"\n",(0,o.jsx)(n.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Method %OnNew(CSV As %Stream.Object, BufferStream As %Boolean = 0) As %Status\n"})}),"\n",(0,o.jsx)(n.p,{children:"Create a %SyntaxColorReader over the given CSV stream"}),"\n",(0,o.jsx)(n.h3,{id:"nextline",children:"NextLine"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Method NextLine(ByRef LineCSV As %List, ByRef ColoringErrors As %Boolean, ByRef ColoringWarnings As %Boolean) As %Boolean\n"})}),"\n",(0,o.jsx)(n.p,{children:'Return a structured list of coloring information about the current line of code represented by the CSV stream, advancing the stream. In general, a number of lines will be read from the CSV stream to make up one logical line corresponding to a line of the original code. CSV lines of the form "\\n" determine logical line boundaries.'}),"\n",(0,o.jsx)(n.p,{children:"If the stream is at its end this method returns 0, otherwise 1."}),"\n",(0,o.jsx)(n.p,{children:"If 1 is returned the ByRef parameters are set up from the stream items which were read :-"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"LineCSV is set to a list of items, where each item is $LB(lang,terminal,code)"}),"\n",(0,o.jsx)(n.li,{children:"ColoringErrors and ColoringWarnings are set to whether there were any coloring errors/warnings at all on the line"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"skiplines",children:"SkipLines"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Method SkipLines(N As %Integer)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Move forward N lines - stops if end of file found first (doesn't report any error)"}),"\n",(0,o.jsx)(n.h3,{id:"rewind",children:"Rewind"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Method Rewind() As %Status\n"})}),"\n",(0,o.jsx)(n.p,{children:"Move back to the beginning of the stream"}),"\n",(0,o.jsx)(n.p,{children:"- not allowed if the position is noted"}),"\n",(0,o.jsx)(n.h3,{id:"noteposition",children:"NotePosition"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Method NotePosition() As %Status\n"})}),"\n",(0,o.jsx)(n.p,{children:"Note the current stream position, caller must call RestorePosition or ForgetPosition later."}),"\n",(0,o.jsx)(n.h3,{id:"restorenotedposition",children:"RestoreNotedPosition"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Method RestoreNotedPosition() As %Status\n"})}),"\n",(0,o.jsx)(n.p,{children:"Restore the noted position"}),"\n",(0,o.jsx)(n.h3,{id:"forgetnotedposition",children:"ForgetNotedPosition"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Method ForgetNotedPosition() As %Status\n"})}),"\n",(0,o.jsx)(n.p,{children:"Forget the noted position"}),"\n",(0,o.jsx)(n.h3,{id:"getinfoline",children:"GetInfoLine"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Method GetInfoLine() As %String\n"})}),"\n",(0,o.jsx)(n.p,{children:"Return the info line, if any Not valid until AtEnd"}),"\n",(0,o.jsx)(n.h3,{id:"nexterrorinfo",children:"NextErrorInfo"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-objectscript-class",children:"Method NextErrorInfo(Output Description As %String, Output Source As %String, Output Location As %String, Output LineNumber As %Integer, Output LineOffset As %Integer) As %Boolean\n"})}),"\n",(0,o.jsx)(n.p,{children:"Return the next error info Not valid until AtEnd"})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var o=r(96540);const t={},s=o.createContext(t);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);