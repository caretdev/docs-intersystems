"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[56500],{44443:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>c,frontMatter:()=>l,toc:()=>a});var r=n(74848),s=n(28453);const l={pagination_prev:null,pagination_next:null},i="%DeepSee.Query.member",a=[{value:"Properties",id:"properties",level:2},{value:"%cube",id:"cube",level:3},{value:"%tuple",id:"tuple",level:3},{value:"%memberSpec",id:"memberspec",level:3},{value:"%dimNumber",id:"dimnumber",level:3},{value:"%hierNumber",id:"hiernumber",level:3},{value:"%levelNumber",id:"levelnumber",level:3},{value:"%allName",id:"allname",level:3},{value:"%name",id:"name",level:3},{value:"%memberId",id:"memberid",level:3},{value:"%memberKey",id:"memberkey",level:3},{value:"%type",id:"type",level:3},{value:"%aggregate",id:"aggregate",level:3},{value:"Methods",id:"methods",level:2},{value:"%CreateMember",id:"createmember",level:3},{value:"%SetLevelNo",id:"setlevelno",level:3},{value:"%GetType",id:"gettype",level:3},{value:"%ApplyState",id:"applystate",level:3},{value:"%GetNodeInfo",id:"getnodeinfo",level:3},{value:"%GetAllName",id:"getallname",level:3},{value:"%GetNullName",id:"getnullname",level:3},{value:"%GetTimeOffset",id:"gettimeoffset",level:3},{value:"%ProcessMembers",id:"processmembers",level:3},{value:"%FindMemberByName",id:"findmemberbyname",level:3},{value:"%FindMemberByKey",id:"findmemberbykey",level:3},{value:"%GetMembers",id:"getmembers",level:3},{value:"%GetRelatedMember",id:"getrelatedmember",level:3},{value:"%GetParentMember",id:"getparentmember",level:3},{value:"%GetNthChild",id:"getnthchild",level:3},{value:"%GetPropertyValue",id:"getpropertyvalue",level:3},{value:"%GetRollupKey",id:"getrollupkey",level:3},{value:"%GetMemberOffset",id:"getmemberoffset",level:3},{value:"%HasFeature",id:"hasfeature",level:3},{value:"%SupportsFunction",id:"supportsfunction",level:3}];function p(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"deepseequerymember",children:"%DeepSee.Query.member"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Class %DeepSee.Query.member Extends %RegisteredObject [ Abstract, System = 3 ]\n"})}),"\n",(0,r.jsxs)(t.p,{children:["This class (or its subclass) is used by the DeepSee Query Engine to process members within a DeepSee query.",(0,r.jsx)(t.br,{}),"\nA member object is not a node within an MDX query graph.",(0,r.jsx)(t.br,{}),"\nCertain nodes (namely the memberSpec node) will create an instance of member object (based on the type of member) and delegate to it certain member-related tasks. This is how the difference between time and data dimensions is implemented.",(0,r.jsx)(t.br,{}),"\nThis is an abstract class, the actual work is done by subclasses."]}),"\n",(0,r.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(t.h3,{id:"cube",children:"%cube"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property %cube As %DeepSee.Datatype.string;\n"})}),"\n",(0,r.jsx)(t.p,{children:"Name of the cube this member belongs to."}),"\n",(0,r.jsx)(t.h3,{id:"tuple",children:"%tuple"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property %tuple As %DeepSee.Query.tuple;\n"})}),"\n",(0,r.jsx)(t.p,{children:"The tuple object that owns this member."}),"\n",(0,r.jsx)(t.h3,{id:"memberspec",children:"%memberSpec"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property %memberSpec As %List [ MultiDimensional ];\n"})}),"\n",(0,r.jsx)(t.p,{children:"Array of known value/id/key triplets for each level."}),"\n",(0,r.jsx)(t.h3,{id:"dimnumber",children:"%dimNumber"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property %dimNumber As %Integer;\n"})}),"\n",(0,r.jsx)(t.p,{children:"Dimension # referred to by the tuple."}),"\n",(0,r.jsx)(t.h3,{id:"hiernumber",children:"%hierNumber"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property %hierNumber As %Integer;\n"})}),"\n",(0,r.jsx)(t.p,{children:"Hierarchy # referred to by the tuple."}),"\n",(0,r.jsx)(t.h3,{id:"levelnumber",children:"%levelNumber"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property %levelNumber As %Integer;\n"})}),"\n",(0,r.jsx)(t.p,{children:"Level # referred to by the tuple."}),"\n",(0,r.jsx)(t.h3,{id:"allname",children:"%allName"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property %allName As %DeepSee.Datatype.string;\n"})}),"\n",(0,r.jsx)(t.p,{children:"Name for the all level for this member."}),"\n",(0,r.jsx)(t.h3,{id:"name",children:"%name"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property %name As %DeepSee.Datatype.string;\n"})}),"\n",(0,r.jsx)(t.p,{children:"Member name or value referred to by the tuple."}),"\n",(0,r.jsx)(t.h3,{id:"memberid",children:"%memberId"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property %memberId As %DeepSee.Datatype.string;\n"})}),"\n",(0,r.jsx)(t.p,{children:"Member id value (optional)."}),"\n",(0,r.jsx)(t.h3,{id:"memberkey",children:"%memberKey"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property %memberKey As %DeepSee.Datatype.string;\n"})}),"\n",(0,r.jsx)(t.p,{children:"Member key value (optional)."}),"\n",(0,r.jsx)(t.h3,{id:"type",children:"%type"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property %type As %DeepSee.Datatype.string;\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Member type.",(0,r.jsx)(t.br,{}),"\nThis indicates the context specified by the tuple expression.",(0,r.jsx)(t.br,{}),"\nThe value can be one of the dst macros ($$$dstSet etc.).",(0,r.jsx)(t.br,{}),"\nThis is used to determine which function can be applied to this tuple."]}),"\n",(0,r.jsx)(t.h3,{id:"aggregate",children:"%aggregate"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Property %aggregate As %DeepSee.Datatype.string;\n"})}),"\n",(0,r.jsx)(t.p,{children:"Aggregate to apply to this measure (if applicable)."}),"\n",(0,r.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(t.h3,{id:"createmember",children:"%CreateMember"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %CreateMember(pClassName As %String, Output tSC As %Status, pCube As %String, pTuple As %DeepSee.Query.tuple, pDimNo As %Integer, pHierNo As %Integer, pAllName As %String = "") As %DeepSee.Query.member [ Final, Internal ]\n'})}),"\n",(0,r.jsx)(t.p,{children:"Create an instance of %DeepSee.Query.member."}),"\n",(0,r.jsx)(t.h3,{id:"setlevelno",children:"%SetLevelNo"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SetLevelNo(pLevelNo As %Integer) [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Set the current level number context for this member."}),"\n",(0,r.jsx)(t.h3,{id:"gettype",children:"%GetType"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetType() As %String [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Return the type of this member."}),"\n",(0,r.jsx)(t.h3,{id:"applystate",children:"%ApplyState"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ApplyState(pType As %String) As %Status\n"})}),"\n",(0,r.jsx)(t.p,{children:"Set the state of this member using the current meta data node."}),"\n",(0,r.jsx)(t.h3,{id:"getnodeinfo",children:"%GetNodeInfo"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetNodeInfo(pCubeName As %String, pDimNo As %Integer, pHierNo As %Integer, pLevelNo As %Integer, Output pFact As %String, Output pStarClass As %String, Output pStarField As %String, Output pStarSort As %String, Output pRollup As %String, Output pSortDir As %String, Output pFormat As %String, Output pMemberList As %String, Output pStarKeyField As %String) As %Boolean [ Final, Internal ]\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Helper method: Get information about the given level from the cube meta data.",(0,r.jsx)(t.br,{}),"\nAs a side effect, set the dependency variable, %dsDepends."]}),"\n",(0,r.jsx)(t.h3,{id:"getallname",children:"%GetAllName"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetAllName(pCubeName As %String, pDimNo As %Integer, Output pCaption As %String) As %String [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Helper method: Get the ALL level name for dimension, if present. Also return the localized caption via pCaption."}),"\n",(0,r.jsx)(t.h3,{id:"getnullname",children:"%GetNullName"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetNullName(pCubeName As %String, pDimNo As %Integer, pHierNo As %Integer, pLevelNo As %Integer, Output pCaption As %String) As %String [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Helper method: Get the Null Replacement value for the given level. Also return the localized caption via pCaption."}),"\n",(0,r.jsx)(t.h3,{id:"gettimeoffset",children:"%GetTimeOffset"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetTimeOffset(pCubeName As %String, pDimNo As %Integer, pHierNo As %Integer, pLevelNo As %Integer, Output pFormat As %String) As %String [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Helper method: Get the time offset and format values for the given level."}),"\n",(0,r.jsx)(t.h3,{id:"processmembers",children:"%ProcessMembers"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %ProcessMembers(pParent As %Integer, Output pSet As %List) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Process the member id, name, and key information for this member. Put the result into pSet."}),"\n",(0,r.jsx)(t.h3,{id:"findmemberbyname",children:"%FindMemberByName"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'Method %FindMemberByName(pName As %String, pDim As %Integer, pHier As %Integer, Output pFlag As %Boolean, pLevel As %Integer = "", Output pMemberKey As %String) As %Status [ Internal ]\n'})}),"\n",(0,r.jsxs)(t.p,{children:["See if there is a member with the given name within the specified dimension,hierarchy, and/or level.",(0,r.jsx)(t.br,{}),"\nIf pLevel is supplied, only look in that level.",(0,r.jsx)(t.br,{}),"\nSet pFlag true if a member is found.",(0,r.jsx)(t.br,{}),"\nOn return, fills in memberSpec",(0,r.jsx)(t.br,{}),"\nmemberSpec(level) = $LB(name,key)"]}),"\n",(0,r.jsxs)(t.p,{children:['memberSpec(0) = $LB("All Time")',(0,r.jsx)(t.br,{}),"\nmemberSpec(1) = $LB(2006,2006)",(0,r.jsx)(t.br,{}),'\nmemberSpec(2) = $LB("Quarter 1", "Q1 2006")',(0,r.jsx)(t.br,{}),'\nmemberSpec(3) = $LB("January","Jan 2006")']}),"\n",(0,r.jsx)(t.h3,{id:"findmemberbykey",children:"%FindMemberByKey"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %FindMemberByKey(pKey As %String, pDim As %Integer, pHier As %Integer, Output pFlag As %Boolean, Output pMemberValue As %String, pRecurse As %Boolean = 1) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Find the member with the given key within the given hierarchy. If pRecurse is true, look at the current level and continue through higher levels until a match is found."}),"\n",(0,r.jsx)(t.h3,{id:"getmembers",children:"%GetMembers"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetMembers(pCubeName As %String, pDimNo As %Integer, pHierNo As %Integer, pLevelNo As %Integer, pRollupKey As %String, pParent As %Integer, pKey As %String, ByRef pNodeNo As %Integer, pRecurse As %Integer = 0, ByRef pRange As %String, ByRef pMemberList) As %Status\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Get members and place them into the axis tree.",(0,r.jsx)(t.br,{}),"\npRecurse, if 1, indicates that this function is to be called recursively to build a tree of members. If -1, include the All level (if present) and the top level (used by %TOPMEMBERS). pRange, if defined, is an array contains a starting and ending key value.",(0,r.jsx)(t.br,{}),"\npMemberList, if defined, is an INLIST used for certain optimized member operations."]}),"\n",(0,r.jsx)(t.h3,{id:"getrelatedmember",children:"%GetRelatedMember"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %GetRelatedMember(pCubeName As %String, pDimNo As %Integer, pHierNo As %Integer, pLevelNo As %Integer, pRollupKey As %String, pParent As %Integer, Output pSet As %List, pKey As %String, pRelation As %String, pOffset As %Integer = 0, pValue As %String = "", pAllowMissing As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Get one member and place it into pSet.",(0,r.jsx)(t.br,{}),'\npKey, is the key for the base member to return. pRelation indicates how this member is related to the base member. "same","lead", "lag", etc.',(0,r.jsx)(t.br,{}),"\npOffset, is an optional offset to apply to the relation."]}),"\n",(0,r.jsx)(t.h3,{id:"getparentmember",children:"%GetParentMember"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetParentMember(pCubeName As %String, pDimNo As %Integer, pHierNo As %Integer, pLevelNo As %Integer, pParent As %Integer, Output pSet As %List, pKey As %String) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Get the parent of the current member and place it into pSet."}),"\n",(0,r.jsx)(t.h3,{id:"getnthchild",children:"%GetNthChild"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetNthChild(pCubeName As %String, pDimNo As %Integer, pHierNo As %Integer, pLevelNo As %Integer, pParent As %Integer, Output pSet As %List, pKey As %String, pNumber As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Get the nth child of the current member and place it into pSet.",(0,r.jsx)(t.br,{}),"\nIf pNumber is 1 return the first child; 2 for the second, etc.",(0,r.jsx)(t.br,{}),"\nIf pNumber is -1 return the last child; -2 for the second from end, etc."]}),"\n",(0,r.jsx)(t.h3,{id:"getpropertyvalue",children:"%GetPropertyValue"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetPropertyValue(pCubeName As %String, pDimNo As %Integer, pHierNo As %Integer, pLevelNo As %Integer, pProperty As %String, pParent As %Integer, Output pSet As %List, pKey As %String) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Lookup the value of the given dimension property."}),"\n",(0,r.jsx)(t.h3,{id:"getrollupkey",children:"%GetRollupKey"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetRollupKey(pLevelNo As %Integer, pKey As %String, Output pRollupKey As %String) As %Status [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Find the rollup key for the specified level."}),"\n",(0,r.jsx)(t.h3,{id:"getmemberoffset",children:"%GetMemberOffset"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %GetMemberOffset(Output pOffset As %Integer, pKey As %String, Output pParentKey As %String) As %Status [ Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Return the ordinal position of this member within its parent group. For convenience, also return the parent key for this member."}),"\n",(0,r.jsx)(t.h3,{id:"hasfeature",children:"%HasFeature"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %HasFeature(pCubeName As %String, pDimNo As %Integer, pHierNo As %Integer, pLevelNo As %Integer, pFeature As %String) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:'Test if this member supports the given feature. For example, "NOW".'}),"\n",(0,r.jsx)(t.h3,{id:"supportsfunction",children:"%SupportsFunction"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Method %SupportsFunction(pFunction As %String, Output pMessage As %String) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Test if this member supports the given function."})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(96540);const s={},l=r.createContext(s);function i(e){const t=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(l.Provider,{value:t},e.children)}}}]);