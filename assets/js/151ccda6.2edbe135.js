"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[55829],{7947:(e,r,s)=>{s.r(r),s.d(r,{contentTitle:()=>i,default:()=>d,frontMatter:()=>t,toc:()=>l});var a=s(74848),n=s(28453);const t={pagination_prev:null,pagination_next:null},i="Config.MirrorMember",l=[{value:"Parameters",id:"parameters",level:2},{value:"PROPERTIESMAYBEINCPF",id:"propertiesmaybeincpf",level:3},{value:"EMSSERVICE",id:"emsservice",level:3},{value:"Properties",id:"properties",level:2},{value:"AgentAddress",id:"agentaddress",level:3},{value:"AsyncMemberGUID",id:"asyncmemberguid",level:3},{value:"AsyncMemberType",id:"asyncmembertype",level:3},{value:"AsyncUseSystemPurgeInterval",id:"asyncusesystempurgeinterval",level:3},{value:"DebugFlags",id:"debugflags",level:3},{value:"DebugFlagsPresent",id:"debugflagspresent",level:3},{value:"DDNSKey",id:"ddnskey",level:3},{value:"DDNSKeyPresent",id:"ddnskeypresent",level:3},{value:"JoinMirror",id:"joinmirror",level:3},{value:"SystemName",id:"systemname",level:3},{value:"ValidatedMember",id:"validatedmember",level:3},{value:"VirtualAddressInterface",id:"virtualaddressinterface",level:3},{value:"Methods",id:"methods",level:2},{value:"isAsyncMember",id:"isasyncmember",level:3},{value:"SystemNameSet",id:"systemnameset",level:3},{value:"Load",id:"load",level:3},{value:"CheckSecurity",id:"checksecurity",level:3},{value:"%OnValidateObject",id:"onvalidateobject",level:3},{value:"EMSAllowEdit",id:"emsallowedit",level:3},{value:"GetAsyncMemberGUID",id:"getasyncmemberguid",level:3},{value:"AllowClearFailoverDBFlag",id:"allowclearfailoverdbflag",level:3},{value:"IsDRMember",id:"isdrmember",level:3},{value:"IsReadOnlyReportingMember",id:"isreadonlyreportingmember",level:3},{value:"IsReadWriteReportingMember",id:"isreadwritereportingmember",level:3},{value:"ClearFailoverDBForNonDRAsyncMember",id:"clearfailoverdbfornondrasyncmember",level:3},{value:"AllowNewMirrorSet",id:"allownewmirrorset",level:3},{value:"ValidateMemberName",id:"validatemembername",level:3}];function o(e){const r={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",space:"space",strong:"strong",tab:"tab",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"configmirrormember",children:"Config.MirrorMember"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Class Config.MirrorMember Extends (%Persistent, Config.CommonSingleMethods, Config.CommonProperties, %SYSTEM.Help) [ Final, Inheritance = right, System = 4 ]\n"})}),"\n",(0,a.jsxs)(r.p,{children:["This class allows you to modify and view the [MirrorMember] section of the CPF file through programatic APIs. While properties are usually modified through the System Management portal, there may be some occasion where modifying them through the API's is best for your system. In all the Config methods, if you do not specify the CPFFile parameter, the currently active CPF file is used. If you wish to modify a CPF file which is not the currently active one, then specify the CPFFile you wish to modify in the method call.",(0,a.jsx)(r.br,{}),"\nThe Flags parameter does not normally need to be specified; the defaults are usually sufficient for most cases.",(0,a.jsx)(r.br,{}),"\nYou can use either the provided API's (Get/Modify) to modify the properties by passing in the correct parameters, or use Object syntax to open and directly manipulate the config objects."]}),"\n",(0,a.jsx)(r.p,{children:"EXAMPLE:"}),"\n",(0,a.jsxs)(r.p,{children:['; Use class methods to modify properties %SYS>s Status=##Class(Config.MirrorMember).Get(.Properties) %SYS>i \'Status w !,"Error="',(0,a.jsx)(r.em,{children:'$SYSTEM.Status.GetErrorText(Status) %SYS>zw Properties("SystemName") Properties("SystemName")="Mirror5" %STS>s Properties("SystemName")="Mirror6" %SYS>s Status=##Class(Config.MirrorMember).Modify(.Properties) %SYS>i \'Status w !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status) ; Now use Objects to modify properties %SYS>s Obj=##Class(Config.MirrorMember).Open() %SYS>w Obj.SystemName Mirror6 %SYS>s Obj.SystemName="Mirror7" %SYS>s Status=Obj.%Save() %SYS>i \'Status w !,"Error="_$SYSTEM.Status.GetErrorText(Status)']}),"\n",(0,a.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(r.h3,{id:"propertiesmaybeincpf",children:"PROPERTIESMAYBEINCPF"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:'Parameter PROPERTIESMAYBEINCPF = "DebugFlags,DDNSKey";\n'})}),"\n",(0,a.jsxs)(r.p,{children:["List of properties which may or may not be in the CPF file.",(0,a.jsx)(r.br,{}),'\nThey have a corresponding %Boolean property to determine if they are in the file or not. For example, the property "DebugFlags" has a %Boolean "DebugFlagsPresent" property associated with it.']}),"\n",(0,a.jsx)(r.h3,{id:"emsservice",children:"EMSSERVICE"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:'Parameter EMSSERVICE [ Internal ] = "Mirror";\n'})}),"\n",(0,a.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(r.h3,{id:"agentaddress",children:"AgentAddress"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Property AgentAddress As %NetworkAddress;\n"})}),"\n",(0,a.jsx)(r.h3,{id:"asyncmemberguid",children:"AsyncMemberGUID"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Property AsyncMemberGUID As %String;\n"})}),"\n",(0,a.jsx)(r.h3,{id:"asyncmembertype",children:"AsyncMemberType"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Property AsyncMemberType As %Integer(MAXVAL = 2, MINVAL = 0) [ InitialExpression = 0 ];\n"})}),"\n",(0,a.jsxs)(r.p,{children:["AsyncMemberType indicates the async member is a disaster recovery (DR), read-only reporting or read-write reporting async member.",(0,a.jsx)(r.br,{}),"\n0 - Disaster Recovery (DR). This is a disaster recovery async member, all its mirrored databases are read-only mirrored databases.",(0,a.jsx)(r.br,{}),"\n1 - Read-Only Reporting. This is a reporting async member, all its mirrored databases could be read-only or read-write databases, the default is read-only when the database is created.",(0,a.jsx)(r.br,{}),"\n2 - Read-Write Reporting. This is a reporting async member, all its mirrored databases could be read-only or read-write databases, the default is read-write when the database is created."]}),"\n",(0,a.jsx)(r.h3,{id:"asyncusesystempurgeinterval",children:"AsyncUseSystemPurgeInterval"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Property AsyncUseSystemPurgeInterval As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,a.jsx)(r.p,{children:"AsyncUseSystemPurgeInterval when set indicates that the async member should purge mirror journal files according to the same criteria it uses for purging local journal files (eg. after a certain number of days or a certain number of backups). When this parameter is missing, or clear, the default state, mirror journal files are purged as soon as they are no longer needed because they have been replayed to the local databases."}),"\n",(0,a.jsx)(r.h3,{id:"debugflags",children:"DebugFlags"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Property DebugFlags As %String [ Internal ];\n"})}),"\n",(0,a.jsx)(r.h3,{id:"debugflagspresent",children:"DebugFlagsPresent"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Property DebugFlagsPresent As %Boolean [ InitialExpression = 0, Internal ];\n"})}),"\n",(0,a.jsx)(r.h3,{id:"ddnskey",children:"DDNSKey"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Property DDNSKey As %SysPath [ Internal ];\n"})}),"\n",(0,a.jsx)(r.h3,{id:"ddnskeypresent",children:"DDNSKeyPresent"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Property DDNSKeyPresent As %Boolean [ InitialExpression = 0, Internal ];\n"})}),"\n",(0,a.jsx)(r.h3,{id:"joinmirror",children:"JoinMirror"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Property JoinMirror As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,a.jsx)(r.p,{children:"Flag indicating whether this system processes its mirror configuration at startup. When set to NO, the mirror configuration is ignored and the system is not considered a mirror member. This can be used if there is a problem in the configuration which prevents the system from starting or as part of removing a system from the mirror as if a system is the primary it needs to be restarted but we also need to block the system from joining the mirror when it restarts and becoming the primary again."}),"\n",(0,a.jsx)(r.h3,{id:"systemname",children:"SystemName"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Property SystemName As %String(MAXLEN = 32, MINLEN = 0);\n"})}),"\n",(0,a.jsxs)(r.p,{children:["This is the name by which the system is known in the mirror (the mirror member name). The name is converted to uppercase before storing. The following characters are not permitted in mirror system names:",(0,a.jsx)(r.br,{}),'\n: # , ; = ^ ~ " ',(0,a.jsxs)(r.space,{children:[" ",(0,a.jsxs)(r.tab,{children:[(0,a.jsx)(r.br,{}),"\nThe following character sequences are not allowed in mirror system names:",(0,a.jsx)(r.br,{}),"\n// /*",(0,a.jsx)(r.br,{}),"\nMirror system names must be unique across all mirror members as some mirror members (eg. async members) may participate in multiple mirrors and they will have the same system name in all of the mirrors."]})]})]}),"\n",(0,a.jsx)(r.h3,{id:"validatedmember",children:"ValidatedMember"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Property ValidatedMember As %Boolean [ InitialExpression = 0, Internal ];\n"})}),"\n",(0,a.jsx)(r.p,{children:"ValidatedMember is set when a node joins an existing mirror and has verified that it is listed in the [MirrorSetMembers] list of all the other (Validated) mirror members. Until ValidatedMember is set a node cannot become the primary. This is important because the existing mirror members don't know to look for this node (yet) when deciding whether they should be the primary or not because generally a node is configured to be a mirror member before it is added to the existing nodes."}),"\n",(0,a.jsx)(r.h3,{id:"virtualaddressinterface",children:"VirtualAddressInterface"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Property VirtualAddressInterface As %String(MAXLEN = 255);\n"})}),"\n",(0,a.jsx)(r.p,{children:"When the mirror is configured to keep a virtual ip address assigned to the primary, this is the local interface which hosts the IP address."}),"\n",(0,a.jsx)(r.p,{children:"Consult the documentation for the format specific to the operating system."}),"\n",(0,a.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(r.h3,{id:"isasyncmember",children:"isAsyncMember"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod isAsyncMember(ByRef CPFFile As %String = "") As %Boolean\n'})}),"\n",(0,a.jsx)(r.p,{children:"Returns TRUE/FALSE for whether this node is configured as an async member in the configuration."}),"\n",(0,a.jsx)(r.h3,{id:"systemnameset",children:"SystemNameSet"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Method SystemNameSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(r.h3,{id:"load",children:"Load"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod Load(Obj As %ObjectHandle = "", Flags As %Integer = 1) As %Status [ Internal ]\n'})}),"\n",(0,a.jsxs)(r.p,{children:["Load the MirrorMember info.",(0,a.jsx)(r.br,{}),"\nCurrently this can only be called once, during STU. STU kills off the ^SYS(\"MIRRORSET\") tree and if there's data there when we're called, we exit.",(0,a.jsx)(r.br,{}),"\nLoad the parameters into memory and activate.",(0,a.jsx)(r.br,{}),"\nParameters:",(0,a.jsx)(r.br,{}),"\n",(0,a.jsx)(r.strong,{children:"Obj"}),' = Handle to the object which caused the load. If "", then load everything, only called from STU.',(0,a.jsx)(r.br,{}),"\n",(0,a.jsx)(r.strong,{children:"Flags"})," = Type of modification.",(0,a.jsx)(r.br,{}),"\n0 - Modify",(0,a.jsx)(r.br,{}),"\n1 - Create/Insert",(0,a.jsx)(r.br,{}),"\n2 - Delete"]}),"\n",(0,a.jsx)(r.h3,{id:"checksecurity",children:"CheckSecurity"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod CheckSecurity(ByRef enabled As %Boolean) As %Status\n"})}),"\n",(0,a.jsxs)(r.p,{children:["Check the required security settings",(0,a.jsx)(r.br,{}),"\nReturns $$$ERROR(reason) if we fail to look up the security setting. Otherwise returns $$$OK and sets the passed 'enabled' variable to True/False."]}),"\n",(0,a.jsx)(r.h3,{id:"onvalidateobject",children:"%OnValidateObject"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Method %OnValidateObject() As %Status [ Internal ]\n"})}),"\n",(0,a.jsxs)(r.p,{children:["This is called from %Save().",(0,a.jsx)(r.br,{}),"\nAny error returned from this will cause the object to not be saved."]}),"\n",(0,a.jsx)(r.h3,{id:"emsallowedit",children:"EMSAllowEdit"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Method EMSAllowEdit(insert As %Boolean) As %Boolean [ Internal ]\n"})}),"\n",(0,a.jsx)(r.p,{children:"Called from %OnBeforeSave. Provides a way for a specific class to override the EMS.Restricted() check when the Instance is managed. Used when a few properties in a class (like Config.SQL.JDBCGatewayPort) are not managed by EMS."}),"\n",(0,a.jsx)(r.h3,{id:"getasyncmemberguid",children:"GetAsyncMemberGUID"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"Method GetAsyncMemberGUID() As %String\n"})}),"\n",(0,a.jsx)(r.p,{children:"Returns AsyncMemberGUID of the async member"}),"\n",(0,a.jsx)(r.h3,{id:"allowclearfailoverdbflag",children:"AllowClearFailoverDBFlag"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod AllowClearFailoverDBFlag(ByRef CPFFile As %String = "") As %Boolean\n'})}),"\n",(0,a.jsxs)(r.p,{children:["Check if this mirror member allow user to clear the FailoverDB flag in mirrored databases.",(0,a.jsx)(r.br,{}),"\nOnly the non-DR async member allow user to clear the FailverDB flag in mirrored databases."]}),"\n",(0,a.jsx)(r.h3,{id:"isdrmember",children:"IsDRMember"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod IsDRMember(ByRef CPFFile As %String = "") As %Boolean\n'})}),"\n",(0,a.jsx)(r.p,{children:"Check if this mirror member is a Disaster Recovery (DR) async member."}),"\n",(0,a.jsx)(r.h3,{id:"isreadonlyreportingmember",children:"IsReadOnlyReportingMember"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod IsReadOnlyReportingMember(ByRef CPFFile As %String = "") As %Boolean\n'})}),"\n",(0,a.jsx)(r.p,{children:"Check if this mirror member is a read-only reporting async member."}),"\n",(0,a.jsx)(r.h3,{id:"isreadwritereportingmember",children:"IsReadWriteReportingMember"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod IsReadWriteReportingMember(ByRef CPFFile As %String = "") As %Boolean\n'})}),"\n",(0,a.jsx)(r.p,{children:"Check if this mirror member is a read-write reporting async member."}),"\n",(0,a.jsx)(r.h3,{id:"clearfailoverdbfornondrasyncmember",children:"ClearFailoverDBForNonDRAsyncMember"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod ClearFailoverDBForNonDRAsyncMember() As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(r.p,{children:'Subroutine of this class and ^MIRROR when the "type" of a mirror being tracked by an async member is changed from read-only to read-write. This scans through all the mounted databases looking for mirrored databases and clears the FailoverDB flag so that they can be mounted read/write locally. This should be done with care as once this flag is cleared these databases can no longer be activated for use in the mirror. This means that they cannot be moved, even within the async member, as a moved mirrored db needs to be activated before it can be used. A new copy would have to be made off of a failover node in order to be activated. The mirrored databases have not been activated will be skipped, they could be cleared when they are activated.'}),"\n",(0,a.jsx)(r.h3,{id:"allownewmirrorset",children:"AllowNewMirrorSet"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:'ClassMethod AllowNewMirrorSet(ByRef CPFFile As %String = "") As %Boolean\n'})}),"\n",(0,a.jsx)(r.p,{children:"Return whether the async member is allowed to add a new mirror set to be tracked."}),"\n",(0,a.jsx)(r.h3,{id:"validatemembername",children:"ValidateMemberName"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod ValidateMemberName(Name As %String) As %Status [ Internal ]\n"})}),"\n",(0,a.jsx)(r.p,{children:"Validate Mirror Member Name."})]})}function d(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>l});var a=s(96540);const n={},t=a.createContext(n);function i(e){const r=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),a.createElement(t.Provider,{value:r},e.children)}}}]);