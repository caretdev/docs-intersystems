"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[64990],{50707:(e,a,s)=>{s.r(a),s.d(a,{contentTitle:()=>n,default:()=>r,frontMatter:()=>i,toc:()=>o});var t=s(74848),l=s(28453);const i={pagination_prev:null,pagination_next:null},n="%Library.Collation",o=[{value:"Methods",id:"methods",level:2},{value:"AlphaUp",id:"alphaup",level:3},{value:"Exact",id:"exact",level:3},{value:"Minus",id:"minus",level:3},{value:"Plus",id:"plus",level:3},{value:"Space",id:"space",level:3},{value:"SqlString",id:"sqlstring",level:3},{value:"SqlUpper",id:"sqlupper",level:3},{value:"String",id:"string",level:3},{value:"Upper",id:"upper",level:3},{value:"Mvr",id:"mvr",level:3},{value:"Truncate",id:"truncate",level:3},{value:"Collate",id:"collate",level:3},{value:"TSEQDate",id:"tseqdate",level:3},{value:"TSGTDate",id:"tsgtdate",level:3},{value:"TSGEDate",id:"tsgedate",level:3},{value:"TSLTDate",id:"tsltdate",level:3},{value:"TSLEDate",id:"tsledate",level:3},{value:"TSNEDate",id:"tsnedate",level:3},{value:"PTEQDate",id:"pteqdate",level:3},{value:"PTGTDate",id:"ptgtdate",level:3},{value:"PTGEDate",id:"ptgedate",level:3},{value:"PTLTDate",id:"ptltdate",level:3},{value:"PTLEDate",id:"ptledate",level:3},{value:"PTNEDate",id:"ptnedate",level:3},{value:"PTEQTS",id:"pteqts",level:3},{value:"PTGTTS",id:"ptgtts",level:3},{value:"PTGETS",id:"ptgets",level:3},{value:"PTLTTS",id:"ptltts",level:3},{value:"PTLETS",id:"ptlets",level:3},{value:"PTNETS",id:"ptnets",level:3},{value:"FMTSEQPT",id:"fmtseqpt",level:3},{value:"FMTSNEPT",id:"fmtsnept",level:3},{value:"FMTSGTPT",id:"fmtsgtpt",level:3},{value:"FMTSGEPT",id:"fmtsgept",level:3},{value:"FMTSLTPT",id:"fmtsltpt",level:3},{value:"FMTSLEPT",id:"fmtslept",level:3},{value:"FMTSEQTS",id:"fmtseqts",level:3},{value:"FMTSNETS",id:"fmtsnets",level:3},{value:"FMTSGTTS",id:"fmtsgtts",level:3},{value:"FMTSGETS",id:"fmtsgets",level:3},{value:"FMTSLTTS",id:"fmtsltts",level:3},{value:"FMTSLETS",id:"fmtslets",level:3},{value:"FMTSEQDate",id:"fmtseqdate",level:3},{value:"FMTSGTDate",id:"fmtsgtdate",level:3},{value:"FMTSGEDate",id:"fmtsgedate",level:3},{value:"FMTSLTDate",id:"fmtsltdate",level:3},{value:"FMTSLEDate",id:"fmtsledate",level:3},{value:"FMTSNEDate",id:"fmtsnedate",level:3},{value:"FMDEQDate",id:"fmdeqdate",level:3},{value:"FMDGTDate",id:"fmdgtdate",level:3},{value:"FMDGEDate",id:"fmdgedate",level:3},{value:"FMDLTDate",id:"fmdltdate",level:3},{value:"FMDLEDate",id:"fmdledate",level:3},{value:"FMDNEDate",id:"fmdnedate",level:3},{value:"FMDEQPT",id:"fmdeqpt",level:3},{value:"FMDGTPT",id:"fmdgtpt",level:3},{value:"FMDGEPT",id:"fmdgept",level:3},{value:"FMDLTPT",id:"fmdltpt",level:3},{value:"FMDLEPT",id:"fmdlept",level:3},{value:"FMDNEPT",id:"fmdnept",level:3},{value:"FMDEQTS",id:"fmdeqts",level:3},{value:"FMDGTTS",id:"fmdgtts",level:3},{value:"FMDGETS",id:"fmdgets",level:3},{value:"FMDLTTS",id:"fmdltts",level:3},{value:"FMDLETS",id:"fmdlets",level:3},{value:"FMDNETS",id:"fmdnets",level:3},{value:"MVDEQDate",id:"mvdeqdate",level:3},{value:"MVDGTDate",id:"mvdgtdate",level:3},{value:"MVDGEDate",id:"mvdgedate",level:3},{value:"MVDLTDate",id:"mvdltdate",level:3},{value:"MVDLEDate",id:"mvdledate",level:3},{value:"MVDNEDate",id:"mvdnedate",level:3},{value:"TSEQMVDate",id:"tseqmvdate",level:3},{value:"TSGTMVDate",id:"tsgtmvdate",level:3},{value:"TSGEMVDate",id:"tsgemvdate",level:3},{value:"TSLTMVDate",id:"tsltmvdate",level:3},{value:"TSLEMVDate",id:"tslemvdate",level:3},{value:"TSNEMVDate",id:"tsnemvdate",level:3}];function d(e){const a={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"librarycollation",children:"%Library.Collation"})}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"Class %Library.Collation [ Not ProcedureBlock, System = 2 ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"This class defines the set of common index transformation (or collation) methods."}),"\n",(0,t.jsx)(a.p,{children:"An index transformation is used to tranform logical data values into values used by indices."}),"\n",(0,t.jsx)(a.p,{children:'For example, you may wish that a query by name finds the same results for both "ELVIS" and "elvis". Using a case-insensitive index transformation, such as String, will accomplish this. If you want an exact match, use Exact.'}),"\n",(0,t.jsxs)(a.p,{children:["Index transformations are specified via a property's COLLATION parameter. Every datatype has a default COLLATION value, which matches one of the methods of the ",(0,t.jsx)(a.strong,{children:"%Collation"})," class. The COLLATION parameter can be overwritten by an individual property or by a specific index definition."]}),"\n",(0,t.jsx)(a.p,{children:"Note that changing a property's COLLATION value will corrupt any index values currently stored for that property and will require you to manually repopulate the index."}),"\n",(0,t.jsx)(a.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(a.h3,{id:"alphaup",children:"AlphaUp"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod AlphaUp(%val As %String) As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Converts a logical value to upper case, strips all punctuation and white space (except for ',' and '?')."}),"\n",(0,t.jsxs)(a.p,{children:["This method is included for compatability with earlier products; use ",(0,t.jsx)(a.strong,{children:"String"})," instead."]}),"\n",(0,t.jsx)(a.h3,{id:"exact",children:"Exact"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod Exact(%val As %String) As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Performs no transformation; the index value is exactly the logical value."}),"\n",(0,t.jsx)(a.h3,{id:"minus",children:"Minus"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod Minus(%val As %String) As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Prepends a minus ('-') sign to the logical value."}),"\n",(0,t.jsx)(a.p,{children:"This method is included for compatability with earlier products; you should not need it in new applications."}),"\n",(0,t.jsx)(a.h3,{id:"plus",children:"Plus"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod Plus(%val As %String) As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Prepends a plus ('+') sign to the logical value."}),"\n",(0,t.jsx)(a.p,{children:"This method is included for compatability with earlier products; you should not need it in new applications."}),"\n",(0,t.jsx)(a.h3,{id:"space",children:"Space"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod Space(%val As %String) As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Prepends a space (' ') character to the logical value."}),"\n",(0,t.jsx)(a.p,{children:"This method is included for compatability with earlier products; you should not need it in new applications."}),"\n",(0,t.jsx)(a.h3,{id:"sqlstring",children:"SqlString"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod SqlString(%val As %String, maxlen As %Integer = 32768) As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Prepends a space to force string collation and strips trailing whitespace."}),"\n",(0,t.jsx)(a.p,{children:"This method is used to insure that strings are collated case-sensitively and that numeric string values are collated correctly."}),"\n",(0,t.jsx)(a.h3,{id:"sqlupper",children:"SqlUpper"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod SqlUpper(%val As %String, maxlen As %Integer = 32768) As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Converts a logical value to upper case, strips trailing whitespace and prepends a space to force string collation."}),"\n",(0,t.jsx)(a.p,{children:"This method is used to insure that strings are collated case-insensitively and that numeric string values are collated correctly."}),"\n",(0,t.jsx)(a.h3,{id:"string",children:"String"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod String(%val As %String, maxlen As %Integer = 32768) As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Converts a logical value to upper case, strips all punctuation and white space (except for ',')."}),"\n",(0,t.jsx)(a.p,{children:"This method is used to insure that strings are collated case-insensitively and that numeric string values are collated correctly."}),"\n",(0,t.jsx)(a.h3,{id:"upper",children:"Upper"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod Upper(%val As %String) As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Converts a logical value to upper case without removing any characters."}),"\n",(0,t.jsx)(a.h3,{id:"mvr",children:"Mvr"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod Mvr(%val As %String) As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Converts a logical value to MVR collation"}),"\n",(0,t.jsx)(a.h3,{id:"truncate",children:"Truncate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod Truncate(%val As %String, len As %Integer) As %String [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Converts a logical value to exact colation with a defined length limit"}),"\n",(0,t.jsx)(a.h3,{id:"collate",children:"Collate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:'ClassMethod Collate(val As %String, transSpec As %String = "", length As %String = "") As %String [ ProcedureBlock = 1 ]\n'})}),"\n",(0,t.jsx)(a.p,{children:"Converts a logical value to %COLLATE collation"}),"\n",(0,t.jsx)(a.h3,{id:"tseqdate",children:"TSEQDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod TSEQDate(ts As %TimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %TimeStamp to a %Date value with the = operator."}),"\n",(0,t.jsx)(a.h3,{id:"tsgtdate",children:"TSGTDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod TSGTDate(ts As %TimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %TimeStamp to a %Date value with the > operator."}),"\n",(0,t.jsx)(a.h3,{id:"tsgedate",children:"TSGEDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod TSGEDate(ts As %TimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %TimeStamp to a %Date value with the '< operator."}),"\n",(0,t.jsx)(a.h3,{id:"tsltdate",children:"TSLTDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod TSLTDate(ts As %TimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %TimeStamp to a %Date value with the < operator."}),"\n",(0,t.jsx)(a.h3,{id:"tsledate",children:"TSLEDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod TSLEDate(ts As %TimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %TimeStamp to a %Date value with the '> operator."}),"\n",(0,t.jsx)(a.h3,{id:"tsnedate",children:"TSNEDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod TSNEDate(ts As %TimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %TimeStamp to a %Date value with the '= operator."}),"\n",(0,t.jsx)(a.h3,{id:"pteqdate",children:"PTEQDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod PTEQDate(pt As %PosixTime, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %PosixTime to a %Date value with the = operator."}),"\n",(0,t.jsx)(a.h3,{id:"ptgtdate",children:"PTGTDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod PTGTDate(pt As %TimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %PosixTime to a %Date value with the > operator."}),"\n",(0,t.jsx)(a.h3,{id:"ptgedate",children:"PTGEDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod PTGEDate(pt As %TimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %PosixTime to a %Date value with the '< operator."}),"\n",(0,t.jsx)(a.h3,{id:"ptltdate",children:"PTLTDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod PTLTDate(pt As %TimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %PosixTime to a %Date value with the < operator."}),"\n",(0,t.jsx)(a.h3,{id:"ptledate",children:"PTLEDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod PTLEDate(pt As %TimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %PosixTime to a %Date value with the '> operator."}),"\n",(0,t.jsx)(a.h3,{id:"ptnedate",children:"PTNEDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod PTNEDate(pt As %TimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %PosixTime to a %Date value with the '= operator."}),"\n",(0,t.jsx)(a.h3,{id:"pteqts",children:"PTEQTS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod PTEQTS(pt As %PosixTime, ts As %TimeStamp) As %Boolean\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %PosixTime to a %TimeStamp value with the = operator."}),"\n",(0,t.jsx)(a.h3,{id:"ptgtts",children:"PTGTTS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod PTGTTS(pt As %PosixTime, ts As %TimeStamp) As %Boolean\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %PosixTime to a %TimeStamp value with the > operator."}),"\n",(0,t.jsx)(a.h3,{id:"ptgets",children:"PTGETS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod PTGETS(pt As %PosixTime, ts As %TimeStamp) As %Boolean\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %PosixTime to a %TimeStamp value with the '< operator."}),"\n",(0,t.jsx)(a.h3,{id:"ptltts",children:"PTLTTS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod PTLTTS(pt As %PosixTime, ts As %TimeStamp) As %Boolean\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %PosixTime to a %TimeStamp value with the < operator."}),"\n",(0,t.jsx)(a.h3,{id:"ptlets",children:"PTLETS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod PTLETS(pt As %PosixTime, ts As %TimeStamp) As %Boolean\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %PosixTime to a %TimeStamp value with the '> operator."}),"\n",(0,t.jsx)(a.h3,{id:"ptnets",children:"PTNETS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod PTNETS(pt As %PosixTime, ts As %TimeStamp) As %Boolean\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %PosixTime to a %TimeStamp value with the '= operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtseqpt",children:"FMTSEQPT"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSEQPT(fmts As %Library.FilemanTimeStamp, pt As %Library.PosixTime) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %PosixTime value with the = operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtsnept",children:"FMTSNEPT"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSNEPT(fmts As %Library.FilemanTimeStamp, pt As %Library.PosixTime) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %PosixTime value with the '= operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtsgtpt",children:"FMTSGTPT"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSGTPT(fmts As %Library.FilemanTimeStamp, pt As %Library.PosixTime) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %PosixTime value with the > operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtsgept",children:"FMTSGEPT"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSGEPT(fmts As %Library.FilemanTimeStamp, pt As %Library.PosixTime) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %PosixTime value with the >= operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtsltpt",children:"FMTSLTPT"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSLTPT(fmts As %Library.FilemanTimeStamp, pt As %Library.PosixTime) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %PosixTime value with the < operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtslept",children:"FMTSLEPT"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSLEPT(fmts As %Library.FilemanTimeStamp, pt As %Library.PosixTime) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %PosixTime value with the <= operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtseqts",children:"FMTSEQTS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSEQTS(fmts As %Library.FilemanTimeStamp, ts As %Library.TimeStamp) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %TimeStamp value with the = operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtsnets",children:"FMTSNETS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSNETS(fmts As %Library.FilemanTimeStamp, ts As %Library.TimeStamp) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %TimeStamp value with the '= operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtsgtts",children:"FMTSGTTS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSGTTS(fmts As %Library.FilemanTimeStamp, ts As %Library.TimeStamp) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %TimeStamp value with the > operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtsgets",children:"FMTSGETS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSGETS(fmts As %Library.FilemanTimeStamp, ts As %Library.TimeStamp) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %TimeStamp value with the >= operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtsltts",children:"FMTSLTTS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSLTTS(fmts As %Library.FilemanTimeStamp, ts As %Library.TimeStamp) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %TimeStamp value with the < operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtslets",children:"FMTSLETS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSLETS(fmts As %Library.FilemanTimeStamp, ts As %Library.TimeStamp) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %TimeStamp value with the <= operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtseqdate",children:"FMTSEQDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSEQDate(ts As %FilemanTimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %Date value with the = operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtsgtdate",children:"FMTSGTDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSGTDate(ts As %FilemanTimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %Date value with the > operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtsgedate",children:"FMTSGEDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSGEDate(ts As %FilemanTimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %Date value with the '< operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtsltdate",children:"FMTSLTDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSLTDate(ts As %FilemanTimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %Date value with the < operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtsledate",children:"FMTSLEDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSLEDate(ts As %FilemanTimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %Date value with the '> operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmtsnedate",children:"FMTSNEDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMTSNEDate(ts As %FilemanTimeStamp, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanTimeStamp to a %Date value with the '= operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdeqdate",children:"FMDEQDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDEQDate(fmd As %FilemanDate, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %Date value with the = operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdgtdate",children:"FMDGTDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDGTDate(fmd As %FilemanDate, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %Date value with the > operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdgedate",children:"FMDGEDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDGEDate(fmd As %FilemanDate, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %Date value with the '< operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdltdate",children:"FMDLTDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDLTDate(fmd As %FilemanDate, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %Date value with the < operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdledate",children:"FMDLEDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDLEDate(fmd As %FilemanDate, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %Date value with the '> operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdnedate",children:"FMDNEDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDNEDate(fmd As %FilemanDate, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %Date value with the '= operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdeqpt",children:"FMDEQPT"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDEQPT(fmd As %FilemanDate, pt As %PosixTime) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"These methods deal with comparing %Library.FilemanDate values with %Library.PosixTime Compares a %FilemanDate to a %PosixTime value with the = operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdgtpt",children:"FMDGTPT"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDGTPT(fmd As %FilemanDate, pt As %PosixTime) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %PosixTime value with the > operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdgept",children:"FMDGEPT"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDGEPT(fmd As %FilemanDate, pt As %PosixTime) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %PosixTime value with the '< operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdltpt",children:"FMDLTPT"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDLTPT(fmd As %FilemanDate, pt As %PosixTime) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %PosixTime value with the < operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdlept",children:"FMDLEPT"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDLEPT(fmd As %FilemanDate, pt As %PosixTime) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %PosixTime value with the '> operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdnept",children:"FMDNEPT"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDNEPT(fmd As %FilemanDate, pt As %PosixTime) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %PosixTime value with the '= operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdeqts",children:"FMDEQTS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDEQTS(fmd As %FilemanDate, ts As %TimeStamp) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"These methods deal with comparing %Library.FilemanDate values with %Library.TimeStamp Compares a %FilemanDate to a %TimeStamp value with the = operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdgtts",children:"FMDGTTS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDGTTS(fmd As %FilemanDate, ts As %TimeStamp) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %TimeStamp value with the > operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdgets",children:"FMDGETS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDGETS(fmd As %FilemanDate, ts As %TimeStamp) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %TimeStamp value with the '< operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdltts",children:"FMDLTTS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDLTTS(fmd As %FilemanDate, ts As %TimeStamp) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %TimeStamp value with the < operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdlets",children:"FMDLETS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDLETS(fmd As %FilemanDate, ts As %TimeStamp) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %TimeStamp value with the '> operator."}),"\n",(0,t.jsx)(a.h3,{id:"fmdnets",children:"FMDNETS"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod FMDNETS(fmd As %FilemanDate, ts As %TimeStamp) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %FilemanDate to a %TimeStamp value with the '= operator."}),"\n",(0,t.jsx)(a.h3,{id:"mvdeqdate",children:"MVDEQDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod MVDEQDate(mvd As %MV.Date, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsxs)(a.p,{children:["---------------------- These methods deal with comparing %MV.Date values with %Library.Date The MultiValue start date is 01/01/1968",(0,t.jsx)(a.br,{}),"\nObjectScript date is 01/01/1841"]}),"\n",(0,t.jsxs)(a.p,{children:["To convert an ObjectScript date ($h) to a MultiValue date:",(0,t.jsx)(a.br,{}),"\nMVdate = ObjectScript date - 46385"]}),"\n",(0,t.jsxs)(a.p,{children:["To convert a MultiValue date to an ObjectScript date:",(0,t.jsx)(a.br,{}),"\nObjectScript date = MVdate + 46385",(0,t.jsx)(a.br,{}),"\n---------------------- Compares a %MV.Date to a %Date value with the = operator."]}),"\n",(0,t.jsx)(a.h3,{id:"mvdgtdate",children:"MVDGTDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod MVDGTDate(mvd As %MV.Date, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %MV.Date to a %Date value with the > operator."}),"\n",(0,t.jsx)(a.h3,{id:"mvdgedate",children:"MVDGEDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod MVDGEDate(mvd As %MV.Date, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %MV.Date to a %Date value with the '< operator."}),"\n",(0,t.jsx)(a.h3,{id:"mvdltdate",children:"MVDLTDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod MVDLTDate(mvd As %MV.Date, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %MV.Date to a %Date value with the < operator."}),"\n",(0,t.jsx)(a.h3,{id:"mvdledate",children:"MVDLEDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod MVDLEDate(mvd As %MV.Date, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %MV.Date to a %Date value with the '> operator."}),"\n",(0,t.jsx)(a.h3,{id:"mvdnedate",children:"MVDNEDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod MVDNEDate(mvd As %MV.Date, d As %Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %MV.Date to a %Date value with the '= operator."}),"\n",(0,t.jsx)(a.h3,{id:"tseqmvdate",children:"TSEQMVDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod TSEQMVDate(ts As %TimeStamp, d As %MV.Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"---------------------- These methods deal with comparing %MV.Date values with %Library.TimeStamp ---------------------- Compares a %TimeStamp to a %MV.Date value with the = operator."}),"\n",(0,t.jsx)(a.h3,{id:"tsgtmvdate",children:"TSGTMVDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod TSGTMVDate(ts As %TimeStamp, d As %MV.Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %TimeStamp to a %MV.Date value with the > operator."}),"\n",(0,t.jsx)(a.h3,{id:"tsgemvdate",children:"TSGEMVDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod TSGEMVDate(ts As %TimeStamp, d As %MV.Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %TimeStamp to a %MV.Date value with the '< operator."}),"\n",(0,t.jsx)(a.h3,{id:"tsltmvdate",children:"TSLTMVDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod TSLTMVDate(ts As %TimeStamp, d As %MV.Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %TimeStamp to a %MV.Date value with the < operator."}),"\n",(0,t.jsx)(a.h3,{id:"tslemvdate",children:"TSLEMVDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod TSLEMVDate(ts As %TimeStamp, d As %MV.Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %TimeStamp to a %MV.Date value with the '> operator."}),"\n",(0,t.jsx)(a.h3,{id:"tsnemvdate",children:"TSNEMVDate"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-objectscript-class",children:"ClassMethod TSNEMVDate(ts As %TimeStamp, d As %MV.Date) As %Boolean [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(a.p,{children:"Compares a %TimeStamp to a %MV.Date value with the '= operator."})]})}function r(e={}){const{wrapper:a}={...(0,l.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,a,s)=>{s.d(a,{R:()=>n,x:()=>o});var t=s(96540);const l={},i=t.createContext(l);function n(e){const a=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:n(e.components),t.createElement(i.Provider,{value:a},e.children)}}}]);