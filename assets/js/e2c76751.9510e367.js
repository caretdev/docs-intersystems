"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[87327],{3218:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>a,default:()=>d,frontMatter:()=>r,toc:()=>i});var t=n(74848),o=n(28453);const r={pagination_prev:null,pagination_next:null},a="%Exception.SQL",i=[{value:"Methods",id:"methods",level:2},{value:"CreateFromSQLCODE",id:"createfromsqlcode",level:3},{value:"OnAsStatus",id:"onasstatus",level:3},{value:"OnAsSQLCODE",id:"onassqlcode",level:3},{value:"SQLMessageString",id:"sqlmessagestring",level:3}];function c(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"exceptionsql",children:"%Exception.SQL"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %Exception.SQL Extends %Exception.AbstractException\n"})}),"\n",(0,t.jsx)(s.p,{children:'An SQL exception is instantiated using SQLCODE and %msg. It provides a convenient mechanism for reporting SQLCODE errors using exceptions. The resulting exception can be processed as a %Status value using the AsStatus() method or the original SQLCODE value along with the %msg value can be retrieved as Code and Data respectively. Authors of catch tException { } can test for an SQL exception using tException.%IsA("%Exception.SQL") to perform error handling and reporting specific to SQL.'}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"createfromsqlcode",children:"CreateFromSQLCODE"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CreateFromSQLCODE(pSQLCODE As %Integer, pMessage As %String(MAXLEN="")) As %Exception.SQL\n'})}),"\n",(0,t.jsx)(s.p,{children:"Instantiate an exception from SQLCODE and %msg."}),"\n",(0,t.jsx)(s.h3,{id:"onasstatus",children:"OnAsStatus"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method OnAsStatus() As %Status [ CodeMode = expression, Private ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Override this method to provide a custom conversion of an exception to a status SQL exceptions are converted to %Status values using $$$SQLCode as the status message id."}),"\n",(0,t.jsx)(s.h3,{id:"onassqlcode",children:"OnAsSQLCODE"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method OnAsSQLCODE() As %Integer [ CodeMode = expression, Private ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Override this method to provide a custom conversion of an exception to an SQLCODE value"}),"\n",(0,t.jsx)(s.h3,{id:"sqlmessagestring",children:"SQLMessageString"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method SQLMessageString(pLevel As %Integer = 0) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"This returns a string that represents the SQL %msg string. Users should feel free to modify the format and content in subclasses"})]})}function d(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>i});var t=n(96540);const o={},r=t.createContext(o);function a(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);