"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[84652],{24434:(e,s,r)=>{r.r(s),r.d(s,{contentTitle:()=>i,default:()=>c,frontMatter:()=>l,toc:()=>a});var t=r(74848),n=r(28453);const l={pagination_prev:null,pagination_next:null},i="%SYS.Journal.Record",a=[{value:"Parameters",id:"parameters",level:2},{value:"READONLY",id:"readonly",level:3},{value:"DOMAIN",id:"domain",level:3},{value:"Properties",id:"properties",level:2},{value:"Address",id:"address",level:3},{value:"Type",id:"type",level:3},{value:"TypeName",id:"typename",level:3},{value:"Prev",id:"prev",level:3},{value:"Next",id:"next",level:3},{value:"PrevAddress",id:"prevaddress",level:3},{value:"NextAddress",id:"nextaddress",level:3},{value:"TimeStamp",id:"timestamp",level:3},{value:"InTransaction",id:"intransaction",level:3},{value:"ProcessID",id:"processid",level:3},{value:"JobID",id:"jobid",level:3},{value:"RemoteSystemID",id:"remotesystemid",level:3},{value:"ECPSystemID",id:"ecpsystemid",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnDetermineClass",id:"ondetermineclass",level:3},{value:"PIDLookup",id:"pidlookup",level:3},{value:"%LoadData",id:"loaddata",level:3},{value:"Count",id:"count",level:3},{value:"TypeNameGet",id:"typenameget",level:3},{value:"PrevAddressGet",id:"prevaddressget",level:3},{value:"NextAddressGet",id:"nextaddressget",level:3},{value:"PrevGet",id:"prevget",level:3},{value:"NextGet",id:"nextget",level:3},{value:"GetAddressNear",id:"getaddressnear",level:3},{value:"GetPhysicalLocation",id:"getphysicallocation",level:3},{value:"InTransactionGet",id:"intransactionget",level:3},{value:"ProcessIDGet",id:"processidget",level:3},{value:"JobIDGet",id:"jobidget",level:3},{value:"RemoteSystemIDGet",id:"remotesystemidget",level:3},{value:"ECPSystemIDGet",id:"ecpsystemidget",level:3},{value:"TimeStampGet",id:"timestampget",level:3},{value:"Restore",id:"restore",level:3},{value:"Fetch",id:"fetch",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"FetchRows",id:"fetchrows",level:3},{value:"ListFetch",id:"listfetch",level:3},{value:"ZUGlobalNodeGet",id:"zuglobalnodeget",level:3},{value:"ZUFetch",id:"zufetch",level:3},{value:"ListClose",id:"listclose",level:3},{value:"GetRealPIDSYSinFilter",id:"getrealpidsysinfilter",level:3}];function d(e){const s={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",jobid:"jobid",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"sysjournalrecord",children:"%SYS.Journal.Record"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class %SYS.Journal.Record Extends %Persistent [ StorageStrategy = JournalRecordStorage, System = 4 ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Journal record related API"}),"\n",(0,t.jsxs)(s.p,{children:["To retrieve a record, first open the journal file containing the record if it is not already open: ",(0,t.jsx)(s.code,{children:"Set jrnforef = ##class(%SYS.Journal.File).%OpenId(FilePath)"})," where FilePath is the path of the journal file. Then get the record by specifying its location (Address) in the journal file ",(0,t.jsx)(s.code,{children:"Set jrecoref = jrnforef.GetRecordAt(Address)"})," or ",(0,t.jsx)(s.code,{children:"Set jrecoref = ##class(%SYS.Journal.Record).%OpenId(Address)"})," Records are polymorphic -- for example, the reference returned above would be one to a SetKillRecord object if the record is a SET or KILL."]}),"\n",(0,t.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(s.h3,{id:"readonly",children:"READONLY"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter READONLY = 1;\n"})}),"\n",(0,t.jsx)(s.h3,{id:"domain",children:"DOMAIN"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter DOMAIN = "%Utility";\n'})}),"\n",(0,t.jsx)(s.p,{children:"Default Localization Domain"}),"\n",(0,t.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(s.h3,{id:"address",children:"Address"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Address As %String [ ReadOnly ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Location of the record in the journal file"}),"\n",(0,t.jsx)(s.h3,{id:"type",children:"Type"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Type As %Library.JournalRecordType [ ReadOnly ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Type of the record in numeric form"}),"\n",(0,t.jsx)(s.h3,{id:"typename",children:"TypeName"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property TypeName As %String [ Calculated ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Type of the record in string form"}),"\n",(0,t.jsx)(s.h3,{id:"prev",children:"Prev"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Prev As %SYS.Journal.Record [ Calculated ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Reference to previous record or NULLOREF if this is the first record in the file"}),"\n",(0,t.jsx)(s.h3,{id:"next",children:"Next"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Next As %SYS.Journal.Record [ Calculated ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Reference to next record or NULLOREF if this is the last record in the file"}),"\n",(0,t.jsx)(s.h3,{id:"prevaddress",children:"PrevAddress"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property PrevAddress As %Integer [ Calculated ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Location of previous record or 0 if this is the first record in the file"}),"\n",(0,t.jsx)(s.h3,{id:"nextaddress",children:"NextAddress"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property NextAddress As %Integer [ Calculated ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Location of next record or 0 if this is the last record in the file"}),"\n",(0,t.jsx)(s.h3,{id:"timestamp",children:"TimeStamp"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property TimeStamp As %TimeStamp [ Calculated ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Time stamp of the record (not necessarily the creation time of the record)"}),"\n",(0,t.jsx)(s.h3,{id:"intransaction",children:"InTransaction"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property InTransaction As %Integer [ Calculated ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Whether the record is part of a transaction"}),"\n",(0,t.jsx)(s.h3,{id:"processid",children:"ProcessID"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property ProcessID As %Integer [ Calculated ];\n"})}),"\n",(0,t.jsx)(s.p,{children:'Operating system process id for the process which created the journal record. This is calculated by taking the jobid stored in the journal record and looking up the corresponding process id in a translation table maintained by the system. If the process id cannot be calculated, the jobid with the string "(jid") appended is returned.'}),"\n",(0,t.jsx)(s.h3,{id:"jobid",children:"JobID"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property JobID As %Integer [ Calculated ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Internal jobid stored with each journal record in the journal file"}),"\n",(0,t.jsx)(s.h3,{id:"remotesystemid",children:"RemoteSystemID"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property RemoteSystemID As %Integer [ Calculated ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Use RemoteSystemID if you're comparing records to ensure that two identical process IDs refer to the same real process/transaction."}),"\n",(0,t.jsx)(s.h3,{id:"ecpsystemid",children:"ECPSystemID"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property ECPSystemID As %Integer [ Calculated ];\n"})}),"\n",(0,t.jsxs)(s.p,{children:["ECPSystemID is RemoteSystemID with the top bits masked off.",(0,t.jsx)(s.br,{}),"\nUse ECPSystemID if the only thing of interest is whether it came from an ECP client, etc."]}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"ondetermineclass",children:"%OnDetermineClass"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %OnDetermineClass(OID As %ObjectIdentity, ByRef Class As %String) As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"pidlookup",children:"PIDLookup"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PIDLookup(Offset As %String) As %String\n"})}),"\n",(0,t.jsxs)(s.p,{children:['Given an address in the currently open journal file, read the jobid from the journal record and translate this to an operating system process id using the jobid->pid translation table. Returns the corresponding pid or "',(0,t.jsx)(s.jobid,{children:'(jid)" if the pid cannot be determined.'})]}),"\n",(0,t.jsx)(s.h3,{id:"loaddata",children:"%LoadData"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %LoadData(Offset As %String, flag As %Boolean) As %Status [ Private ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"count",children:"Count"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Count(File As %String, Sort As %String = "ALL") As %Status\n'})}),"\n",(0,t.jsx)(s.p,{children:"Provides an analysis of the activity for global records in a journal file. Records are counted by type and the amount of activity for each global is calculated as a percentage of the total for that record type."}),"\n",(0,t.jsx)(s.p,{children:"The output is written to the current device."}),"\n",(0,t.jsx)(s.p,{children:"Parameters are:"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"File"})," - Journal file to count (by default the current journal file)"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Sort"})," - By default the counts for all types of global journal records are kept individually. You may have the counts grouped as general SET or KILL records by entering the 'Sort' parameter as 'GROUP'."]}),"\n",(0,t.jsx)(s.h3,{id:"typenameget",children:"TypeNameGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method TypeNameGet() As %String\n"})}),"\n",(0,t.jsx)(s.h3,{id:"prevaddressget",children:"PrevAddressGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method PrevAddressGet() As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"nextaddressget",children:"NextAddressGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method NextAddressGet() As %Integer [ CodeMode = expression ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"prevget",children:"PrevGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method PrevGet() As %SYS.Journal.Record\n"})}),"\n",(0,t.jsx)(s.h3,{id:"nextget",children:"NextGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method NextGet() As %SYS.Journal.Record\n"})}),"\n",(0,t.jsx)(s.h3,{id:"getaddressnear",children:"GetAddressNear"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetAddressNear(Offset As %Integer = 0, Before As %Boolean = 0) As %Integer\n"})}),"\n",(0,t.jsx)(s.p,{children:"Return the address of a valid record that is nearest to and >= (or <= if Before=1) the given offset; 0 if no such a record"}),"\n",(0,t.jsx)(s.h3,{id:"getphysicallocation",children:"GetPhysicalLocation"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetPhysicalLocation(ByRef Offset As %Integer, ByRef FileName As %String) As %Status\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Return the physical location of a record, given by Offset and Filename, in Offset and FileName.",(0,t.jsx)(s.br,{}),"\nThe virtual and physical locations of a record may differ due to a journal switch. The API assumes a %SYS.Journal.System.Sync() has been issued to commit the journal record in question to disk"]}),"\n",(0,t.jsx)(s.h3,{id:"intransactionget",children:"InTransactionGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method InTransactionGet() As %Integer\n"})}),"\n",(0,t.jsx)(s.h3,{id:"processidget",children:"ProcessIDGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method ProcessIDGet() As %Integer\n"})}),"\n",(0,t.jsx)(s.h3,{id:"jobidget",children:"JobIDGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method JobIDGet() As %Integer\n"})}),"\n",(0,t.jsx)(s.h3,{id:"remotesystemidget",children:"RemoteSystemIDGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method RemoteSystemIDGet() As %Integer\n"})}),"\n",(0,t.jsx)(s.h3,{id:"ecpsystemidget",children:"ECPSystemIDGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method ECPSystemIDGet() As %Integer\n"})}),"\n",(0,t.jsx)(s.h3,{id:"timestampget",children:"TimeStampGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method TimeStampGet() As %TimeStamp\n"})}),"\n",(0,t.jsx)(s.h3,{id:"restore",children:"Restore"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method Restore(Detail As %Integer) As %Status\n"})}),"\n",(0,t.jsx)(s.p,{children:"a place holder"}),"\n",(0,t.jsx)(s.h3,{id:"fetch",children:"Fetch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Method Fetch(ByRef Row As %List, ByRef Columns As %String, Match As %List = "") As %Boolean [ Internal, PublicList = (col, match, Row, Columns) ]\n'})}),"\n",(0,t.jsx)(s.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListExecute(ByRef qHandle As %Binary, FileName As %String, ByRef Columns As %String, ByRef Offsets As %Integer, ReverseOrder As %Boolean = 0, Match As %List = "") As %Status [ Internal ]\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Returns a list of journal records.",(0,t.jsx)(s.br,{}),"\nComparable (pseudo-)SQL statement:"]}),"\n",(0,t.jsx)(s.p,{children:"SELECT Columns FROM FileName WHERE Offsets... AND Match(Column)..."}),"\n",(0,t.jsx)(s.p,{children:"Parameters:"}),"\n",(0,t.jsx)(s.p,{children:"FileName"}),"\n",(0,t.jsx)(s.p,{children:"Full path of the journal file"}),"\n",(0,t.jsx)(s.p,{children:"Columns"}),"\n",(0,t.jsxs)(s.p,{children:["(Optional) Names of the selected columns as either a comma-delimited string or an array with column names being the keys.",(0,t.jsx)(s.br,{}),'\nIf unspecified or given as "*", all available columns are returned.',(0,t.jsx)(s.br,{}),'\nNote: Availability of a column depends on the type of a record and other circumstances. For example, the "OldValue" column applies to only ',(0,t.jsx)(s.em,{children:"some"})," SET or KILL records (SetKillRecord or derived)"]}),"\n",(0,t.jsx)(s.p,{children:"Offsets"}),"\n",(0,t.jsxs)(s.p,{children:["(Optional) An array of the addresses of the selected records.",(0,t.jsx)(s.br,{}),"\nIndependently, the top node gives the offset to begin listing records with. When combined with the ReverseOrder parameter, this limits the records to those with Address >= Offsets (if ReverseOrder is 0 or not specified) or Address <= Offsets (if ReverseOrder is 1)"]}),"\n",(0,t.jsx)(s.p,{children:"ReverseOrder"}),"\n",(0,t.jsx)(s.p,{children:"(Optional) If 1, list records in the reverse order of their addresses."}),"\n",(0,t.jsx)(s.p,{children:"Match"}),"\n",(0,t.jsxs)(s.p,{children:["(Optional) A LIST string to select records whose value in a certain column meets a certain criterion.",(0,t.jsx)(s.br,{}),"\nThe string consists of three elements:"]}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Column name"}),"\n",(0,t.jsx)(s.li,{children:'Operator (e.g., "[", "=", etc.)'}),"\n",(0,t.jsx)(s.li,{children:"Value\nrepresenting the operation: [Column name] [Operator] [Value] (e.g., Address > 160000)."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Examples:"}),"\n",(0,t.jsxs)(s.p,{children:["To retrieve all available info about all records in current journal file,",(0,t.jsx)(s.code,{children:'s rs=##class(%ResultSet).%New("%SYS.Journal.Record:List") s jrnf=##class(%SYS.Journal.System).GetCurrentFileName() w rs.Execute(jrnf)'}),"To retrieve selected columns of the records located ",(0,t.jsx)(s.em,{children:"before or at"})," file offset 160000 (i.e., Address \u2264 160000),",(0,t.jsx)(s.code,{children:'w rs.Execute(jrnf,"Address,Type,GlobalNode",160000,1)'}),'Note that while the columns "Address" and "Type" are available for all records, the "GlobalNode" column is available for SET or KILL records (of class type SetKillRecord or its derived classes) only.']}),"\n",(0,t.jsxs)(s.p,{children:["To retrieve all available columns of records involving the ^SYS global (but not its subnode),",(0,t.jsx)(s.code,{children:'w rs.Execute(jrnf,,,,$lb("GlobalNode","=","SYS"))'})]}),"\n",(0,t.jsx)(s.h3,{id:"fetchrows",children:"FetchRows"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod FetchRows(ByRef qHandle As %Binary, FetchCount As %Integer = 0, ByRef RowSet As %List, ByRef AtEnd As %Integer) As %Status\n"})}),"\n",(0,t.jsx)(s.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"zuglobalnodeget",children:"ZUGlobalNodeGet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ZUGlobalNodeGet(offset As %Integer) As %String [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Utility classmethod for ZUGetAttr, duplicate of SetKillRecord class GlobalNodeGet method (not a class method)"}),"\n",(0,t.jsx)(s.h3,{id:"zufetch",children:"ZUFetch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ZUFetch(ByRef qHandle As %Binary, offset As %Integer, ByRef Row As %List) As %Boolean [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Utility classmethod for ListFetch: iterate over journal records to find the next one satisfying the matching criteria"}),"\n",(0,t.jsx)(s.h3,{id:"listclose",children:"ListClose"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"getrealpidsysinfilter",children:"GetRealPIDSYSinFilter"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetRealPIDSYSinFilter(jidsys As %String, ByRef ecpsysid As %Integer) As %String\n"})}),"\n",(0,t.jsx)(s.p,{children:"[For use in a journal restore filter or shadow filter (^ZJRNFILT) only] Given a comma-delimited string of jid (job id) and remsysid that is passed to the user-specified filter, return the real pid (if available) and ECP system id (if any)."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"jidsys = jid,remsysid"}),"\n",(0,t.jsx)(s.li,{children:"ecpsysid = a real ECP system ID"}),"\n",(0,t.jsx)(s.li,{children:'return: a real PID or ""'}),"\n"]})]})}function c(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>a});var t=r(96540);const n={},l=t.createContext(n);function i(e){const s=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(l.Provider,{value:s},e.children)}}}]);