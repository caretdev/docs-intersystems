"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[822],{11821:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>h,frontMatter:()=>r,toc:()=>i});var s=n(74848),a=n(28453);const r={pagination_prev:null,pagination_next:null},l="%ASQ.Mutators",i=[{value:"Methods",id:"methods",level:2},{value:"setPath",id:"setpath",level:3},{value:"unsetPath",id:"unsetpath",level:3},{value:"setPathElement",id:"setpathelement",level:3},{value:"unsetPathElement",id:"unsetpathelement",level:3},{value:"unsetPathMember",id:"unsetpathmember",level:3},{value:"setPathMember",id:"setpathmember",level:3}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"asqmutators",children:"%ASQ.Mutators"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %ASQ.Mutators\n"})}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"setpath",children:"setPath"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod setPath(context As %AbstractSet, path As %String(MAXLEN="") = "", value As %Any = "") As %Library.AbstractSet [ Internal ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"setPath() accepts a JPL Path expression (currently limited to simple dot delimited property names, no wild cards, arrays, or filters) and a value. The path is traversed and the terminal property in the path will be set to the value. This can result in the loss of data. If any non-terminal property is defined but is not an object then it will be set to a new object, replacing the current value."}),"\n",(0,s.jsx)(t.p,{children:"If path is null the current object is not modified."}),"\n",(0,s.jsx)(t.p,{children:"If path is '$' and value is an instance of %Library.AbstractObject then value is returned, otherwise, an array with a single element of value is returned."}),"\n",(0,s.jsx)(t.p,{children:"In all other cases, the current object is modified and returned."}),"\n",(0,s.jsx)(t.p,{children:"If a token in the path contains [*] and the current value of that property is an array then the array will be traversed and each element will be set according to the setPath rules."}),"\n",(0,s.jsx)(t.h3,{id:"unsetpath",children:"unsetPath"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod unsetPath(context As %AbstractSet, path As %String(MAXLEN="") = "", value As %String(MAXLEN="") = "") As %AbstractSet [ Internal ]\n'})}),"\n",(0,s.jsx)(t.p,{children:"unsetPath() accepts a JPL Path expression (currently limited to simple dot delimited property names, no wild cards, arrays, or filters) and a value. The path is traversed and the terminal property in the path will be removed. If any non-terminal property not defined or is defined but is not an object then $unsetPath will return without doing any work. If a token in the path contains [*] and the current value of that property is an array then the array will be traversed and each element will be unset according to the unsetPath rules."}),"\n",(0,s.jsx)(t.h3,{id:"setpathelement",children:"setPathElement"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod setPathElement(context As %AbstractSet, ByRef pathElements As %RawString, elementPtr As %Integer = 0, value As %Library.Any) As %Library.AbstractSet [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"unsetpathelement",children:"unsetPathElement"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod unsetPathElement(context As %AbstractSet, ByRef pathElements As %RawString, elementPtr As %Integer = 0) As %AbstractSet [ Internal ]\n"})}),"\n",(0,s.jsx)(t.h3,{id:"unsetpathmember",children:"unsetPathMember"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod unsetPathMember(context As %AbstractSet, ByRef pathElements As %RawString, elementPtr As %Integer = 0) As %AbstractSet [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"INTERNAL - recursive method to set the element in the current context object using a parsed path expression."}),"\n",(0,s.jsx)(t.h3,{id:"setpathmember",children:"setPathMember"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod setPathMember(context As %AbstractSet, ByRef pathElements As %RawString, elementPtr As %Integer = 0, value As %Library.Any) As %AbstractSet [ Internal ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"INTERNAL - recursive method to set the element in the current context object using a parsed path expression."})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var s=n(96540);const a={},r=s.createContext(a);function l(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);