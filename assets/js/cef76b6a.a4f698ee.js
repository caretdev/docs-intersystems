"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[68677],{7047:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>i,default:()=>o,frontMatter:()=>a,toc:()=>c});var n=t(74848),r=t(28453);const a={pagination_prev:null,pagination_next:null},i="%Api.Atelier.v1",c=[{value:"Parameters",id:"parameters",level:2},{value:"DELIMITER",id:"delimiter",level:3},{value:"XDatas",id:"xdatas",level:2},{value:"UrlMap",id:"urlmap",level:3},{value:"Methods",id:"methods",level:2},{value:"GetDoc",id:"getdoc",level:3},{value:"GetDocs",id:"getdocs",level:3},{value:"Index",id:"index",level:3},{value:"Query",id:"query",level:3},{value:"AppendResultSet",id:"appendresultset",level:3},{value:"HeadDoc",id:"headdoc",level:3},{value:"PutDoc",id:"putdoc",level:3},{value:"CheckSourceControlEdit",id:"checksourcecontroledit",level:3},{value:"DeleteDoc",id:"deletedoc",level:3},{value:"DeleteDocs",id:"deletedocs",level:3},{value:"Compile",id:"compile",level:3},{value:"GetDocNames",id:"getdocnames",level:3},{value:"CvtClientDocToXml",id:"cvtclientdoctoxml",level:3},{value:"CvtXmlToClientDoc",id:"cvtxmltoclientdoc",level:3},{value:"GetModifiedDocNames",id:"getmodifieddocnames",level:3},{value:"CreateSourceControlClass",id:"createsourcecontrolclass",level:3},{value:"GetNamespaces",id:"getnamespaces",level:3},{value:"GetNamespace",id:"getnamespace",level:3},{value:"GetCSPApps",id:"getcspapps",level:3},{value:"GetJobs",id:"getjobs",level:3},{value:"RunDebugger",id:"rundebugger",level:3},{value:"GetEnsClassType",id:"getensclasstype",level:3},{value:"getDlgCat",id:"getdlgcat",level:3},{value:"getTypeCat",id:"gettypecat",level:3},{value:"GetAdpInputOutputClass",id:"getadpinputoutputclass",level:3},{value:"GetMetaData",id:"getmetadata",level:3},{value:"QueueAsync",id:"queueasync",level:3},{value:"PollAsync",id:"pollasync",level:3},{value:"CancelAsync",id:"cancelasync",level:3},{value:"Monitor",id:"monitor",level:3},{value:"MonitorBeginCapture",id:"monitorbegincapture",level:3},{value:"MonitorEndCapture",id:"monitorendcapture",level:3}];function l(e){const s={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"apiatelierv1",children:"%Api.Atelier.v1"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class %Api.Atelier.v1 Extends %Atelier.REST\n"})}),"\n",(0,n.jsx)(s.p,{children:"%Api.Atelier.v1 provides version 1 APIs for Atelier"}),"\n",(0,n.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(s.h3,{id:"delimiter",children:"DELIMITER"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter DELIMITER [ Internal ] = {$C(19) _ "^" _ $C(1)};\n'})}),"\n",(0,n.jsx)(s.p,{children:"The delimiter string used by ##class(%Studio.Debugger).GetInfo"}),"\n",(0,n.jsx)(s.h2,{id:"xdatas",children:"XDatas"}),"\n",(0,n.jsx)(s.h3,{id:"urlmap",children:"UrlMap"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'XData UrlMap [ XMLNamespace = "http://www.intersystems.com/urlmap" ]\n'})}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"getdoc",children:"GetDoc"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetDoc(pNamespace As %String, pDocName As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method returns the text for the named document and namespace."}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 304 if the document has not been modified (see ",(0,n.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/HTTP%5C_ETag",children:"https://en.wikipedia.org/wiki/HTTP\\_ETag"}),")",(0,n.jsx)(s.br,{}),"\nHTTP 400 if the named resource is not a valid document name",(0,n.jsx)(s.br,{}),"\nHTTP 404 if the document does not exist",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an unxpected error occurs (details will be in status error array)"]}),"\n",(0,n.jsxs)(s.p,{children:["Return content will contain a document object.",(0,n.jsx)(s.br,{}),"\nErrors pertaining to the document will be in the status property of the document object. If source control hooks are enabled for the namespace any console output generated by the hook will be captured and returned as an array of lines in the 'console' array."]}),"\n",(0,n.jsx)(s.p,{children:"The result contains the name of the requested file, the database where it is stored, its timestamp and category (CLS - class, RTN -routine, CSP - csp file, OTH - other), as well as the document contents which are returned in an array."}),"\n",(0,n.jsxs)(s.p,{children:["For text files this will be an array of strings and the 'enc' json field will be set to false.",(0,n.jsx)(s.br,{}),"\nFor binary files this will be an array of base64 encoded chunks and the 'enc' field will be set to true."]}),"\n",(0,n.jsx)(s.p,{children:"The URL parameter ?binary=1 can be passed to force the document to be encoded as binary."}),"\n",(0,n.jsx)(s.p,{children:"The URL parameter ?storageOnly=1 can be passed to return only the storage portion of a class."}),"\n",(0,n.jsx)(s.p,{children:"If a 'soft' error occurs such as a 'document does not exist', additional information can be found in the 'status' field of the result. Examples of other soft errors are 'file is locked' etc."}),"\n",(0,n.jsx)(s.p,{children:"Here is an example of the result of asking for %Activate.Enum.cls"}),"\n",(0,n.jsx)(s.p,{children:'{   "status": {     "errors": [],     "summary": ""   },   "console": [],   "result": {     "name": "%Activate.Enum.cls",     "db": "IRISLIB",     "ts": "2016-01-04 14:00:04.000",     "cat": "CLS",     "status": "",     "enc": false,     "content": [       "/// This class is the superclass for all enumerated types generated from",       "/// a type library",       "Class %Activate.Enum Extends %Integer [ Not ProcedureBlock, System = 3 ]",       "{",       "",       "}",       ""     ]   } }'}),"\n",(0,n.jsx)(s.p,{children:"and here is the result with ?binary=1"}),"\n",(0,n.jsx)(s.p,{children:'{   "status": {     "errors": [],     "summary": ""   },   "console": [],   "result": {     "name": "%Activate.Enum.cls",     "db": "IRISLIB",     "ts": "2016-01-04 14:00:04.000",     "cat": "CLS",     "status": "",     "enc": true,     "content": [       "Ly8vIFRoaXMgY2xhc3MgaXMgdGhlIHN1cGVyY2xhc3MgZm9yIGFsbCBlbnVtZXJhdGVkIHR5cGVzIGdlbmVyYXRlZCBmcm9tCi8vLyBhIHR5cGUgbGlicmFyeQpDbGFzcyAlQWN0aXZhdGUuRW51bSBFeHRlbmRzICVJbnRlZ2VyIFsgTm90IFByb2NlZHVyZUJsb2NrLCBTeXN0ZW0gPSAzIF0KewoKfQo="     ]   } }'}),"\n",(0,n.jsx)(s.h3,{id:"getdocs",children:"GetDocs"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetDocs(pNamespace As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method returns the text for the all the specified documents in the namespace.",(0,n.jsx)(s.br,{}),"\nA list of documents to be fetched is passed in the body of the http request.",(0,n.jsx)(s.br,{}),'\nThe request body is simply a JSON array of names of documents you want to fetch [ "%Activate.Enum.cls", ... ]']}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 415 if the we are not passed application/json as the content type",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsxs)(s.p,{children:["Return content will be an array of document objects. Errors pertaining to a document",(0,n.jsx)(s.br,{}),"\nwill be in the status property of each document object."]}),"\n",(0,n.jsxs)(s.p,{children:["See the 'GetDoc' description above for a detailed explanation of the individual fields returned.",(0,n.jsx)(s.br,{}),"\nThis method does NOT support the storageOnly flag. Neither does it do ETAG checking (and therefore",(0,n.jsx)(s.br,{}),"\nwill NOT return an HTTP 304 under any circumstances)."]}),"\n",(0,n.jsx)(s.h3,{id:"index",children:"Index"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Index(pNamespace As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method returns the indices for the all the specified documents in the namespace.",(0,n.jsx)(s.br,{}),"\nA list of documents to be indexed is passed in the body of the http request.",(0,n.jsx)(s.br,{}),'\nThe request body is simply a JSON array of names of documents you want to index [ "%Activate.Enum.cls", ... ]']}),"\n",(0,n.jsx)(s.p,{children:"NOTE: Currently we only support the indexing of classes"}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 415 if the we are not passed application/json as the content type",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsxs)(s.p,{children:["Return content will be an array of index document objects. Errors pertaining to a document",(0,n.jsx)(s.br,{}),"\nwill be in the status property of each document object. The index contains information relating",(0,n.jsx)(s.br,{}),"\nto the structure and documentation of documents on the server and will vary by the category to",(0,n.jsx)(s.br,{}),"\nwhich the document belongs. Below is an example for a class."]}),"\n",(0,n.jsx)(s.p,{children:'{   "status": {     "errors": [],     "summary": ""   },   "console": [],   "result": {     "content": [       {         "name": "%Activate.GenericObject.cls",         "db": "IRISLIB",         "ts": "2016-01-04 14:00:04.000",         "gen": false,         "others": [           "%Activate.GenericObject.1.INT"         ],         "cat": "CLS",         "content": {           "desc": "This class provides functionality to create an ActiveX object, invoke its methods\\nand Get/Set its properties by name.",           "depl": false,           "depr": false,           "final": false,           "hidden": false,           "super": [             "%Activate.IDispatch"           ],           "methods": [             {               "name": "CreateObject",               "desc": "This method is used to create a generic object given only its progid. If the object\\ncannot be found an exception is thrown. The return value should be tested against\\n$$$NULLOREF  in the usual manner to ensure that the object has been successfully\\ncreated",               "depr": false,               "final": true,               "internal": false,               "private": false,               "scope": "class",               "returntype": "%Library.RegisteredObject",               "args": [                 {                   "name": "Progid",                   "type": "%Library.String"                 }               ]             },             {               "name": "GetObject",               "desc": "This method is used to create a generic object from a moniker. If the object\\ncannot be found an exception is thrown. The return value should be tested against\\n$$$NULLOREF  in the usual manner to ensure that the object has been successfully\\ncreated.",               "depr": false,               "final": true,               "internal": false,               "private": false,               "scope": "class",               "returntype": "%Library.RegisteredObject",               "args": [                 {                   "name": "Moniker",                   "type": "%Library.String"                 }               ]             }           ],           "parameters": [],           "properties": []         },         "status": ""       }     ]   } }'}),"\n",(0,n.jsx)(s.h3,{id:"query",children:"Query"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Query(pNamespace As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method returns the results of running the specified query in the specified namespace.",(0,n.jsx)(s.br,{}),"\nThe request body is simply a JSON object which specifies the query",(0,n.jsx)(s.br,{}),"\n{",(0,n.jsx)(s.br,{}),'\n"query":"call %studio.debugger_processlist()",',(0,n.jsx)(s.br,{}),'\n"parameters" : []',(0,n.jsx)(s.br,{}),"\n}"]}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 415 if the we are not passed application/json as the content type",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsxs)(s.p,{children:["Return content will be an array of objects. Errors will be in the status property of each document object.",(0,n.jsx)(s.br,{}),"\nThe objects contain information relating to each row returned by the query."]}),"\n",(0,n.jsx)(s.p,{children:'{   "status": {     "errors": [],     "summary": ""   },   "console": [],   "result": {     "content": [     ]   } }'}),"\n",(0,n.jsx)(s.h3,{id:"appendresultset",children:"AppendResultSet"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AppendResultSet(pArray As %DynamicArray, pResult As %SQL.StatementResult) As %Status [ Internal, Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Helper method for Query Appends result set (%SQL.StatementResult) to an array. Largely copied from %DataModel.Document.Server.SQL.Query"}),"\n",(0,n.jsx)(s.h3,{id:"headdoc",children:"HeadDoc"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod HeadDoc(pNamespace As %String, pDocName As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method returns the HttpHeader for the named document and namespace.",(0,n.jsx)(s.br,{}),"\nThis information primarily contains the timestamp and can be used to detect",(0,n.jsx)(s.br,{}),"\ndiscrepancies between server and client version"]}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 400 if the resource name is an invalid document name",(0,n.jsx)(s.br,{}),"\nHTTP 404 if the resource is not found",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsx)(s.h3,{id:"putdoc",children:"PutDoc"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PutDoc(pNamespace As %String, pDocName As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method saves the supplied document"}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 201 if created",(0,n.jsx)(s.br,{}),"\nHTTP 400 if the resource name is an invalid document name",(0,n.jsx)(s.br,{}),"\nHTTP 404 if the resource is not found",(0,n.jsx)(s.br,{}),"\nHTTP 409 if a conflict between server and client versions is detected",(0,n.jsx)(s.br,{}),"\nHTTP 415 if not passed text/plain as content type",(0,n.jsx)(s.br,{}),"\nHTTP 425 if the document is locked and cannot be written to",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsxs)(s.p,{children:["Return content will be a document object.",(0,n.jsx)(s.br,{}),"\nErrors pertaining to the document will be in the status property of the document object."]}),"\n",(0,n.jsxs)(s.p,{children:["The URL parameter ?ignoreConflict=1 can be passed to bypass ETAG checking (see reference",(0,n.jsx)(s.br,{}),"\nabove in 'GetDoc') and force the document to be written on the server."]}),"\n",(0,n.jsxs)(s.p,{children:["Note that if the text on the server is changed during the save process (for example",(0,n.jsx)(s.br,{}),"\nby a source control hook) the new text will be returned in the content array",(0,n.jsx)(s.br,{}),"\nof the returned document."]}),"\n",(0,n.jsx)(s.p,{children:"Here is an example of a PUT for the document xyz.mac"}),"\n",(0,n.jsx)(s.p,{children:'{  "enc": false,  "content": [    "ROUTINE xyz",    "xyz ;",    "   w "hello""    ] }'}),"\n",(0,n.jsx)(s.p,{children:"and the corresponding response :-"}),"\n",(0,n.jsx)(s.p,{children:'{   "status": {     "errors": [],     "summary": ""   },   "console": [   ],   "result": {     "name": "xyz.mac",     "db": "IRISSYS",     "ts": "2016-01-12 17:18:29.332",     "cat": "RTN",     "status": "",     "enc": false,     "content": []   } }'}),"\n",(0,n.jsx)(s.h3,{id:"checksourcecontroledit",children:"CheckSourceControlEdit"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckSourceControlEdit(pName As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"deletedoc",children:"DeleteDoc"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DeleteDoc(pNamespace As %String, pDocName As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method deletes the named document in the specified namespace"}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 400 if the resource name is an invalid document name",(0,n.jsx)(s.br,{}),"\nHTTP 404 if the resource is not found",(0,n.jsx)(s.br,{}),"\nHTTP 423 if the resource is locked",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsxs)(s.p,{children:["Return content will be a document object.",(0,n.jsx)(s.br,{}),"\nerrors pertaining to the document will be in the status property of the document object"]}),"\n",(0,n.jsx)(s.p,{children:"Example Output :-"}),"\n",(0,n.jsx)(s.p,{children:'{   "status": {     "errors": [],     "summary": ""   },   "console": [   ],   "result": {     "name": "xyz.mac",     "db": "IRISSYS",     "ts": "",     "cat": "RTN",     "status": "",     "enc": false,     "content": []   } }'}),"\n",(0,n.jsx)(s.h3,{id:"deletedocs",children:"DeleteDocs"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DeleteDocs(pNamespace As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method deletes the list of named documents which is passed in the body of the http request.",(0,n.jsx)(s.br,{}),'\nas a JSON array [ "%Activate.Enum.cls", ... ]']}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 400 if the posted data does not contain a JSON array",(0,n.jsx)(s.br,{}),"\nHTTP 415 if the we are not passed application/json as the content type",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsxs)(s.p,{children:["Return content will be an array of document objects. Errors pertaining to a each document",(0,n.jsx)(s.br,{}),"\nwill be in the status property of each document object. If the status is an empty string then",(0,n.jsx)(s.br,{}),"\nthe document was deleted successfully. Otherwise the document was NOT deleted. For deleted docs",(0,n.jsx)(s.br,{}),"\nthe db entry will indicate from which database the doc was deleted."]}),"\n",(0,n.jsx)(s.p,{children:'POSTED: ["xyz.mac","notexist.cls"]'}),"\n",(0,n.jsx)(s.p,{children:"Result :-"}),"\n",(0,n.jsx)(s.p,{children:'{   "status": {     "errors": [],     "summary": ""   },   "console": [   ],   "result": [     {       "name": "xyz.mac",       "db": "",       "status": ""     },     {       "name": "notexist.cls",       "db": "",       "status": "ERROR #5001: Document Does Not Exist: User.notexist.cls [zExistsDoc+3^%Atelier.v1.Utils.General.1:%SYS]"     }   ] }'}),"\n",(0,n.jsx)(s.h3,{id:"compile",children:"Compile"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Compile(pNamespace As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method permits the compilation of more than one document at a time.",(0,n.jsx)(s.br,{}),"\nThe method expects a content body to be encoded in JSON and contain an",(0,n.jsx)(s.br,{}),"\narray of items (document names) to be compiled."]}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 400 if the resource name is an invalid document name",(0,n.jsx)(s.br,{}),"\nHTTP 404 if the resource is not found",(0,n.jsx)(s.br,{}),"\nHTTP 423 if the document is locked",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsxs)(s.p,{children:["Return content will be an array of document objects.",(0,n.jsx)(s.br,{}),"\nErrors pertaining to the document will be in the status property of the document object."]}),"\n",(0,n.jsxs)(s.p,{children:["The URL parameter 'flags' can be passed (default 'cuk') which will be passed to the compiler.",(0,n.jsx)(s.br,{}),"\nThe URL parameter 'source' can be passed with a value of 0 if you don't want the source of the",(0,n.jsx)(s.br,{}),"\ncompiled document to be returned."]}),"\n",(0,n.jsx)(s.p,{children:'POSTED: ["Atelier.NewClass1.cls"]'}),"\n",(0,n.jsx)(s.p,{children:"Example Output :-"}),"\n",(0,n.jsx)(s.p,{children:'{   "status": {     "errors": [],     "summary": ""   },   "console": [     "Compilation started on 01/12/2016 17:44:00 with qualifiers \'cuk\'",     "Compiling class Atelier.NewClass1",     "Compiling table Atelier.NewClass1",     "Compiling routine Atelier.NewClass1.1",     "Compilation finished successfully in 0.067s.",     ""   ],   "result": {     "content": [       {         "name": "Atelier.NewClass1.cls",         "status": "",         "content": [           "Storage Default",           "{",           "",           "",           "%%CLASSNAME",           "",           "",           "^Atelier.NewClass1D",           "NewClass1DefaultData",           "^Atelier.NewClass1D",           "^Atelier.NewClass1I",           "^Atelier.NewClass1S",           "%Storage.Persistent",           "}",           ""         ],         "db": "IRISSYS",         "ts": "2016-01-12 17:44:00.053",         "enc": false       }     ]   } }'}),"\n",(0,n.jsx)(s.h3,{id:"getdocnames",children:"GetDocNames"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetDocNames(pNamespace As %String, pCat, pType)\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method returns a list of document names. Cat and Type constrain the types of documents,",(0,n.jsx)(s.br,{}),"\nwhilst the URL parameter 'generated' determines whether generated documents should be included",(0,n.jsx)(s.br,{}),"\nand the 'filter' parameter provides a SQL filter that can be used to match the names."]}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsx)(s.p,{children:"Return content will be an array of document descriptors :-"}),"\n",(0,n.jsx)(s.p,{children:'{     "status": {         "errors": [],         "summary": ""     },     "console": [],     "result": {         "content": [{             "name": "%Activate.Enum.cls",             "cat": "CLS",             "ts": "2016-01-04 14:00:04.000",             "db": "IRISLIB",             "gen": false         }]     } }'}),"\n",(0,n.jsx)(s.h3,{id:"cvtclientdoctoxml",children:"CvtClientDocToXml"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CvtClientDocToXml(pNamespace As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method converts a client Doc to the corresponding XML.",(0,n.jsx)(s.br,{}),"\nNote: This is NOT a public API and will be retired in a future version",(0,n.jsx)(s.br,{}),"\nCustomers SHOULD NOT call this API from their own code"]}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 400 if the posted content is empty",(0,n.jsx)(s.br,{}),"\nHTTP 415 if content type is not application/json",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsx)(s.p,{children:"Returned content is XML."}),"\n",(0,n.jsx)(s.h3,{id:"cvtxmltoclientdoc",children:"CvtXmlToClientDoc"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CvtXmlToClientDoc(pNamespace As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method converts a XML to the corresponding client document format.",(0,n.jsx)(s.br,{}),"\nNote: This is NOT a public API and will be retired in a later version",(0,n.jsx)(s.br,{}),"\nCustomers SHOULD NOT call this API from their own code"]}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 400 if the posted content is empty",(0,n.jsx)(s.br,{}),"\nHTTP 415 if content type is not application/xml",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsx)(s.p,{children:"Returned content is plain text."}),"\n",(0,n.jsx)(s.h3,{id:"getmodifieddocnames",children:"GetModifiedDocNames"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetModifiedDocNames(pNamespace As %String, pType As %String) As %Status\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This method is passed a list of database keys and hashes as a json array.",(0,n.jsx)(s.br,{}),"\nThe hash values are used to determine if anything has changed in the database defined by the key.",(0,n.jsx)(s.br,{}),"\nThe first call to this api necessarily POSTS an empty array. Subsequent posts can post the dbname",(0,n.jsx)(s.br,{}),"\nand dbhash to discover which documents have been modified on the server since the last call"]}),"\n",(0,n.jsx)(s.p,{children:"Input format :-"}),"\n",(0,n.jsx)(s.p,{children:'[ { "dbname" : "USER", "dbhash" : "KWAGbOdnRblPzANaiv1Oiu0BZLI" }, ... ]'}),"\n",(0,n.jsx)(s.p,{children:"Output format :-"}),"\n",(0,n.jsxs)(s.p,{children:['[ { "dbname" : "USER", "dbhash" : "Qx1zuNaulq3b_1yR9ahZAfjkc-", "crhash" : "47763751EC",',(0,n.jsx)(s.br,{}),'\n"docs" : [{ "name": "User.NewClass1.cls", "ts": "2015-05-29 17:24:30.156", "gen": false, "depl": false }, ... ]',(0,n.jsx)(s.br,{}),"\n}, ... ]"]}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 400 if the posted content is empty or type is anything other than CLS",(0,n.jsx)(s.br,{}),"\nHTTP 415 if content type is not application/json",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsx)(s.h3,{id:"createsourcecontrolclass",children:"CreateSourceControlClass"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateSourceControlClass() As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Determine the source control class and get an instance of it. The instance is stored in",(0,n.jsx)(s.br,{}),"\nthe public variable %SourceControl and is used by various system utilities."]}),"\n",(0,n.jsx)(s.h3,{id:"getnamespaces",children:"GetNamespaces"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetNamespaces() As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method returns a list of namespaces for this server."}),"\n",(0,n.jsxs)(s.p,{children:["GET ",(0,n.jsx)(s.a,{href:"http://localhost:57772/api/atelier/v1/%25SYS/namespaces",children:"http://localhost:57772/api/atelier/v1/%25SYS/namespaces"})]}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsx)(s.p,{children:"Returned content is an array of namespaces."}),"\n",(0,n.jsx)(s.p,{children:'{   "status": {     "errors": [],     "summary": ""   },   "console": [],   "result": {     "content": [       "%SYS",       "DOCBOOK",       "SAMPLES",       "USER"     ]   } }'}),"\n",(0,n.jsx)(s.h3,{id:"getnamespace",children:"GetNamespace"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetNamespace(pNamespace) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method returns information about a specific namespace"}),"\n",(0,n.jsxs)(s.p,{children:["GET ",(0,n.jsx)(s.a,{href:"http://localhost:57772/api/atelier/v1/:namespace",children:"http://localhost:57772/api/atelier/v1/:namespace"})]}),"\n",(0,n.jsxs)(s.p,{children:["GET ",(0,n.jsx)(s.a,{href:"http://localhost:57772/api/atelier/v1/DOCBOOK",children:"http://localhost:57772/api/atelier/v1/DOCBOOK"})]}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsx)(s.p,{children:"Returned content is information about a namespace"}),"\n",(0,n.jsx)(s.p,{children:'{   "status": {     "errors": [],     "summary": ""   },   "console": [],   "result": {     "content": {       "name": "DOCBOOK",       "db": [         { "name": "DOCBOOK", "crhash": "5046B9BF0DE", "default": true },         { "name": "IRISSYS", "crhash": "47763751EC", "default": false },         { "name": "IRISLOCALDATA", "crhash": "4776EDD1C3", "default": false },         { "name": "IRISLIB", "crhash": "5023332D0A7", "default": false }       ],       "features": [         {           "name": "ENSEMBLE",           "enabled": false         }       ],     }   } }'}),"\n",(0,n.jsx)(s.h3,{id:"getcspapps",children:"GetCSPApps"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetCSPApps(pNamespace As %String = "") As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"This method returns a list csp apps defined on the server (or namespace)"}),"\n",(0,n.jsxs)(s.p,{children:["GET ",(0,n.jsx)(s.a,{href:"http://localhost:57772/api/atelier/v1/%25SYS/cspapps",children:"http://localhost:57772/api/atelier/v1/%25SYS/cspapps"}),(0,n.jsx)(s.br,{}),"\nGET ",(0,n.jsx)(s.a,{href:"http://localhost:57772/api/atelier/v1/%25SYS/cspapps/DOCBOOK",children:"http://localhost:57772/api/atelier/v1/%25SYS/cspapps/DOCBOOK"})]}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsx)(s.p,{children:"Returned content is an array of csp application descriptors."}),"\n",(0,n.jsx)(s.p,{children:'{   "status": {     "errors": [],     "summary": ""   },   "console": [],   "result": {     "content": [       "/csp/broker",       "/csp/docbook",       "/csp/documatic",       "/csp/samples",       "/csp/samples/docserver",       "/csp/sys",       "/csp/sys/bi",       "/csp/sys/exp",       "/csp/sys/mgr",       "/csp/sys/op",       "/csp/sys/sec",       "/csp/user",       "/isc/pki",       "/isc/studio/rules",       "/isc/studio/templates",       "/isc/studio/usertemplates"     ]   } }'}),"\n",(0,n.jsxs)(s.p,{children:["passing the URL parameter ?detail=1 will return an array containing objects which describe",(0,n.jsx)(s.br,{}),"\nthe application in more detail :-"]}),"\n",(0,n.jsx)(s.p,{children:'{   "status": {     "errors": [],     "summary": ""   },   "console": [],   "result": {     "content": [       {         "default": false,         "name": "/csp/broker"       },       {         "default": true,         "name": "/csp/sys"       },       {         "default": false,         "name": "/csp/sys/bi"       },       {         "default": false,         "name": "/csp/sys/exp"       },       {         "default": false,         "name": "/csp/sys/mgr"       },       {         "default": false,         "name": "/csp/sys/op"       },       {         "default": false,         "name": "/csp/sys/sec"       },       {         "default": false,         "name": "/isc/pki"       },       {         "default": false,         "name": "/isc/studio/rules"       },       {         "default": false,         "name": "/isc/studio/templates"       },       {         "default": false,         "name": "/isc/studio/usertemplates"       }     ]   } }'}),"\n",(0,n.jsx)(s.h3,{id:"getjobs",children:"GetJobs"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetJobs() As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method returns a list of running jobs in the InterSystems IRIS instance."}),"\n",(0,n.jsxs)(s.p,{children:["GET ",(0,n.jsx)(s.a,{href:"http://localhost:57772/api/atelier/v1/%25SYS/jobs?system=1",children:"http://localhost:57772/api/atelier/v1/%25SYS/jobs?system=1"})]}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsxs)(s.p,{children:["Returned content is an array of job descriptors.",(0,n.jsx)(s.br,{}),'\n{ "status": { "errors": [], "summary": "" }, "console": [], "result": { "content": [ { "pid": 1394, "namespace": "%SYS", "routine": "%Studio.Debugger.1", "state": "RUN", "device": "|TCP|1972|1394" }, { "pid": 1345, "namespace": "%SYS", "routine": "RECEIVE", "state": "HANG", "device": "/dev/null" }, { "pid": 1364, "namespace": "%SYS", "routine": "%SYS.TaskSuper.1", "state": "SELECTW", "device": "/dev/null" }, { "pid": 1396, "namespace": "%SYS", "routine": "%SYS.cspServer3", "state": "READ", "device": "|TCP|1972|1396" }, { "pid": 1346, "namespace": "%SYS", "routine": "ECPWork", "state": "RUNW", "device": "/dev/null" }, { "pid": 1417, "namespace": "%SYS", "routine": "%SYS.BINDSRV", "state": "READ", "device": "|TCP|1972|1417" } ] } }']}),"\n",(0,n.jsx)(s.h3,{id:"rundebugger",children:"RunDebugger"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod RunDebugger() As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"getensclasstype",children:"GetEnsClassType"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetEnsClassType(pNamespace As %String = "", pClassType As %Integer = 0) As %Status\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This method returns a list of Ensemble class names.",(0,n.jsx)(s.br,{}),"\nHTTP Codes returned:-"]}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsx)(s.p,{children:"Returned content is an array of selected Ensemble class names."}),"\n",(0,n.jsxs)(s.p,{children:["These are the query types:",(0,n.jsx)(s.br,{}),"\nAdapters 1",(0,n.jsx)(s.br,{}),"\nInboundAdapters 2",(0,n.jsx)(s.br,{}),"\nOutboundAdapters 3",(0,n.jsx)(s.br,{}),"\nMessages 4",(0,n.jsx)(s.br,{}),"\nRequests 5",(0,n.jsx)(s.br,{}),"\nResponses 6",(0,n.jsx)(s.br,{}),"\nBusinessServices 7",(0,n.jsx)(s.br,{}),"\nBusinessProcesses 8",(0,n.jsx)(s.br,{}),"\nBusinessOperations 9",(0,n.jsx)(s.br,{}),"\nDataTransformation 10",(0,n.jsx)(s.br,{}),"\nProduction 11",(0,n.jsx)(s.br,{}),"\nBusinessHost 12",(0,n.jsx)(s.br,{}),"\nDashboard 13",(0,n.jsx)(s.br,{}),"\nRule 14"]}),"\n",(0,n.jsx)(s.p,{children:"Example response:"}),"\n",(0,n.jsx)(s.p,{children:'{   status: {     errors: []     summary: ""   }   console: []   result: {     content: [         "Ens.Enterprise.MsgBank.BankTCPAdapter"         "Ens.Enterprise.MsgBank.ClientTCPAdapter"         "Ens.InboundAdapter"         "Ens.OutboundAdapter"     ]   } }'}),"\n",(0,n.jsx)(s.h3,{id:"getdlgcat",children:"getDlgCat"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod getDlgCat(pType As %Integer) As %String [ CodeMode = expression, Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:['Data("Type") values returned for the %RoutineMgr:StudioOpenDialog result set are:',(0,n.jsx)(s.br,{}),'\n0:"MAC",1:"INT",2:"INC",3:"BAS",4:"CLS",5:"CSP",6:"CSR",7:"GBL",8:"PRJ",11:"MVB",12:"MVI",13:"OBJ",100:"DFI"']}),"\n",(0,n.jsx)(s.h3,{id:"gettypecat",children:"getTypeCat"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod getTypeCat(pType As %String) As %String [ CodeMode = expression, Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"Change external type values to our category"}),"\n",(0,n.jsx)(s.h3,{id:"getadpinputoutputclass",children:"GetAdpInputOutputClass"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetAdpInputOutputClass(pNamespace As %String = "", pAdpName As %String = "") As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"This method returns the input and output type for the adapter."}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 404 if the adapter does not exist",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsx)(s.p,{children:"Example response:"}),"\n",(0,n.jsx)(s.p,{children:'{   status: {     errors: []     summary: ""   }   console: []   result: {     content: {       input: "%Stream.Object"       output: "%String"     }   } }'}),"\n",(0,n.jsx)(s.h3,{id:"getmetadata",children:"GetMetaData"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetMetaData(pDataBaseName As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"This method returns the binary contents of the METADATA.zip file for the named database"}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if OK",(0,n.jsx)(s.br,{}),"\nHTTP 404 if the document does not exist",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsx)(s.h3,{id:"queueasync",children:"QueueAsync"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod QueueAsync(pNameSpace As %String) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This call queues an item for work. On success it returns 202 and sets the 'Location' header",(0,n.jsx)(s.br,{}),"\nto indicate where the results can be retrieved from with an HTTP GET."]}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 202 if Accepted",(0,n.jsx)(s.br,{}),"\nHTTP 404 if the request type does not exist",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsx)(s.h3,{id:"pollasync",children:"PollAsync"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PollAsync(pNameSpace As %String, pID As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,n.jsxs)(s.p,{children:["This call polls a queued item for console output and results. On success it returns 200.",(0,n.jsx)(s.br,{}),"\nConsole output and results are found in the standard locations for Atelier REST APIs.",(0,n.jsx)(s.br,{}),"\nIf there is more output expected the server will set the 'Retry-After' header. The client",(0,n.jsx)(s.br,{}),"\nshould read this header to determine if another call should be made.",(0,n.jsx)(s.br,{}),"\nWhen the result of processing is available (or the work is finished) a GET to this API",(0,n.jsx)(s.br,{}),"\nwill return any results in the 'content' field and (crucially) will NOT set the 'Retry-After'",(0,n.jsx)(s.br,{}),"\nheader. This is an indication that processing is finished."]}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if Accepted",(0,n.jsx)(s.br,{}),"\nHTTP 404 if the document does not exist",(0,n.jsx)(s.br,{}),"\nHTTP 410 if the results have been purged (client never retrieved after lengthy delay)",(0,n.jsx)(s.br,{}),"\nHTTP 423 if the queue is locked",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsx)(s.h3,{id:"cancelasync",children:"CancelAsync"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CancelAsync(pNameSpace As %String, pID As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This call cancels a work request that has been previously queued."}),"\n",(0,n.jsx)(s.p,{children:"HTTP Codes returned:-"}),"\n",(0,n.jsxs)(s.p,{children:["HTTP 200 if Cancelled",(0,n.jsx)(s.br,{}),"\nHTTP 202 if Accepted and Cancel issued",(0,n.jsx)(s.br,{}),"\nHTTP 404 if the request does not exist",(0,n.jsx)(s.br,{}),"\nHTTP 500 if an error occurs (details will be in status error array)"]}),"\n",(0,n.jsx)(s.h3,{id:"monitor",children:"Monitor"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Monitor() [ Internal ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This is a background job that monitors the queue for work to do"}),"\n",(0,n.jsx)(s.h3,{id:"monitorbegincapture",children:"MonitorBeginCapture"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod MonitorBeginCapture(pID As %String, Output pCookie As %String) As %Status [ Internal, ProcedureBlock = 0 ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"monitorendcapture",children:"MonitorEndCapture"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod MonitorEndCapture(pCookie As %String) As %Status [ Internal ]\n"})})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>c});var n=t(96540);const r={},a=n.createContext(r);function i(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);