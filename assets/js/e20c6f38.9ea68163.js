"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[16832],{91354:(e,s,a)=>{a.r(s),a.d(s,{contentTitle:()=>r,default:()=>o,frontMatter:()=>l,toc:()=>i});var t=a(74848),n=a(28453);const l={pagination_prev:null,pagination_next:null},r="Config.Namespaces",i=[{value:"Parameters",id:"parameters",level:2},{value:"CPFFlags",id:"cpfflags",level:3},{value:"CAPITALNAME",id:"capitalname",level:3},{value:"EMSSERVICE",id:"emsservice",level:3},{value:"SYSTEMDATABASES",id:"systemdatabases",level:3},{value:"Properties",id:"properties",level:2},{value:"Globals",id:"globals",level:3},{value:"Library",id:"library",level:3},{value:"Routines",id:"routines",level:3},{value:"SysGlobals",id:"sysglobals",level:3},{value:"SysRoutines",id:"sysroutines",level:3},{value:"TempGlobals",id:"tempglobals",level:3},{value:"Interop",id:"interop",level:3},{value:"Methods",id:"methods",level:2},{value:"GlobalsSet",id:"globalsset",level:3},{value:"LibrarySet",id:"libraryset",level:3},{value:"NameSet",id:"nameset",level:3},{value:"RoutinesSet",id:"routinesset",level:3},{value:"SysGlobalsSet",id:"sysglobalsset",level:3},{value:"SysRoutinesSet",id:"sysroutinesset",level:3},{value:"TempGlobalsSet",id:"tempglobalsset",level:3},{value:"Copy",id:"copy",level:3},{value:"CopyMaps",id:"copymaps",level:3},{value:"CreateCallBack",id:"createcallback",level:3},{value:"Default",id:"default",level:3},{value:"NamespacesByDB",id:"namespacesbydb",level:3},{value:"NamespacesByDir",id:"namespacesbydir",level:3},{value:"Load",id:"load",level:3},{value:"LoadMappings",id:"loadmappings",level:3},{value:"Filter",id:"filter",level:3},{value:"CreateOne",id:"createone",level:3},{value:"ModifyOne",id:"modifyone",level:3},{value:"ActivateAll",id:"activateall",level:3},{value:"ActivateOne",id:"activateone",level:3},{value:"%OnDeleteCallBack",id:"ondeletecallback",level:3},{value:"%OnAfterActivateCallback",id:"onafteractivatecallback",level:3},{value:"MoveToActive",id:"movetoactive",level:3},{value:"Rename",id:"rename",level:3},{value:"%OnValidateObject",id:"onvalidateobject",level:3},{value:"ListExecute",id:"listexecute",level:3},{value:"ListFetch",id:"listfetch",level:3},{value:"ListClose",id:"listclose",level:3},{value:"ListFilterExecute",id:"listfilterexecute",level:3},{value:"ListFilterFetch",id:"listfilterfetch",level:3},{value:"ListFilterClose",id:"listfilterclose",level:3}];function c(e){const s={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"confignamespaces",children:"Config.Namespaces"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Class Config.Namespaces Extends (%Persistent, Config.CommonMultipleMethods, Config.CommonProperties, %SYSTEM.Help) [ Final, Inheritance = right, System = 4 ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["This class allows you to modify and view the [Namespaces] section of the CPF file through programatic APIs. While properties are usually modified through the System Management portal, there may be some occasion where modifying them through the API's is best for your system. In all the Config methods, if you do not specify the CPFFile parameter, the currently active CPF file is used. If you wish to modify a CPF file which is not the currently active one, then specify the CPFFile you wish to modify in the method call.",(0,t.jsx)(s.br,{}),"\nThe Flags parameter does not normally need to be specified; the defaults are usually sufficient for most cases.",(0,t.jsx)(s.br,{}),"\nYou can use either the provided API's (Create/Get/Modify/Delete) to modify the properties by passing in the correct parameters, or use Object syntax to open and directly manipulate the config objects (Open() and Exists()). Most objects created here need only to specify the Name of the object, and 1 or 2 properties since the the defaults are what are commonly used for most cases."]}),"\n",(0,t.jsx)(s.p,{children:"EXAMPLE:"}),"\n",(0,t.jsxs)(s.p,{children:['; Use class methods to create an instance %SYS>s Name="ABC" %SYS>s Properties("Globals")="USER" %SYS>s Status=##Class(Config.Namespaces).Create(Name,.Properties) %SYS>i \'Status w !,"Error="',(0,t.jsx)(s.em,{children:'$SYSTEM.Status.GetErrorText(Status) ; Use class methods to modify properties %SYS>s Status=##Class(Config.Namespaces).Get(Name,.Properties) %SYS>i \'Status w !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status) %SYS>zw Properties Properties("Globals")="USER" Properties("Library")="IRISLIB" Properties("Routines")="USER" Properties("SysGlobals")="IRISSYS" Properties("SysRoutines")="IRISSYS" Properties("TempGlobals")="IRISTEMP" %SYS>s Properties("Globals")="SAMPLES" %SYS>s Status=##Class(Config.Namespaces).Modify(Name,.Properties) %SYS>i \'Status w !,"Error="',(0,t.jsx)(s.em,{children:'$SYSTEM.Status.GetErrorText(Status) ; Now use Objects to modify properties %SYS>s Obj=##Class(Config.Namespaces).Open(Name) ; We could have used i ##Class(Config.Namespaces).Exists(Name,.Obj) instead of Open() %SYS>w Obj.Globals SAMPLES %SYS>s Obj.Routines="USER" %SYS>s Status=Obj.%Save() %SYS>i \'Status w !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status) ; Now delete the object we just created %SYS>s Status=##Class(Config.Namespaces).Delete(Name) %SYS>i \'Status w !,"Error="_$SYSTEM.Status.GetErrorText(Status)']}),"\n",(0,t.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(s.h3,{id:"cpfflags",children:"CPFFlags"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter CPFFlags [ Internal ] = {1};\n"})}),"\n",(0,t.jsx)(s.p,{children:"{$$$CPFSave};"}),"\n",(0,t.jsx)(s.h3,{id:"capitalname",children:"CAPITALNAME"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter CAPITALNAME = 1;\n"})}),"\n",(0,t.jsx)(s.p,{children:"Namespace name is always capitalized."}),"\n",(0,t.jsx)(s.h3,{id:"emsservice",children:"EMSSERVICE"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter EMSSERVICE [ Internal ] = "Namespace";\n'})}),"\n",(0,t.jsx)(s.h3,{id:"systemdatabases",children:"SYSTEMDATABASES"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter SYSTEMDATABASES [ Internal ] = ",IRISSYS,IRISLIB,IRISTEMP,IRISLOCALDATA,IRISAUDIT,ENSLIB,IRISMETRICS,";\n'})}),"\n",(0,t.jsx)(s.p,{children:"JO3095: List of system database names"}),"\n",(0,t.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(s.h3,{id:"globals",children:"Globals"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Globals As %String(MAXLEN = 64, MINLEN = 1) [ Required ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Default database for globals."}),"\n",(0,t.jsx)(s.h3,{id:"library",children:"Library"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property Library As %String(MAXLEN = 64, MINLEN = 1) [ InitialExpression = "IRISLIB", Internal, Required ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"Default database for system library routines."}),"\n",(0,t.jsx)(s.h3,{id:"routines",children:"Routines"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Routines As %String(MAXLEN = 64, MINLEN = 1) [ Required ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Default database for routines."}),"\n",(0,t.jsx)(s.h3,{id:"sysglobals",children:"SysGlobals"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property SysGlobals As %String(MAXLEN = 64, MINLEN = 1) [ InitialExpression = "IRISSYS", Internal, Required ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"Default database for system globals."}),"\n",(0,t.jsx)(s.h3,{id:"sysroutines",children:"SysRoutines"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property SysRoutines As %String(MAXLEN = 64, MINLEN = 1) [ InitialExpression = "IRISSYS", Internal, Required ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"Default database for system routines."}),"\n",(0,t.jsx)(s.h3,{id:"tempglobals",children:"TempGlobals"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'Property TempGlobals As %String(MAXLEN = 64, MINLEN = 1) [ InitialExpression = "IRISTEMP", Required ];\n'})}),"\n",(0,t.jsx)(s.p,{children:"Default database for temporary globals."}),"\n",(0,t.jsx)(s.h3,{id:"interop",children:"Interop"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Property Interop As %Boolean [ InitialExpression = 0, Transient ];\n"})}),"\n",(0,t.jsx)(s.p,{children:"Enable interoperability."}),"\n",(0,t.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(s.h3,{id:"globalsset",children:"GlobalsSet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method GlobalsSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Force the Globals name to be uppercase."}),"\n",(0,t.jsx)(s.h3,{id:"libraryset",children:"LibrarySet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method LibrarySet(Val) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Force Library name to be uppercase."}),"\n",(0,t.jsx)(s.h3,{id:"nameset",children:"NameSet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method NameSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Force the Namespace name to be uppercase."}),"\n",(0,t.jsx)(s.h3,{id:"routinesset",children:"RoutinesSet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method RoutinesSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Force the Routines name to be uppercase."}),"\n",(0,t.jsx)(s.h3,{id:"sysglobalsset",children:"SysGlobalsSet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method SysGlobalsSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Force the system globals to be uppercase."}),"\n",(0,t.jsx)(s.h3,{id:"sysroutinesset",children:"SysRoutinesSet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method SysRoutinesSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Force the system routines name to be uppercase."}),"\n",(0,t.jsx)(s.h3,{id:"tempglobalsset",children:"TempGlobalsSet"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method TempGlobalsSet(Val) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Force the temporary globals name to be uppercase."}),"\n",(0,t.jsx)(s.h3,{id:"copy",children:"Copy"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Copy(SourceNamespace, DestinationNamespace, CPFFile As %String = "", Flags As %Integer = 0, CopyMappings As %Boolean = 1) As %Status [ Internal ]\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Copy a namespace to new namespace including mappings, and activate them.",(0,t.jsx)(s.br,{}),"\nParameters:",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"SourceNamespace"})," - Namespace to copy.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"DestinationNamespace"})," - New namespace to copy to.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"CPFFile"}),' - Name of the CPF file to copy mappings in, "" = active CPF file.',(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"Flags"})," - Not used.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"CopyMappings"})," - Whether to call CopyMaps. 1 by default. (0 for SMP page because mappings are copied in the background.)"]}),"\n",(0,t.jsx)(s.h3,{id:"copymaps",children:"CopyMaps"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod CopyMaps(SourceNamespace, DestinationNamespace, CPFFile As %String = "", Flags As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Copy all mapping from a namespace to another namespace, and activate them.",(0,t.jsx)(s.br,{}),"\nParameters:",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"SourceNamespace"})," - Source of the namespace mappings to copy.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"DestinationNamespace"})," - namespace to copy mappings to. Namespace must already exist.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"CPFFile"})," - name of the CPF file to copy mappings in."]}),"\n",(0,t.jsx)(s.h3,{id:"createcallback",children:"CreateCallBack"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateCallBack(Obj As %ObjectHandle, Data As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Called by the Create method during import from a CPF file."}),"\n",(0,t.jsx)(s.h3,{id:"default",children:"Default"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Default(CPFFile As %String, Platform As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Write a default Namespaces section in a CPF file.",(0,t.jsx)(s.br,{}),"\nThis method assumes that a CPF file has been opened, and that a U CPFFile command has been executed before this is called."]}),"\n",(0,t.jsx)(s.h3,{id:"namespacesbydb",children:"NamespacesByDB"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod NamespacesByDB(Name As DBName, ByRef NspList As %String, CheckSynonyms As %Boolean = 1, ByRef Mappings As %String, CPFFile As %String = "", Flags As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Returns a list of namespaces that reference a given database.",(0,t.jsx)(s.br,{}),"\nIf CheckSynonyms is true, the search is also performed for all datasets that reference the same .DAT file. Otherwise, the search is only performed for the given datset name.",(0,t.jsx)(s.br,{}),'\nIf Mappings is defined and different than zero, then the following array is returned in addition: When Mappings value is 1, it returned the mappings for the namespaces DO NOT include the database for its definition. When Mappings value is 2, it also returned the mappings for the namespaces include the database for its definition. When Mappings value is 3, only check against default routine and default global database, and don\'t return mappings. Mappings(,"GBL",,)="" Mappings(,"RTN",,)="" Mappings(,"CLS",,)=""']}),"\n",(0,t.jsx)(s.h3,{id:"namespacesbydir",children:"NamespacesByDir"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod NamespacesByDir(Server As %String = "", Directory As %String, Flags As %Integer = 1, ByRef Namespaces As %String) As %Status [ Internal ]\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Return a list of namespaces which contain the database in its mappings.",(0,t.jsx)(s.br,{}),"\nParameters:",(0,t.jsx)(s.br,{}),'\nServer - ECP Server where the directory resides. Default = "" (Local system)',(0,t.jsx)(s.br,{}),"\nDirectory - Directory where the database resides",(0,t.jsx)(s.br,{}),"\nFlags = 1 - Check only default global and default routine database for each namespace",(0,t.jsx)(s.br,{}),"\nFlags = 2 - Check all databases and mappings for each namespace",(0,t.jsx)(s.br,{}),"\nReturn values:",(0,t.jsx)(s.br,{}),'\nNamespaces(Name)=""',(0,t.jsx)(s.br,{}),'\nNote: This function is useful for taking an implied namespace, and determining which namespaces reference its database. For example, given an implied namespace of nsp="^^C:\\iris\\mgr\\" (Manager directory), NamespacesByDir($p(nsp,"^",1),$p(nsp,"^,3),1,.Namespaces) will return Namespaces("%SYS").',(0,t.jsx)(s.br,{}),"\nNote that if a Server is specified, then the Directory specified must be in the same case as defined on the server as no directory normalization is performed for remote databases."]}),"\n",(0,t.jsx)(s.h3,{id:"load",children:"Load"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Load(Obj As %ObjectHandle = "", Flags As %Integer = 1) As %Status [ Internal ]\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Load the parameters into memory and activate.",(0,t.jsx)(s.br,{}),"\nParameters:",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"Obj"}),' = Handle to the object which caused the load. If "", then load everything, only called from STU.',(0,t.jsx)(s.br,{}),"\nIf a delete operation, then Obj is the namespace of the item which was deleted since the oject itself has already been deleted. Note that Obj can either be a Config.Namespace object or a Config.Map* object.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"Flags"})," = Type of modification.",(0,t.jsx)(s.br,{}),"\n0 - Modify",(0,t.jsx)(s.br,{}),"\n1 - Create/Insert",(0,t.jsx)(s.br,{}),"\n2 - Delete"]}),"\n",(0,t.jsx)(s.h3,{id:"loadmappings",children:"LoadMappings"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod LoadMappings(Namespace = "") As %Status [ Internal, Private ]\n'})}),"\n",(0,t.jsx)(s.p,{children:'Build the ^SYS("NSMAP") global based on the ^CONFIG global.'}),"\n",(0,t.jsx)(s.h3,{id:"filter",children:"Filter"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Filter() As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Filter out any mappings in ^CONFIG which do not point at a system database if user defined mappings are not licensed"}),"\n",(0,t.jsx)(s.h3,{id:"createone",children:"CreateOne"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateOne(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"In order to enable interoperability, we have to force a save of this resource now (rather than wait until completion of [Actions] processing)"}),"\n",(0,t.jsx)(s.h3,{id:"modifyone",children:"ModifyOne"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ModifyOne(ByRef Properties As %String) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"In order to enable interoperability, we have to force a save of this resource now (rather than wait until completion of [Actions] processing)"}),"\n",(0,t.jsx)(s.h3,{id:"activateall",children:"ActivateAll"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ActivateAll() As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:'Activate All NameSpaces mapping from the ^SYS("NSMAP") global.'}),"\n",(0,t.jsx)(s.h3,{id:"activateone",children:"ActivateOne"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ActivateOne(Namespace) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:'Activate one specific NameSpace mapping from the ^SYS("NSMAP") global.'}),"\n",(0,t.jsx)(s.h3,{id:"ondeletecallback",children:"%OnDeleteCallBack"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %OnDeleteCallBack(Obj As %ObjectHandle) As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Called from %Delete().",(0,t.jsx)(s.br,{}),"\nAny error returned here will keep the object from being deleted."]}),"\n",(0,t.jsx)(s.h3,{id:"onafteractivatecallback",children:"%OnAfterActivateCallback"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod %OnAfterActivateCallback(Obj As %ObjectHandle, Flags As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,t.jsx)(s.p,{children:"Called by CommonMethods.Activate()"}),"\n",(0,t.jsx)(s.h3,{id:"movetoactive",children:"MoveToActive"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod MoveToActive(Obj As %ObjectHandle = "", Flags As %Integer = 1) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"Move the CPF data into the active config global. This also check if any namespace is added/removed/updated in CPF file since last shutdown."}),"\n",(0,t.jsxs)(s.p,{children:["Parameters:",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"Namespace"}),' - Placeholder for Map classes. Pass as "".']}),"\n",(0,t.jsx)(s.h3,{id:"rename",children:"Rename"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod Rename(OldNamespace, NewNamespace, CPFFile As %String = "", Flags As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Rename a namespace to new namespace including mappings, and activate them.",(0,t.jsx)(s.br,{}),"\nParameters:",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"OldNamespace"})," - Namespace to rename.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"NewNamespace"})," - New namespace to copy to.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"CPFFile"}),' - Name of the CPF file to copy mappings in, "" = active CPF file.']}),"\n",(0,t.jsx)(s.h3,{id:"onvalidateobject",children:"%OnValidateObject"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnValidateObject() As %Status [ Internal ]\n"})}),"\n",(0,t.jsxs)(s.p,{children:["This is called from %Save().",(0,t.jsx)(s.br,{}),"\nAny error returned from this will cause the object to not be saved."]}),"\n",(0,t.jsx)(s.h3,{id:"listexecute",children:"ListExecute"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListExecute(ByRef %qHandle As %Binary, Names As %String = "*", CPFFile As %String = "", Flags As %Integer = 0, Format As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"List Namespaces in a CPF file."}),"\n",(0,t.jsxs)(s.p,{children:["Parameters:",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"Names"})," - Comma separated list of Namespace names",(0,t.jsx)(s.br,{}),'\n"*" - All records match',(0,t.jsx)(s.br,{}),'\n"String,String1" - Any records matching one of these elements',(0,t.jsx)(s.br,{}),'\n"String*" - Any record starting with "String"',(0,t.jsx)(s.br,{}),'\n"String,String1*,String2" - Any record matching one of these elements, or starting with "String1"',(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"CPFFile"})," - Name of the CPF file to use. A null string means use the active CPF file.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"Flags"})," - Currently ignored.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"Format"}),(0,t.jsx)(s.br,{}),"\n0 - Standard report list format",(0,t.jsx)(s.br,{}),"\n1 - ^CONFIG global format",(0,t.jsx)(s.br,{}),"\n2 - CPF file format format",(0,t.jsx)(s.br,{}),"\nNote: This query may change in future versions"]}),"\n",(0,t.jsx)(s.h3,{id:"listfetch",children:"ListFetch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFetch(ByRef %qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"listclose",children:"ListClose"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListClose(ByRef %qHandle As %Binary) As %Status [ Internal, PlaceAfter = ListExecute ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"listfilterexecute",children:"ListFilterExecute"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ListFilterExecute(ByRef qHandle As %Binary, Filter As %String = "", CPFFile As %String = "", Flags As %Integer = 0, Format As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,t.jsx)(s.p,{children:"List Namespaces in a CPF file."}),"\n",(0,t.jsxs)(s.p,{children:["Parameters:",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"Filter"})," - Filter to select columns",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"CPFFile"})," - Name of the CPF file to use. A null string means use the active CPF file.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"Flags"})," - Currently ignored.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"Format"}),(0,t.jsx)(s.br,{}),"\n0 - Standard report list format",(0,t.jsx)(s.br,{}),"\n1 - ^CONFIG global format",(0,t.jsx)(s.br,{}),"\n2 - CPF file format format",(0,t.jsx)(s.br,{}),"\nNote: This query may change in future versions"]}),"\n",(0,t.jsx)(s.h3,{id:"listfilterfetch",children:"ListFilterFetch"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFilterFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = LocalDatabaseListExecute ]\n"})}),"\n",(0,t.jsx)(s.h3,{id:"listfilterclose",children:"ListFilterClose"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ListFilterClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = LocalDatabaseListExecute ]\n"})})]})}function o(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,s,a)=>{a.d(s,{R:()=>r,x:()=>i});var t=a(96540);const n={},l=t.createContext(n);function r(e){const s=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),t.createElement(l.Provider,{value:s},e.children)}}}]);