"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[10168],{20179:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>o,frontMatter:()=>r,toc:()=>d});var s=n(74848),a=n(28453);const r={pagination_prev:null,pagination_next:null},i="%CSP.TagLanguage",d=[{value:"Methods",id:"methods",level:2},{value:"RenderStartTag",id:"renderstarttag",level:3},{value:"RenderEndTag",id:"renderendtag",level:3},{value:"GetText",id:"gettext",level:3},{value:"FormatMessage",id:"formatmessage",level:3}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"csptaglanguage",children:"%CSP.TagLanguage"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Class %CSP.TagLanguage Extends %CSP.Rule [ System = 3 ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Implement csp:text tag using a common method, GetText that may be used to implement other language enabled tags."}),"\n",(0,s.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(t.h3,{id:"renderstarttag",children:"RenderStartTag"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method RenderStartTag() As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"Call ..GetText to implement the csp:text tag."}),"\n",(0,s.jsx)(t.h3,{id:"renderendtag",children:"RenderEndTag"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"Method RenderEndTag() As %Status\n"})}),"\n",(0,s.jsx)(t.p,{children:"No end tag written."}),"\n",(0,s.jsx)(t.h3,{id:"gettext",children:"GetText"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod GetText(tag As %CSP.Rule, default As %String = "") As %String\n'})}),"\n",(0,s.jsx)(t.p,{children:"Return the expression that will get localized text based on the textid, domain and language attributes. GetText should be called from within a rule."}),"\n",(0,s.jsx)(t.p,{children:"The optional Language attribute is an RFC 1766 format language name for looking up this text. %response.Language is used if Language is not specified. The Domain attribute is the optional application domain for looking up this text. %response.Domain is used if Domain is not specified. The required TextId attribute is the id that idenfies the text string. Attributes ARGn, where n is an integer, are substituted for %n in the message text."}),"\n",(0,s.jsx)(t.h3,{id:"formatmessage",children:"FormatMessage"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod FormatMessage(language As %String, domain As %String, id As %String, default As %String, args...) As %String [ Final ]\n"})}),"\n",(0,s.jsx)(t.p,{children:"FormatMessage wrapper for use in CSP page."})]})}function o(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var s=n(96540);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);