"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[769],{348:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>i,default:()=>o,frontMatter:()=>a,toc:()=>c});var n=t(74848),r=t(28453);const a={pagination_prev:null,pagination_next:null},i="%Studio.Debugger",c=[{value:"Properties",id:"properties",level:2},{value:"CSPId",id:"cspid",level:3},{value:"Debug",id:"debug",level:3},{value:"LastError",id:"lasterror",level:3},{value:"Breakpoints",id:"breakpoints",level:3},{value:"Watchpoints",id:"watchpoints",level:3},{value:"IO",id:"io",level:3},{value:"Project",id:"project",level:3},{value:"trace",id:"trace",level:3},{value:"Methods",id:"methods",level:2},{value:"StartTarget",id:"starttarget",level:3},{value:"TranslateMvb",id:"translatemvb",level:3},{value:"Attach",id:"attach",level:3},{value:"%OnNew",id:"onnew",level:3},{value:"Break",id:"break",level:3},{value:"IsStopped",id:"isstopped",level:3},{value:"WriteTarget",id:"writetarget",level:3},{value:"Interrupt",id:"interrupt",level:3},{value:"DBGCommand",id:"dbgcommand",level:3},{value:"Eval",id:"eval",level:3},{value:"SetValue",id:"setvalue",level:3},{value:"GetValue",id:"getvalue",level:3},{value:"GetStack",id:"getstack",level:3},{value:"GetStackId",id:"getstackid",level:3},{value:"GetOffset",id:"getoffset",level:3},{value:"GetSource",id:"getsource",level:3},{value:"%OnClose",id:"onclose",level:3},{value:"RoutineMap",id:"routinemap",level:3},{value:"Go",id:"go",level:3},{value:"GoTo",id:"goto",level:3},{value:"Line",id:"line",level:3},{value:"LineIn",id:"linein",level:3},{value:"LineOut",id:"lineout",level:3},{value:"SetBreakpoint",id:"setbreakpoint",level:3},{value:"DisableBreakpoint",id:"disablebreakpoint",level:3},{value:"RemoveBreakpoint",id:"removebreakpoint",level:3},{value:"ClearBreakpoints",id:"clearbreakpoints",level:3},{value:"SetWatchpoint",id:"setwatchpoint",level:3},{value:"DisableWatchpoint",id:"disablewatchpoint",level:3},{value:"RemoveWatchpoint",id:"removewatchpoint",level:3},{value:"SetBreakpointsFromProject",id:"setbreakpointsfromproject",level:3},{value:"Step",id:"step",level:3},{value:"StepIn",id:"stepin",level:3},{value:"StepOut",id:"stepout",level:3},{value:"Unattach",id:"unattach",level:3},{value:"GetCSPAttachID",id:"getcspattachid",level:3},{value:"AttachToCSP",id:"attachtocsp",level:3},{value:"ProcessListExecute",id:"processlistexecute",level:3},{value:"ProcessListClose",id:"processlistclose",level:3},{value:"ProcessListFetch",id:"processlistfetch",level:3},{value:"GetInfo",id:"getinfo",level:3},{value:"INTLine",id:"intline",level:3},{value:"SourceLine",id:"sourceline",level:3},{value:"addMap",id:"addmap",level:3},{value:"MappedOffset",id:"mappedoffset",level:3},{value:"MappedFromPos",id:"mappedfrompos",level:3},{value:"MappedFromLine",id:"mappedfromline",level:3},{value:"Error",id:"error",level:3},{value:"Pid",id:"pid",level:3},{value:"WatchListExecute",id:"watchlistexecute",level:3},{value:"WatchListClose",id:"watchlistclose",level:3},{value:"WatchListFetch",id:"watchlistfetch",level:3},{value:"WatchListOrefExecute",id:"watchlistorefexecute",level:3},{value:"WatchListOrefClose",id:"watchlistorefclose",level:3},{value:"WatchListOrefFetch",id:"watchlistoreffetch",level:3},{value:"ViewAsBinary",id:"viewasbinary",level:3}];function l(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",id:"id",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"studiodebugger",children:"%Studio.Debugger"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Class %Studio.Debugger Extends %Library.RegisteredObject [ System = 3 ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"This class is used internally by InterSystems IRIS. You should not make direct use of it within your applications. There is no guarantee made about either the behavior or future operation of this class."}),"\n",(0,n.jsx)(s.p,{children:"Studio debugging interface."}),"\n",(0,n.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(s.h3,{id:"cspid",children:"CSPId"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property CSPId As %String;\n"})}),"\n",(0,n.jsx)(s.p,{children:"SessionId if attached to CSP process"}),"\n",(0,n.jsx)(s.h3,{id:"debug",children:"Debug"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Debug As %Debugger.System;\n"})}),"\n",(0,n.jsx)(s.p,{children:"System Debugger object"}),"\n",(0,n.jsx)(s.h3,{id:"lasterror",children:"LastError"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property LastError As %Integer;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Last error"}),"\n",(0,n.jsx)(s.h3,{id:"breakpoints",children:"Breakpoints"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Breakpoints As %String;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Current breakpoint information for target process"}),"\n",(0,n.jsx)(s.h3,{id:"watchpoints",children:"Watchpoints"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Watchpoints As %String;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Current watchpoint information for target process"}),"\n",(0,n.jsx)(s.h3,{id:"io",children:"IO"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property IO As %Boolean;\n"})}),"\n",(0,n.jsx)(s.p,{children:"I/O redirection flag"}),"\n",(0,n.jsx)(s.h3,{id:"project",children:"Project"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property Project As Project;\n"})}),"\n",(0,n.jsx)(s.p,{children:"Project"}),"\n",(0,n.jsx)(s.h3,{id:"trace",children:"trace"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Property trace As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,n.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(s.h3,{id:"starttarget",children:"StartTarget"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Method StartTarget(tag As %String, StartOption As %Boolean = 0, project As Project = "") As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Job off a routine that executes tag. If breakpoints are specified, the target will halt at the first breakpoint."}),"\n",(0,n.jsx)(s.h3,{id:"translatemvb",children:"TranslateMvb"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method TranslateMvb(ByRef tag As %String) As %Boolean [ Private ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"attach",children:"Attach"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Method Attach(pid As %String = "", project As Project = "") As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Attach to another process having process id of pid."}),"\n",(0,n.jsx)(s.p,{children:"Fails if already attached (use Unattach first),or if pid is invalid."}),"\n",(0,n.jsx)(s.p,{children:"On successful completion, process is attached and a break issued. The process will be in break mode upon completion of its current operation."}),"\n",(0,n.jsx)(s.h3,{id:"onnew",children:"%OnNew"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Method %OnNew(initval As %RawString = "") As %Status [ Private ]\n'})}),"\n",(0,n.jsx)(s.h3,{id:"break",children:"Break"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Break() As %Boolean\n"})}),"\n",(0,n.jsx)(s.p,{children:"Send a BREAK to the target process."}),"\n",(0,n.jsx)(s.p,{children:"A successful return indicates the target will be in break mode on completion of the current command."}),"\n",(0,n.jsx)(s.p,{children:"Issue IsStopped to determine if target is in break mode."}),"\n",(0,n.jsx)(s.h3,{id:"isstopped",children:"IsStopped"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method IsStopped() As %Integer\n"})}),"\n",(0,n.jsx)(s.p,{children:"Returns 1 if the target is stopped in break mode. 0 indicates target is still running. 2 indicates target has exited debugger or fatal error."}),"\n",(0,n.jsx)(s.h3,{id:"writetarget",children:"WriteTarget"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method WriteTarget(data As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(s.p,{children:"Write to target process"}),"\n",(0,n.jsx)(s.h3,{id:"interrupt",children:"Interrupt"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Interrupt() As %Boolean\n"})}),"\n",(0,n.jsx)(s.p,{children:"Interrupt the target process. The current command will be interrupted. Execution will proceed with the next command."}),"\n",(0,n.jsx)(s.h3,{id:"dbgcommand",children:"DBGCommand"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method DBGCommand(cmd As %String, IsSys As %Integer = 0) As %Boolean\n"})}),"\n",(0,n.jsx)(s.p,{children:"Perform a debug command."}),"\n",(0,n.jsx)(s.h3,{id:"eval",children:"Eval"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Method Eval(expr As %String = "") As %String\n'})}),"\n",(0,n.jsx)(s.p,{children:"Evaluate and return the value of expression expr within the target process."}),"\n",(0,n.jsx)(s.h3,{id:"setvalue",children:"SetValue"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Method SetValue(variable As %String = "", value As %String = "") As %Boolean\n'})}),"\n",(0,n.jsx)(s.p,{children:"Sets a variable to a value."}),"\n",(0,n.jsx)(s.h3,{id:"getvalue",children:"GetValue"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Method GetValue(variable As %String = "", ByRef value As %String) As %Boolean\n'})}),"\n",(0,n.jsx)(s.p,{children:"Gets the value of a variable."}),"\n",(0,n.jsx)(s.h3,{id:"getstack",children:"GetStack"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetStack() As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"Gets the simple stack information sent from the target."}),"\n",(0,n.jsx)(s.h3,{id:"getstackid",children:"GetStackId"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetStackId() As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"Requests stack variable info."}),"\n",(0,n.jsx)(s.h3,{id:"getoffset",children:"GetOffset"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetOffset(ByRef RoutineName As %String, ByRef BeginCmdLine As %Integer, ByRef BeginCmdOffset As %Integer, ByRef EndCmdLine As %Integer, ByRef EndCmdOffset As %Integer, ByRef BeginArgLine As %Integer, ByRef BeginArgOffset As %Integer, ByRef EndArgLine As %Integer, ByRef EndArgOffset As %Integer, ByRef NameSpace As %String) As %Integer\n"})}),"\n",(0,n.jsx)(s.p,{children:"Return the current location of the debugger. This includes both the command and the argument positions."}),"\n",(0,n.jsx)(s.h3,{id:"getsource",children:"GetSource"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetSource() As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"Return the routine source at the current location"}),"\n",(0,n.jsx)(s.h3,{id:"onclose",children:"%OnClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnClose() As %Status [ Private, ProcedureBlock = 1 ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"routinemap",children:"RoutineMap"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method RoutineMap(current As %String, routine As %String, rouns As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(s.p,{children:"Check if routine is mapped to current namespace"}),"\n",(0,n.jsx)(s.p,{children:"Returns 1 if successful, 0 if not mapped to current"}),"\n",(0,n.jsx)(s.h3,{id:"go",children:"Go"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Go() As %Boolean\n"})}),"\n",(0,n.jsx)(s.p,{children:"Continue the current process"}),"\n",(0,n.jsx)(s.h3,{id:"goto",children:"GoTo"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GoTo(tag As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(s.p,{children:"Continue the current process"}),"\n",(0,n.jsx)(s.h3,{id:"line",children:"Line"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Line() As %Boolean\n"})}),"\n",(0,n.jsx)(s.h3,{id:"linein",children:"LineIn"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method LineIn() As %Boolean\n"})}),"\n",(0,n.jsx)(s.h3,{id:"lineout",children:"LineOut"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method LineOut() As %Boolean\n"})}),"\n",(0,n.jsx)(s.h3,{id:"setbreakpoint",children:"SetBreakpoint"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Method SetBreakpoint(routine As %String, offset As %Integer, condition As %String = "", label As %String = "") As %Boolean\n'})}),"\n",(0,n.jsx)(s.h3,{id:"disablebreakpoint",children:"DisableBreakpoint"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Method DisableBreakpoint(routine As %String, offset As %Integer, condition As %String = "", counter As %Integer, label As %String = "") As %Boolean\n'})}),"\n",(0,n.jsx)(s.h3,{id:"removebreakpoint",children:"RemoveBreakpoint"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Method RemoveBreakpoint(routine As %String, offset As %Integer, label As %String = "") As %Boolean\n'})}),"\n",(0,n.jsx)(s.h3,{id:"clearbreakpoints",children:"ClearBreakpoints"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method ClearBreakpoints() As %Boolean\n"})}),"\n",(0,n.jsx)(s.h3,{id:"setwatchpoint",children:"SetWatchpoint"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Method SetWatchpoint(variable As %String, condition As %String = "") As %Boolean\n'})}),"\n",(0,n.jsx)(s.h3,{id:"disablewatchpoint",children:"DisableWatchpoint"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method DisableWatchpoint(variable As %String, counter As %Integer) As %Boolean\n"})}),"\n",(0,n.jsx)(s.h3,{id:"removewatchpoint",children:"RemoveWatchpoint"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method RemoveWatchpoint(variable As %String) As %Boolean\n"})}),"\n",(0,n.jsx)(s.h3,{id:"setbreakpointsfromproject",children:"SetBreakpointsFromProject"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method SetBreakpointsFromProject(project As Project) As %Boolean\n"})}),"\n",(0,n.jsx)(s.p,{children:"Set all break points defined in project."}),"\n",(0,n.jsx)(s.p,{children:"Return 0 if project=NULL, else return status code from SetBreakpoint"}),"\n",(0,n.jsx)(s.h3,{id:"step",children:"Step"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Step() As %Boolean\n"})}),"\n",(0,n.jsx)(s.h3,{id:"stepin",children:"StepIn"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method StepIn() As %Boolean\n"})}),"\n",(0,n.jsx)(s.h3,{id:"stepout",children:"StepOut"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method StepOut() As %Boolean\n"})}),"\n",(0,n.jsx)(s.h3,{id:"unattach",children:"Unattach"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Unattach(kill As %Boolean) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Unattach from the current process, if any."}),"\n",(0,n.jsx)(s.p,{children:"Returns $$$OK if successful, $$$ERROR if nothing to detach from"}),"\n",(0,n.jsx)(s.h3,{id:"getcspattachid",children:"GetCSPAttachID"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method GetCSPAttachID() As %Integer\n"})}),"\n",(0,n.jsxs)(s.p,{children:["To attach to a CSP process, first call this method which will return you a unique ID number. Then display the CSP page but add an extra parameter of 'CSPDEBUG=",(0,n.jsxs)(s.id,{children:["' for example '",(0,n.jsx)(s.a,{href:"http://localhost/csp/samples/loop.csp?CSPDEBUG=123456",children:"http://localhost/csp/samples/loop.csp?CSPDEBUG=123456"}),"'. Then call the AttachToCSP method which will attach to the process that is running this CSP page."]})]}),"\n",(0,n.jsx)(s.h3,{id:"attachtocsp",children:"AttachToCSP"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:'Method AttachToCSP(id As %Integer, project As Project = "") As %Status\n'})}),"\n",(0,n.jsx)(s.p,{children:"Attach to a CSP process, first you must call the GetCSPAttachID to obtain the ID to pass to this method."}),"\n",(0,n.jsx)(s.h3,{id:"processlistexecute",children:"ProcessListExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ProcessListExecute(ByRef QHandle As %Binary) As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"processlistclose",children:"ProcessListClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ProcessListClose(QHandle As %Binary) As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"processlistfetch",children:"ProcessListFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ProcessListFetch(ByRef QHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status\n"})}),"\n",(0,n.jsx)(s.h3,{id:"getinfo",children:"GetInfo"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetInfo(Job As %Integer, Pid As %Integer) As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"Gather information about a process"}),"\n",(0,n.jsx)(s.h3,{id:"intline",children:"INTLine"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod INTLine(name As %String, label As %String, line As %Integer, ByRef intname As %String, ByRef intline As %String, ByRef returntype As %Integer, pNameSpace As %String = {$namespace}) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Given a document name, label and line offset it returns the name and line corresponding to this in the INT code returntype values are"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"0 - Ok"}),"\n",(0,n.jsx)(s.li,{children:"1 - Line given is not mapped so returning the next mapped line as breakpoint instead"}),"\n",(0,n.jsxs)(s.li,{children:["2 - No mapping found at all, nothing returned\nFor example if you wish to find out which line is generated from class 'User.Test' in method 'MyMethod' at offset '+3' you call: ",(0,n.jsx)(s.code,{children:'Set sc=##class(%Studio.Debugger).INTLine("User.Test.CLS","MyMethod",3,.intname,.intline,.returntype)'})," type is one of 'CLS' or 'MAC' currently."]}),"\n"]}),"\n",(0,n.jsx)(s.h3,{id:"sourceline",children:"SourceLine"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SourceLine(intName As %String, startLine As %Integer, startPos As %Integer, endLine As %Integer, endPos As %Integer, Namespace As %String, ByRef map As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Given INT routine name and line number and offset in this line return an array of source lines that map to this INT line. The format of this return array is:"}),"\n",(0,n.jsx)(s.p,{children:"map(type,StartEnd)=$listbuild(sourceName,sourceLabel,sourceLine,Offset,Namespace)"}),"\n",(0,n.jsx)(s.p,{children:"Where StartEnd is 1 for the start of the map and 2 for the end, sourceName is the name of the source file, sourceLabel is the method/label name, sourceLine is the number of lines from this label to the location, Offset is the offset on the line, Namespace is the location of the source file."}),"\n",(0,n.jsx)(s.h3,{id:"addmap",children:"addMap"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod addMap(name, intmvikey, type, line, pos, map, loc, Namespace) [ Private ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"mappedoffset",children:"MappedOffset"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method MappedOffset(ByRef mapping As %String, ByRef namespace As %String, ByRef flag As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Return the list of source files that the current break point maps to starting with the INT/BAS routine. Each source file is separated by a space character. The format of each source file data is:"}),"\n",(0,n.jsx)(s.p,{children:"routineName,label,beginCmdLine,beginCmdOffset,endCmdLine,endCmdOffset,beginArgLine,beginArgOffset,endArgLine,endArgOffset,Namespace"}),"\n",(0,n.jsx)(s.h3,{id:"mappedfrompos",children:"MappedFromPos"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod MappedFromPos(routineName As %String, beginCmdLine As %Integer, beginCmdOffset As %Integer, endCmdLine As %Integer, endCmdOffset As %Integer, beginArgLine As %Integer, beginArgOffset As %Integer, endArgLine As %Integer, endArgOffset As %Integer, namespace As %String, ByRef mapping As %String, ByRef flag As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Return the list of source files that the position passed in maps to. Each source file is separated by a space character. The format of each source file data is:"}),"\n",(0,n.jsx)(s.p,{children:"routineName,label,beginCmdLine,beginCmdOffset,endCmdLine,endCmdOffset,beginArgLine,beginArgOffset,endArgLine,endArgOffset,Namespace"}),"\n",(0,n.jsx)(s.h3,{id:"mappedfromline",children:"MappedFromLine"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod MappedFromLine(rtn As %String, line As %Integer, namespace As %String, ByRef mapping As %String) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Return the list of source files that the routine and line map to. The format of each source file data is:"}),"\n",(0,n.jsx)(s.p,{children:"routineName.routineType,label,line,namespace"}),"\n",(0,n.jsx)(s.h3,{id:"error",children:"Error"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Error(err As %String) As %Integer [ Private ]\n"})}),"\n",(0,n.jsx)(s.p,{children:"error routine"}),"\n",(0,n.jsx)(s.h3,{id:"pid",children:"Pid"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method Pid() As %String\n"})}),"\n",(0,n.jsx)(s.p,{children:"return process id of attached target"}),"\n",(0,n.jsx)(s.h3,{id:"watchlistexecute",children:"WatchListExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod WatchListExecute(ByRef qHandle As %Binary, deb As %Integer, Watch As %String(MAXLEN=1024)) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Get the values of the specified $c(1)-separated list of variables."}),"\n",(0,n.jsx)(s.h3,{id:"watchlistclose",children:"WatchListClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod WatchListClose(ByRef qHandle As %Binary) As %Status [ PlaceAfter = WatchListExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"watchlistfetch",children:"WatchListFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod WatchListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ PlaceAfter = WatchListExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"watchlistorefexecute",children:"WatchListOrefExecute"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod WatchListOrefExecute(ByRef qHandle As %Binary, deb As %Integer, Watch As %String(MAXLEN=256)) As %Status\n"})}),"\n",(0,n.jsx)(s.p,{children:"Get the properties of the specified variable whose value is an oref. %Studio.General::DumpObjectExecute implements logic to dump object and collect properties in qHandle array. WatchList query from %Studio.Debugger to deliver array to client."}),"\n",(0,n.jsx)(s.h3,{id:"watchlistorefclose",children:"WatchListOrefClose"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod WatchListOrefClose(ByRef qHandle As %Binary) As %Status [ PlaceAfter = WatchListExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"watchlistoreffetch",children:"WatchListOrefFetch"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod WatchListOrefFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ PlaceAfter = WatchListExecute ]\n"})}),"\n",(0,n.jsx)(s.h3,{id:"viewasbinary",children:"ViewAsBinary"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-objectscript-class",children:"Method ViewAsBinary(variableName As %String) As %String\n"})})]})}function o(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>c});var n=t(96540);const r={},a=n.createContext(r);function i(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);