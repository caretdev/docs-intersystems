"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[72146],{39004:(e,n,r)=>{r.r(n),r.d(n,{contentTitle:()=>a,default:()=>c,frontMatter:()=>i,toc:()=>o});var s=r(74848),t=r(28453);const i={pagination_prev:null,pagination_next:null},a="Config.Miscellaneous",o=[{value:"Parameters",id:"parameters",level:2},{value:"PROPERTIESMAYBEINCPF",id:"propertiesmaybeincpf",level:3},{value:"Properties",id:"properties",level:2},{value:"AsyncDisconnectErr",id:"asyncdisconnecterr",level:3},{value:"AsynchError",id:"asyncherror",level:3},{value:"BreakMode",id:"breakmode",level:3},{value:"CollectResourceStats",id:"collectresourcestats",level:3},{value:"DisconnectErr",id:"disconnecterr",level:3},{value:"DX",id:"dx",level:3},{value:"DXPresent",id:"dxpresent",level:3},{value:"EnableLongStrings",id:"enablelongstrings",level:3},{value:"EnableLongStringsPresent",id:"enablelongstringspresent",level:3},{value:"FileMode",id:"filemode",level:3},{value:"GlobalKillEnabled",id:"globalkillenabled",level:3},{value:"IEEEError",id:"ieeeerror",level:3},{value:"LicenseAltHeaders",id:"licensealtheaders",level:3},{value:"LineRecall",id:"linerecall",level:3},{value:"ListFormat",id:"listformat",level:3},{value:"LogRollback",id:"logrollback",level:3},{value:"MVDefined",id:"mvdefined",level:3},{value:"NodeNameInPid",id:"nodenameinpid",level:3},{value:"NullSubscripts",id:"nullsubscripts",level:3},{value:"OldZU5",id:"oldzu5",level:3},{value:"OpenMode",id:"openmode",level:3},{value:"PopError",id:"poperror",level:3},{value:"RefInKind",id:"refinkind",level:3},{value:"ScientificNotation",id:"scientificnotation",level:3},{value:"SetZEOF",id:"setzeof",level:3},{value:"ShutDownLogErrors",id:"shutdownlogerrors",level:3},{value:"StopID",id:"stopid",level:3},{value:"SwitchOSdir",id:"switchosdir",level:3},{value:"SynchCommit",id:"synchcommit",level:3},{value:"TelnetNUL",id:"telnetnul",level:3},{value:"TruncateOverflow",id:"truncateoverflow",level:3},{value:"Undefined",id:"undefined",level:3},{value:"UseNagleAlgorithm",id:"usenaglealgorithm",level:3},{value:"ViewPastData",id:"viewpastdata",level:3},{value:"ZaMode",id:"zamode",level:3},{value:"ZDateNull",id:"zdatenull",level:3},{value:"Methods",id:"methods",level:2},{value:"Load",id:"load",level:3}];function l(e){const n={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"configmiscellaneous",children:"Config.Miscellaneous"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Class Config.Miscellaneous Extends (%Persistent, Config.CommonSingleMethods, Config.CommonProperties, %SYSTEM.Help) [ Final, Inheritance = right, System = 4 ]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This class allows you to modify and view the [Miscellaneous] section of the CPF file through programmatic APIs. While properties are usually modified through the System Management portal, there may be some occasion where modifying them through the API's is best for your system. In all the Config methods, if you do not specify the CPFFile parameter, the currently active CPF file is used. If you wish to modify a CPF file which is not the currently active one, then specify the CPFFile you wish to modify in the method call.",(0,s.jsx)(n.br,{}),"\nThe Flags parameter does not normally need to be specified; the defaults are usually sufficient for most cases.",(0,s.jsx)(n.br,{}),"\nYou can use either the provided API's (Get/Modify) to modify the properties by passing in the correct parameters, or use Object syntax to open and directly manipulate the config objects."]}),"\n",(0,s.jsx)(n.p,{children:"EXAMPLE:"}),"\n",(0,s.jsxs)(n.p,{children:['; Use class methods to modify properties %SYS>s Status=##Class(Config.Miscellaneous).Get(.Properties) %SYS>i \'Status w !,"Error="',(0,s.jsx)(n.em,{children:'$SYSTEM.Status.GetErrorText(Status) %SYS>zw Properties("NodeNameInPid") Properties("NodeNameInPid")=0 %SYS>s Properties("NodeNameInPid")=1 %SYS>s Status=##Class(Config.Miscellaneous).Modify(.Properties) %SYS>i \'Status w !,"Error="'}),'$SYSTEM.Status.GetErrorText(Status) ; Now use Objects to modify properties %SYS>s Obj=##Class(Config.Miscellaneous).Open() %SYS>w Obj.NodeNameInPid 1 %SYS>s Obj.NodeNameInPid=0 %SYS>s Status=Obj.%Save() %SYS>i \'Status w !,"Error="_$SYSTEM.Status.GetErrorText(Status)']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"s x=##Class(Config.Miscellaneous).Get(.Properties)"})," Examples: Modify the NodeNameInPid parameter to 1.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:"s Status=##Class(Config.Miscellaneous).Get(.Properties) i '$$$ISOK(Status) q Status s Properties(\"NodeNameInPid\")=1 s Status=##Class(Config.Miscellaneous).Modify(.Properties) i '$$$ISOK(Status) q Status"}),(0,s.jsx)(n.br,{}),"\nExample: Open the active configuration and get the value of the NodeNameInPid Parameter.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:"s Obj=##Class(Config.Miscellaneous).Open(,,.Status) i '$$$ISOK(Status) q Status s NodeNameInPid=Obj.NodeNameInPid"})]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(n.h3,{id:"propertiesmaybeincpf",children:"PROPERTIESMAYBEINCPF"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Parameter PROPERTIESMAYBEINCPF = "DX,EnableLongStrings";\n'})}),"\n",(0,s.jsxs)(n.p,{children:["List of properties which may or may not be in the CPF file.",(0,s.jsx)(n.br,{}),"\nThey have a corresponding %Boolean property to determine if they are in the file or not."]}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(n.h3,{id:"asyncdisconnecterr",children:"AsyncDisconnectErr"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property AsyncDisconnectErr As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This setting modifies the behavior of InterSystems IRIS when DisconnectErr is enabled.",(0,s.jsx)(n.br,{}),"\n0 - The process receives a  error at the next read or write command.",(0,s.jsx)(n.br,{}),"\n1 - The process receives an asynchronous  error at the time a disconnect occurs on the device. This error will occur at the next command executed. Hang commands will be interrupted.",(0,s.jsx)(n.br,{}),"\nAsyncDisconnectError is only applicable to Telnet connections on Windows. It has no effect on any other device type or operating system. If DisconnectErr is set to 0 (false), then AsyncDisconnectError has no effect."]}),"\n",(0,s.jsx)(n.h3,{id:"asyncherror",children:"AsynchError"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property AsynchError As %Boolean [ InitialExpression = 1, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Enable processes to receive asynchronous errors.",(0,s.jsx)(n.br,{}),"\n0 - Processes cannot receive asynchronous errors.",(0,s.jsx)(n.br,{}),"\n1 - Processes can receive asynchronous errors.",(0,s.jsx)(n.br,{}),"\nThis setting applies to ECP networking."]}),"\n",(0,s.jsx)(n.h3,{id:"breakmode",children:"BreakMode"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property BreakMode As %Boolean [ InitialExpression = 1, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Process action when debug BREAK command executed.",(0,s.jsx)(n.br,{}),"\n0 - Breaks are ignored.",(0,s.jsx)(n.br,{}),"\n1 - Breaks are taken."]}),"\n",(0,s.jsx)(n.h3,{id:"collectresourcestats",children:"CollectResourceStats"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property CollectResourceStats As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Controls whether the system resource statistics are collected (seize, nseize, aseize, bseize) on platforms where collection is configurable. On other platforms, this setting is ignored.",(0,s.jsx)(n.br,{}),"\nNote: Currently, this setting is ignored on all supported platforms, and the system resource statistics are always collected.",(0,s.jsx)(n.br,{}),"\n0 - Statistics are not collected",(0,s.jsx)(n.br,{}),"\n1 - Statistics are collected."]}),"\n",(0,s.jsx)(n.h3,{id:"disconnecterr",children:"DisconnectErr"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property DisconnectErr As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Enable a process to receive disconnect errors.",(0,s.jsx)(n.br,{}),"\nThis setting conditions how a process responds to a disconnect of the principal I/O device.",(0,s.jsx)(n.br,{}),"\nBe aware that when error on disconnect is enabled, a process continues to execute after its principal device has been disconnected. It is the responsibility of the application to detect the disconnect condition and exit gracefully. Use care when enabling error on disconnect. The application must be prepared to recognize the  error and handle it appropriately in error traps. Error on disconnect is only applicable to TCP devices and to terminal devices where a disconnect can be recognized. Examples are modem controlled terminals and Windows Telnet, Windows LAT, and Windows local cterm (TRM:) connections. Error on disconnect is only applicable to the principal device. 0 - Process exits without reporting an error to the application when a disconnect is detected.",(0,s.jsx)(n.br,{}),"\n1 - Process receives a  error when a disconnect is detected during a Write or Read command."]}),"\n",(0,s.jsx)(n.h3,{id:"dx",children:"DX"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property DX As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Sets $X update mode for escape sequences system-wide.",(0,s.jsx)(n.br,{}),"\nYou can control the way the system updates $X when writing a string containing an escape sequence. Default behaviors for various system implementations are as follows:",(0,s.jsx)(n.br,{}),"\nUNIX - parses the ANSI standard escape sequence and counts the rest of the non-escape characters in the string against $X.",(0,s.jsx)(n.br,{}),"\nVMS - Do not count any more characters in the string against $X as soon as they encounter an escape character ($CHAR(27)).",(0,s.jsx)(n.br,{}),"\nOpen M [DSM] - Counts all characters in a string, including the escape character, against $X.",(0,s.jsx)(n.br,{}),"\nOpen M [DTM] and Open M [MSM] - Count all characters except for the escape character against $X.",(0,s.jsx)(n.br,{}),"\nA numeric code that controls a nondefault, consistent, system-wide way of updating $X.",(0,s.jsx)(n.br,{}),"\n0 - Use UNIX default behavior on system.",(0,s.jsx)(n.br,{}),"\n1 = Use Open M [DSM] default behavior on system.",(0,s.jsx)(n.br,{}),"\n2 = Use Open M [DTM]/Open M [MSM] default behavior on system.",(0,s.jsx)(n.br,{}),"\n3 = Use OpenVMS Alpha default behavior on system.",(0,s.jsx)(n.br,{}),"\nThe default behavior on UNIX zero (0).",(0,s.jsx)(n.br,{}),"\nThe default behavior on VMS is three (3)."]}),"\n",(0,s.jsx)(n.h3,{id:"dxpresent",children:"DXPresent"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property DXPresent As %Boolean [ InitialExpression = 0, Internal ];\n"})}),"\n",(0,s.jsx)(n.h3,{id:"enablelongstrings",children:"EnableLongStrings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property EnableLongStrings As %Boolean [ InitialExpression = 1, Internal, Transient ];\n"})}),"\n",(0,s.jsx)(n.p,{children:"No longer used. Need to keep it here as a transitive property to avoid user script errors."}),"\n",(0,s.jsx)(n.h3,{id:"enablelongstringspresent",children:"EnableLongStringsPresent"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property EnableLongStringsPresent As %Boolean [ InitialExpression = 0, Internal, Transient ];\n"})}),"\n",(0,s.jsx)(n.h3,{id:"filemode",children:"FileMode"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property FileMode As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Create a file if it does not exist when called with Write or Read/Write.",(0,s.jsx)(n.br,{}),"\nWhen 0 (false) and a file is opened for writing that does not exist, a new file is not created unless the N parameter was provided with the OPEN command.",(0,s.jsx)(n.br,{}),"\nWhen 1 (true) and a file is opened for writing that does not exist, a new file is created."]}),"\n",(0,s.jsx)(n.h3,{id:"globalkillenabled",children:"GlobalKillEnabled"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property GlobalKillEnabled As %Boolean [ InitialExpression = 1, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Enable KILL of an unsubscripted global.",(0,s.jsx)(n.br,{}),"\n0 - KILL of an unsubscripted global results in a  error. 1 - KILL of an unsubscripted global is allowed, so you can kill all subscripts of a global with a single kill instead if killing them individually."]}),"\n",(0,s.jsx)(n.h3,{id:"ieeeerror",children:"IEEEError"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property IEEEError As %Boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Enables or disables $DOUBLE returning INF and NAN values system-wide.",(0,s.jsx)(n.br,{}),"\nThis property sets the $DOUBLE function return value behavior system-wide. If 0, $DOUBLE returns INF (infinity), -INF, and NAN (Not A Number) for unresolvable IEEE floating point conversions. If 1, $DOUBLE generates ObjectScript errors for unresolvable IEEE floating point conversions. The property controls the issuing of INF, -INF, and NAN when a $DOUBLE numeric operation cannot be resolved to a numeric value. It does not control the issuing of INF, -INF, and NAN in all cases. $DOUBLE always returns INF, -INF, or NAN when you supply one of these strings as the input value, regardless of this property. Mathematical operations on $DOUBLE numbers that result in an INF, -INF, or NAN are controlled by this property. These include arithmetic operations, exponentiation, and logarithmic and trigonometric functions.",(0,s.jsx)(n.br,{}),"\n0 - $DOUBLE returns INF, -INF, or NAN when given an unresolvable numeric expression.",(0,s.jsx)(n.br,{}),"\n1 - $DOUBLE generates , , and  errors when given an unresolvable numeric expression."]}),"\n",(0,s.jsx)(n.h3,{id:"licensealtheaders",children:"LicenseAltHeaders"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property LicenseAltHeaders As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsx)(n.p,{children:"Enable use of alternate HTTP Headers in determining IP Address for License identification. In previous versions, HTTP requests used the REMOTE_ADDR header to determine the client IP Address for Licensing. If LicenseAltHeaders is enabled, then we will use the HTTP_FORWARDED header if present, otherwise the HTTP_X_FORWARDED_FOR header, otherwise REMOTE_ADDR."}),"\n",(0,s.jsx)(n.h3,{id:"linerecall",children:"LineRecall"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property LineRecall As %Boolean [ InitialExpression = 1, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Enable command line recall for READ commands.",(0,s.jsx)(n.br,{}),"\nRead line recall is only used by terminal devices.",(0,s.jsx)(n.br,{}),"\nThe OPEN command sets the read line recall mode for a terminal. You can specify the R protocol (enable) or the N protocol (disable). If neither protocol is specified, OPEN takes its setting from the current default established by %SYS.ProcessQuery.LineRecall, this property. The USE command can specify the R protocol (enable) or the N protocol (disable) to change the OPEN mode. If neither protocol is specified, USE takes its setting from the initial OPEN mode value. An implicit open of an active device, such as issuing a BREAK command, reopens the device in the same mode as the initial OPEN command. Modifying this property does not override an OPEN or USE setting for an active terminal. To change read line recall for an already open terminal device, you must explicitly reopen the device. You can use this property or %SYS.ProcessQuery.LineRecall to change the default, then issue an OPEN 0 command, which reopens the active terminal device, applying the current default. See Terminal I/O in InterSystems IRIS I/O Device Guide for details on using protocols."]}),"\n",(0,s.jsxs)(n.p,{children:["Read Line Recall",(0,s.jsx)(n.br,{}),"\nRead line recall mode provides line recall of editable lines as input for READ operations from a terminal. These recallable lines include both previous READ input lines and previous command lines. Echoing of input lines is a necessary precondition for read line recall. The system supports read line recall for both variable-length terminal reads (READ var) and fixed-length terminal reads (READ var#n). The system does not support read line recall for single-character terminal reads (READ *var). For a fixed-length terminal read, the recalled line is truncated to one character less than the number of characters specified in the READ. This final READ character position is reserved for typing a line termination character, specifying an edit character, or adding one more data character. When read line recall is active, you can provide input to a READ by using the Up Arrow and Down Arrow keys to recall a previous terminal input line. You can then use the Left Arrow, Right Arrow, Home, and End keys to position the cursor for editing the recalled line. You can use the Backspace key to delete a character, Ctrl-X to delete the entire line, or Ctrl-U to delete all of the line to the left of the cursor. When read line recall is not active, the four Arrow keys, the Home key, and the End key all issue a line termination character. You can use the Backspace key to delete a single input character, and Ctrl-X (or Ctrl-U) to delete the entire input line. Read line recall can be deactivated by using the -R protocol, or by specifying the N, I, S, or T protocols, as described in the Terminal I/O chapter of the InterSystems IRIS I/O Device Guide."]}),"\n",(0,s.jsxs)(n.p,{children:["0 - Command line recall is not enabled.",(0,s.jsx)(n.br,{}),"\n1 - Command line recall is enabled."]}),"\n",(0,s.jsx)(n.h3,{id:"listformat",children:"ListFormat"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property ListFormat As %Integer [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Enable compression of some $LIST types:",(0,s.jsx)(n.br,{}),"\n0 - No compression (the default)",(0,s.jsx)(n.br,{}),"\n1 - Compress IEEE floating point values ($DOUBLE)"]}),"\n",(0,s.jsxs)(n.p,{children:["This affects new $LIST structures that are created after the setting is applied.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"WARNING: This setting impacts compatibility with older clients. If ListFormat is set to a non-zero value, ODBC/JDBC or IRIS Native clients older than version 2021.2 will no longer be able to connect to the system."})]}),"\n",(0,s.jsx)(n.h3,{id:"logrollback",children:"LogRollback"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property LogRollback As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Enable logging for transaction rollbacks.",(0,s.jsx)(n.br,{}),"\n0 - Do not log transaction rollbacks.",(0,s.jsx)(n.br,{}),"\n1 - Log transaction rollbacks to the console log file."]}),"\n",(0,s.jsx)(n.h3,{id:"mvdefined",children:"MVDefined"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property MVDefined As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Sets MVBasic handling of undefined variables system-wide.",(0,s.jsx)(n.br,{}),"\nThis property function defines MVBasic behavior when it encounters a reference to an undefined variable. By default, if an MVBasic routine references an undefined variable, The system generates an  error. You can change this default behavior to have the system substitute an empty string for an undefined variable, without signaling an error.",(0,s.jsx)(n.br,{}),"\n0 - issue an  error for an undefined variable.",(0,s.jsx)(n.br,{}),"\n1 - substitute the empty string for an undefined variable."]}),"\n",(0,s.jsx)(n.h3,{id:"nodenameinpid",children:"NodeNameInPid"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property NodeNameInPid As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Behavior when there is a reference to the special variable $JOB.",(0,s.jsx)(n.br,{}),"\n0 - $JOB returns only the process ID number. 1 - $JOB returns the process ID number of the current process, concatenated to the nodename."]}),"\n",(0,s.jsx)(n.h3,{id:"nullsubscripts",children:"NullSubscripts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property NullSubscripts As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Enable null subscript references.",(0,s.jsx)(n.br,{}),"\n0 - Throw  error when referencing a null subscript.",(0,s.jsx)(n.br,{}),"\n1 - Null subscript references do not throw an error."]}),"\n",(0,s.jsx)(n.h3,{id:"oldzu5",children:"OldZU5"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property OldZU5 As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When switching namespace to the same namespace via $namespace or ZN, clear global vectors.",(0,s.jsx)(n.br,{}),"\n0 - Switching to the same namespace is a NOOP.",(0,s.jsx)(n.br,{}),"\n1 - Switching to the same namespace clears the globals vector cache."]}),"\n",(0,s.jsx)(n.h3,{id:"openmode",children:"OpenMode"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Property OpenMode As %Integer(MAXVAL = 1, MINVAL = 0, VALUELIST = ",0,1") [ InitialExpression = 0, Required ];\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The read/write mode you want used when opening sequential files and no mode is specified in the OPEN command.",(0,s.jsx)(n.br,{}),"\n0 - Read",(0,s.jsx)(n.br,{}),"\n1 - Read-Write"]}),"\n",(0,s.jsx)(n.h3,{id:"poperror",children:"PopError"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property PopError As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsx)(n.p,{children:"When to pop $ZTRAP error handlers off the stack."}),"\n",(0,s.jsxs)(n.p,{children:["When a $ZTRAP error handler is invoked by the system, that error handler remains on the stack of established error handlers. Therefore, if an error occurs when the error handler is executing, that error handler attempts to invoke itself, receives the same error again and enters an infinite loop, unless that error handler explicitly sets $ZTRAP to a new value.",(0,s.jsx)(n.br,{}),"\nWhen a $ZTRAP error handler is invoked in DSM, the error handler is removed from the stack. Therefore, if an error occurs while the error handler is executing, that error is handled by the previous error handler on the stack."]}),"\n",(0,s.jsxs)(n.p,{children:["0 - Normal behavior: A $ZTRAP error handler stays active when the error handler is invoked.",(0,s.jsx)(n.br,{}),"\n1 - Pop the $ZTRAP error handler off the stack when an error is triggered (DSM compatibility mode)."]}),"\n",(0,s.jsx)(n.h3,{id:"refinkind",children:"RefInKind"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property RefInKind As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Result of $NAME and $QUERY when an extended global reference is the argument.",(0,s.jsx)(n.br,{}),"\n0 - Return the global with an extended reference.",(0,s.jsx)(n.br,{}),"\n1 - Return the global without reference to where it is on the network."]}),"\n",(0,s.jsx)(n.h3,{id:"scientificnotation",children:"ScientificNotation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property ScientificNotation As %Boolean [ InitialExpression = 1 ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:['Enables or disables lowercase "e" as scientific notation symbol system-wide.',(0,s.jsx)(n.br,{}),'\n0 - Disable lowercase "e".',(0,s.jsx)(n.br,{}),'\n1 - Enable lowercase "e".']}),"\n",(0,s.jsx)(n.h3,{id:"setzeof",children:"SetZEOF"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property SetZEOF As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Behavior when the system encounters an unexpected end-of-file when reading a sequential file.",(0,s.jsx)(n.br,{}),"\n0 - Throw an  error.",(0,s.jsx)(n.br,{}),"\n1 - Set the special variable $ZEOF to indicate that you have reached the end of the file."]}),"\n",(0,s.jsx)(n.h3,{id:"shutdownlogerrors",children:"ShutDownLogErrors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property ShutDownLogErrors As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Write ^SYSLOG errors to the console log file at shutdown.",(0,s.jsx)(n.br,{}),"\n0 - Do not write ^SYSLOG errors.",(0,s.jsx)(n.br,{}),"\n1 - Write ^SYSLOG errors."]}),"\n",(0,s.jsx)(n.h3,{id:"stopid",children:"StopID"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property StopID As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Sets $ZF process deletion behavior for OpenVMS STOP/ID system-wide.",(0,s.jsx)(n.br,{}),"\nUsing the OpenVMS STOP/ID command to delete a process can cause your system to fail. For this reason, the system on OpenVMS systems prevent you from deleting processes with STOP/ID. For processes that are executing $ZF functions, you may need to be able to delete a process from OpenVMS. Set this value to 0 if you need to terminate processes in a $ZF function.",(0,s.jsx)(n.br,{}),"\n0 - Enable deletion of processes with STOP/ID.",(0,s.jsx)(n.br,{}),"\n1 - Disable deletion of processes with STOP/ID."]}),"\n",(0,s.jsx)(n.h3,{id:"switchosdir",children:"SwitchOSdir"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property SwitchOSdir As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Behavior of the current working O/S directory when changing namespaces.",(0,s.jsx)(n.br,{}),"\n0 - When you change namespaces, the current working directory is changed to the directory of the default database of the new namespace. However, if this dataset is remote (networked to a different system), the current working directory is left unchanged.",(0,s.jsx)(n.br,{}),"\n1 - When you change namespaces, the current working directory remains unaltered no matter what namespace you switch to."]}),"\n",(0,s.jsx)(n.h3,{id:"synchcommit",children:"SynchCommit"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property SynchCommit As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Synchronize TCOMMIT with the corresponding journal write operation.",(0,s.jsx)(n.br,{}),"\n0 - TCOMMIT does not wait for the write operation to complete.",(0,s.jsx)(n.br,{}),"\n1 - TCOMMIT does not complete until the journal data write operation completes. Note that setting this property to 1 will have performance implications."]}),"\n",(0,s.jsx)(n.h3,{id:"telnetnul",children:"TelnetNUL"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property TelnetNUL As %Boolean [ InitialExpression = 0 ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Suppress Telnet NUL at end-of-line system-wide.",(0,s.jsx)(n.br,{}),"\nThis property disables or enables the issuance of a NUL character (ASCII 0) following a CR character (ASCII 13) at end-of-line during Telnet transmission on Windows systems only. It has no affect of Unix or VMS systems. On output, a Telnet network virtual terminal (NVT) performs the following default end-of-line behavior: either issues a CR (carriage return character) followed by a LF (linefeed character), or issues a CR (carriage return character) followed by a NUL character (if no LF is issued).",(0,s.jsx)(n.br,{}),"\n0 - do not suppress NUL.",(0,s.jsx)(n.br,{}),"\n1 - suppress NUL."]}),"\n",(0,s.jsx)(n.h3,{id:"truncateoverflow",children:"TruncateOverflow"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property TruncateOverflow As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Enable the  error on numeric overflow.",(0,s.jsx)(n.br,{}),"\nWhen the system encounters a number larger than 9223372036854775807 E127 (or smaller than -9223372036854775808 E127) it throws the  error.",(0,s.jsx)(n.br,{}),"\n0 -  error is thrown.",(0,s.jsx)(n.br,{}),"\n1 -  error is suppressed."]}),"\n",(0,s.jsx)(n.h3,{id:"undefined",children:"Undefined"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'Property Undefined As %Integer(MAXVAL = 2, MINVAL = 0, VALUELIST = ",0,1,2") [ InitialExpression = 0, Required ];\n'})}),"\n",(0,s.jsxs)(n.p,{children:["ObjectScript response to undefined variables.",(0,s.jsx)(n.br,{}),"\n0 - Always throw an  error.",(0,s.jsx)(n.br,{}),"\n1 - If the undefined variable has subscripts, return a null string, but if the undefined variable is single-valued, throw an  error.",(0,s.jsx)(n.br,{}),"\n2 - Always return a null string."]}),"\n",(0,s.jsx)(n.h3,{id:"usenaglealgorithm",children:"UseNagleAlgorithm"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property UseNagleAlgorithm As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Enable the Nagle algorithm for Telnet (Windows only).",(0,s.jsx)(n.br,{}),"\n0 - Nagle algorithm is disabled.",(0,s.jsx)(n.br,{}),"\n1 - Nagle algorithm is enabled."]}),"\n",(0,s.jsx)(n.h3,{id:"viewpastdata",children:"ViewPastData"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property ViewPastData As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Enable $VIEW command to examine data outside of the InterSystems IRIS memory area.",(0,s.jsx)(n.br,{}),"\n0 - $VIEW command throws an error.",(0,s.jsx)(n.br,{}),"\n1 - $view command does not throw an error."]}),"\n",(0,s.jsx)(n.h3,{id:"zamode",children:"ZaMode"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property ZaMode As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Determines how the ZALLOCATE (ZA) and ZDEALLOCATE (ZD) commands behave, according to InterSystems IRIS rules or DSM-11 rules.",(0,s.jsx)(n.br,{}),"\n0 - InterSystems IRIS rules, which means that ZA and ZD behave exactly like LOCK + and LOCK -.",(0,s.jsx)(n.br,{}),"\n1 - DSM-11 rules, which means that ZA locks can only be unlocked by ZD and LOCK + locks can only be unlocked by LOCK."]}),"\n",(0,s.jsx)(n.h3,{id:"zdatenull",children:"ZDateNull"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:"Property ZDateNull As %Boolean [ InitialExpression = 0, Required ];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["$ZDATE response to an invalid value.",(0,s.jsx)(n.br,{}),"\n0 - The valid range is from 0 through 2980013, inclusive, which corresponds to dates from 12/31/1840 through 12/31/9999. This range can be restricted by setting the $ZDATE mindate and maxdate parameters. If the date is invalid, the error message  or  will be generated. The behavior can be overridden by supplying an erropt to the $ZDATE call.",(0,s.jsx)(n.br,{}),"\n1 - (ISM compatibility) The valid range is from 1 through 94232, inclusive, which corresponds to dates from 01/01/1841 through 12/30/2098. This date range is set for any $ZDATE function call which has three or fewer parameters. If a $ZDATE function call has more than three parameters, the valid date range is taken either from the $ZDATE mindate and maxdate parameters (if specified) or from the date range established for the current locale. If the date is invalid, $ZDATE will return the null string if you submit an invalid date. This behavior is set for any $ZDATE function call, regardless of the number of parameters."]}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"load",children:"Load"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-objectscript-class",children:'ClassMethod Load(Obj As %ObjectHandle = "", Flags As %Integer = 1) As %Status [ Internal ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Load the parameters into memory and activate.",(0,s.jsx)(n.br,{}),"\nParameters:",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Obj"}),' = Handle to the object which caused the load. If "", then load everything, only called from STU.',(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Flags"})," = Type of modification.",(0,s.jsx)(n.br,{}),"\n0 - Modify",(0,s.jsx)(n.br,{}),"\n1 - Create/Insert"]})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var s=r(96540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);