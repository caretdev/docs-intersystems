"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[92646],{68283:(e,s,n)=>{n.r(s),n.d(s,{contentTitle:()=>c,default:()=>o,frontMatter:()=>r,toc:()=>a});var i=n(74848),t=n(28453);const r={pagination_prev:null,pagination_next:null},c="%SYSTEM.License",a=[{value:"Methods",id:"methods",level:2},{value:"CheckNewKey",id:"checknewkey",level:3},{value:"Upgrade",id:"upgrade",level:3},{value:"SaveLicenseKey",id:"savelicensekey",level:3},{value:"DeferUserIdentification",id:"deferuseridentification",level:3},{value:"DumpLocalAll",id:"dumplocalall",level:3},{value:"DumpLocalInUse",id:"dumplocalinuse",level:3},{value:"DumpLocalPID",id:"dumplocalpid",level:3},{value:"DumpLocalWork",id:"dumplocalwork",level:3},{value:"DumpServer",id:"dumpserver",level:3},{value:"DumpServers",id:"dumpservers",level:3},{value:"DumpKey",id:"dumpkey",level:3},{value:"DumpKeys",id:"dumpkeys",level:3},{value:"ShowSummary",id:"showsummary",level:3},{value:"ShowManager",id:"showmanager",level:3},{value:"ShowServer",id:"showserver",level:3},{value:"ShowCounts",id:"showcounts",level:3},{value:"Decode",id:"decode",level:3},{value:"DecodeAuth",id:"decodeauth",level:3},{value:"CKEY",id:"ckey",level:3},{value:"GetKeyStatus",id:"getkeystatus",level:3},{value:"GetKeyInvalidReason",id:"getkeyinvalidreason",level:3},{value:"MaxBufferPool",id:"maxbufferpool",level:3},{value:"MaxDB",id:"maxdb",level:3},{value:"MaxConnections",id:"maxconnections",level:3},{value:"MaxCSPUsers",id:"maxcspusers",level:3},{value:"MaxCSPGrace",id:"maxcspgrace",level:3},{value:"CSPUsers",id:"cspusers",level:3},{value:"CSPGrace",id:"cspgrace",level:3},{value:"MaxECPServers",id:"maxecpservers",level:3},{value:"NetworkEnabled",id:"networkenabled",level:3},{value:"ConnectionCount",id:"connectioncount",level:3},{value:"LicenseCount",id:"licensecount",level:3},{value:"CheckAppLicenseUsed",id:"checkapplicenseused",level:3},{value:"GetAppLicense",id:"getapplicense",level:3},{value:"GetAppLicenseUsed",id:"getapplicenseused",level:3},{value:"GetAppLicenseMaxUsed",id:"getapplicensemaxused",level:3},{value:"GetAppLicenseValue",id:"getapplicensevalue",level:3},{value:"GetAppLicenseFree",id:"getapplicensefree",level:3},{value:"GetAppLicenseMinimum",id:"getapplicenseminimum",level:3},{value:"GetAppNames",id:"getappnames",level:3},{value:"GetProcessAppsTaken",id:"getprocessappstaken",level:3},{value:"GetConnectionLimit",id:"getconnectionlimit",level:3},{value:"GetFeature",id:"getfeature",level:3},{value:"GetUserId",id:"getuserid",level:3},{value:"GetUserLimit",id:"getuserlimit",level:3},{value:"IsApplication",id:"isapplication",level:3},{value:"IsApplicationAuthorizationKey",id:"isapplicationauthorizationkey",level:3},{value:"IsPendingActivation",id:"ispendingactivation",level:3},{value:"IsValidKey",id:"isvalidkey",level:3},{value:"EMSIsValidKey",id:"emsisvalidkey",level:3},{value:"CheckKeyForUpgrade",id:"checkkeyforupgrade",level:3},{value:"EMSCheckKeyForUpgrade",id:"emscheckkeyforupgrade",level:3},{value:"CPUcodeToCoreCount",id:"cpucodetocorecount",level:3},{value:"IsAppLicensed",id:"isapplicensed",level:3},{value:"Login",id:"login",level:3},{value:"KeyLicenseCapacity",id:"keylicensecapacity",level:3},{value:"KeyCustomerName",id:"keycustomername",level:3},{value:"KeyOrderNumber",id:"keyordernumber",level:3},{value:"KeyExpirationDate",id:"keyexpirationdate",level:3},{value:"KeyAuthorizationKey",id:"keyauthorizationkey",level:3},{value:"KeyFeatures",id:"keyfeatures",level:3},{value:"KeyFileType",id:"keyfiletype",level:3},{value:"KeyMachineID",id:"keymachineid",level:3},{value:"KeyProduct",id:"keyproduct",level:3},{value:"KeyLicenseType",id:"keylicensetype",level:3},{value:"KeyLicenseUnits",id:"keylicenseunits",level:3},{value:"KeyEnforcedUnits",id:"keyenforcedunits",level:3},{value:"KeyCoresLicensed",id:"keycoreslicensed",level:3},{value:"KeyCoresEnforced",id:"keycoresenforced",level:3},{value:"KeyCPUsLicensed",id:"keycpuslicensed",level:3},{value:"KeyCPUsEnforced",id:"keycpusenforced",level:3},{value:"KeyPlatform",id:"keyplatform",level:3},{value:"KeyServer",id:"keyserver",level:3},{value:"KeyVersion",id:"keyversion",level:3},{value:"ActiveServerCount",id:"activeservercount",level:3},{value:"ApplicationServerLogin",id:"applicationserverlogin",level:3},{value:"LoadAppLicenseFile",id:"loadapplicensefile",level:3},{value:"ReturnApplicationLicense",id:"returnapplicationlicense",level:3},{value:"returnAppLicense",id:"returnapplicense",level:3},{value:"TakeApplicationLicense",id:"takeapplicationlicense",level:3},{value:"ReturnAllCSPApps",id:"returnallcspapps",level:3},{value:"takeAppLicense",id:"takeapplicense",level:3},{value:"ReturnUserLicense",id:"returnuserlicense",level:3},{value:"TakeUserLicense",id:"takeuserlicense",level:3},{value:"LUAvailable",id:"luavailable",level:3},{value:"LUConsumed",id:"luconsumed",level:3},{value:"LUMinAvailable",id:"luminavailable",level:3},{value:"LUMaxConsumed",id:"lumaxconsumed",level:3},{value:"LUMaxConsumedReset",id:"lumaxconsumedreset",level:3},{value:"DistributedMaxReset",id:"distributedmaxreset",level:3},{value:"ProcAvailable",id:"procavailable",level:3},{value:"ProcConsumed",id:"procconsumed",level:3},{value:"InstanceConnections",id:"instanceconnections",level:3},{value:"InstanceConnectionsMax",id:"instanceconnectionsmax",level:3},{value:"ProcMaxConsumed",id:"procmaxconsumed",level:3},{value:"ProcMinAvailable",id:"procminavailable",level:3},{value:"PublicWebAppUser",id:"publicwebappuser",level:3},{value:"PublicWebAppUserCount",id:"publicwebappusercount",level:3},{value:"PublicWebAppUsersMax",id:"publicwebappusersmax",level:3},{value:"SetConnectionLimit",id:"setconnectionlimit",level:3},{value:"SetUserLimit",id:"setuserlimit",level:3},{value:"ReadDurationValues",id:"readdurationvalues",level:3},{value:"ReadDurationCounts",id:"readdurationcounts",level:3},{value:"ClearDurationCounts",id:"cleardurationcounts",level:3},{value:"UserNameLicensing",id:"usernamelicensing",level:3},{value:"CountsExecute",id:"countsexecute",level:3},{value:"CountsFetch",id:"countsfetch",level:3},{value:"CountsClose",id:"countsclose",level:3},{value:"DecodeExecute",id:"decodeexecute",level:3},{value:"DecodeFetch",id:"decodefetch",level:3},{value:"DecodeClose",id:"decodeclose",level:3},{value:"KeyExecute",id:"keyexecute",level:3},{value:"KeyFetch",id:"keyfetch",level:3},{value:"KeyClose",id:"keyclose",level:3},{value:"LicenseManagerExecute",id:"licensemanagerexecute",level:3},{value:"LicenseManagerFetch",id:"licensemanagerfetch",level:3},{value:"LicenseManagerClose",id:"licensemanagerclose",level:3},{value:"ProcessListExecute",id:"processlistexecute",level:3},{value:"ProcessListFetch",id:"processlistfetch",level:3},{value:"ProcessListClose",id:"processlistclose",level:3},{value:"SummaryExecuteGetCon",id:"summaryexecutegetcon",level:3},{value:"SummaryExecute",id:"summaryexecute",level:3},{value:"SummaryFetch",id:"summaryfetch",level:3},{value:"SummaryClose",id:"summaryclose",level:3},{value:"UserListExecute",id:"userlistexecute",level:3},{value:"UserListFetch",id:"userlistfetch",level:3},{value:"UserListClose",id:"userlistclose",level:3},{value:"TrakCareUserListExecute",id:"trakcareuserlistexecute",level:3},{value:"TrakCareUserListFetch",id:"trakcareuserlistfetch",level:3},{value:"TrakCareUserListClose",id:"trakcareuserlistclose",level:3},{value:"ApplicationUserListExecute",id:"applicationuserlistexecute",level:3},{value:"ApplicationUserListFetch",id:"applicationuserlistfetch",level:3},{value:"ApplicationUserListClose",id:"applicationuserlistclose",level:3},{value:"UserListAllExecute",id:"userlistallexecute",level:3},{value:"UserListAllFetch",id:"userlistallfetch",level:3},{value:"UserListAllClose",id:"userlistallclose",level:3},{value:"InitQuery2LS",id:"initquery2ls",level:3},{value:"ExpandAppUsage",id:"expandappusage",level:3},{value:"ExecuteQuery2LS",id:"executequery2ls",level:3},{value:"ActiveServerListExecute",id:"activeserverlistexecute",level:3},{value:"ActiveServerListFetch",id:"activeserverlistfetch",level:3},{value:"ActiveServerListClose",id:"activeserverlistclose",level:3},{value:"LicenseServerKeyListExecute",id:"licenseserverkeylistexecute",level:3},{value:"LicenseServerKeyListFetch",id:"licenseserverkeylistfetch",level:3},{value:"LicenseServerKeyListClose",id:"licenseserverkeylistclose",level:3},{value:"ConnectionListExecute",id:"connectionlistexecute",level:3},{value:"ConnectionListFetch",id:"connectionlistfetch",level:3},{value:"ConnectionListClose",id:"connectionlistclose",level:3},{value:"AppsTakenByUser",id:"appstakenbyuser",level:3},{value:"ConnectionAppListExecute",id:"connectionapplistexecute",level:3},{value:"ConnectionAppListFetch",id:"connectionapplistfetch",level:3},{value:"ConnectionAppListClose",id:"connectionapplistclose",level:3},{value:"AllKeyConnectionListExecute",id:"allkeyconnectionlistexecute",level:3},{value:"AllKeyConnectionListFetch",id:"allkeyconnectionlistfetch",level:3},{value:"AllKeyConnectionListClose",id:"allkeyconnectionlistclose",level:3},{value:"LoginDurationExecute",id:"logindurationexecute",level:3},{value:"LoginDurationFetch",id:"logindurationfetch",level:3},{value:"LoginDurationClose",id:"logindurationclose",level:3}];function l(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"systemlicense",children:"%SYSTEM.License"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"Class %SYSTEM.License Extends %SYSTEM.Help [ Abstract, Final, System = 4 ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"The %SYSTEM.License class provides an interface to the InterSystems IRIS License API."}),"\n",(0,i.jsx)(s.p,{children:"Some class methods are implemented in the special $system object and can be accessed with the $SYSTEM.License.Method() syntax. The system object methods are identified in the method documentation as $SYSTEM.License.XXX."}),"\n",(0,i.jsx)(s.p,{children:"Example: Set Success=$SYSTEM.License.Login(UserIdentifier)"}),"\n",(0,i.jsx)(s.p,{children:"Other methods are implemented as class methods of the %SYSTEM.License class and can be accessed by the usual ##class(%SYSTEM.License).ClassMethodName() syntax. The special $system object methods can also be accessed in this way."}),"\n",(0,i.jsx)(s.p,{children:"Example: Do ##class(%SYSTEM.License).ShowSummary()"}),"\n",(0,i.jsx)(s.p,{children:"The %SYSTEM.License class includes a number of license usage reports and queries. The data source is either the local instance or the license server, or in some cases both. The data source is identified in the individual query descriptions."}),"\n",(0,i.jsx)(s.p,{children:"Comparing data from the license server with data from an individual InterSystems IRIS instance can sometimes lead to apparent inconsistencies. These inconsistencies can be explained by understanding the operation of the license server. Each InterSystems IRIS instance maintains a database of its license use and independently controls connections to itself. When multiple instances share a InterSystems IRIS license key, the license server coordinates the counting of license usage among all instances sharing the license key. Each instance periodically sends messages to the license server describing any changes that have occurred to the local license database since the previous message. Each instance controls logins and logouts locally and can continue to permit connections if communication with the license server should be interrupted. The license server coordinates the activity of the participating instances by preventing them from collectively exceeding the authorized license count."}),"\n",(0,i.jsx)(s.p,{children:"The periodic nature of license server updates is one source of temporary inconsistency between the license server's view of license use and an individual InterSystems IRIS instance's view. License server and InterSystems IRIS instance counts of license usage will be temporarily out of sync if a number of logins or logouts have not yet been sent to the license server at the time usage reports are requested from the license server and from the local instance. This inconsistency is short lived because updates are sent to the license server about every 15 seconds."}),"\n",(0,i.jsx)(s.p,{children:"It is also possible for the active license server to be stopped, perhaps because the host on which it is running has shut down or because the instance that started it is being upgraded. In this case, the replacement license server's view of license use will be incomplete until all participating instances have reported their license use."}),"\n",(0,i.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(s.h3,{id:"checknewkey",children:"CheckNewKey"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckNewKey() As %Integer\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Signal the License Monitor (^LMFMON) to check for a new key from the License Server, and download and upgrade to that key if there is one. This is normally done every 5 minutes by the Monitor, but this method can make it check immediately.",(0,i.jsx)(s.br,{}),"\nA return of -1 means that no LicenseID was found.",(0,i.jsx)(s.br,{}),"\nA return of 1 means the signal was successful, a return of 0 means the signal was not successful.",(0,i.jsx)(s.br,{}),"\nThe latest key downloaded can be checked in the Portal License Key page."]}),"\n",(0,i.jsx)(s.h3,{id:"upgrade",children:"Upgrade"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Upgrade() As %String [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:['Upgrade to a license (iris.key file) that has been copied to the mgr directory. In some cases the license key will not be upgraded or may be incompletely upgraded. Upgrades may not activate all additional license units if they are unable to allocate sufficient memory from the shared memory heap. Upgrades to a key with fewer license units will be deferred until the InterSystems IRIS instance is restarted. Upgrades to or from a "Power Unit" key will be deferred until the InterSystems IRIS instance is restarted.',(0,i.jsx)(s.br,{}),'\nReturn value is 1 on success, "0|Reason for failure" on failure.',(0,i.jsx)(s.br,{}),"\nThe failure message may refer you to messages.log for additional information."]}),"\n",(0,i.jsx)(s.h3,{id:"savelicensekey",children:"SaveLicenseKey"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod SaveLicenseKey(LicenseCapacity As %String, CustomerName As %String, OrderNumber As %String, ExpirationDate As %String, AuthorizationKey As %String, MachineID As %String = "", AppNames As %String = "", AppLicense As %String) As %Status [ Final, Internal ]\n'})}),"\n",(0,i.jsx)(s.p,{children:'Check the input license key parameter values and, if they are valid, write a license file using thise parameters. LicenseCapacity, CustomerName, OrderNumber, ExpirationDate, AuthorizationKey, and MachineID are the fields of the InterSystems IRIS portion of the key. AppNames is a comma separated list of applications. For now, this is limited to "TrakCare". AppLicense is the application section of the key formatted as: Label=value$c(13,10)Label=value$c(13,10)...'}),"\n",(0,i.jsx)(s.h3,{id:"deferuseridentification",children:"DeferUserIdentification"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DeferUserIdentification(usage As %Integer) As %Integer [ Final ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Specify Deferred (usage=1) or automatic (usage=0) license login for the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.h3,{id:"dumplocalall",children:"DumpLocalAll"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DumpLocalAll(filename As %String) As %String [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Dump all the local InterSystems IRIS instance's license table entries to 'filename' in the sequential file output directory. A file named all.dmp is created if the filename argument is not supplied.",(0,i.jsx)(s.br,{}),"\nThe report displays the following columns:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"UserId: the license user identifier consuming each license table entry."}),"\n",(0,i.jsx)(s.li,{children:"Type: License login type (User, CSP, or Mixed)"}),"\n",(0,i.jsx)(s.li,{children:"Connections: Number of connections to this instance by this user."}),"\n",(0,i.jsx)(s.li,{children:"MaxCon: Maximum number of connections to this instance by this user."}),"\n",(0,i.jsx)(s.li,{children:"CSPCon: Number of CSP connections by this user."}),"\n",(0,i.jsx)(s.li,{children:"LU: Number of license units consumed. If more than one, the maximum connection count is or was exceeded by this user and the user is now consuming one license unit per connection."}),"\n",(0,i.jsx)(s.li,{children:"Active: Time in seconds the user has been active."}),"\n",(0,i.jsx)(s.li,{children:"Grace: Number of seconds remaining in the grace period for a CSP user who has disconnected.\nThis report shows license use at the local instance and is identical to the report produced by ldumpall^%SYS.LICENSE. It presents the results of the %SYSTEM.License.UserListAll query."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"dumplocalinuse",children:"DumpLocalInUse"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DumpLocalInUse(filename As %String) As %String [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Dump the local InterSystems IRIS instance's active license table entries to 'filename' in the sequential file output directory. A file named inuse.dmp is created if the filename argument is not supplied.",(0,i.jsx)(s.br,{}),"\nThe report displays the following columns:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"UserId: the license user identifier consuming each license table entry."}),"\n",(0,i.jsx)(s.li,{children:"Type: License login type (User, CSP, or Mixed)"}),"\n",(0,i.jsx)(s.li,{children:"Connections: Number of connections to this instance by this user."}),"\n",(0,i.jsx)(s.li,{children:"MaxCon: Maximum number of connections to this instance by this user."}),"\n",(0,i.jsx)(s.li,{children:"CSPCon: Number of CSP connections by this user."}),"\n",(0,i.jsx)(s.li,{children:"LU: Number of license units consumed. If more than one, the maximum connection count is or was exceeded by this user and the user is now consuming one license unit per connection."}),"\n",(0,i.jsx)(s.li,{children:"Active: Time in seconds the user has been active."}),"\n",(0,i.jsx)(s.li,{children:"Grace: Number of seconds remaining in the grace period for a CSP user who has disconnected.\nThis report shows license use at the local instance and is identical to the report produced by ldumpinuse^%SYS.LICENSE. It presents the results of the %SYSTEM.License.UserList query."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"dumplocalpid",children:"DumpLocalPID"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DumpLocalPID(filename As %String) As %String [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Dump license use by process Id to 'filename' in the sequential file output directory. A file named piduse.dmp is created if the filename argument is not supplied.",(0,i.jsx)(s.br,{}),"\nThe report displays the following columns:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"PID: Process Id."}),"\n",(0,i.jsx)(s.li,{children:"Display PID: Process Id in display format (hex on VMS)."}),"\n",(0,i.jsx)(s.li,{children:"Process: Process type (System, User, CSP, Diagnostic, Server, Pending)."}),"\n",(0,i.jsx)(s.li,{children:"LID: The license user identifier for which a license unit is being consumed."}),"\n",(0,i.jsx)(s.li,{children:"Type: License login type (User, CSP, or Mixed)"}),"\n",(0,i.jsx)(s.li,{children:"Con: Number of connections to this instance by this user."}),"\n",(0,i.jsx)(s.li,{children:"MaxCon: Maximum number of connections to this instance by this user."}),"\n",(0,i.jsx)(s.li,{children:"CSPCon: Number of CSP connections by this user."}),"\n",(0,i.jsx)(s.li,{children:"LU: Number of license units consumed. If more than one, the maximum connection count is or was exceeded by this user and the user is now consuming one license unit per connection."}),"\n",(0,i.jsx)(s.li,{children:"Active: Time in seconds the user has been active."}),"\n",(0,i.jsxs)(s.li,{children:["Grace: Number of seconds remaining in the grace period for a CSP user who has disconnected.\nThis report shows license use at the local instance and is identical to the report produced by ldumppid^%SYS.LICENSE. Summing the columns of this report is meaningless.",(0,i.jsx)(s.br,{}),"\nThis report is identical to ldumppid^%SYS.LICENSE. It presents the results of the %SYSTEM.License.ProcessList query."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"dumplocalwork",children:"DumpLocalWork"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DumpLocalWork(query As %String, filename As %String) As %String [ Internal, Private ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Process a query for DumpLocal[All/Inuse/PID] reports and write the report to a file. Query: is the name of the query to process. filename: is the filename into which to output the report."}),"\n",(0,i.jsx)(s.h3,{id:"dumpserver",children:"DumpServer"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DumpServer() [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Dump License Server database for this server.",(0,i.jsx)(s.br,{}),'\nNote: Not applicable with a Single-Server key. This report presents license usage by the current InterSystems IRIS instance recorded at the license server. The report is produced by the license server and may reside on a remote host. The location (host and directory) of the report output file will be reported to the terminal when the report is complete." License use by client (License Id) is reported in these columns:']}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Connections: Number of connections for this client."}),"\n",(0,i.jsx)(s.li,{children:"License Units: Number of license units consumed by this client on this server."}),"\n",(0,i.jsx)(s.li,{children:"Client: License Id consuming the license unit or units.\nThe report summarizes total connections and license units consumed by clients attached to this InterSystems IRIS instance and the total number of license units shared by clients on this the InterSystems IRIS server instance with connections by the same client to other the InterSystems IRIS server instances. This report is identical to that produced by dumpserver^%SYS.LICENSE."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"dumpservers",children:"DumpServers"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DumpServers() [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Dump License Server database for all servers.",(0,i.jsx)(s.br,{}),"\nNote: Not applicable with a Single-Server key."]}),"\n",(0,i.jsx)(s.p,{children:"This report presents license usage by each InterSystems IRIS instance served by the license server. The report is produced by the license server and may reside on a remote host. The location (host and directory) of the output file will be displayed on the terminal when the report is complete. License use by client (License Id) is reported in these columns:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Connections: Number of connections for this client."}),"\n",(0,i.jsx)(s.li,{children:"License Units: Number of license units consumed by this client on this server."}),"\n",(0,i.jsx)(s.li,{children:"Client: License Id consuming the license unit or units.\nThe report summarizes total connections and license units consumed by clients connected to each InterSystems IRIS instance and the number of license units shared by clients connected to this the InterSystems IRIS server instance with connections from the same client to other the InterSystems IRIS server instances. A combined grand total of connections and license units consumed by all the InterSystems IRIS server instances served by the license server is reported. This report is identical to that produced by dumpservers^%SYS.LICENSE."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"dumpkey",children:"DumpKey"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DumpKey() [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Dump the License Server view of key utilization for the active key.",(0,i.jsx)(s.br,{}),"\nNote: Not applicable with a Single-Server key."]}),"\n",(0,i.jsx)(s.p,{children:"This report displays license utilization for the key loaded by the current InterSystems IRIS instance. The report is produced by the license server and may reside on a remote host. The location (host and directory) of the output file will be displayed on the terminal when the report is complete. The report shows the license server's view of license use by all InterSystems IRIS instances which share a license key and which are configured to use the same license server (as is required when sharing a key)."}),"\n",(0,i.jsx)(s.p,{children:"License use by each client (License Id) connected to each InterSystems IRIS instance is reported in these columns:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Client: License Id for the connection from a client to this InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.li,{children:"LU: Number of license units consumed by connections from this client to this InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.li,{children:"Connections: Number of connections from this client to this InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.li,{children:"Server: Address of host where the InterSystems IRIS instance is running."}),"\n",(0,i.jsx)(s.li,{children:"Instance: Name of the InterSystems IRIS instance to which the client is connected.\nThe report displays the fields of the license key and summarizes the number of servers (InterSystems IRIS instances) using the key, authorized license units, and the current and maximum number of license units in use. This summary information represents the license server's view of license use. This report is identical to the report produced by dumpkey^%SYS.LICENSE."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"dumpkeys",children:"DumpKeys"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DumpKeys() [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Dump the License Server view of key utilization for all keys.",(0,i.jsx)(s.br,{}),"\nNote: Not applicable with a Single-Server key."]}),"\n",(0,i.jsx)(s.p,{children:"This report displays license utilization for every key controlled by the license server. The report is produced by the license server and may reside on a remote host. The location (host and directory) of the output file will be displayed on the terminal when the report is complete. The report shows the license server's view of license usage by all InterSystems IRIS instances which share each license key under the license server's control. For true reporting and as a requirement of the InterSystems IRIS license agreement, each InterSystems IRIS instance that uses a key must configure the same set of license servers."}),"\n",(0,i.jsx)(s.p,{children:"License use by each client (License Id) connected to each InterSystems IRIS instance is reported in these columns:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Client: License Id for the connection from a client to this InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.li,{children:"LU: Number of license units consumed by connections from this client to this InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.li,{children:"Connections: Number of connections from this client to this InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.li,{children:"Server: Address of host where the InterSystems IRIS instance is running."}),"\n",(0,i.jsx)(s.li,{children:"Instance: Name of the InterSystems IRIS instance to which the client is connected.\nThe report displays the fields of each license key and summarizes the number of servers (InterSystems IRIS instances) using the key, authorized license units, and the current and maximum number of license units in use. This summary information represents the license server's view of license use for each license key. This report is identical to the report produced by dumpkeys^%SYS.LICENSE."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"showsummary",children:"ShowSummary"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ShowSummary() [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Display Summary of License Server Database.",(0,i.jsx)(s.br,{}),"\nNote: Not applicable with a Single-Server key."]}),"\n",(0,i.jsx)(s.p,{children:"Displays a summary of license use for the current InterSystems IRIS instance's active license key. The report displays license usage data obtained both from the license server and from the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.p,{children:"The distributed license use section summarizes license use by all InterSystems IRIS instances that share the key. The license server is the source of this information."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Current License Units Used: current number of license consumed by all InterSystems IRIS instances sharing this key."}),"\n",(0,i.jsx)(s.li,{children:"Maximum License Units Used: maximum number of license consumed by all InterSystems IRIS instances sharing this key at any time since the license server started."}),"\n",(0,i.jsx)(s.li,{children:"License Units Authorized: number of license units authorized by the installed license key file.\nThe local license use section summarizes license use by the InterSystems IRIS instance where the report is run. The source of this section is the local InterSystems IRIS instance's internal license use tables."}),"\n",(0,i.jsx)(s.li,{children:"Current Connections: The current number of connections (license logins) to the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.li,{children:"Maximum Connections: The maximum number of connections (license logins) to the local InterSystems IRIS instance since it started."}),"\n",(0,i.jsx)(s.li,{children:"Current Users: The current number of license units consumed on the local InterSystems IRIS instance. Note that this item displays license units, not distict users."}),"\n",(0,i.jsx)(s.li,{children:"Maximum Users: The maximum number of license units consumed on the local InterSystems IRIS instance since it started.\nThis report is identical to the report produced by ShowSummary^%SYS.LICENSE. It presents the results of the %SYSTEM.License.ShowSummary query."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"showmanager",children:"ShowManager"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ShowManager() [ Final, Internal ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Display current active license Server address and port.",(0,i.jsx)(s.br,{}),"\nNote: Not applicable with a Single-Server key. OBSOLETE - USE ShowServer"]}),"\n",(0,i.jsx)(s.h3,{id:"showserver",children:"ShowServer"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ShowServer() [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Display current active license Server address and port.",(0,i.jsx)(s.br,{}),"\nNote: Not applicable with a Single-Server key.",(0,i.jsx)(s.br,{}),"\nThis report is identical to the report produced by ShowServer^%SYS.LICENSE."]}),"\n",(0,i.jsx)(s.h3,{id:"showcounts",children:"ShowCounts"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ShowCounts() [ Final ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Display Local view of license use."}),"\n",(0,i.jsx)(s.p,{children:"This report summarizes information derived from the current InterSystems IRIS instance's local license utilization database."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Total Authorized LU: license units authorized by the installed license file."}),"\n",(0,i.jsx)(s.li,{children:"Current Available LU: License units available at the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.li,{children:"Minimum Available LU: Minimum number of license units availible since the local instance started."}),"\n",(0,i.jsx)(s.li,{children:"Current Users active: Number of distinct users logged in to the local instance. May be less than the difference between total authorized and current available license units if one or more users have exceeded MaxConnections."}),"\n",(0,i.jsx)(s.li,{children:"Maximum Users active: Maximum number of distinct users logged in to the local instance at any time since it started."}),"\n",(0,i.jsx)(s.li,{children:"Current CSP Users active: Current number of CSP sessions consuming license units at the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.li,{children:"Maximum CSP Users active: Maximum number of CSP sessions consuming license units at any time since the local InterSystems IRIS instance started."}),"\n",(0,i.jsx)(s.li,{children:"Current CSP Sessions in grace period: Current number of CSP sessions in grace period on the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.li,{children:"Maximum CSP Sessions in grace period: Maximum number of CSP sessions in grace period at any time since the local InterSystems IRIS instance started."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"This report is identical to the report produced by counts^%SYS.LICENSE. It presents the results of the %SYSTEM.License.Counts query."}),"\n",(0,i.jsx)(s.h3,{id:"decode",children:"Decode"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Decode() [ Final ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Decode and display the capabilities encoded in the AuthorizationKey field of the active License Key."}),"\n",(0,i.jsx)(s.h3,{id:"decodeauth",children:"DecodeAuth"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DecodeAuth(key As %String) [ Final ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Decode and display the capabilities encoded in the AuthorizationKey field of a License Key provided as the 'key' argument."}),"\n",(0,i.jsx)(s.h3,{id:"ckey",children:"CKEY"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CKEY() [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Display the active license key to the current device.",(0,i.jsx)(s.br,{}),"\nThe fields of the [License] section of the installed license file are displayed followed by a brief accounting of license usage, including:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"License units currently available."}),"\n",(0,i.jsx)(s.li,{children:"Minimum number of license units available at any time since the instance started."}),"\n",(0,i.jsxs)(s.li,{children:["Maximum number of license units available.\nLicense usage levels are obtained from the current InterSystems IRIS instance.",(0,i.jsx)(s.br,{}),"\nThis report is identical to those produced by CKEY^%SYS.LICENSE and ^CKEY."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"getkeystatus",children:"GetKeyStatus"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetKeyStatus() [ Final ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Fetch license key status: Valid, Invalid, or Troubled (expiring)."}),"\n",(0,i.jsx)(s.h3,{id:"getkeyinvalidreason",children:"GetKeyInvalidReason"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetKeyInvalidReason() [ Final ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Fetch string describing the reason the key is invalid or in a troubled state."}),"\n",(0,i.jsx)(s.h3,{id:"maxbufferpool",children:"MaxBufferPool"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod MaxBufferPool() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$$SYSTEM.License.MaxBufferPool() returns the maximum buffer pool size authorized by the active license key. Zero indicates unlimited."}),"\n",(0,i.jsx)(s.h3,{id:"maxdb",children:"MaxDB"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod MaxDB(UserOnly As %Boolean = 0) As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.MaxDB() returns the maximum number of Databases authorized by the active license key. Zero indicates unlimited. Passing 'UserOnly' = 1 will return the nuber of non-system Databases authorized (system \"overhead\" is subtracted)."}),"\n",(0,i.jsx)(s.h3,{id:"maxconnections",children:"MaxConnections"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod MaxConnections() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.MaxConnections() returns the maximum number of connections a user can make while consuming one license unit."}),"\n",(0,i.jsx)(s.h3,{id:"maxcspusers",children:"MaxCSPUsers"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod MaxCSPUsers() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.MaxCSPUsers() returns the maximum number of concurrent CSP users since the instance started or the CSPUsers maximum counter was reset."}),"\n",(0,i.jsx)(s.h3,{id:"maxcspgrace",children:"MaxCSPGrace"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod MaxCSPGrace() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.MaxCSPGrace() returns the maximum number of CSP sessions in the grace period at any time since the instance started or the CSPGrace maximum counter was reset."}),"\n",(0,i.jsx)(s.h3,{id:"cspusers",children:"CSPUsers"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CSPUsers() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.CSPUsers() returns the current number of CSP users."}),"\n",(0,i.jsx)(s.h3,{id:"cspgrace",children:"CSPGrace"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CSPGrace() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.CSPGrace() returns the current number of CSP sessions in the grace period."}),"\n",(0,i.jsx)(s.h3,{id:"maxecpservers",children:"MaxECPServers"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod MaxECPServers() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.MaxECPServers() returns the maximum number of ECP servers authorized by the active license key."}),"\n",(0,i.jsx)(s.h3,{id:"networkenabled",children:"NetworkEnabled"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod NetworkEnabled() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.NetworkEnabled() returns 1 if the InterSystems IRIS license key enables ECP, 0 if it doesn't."}),"\n",(0,i.jsx)(s.h3,{id:"connectioncount",children:"ConnectionCount"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ConnectionCount(UserIdentifier As %String) As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.ConnectionCount() returns the number of connections currently associated with the given UserIdentifier. The range of return values is normally 0 through MAXCONNECTIONS. If the value exceeds MAXCONNECTIONS then more than the allowable number of concurrent connections were attempted for a given ID and the system has transitioned to a mode of one connection per license for this UserIdentifier."}),"\n",(0,i.jsx)(s.h3,{id:"licensecount",children:"LicenseCount"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LicenseCount(UserIdentifier As %String) As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.LicenseCount() returns the number of License Units currently consumed on the local instance by the given UserIdentifier. The return value is usually 0 if the UserIdentifier is not licensed or 1 if it is. However, if the maximum number of connections has ever exceeded MAXCONNECTIONS (the maximum allowed number of concurrent connections for a single license) for this UserIdentifier, the system has transitioned to a mode of one license per connection for this UserIdentifier and the return value will be the current number of connections by UserIdentifier."}),"\n",(0,i.jsx)(s.h3,{id:"checkapplicenseused",children:"CheckAppLicenseUsed"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckAppLicenseUsed(AppName As %String, FeatureKeyword As %String) As %String [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["$SYSTEM.License.CheckAppLicenseUsed(AppName,Keyword) iterates through the internal license use tables counting the number of times an application license keyword has been taken. The resulting count is compared to the internal usage count maintained for the application license keyword. The internal count is adjusted if it does not agree with the counted value.",(0,i.jsx)(s.br,{}),'\nThe return value is a string containing "CountedUsage,InternalUsageCountBeforeAdjustment,AppLicensesRecovered"',(0,i.jsx)(s.br,{}),'\nThrows an "INVALID ARGUMENT" error if AppName is not licensed. Returns "" if FeatureKeyword is not licensed. Returns "" if the application/keyword license value is not a number because only numeric application features can be taken and released. AppName is of the form Company.Application for protected application license sections or Application for unprotected application license sections.']}),"\n",(0,i.jsx)(s.p,{children:'Example: $SYSTEM.License.CheckAppLicenseUsed("MyCompany.MyApp","MyAppFeature")'}),"\n",(0,i.jsx)(s.h3,{id:"getapplicense",children:"GetAppLicense"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetAppLicense(AppName As %String, GetValues As %Integer = 0) As %String [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["$SYSTEM.License.GetAppLicense(AppName) retrieves the application license for the named application as a string of Keyword=Value pairs separated by $c(0), terminated by an empty $C(0) piece. AppName is of the form Company.Application for protected application license sections or Application for unprotected application license sections or the TrakCare application.",(0,i.jsx)(s.br,{}),"\nIf GetValues is zero, only the keyword names are returned. If GetValues is not zero, a sequence of kw=value are returned."]}),"\n",(0,i.jsx)(s.p,{children:'Example: $SYSTEM.License.GetAppLicense("MyCompany.MyApp",1)'}),"\n",(0,i.jsx)(s.p,{children:'Example return value: "kw1=value1"_$c(0)_"kw2=value2"_$c(0)_..._"kwN=valueN"_$c(0)_$c(0)'}),"\n",(0,i.jsx)(s.h3,{id:"getapplicenseused",children:"GetAppLicenseUsed"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetAppLicenseUsed(AppName As %String, FeatureKeyword As %String) As %String [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["$SYSTEM.License.GetAppLicenseUsed(AppName,Keyword) retrieves the number of consumed license units associated with an application license keyword.",(0,i.jsx)(s.br,{}),"\nAppName is of the form Company.Application for protected application license sections or Application for unprotected application license sections. Keyword is the keyword of the application feature.",(0,i.jsx)(s.br,{}),"\nGetAppLicenseUsed() is only meaningful where the value associated with the keyword is numeric.",(0,i.jsx)(s.br,{}),'\nAn INVALID ARGUMENT error is returned if no application license is loaded for "AppName". An empty string is returned if "Keyword" is not a feature of "AppName".']}),"\n",(0,i.jsx)(s.p,{children:'Example: $SYSTEM.License.GetAppLicenseUsed("MyCompany.MyApp","MyAppFeature")'}),"\n",(0,i.jsx)(s.h3,{id:"getapplicensemaxused",children:"GetAppLicenseMaxUsed"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetAppLicenseMaxUsed(AppName As %String, FeatureKeyword As %String) As %String [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["$SYSTEM.License.GetAppLicenseMaxUsed(AppName,Keyword) retrieves the maximum number of consumed license units associated with an application license keyword, since the license was loaded.",(0,i.jsx)(s.br,{}),"\nAppName is of the form Company.Application for protected application license sections or Application for unprotected application license sections. Keyword is the keyword of the application feature.",(0,i.jsx)(s.br,{}),"\nGetAppLicenseMaxUsed() is only meaningful where the value associated with the keyword is numeric.",(0,i.jsx)(s.br,{}),'\nAn INVALID ARGUMENT error is returned if no application license is loaded for "AppName". An empty string is returned if "Keyword" is not a feature of "AppName".']}),"\n",(0,i.jsx)(s.p,{children:'Example: $SYSTEM.License.GetAppLicenseMaxUsed("MyCompany.MyApp","MyAppFeature")'}),"\n",(0,i.jsx)(s.h3,{id:"getapplicensevalue",children:"GetAppLicenseValue"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetAppLicenseValue(AppName As %String, FeatureKeyword As %String) As %String [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["$SYSTEM.License.GetAppLicenseValue(AppName,Keyword) retrieves the value associated with an application license keyword.",(0,i.jsx)(s.br,{}),"\nAppName is of the form Company.Application for protected application license sections or Application for unprotected application license sections. Keyword is the keyword of the application feature.",(0,i.jsx)(s.br,{}),'\nAn INVALID ARGUMENT error is returned if no application license is loaded for "AppName". An empty string is returned if "Keyword" is not a feature of "AppName".']}),"\n",(0,i.jsx)(s.p,{children:'Example: $SYSTEM.License.GetAppLicenseValue("MyCompany.MyApp","MyAppFeature")'}),"\n",(0,i.jsx)(s.h3,{id:"getapplicensefree",children:"GetAppLicenseFree"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetAppLicenseFree(AppName As %String, FeatureKeyword As %String) As %String [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["$SYSTEM.License.GetAppLicenseFree(AppName,Keyword) retrieves the number of free license units associated with an application license feature keyword. AppName is of the form Company.Application for protected application license sections or Application for unprotected application license sections. Keyword is the keyword of the application feature.",(0,i.jsx)(s.br,{}),"\nGetAppLicenseFree() is only meaningful where the value associated with the keyword is numeric.",(0,i.jsx)(s.br,{}),'\nAn INVALID ARGUMENT error is returned if no application license is loaded for "AppName". An empty string is returned if "Keyword" is not a feature of "AppName".']}),"\n",(0,i.jsx)(s.p,{children:'Example: $SYSTEM.License.GetAppLicenseFree("MyCompany.MyApp","MyAppFeature")'}),"\n",(0,i.jsx)(s.h3,{id:"getapplicenseminimum",children:"GetAppLicenseMinimum"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetAppLicenseMinimum(AppName As %String, FeatureKeyword As %String) As %String [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["$SYSTEM.License.GetAppLicenseMinimum(AppName,Keyword) retrieves the minimum number of free license units associated with an application license keyword. AppName is of the form Company.Application for protected application license sections or Application for unprotected application license sections. Keyword is the keyword of the application feature.",(0,i.jsx)(s.br,{}),"\nGetAppLicenseMinimum() is only meaningful where the value associated with the keyword is numeric.",(0,i.jsx)(s.br,{}),'\nAn INVALID ARGUMENT error is returned if no application license is loaded for "AppName". An empty string is returned if "Keyword" is not a feature of "AppName".']}),"\n",(0,i.jsx)(s.p,{children:'Example: $SYSTEM.License.GetAppLicenseMinimum("MyCompany.MyApp","MyAppFeature")'}),"\n",(0,i.jsx)(s.h3,{id:"getappnames",children:"GetAppNames"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetAppNames(AppTypes As %String) As %List\n"})}),"\n",(0,i.jsxs)(s.p,{children:["$SYSTEM.License.GetAppNames(AppTypes) returns a list of licensed applications.",(0,i.jsx)(s.br,{}),"\nAppTypes is a string containing the type[s] of licensed applications which should be returned."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'"I": Return InterSystems supplied applications.'}),"\n",(0,i.jsx)(s.li,{children:'"P": Return protected applications loaded from the license file.'}),"\n",(0,i.jsx)(s.li,{children:'"U": Return unprotected applications loaded with the $SYSTEM.License.LoadAppLicenseFile() method.\nSet Applications=$SYSTEM.License.GetAppNames("PU") ;Fetch all non InterSystems licensed application names.'}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"getprocessappstaken",children:"GetProcessAppsTaken"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetProcessAppsTaken(PID As %String, AppName As %String) As %List [ Final ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:['$SYSTEM.License.GetProcessAppsTaken(AppName,Keyword) retrieves a $List of application license types taken for the Process PID or "" for none. PID specifies the process. AppName is of the form Company.Application for protected application license sections or Application for unprotected application license sections.',(0,i.jsx)(s.br,{}),'\nAn INVALID ARGUMENT error is returned if no application license is loaded for "AppName".']}),"\n",(0,i.jsx)(s.p,{children:'Example: $SYSTEM.License.GetProcessAppsTaken($J,"MyCompany.MyApp")'}),"\n",(0,i.jsx)(s.h3,{id:"getconnectionlimit",children:"GetConnectionLimit"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetConnectionLimit() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.GetConnectionLimit() returns the maximum number of connections permitted per user on this instance. The limit is established by calling $SYSTEM.License.SetConnectionLimit(). A zero return value means no limit has been set."}),"\n",(0,i.jsx)(s.h3,{id:"getfeature",children:"GetFeature"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetFeature() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.GetFeature(n) returns 1 if extended license feature n is authorized by the license key, 0 if it is not."}),"\n",(0,i.jsxs)(s.p,{children:["Current values of n are:",(0,i.jsx)(s.br,{}),"\n0) Web Add-on"]}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:"Interoperability"}),"\n",(0,i.jsx)(s.li,{children:"Shadowing"}),"\n",(0,i.jsx)(s.li,{children:"BI User (runtime)"}),"\n",(0,i.jsx)(s.li,{children:"BI Development"}),"\n",(0,i.jsx)(s.li,{children:"HealthShare"}),"\n",(0,i.jsx)(s.li,{children:"TrakCare"}),"\n",(0,i.jsx)(s.li,{children:"IP Address Neutral"}),"\n",(0,i.jsx)(s.li,{children:"Analytics Run"}),"\n",(0,i.jsx)(s.li,{children:"Analytics Analyzer"}),"\n",(0,i.jsx)(s.li,{children:"Analytics Architect"}),"\n",(0,i.jsx)(s.li,{children:"NLP"}),"\n",(0,i.jsx)(s.li,{children:"HealthShare Foundation"}),"\n",(0,i.jsx)(s.li,{children:"C-Type License"}),"\n",(0,i.jsx)(s.li,{children:"Analytics VR Execute"}),"\n",(0,i.jsx)(s.li,{children:"ExtremeNoUserLimit"}),"\n",(0,i.jsx)(s.li,{children:"Analytics VR Format"}),"\n",(0,i.jsx)(s.li,{children:"Analytics VR Data Define"}),"\n",(0,i.jsx)(s.li,{children:"Sharding"}),"\n",(0,i.jsx)(s.li,{children:"IntegratedML"}),"\n",(0,i.jsx)(s.li,{children:"InterSystems IRIS"}),"\n",(0,i.jsx)(s.li,{children:"API Management"}),"\n",(0,i.jsx)(s.li,{children:"Compatibility"}),"\n",(0,i.jsx)(s.li,{children:"Security Waiver"}),"\n",(0,i.jsx)(s.li,{children:"FHIR Repository"}),"\n",(0,i.jsx)(s.li,{children:"Columnar Storage"}),"\n",(0,i.jsx)(s.li,{children:"FHIR SQL Builder"}),"\n",(0,i.jsx)(s.li,{children:"Foreign Tables"}),"\n",(0,i.jsx)(s.li,{children:"Vector Search"}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"getuserid",children:"GetUserId"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetUserId(PID As %String, JobNumber As %String) As %String\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.GetUserId() returns the License User Identifier (if any) associated with the currently executing session/process."}),"\n",(0,i.jsx)(s.p,{children:'With a Core Capacity license, this method returns the empty string ("") because InterSystems IRIS does not track license user identifiers. With a user-based license, if this method returns an empty string, that indicates that the session/process is running in a degraded state (as will be the case when no license has been taken out automatically for the session/process).'}),"\n",(0,i.jsx)(s.p,{children:'This method also allows a second argument of JobNumber (the index into the job table), e.g. $SYSTEM.License.GetUserId("",JobNumber). This can be faster than using Process Id if you already have the JobNumber (repeated calls for a single process), or are sequentially accessing all the processes on the system. Note the first argument must be "", and is ignored in this case.'}),"\n",(0,i.jsx)(s.h3,{id:"getuserlimit",children:"GetUserLimit"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetUserLimit() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.GetUserLimit() returns the maximum number of license units the current instance will permit to be consumed. This is the limit established by a prior call to $SYSTEM.License.SetUserLimit(maxusers) or the number of license units authorized by the license key if no reduced limit has been established."}),"\n",(0,i.jsx)(s.h3,{id:"isapplication",children:"IsApplication"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsApplication(AppName As %String) As %Integer [ Final, Internal ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["##class(%SYSTEM.License).IsApplication(AppName) determines whether InterSystems application AppName is licensed or installed on this instance.",(0,i.jsx)(s.br,{}),"\n##class(%SYSTEM.License).IsApplication(AppName) returns 1 if the the installed key enables AppName, 2 if it does not but AppName is installed, otherwise 0."]}),"\n",(0,i.jsx)(s.p,{children:"AppName is of the form Company.Application for protected application license sections or Application for unprotected application license sections or for 'TrakCare'. If AppName=\"*\", returns a comma separated list of applications authorized by the key. Currently, TrakCare is the only known application."}),"\n",(0,i.jsx)(s.h3,{id:"isapplicationauthorizationkey",children:"IsApplicationAuthorizationKey"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod IsApplicationAuthorizationKey(AppName As %String = "", pak As %String = "") As %Integer [ Final, Internal ]\n'})}),"\n",(0,i.jsxs)(s.p,{children:["##class(%SYSTEM.License).IsApplicationAuthorizationKey(AppName,AuthorizationKey) determines whether AppName is authorized by the input AuthorizationKey string.",(0,i.jsx)(s.br,{}),"\n##class(%SYSTEM.License).IsApplicationAuthorizationKey(AppName,AuthorizationKey) returns 1 if the supplied AuthorizationKey string enables AppName, otherwise 0.",(0,i.jsx)(s.br,{}),'\nIf AppName="*", returns a comma separated list of applications authorized by the key. Currently, TrakCare is the only known application.']}),"\n",(0,i.jsx)(s.h3,{id:"ispendingactivation",children:"IsPendingActivation"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsPendingActivation() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:'Answers the question: Is a there a valid license key in the mgr directory that is not loaded. Restart may or may not be required. ##class(%SYSTEM.License).IsPendingActivation() returns 1 if the iris.key file in the "mgr" directory is valid but is not the active license key.'}),"\n",(0,i.jsx)(s.p,{children:'##class(%SYSTEM.License).IsPendingActivation() returns 0 if the iris.key file in the "mgr" directory is the active license key or if no iris.key file exists in the "mgr" directory or if the key in "mgr" is invalid.'}),"\n",(0,i.jsx)(s.h3,{id:"isvalidkey",children:"IsValidKey"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod IsValidKey(PathAndFileName As %String, ByRef RequiresRestart As %Integer, ByRef RestartReason As %String, Permit As %String = "") As %Status\n'})}),"\n",(0,i.jsx)(s.p,{children:"Determine whether the input license key file is valid and if an instance restart will be required to activate it."}),"\n",(0,i.jsxs)(s.p,{children:["Arguments:",(0,i.jsx)(s.br,{}),"\nPathAndFileName: (In) Full path to license file.",(0,i.jsx)(s.br,{}),"\nRequiresRestart: (Out) 1 if instance restart is required to activate key, 0 if not.",(0,i.jsx)(s.br,{}),'\nRestartReason: (Out) Reason restart is required, or "" if restart is not required.']}),"\n",(0,i.jsxs)(s.p,{children:["Permit: (In) For internal use only. Return value:",(0,i.jsx)(s.br,{}),"\n$$$OK - key is valid for this platform.",(0,i.jsx)(s.br,{}),"\nOr, error status with explanation of why the key is not valid for this platform."]}),"\n",(0,i.jsx)(s.h3,{id:"emsisvalidkey",children:"EMSIsValidKey"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod EMSIsValidKey(PathAndFileName As %String, ByRef RequiresRestart As %Integer, ByRef RestartReason As %String, Group As %String) As %Status [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Copy of IsValidKey for use by EMS. Primarily bypasses most of the system-specific checks, since the key will not actually be loaded/activated on the EMS Manager."}),"\n",(0,i.jsx)(s.h3,{id:"checkkeyforupgrade",children:"CheckKeyForUpgrade"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CheckKeyForUpgrade(NewKeyFile As %String, ByRef Reductions, ByRef Status As %Status) As %Boolean\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.CheckKeyForUpgrade(NewKeyFile,.Reductions,.Status) compares the active license key with the key in file NewKeyFile to determine if the new license key authorizes less capability than the active license. It returns TRUE (1) if any capabilities authorized by the active key are absent in the new key or of lessor capacity. It returns FALSE (0) if all capabilities of the active license are equaled or exceeded by the license in NewKeyFile."}),"\n",(0,i.jsx)(s.p,{children:"Arguments:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"NewKeyFile (input): full path and file name of new license key file."}),"\n",(0,i.jsx)(s.li,{children:"Reductions (output by reference): an array of capabilities that are smaller in the new key than in the active key."}),"\n",(0,i.jsx)(s.li,{children:"Status (output by reference): an error status returned by IsValidKey when it was called to examine the new license file.\nThe Reductions array can contain the following elements:"}),"\n",(0,i.jsx)(s.li,{children:'Reductions("Cores")=$lb(OldCores,NewCores)'}),"\n",(0,i.jsx)(s.li,{children:'Reductions("Server")=$lb(OldServerValue,NewServerValue)'}),"\n",(0,i.jsx)(s.li,{children:'Reductions("Users")=$lb(OldUsers,NewUsers)'}),"\n",(0,i.jsx)(s.li,{children:'Reductions("Product")=$lb(OldProduct,NewProduct)'}),"\n",(0,i.jsx)(s.li,{children:'Reductions("LicenseType")=$lb(OldType,NewType)\nReductions in licensed features will be indicated by Reductions("Feature", FeatureName)=$lb(OldFeatureValue,NewFeatureValue). License parameters which have not changed or which have increased in capability will not be shown.'}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"emscheckkeyforupgrade",children:"EMSCheckKeyForUpgrade"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod EMSCheckKeyForUpgrade(NewKeyFile As %String, ByRef Reductions, ByRef Status As %Status, Group As %String) As %Boolean [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Copy of CheckKeyForUpgrade for use by EMS. Primarily bypasses most of the system-specific checks, since the key will not actually be loaded/activated on the EMS Manager."}),"\n",(0,i.jsx)(s.h3,{id:"cpucodetocorecount",children:"CPUcodeToCoreCount"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CPUcodeToCoreCount(CPUcode As %Integer, ProductCode As %Integer, IsEnsemble As %Integer, IsCtype As %Integer) As %String [ Final, Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Return the number of Cores authorized, given the product and CPU code, and whether Ensemble is enabled, and whether this is a C-Type key. This must yield the same result as s_cpucheck in mcsub.c."}),"\n",(0,i.jsx)(s.h3,{id:"isapplicensed",children:"IsAppLicensed"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod IsAppLicensed(AppName As %String, FeatureKeyword As %String) As %Integer\n"})}),"\n",(0,i.jsxs)(s.p,{children:["##class(%SYSTEM.License).IsAppLicensed(AppName) returns 1 if the application named AppName is licensed, otherwise 0.",(0,i.jsx)(s.br,{}),"\n##class(%SYSTEM.License).IsAppLicensed(AppName,FeatureKeyword) returns 1 if the feature named FeatureKeyword is licensed for the application named AppName, otherwise 0."]}),"\n",(0,i.jsx)(s.p,{children:"AppName is of the form Company.Application for protected application license sections or Application for unprotected application license sections. The license may have been loaded as part of the iris.key file or separately using $system.License.LoadAppLicenseFile()"}),"\n",(0,i.jsx)(s.p,{children:'Example: $SYSTEM.License.IsAppLicensed("MyCompany.MyApp","MyAppFeature")'}),"\n",(0,i.jsx)(s.h3,{id:"login",children:"Login"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Login(UserIdentifier As %String) As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.Login(UserIdentifier) performs a license login."}),"\n",(0,i.jsx)(s.p,{children:"To acquire a license for a particular connection, provide a UserIdentifier (%String). UserIdentifier can be an arbitrary identifier determined by the application, but it must uniquely identify the user connecting to InterSystems IRIS. The client IP address will be appended to the identifier provided separated by an \"@\" sign to form the complete license identifier. If the input string contains an '@' character, the string will be truncated and the client IP address wil be appended following the first '@' character. The UserIdentifier cannot contain the '|' character. If the '|' character is found, it will be replaced with the forward slash ('/') character. The total length of UserIdentifier can be no more than 64 characters including the '@' character and the IP address appended by the system. If the input UserIdentifier exceeds 64 characters, $SYSTEM.License.Login will return an ILLEGAL VALUE error."}),"\n",(0,i.jsx)(s.p,{children:"This function will relinquish a license if the session/process is already holding one under a different identifier and it will obtain a new one on the behalf of the user ID provided."}),"\n",(0,i.jsx)(s.p,{children:"If the MAXCONNECTIONS connection limit per user is exceeded, the usual transition to one-license-unit-per-connection will apply to this user identifier."}),"\n",(0,i.jsx)(s.p,{children:'If a failure occurs because no additional license units are available, the session/process will revert to the original license state and the function will return 0. If the call is successful it will return a positive integer which is the number of connections currently associated with "UserIdentifier@ClientIP" (including the one just consumed).'}),"\n",(0,i.jsx)(s.h3,{id:"keylicensecapacity",children:"KeyLicenseCapacity"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyLicenseCapacity() As %String\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyLicenseCapacity() returns the active key LicenseCapacity field."}),"\n",(0,i.jsx)(s.h3,{id:"keycustomername",children:"KeyCustomerName"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyCustomerName() As %String\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyCustomerName() returns the active key CustomerName field."}),"\n",(0,i.jsx)(s.h3,{id:"keyordernumber",children:"KeyOrderNumber"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyOrderNumber() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyOrderNumber() returns the active key order number."}),"\n",(0,i.jsx)(s.h3,{id:"keyexpirationdate",children:"KeyExpirationDate"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyExpirationDate() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyExpirationDate() returns the active key expiration date as an integer, $H date value. Use $ZDATE to convert this to readable form."}),"\n",(0,i.jsx)(s.h3,{id:"keyauthorizationkey",children:"KeyAuthorizationKey"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyAuthorizationKey() As %String\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyAuthorizationKey() returns the AuthorizationKey field in the active key."}),"\n",(0,i.jsx)(s.h3,{id:"keyfeatures",children:"KeyFeatures"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyFeatures() As %String\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyFeatures() returns the Features portion of the Authorization field in the active key."}),"\n",(0,i.jsx)(s.h3,{id:"keyfiletype",children:"KeyFileType"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyFileType(IncludeKeyword As %Integer = 0) As %String\n"})}),"\n",(0,i.jsx)(s.p,{children:'$SYSTEM.License.KeyFileType(IncludeKeyword) returns the FileType property of the [ConfigFile] section of the loaded license key. If the IncludeKeyword argument is 1, the property keyword (FileType=) is included. If IncludeKeyword is 0, the property keyword is not included. For example, $SYSTEM.License.KeyFileType(1) might return "FileType=InterSystems License Rev-A.1" while $SYSTEM.License.KeyFileType(0) would return "InterSystems License Rev-A.1". The default value of IncludeKeyword is 0.'}),"\n",(0,i.jsx)(s.h3,{id:"keymachineid",children:"KeyMachineID"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyMachineID() As %String\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyMachineID() returns the contents of the MachineID field in the active key."}),"\n",(0,i.jsx)(s.h3,{id:"keyproduct",children:"KeyProduct"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyProduct() As %String\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyProduct() returns the active key product (example: Enterprise)."}),"\n",(0,i.jsx)(s.h3,{id:"keylicensetype",children:"KeyLicenseType"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyLicenseType() As %String\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyLicenseType() returns the active key license type (example: Concurrent User)."}),"\n",(0,i.jsx)(s.h3,{id:"keylicenseunits",children:"KeyLicenseUnits"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyLicenseUnits() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyLicenseUnits() returns the number of license units authorized by the active key."}),"\n",(0,i.jsx)(s.h3,{id:"keyenforcedunits",children:"KeyEnforcedUnits"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyEnforcedUnits() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyEnforcedUnits() returns the number of license units enforced by the active key."}),"\n",(0,i.jsx)(s.h3,{id:"keycoreslicensed",children:"KeyCoresLicensed"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyCoresLicensed() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyCoresLicensed() returns the number of Cores authorized by the active key. InterSystems IRIS will not accept a key with a given Cores authorization when running on a host with more cores."}),"\n",(0,i.jsx)(s.h3,{id:"keycoresenforced",children:"KeyCoresEnforced"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyCoresEnforced() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyCoresEnforced() returns the number of Cores enforced by the active key. This may be higher than the number of Cores licensed if an adjustment has been made in the license key."}),"\n",(0,i.jsx)(s.h3,{id:"keycpuslicensed",children:"KeyCPUsLicensed"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyCPUsLicensed() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyCPUsLicensed() returns the licensed CPUs code authorized by the active key. This CPU code is converted to an authorized core count by an algorithim that depends on other aspects of the licensed product."}),"\n",(0,i.jsx)(s.h3,{id:"keycpusenforced",children:"KeyCPUsEnforced"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyCPUsEnforced() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyCPUsEnforced() returns the licensed CPUs code enforced by the active key. This CPU code is converted to an authorized core count by an algorithim that depends on other aspects of the licensed product. This number may be higher than the CPUs licensed code if an adjustment has been made in the license key to accomodate a CPU counting issue."}),"\n",(0,i.jsx)(s.h3,{id:"keyplatform",children:"KeyPlatform"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyPlatform() As %String\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyPlatform() returns the active key licensed platform."}),"\n",(0,i.jsx)(s.h3,{id:"keyserver",children:"KeyServer"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyServer() As %String\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.KeyServer() returns the active key server type licensed (Single or Multi)."}),"\n",(0,i.jsx)(s.h3,{id:"keyversion",children:"KeyVersion"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyVersion() As %String\n"})}),"\n",(0,i.jsx)(s.p,{children:'$SYSTEM.License.KeyVersion() returns the version from the FileType property of the [ConfigFile] section of the loaded license key. For example, if the [ConfigFile] section containes "FileType=License 2013.1", $SYSTEM.License.KeyVersion() returns 2013.1.'}),"\n",(0,i.jsx)(s.h3,{id:"activeservercount",children:"ActiveServerCount"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ActiveServerCount(ByRef Status As %Status) As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.ActiveServerCount() returns the number of instances (including the current instance) currently using the active license key. It executes the $SYSTEM.License.KeyOrderNumber() query and counts the number of instances using a license with the same OrderNumber value as the active license key on the current instance. Error status is returned by reference in the Status argument."}),"\n",(0,i.jsx)(s.h3,{id:"applicationserverlogin",children:"ApplicationServerLogin"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ApplicationServerLogin(AppName As %String = "", Keyword As %String = "", ByRef Status As %Status) As %Integer\n'})}),"\n",(0,i.jsx)(s.p,{children:'##Class(%SYSTEM.License).ApplicationServerLogin(AppName, Keyword, Status) returns 1 if the number of instances using the active license key used by this instance (including this instance) does not exceed the number authorized by the "Keyword" item in the "AppName" application license section. Error status is returned by reference in the Status argument.'}),"\n",(0,i.jsx)(s.h3,{id:"loadapplicensefile",children:"LoadAppLicenseFile"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LoadAppLicenseFile(FileName As %String, AppName As %String) As %Integer\n"})}),"\n",(0,i.jsxs)(s.p,{children:["$SYSTEM.License.LoadAppLicenseFile(FileName,SectionName)",(0,i.jsx)(s.br,{}),"\nLoad a license for the named application into instance memory. The file is in standard .ini file format and the application license is contained in a section beginning with [SectionName], where 'SectionName' is the name of the application licensed by the section. The SectionName value is case sensitive and can contain as many as 47 alphanumeric characters. It cannot contain a period. Features licensed are authorized by properties in the application section represented as keyword=value pairs. Keywords are case sensitive and can contain as many as 47 alphanumeric characters. The total length of keyword=value cannot exceed 1024 characters. Licensed items with a numeric value are counted by the license software (see TakeApplicationLicense() and ReturnApplicationLicense()). Licensed items with a text value can be retrieved with GetAppLicenseValue(AppName,FeatureKeyword). The entire application license can be retrieved with GetAppLicense(AppName,getvalues). An application license section can contain 16536 characters including a terminating NULL character appended internally to each keyword=value line."]}),"\n",(0,i.jsx)(s.p,{children:"Example application license section:"}),"\n",(0,i.jsxs)(s.p,{children:["[MyApplication]",(0,i.jsx)(s.br,{}),"\nConcurrent Users=50",(0,i.jsx)(s.br,{}),"\nLabTech=20",(0,i.jsx)(s.br,{}),"\nSupervisor=3",(0,i.jsx)(s.br,{}),"\nNurse=50",(0,i.jsx)(s.br,{}),"\nModules=Lab, Radiology, Billing, Pharmacy"]}),"\n",(0,i.jsxs)(s.p,{children:["Arguments:",(0,i.jsx)(s.br,{}),"\nFileName: file name, including path. Max 1024 characters.",(0,i.jsx)(s.br,{}),"\nAppName: application name, the section name containing the application license. Max 47 characters."]}),"\n",(0,i.jsxs)(s.p,{children:["Return Values:",(0,i.jsx)(s.br,{}),"\n0 = success",(0,i.jsx)(s.br,{}),"\n1 = no file or no section or section is empty or malformed",(0,i.jsx)(s.br,{}),"\n2 = profile section too large",(0,i.jsx)(s.br,{}),"\n4 = cannot allocate (shared) memory for table;",(0,i.jsx)(s.br,{}),"\n5 = keyword or value too long",(0,i.jsx)(s.br,{}),"\n6 = Application name too long."]}),"\n",(0,i.jsx)(s.p,{children:'Example: $SYSTEM.License.LoadAppLicenseFile("c:\\InterSystems\\Licenses\\MyIRIS.key","MyApplication")'}),"\n",(0,i.jsx)(s.h3,{id:"returnapplicationlicense",children:"ReturnApplicationLicense"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ReturnApplicationLicense(AppName As %String, FeatureKeyword As %String = "Concurrent Users", ByRef Released As %Integer, session As %CSP.Session) As %Status\n'})}),"\n",(0,i.jsxs)(s.p,{children:["$SYSTEM.License.ReturnApplicationLicense(AppName,FeatureKeyword,.released,session)",(0,i.jsx)(s.br,{}),"\nReturn (release) a license unit for an application license and feature. The license feature value must be numeric in the application license section. Releases the license resource associated with the licensed user Id of the current process, or the session license Id in the case of CSP."]}),"\n",(0,i.jsxs)(s.p,{children:["Arguments:",(0,i.jsx)(s.br,{}),"\n",(0,i.jsx)(s.strong,{children:"AppName:"})," The 'Company.Application' value from the section name in iris.key for protected application license sections, or the name of the unprotected application license section loaded with LoadAppLicenseFile()."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"FeatureKeyword:"}),' The application feature keyword being released. If the FeatureKeyword is omitted, the default value is "Concurrent Users".']}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Released:"})," Returns 1 if the license was released, 0 if the license was not held."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"session:"})," The CSP session Id this application license should be taken for if the application license is being taken for a session, not the current process. If this argument is not present and %session is defined and is a %CSP.Session object, then the application license will be taken for the %session object. If neither the session argument nor the %session variable is defined, the license is taken for the current process."]}),"\n",(0,i.jsxs)(s.p,{children:["Return value: $$$OK, or error status.",(0,i.jsx)(s.br,{}),"\nAn error status containing an INVALID ARGUMENT error will be returned if no license has been loaded for AppName."]}),"\n",(0,i.jsx)(s.p,{children:'Example: $SYSTEM.License.ReturnApplicationLicense("MyCompany.MyApp","MyAppFeature"[[,.Released[, session]])'}),"\n",(0,i.jsx)(s.h3,{id:"returnapplicense",children:"returnAppLicense"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod returnAppLicense(AppName As %String, FeatureKeyword As %String, LicenseId As %String) As %Integer [ Internal ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["$System.License.returnAppLicense(AppName[,FeatureKeyword[,LicenseId]])",(0,i.jsx)(s.br,{}),"\nReturn (release) a license unit for an application license item keyword. The license item value must have been numeric in the application license section. This method is intended for InterSystems internal use. Customer code should use $SYSTEM.License.ReturnApplicationLicense)()."]}),"\n",(0,i.jsxs)(s.p,{children:["Arguments:",(0,i.jsx)(s.br,{}),"\nAppName: The 'Company.Application' value from the section name in iris.key for protected application license sections, or the name of the unprotected application license section loaded with LoadAppLicenseFile().",(0,i.jsx)(s.br,{}),'\nFeatureKeyword: The application keyword being consumed. If FeatureKeyword is omitted, the default value is "Concurrent Users".',(0,i.jsx)(s.br,{}),"\nLicenseId: User identifier under which to be licensed. Used for licensing of CSP sessions. Non CSP server processes will use the process InterSystems IRIS license id.<br."]}),"\n",(0,i.jsxs)(s.p,{children:["Return value: 0 - license entirely released no license available, positive integer - the number of times this user has taken this license.",(0,i.jsx)(s.br,{}),"\nAn INVALID ARGUMENT error will be generated if a license has not been loaded for this application name."]}),"\n",(0,i.jsx)(s.p,{children:'Example: $SYSTEM.License.returnAppLicense("MyCompany.MyApp","MyAppFeature",LicenseId)'}),"\n",(0,i.jsx)(s.h3,{id:"takeapplicationlicense",children:"TakeApplicationLicense"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod TakeApplicationLicense(AppName As %String, FeatureKeyword As %String = "Concurrent Users", ByRef Count As %Integer, session As %CSP.Session) As %Status\n'})}),"\n",(0,i.jsxs)(s.p,{children:["$SYSTEM.License.TakeApplicationLicense(AppName,FeatureKeyword,.count,session)",(0,i.jsx)(s.br,{}),"\nTake (consume) a license unit for a named application and feature. The license feature value must be numeric in the loaded application license section. The InterSystems IRIS license user Id of the current process (or in the case of CSP, the session license Id) will be the user identifier associated with the application license consumed."]}),"\n",(0,i.jsx)(s.p,{children:"Arguments:"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"AppName:"})," The 'Company.Application' value from the section name in iris.key for protected application license sections, or the name of the unprotected application license section loaded with LoadAppLicenseFile()."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"FeatureKeyword:"}),' The application keyword being consumed. If the FeatureKeyword is omitted, the default value is "Concurrent Users".']}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Count:"})," ByRef argument to receive count of the number of times this user has now taken this application/keyword license."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"session:"})," The CSP session Id this application license should be taken for if the application license is being taken for a session, not the current process. If this argument is not present, a %session variable is defined and is a %CSP.Session object, then the application license will be taken for the %session object. If neither the session argument nor the %session variable is defined, the license is taken for the current process."]}),"\n",(0,i.jsxs)(s.p,{children:["Return value: $$$OK, or error status.",(0,i.jsx)(s.br,{}),"\nAn error status containing an INVALID ARGUMENT error will be returned if AppName is not licensed.",(0,i.jsx)(s.br,{}),"\nAn error status, ERROR #5915: Cannot allocate a license, if the feature is not licensed or its capacity is exhausted."]}),"\n",(0,i.jsx)(s.p,{children:"An application license can be returned with the $SYSTEM.License.ReturnApplicationLicense(AppName, FeatureKeyword[[, .Count[, session]]) method. All application licenses taken for a process or a CSP session will be returned automatically when the process exits or the CSP session terminates."}),"\n",(0,i.jsx)(s.p,{children:'Example: $SYSTEM.License.TakeApplicationLicense("MyCompany.MyApp","MyAppFeature",.NewCountTaken)'}),"\n",(0,i.jsx)(s.h3,{id:"returnallcspapps",children:"ReturnAllCSPApps"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ReturnAllCSPApps(session As %CSP.Session) As %Status\n"})}),"\n",(0,i.jsxs)(s.p,{children:["$System.License.ReturnAllCSPApps(SessionId)",(0,i.jsx)(s.br,{}),"\nCalled by the CSP Daemon when it deletes a session object."]}),"\n",(0,i.jsx)(s.h3,{id:"takeapplicense",children:"takeAppLicense"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod takeAppLicense(AppName As %String, FeatureKeyword As %String, LicenseId As %String) As %Integer [ Internal ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["$System.License.takeAppLicense(AppName[,FeatureKeyword[,LicenseId]])",(0,i.jsx)(s.br,{}),"\nTake (consume) a license unit for an application license item keyword. The license item value must have been numeric in the loaded application license section. This method is intended for InterSystems internal use. Customer code should use $SYSTEM.License.TakeApplicationLicense)()."]}),"\n",(0,i.jsx)(s.p,{children:"Arguments:"}),"\n",(0,i.jsxs)(s.p,{children:["AppName: The 'Company.Application' value from the section name in iris.key for protected application license sections, or the name of the unprotected application license section loaded with LoadAppLicenseFile().",(0,i.jsx)(s.br,{}),'\nFeatureKeyword: The application keyword being consumed. If the FeatureKeyword is omitted, the default value is "Concurrent Users".',(0,i.jsx)(s.br,{}),"\nLicenseId: User identifier under which to be licensed. Used for licensing of CSP sessions. Non CSP server processes will use the process InterSystems IRIS license id.<br."]}),"\n",(0,i.jsxs)(s.p,{children:["Return value: 0 - no license available, positive integer - the number of times this user has taken this license.",(0,i.jsx)(s.br,{}),"\nAn INVALID ARGUMENT error will be generated if a license has not been loaded for this application name."]}),"\n",(0,i.jsx)(s.h3,{id:"returnuserlicense",children:"ReturnUserLicense"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ReturnUserLicense(AppName As %String, FeatureKeyword As %String = "Concurrent Users", ByRef Released As %Integer) As %Status [ Internal ]\n'})}),"\n",(0,i.jsxs)(s.p,{children:["$SYSTEM.License.ReturnUserLicense(AppName,FeatureKeyword,.Released)",(0,i.jsx)(s.br,{}),"\nReturn (release) a license unit for a TrakCare license and feature. The license feature value must be numeric in the loaded TrakCare license section. Releases the license resource associated with the license user Id of the current process, or the session license Id in the case of CSP."]}),"\n",(0,i.jsx)(s.p,{children:"Arguments:"}),"\n",(0,i.jsxs)(s.p,{children:["AppName: The 'Company.Application' value from the section name in iris.key for protected application license sections, or the name of the unprotected application license section loaded with LoadAppLicenseFile().",(0,i.jsx)(s.br,{}),'\nFeatureKeyword: The feature keyword being released. If the FeatureKeyword is omitted, the default value is "Concurrent Users".',(0,i.jsx)(s.br,{}),"\nReleased: Returns the new count of connections to AppName/FeatureKeyword for this user."]}),"\n",(0,i.jsxs)(s.p,{children:["Return value: $$$OK, or error status.",(0,i.jsx)(s.br,{}),"\nAn error status containing an INVALID ARGUMENT error will be returned if no license has been loaded for AppName.",(0,i.jsx)(s.br,{}),"\nThe ByRef Released argument returns 1 if a license was held and released, otherwise 0."]}),"\n",(0,i.jsx)(s.p,{children:"The session object (%session) must be in scope."}),"\n",(0,i.jsx)(s.p,{children:"This API is intended for use with the old [TrakCare] license. Other application licenses should use ReturnApplicationLicense()"}),"\n",(0,i.jsx)(s.h3,{id:"takeuserlicense",children:"TakeUserLicense"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod TakeUserLicense(AppName As %String, FeatureKeyword As %String = "Concurrent Users", ByRef Count As %Integer) As %Status [ Internal ]\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Take an application license for application = AppName, license feature = FeatureKeyword.",(0,i.jsx)(s.br,{}),"\nThe license is taken in the name of the process or CSP session's licensed user.",(0,i.jsx)(s.br,{}),"\nAppName: The 'Company.Application' value from the section name in iris.key for protected application license sections, or the name of the unprotected application license section loaded with LoadAppLicenseFile(), or the TrakCare application."]}),"\n",(0,i.jsxs)(s.p,{children:['FeatureKeyword is the license feature taken. The default value is "Concurrent Users".',(0,i.jsx)(s.br,{}),"\nCount, returns the resulting number of AppName/FeatureKeyword connections for the user."]}),"\n",(0,i.jsx)(s.p,{children:"The session object (%session) must be in scope."}),"\n",(0,i.jsx)(s.p,{children:"This API is intended for use with the old [TrakCare] license. Other application licenses should use TakeApplicationLicense()"}),"\n",(0,i.jsx)(s.h3,{id:"luavailable",children:"LUAvailable"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LUAvailable() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.LUAvailable() returns number of license units currently available at the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.h3,{id:"luconsumed",children:"LUConsumed"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LUConsumed() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.LUConsumed() returns number of license units currently consumed at the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.h3,{id:"luminavailable",children:"LUMinAvailable"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LUMinAvailable() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.LUMinAvailable() returns the minimum number of license units available at the local InterSystems IRIS instance since it started. This value is the low water mark of license availability on the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.h3,{id:"lumaxconsumed",children:"LUMaxConsumed"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LUMaxConsumed() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.LUMaxConsumed() returns the maximum number of license units consumed at the local InterSystems IRIS instance since it started. This value is the high water mark of license consumption on the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.h3,{id:"lumaxconsumedreset",children:"LUMaxConsumedReset"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LUMaxConsumedReset() As %Integer\n"})}),"\n",(0,i.jsxs)(s.p,{children:["$SYSTEM.License.LUMaxConsumedReset([Argument]) resets the recorded peak levels of various measures of license use by setting the internal counters to the current usage level and returns the previously recorded maximum count. The usage counts are local to the InterSystems IRIS instance and represent maximum usage since the instance started or the counter was last reset.",(0,i.jsx)(s.br,{}),"\nArguments"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"No Argument: Resets maximum license units consumed as returned by $SYSTEM.License.LUMaxConsumed() and the maximum connection count as returned by $SYSTEM.License.MaxConnections() to the current usage levels. The previously recorded $SYSTEM.License.LUMaxConsumed() value is returned."}),"\n",(0,i.jsx)(s.li,{children:'Argument = "Users": Resets maximum license units consumed as returned by $SYSTEM.License.LUMaxConsumed() to the current usage level. The previously recorded $SYSTEM.License.LUMaxConsumed() count is returned.'}),"\n",(0,i.jsx)(s.li,{children:'Argument = "Connections": Resets maximum concurrent connections, as returned by $SYSTEM.License.InstanceConnectionsMax() to the current usage level. The previously recorded $SYSTEM.License.InstanceConnectionsMax() is returned.'}),"\n",(0,i.jsx)(s.li,{children:'Argument = "CSPUsers": Resets maximum concurrent CSP Users, as returned by $SYSTEM.License.MaxCSPUsers() to the current usage level. The previously recorded $SYSTEM.License.MaxCSPUsers() is returned.'}),"\n",(0,i.jsx)(s.li,{children:'Argument = "Processes": Resets maximum concurrent licensed process count, as returned by $SYSTEM.License.ProcMaxConsumed() to the current usage level. The previously recorded $SYSTEM.License.ProcMacConsumed() is returned.'}),"\n",(0,i.jsx)(s.li,{children:'Argument = "CSPGrace": Resets maximum concurrent number of CSP sessions in the "grace" period, as returned by $SYSTEM.License.MaxCSPGrace() to the current usage level. The previously recorded $SYSTEM.License.MaxCSPGrace() is returned.'}),"\n",(0,i.jsx)(s.li,{children:'Argument = "*": Resets all maximum license use counts to the current usage counts. The previously recorded $SYSTEM.License.LUMaxConsumed() is returned.'}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"distributedmaxreset",children:"DistributedMaxReset"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DistributedMaxReset(Counter As %String = "") As %Status\n'})}),"\n",(0,i.jsx)(s.p,{children:"Reset distributed peak levels on the License Server for this Instance and it's license key. This is similar to $SYSTEM.License.LUMaxConsumedReset method, but resets the distributed values. 'Counter' may be either 'Users' or 'Connections'. If 'Counter' is null, both are reset"}),"\n",(0,i.jsx)(s.h3,{id:"procavailable",children:"ProcAvailable"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ProcAvailable() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.ProcAvailable returns the number of additional InterSystems IRIS User process licenses available on this InterSystems IRIS instance. (Applicable only for license types that restrict the number of processes, i.e. 'Real Time' licenses.)"}),"\n",(0,i.jsx)(s.h3,{id:"procconsumed",children:"ProcConsumed"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ProcConsumed() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.ProcConsumed returns the number of InterSystems IRIS User process licenses currently in use on this InterSystems IRIS instance. (Applicable only for license types that restrict the number of processes, i.e. 'Real Time' licenses.)"}),"\n",(0,i.jsx)(s.h3,{id:"instanceconnections",children:"InstanceConnections"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod InstanceConnections()\n"})}),"\n",(0,i.jsx)(s.p,{children:"$System.License.InstanceConnections() - return current count of connections to instance."}),"\n",(0,i.jsx)(s.h3,{id:"instanceconnectionsmax",children:"InstanceConnectionsMax"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod InstanceConnectionsMax()\n"})}),"\n",(0,i.jsx)(s.p,{children:"$System.License.InstanceConnectionsMax() - return maximum concurrent connections to instance since it restarted or the maximum was reset."}),"\n",(0,i.jsx)(s.h3,{id:"procmaxconsumed",children:"ProcMaxConsumed"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ProcMaxConsumed() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.ProcMaxConsumed returns the maximum number of InterSystems IRIS User processes running concurrently since the instance started."}),"\n",(0,i.jsx)(s.h3,{id:"procminavailable",children:"ProcMinAvailable"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ProcMinAvailable() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.ProcMinAvailable returns the minimum number of additional processes available at any time since the instance started. (Applicable only with license types that restrict the number of processes.)"}),"\n",(0,i.jsx)(s.h3,{id:"publicwebappuser",children:"PublicWebAppUser"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PublicWebAppUser() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.PublicWebAppUser declares an application to be a public web application for the purpose of a Web Add-on license. This system method requires that the active license key be a Real Time license or have the Web Add-on feature enabled. The return value is 1 on success, 0 on failure. Failure indicates the license key does not support this option. The PublicWebAppUser system method must be called from the OnStartSession method of the Session Events class defined for the CSP application as follows:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Create a subclass of the %CSP.SessionEvents class and define a method to handle the OnStartSession event. Call $system.License.PublicWebAppUser() in the OnStartSession class method."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Define this class as the Event Class for the CSP application."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"Management Portal -> System Administration -> Security -> Applications -> Web Applications"}),"\n",(0,i.jsx)(s.p,{children:'Enter the %CSP.SessionEvents subclass in the " Event Class:" box.'}),"\n",(0,i.jsxs)(s.ol,{start:"3",children:["\n",(0,i.jsx)(s.li,{children:'Insure that "Unauthenticated" is checked for "Allowed Authentication Methods".'}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["Example: The following code could be placed in ClassMethod OnStartSession of the class extending %CSP.SessionEvents that acts as the session event handler for the public application. ",(0,i.jsx)(s.code,{children:"try { s x=$system.License.PublicWebAppUser() } catch { /* log error */ } q $$$OK"})]}),"\n",(0,i.jsx)(s.h3,{id:"publicwebappusercount",children:"PublicWebAppUserCount"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PublicWebAppUserCount() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.PublicWebAppUserCount returns the current number of public web application connections active."}),"\n",(0,i.jsx)(s.h3,{id:"publicwebappusersmax",children:"PublicWebAppUsersMax"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod PublicWebAppUsersMax() As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.PublicWebAppUsersMax() returns the maximum number of public web application connections active at any one time."}),"\n",(0,i.jsx)(s.h3,{id:"setconnectionlimit",children:"SetConnectionLimit"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetConnectionLimit(MaxCon As %Integer) As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.SetConnectionLimit establishes the maximum number of connections permitted per user on this instance. This enables a system administrator to prevent a user from making so many connections to a InterSystems IRIS instance that they consume all available license units. Calling $SYSTEM.License.SetConnectionLimit($SYSTEM.License.MaxConnections()) permits a user to make the maximum connections permitted but prevent transitioning to the license unit per connection state, insuring the user will consume no more than one license unit. A zero argument removes the limit. The failure to obtain a license will be indicated in the normal way. For example, a call to $system.License.Login() will return zero (0) while a failure to log in to a new terminal connection will receive a  error. However, these license failures will not be reported in the console log. The method returns the former maximum value."}),"\n",(0,i.jsx)(s.p,{children:"The limit applies only to the local instance. If an InterSystems IRIS license is shared among several instances it is still possible to exceed $SYSTEM.License.MaxConnections() over all instances. This can be avoided by setting the limit low enough on each instance that the combined connections to all instances will be unlikely to exceed $SYSTEM.License.MaxConnections()."}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.SetConnectionLimit reqires access to the %Admin Manage resource. It is suggested that customers call this API from SYSTEM^%ZSTART."}),"\n",(0,i.jsx)(s.h3,{id:"setuserlimit",children:"SetUserLimit"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetUserLimit(MaxLU As %Integer) As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.SetUserLimit establishes the maximum number of license units that this InterSystems IRIS instance will consume. This permits a system manager to prevent a InterSystems IRIS instance from consuming all the license units in a key shared among multiple InterSystems IRIS instances. The Method returns the former maximum value. In the absence of a call to $SYSTEM.License.SetUserLimit(max) a InterSystems IRIS instance may consume all available license units."}),"\n",(0,i.jsx)(s.p,{children:"Reqires access to the %Admin Manage resource."}),"\n",(0,i.jsx)(s.h3,{id:"readdurationvalues",children:"ReadDurationValues"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ReadDurationValues() As %List\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.ReadDurationValues() returns the upper limit in seconds each histogram bucket represents. The values are returned as a list with 5 elements. The sixth value is not provided because there is no upper limit. Returning time bucket values in a list permits the number of buckets and their values to be changed in the future with little impact on the code."}),"\n",(0,i.jsx)(s.h3,{id:"readdurationcounts",children:"ReadDurationCounts"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ReadDurationCounts() As %List\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.ReadDurationCounts() returns the number of times a logout occurred within the time indicated by the corresponding ReadDurationValues. The values are returned as a list. $ListLength is currently 6."}),"\n",(0,i.jsx)(s.h3,{id:"cleardurationcounts",children:"ClearDurationCounts"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ClearDurationCounts() As %List\n"})}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.ClearDurationCounts() sets the collection area of the LoginDuration query to all zeros and returns the counts prior to change. Requires the %Manager role."}),"\n",(0,i.jsx)(s.h3,{id:"usernamelicensing",children:"UserNameLicensing"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UserNameLicensing(OnOffState As %Integer) As %Integer\n"})}),"\n",(0,i.jsx)(s.p,{children:'Modify how the License User Identifier is specified. By default, the client IP address is used to identify a user to the InterSystems IRIS license tracking subsystem. If InterSystems IRIS is installed with the normal security level, each process will be have a user identity ($username). The $SYSTEM.License.UserNameLicensing system method can be called to make the InterSystems IRIS license subsystem use $username as the license user identifier. The client IP address will be appended to $Username separated by an "@" sign to form the complete license identifier.'}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.UserNameLicensing modifies the system state. It can be called from SYSTEM^%ZSTART to enable user name licensing at instance startup."}),"\n",(0,i.jsxs)(s.p,{children:["$SYSTEM.License.UserNameLicensing(1) enables $username based licensing and returns the previous state.",(0,i.jsx)(s.br,{}),"\n$SYSTEM.License.UserNameLicensing(0) disables $username based licensing and returns the previous state.",(0,i.jsx)(s.br,{}),"\n$SYSTEM.License.UserNameLicensing() returns the current state."]}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.UserNameLicensing(0) returns an UNLICENSED error if called with RealTime or Web Add-On keys, because these license types require UserNameLicensing."}),"\n",(0,i.jsx)(s.p,{children:"$SYSTEM.License.UserNameLicensing(1) returns an UNLICENSED error if called with a 'Core Capacity' License Type, as this combination is invalid."}),"\n",(0,i.jsx)(s.h3,{id:"countsexecute",children:"CountsExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CountsExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Query returns data displayed by ##class(%SYSTEM.License).ShowCounts()"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Instance License Use: Text describing meaning of row data."}),"\n",(0,i.jsx)(s.li,{children:"License Units: Value (count) described by text.\nThe data source is the local InterSystems IRIS instance."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"countsfetch",children:"CountsFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CountsFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = CountsExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"countsclose",children:"CountsClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CountsClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = CountsFetch ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"decodeexecute",children:"DecodeExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DecodeExecute(ByRef qHandle As %Binary, flag As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Decodes the license capacity fields of the License Authorization field of the license key."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Capacity Field: Licensed capacity name."}),"\n",(0,i.jsx)(s.li,{children:"License Units: Licensed capacity value.\nThe data source is the local InterSystems IRIS instance."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"The 'flag' argument is for internal use only."}),"\n",(0,i.jsx)(s.h3,{id:"decodefetch",children:"DecodeFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DecodeFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = DecodeExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"decodeclose",children:"DecodeClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DecodeClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = DecodeFetch ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"keyexecute",children:"KeyExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyExecute(ByRef qHandle As %Binary, Sections As %Integer = 3) As %Status [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"This query returns the fields of the active license key."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Field: Text to the left of the '=' sign in the [License] section of the license key file."}),"\n",(0,i.jsx)(s.li,{children:"Value: Value to the right of the '=' sign.\nThe value of the Sections argument filters what is returned."}),"\n",(0,i.jsx)(s.li,{children:"1 Return main license section [License]."}),"\n",(0,i.jsx)(s.li,{children:"2 Return application license sections."}),"\n",(0,i.jsx)(s.li,{children:'3 Return all license sections.\nThe name of each application license section enclosed in square brackets will begin each section in the "Field" field with the "Value" field empty.'}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"The data source is the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.h3,{id:"keyfetch",children:"KeyFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = KeyExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"keyclose",children:"KeyClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod KeyClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = KeyFetch ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"licensemanagerexecute",children:"LicenseManagerExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LicenseManagerExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Returns the IP address and port of the active License Server. This information is not applicable for Single Server keys."}),"\n",(0,i.jsxs)(s.p,{children:["Note: Not applicable with a Single-Server key.",(0,i.jsx)(s.br,{}),"\nThe data source is the local InterSystems IRIS instance."]}),"\n",(0,i.jsx)(s.h3,{id:"licensemanagerfetch",children:"LicenseManagerFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LicenseManagerFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = LicenseManagerExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"licensemanagerclose",children:"LicenseManagerClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LicenseManagerClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = LicenseManagerFetch ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"processlistexecute",children:"ProcessListExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ProcessListExecute(ByRef qHandle As %Binary, Filter As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,i.jsx)(s.p,{children:"This query returns license usage for this InterSystems IRIS instance by Process."}),"\n",(0,i.jsx)(s.p,{children:"The PID is the operating system Process Identifier."}),"\n",(0,i.jsx)(s.p,{children:"The DisplayPID is display form for PID, it is hexadecimal value in VMS."}),"\n",(0,i.jsx)(s.p,{children:"The Process field is one of the following process login types:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"System - system processes that do not consume a license unit."}),"\n",(0,i.jsx)(s.li,{children:"User - Regular user (terminal, ODBC, Cache Direct) login."}),"\n",(0,i.jsx)(s.li,{children:"CSP - Cache Server Pages server process. A CSP server process does not maintain an association with an internal license table entry. The association is rather with the session. For this reason, information regarding number of connections, and license units is not available for CSP processes. Use the UserList query to obtain this information for CSP sessions."}),"\n",(0,i.jsx)(s.li,{children:'Diagnostic - Process is logged in to InterSystems IRIS with the "-B" command line argument and is using the diagnostic license unit.'}),"\n",(0,i.jsx)(s.li,{children:"Server - A server process (eg the COMMCTRL process) which does not consume a license unit, but which creates jobs which do consume license units."}),"\n",(0,i.jsx)(s.li,{children:"Pending - A process for which license acquisition is pending. Can occur when deferred license acquisition is in effect.\nThe LID field contains the License Login UserId for this process."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"The Type field contains the License login type and is one of the following:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"User - Regular user login"}),"\n",(0,i.jsx)(s.li,{children:"CSP - Cache Server Page login"}),"\n",(0,i.jsx)(s.li,{children:"Mixed - Regular user plus Cache Server Page login"}),"\n",(0,i.jsx)(s.li,{children:"Grace - Logged out CSP session waiting for grace period to expire.\nCon is the number of connections to this InterSystems IRIS instance by the user represented by LID."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"MaxCon is the maximum number of concurrent connections to this InterSystems IRIS instance by the user represented by UserId."}),"\n",(0,i.jsx)(s.p,{children:"CSPCon is the number of CSP sessions open to this InterSystems IRIS instance by the user represented by UserId."}),"\n",(0,i.jsx)(s.p,{children:"LU is the number of License Units consumed on this InterSystems IRIS instance by the user represented by the UserId."}),"\n",(0,i.jsx)(s.p,{children:"Active is the time in seconds the UserId has been logged in to this InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.p,{children:"Grace is the amount of time this license unit will remain in the grace period if all connections were closed immediately."}),"\n",(0,i.jsx)(s.p,{children:"The data source is the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.h3,{id:"processlistfetch",children:"ProcessListFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ProcessListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ProcessListExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"processlistclose",children:"ProcessListClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ProcessListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ProcessListFetch ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"summaryexecutegetcon",children:"SummaryExecuteGetCon"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SummaryExecuteGetCon() As %String [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Query returns license usage summary as displayed by $System.License.ShowSummary"}),"\n",(0,i.jsx)(s.p,{children:"This represents the view of distributed and local license use maintained by the license server. Local and distributed Authorized, Current, and Maximum license unit usage levels are returned. Current and Maximum connections to the local InterSystems IRIS instance are returned."}),"\n",(0,i.jsx)(s.p,{children:"Note: Not applicable with a Single-Server key."}),"\n",(0,i.jsx)(s.p,{children:"The data source is both the local InterSystems IRIS instance and the license server."}),"\n",(0,i.jsxs)(s.p,{children:["Example:",(0,i.jsx)(s.code,{children:';1) run query %SYSTEM.License.Summary and place results in: ; headings(c) = heading_text for column c ; data(r,c) = data for row r, column c ;2) write the results to the current output device. s Rset=##class(%ResultSet).%New("%SYSTEM.License.Summary") if \'Rset s status="Could not form query %SYSTEM.License.Summary." w !,status q s r=Rset.Execute() if r { s ncol=Rset.GetColumnCount() f i=1:1:ncol s headings(i)=Rset.GetColumnName(i) s nrec=0 While (Rset.Next()) { s nrec=nrec+1 s ncol=Rset.GetColumnCount() f i=1:1:ncol s data(nrec,i)=Rset.GetData(i) } d Rset.Close() s status=nrec_" entries added to array" } i \'r s status="Could not execute query %SYSTEM.License.Summary." w !,status q w !!,headings(1),?40,headings(2),?60,headings(3),! for i=1:1:nrec w !,data(i,1),?40,data(i,2),?60,data(i,3) q'})," This method's sole purpose is to call $SYSTEM.License.InstanceConnections() and $SYSTEM.License.InstanceConnectionsMax() without getting an unimplemented error until everyone upgrades their kernel."]}),"\n",(0,i.jsx)(s.h3,{id:"summaryexecute",children:"SummaryExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SummaryExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"summaryfetch",children:"SummaryFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SummaryFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = SummaryExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"summaryclose",children:"SummaryClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SummaryClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = SummaryFetch ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"userlistexecute",children:"UserListExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod UserListExecute(ByRef qHandle As %Binary, All As %Integer = 0, Filter As %String = "") As %Status [ Internal ]\n'})}),"\n",(0,i.jsx)(s.p,{children:"This query returns license use by User Id"}),"\n",(0,i.jsx)(s.p,{children:"The UserId field contains the License Login UserId. The Type field contains the login type and is one of the following:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"User - Regular user login"}),"\n",(0,i.jsx)(s.li,{children:"CSP - Cache Server Page login"}),"\n",(0,i.jsx)(s.li,{children:"Mixed - Regular user plus Cache Server Page login"}),"\n",(0,i.jsx)(s.li,{children:"Grace - Logged out CSP session waiting for grace period to expire.\nConnects is the number of connections to this InterSystems IRIS instance by the user represented by UserId."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"MaxCon is the maximum number of concurrent connections to this InterSystems IRIS instance by the user represented by UserId."}),"\n",(0,i.jsx)(s.p,{children:"CSPCon is the number of CSP sessions open to this InterSystems IRIS instance by the user represented by UserId."}),"\n",(0,i.jsx)(s.p,{children:"LU is the number of License Units consumed on this InterSystems IRIS instance by the user represented by the UserId."}),"\n",(0,i.jsx)(s.p,{children:"Active is the time in seconds the UserId has been logged in to this InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.p,{children:"Grace is the amount of time this license unit will remain in the grace period if all connections were closed immediately."}),"\n",(0,i.jsx)(s.p,{children:"The data source is the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.h3,{id:"userlistfetch",children:"UserListFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UserListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = UserListExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"userlistclose",children:"UserListClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UserListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = UserListFetch ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"trakcareuserlistexecute",children:"TrakCareUserListExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TrakCareUserListExecute(ByRef qHandle As %Binary, All As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"This query is similar to the UserList query, but it returns the TrakCare license usage in an additional column as a list."}),"\n",(0,i.jsx)(s.p,{children:"The UserId field contains the License Login UserId. The Type field contains the login type and is one of the following:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"User - Regular user login"}),"\n",(0,i.jsx)(s.li,{children:"CSP - Cache Server Page login"}),"\n",(0,i.jsx)(s.li,{children:"Mixed - Regular user plus Cache Server Page login"}),"\n",(0,i.jsx)(s.li,{children:"Grace - Logged out CSP session waiting for grace period to expire.\nConnects is the number of connections to this InterSystems IRIS instance by the user represented by UserId."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"MaxCon is the maximum number of concurrent connections to this InterSystems IRIS instance by the user represented by UserId."}),"\n",(0,i.jsx)(s.p,{children:"CSPCon is the number of CSP sessions open to this InterSystems IRIS instance by the user represented by UserId."}),"\n",(0,i.jsx)(s.p,{children:"LU is the number of License Units consumed on this InterSystems IRIS instance by the user represented by the UserId."}),"\n",(0,i.jsx)(s.p,{children:"Active is the time in seconds the UserId has been logged in to this InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.p,{children:"Grace is the amount of time this license unit will remain in the grace period if all connections were closed immediately."}),"\n",(0,i.jsx)(s.p,{children:"TrakLicenses is a list of TrakCare license features held by the UserId. The data source is the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.h3,{id:"trakcareuserlistfetch",children:"TrakCareUserListFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TrakCareUserListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = UserListExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"trakcareuserlistclose",children:"TrakCareUserListClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod TrakCareUserListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = UserListFetch ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"applicationuserlistexecute",children:"ApplicationUserListExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ApplicationUserListExecute(ByRef qHandle As %Binary, AppName As %String = "ISC.TrakCare", ShowCounts As %Integer = 0) As %Status [ Internal ]\n'})}),"\n",(0,i.jsxs)(s.p,{children:["This query is similar to the UserList query, but it returns the Application license usage in an additional column as a list.",(0,i.jsx)(s.br,{}),"\nIt accepts two parameters:",(0,i.jsx)(s.br,{}),"\nAppName: The 'Company.Application' value from the section name in iris.key for protected application license sections, or the name of the unprotected application license section loaded with LoadAppLicenseFile().",(0,i.jsx)(s.br,{}),"\nShowCounts: If 1, the taken keywords will be returned as KeywordName=TimesTaken in the AppLicenses field. If zero, only the KeywordName will be returned for taken keywords.",(0,i.jsx)(s.br,{}),"\nThe UserId field contains the License Login UserId. The Type field contains the login type and is one of the following:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"User - Regular user login"}),"\n",(0,i.jsx)(s.li,{children:"CSP - Cache Server Page login"}),"\n",(0,i.jsx)(s.li,{children:"Mixed - Regular user plus Cache Server Page login"}),"\n",(0,i.jsx)(s.li,{children:"Grace - Logged out CSP session waiting for grace period to expire.\nConnects is the number of connections to this InterSystems IRIS instance by the user represented by UserId."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"MaxCon is the maximum number of concurrent connections to this InterSystems IRIS instance by the user represented by UserId."}),"\n",(0,i.jsx)(s.p,{children:"CSPCon is the number of CSP sessions open to this InterSystems IRIS instance by the user represented by UserId."}),"\n",(0,i.jsx)(s.p,{children:"LU is the number of License Units consumed on this InterSystems IRIS instance by the user represented by the UserId."}),"\n",(0,i.jsx)(s.p,{children:"Active is the time in seconds the UserId has been logged in to this InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.p,{children:"Grace is the amount of time this license unit will remain in the grace period if all connections were closed immediately."}),"\n",(0,i.jsx)(s.p,{children:"AppLicenses is a list of Application license features held by the UserId. The data source is the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.h3,{id:"applicationuserlistfetch",children:"ApplicationUserListFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ApplicationUserListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = UserListExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"applicationuserlistclose",children:"ApplicationUserListClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ApplicationUserListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = UserListFetch ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"userlistallexecute",children:"UserListAllExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UserListAllExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"This query returns all license slots by User Id, or free."}),"\n",(0,i.jsx)(s.p,{children:"The UserId field contains the License Login UserId. The Type field contains the login type and is one of the following:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"User - Regular user login"}),"\n",(0,i.jsx)(s.li,{children:"CSP - Cache Server Page login"}),"\n",(0,i.jsx)(s.li,{children:"Mixed - Regular user plus Cache Server Page login"}),"\n",(0,i.jsx)(s.li,{children:"Grace - Logged out CSP session waiting for grace period to expire.\nConnects is the number of connections to this InterSystems IRIS instance by the user represented by UserId."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"MaxCon is the maximum number of concurrent connections to this InterSystems IRIS instance by the user represented by UserId."}),"\n",(0,i.jsx)(s.p,{children:"CSPCon is the number of CSP sessions open to this InterSystems IRIS instance by the user represented by UserId."}),"\n",(0,i.jsx)(s.p,{children:"LU is the number of License Units consumed on this InterSystems IRIS instance by the user represented by the UserId."}),"\n",(0,i.jsx)(s.p,{children:"Active is the time in seconds the UserId has been logged in to this InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.p,{children:"Grace is the amount of time this license unit will remain in the grace period if all connections were closed immediately."}),"\n",(0,i.jsx)(s.p,{children:"The data source is the local InterSystems IRIS instance."}),"\n",(0,i.jsx)(s.h3,{id:"userlistallfetch",children:"UserListAllFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UserListAllFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = UserListExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"userlistallclose",children:"UserListAllClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod UserListAllClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = UserListFetch ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"initquery2ls",children:"InitQuery2LS"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod InitQuery2LS(QueryType As %Integer, ByRef Device As %String, ByRef RecordCount As %Integer, ByRef LenLen As %Integer) As %Status [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Generic license server query methods. These implement all the license server queries."}),"\n",(0,i.jsxs)(s.p,{children:["InitQuery2LS: Sends a query request to the license server and returns the open device name, expected record count, and size of record length header. Input values:",(0,i.jsx)(s.br,{}),"\nQueryType = query to initialize",(0,i.jsx)(s.br,{}),"\nReturn values:",(0,i.jsx)(s.br,{}),"\nDevice = TCP binding device name. eg. |TCP|3456",(0,i.jsx)(s.br,{}),"\nRecordCount = number of records that will be returned.",(0,i.jsx)(s.br,{}),"\nLenLen = Size in characters of the length header of returned records."]}),"\n",(0,i.jsx)(s.h3,{id:"expandappusage",children:"ExpandAppUsage"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ExpandAppUsage(in As %String) As %String [ Internal, Private ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Expand appnum,kwnum;...;appnum,kwnum to AppName,KWname;...;AppName,KWname for ConnectionList with applications query to license server."}),"\n",(0,i.jsx)(s.h3,{id:"executequery2ls",children:"ExecuteQuery2LS"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ExecuteQuery2LS(ByRef qHandle As %Binary, QueryType As %Integer = 0) As %Status [ Internal ]\n"})}),"\n",(0,i.jsxs)(s.p,{children:["ExecuteQuery2LS",(0,i.jsx)(s.br,{}),"\nExecute a QueryType query to the license server."]}),"\n",(0,i.jsxs)(s.p,{children:["qHandle (output) = returned query handle QueryType (input) = query type, values are:",(0,i.jsx)(s.br,{}),"\n9 = ActiveServerList",(0,i.jsx)(s.br,{}),"\n10 = KeyList",(0,i.jsx)(s.br,{}),"\n11 = ConnectionList",(0,i.jsx)(s.br,{}),"\n12 = AllKeyConnectionList",(0,i.jsx)(s.br,{}),"\nInvariants: On return the current I/O device is restored and TCP device is closed."]}),"\n",(0,i.jsx)(s.h3,{id:"activeserverlistexecute",children:"ActiveServerListExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ActiveServerListExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"The ActiveServerList query returns all Active InterSystems IRIS instances served by the license server."}),"\n",(0,i.jsxs)(s.p,{children:["The Address field contains the IP address of the host where the instance is running.",(0,i.jsx)(s.br,{}),"\nThe Instance field contains the instance name.",(0,i.jsx)(s.br,{}),"\nThe OrderNumber field contains the OrderNumber field of the License key the Instance is using."]}),"\n",(0,i.jsx)(s.p,{children:"The data source is the license server, and this query will open a TCP port to receive data from the license server."}),"\n",(0,i.jsx)(s.h3,{id:"activeserverlistfetch",children:"ActiveServerListFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ActiveServerListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ActiveServerListExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"activeserverlistclose",children:"ActiveServerListClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ActiveServerListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ActiveServerListFetch ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"licenseserverkeylistexecute",children:"LicenseServerKeyListExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LicenseServerKeyListExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"The LicenseServerKeyList query returns all license keys maintained by the license server."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'The LicenseCapacity field is the data to the right of "LicenseCapacity=" in the key file.'}),"\n",(0,i.jsx)(s.li,{children:'The CustomerName field is the data to the right of "CustomerName=" in the key file.'}),"\n",(0,i.jsx)(s.li,{children:'The OrderNumber field is the data to the right of "OrderNumber=" in the key file.'}),"\n",(0,i.jsx)(s.li,{children:'The ExpirationDate field is the data to the right of "ExpirationDate" in the key file.'}),"\n",(0,i.jsx)(s.li,{children:'The AuthorizationKey field is the data to the right of "AuthorizationKey" in the key file.'}),"\n",(0,i.jsx)(s.li,{children:'The MachineID field is the data to the right of "MachineID=" in the key file.'}),"\n",(0,i.jsx)(s.li,{children:'The LicenseID field is the data to the right of "LicenseID=" in the key file.\nThe data source is the license server, and this query will open a TCP port to receive data from the license server.'}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"licenseserverkeylistfetch",children:"LicenseServerKeyListFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LicenseServerKeyListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = LicenseServerKeyListExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"licenseserverkeylistclose",children:"LicenseServerKeyListClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LicenseServerKeyListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = LicenseServerKeyListFetch ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"connectionlistexecute",children:"ConnectionListExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ConnectionListExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"The ConnectionList query returns a list of active connections consuming license units from the current key."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"The UserId field contains the License User Id of the entity consuming one or more license units."}),"\n",(0,i.jsx)(s.li,{children:'The LicenseUnits field contains the number of license units consumed. This can be a number, or the string "shr", indicating that the connection shares a license unit with another connection by the same License UserId.'}),"\n",(0,i.jsx)(s.li,{children:"The Connections field contains the number of connections the UserId entity has made to the the InterSystems IRIS server."}),"\n",(0,i.jsx)(s.li,{children:"The ServerIP field contains the address of the the InterSystems IRIS server to which the connection was made."}),"\n",(0,i.jsx)(s.li,{children:"The Instance field contains the name of the InterSystems IRIS instance to which the connection was made.\nThe data source is the license server, and this query will open a TCP port to receive data from the license server."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"connectionlistfetch",children:"ConnectionListFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ConnectionListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ConnectionListExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"connectionlistclose",children:"ConnectionListClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ConnectionListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ConnectionListFetch ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"appstakenbyuser",children:"AppsTakenByUser"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AppsTakenByUser(UserId As %String) As %String [ Internal, Private ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"Get all Application,KeyWord pairs taken for UserId. Used by ConnectionAppList query when license is single server, hence no license server."}),"\n",(0,i.jsx)(s.h3,{id:"connectionapplistexecute",children:"ConnectionAppListExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ConnectionAppListExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"The ConnectionAppList query returns a list of active connections consuming license units from the current key. It is identical to the ConnectionList query, with an additional field which contains applications that have been taken by the UserId on the ServerIP."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"The UserId field contains the License User Id of the entity consuming one or more license units."}),"\n",(0,i.jsx)(s.li,{children:'The LicenseUnits field contains the number of license units consumed. This can be a number, or the string "shr", indicating that the connection shares a license unit with another connection by the same License UserId.'}),"\n",(0,i.jsx)(s.li,{children:"The Connections field contains the number of connections the UserId entity has made to the the InterSystems IRIS server."}),"\n",(0,i.jsx)(s.li,{children:"The ServerIP field contains the address of the the InterSystems IRIS server to which the connection was made."}),"\n",(0,i.jsx)(s.li,{children:"The Instance field contains the name of the InterSystems IRIS instance to which the connection was made."}),"\n",(0,i.jsx)(s.li,{children:"The ApplicationUse field contains the applications taken by the connection formatted as AppName,Feature;AppName,Feature;...;AppName,Feature.\nThe data source is the license server, and this query will open a TCP port to receive data from the license server. The license server maintains counts of ISC.Appname license sections but does not manage other application license sections. Usage of other license sections can be examined with the ApplicationUserList query which returns license use for all applications on the current InterSystems IRIS instance."}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"connectionapplistfetch",children:"ConnectionAppListFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ConnectionAppListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = ConnectionListExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"connectionapplistclose",children:"ConnectionAppListClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod ConnectionAppListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = ConnectionListFetch ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"allkeyconnectionlistexecute",children:"AllKeyConnectionListExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AllKeyConnectionListExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"The AllKeyConnectionList query returns a list of active connections consuming license units from all keys maintained by the license server."}),"\n",(0,i.jsxs)(s.p,{children:["The UserId field contains the License User Id of the entity consuming one or more license units.",(0,i.jsx)(s.br,{}),'\nThe LicenseUnits field contains the number of license units consumed. This can be a number, or the string "shr", indicating that the connection shares a license unit with another connection by the same License UserId.',(0,i.jsx)(s.br,{}),"\nThe Connections field contains the number of connections the UserId entity has made to the the InterSystems IRIS server.",(0,i.jsx)(s.br,{}),"\nThe ServerIP field contains the address of the the InterSystems IRIS server to which the connection was made.",(0,i.jsx)(s.br,{}),"\nThe Instance field contains the name of the InterSystems IRIS instance to which the connection was made."]}),"\n",(0,i.jsx)(s.p,{children:"The data source is the license server, and this query will open a TCP port to receive data from the license server."}),"\n",(0,i.jsx)(s.h3,{id:"allkeyconnectionlistfetch",children:"AllKeyConnectionListFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AllKeyConnectionListFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = AllKeyConnectionListExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"allkeyconnectionlistclose",children:"AllKeyConnectionListClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod AllKeyConnectionListClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = AllKeyConnectionListFetch ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"logindurationexecute",children:"LoginDurationExecute"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LoginDurationExecute(ByRef qHandle As %Binary) As %Status [ Internal ]\n"})}),"\n",(0,i.jsx)(s.p,{children:"The LoginDuration query returns a histogram of the durations license unit consumption on the local instance."}),"\n",(0,i.jsxs)(s.p,{children:['The Duration field contains a duration of license unit consumption in seconds. The duration field is text suitable for display, not a number. The final row will be prefixed with a ">" sign to indicate that the duration of the row has no upper limit',(0,i.jsx)(s.br,{}),"\nThe Count field contains the number of times a license unit was consumed for less than the corresponding Duration field. The Count field is not cumulative."]}),"\n",(0,i.jsx)(s.p,{children:"The data source is the local InterSystems IRIS instance."}),"\n",(0,i.jsxs)(s.p,{children:["Example:",(0,i.jsx)(s.code,{children:';1) run query %SYSTEM.License.LoginDuration ;2) write the results to the current output device. Set rset=##class(%Library.ResultSet).%New("%SYSTEM.License:LoginDuration") If rset="" Write !,"Create Query failed" d DisplayError^%apiOBJ(%objlasterror) Quit Set status=rset.Execute() If $$$ISERR(status) Write !,"Execute Query failed:" Do DisplayError^%apiOBJ(status) Quit Set colcnt=rset.GetColumnCount() For i=1:1:colcnt Set colname(i)=rset.GetColumnName(i) Write !! For i=1:1:colcnt Write $j(colname(i),15)," " while rset.Next() { Write ! For i=1:1:colcnt Write $j(rset.GetData(i),15)," " } ;Results look like this: ; ;Testing %SYSTEM.License.LoginDuration query. ; Duration Count ; 1 0 ; 15 7548 ; 60 7261 ; 900 260 ; 3600 0 ; > 3600 0'})]}),"\n",(0,i.jsx)(s.h3,{id:"logindurationfetch",children:"LoginDurationFetch"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LoginDurationFetch(ByRef qHandle As %Binary, ByRef Row As %List, ByRef AtEnd As %Integer = 0) As %Status [ Internal, PlaceAfter = LoginDurationExecute ]\n"})}),"\n",(0,i.jsx)(s.h3,{id:"logindurationclose",children:"LoginDurationClose"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod LoginDurationClose(ByRef qHandle As %Binary) As %Status [ Internal, PlaceAfter = LoginDurationFetch ]\n"})})]})}function o(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>a});var i=n(96540);const t={},r=i.createContext(t);function c(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);