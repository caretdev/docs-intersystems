"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[23488],{78746:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>a,default:()=>c,frontMatter:()=>i,toc:()=>d});var l=t(74848),n=t(28453);const i={pagination_prev:null,pagination_next:null},a="%DeepSee.UI.Dialog.FieldList",d=[{value:"Parameters",id:"parameters",level:2},{value:"APPLYBUTTON",id:"applybutton",level:3},{value:"Properties",id:"properties",level:2},{value:"cubeName",id:"cubename",level:3},{value:"ELEMENT",id:"element",level:3},{value:"Expression",id:"expression",level:3},{value:"WHAT",id:"what",level:3},{value:"dataSource",id:"datasource",level:3},{value:"CONTEXT",id:"context",level:3},{value:"domain",id:"domain",level:3},{value:"XDatas",id:"xdatas",level:2},{value:"Style",id:"style",level:3},{value:"dialogBody",id:"dialogbody",level:3},{value:"Methods",id:"methods",level:2},{value:"%OnGetTitle",id:"ongettitle",level:3},{value:"%OnGetSubtitle",id:"ongetsubtitle",level:3},{value:"getDialogValue",id:"getdialogvalue",level:3},{value:"doEdit",id:"doedit",level:3},{value:"doRemove",id:"doremove",level:3},{value:"doUpdate",id:"doupdate",level:3},{value:"moveItem",id:"moveitem",level:3},{value:"selectProperty",id:"selectproperty",level:3},{value:"parseSqlField",id:"parsesqlfield",level:3},{value:"combineSqlFieldToJSON",id:"combinesqlfieldtojson",level:3},{value:"combineSqlFieldToString",id:"combinesqlfieldtostring",level:3},{value:"selectedRow",id:"selectedrow",level:3},{value:"%OnAfterCreatePage",id:"onaftercreatepage",level:3},{value:"GetDataSourceInfo",id:"getdatasourceinfo",level:3},{value:"GetDependsOnInfo",id:"getdependsoninfo",level:3},{value:"GetSQLNames",id:"getsqlnames",level:3},{value:"GetPropName",id:"getpropname",level:3},{value:"%ParseSQLFieldList",id:"parsesqlfieldlist",level:3}];function r(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.header,{children:(0,l.jsx)(s.h1,{id:"deepseeuidialogfieldlist",children:"%DeepSee.UI.Dialog.FieldList"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Class %DeepSee.UI.Dialog.FieldList Extends %DeepSee.UI.Dialog.standardDialog [ System = 4 ]\n"})}),"\n",(0,l.jsxs)(s.p,{children:["This dialog lets the user add or edit the Field List for a Listing.",(0,l.jsx)(s.br,{}),"\nAn existing list (delimited by comma) may be passed in."]}),"\n",(0,l.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsx)(s.h3,{id:"applybutton",children:"APPLYBUTTON"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter APPLYBUTTON = 0;\n"})}),"\n",(0,l.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,l.jsx)(s.h3,{id:"cubename",children:"cubeName"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:'Property cubeName As %ZEN.Datatype.string(ZENURL = "CUBE");\n'})}),"\n",(0,l.jsx)(s.p,{children:"Cube name."}),"\n",(0,l.jsx)(s.h3,{id:"element",children:"ELEMENT"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:'Property ELEMENT As %ZEN.Datatype.string(ZENURL = "ELEMENT");\n'})}),"\n",(0,l.jsx)(s.h3,{id:"expression",children:"Expression"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:'Property Expression As %ZEN.Datatype.string(ZENURL = "VALUE");\n'})}),"\n",(0,l.jsx)(s.h3,{id:"what",children:"WHAT"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:'Property WHAT As %ZEN.Datatype.string(ZENURL = "WHAT");\n'})}),"\n",(0,l.jsx)(s.h3,{id:"datasource",children:"dataSource"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:'Property dataSource As %ZEN.Datatype.string(ZENURL = "DATASOURCE");\n'})}),"\n",(0,l.jsx)(s.h3,{id:"context",children:"CONTEXT"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:'Property CONTEXT As %ZEN.Datatype.string(ZENURL = "CONTEXT");\n'})}),"\n",(0,l.jsx)(s.h3,{id:"domain",children:"domain"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Property domain As %ZEN.Datatype.string;\n"})}),"\n",(0,l.jsx)(s.p,{children:"Translation domain of the cube"}),"\n",(0,l.jsx)(s.h2,{id:"xdatas",children:"XDatas"}),"\n",(0,l.jsx)(s.h3,{id:"style",children:"Style"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"XData Style\n"})}),"\n",(0,l.jsx)(s.h3,{id:"dialogbody",children:"dialogBody"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:'XData dialogBody [ XMLNamespace = "http://www.intersystems.com/zen" ]\n'})}),"\n",(0,l.jsx)(s.p,{children:"Contents of the dialog body."}),"\n",(0,l.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(s.h3,{id:"ongettitle",children:"%OnGetTitle"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnGetTitle() As %String\n"})}),"\n",(0,l.jsx)(s.p,{children:"Get the (localized) title string for the dialog. This should be implemented in a subclass."}),"\n",(0,l.jsx)(s.h3,{id:"ongetsubtitle",children:"%OnGetSubtitle"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnGetSubtitle() As %String\n"})}),"\n",(0,l.jsx)(s.p,{children:"Get the (localized) subtitle string for the dialog. This should be implemented in a subclass."}),"\n",(0,l.jsx)(s.h3,{id:"getdialogvalue",children:"getDialogValue"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClientMethod getDialogValue() [ Language = javascript ]\n"})}),"\n",(0,l.jsx)(s.h3,{id:"doedit",children:"doEdit"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClientMethod doEdit(editObj) [ Language = javascript ]\n"})}),"\n",(0,l.jsx)(s.p,{children:"User edited a field. Change background color and enable Update button."}),"\n",(0,l.jsx)(s.h3,{id:"doremove",children:"doRemove"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClientMethod doRemove() [ Language = javascript ]\n"})}),"\n",(0,l.jsx)(s.p,{children:"User clicked the Remove image. Remove the field from Field List box."}),"\n",(0,l.jsx)(s.h3,{id:"doupdate",children:"doUpdate"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClientMethod doUpdate() [ Language = javascript ]\n"})}),"\n",(0,l.jsx)(s.p,{children:"User clicked the Update button. Update the selected row with new value."}),"\n",(0,l.jsx)(s.h3,{id:"moveitem",children:"moveItem"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClientMethod moveItem(dir) [ Language = javascript ]\n"})}),"\n",(0,l.jsx)(s.p,{children:'User clicked the Move Up/Down image. Move the field up or down one level in the Field List box. dir = "up" or "dn".'}),"\n",(0,l.jsx)(s.h3,{id:"selectproperty",children:"selectProperty"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClientMethod selectProperty(sourceObj) [ Language = javascript ]\n"})}),"\n",(0,l.jsx)(s.p,{children:"User selected a property from the tree. Get the SQLName for the selected value and put it into the Field List box."}),"\n",(0,l.jsx)(s.h3,{id:"parsesqlfield",children:"parseSqlField"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClientMethod parseSqlField(value) [ Language = javascript ]\n"})}),"\n",(0,l.jsx)(s.p,{children:"Parse a JSON string entry in the field list. Return an array with the field identifier and the header."}),"\n",(0,l.jsx)(s.h3,{id:"combinesqlfieldtojson",children:"combineSqlFieldToJSON"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClientMethod combineSqlFieldToJSON(useDomain, parsedFieldArray) [ Language = javascript ]\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Produce a JSON string for the complete parsed field entry by combining the Field and Header information into something of the form",(0,l.jsx)(s.br,{}),'\nField AS "$$$TEXT["Header","DOMAIN"]"',(0,l.jsx)(s.br,{}),"\nIf there is no Domain defined for the cube, the $$$TEXT[] will be omitted. Delimited identifiers are always assumed and the double quotes are always added to the Header portion."]}),"\n",(0,l.jsx)(s.h3,{id:"combinesqlfieldtostring",children:"combineSqlFieldToString"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClientMethod combineSqlFieldToString(useDomain, parsedFieldArray) [ Language = javascript ]\n"})}),"\n",(0,l.jsxs)(s.p,{children:["Produce a display string for the complete field entry by combining the Field and Header information into something of the form",(0,l.jsx)(s.br,{}),'\nField AS "$$$TEXT["Header","DOMAIN"]"',(0,l.jsx)(s.br,{}),"\nIf there is no Domain defined for the cube, the $$$TEXT[] will be omitted. Delimited identifiers are always assumed and the double quotes are always added to the Header portion."]}),"\n",(0,l.jsx)(s.h3,{id:"selectedrow",children:"selectedRow"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClientMethod selectedRow(fieldObj) [ Language = javascript ]\n"})}),"\n",(0,l.jsx)(s.p,{children:"User clicked a row from the list box. Parse selected value and place it into the Field and Header boxes for editing."}),"\n",(0,l.jsx)(s.h3,{id:"onaftercreatepage",children:"%OnAfterCreatePage"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"Method %OnAfterCreatePage() As %Status\n"})}),"\n",(0,l.jsx)(s.h3,{id:"getdatasourceinfo",children:"GetDataSourceInfo"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetDataSourceInfo(pRoot As %String, Output pTree, ByRef pParms) As %Status\n"})}),"\n",(0,l.jsx)(s.p,{children:"Provide contents of the data source tree."}),"\n",(0,l.jsx)(s.h3,{id:"getdependsoninfo",children:"GetDependsOnInfo"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetDependsOnInfo(pRoot As %String, Output pTree, ByRef pParms) As %Status\n"})}),"\n",(0,l.jsx)(s.h3,{id:"getsqlnames",children:"GetSQLNames"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetSQLNames(sourceClass As %String, fullName As %String, WHAT As %String) As %ZEN.proxyObject [ ZenMethod ]\n"})}),"\n",(0,l.jsx)(s.p,{children:"Get SQL Names from property name. Similar logic as in IsDate of Architect."}),"\n",(0,l.jsx)(s.h3,{id:"getpropname",children:"GetPropName"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetPropName(sourceClass, property, Output propNames) As %String\n"})}),"\n",(0,l.jsx)(s.h3,{id:"parsesqlfieldlist",children:"%ParseSQLFieldList"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod %ParseSQLFieldList(pFieldString = "", pDomain = "", Output pFieldArray) As %Status\n'})}),"\n",(0,l.jsx)(s.p,{children:"Split a single fieldList string into the individual fields. This is more sophisticated than a simple comma-delimited split."})]})}function c(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(r,{...e})}):r(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>d});var l=t(96540);const n={},i=l.createContext(n);function a(e){const s=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),l.createElement(i.Provider,{value:s},e.children)}}}]);