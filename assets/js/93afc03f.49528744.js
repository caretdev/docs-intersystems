"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[25956],{28813:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>l,default:()=>u,frontMatter:()=>a,toc:()=>i});var r=t(74848),n=t(28453);const a={pagination_prev:null,pagination_next:null},l="%iKnow.Queries.Utils",i=[{value:"Methods",id:"methods",level:2},{value:"GetQueryResultColumns",id:"getqueryresultcolumns",level:3},{value:"GetParameterDisplayName",id:"getparameterdisplayname",level:3},{value:"GetParameterValues",id:"getparametervalues",level:3},{value:"DumpQueryResult",id:"dumpqueryresult",level:3}];function o(e){const s={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"iknowqueriesutils",children:"%iKnow.Queries.Utils"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Class %iKnow.Queries.Utils Extends %RegisteredObject [ Deprecated, System = 4 ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Utility class grouping some utility and informative methods complementing the iKnow Query APIs."}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"getqueryresultcolumns",children:"GetQueryResultColumns"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetQueryResultColumns(queryClass As %String, queryName As %String, Output columns) As %Status\n"})}),"\n",(0,r.jsx)(s.p,{children:"Returns a list of the columns returned by the query identified by the queryClass and queryName parameters in the following format: columns(index) = $lb(name,type). If the supplied parameters do not correspond to a known query, an error is returned."}),"\n",(0,r.jsx)(s.h3,{id:"getparameterdisplayname",children:"GetParameterDisplayName"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetParameterDisplayName(paramName As %String) As %String\n"})}),"\n",(0,r.jsx)(s.p,{children:"Returns a displayable name for most query parameter names in use. If no more readable form is available (for example if it's too trivial), paramName itself is returned."}),"\n",(0,r.jsx)(s.h3,{id:"getparametervalues",children:"GetParameterValues"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetParameterValues(paramName As %String, Output values, queryClass As %String = "", queryName As %String = "") As %Boolean\n'})}),"\n",(0,r.jsx)(s.p,{children:"Returns a list of the possible parameter values for a number of common query parameters in a variable containing key-displayValue pairs: values(i) = $lb(key, value). The %Boolean returned expresses whether this is a known parameter for which a meaningful list of values can be returned."}),"\n",(0,r.jsx)(s.p,{children:"The optional queryClass and queryName parameters will in some cases limit the possible values to the allowed ones supported by that particular query."}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Note:"}),' for the "pageSize" parameter, this method will return a limited number of possible values to make this method more useful for internal purposes, but obviously any positive numeric value will do.']}),"\n",(0,r.jsx)(s.h3,{id:"dumpqueryresult",children:"DumpQueryResult"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DumpQueryResult(pFilename As %String, pQueryClass As %String, pQueryName As %String, pQueryParams...) As %Status\n"})}),"\n",(0,r.jsx)(s.p,{children:"This utility method executes a query of one of the primary iKnow query APIs (with the *API suffix), as identified by pQueryClass and pQueryName, and writes the output as a CSV file to pFilename. This will overwrite the output file if it already exists and the output will include a header line containing column names and types."}),"\n",(0,r.jsx)(s.p,{children:"pQueryParams... is to contain all the parameters you would normally supply to the query, except for its ByRef result parameter, which is taken care of by this utility."}),"\n",(0,r.jsx)(s.p,{children:"For example, a query defined as"}),"\n",(0,r.jsx)(s.p,{children:"User.MyAPI.GetXByY(ByRef result, domainId As %Integer, x As %String,  y As %String)"}),"\n",(0,r.jsx)(s.p,{children:"will be called as follows:"}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.p,{children:'do ##class(%iKnow.Queries.Utils).DumpQueryResult("C:\\temp\\myFile.csv",  "User.MyAPI", "GetXByY", domainId, x, y)'}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>i});var r=t(96540);const n={},a=r.createContext(n);function l(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);