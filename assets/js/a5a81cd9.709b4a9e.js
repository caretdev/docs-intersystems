"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[77503],{22409:(e,s,t)=>{t.r(s),t.d(s,{contentTitle:()=>i,default:()=>c,frontMatter:()=>o,toc:()=>a});var r=t(74848),n=t(28453);const o={pagination_prev:null,pagination_next:null},i="%CSP.Util.AutoForm",a=[{value:"Parameters",id:"parameters",level:2},{value:"DOMAIN",id:"domain",level:3},{value:"COMMANDFORM",id:"commandform",level:3},{value:"FORMCOLUMNS",id:"formcolumns",level:3},{value:"Methods",id:"methods",level:2},{value:"DoSubmit",id:"dosubmit",level:3},{value:"DispatchSubmit",id:"dispatchsubmit",level:3},{value:"CreateInstance",id:"createinstance",level:3},{value:"OnSubmit",id:"onsubmit",level:3},{value:"DrawHTMLForm",id:"drawhtmlform",level:3},{value:"OnDefineButtons",id:"ondefinebuttons",level:3},{value:"DrawFormButtons",id:"drawformbuttons",level:3},{value:"DrawHTMLTable",id:"drawhtmltable",level:3},{value:"GetComboBoxHTML",id:"getcomboboxhtml",level:3},{value:"Submit",id:"submit",level:3},{value:"ProcessSubmit",id:"processsubmit",level:3},{value:"SetFormError",id:"setformerror",level:3},{value:"GetFormError",id:"getformerror",level:3}];function l(e){const s={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"csputilautoform",children:"%CSP.Util.AutoForm"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Class %CSP.Util.AutoForm [ Abstract, CompileAfter = %CSP.Util.AutoFormGenerator, ServerOnly = 1, System = 4 ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"This class is used internally by InterSystems IRIS. You should not make direct use of it within your applications. There is no guarantee made about either the behavior or future operation of this class."}),"\n",(0,r.jsx)(s.p,{children:"This class provides a mechanism to automatically generate HTML forms (using CSP). Subclasses of this class can automatically generate HTML forms and tables."}),"\n",(0,r.jsx)(s.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(s.h3,{id:"domain",children:"DOMAIN"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'Parameter DOMAIN = "%Utility";\n'})}),"\n",(0,r.jsx)(s.p,{children:"Default domain for the Portal's localization."}),"\n",(0,r.jsx)(s.h3,{id:"commandform",children:"COMMANDFORM"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter COMMANDFORM = 0;\n"})}),"\n",(0,r.jsx)(s.p,{children:"If true (1) then this is a specialized type of form that only displays submit buttons and no INPUT fields."}),"\n",(0,r.jsx)(s.h3,{id:"formcolumns",children:"FORMCOLUMNS"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Parameter FORMCOLUMNS = 1;\n"})}),"\n",(0,r.jsx)(s.p,{children:"Number of columns used to layout forms for this class"}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"dosubmit",children:"DoSubmit"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DoSubmit() As %String\n"})}),"\n",(0,r.jsx)(s.p,{children:'Common expiration date used for cookies Test if an AutoForm is being submitted If so, process it and return the name of the submit button or "" if there is not a submit. For a AUTOFORM_CANCEL, return "$AUTOFORM_CANCEL" without processing...'}),"\n",(0,r.jsx)(s.h3,{id:"dispatchsubmit",children:"DispatchSubmit"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DispatchSubmit(pSubmit As %String) As %Status\n"})}),"\n",(0,r.jsx)(s.p,{children:"This method invokes a submit on the appropriate form class. Do not call this method directly; use DoSubmit instead."}),"\n",(0,r.jsx)(s.h3,{id:"createinstance",children:"CreateInstance"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod CreateInstance(ByRef pID As %String) As AutoForm [ CodeMode = objectgenerator ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Create an instance of the AutoForm object using the provided ID value(s). This is overridden by subclasses.",(0,r.jsx)(s.br,{}),"\nThe default implementation will perform an OpenId if the AutoForm is a persistent object."]}),"\n",(0,r.jsx)(s.h3,{id:"onsubmit",children:"OnSubmit"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"Method OnSubmit(ByRef pID As %String, pSubmit As %String) As %Status [ CodeMode = objectgenerator ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["This callback is called when this form is submitted. pID is the ID value associated with the form. The default implementation will perform a Save if the AutoForm is a persistent object.",(0,r.jsx)(s.br,{}),"\npSubmit is the name of the submit button (i.e., $AUTOFORM_SAVE)."]}),"\n",(0,r.jsx)(s.h3,{id:"drawhtmlform",children:"DrawHTMLForm"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod DrawHTMLForm(pObj As %RegisteredObject, ByRef pID As %String, pActionURL As %String = "", ByRef pButtons As FormButton, pTarget As %String = "") As %Status [ CodeMode = objectgenerator ]\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Draw an HTML form for this form object.",(0,r.jsx)(s.br,{}),"\npObj is an instance of the form object that provides the initial values for the form.",(0,r.jsx)(s.br,{}),"\npActionURL is the URL to submit this form to.",(0,r.jsx)(s.br,{}),"\npButtons is an array of submit buttons to display for the form. If not provided, the default ",(0,r.jsx)(s.em,{children:"Save"})," and ",(0,r.jsx)(s.em,{children:"Cancel"})," buttons are shown. pButtons is an integer-subscripted array of FormButton objects."]}),"\n",(0,r.jsx)(s.h3,{id:"ondefinebuttons",children:"OnDefineButtons"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod OnDefineButtons(ByRef pButtons As FormButton) [ Abstract ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Subclasses can override this to redefine the buttons for a form"}),"\n",(0,r.jsx)(s.h3,{id:"drawformbuttons",children:"DrawFormButtons"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DrawFormButtons(ByRef pButtons As FormButton)\n"})}),"\n",(0,r.jsx)(s.p,{children:"Draw the buttons for a form..."}),"\n",(0,r.jsx)(s.h3,{id:"drawhtmltable",children:"DrawHTMLTable"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod DrawHTMLTable(pObj As %RegisteredObject, ByRef pID As %String) As %Status [ CodeMode = objectgenerator ]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Draw an HTML detail table for this form object.",(0,r.jsx)(s.br,{}),"\npObj is an instance of the form object that provides the values for the table."]}),"\n",(0,r.jsx)(s.h3,{id:"getcomboboxhtml",children:"GetComboBoxHTML"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod GetComboBoxHTML(pValue As %String, pName As %String, pClass As %String, pQuery As %String, pCaptionColumn As %String, pValueColumn As %String = "", pP1 As %String = "", pP2 As %String = "", pP3 As %String = "") As %String\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Construct an HTML string defining a combo box for the given query.",(0,r.jsx)(s.br,{}),"\npName is the name to use for the SELECT control.",(0,r.jsx)(s.br,{}),"\npValue is the current value of the property.",(0,r.jsx)(s.br,{}),"\nReturns the HTML to display."]}),"\n",(0,r.jsx)(s.h3,{id:"submit",children:"Submit"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod Submit(pRequest As %CSP.Request, pSubmit As %String) As %Status\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Called by the page handler when a form is submitted.",(0,r.jsx)(s.br,{}),"\npSubmit is the name of the submit button (i.e., $AUTOFORM_SAVE)."]}),"\n",(0,r.jsx)(s.h3,{id:"processsubmit",children:"ProcessSubmit"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:'ClassMethod ProcessSubmit(pRequest As %CSP.Request, ByRef pID As %String = "", Output pErrorMsg As %String) As AutoForm [ CodeMode = objectgenerator ]\n'})}),"\n",(0,r.jsx)(s.p,{children:"Takes submitted data for a form and returns an instance of AutoForm object"}),"\n",(0,r.jsx)(s.h3,{id:"setformerror",children:"SetFormError"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod SetFormError(pMsg As %String)\n"})}),"\n",(0,r.jsx)(s.p,{children:"Set a error message to be displayed within an AutoForm."}),"\n",(0,r.jsx)(s.h3,{id:"getformerror",children:"GetFormError"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-objectscript-class",children:"ClassMethod GetFormError() As %String [ CodeMode = expression ]\n"})}),"\n",(0,r.jsx)(s.p,{children:"Get error message to be displayed within an AutoForm."})]})}function c(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>a});var r=t(96540);const n={},o=r.createContext(n);function i(e){const s=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);