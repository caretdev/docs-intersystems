"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[93670],{40182:(e,t,s)=>{s.r(t),s.d(t,{contentTitle:()=>a,default:()=>d,frontMatter:()=>n,toc:()=>l});var r=s(74848),i=s(28453);const n={pagination_prev:null,pagination_next:null},a="%DeepSee.TermList",l=[{value:"Methods",id:"methods",level:2},{value:"%GetTermLists",id:"gettermlists",level:3},{value:"%GetTermListArray",id:"gettermlistarray",level:3},{value:"%TermListExists",id:"termlistexists",level:3},{value:"%DeleteTermList",id:"deletetermlist",level:3},{value:"%Lookup",id:"lookup",level:3},{value:"%GetValueArray",id:"getvaluearray",level:3},{value:"%CreateTermList",id:"createtermlist",level:3},{value:"%SetValue",id:"setvalue",level:3},{value:"%GetTermListNameFromStream",id:"gettermlistnamefromstream",level:3},{value:"%ImportCSV",id:"importcsv",level:3},{value:"%ExportCSV",id:"exportcsv",level:3},{value:"%WriteCSVRecord",id:"writecsvrecord",level:3},{value:"%ParseCSVRecord",id:"parsecsvrecord",level:3},{value:"%ToObj",id:"toobj",level:3},{value:"%FromObj",id:"fromobj",level:3}];function o(e){const t={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"deepseetermlist",children:"%DeepSee.TermList"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"Class %DeepSee.TermList Extends %RegisteredObject [ System = 4 ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"This class contains the APIs for DeepSee Term Lists. A Term List is a simple lookup table that can be used to translate values when creating DeepSee models or can be referenced at run-time."}),"\n",(0,r.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(t.h3,{id:"gettermlists",children:"%GetTermLists"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetTermLists(Output pList As %List) As %Status\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Get a list of currently defined term lists. This is returned as:",(0,r.jsx)(t.br,{}),"\npList(NAME) = $LB(name,caption,moddate,type)"]}),"\n",(0,r.jsx)(t.h3,{id:"gettermlistarray",children:"%GetTermListArray"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %GetTermListArray(ByRef pParameters, Output pMetaData, Output %pData) As %Status [ Final, Internal ]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Return an array of all currently defined DeepSee TermLists in a format that can be used by a finderDialog."}),"\n",(0,r.jsx)(t.h3,{id:"termlistexists",children:"%TermListExists"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %TermListExists(pTermList As %String, Output pSC As %Status) As %Boolean\n"})}),"\n",(0,r.jsx)(t.p,{children:"Test if the given term list exists."}),"\n",(0,r.jsx)(t.h3,{id:"deletetermlist",children:"%DeleteTermList"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %DeleteTermList(pTermList As %String) As %Status\n"})}),"\n",(0,r.jsx)(t.p,{children:"Delete the specified term list."}),"\n",(0,r.jsx)(t.h3,{id:"lookup",children:"%Lookup"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %Lookup(pTermList As %String, pKey As %String, pField As %String = "", pDefault As %String = "") As %String\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Lookup a single value within the term list pTermList. pKey is the unique key for the item in the term list.",(0,r.jsx)(t.br,{}),'\npField is the name of the value field to use; if not supplied, "value" is used.',(0,r.jsx)(t.br,{}),"\npDefault is a value to return if the key or property value do not exist.",(0,r.jsx)(t.br,{}),'\nIf the termlist has a pattern associated with it, and the requested field is the "value" field, then the pattern is applied to value before it is returned.']}),"\n",(0,r.jsx)(t.h3,{id:"getvaluearray",children:"%GetValueArray"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %GetValueArray(pTermList As %String, Output pArray As %String, pField As %String = "") As %Status\n'})}),"\n",(0,r.jsxs)(t.p,{children:['Lookup all values (the "value" field) from the term list pTermList and copy them into a local array. The output is:',(0,r.jsx)(t.br,{}),"\npArray(key) = value",(0,r.jsx)(t.br,{}),"\nIf pField is supplied, then use the value of that field."]}),"\n",(0,r.jsx)(t.h3,{id:"createtermlist",children:"%CreateTermList"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %CreateTermList(pTermList As %String, pCaption As %String = "", pFieldList As %String = "", pPattern As %String = "", pDescription As %String = "", pSubjectArea As %String = "", pHideValue As %Boolean = 0) As %Status\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Create (or update if present) the given term list.",(0,r.jsx)(t.br,{}),"\npTermList is the name of the term list.",(0,r.jsx)(t.br,{}),"\npCaption is the optional caption (display name) of the term list.",(0,r.jsx)(t.br,{}),"\npFieldList is an optional ^-delimited list of fields.",(0,r.jsx)(t.br,{}),'\npPattern is an optional pattern to apply to the "value" field.',(0,r.jsx)(t.br,{}),"\npDescription is the description of the term list.",(0,r.jsx)(t.br,{}),"\npSubjectArea is the optional name of the subject area the term list applies to."]}),"\n",(0,r.jsx)(t.h3,{id:"setvalue",children:"%SetValue"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %SetValue(pTermList As %String, pKey As %String, pValue As %String, pField As %String = "") As %Status\n'})}),"\n",(0,r.jsx)(t.p,{children:"Set a value within the term list pTermList using the given key value. If pField is provided, then set the value of that field."}),"\n",(0,r.jsx)(t.h3,{id:"gettermlistnamefromstream",children:"%GetTermListNameFromStream"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %GetTermListNameFromStream(pFileName As %String, ByRef pTermListName As %String = "") As %Status\n'})}),"\n",(0,r.jsx)(t.h3,{id:"importcsv",children:"%ImportCSV"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ImportCSV(pFileName As %String, ByRef pTermListName As %String = "", pVerbose As %Boolean = 1) As %Status\n'})}),"\n",(0,r.jsxs)(t.p,{children:['Load a TermList from the CSV-file, pFileName. The first value on each line is used as a key value, the second as the "value" field. All other values are ignored unless there is a field list defined. In this case, the field list determines how the values within each record are used.',(0,r.jsx)(t.br,{}),"\nIf pTermListName is supplied, use it. Otherwise use the %%NAME field found in the file.",(0,r.jsx)(t.br,{}),"\nIf pFileName is a stream, then import from it. WAL041 -- pTermListName is returned"]}),"\n",(0,r.jsx)(t.h3,{id:"exportcsv",children:"%ExportCSV"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:'ClassMethod %ExportCSV(pTermList As %String, pFileName As %String = "", pIncludeEncoding As %Boolean = 1) As %Status\n'})}),"\n",(0,r.jsx)(t.p,{children:"Export a TermList to the CSV-file, pFileName. The meta-data for the term list is written to the starting lines of the file using %% as a prefix for key values. + WAL044 -- add pIncludeEncoding; this is not needed in %DeepSee.UI.TermListExport"}),"\n",(0,r.jsx)(t.h3,{id:"writecsvrecord",children:"%WriteCSVRecord"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %WriteCSVRecord(ByRef pRecord, pEncode As %Boolean)\n"})}),"\n",(0,r.jsx)(t.p,{children:"Write out the contents of the integer-indexed array pRecord in csv format. There should be no gaps in the array."}),"\n",(0,r.jsx)(t.h3,{id:"parsecsvrecord",children:"%ParseCSVRecord"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %ParseCSVRecord(pText As %String, Output pValues)\n"})}),"\n",(0,r.jsx)(t.p,{children:"Parse a CSV record and split it into an ordinally index array."}),"\n",(0,r.jsx)(t.h3,{id:"toobj",children:"%ToObj"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %ToObj(pTermList As %String, Output pSC) As %DeepSee.UserLibrary.TermList\n"})}),"\n",(0,r.jsx)(t.h3,{id:"fromobj",children:"%FromObj"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-objectscript-class",children:"ClassMethod %FromObj(pObject As %DeepSee.UserLibrary.TermList) As %Status\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>l});var r=s(96540);const i={},n=r.createContext(i);function a(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);