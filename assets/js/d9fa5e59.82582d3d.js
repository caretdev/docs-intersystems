"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[41545],{49641:(e,l,s)=>{s.r(l),s.d(l,{contentTitle:()=>a,default:()=>d,frontMatter:()=>r,toc:()=>t});var n=s(74848),i=s(28453);const r={pagination_prev:null,pagination_next:null},a="%Library.Storage",t=[{value:"Parameters",id:"parameters",level:2},{value:"SQLENABLED",id:"sqlenabled",level:3},{value:"STORAGECOMPILERCLASS",id:"storagecompilerclass",level:3},{value:"STORAGEINTERFACE",id:"storageinterface",level:3},{value:"IDTYPE;",id:"idtype",level:3},{value:"Methods",id:"methods",level:2},{value:"%BuildIndices",id:"buildindices",level:3},{value:"%DeleteData",id:"deletedata",level:3},{value:"%InitExtentData",id:"initextentdata",level:3},{value:"%KillExtentData",id:"killextentdata",level:3},{value:"%LoadData",id:"loaddata",level:3},{value:"%PurgeIndices",id:"purgeindices",level:3},{value:"%ValidateIndices",id:"validateindices",level:3},{value:"%ValidateTable",id:"validatetable",level:3},{value:"%SaveData",id:"savedata",level:3},{value:"%SQLDelete",id:"sqldelete",level:3},{value:"%SQLDeleteBufferedColumns",id:"sqldeletebufferedcolumns",level:3},{value:"%SQLFastInsert",id:"sqlfastinsert",level:3},{value:"%SQLInsert",id:"sqlinsert",level:3},{value:"%SQLInsertBufferedColumns",id:"sqlinsertbufferedcolumns",level:3},{value:"%SQLUpdate",id:"sqlupdate",level:3},{value:"%SQLAfterTriggers",id:"sqlaftertriggers",level:3},{value:"%SQLAcquireLock",id:"sqlacquirelock",level:3},{value:"%SQLAcquireTableLock",id:"sqlacquiretablelock",level:3},{value:"%SQLBeforeTriggers",id:"sqlbeforetriggers",level:3},{value:"%SQLBuildIndices",id:"sqlbuildindices",level:3},{value:"%SQLBuildPurgeIndexForRow",id:"sqlbuildpurgeindexforrow",level:3},{value:"%SQLBuildPurgeIndices",id:"sqlbuildpurgeindices",level:3},{value:"%SQLCheckUnique",id:"sqlcheckunique",level:3},{value:"%SQLCheckUniqueKeys",id:"sqlcheckuniquekeys",level:3},{value:"%SQLCheckUniqueIndices",id:"sqlcheckuniqueindices",level:3},{value:"%SQLCopyIcolIntoName",id:"sqlcopyicolintoname",level:3},{value:"%SQLCopyNameIntoIcol",id:"sqlcopynameintoicol",level:3},{value:"%SQLCreateInsDelTables",id:"sqlcreateinsdeltables",level:3},{value:"%SQLDefineiDjVars",id:"sqldefineidjvars",level:3},{value:"%SQLDeleteChildren",id:"sqldeletechildren",level:3},{value:"%SQLDeleteTempStreams",id:"sqldeletetempstreams",level:3},{value:"%SQLExists",id:"sqlexists",level:3},{value:"%SQLEExit",id:"sqleexit",level:3},{value:"%SQLFieldValidate",id:"sqlfieldvalidate",level:3},{value:"%SQLFKeyDelLock",id:"sqlfkeydellock",level:3},{value:"%SQLGetLock",id:"sqlgetlock",level:3},{value:"%SQLGetOld",id:"sqlgetold",level:3},{value:"%SQLGetOldAll",id:"sqlgetoldall",level:3},{value:"%SQLGetOldIndex",id:"sqlgetoldindex",level:3},{value:"%SQLicompView",id:"sqlicompview",level:3},{value:"%SQLInsertComputes",id:"sqlinsertcomputes",level:3},{value:"%SQLInsertStreams",id:"sqlinsertstreams",level:3},{value:"%SQLInvalid",id:"sqlinvalid",level:3},{value:"%SQLInvalid2",id:"sqlinvalid2",level:3},{value:"%SQLMissing",id:"sqlmissing",level:3},{value:"%SQLMVDelete",id:"sqlmvdelete",level:3},{value:"%SQLMVIndexDelete",id:"sqlmvindexdelete",level:3},{value:"%SQLMVIndexInsert",id:"sqlmvindexinsert",level:3},{value:"%SQLMVIndexUpdate",id:"sqlmvindexupdate",level:3},{value:"%SQLMVInsert",id:"sqlmvinsert",level:3},{value:"%SQLMVUpdate",id:"sqlmvupdate",level:3},{value:"%SQLnBuild",id:"sqlnbuild",level:3},{value:"%SQLNormalizeCompFields",id:"sqlnormalizecompfields",level:3},{value:"%SQLNormalizeFields",id:"sqlnormalizefields",level:3},{value:"%SQLPurgeIndices",id:"sqlpurgeindices",level:3},{value:"%SQLQuickBulkInsert",id:"sqlquickbulkinsert",level:3},{value:"%SQLQuickBulkLoad",id:"sqlquickbulkload",level:3},{value:"%SQLQuickBulkSave",id:"sqlquickbulksave",level:3},{value:"%SQLQuickBulkUpdate",id:"sqlquickbulkupdate",level:3},{value:"%SQLQuickDelete",id:"sqlquickdelete",level:3},{value:"%SQLQuickDeleteChildren",id:"sqlquickdeletechildren",level:3},{value:"%SQLQuickFindPKeyByRowID",id:"sqlquickfindpkeybyrowid",level:3},{value:"%SQLQuickFindRowIDByPKey",id:"sqlquickfindrowidbypkey",level:3},{value:"%SQLQuickInsert",id:"sqlquickinsert",level:3},{value:"%SQLQuickLoad",id:"sqlquickload",level:3},{value:"%SQLQuickLoadChildren",id:"sqlquickloadchildren",level:3},{value:"%SQLQuickLogicalToOdbc",id:"sqlquicklogicaltoodbc",level:3},{value:"%SQLQuickOdbcToLogical",id:"sqlquickodbctological",level:3},{value:"%SQLQuickUpdate",id:"sqlquickupdate",level:3},{value:"%SQLReleaseLock",id:"sqlreleaselock",level:3},{value:"%SQLReleaseTableLock",id:"sqlreleasetablelock",level:3},{value:"%SQLStorageValidation",id:"sqlstoragevalidation",level:3},{value:"%SQLTrigDelTab",id:"sqltrigdeltab",level:3},{value:"%SQLTrigInsTab",id:"sqltriginstab",level:3},{value:"%SQLUnlockError",id:"sqlunlockerror",level:3},{value:"%SQLUnlock",id:"sqlunlock",level:3},{value:"%SQLUnlock2",id:"sqlunlock2",level:3},{value:"%SQLUnlockRef",id:"sqlunlockref",level:3},{value:"%SQLUpdateComputes",id:"sqlupdatecomputes",level:3},{value:"%SQLUpdateStreams",id:"sqlupdatestreams",level:3},{value:"%SQLValidateCompFields",id:"sqlvalidatecompfields",level:3},{value:"%SQLValidateFields",id:"sqlvalidatefields",level:3}];function c(e){const l={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(l.header,{children:(0,n.jsx)(l.h1,{id:"librarystorage",children:"%Library.Storage"})}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"Class %Library.Storage [ Abstract, Not ProcedureBlock, System = 2 ]\n"})}),"\n",(0,n.jsx)(l.p,{children:"Physical Storage Base Class"}),"\n",(0,n.jsx)(l.h2,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsx)(l.h3,{id:"sqlenabled",children:"SQLENABLED"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"Parameter SQLENABLED = 1;\n"})}),"\n",(0,n.jsx)(l.h3,{id:"storagecompilerclass",children:"STORAGECOMPILERCLASS"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:'Parameter STORAGECOMPILERCLASS = "%Compiler.Storage.Common";\n'})}),"\n",(0,n.jsx)(l.h3,{id:"storageinterface",children:"STORAGEINTERFACE"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:'Parameter STORAGEINTERFACE As STRING [ Constraint = ",persistent,serial", Flags = ENUM ];\n'})}),"\n",(0,n.jsx)(l.p,{children:"STORAGEINTERFACE defines the type of serialization implemented by this class. The value has to match the classtype of the class that is inheriting the serialization interface."}),"\n",(0,n.jsx)(l.h3,{id:"idtype",children:"IDTYPE;"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"Parameter IDTYPE;\n"})}),"\n",(0,n.jsx)(l.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(l.h3,{id:"buildindices",children:"%BuildIndices"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:'ClassMethod %BuildIndices(pIndexList As %RawString = "", pAutoPurge As %Integer = 1, pLockFlag As %Integer = 0, pJournalFlag As %Integer = "", pStartID As %RawString = "", pEndID As %RawString = "", pIgnoreIndexList As %RawString = "") As %Status [ ProcedureBlock = 1, ServerOnly = 0 ]\n'})}),"\n",(0,n.jsx)(l.p,{children:"Builds entries for each index specified in the idxlist argument. If pIndexList is empty then all indices that originate in the class are rebuilt. If no indexes are specified in pIndexList or there are other bitmap indexes specified in pIndexList and there is a bitmap extent index defined for the class and there are currently no entries in the bitmap extent index then it will be implicitly included in pIndexList. If there is an ID range specified in pStartID-pEndID and there are either no indexes specified in pIndexList or if indexes are specified then at least one of them is a bitmap index then the bitmap extent index will be implicitly included in pIndexList. If the bitmap extent index is included then the bitmap extent index for each subextent is also built."}),"\n",(0,n.jsx)(l.p,{children:"If pAutoPurge is true then the indices contained in pIndexList will be purged before they are built as long as no range is specified, if a range is specified we will skip any purge. The default is TRUE (1)."}),"\n",(0,n.jsx)(l.p,{children:"If pLockFlag is one (1) then an extent lock will be acquired before the indices are built. If the lock cannot be acquired then an error is returned. The lock is released after the index build is completed. If it is two (2) then a lock is acquired prior to filing indexes for that instance and it is released as soon the indexes for that instance are filed. If it is zero (0) then no locks are used while filing the indexes. If it is three (3) then it an shared extent lock will be acquired before the indices are build."}),"\n",(0,n.jsx)(l.p,{children:'If pJournalFlag is false then journaling is disabled for the processes used to build the indexes. If this flag is true then the journaling is enabled for the process used to build the indicies. The default value of this argument is "" meaning use the current process setting.'}),"\n",(0,n.jsx)(l.p,{children:"pStartID and pEndID define a range of IDs for which indexes will be built. The range is inclusive. If the starting ID is not passed a non-null value then the range begins at the first ID defined in the extent. If the ending ID is not passed a non-null value then the range ends at the last ID defined in the extent."}),"\n",(0,n.jsx)(l.p,{children:'If pIgnoreIndexList is defined, it should be a $listbuild of index names that should not be built. This argument allows you to build all indices except those defined in pIgnoreIndexList. The default value of this argument is "", which means all indices, or all indices specified in pIndexList, will be built.'}),"\n",(0,n.jsx)(l.p,{children:"If %OnBeforeBuildIndices is implemented and is runnable then it will be called just prior to purging and building any index structures. Refer to %OnBeforeBuildIndices for more information."}),"\n",(0,n.jsx)(l.p,{children:"If %OnAfterBuildIndices is implemented and is runnable then it will be called after all index structures have been built completely. Refer to %OnAfterBuildIndices for more information."}),"\n",(0,n.jsx)(l.p,{children:"Returns a %Status value indicating success or failure. This method is normally generated by the storage class for persistent classes using %Storage.Persistent or %Storage.SQL."}),"\n",(0,n.jsx)(l.p,{children:"If your index is corrupt running this function will not fix the corruption unless you rebuild the entire index and purge the existing indexes. If you have inserted some new items but have deferred building the index for these new items then you can run %BuildIndices on this range oif IDs to add the index entries for these new items."}),"\n",(0,n.jsx)(l.h3,{id:"deletedata",children:"%DeleteData"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %DeleteData(id As %String, concurrency As %Integer) As %Status [ Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.p,{children:"This method is normally generated by the storage class for persistent classes using %Storage.Persistent or %Storage.SQL. Persistent classes using some other storage class, such as %Library.CustomStorage must override this method."}),"\n",(0,n.jsx)(l.h3,{id:"initextentdata",children:"%InitExtentData"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %InitExtentData() As %Status [ Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.p,{children:'%InitExtentData() - Initializes extent data in storage. This method is implemented by the storage class. It simply sets the root node of the data global to ""'}),"\n",(0,n.jsx)(l.h3,{id:"killextentdata",children:"%KillExtentData"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %KillExtentData(killstreams As %Boolean = 0, reinitialize As %Boolean = 0) As %Status [ Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.p,{children:"%KillExtentData() - kills extent data in storage. This method is implemented by the storage class. If killstreams is true (default is false) it will also kill the default stream storage global. If reinitialize is true (default is false) it will also call %InitExtent to re-define the globals."}),"\n",(0,n.jsx)(l.h3,{id:"loaddata",children:"%LoadData"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"Method %LoadData(id As %String) As %Status [ Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.p,{children:"%LoadData() - loads an object from storage. This method is implemented by the storage class."}),"\n",(0,n.jsx)(l.h3,{id:"purgeindices",children:"%PurgeIndices"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:'ClassMethod %PurgeIndices(idxlist As %List = "", lockExtent As %Boolean = 0, pIgnoreIndexList As %RawString = "") As %Status [ ProcedureBlock = 1, ServerOnly = 1 ]\n'})}),"\n",(0,n.jsx)(l.p,{children:"Deletes all entries from each index specified in the idxlist argument. If idxlist is empty then all indices that originate in the class are purged. The index definition remains intact."}),"\n",(0,n.jsx)(l.p,{children:'If pIgnoreIndexList is defined, it should be a $listbuild of index names that should not be purged. This argument allows you to purge all indices except those defined in pIgnoreIndexList. The default value of this argument is "", which means all indices, or all indices specified in pIndexList, will be purged.'}),"\n",(0,n.jsx)(l.p,{children:"Returns a %Status value indicating success or failure. This method is normally generated by the storage class for persistent classes using %Storage.Persistent or %Storage.SQL. Persistent classes using some other storage class, such as %Library.CustomStorage must override this method."}),"\n",(0,n.jsx)(l.h3,{id:"validateindices",children:"%ValidateIndices"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:'ClassMethod %ValidateIndices(idxList As %List = "", autoCorrect As %Boolean = 0, lockOption As %Integer = 1, multiProcess As %Boolean = 1, ByRef mapList As %String, verbose As %Boolean = 1, ByRef errors As %String) As %Status [ ProcedureBlock = 0, ServerOnly = 1 ]\n'})}),"\n",(0,n.jsx)(l.p,{children:"%ValidateIndices() - Validates indices for a class"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.em,{children:"idxList"}),' Optional. "" to check all indices, or specify a $list of index names to check. Default="" ',(0,n.jsx)(l.em,{children:"autoCorrect"})," Optional. If true, correct any errors found. Default=0 ",(0,n.jsx)(l.em,{children:"lockOption"})," Optional. Default = 1 0 - No locking is performed at all 1 - Shared locking as each row is checked 2 - exclusive lock on entire table for duration of the run ",(0,n.jsx)(l.em,{children:"multiProcess"})," Optional. If true, parts of %ValidateIndices will use parallel processing when possible. Default=1 ",(0,n.jsx)(l.em,{children:"verbose"})," Optional. If true, display output to the current device. Default=1 ",(0,n.jsx)(l.em,{children:"errors"})," Optional. Passed by reference. Returns an array of errors found in the index(es) validated. If autoCorrect=1, this is an array of issues corrected."]}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.strong,{children:"Returns:"})}),"\n",(0,n.jsx)(l.p,{children:"Status Code"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.strong,{children:"Example"}),":"]}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsx)(l.li,{children:'Do $SYSTEM.OBJ.ValidateIndices("Sample.Person","",1,2)'}),"\n",(0,n.jsx)(l.li,{children:'Do $SYSTEM.OBJ.ValidateIndices("Sample.Company",$lb("NameIdx"),1,1)'}),"\n"]}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.strong,{children:"Note:"}),":",(0,n.jsx)(l.br,{}),"\nIndices may also be validated by calling the class method ",(0,n.jsx)(l.em,{children:"$SYSTEM.OBJ.ValidateIndices(classname,idxList,autoCorrect,lockOption)"}),".",(0,n.jsx)(l.br,{}),"\nThere is one main difference between validating indices through ",(0,n.jsx)(l.em,{children:"$SYSTEM.OBJ.ValidateIndices()"})," and ",(0,n.jsx)(l.em,{children:"##class(classname).%ValidateIndices()"}),".",(0,n.jsx)(l.br,{}),"\n",(0,n.jsx)(l.em,{children:"$SYSTEM.OBJ.ValidateIndices()"})," will validate the indices for a table, and it will also validate any indices in collection child tables for that table.",(0,n.jsx)(l.br,{}),"\nWhen using ",(0,n.jsx)(l.em,{children:"##class(classname).%ValidateIndices()"}),", collection child table indices must be checked with separate calls.",(0,n.jsx)(l.br,{}),"\nAlso, when calling ",(0,n.jsx)(l.em,{children:"$SYSTEM.OBJ.ValidateIndices()"}),", multiProcess default is 0. When calling ",(0,n.jsx)(l.em,{children:"##class(classname).%ValidateIndices()"}),", multiProcess default is 1."]}),"\n",(0,n.jsx)(l.h3,{id:"validatetable",children:"%ValidateTable"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %ValidateTable(lockOption As %Integer = 1, multiProcess As %Boolean = 1, verbose As %Boolean = 1, ByRef errors As %String) As %Status [ ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.p,{children:"%ValidateTable() - Validates a table's data"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.em,{children:"lockOption"})," Optional. Default = 1 0 - No locking is performed at all 1 - Shared locking as each row is checked 2 - exclusive lock on entire table for duration of the run ",(0,n.jsx)(l.em,{children:"multiProcess"})," Optional. If true, parts of %ValidateIndices will use parallel processing when possible. Default=1 ",(0,n.jsx)(l.em,{children:"verbose"})," Optional. If true, display output to the current device. Default=1 ",(0,n.jsx)(l.em,{children:"errors"})," Optional. Passed by reference. Returns an array of errors found in the index(es) validated. If autoCorrect=1, this is an array of issues corrected."]}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.strong,{children:"Returns:"})}),"\n",(0,n.jsx)(l.p,{children:"Status Code"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.strong,{children:"Example"}),":"]}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsx)(l.li,{children:'Do $SYSTEM.OBJ.ValidateTable("Sample.Person",1,2)'}),"\n",(0,n.jsx)(l.li,{children:'Do $SYSTEM.OBJ.ValidateTable("Sample.Company",1,1)'}),"\n"]}),"\n",(0,n.jsx)(l.h3,{id:"savedata",children:"%SaveData"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"Method %SaveData(id As %String) As %Status [ Private, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.p,{children:"%SaveData() - saves an object to disk, checks uniqueness and referential integrity constraints, and maintains index structures. This method is implemented by the storage class."}),"\n",(0,n.jsx)(l.h3,{id:"sqldelete",children:"%SQLDelete"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLDelete(%rowid, %check, %tstart = 1, %mv = 0, %polymorphic = 0, %bufferedColumns = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.p,{children:"This class just holds stub methods that will be injected into the class definition by the table compiler. No implementation details here."}),"\n",(0,n.jsx)(l.h3,{id:"sqldeletebufferedcolumns",children:"%SQLDeleteBufferedColumns"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLDeleteBufferedColumns(ByRef %bufferedColumns As %Status) As %String [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlfastinsert",children:"%SQLFastInsert"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLFastInsert(%check As %Binary) As %String [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlinsert",children:"%SQLInsert"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLInsert(ByRef %d As %String, %check As %Binary, %inssel, %vco, %tstart = 1, %mv = 0, %bufferedColumns = 0) As %String [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlinsertbufferedcolumns",children:"%SQLInsertBufferedColumns"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLInsertBufferedColumns(ByRef %bufferedColumns As %Status) As %String [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlupdate",children:"%SQLUpdate"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLUpdate(%rowid As %String, %check As %Binary, ByRef %d, %vco, %tstart = 1, %mv = 0, %polymorphic = 0, ByRef %soid As %String, ByRef %bufferedColumns As %String = 0, ByRef %bufferedColumnsDel As %String = 0) As %String [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlaftertriggers",children:"%SQLAfterTriggers"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLAfterTriggers() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlacquirelock",children:"%SQLAcquireLock"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLAcquireLock(%rowid As %String, s As %Boolean = 0, ByRef unlockref As %String = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlacquiretablelock",children:"%SQLAcquireTableLock"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:'ClassMethod %SQLAcquireTableLock(s As %Boolean = 0, ByRef SQLCODE As %Integer, to As %Integer = "") [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n'})}),"\n",(0,n.jsx)(l.h3,{id:"sqlbeforetriggers",children:"%SQLBeforeTriggers"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLBeforeTriggers() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlbuildindices",children:"%SQLBuildIndices"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:'ClassMethod %SQLBuildIndices(pIndices As %List = "", pLockFlag As %Integer = 0, pStartID As %RawString = "", pEndID As %RawString = "", pIgnoreIndexList As %RawString = "", pKeepSelectability As %Integer = 0) As %Status [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n'})}),"\n",(0,n.jsx)(l.h3,{id:"sqlbuildpurgeindexforrow",children:"%SQLBuildPurgeIndexForRow"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:'ClassMethod %SQLBuildPurgeIndexForRow(pIndices As %List = "", pActions As %RawString = "BP", pLockRow As %Integer = 1, ByRef %d As %RawString, ByRef %e As %RawString, pIgnoreIndexList As %RawString = "") As %Status [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n'})}),"\n",(0,n.jsx)(l.p,{children:'%SQLBuildPurgeIndexForRow - given a list of indices (or all by default), an ID, and new and old values, purge and build the index entries for the row pIndices - $listbuild of index map names to purge/build. Default is "" and means purge/build all indices pActions - A string of action characters to perform. If pActions["P", the old index entries will be Purged/Deleted. If pActions["B", the new index entries will be Built/Defined. The default is pActions="BP". This can be overridden to provide a way to just Purge a row\'s index entries (delete) or to define a row\'s index entries (Insert). Any other characters in pActions besides "B" or "P" are ignored. pLockRow - 1/0 flag, default=1, 1 means acquire an exclusive, long-term lock on the row. 0 means no lock is acquired. %d() - Array subscripted by SqlColumnNumber which holds new values for indexed entries to be built %e() - Array subscripted by SqlColumnNumber which holds old values for indexed entries to be purged pIgnoreIndexList - $listbuild of index map names to not purge/build. Can be used in conjuction with pIndices to purge/build all indices except thise list. Default is "".'}),"\n",(0,n.jsx)(l.h3,{id:"sqlbuildpurgeindices",children:"%SQLBuildPurgeIndices"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:'ClassMethod %SQLBuildPurgeIndices(pIndices As %List = "", pBuild As %Boolean, pLockFlag As %Integer = 0, pStartID As %RawString = "", pEndID As %RawString = "", pIgnoreIndexList As %RawString = "") As %Status [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n'})}),"\n",(0,n.jsx)(l.h3,{id:"sqlcheckunique",children:"%SQLCheckUnique"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLCheckUnique(pFromOrig As %Boolean = 0, %pID As %String, %pVals... As %String) As %Status [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlcheckuniquekeys",children:"%SQLCheckUniqueKeys"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLCheckUniqueKeys(pConNumber As %Integer, pFromOrig As %Boolean = 0, pUpdate As %Boolean = 0, pVals... As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlcheckuniqueindices",children:"%SQLCheckUniqueIndices"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLCheckUniqueIndices(pIndices As %List, ByRef pOK As %Boolean) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlcopyicolintoname",children:"%SQLCopyIcolIntoName"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLCopyIcolIntoName() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlcopynameintoicol",children:"%SQLCopyNameIntoIcol"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLCopyNameIntoIcol() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlcreateinsdeltables",children:"%SQLCreateInsDelTables"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLCreateInsDelTables(ByRef pInsTrigObj As %String, ByRef pDelTrigObj As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqldefineidjvars",children:"%SQLDefineiDjVars"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLDefineiDjVars(ByRef %d As %String, ByRef subs As %String, master As %Boolean) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqldeletechildren",children:"%SQLDeleteChildren"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLDeleteChildren(%parent As %String, %check As %String, ByRef sqlcode As %Integer) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqldeletetempstreams",children:"%SQLDeleteTempStreams"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLDeleteTempStreams() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlexists",children:"%SQLExists"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLExists(pLockOnly As %Boolean = 0, ByRef pUnlockRef As %String, %pVal... As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqleexit",children:"%SQLEExit"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLEExit() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlfieldvalidate",children:"%SQLFieldValidate"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLFieldValidate() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlfkeydellock",children:"%SQLFKeyDelLock"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLFKeyDelLock() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlgetlock",children:"%SQLGetLock"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLGetLock(pRowId As %String, pShared As %Boolean = 0, ByRef pUnlockRef As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlgetold",children:"%SQLGetOld"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLGetOld(%rowid As %String, ByRef %d As %String, ByRef %e As %String, ByRef sqlcode As %Integer) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlgetoldall",children:"%SQLGetOldAll"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLGetOldAll() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlgetoldindex",children:"%SQLGetOldIndex"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:'ClassMethod %SQLGetOldIndex(%rowid As %String, ByRef %e As %String, ByRef pF As %String = 0, ByRef sqlcode As %Integer, ByRef %buffervector As %String = 0, fld As %Integer = "") [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n'})}),"\n",(0,n.jsx)(l.h3,{id:"sqlicompview",children:"%SQLicompView"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLicompView() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlinsertcomputes",children:"%SQLInsertComputes"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLInsertComputes(view As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlinsertstreams",children:"%SQLInsertStreams"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLInsertStreams(pVal As %String, pClassname As %String, pProperty As %String, pField As %String, pChangeEmptyToNull As %Boolean, pOIDType As %Boolean, ByRef sqlcode As %Integer, ByRef %msg As %String) [ Internal, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlinvalid",children:"%SQLInvalid"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLInvalid(pIcol As %Integer, pVal As %String) As %Integer [ Internal, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlinvalid2",children:"%SQLInvalid2"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLInvalid2(ficol As %Integer, val As %String, char As %String) [ Internal, ProcedureBlock = 1, PublicList = sqlcode, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlmissing",children:"%SQLMissing"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLMissing(fname As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlmvdelete",children:"%SQLMVDelete"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLMVDelete(oref As %Binary, flags As %String, %rowid As %String, oldrec As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlmvindexdelete",children:"%SQLMVIndexDelete"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLMVIndexDelete(ByRef %e As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlmvindexinsert",children:"%SQLMVIndexInsert"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLMVIndexInsert(ByRef %d As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlmvindexupdate",children:"%SQLMVIndexUpdate"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLMVIndexUpdate(ByRef %d As %String, ByRef %e As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlmvinsert",children:"%SQLMVInsert"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLMVInsert(oref As %Binary, flags As %String, %rowid As %String, newrec As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlmvupdate",children:"%SQLMVUpdate"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLMVUpdate(oref As %Binary, flags As %String, %rowid As %String, newrec As %String, oldrec As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlnbuild",children:"%SQLnBuild"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLnBuild() [ Internal, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlnormalizecompfields",children:"%SQLNormalizeCompFields"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLNormalizeCompFields() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlnormalizefields",children:"%SQLNormalizeFields"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLNormalizeFields() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlpurgeindices",children:"%SQLPurgeIndices"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:'ClassMethod %SQLPurgeIndices(pIndices As %List = "", pLockExtent As %Boolean = 0, pIgnoreIndexList As %RawString = "") [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n'})}),"\n",(0,n.jsx)(l.h3,{id:"sqlquickbulkinsert",children:"%SQLQuickBulkInsert"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLQuickBulkInsert(%nolock As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlquickbulkload",children:"%SQLQuickBulkLoad"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLQuickBulkLoad(%rowidlist As %List, %nolock As %Boolean = 0, pkey As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlquickbulksave",children:"%SQLQuickBulkSave"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLQuickBulkSave(%nolock As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlquickbulkupdate",children:"%SQLQuickBulkUpdate"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLQuickBulkUpdate(%nolock As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlquickdelete",children:"%SQLQuickDelete"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLQuickDelete(%rowid As %String, %nolock As %Boolean = 0, pkey As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlquickdeletechildren",children:"%SQLQuickDeleteChildren"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLQuickDeleteChildren(%parent As %String, %nolock As %Boolean = 0, pkey As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlquickfindpkeybyrowid",children:"%SQLQuickFindPKeyByRowID"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLQuickFindPKeyByRowID(%rowid As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlquickfindrowidbypkey",children:"%SQLQuickFindRowIDByPKey"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLQuickFindRowIDByPKey(pPKey As %String, pOutput As %Boolean = 1, pInternal As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlquickinsert",children:"%SQLQuickInsert"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLQuickInsert(ByRef d As %String, %nolock As %Boolean = 0, pkey As %Boolean = 0, parentpkey As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlquickload",children:"%SQLQuickLoad"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLQuickLoad(%rowid As %List, %nolock As %Boolean = 0, pkey As %Boolean = 0, qq As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlquickloadchildren",children:"%SQLQuickLoadChildren"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLQuickLoadChildren(%parref As %List, %nolock As %Boolean = 0, pkey As %Boolean = 0, returnpkey As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlquicklogicaltoodbc",children:"%SQLQuickLogicalToOdbc"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLQuickLogicalToOdbc(ByRef %d As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlquickodbctological",children:"%SQLQuickOdbcToLogical"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLQuickOdbcToLogical(ByRef %d As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlquickupdate",children:"%SQLQuickUpdate"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLQuickUpdate(%rowid As %String, ByRef d As %String, %nolock As %Boolean = 0, pkey As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlreleaselock",children:"%SQLReleaseLock"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:'ClassMethod %SQLReleaseLock(%rowid As %String, s As %Boolean = 0, i As %Boolean = 0, e As %Boolean = "") [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n'})}),"\n",(0,n.jsx)(l.h3,{id:"sqlreleasetablelock",children:"%SQLReleaseTableLock"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLReleaseTableLock(s As %Boolean = 0, i As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlstoragevalidation",children:"%SQLStorageValidation"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLStorageValidation() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqltrigdeltab",children:"%SQLTrigDelTab"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLTrigDelTab() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqltriginstab",children:"%SQLTrigInsTab"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLTrigInsTab() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlunlockerror",children:"%SQLUnlockError"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLUnlockError(cname As %String) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlunlock",children:"%SQLUnlock"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLUnlock() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlunlock2",children:"%SQLUnlock2"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLUnlock2() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlunlockref",children:"%SQLUnlockRef"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLUnlockRef() [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlupdatecomputes",children:"%SQLUpdateComputes"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLUpdateComputes(view As %Boolean = 0) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlupdatestreams",children:"%SQLUpdateStreams"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLUpdateStreams(pNew As %String, pOld As %String, pClassname As %String, pProperty As %String, pField As %String, pChangeEmptyToNull As %Boolean, pOIDType As %Boolean, ByRef sqlcode As %Integer, ByRef %msg As %String, pAllowOid As %Boolean = 0) [ Internal, ProcedureBlock = 1, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlvalidatecompfields",children:"%SQLValidateCompFields"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLValidateCompFields(ByRef sqlcode As %Integer) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})}),"\n",(0,n.jsx)(l.h3,{id:"sqlvalidatefields",children:"%SQLValidateFields"}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-objectscript-class",children:"ClassMethod %SQLValidateFields(ByRef sqlcode As %Integer) [ Internal, ProcedureBlock = 0, ServerOnly = 1 ]\n"})})]})}function d(e={}){const{wrapper:l}={...(0,i.R)(),...e.components};return l?(0,n.jsx)(l,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},28453:(e,l,s)=>{s.d(l,{R:()=>a,x:()=>t});var n=s(96540);const i={},r=n.createContext(i);function a(e){const l=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function t(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:l},e.children)}}}]);