"use strict";(self.webpackChunkdocs_intersystems=self.webpackChunkdocs_intersystems||[]).push([[80966],{11719:(e,r,s)=>{s.r(r),s.d(r,{contentTitle:()=>i,default:()=>l,frontMatter:()=>a,toc:()=>o});var t=s(74848),n=s(28453);const a={pagination_prev:null,pagination_next:null},i="%ZEN.TreeUtils",o=[{value:"Parameters",id:"parameters",level:2},{value:"DOMAIN",id:"domain",level:3},{value:"Methods",id:"methods",level:2},{value:"ClassTree",id:"classtree",level:3},{value:"PropertyTree",id:"propertytree",level:3},{value:"TimePeriodTree",id:"timeperiodtree",level:3},{value:"%BuildTreeFromList",id:"buildtreefromlist",level:3}];function d(e){const r={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"zentreeutils",children:"%ZEN.TreeUtils"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"Class %ZEN.TreeUtils Extends %RegisteredObject [ Deprecated, System = 2 ]\n"})}),"\n",(0,t.jsx)(r.p,{children:"This class contains methods that can be used to construct common tree structures for use with the %ZEN.Component.dynaTree component."}),"\n",(0,t.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(r.h3,{id:"domain",children:"DOMAIN"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:'Parameter DOMAIN = "%ZEN";\n'})}),"\n",(0,t.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(r.h3,{id:"classtree",children:"ClassTree"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod ClassTree(pRoot As %String, Output pTree, ByRef pParms) As %Status\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Create a tree based on the packages and classes visible in the current namespace.",(0,t.jsx)(r.br,{}),'\nEach node has a value with a ".pkg" or ".cls" suffix.',(0,t.jsx)(r.br,{}),'\npRoot is "" when called for the top-level. Otherwise it contains the package name of the parent node.',(0,t.jsx)(r.br,{}),"\npParms can contain the following:",(0,t.jsx)(r.br,{}),'\npParms("system") = 0 | 1 control whether % items are displayed.']}),"\n",(0,t.jsx)(r.h3,{id:"propertytree",children:"PropertyTree"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod PropertyTree(pRoot As %String, Output pTree, ByRef pParms) As %Status\n"})}),"\n",(0,t.jsx)(r.p,{children:"Return the set of properties within a given class."}),"\n",(0,t.jsx)(r.h3,{id:"timeperiodtree",children:"TimePeriodTree"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod TimePeriodTree(pRoot As %String, Output pTree, ByRef pParms, pTopNode As %Integer = 0) As %Status\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Create a tree containing time periods.",(0,t.jsx)(r.br,{}),"\nThe contents of the tree are specified by values within the pParms array:",(0,t.jsx)(r.br,{}),'\npParms("spec") - A comma-delimited list that controls the hierarchy of time periods. This can contain Y(ear), Q(uarter), M(onth), W(eek), D(ay). For example: "Y,Q,M" will show years, quarters, and months.',(0,t.jsx)(r.br,{}),"\nThe time period of the tree can be controlled using:",(0,t.jsx)(r.br,{}),'\npParms("startYear") - starting year for year periods (default is current year)',(0,t.jsx)(r.br,{}),'\npParms("endYear") - end year for year periods (default is startYear)',(0,t.jsx)(r.br,{}),'\npParms("startMonth") - starting month (1-12) for month periods (default is 1)',(0,t.jsx)(r.br,{}),'\npParms("endMonth") - ending month (1-12) for month periods (default is 12)',(0,t.jsx)(r.br,{}),'\npParms("startQuarter") - starting quarter (1-4) for quarter periods (default is 1)',(0,t.jsx)(r.br,{}),'\npParms("endQuarter") - ending quarter (1-4) for quarter periods (default is 4)',(0,t.jsx)(r.br,{}),'\npParms("startWeek") - starting week (1-52) for week periods (default is 1)',(0,t.jsx)(r.br,{}),'\npParms("endWeek") - ending week (1-52) for week periods (default is 52)',(0,t.jsx)(r.br,{}),'\npParms("startDay") - starting day for day periods (default is 1)',(0,t.jsx)(r.br,{}),'\npParms("endDay") - ending day for day periods. Interpretation of this value depends on how days are displayed (yearly, weekly, etc.)']}),"\n",(0,t.jsxs)(r.p,{children:["When years are not displayed, the startYear is used to provide the year portion of date values.",(0,t.jsx)(r.br,{}),"\nThe logical value of nodes an indicator followed ODBC format date:",(0,t.jsx)(r.br,{}),'\n"Y 2007", "M 2007-03", etc.',(0,t.jsx)(r.br,{}),"\nFor weeks and quarters the starting month or day of the period is used.",(0,t.jsx)(r.br,{}),"\nWeeks are not supported at this time."]}),"\n",(0,t.jsx)(r.h3,{id:"buildtreefromlist",children:"%BuildTreeFromList"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-objectscript-class",children:"ClassMethod %BuildTreeFromList(pList As %List, ByRef pTree, pTopNode As %Integer = 0) [ Internal ]\n"})}),"\n",(0,t.jsxs)(r.p,{children:["This is an internal method used for testing.",(0,t.jsx)(r.br,{}),"\nTake a $List containing a nested set of node names and create a tree from it that can be used as an AXIS definition:",(0,t.jsx)(r.br,{}),"\nThe list is of the form: $LB(parent,children,parent,children) where *children* is a list of child nodes, if any. For example:",(0,t.jsx)(r.br,{}),'\n$LB("Node1","Node2",)',(0,t.jsx)(r.br,{}),'\n$LB("Fruit",$LB("Apple","Banana"))']})]})}function l(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>o});var t=s(96540);const n={},a=t.createContext(n);function i(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);