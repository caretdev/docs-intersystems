/// Home page for the Interoperability Management Portal.
/// If the current user holds the %Admin_Secure resource, then this page
/// can be used to view and define custom resources.
Class %CSP.Portal.Home Extends %ZEN.Portal.standardPage [ System = 4 ]
{

/// Home favorite icon.
Parameter FAVORITEICON As COSEXPRESSION = "$$$ISCFAVORITEICON";

/// Set this to the appropriate application class.
Parameter APPLICATION = "%ZEN.Portal.Application";

/// Set this to the correct domain.
Parameter DOMAIN = "%Utility";

/// Name of this page.
Parameter PAGENAME = "Home";

/// If true, register visits to this page in the recent list.
Parameter RECENT = 0;

/// Specifies the SameSite flag as strict, lax, or none. Set based on the current
/// session's SessionScope setting and applied to all cookies generated by this page.
///
Property cookieSameSite As %ZEN.Datatype.string [ InitialExpression = "strict" ];

/// If HTTPS is enabled, set to 1 (true). Otherwise remains 0 (false). If true,
/// the "secure" flag is applied to all cookies generated by this page.
///
Property cookieSecure As %ZEN.Datatype.integer [ InitialExpression = 0 ];

/// Indicates the id of which item is selected in the selector pane (on the left).
Property currItemId As %ZEN.Datatype.string [ InitialExpression = "HOME" ];

/// Number of items in the selector pane (this is automatically computed).
Property itemCount As %ZEN.Datatype.integer;

/// If true, then show this page in a special mode where the user can assign resources.
/// User must hold %Admin_Secure for this to be enabled.
Property resourceMode As %ZEN.Datatype.boolean;

Property btnGo As %ZEN.Datatype.caption [ InitialExpression = {$$$Text("Go")} ];

/// Index of current item in search dropdown.
Property currDropdownIndex As %ZEN.Datatype.integer;

/// Used by search box to track link of selected item.
Property searchLink As %ZEN.Datatype.string;

/// Used by search box to track current active element.
Property clickElement As %ZEN.Datatype.string;

Property clickSrc As %ZEN.Datatype.string;

/// If true, the the "Home" page needs to be refreshed to see new favorites.
Property homeChanged As %ZEN.Datatype.boolean [ InitialExpression = 0 ];

/// Hash of current login user name.
Property hashedUsername As %ZEN.Datatype.string;

/// Current $NAMESPACE. This is the namespace user seleccted from the Switch namespace dialog and will be used in navigate().
Property NAMESPACE As %ZEN.Datatype.string;

/// This gets computed on after page create
Property HSHomePage As %String(MAXLEN = 256);

/// Name of the current namespace (from $namespace).
Property NSNAME As %ZEN.Datatype.string;

/// If it is 1, it indicates that user clicked the "Home" link in small menu link then show "Home" selector.
Property isGoHome As %ZEN.Datatype.boolean(ZENURL = "isGoHome") [ InitialExpression = 0 ];

Property IsEnsembleInstalled As %ZEN.Datatype.boolean [ InitialExpression = {##class(%Library.EnsembleMgr).IsEnsembleInstalled()} ];

Property IsHealthShareInstalled As %ZEN.Datatype.boolean [ InitialExpression = {##class(%Library.EnsembleMgr).IsHealthShareInstalled()} ];

Property InstanceGUID As %String [ InitialExpression = {##class(%SYS.System).InstanceGUID()} ];

Property PRODUCT1 As %String [ InitialExpression = {$$$PRODUCT1} ];

Property PRODUCT2 As %String [ InitialExpression = {$$$PRODUCT2} ];

XData CSS3Style
{
}

XData Style
{
}

XData contentPane [ XMLNamespace = "http://www.intersystems.com/zen" ]
{
}

/// This method is called when user clicked "Go" after selecting a menu item. The url may be reconstructed based on where you are going.<br/>
/// For example, if you are going to an production-enabled namespace, the url will become /csp/ensnamespace/...
ClassMethod CheckURL(pURL, pNAMESPACE) As %String [ ZenMethod ]
{
}

/// Return the array of links to show in the locator bar.<br/>
/// pLink(n)=$LB(caption,link)
Method %GetLocatorLinks(Output pLink) As %Status
{
}

/// This class method callback is called just before the server-side page
/// object is created.
Method %OnAfterCreatePage() As %Status
{
}

/// Get the (localized) title string for the page.
/// This should be implemented in a subclass.
Method %OnGetTitle() As %String
{
}

/// Get the (localized) name of the page.
/// This should be implemented in a subclass.
Method %OnGetPageName() As %String
{
}

/// Get information to display in the ribbon bar.
Method OnGetRibbonInfo(Output pDisplay As %Boolean, Output pViewIcons As %List, Output pSortOptions As %List, Output pSearchBox As %Boolean, Output pRibbonTitle As %String) As %Status
{
}

/// This is called in the middle of rendering the tool ribbon.
Method OnDrawRibbon() As %Status
{
}

/// CollectDisable is a helper method for <METHOD>DrawSelector</METHOD>.<br>
/// This method builds the menu tree to check it for any access.<br>
/// If none of the branches can be navigated, we want to disable the primary menu item.<br>
/// pData is menu metadata.<br>
/// This method returns 1 if all subpages are disabled.<br>
/// <EXAMPLE>Set tDisabled=..CollectDisable(.tData)</EXAMPLE>
Method CollectDisable(Output pData) As %Boolean
{
}

/// Draw content of the selector pane.
Method DrawSelector(pSeed As %String) As %Status
{
}

/// Provide the source data (as an array) that will drive the finder.
Method GetFinderArray(ByRef pParameters, Output pMetaData, Output pData) As %Status
{
}

/// Check resources for each item in the menu array.
Method %CheckResources(ByRef pData) As %Status [ Internal ]
{
}

/// Provide finder contents for the System Config pages.
Method GetSystemConfigArray(Output pData) As %Status
{
}

/// Provide finder contents for the System Explorer pages.
Method GetSystemExplorerArray(Output pData) As %Status
{
}

/// Provide finder contents for the System Operator pages.
Method GetSystemOperationArray(Output pData) As %Status
{
}

/// Provide finder contents for the Interoperability pages.
Method GetEnsembleArray(Output pData) As %Status
{
}

/// Provide finder contents for the DeepSee pages.
Method GetDeepSeeArray(Output pData) As %Status
{
}

/// Provide finder contents for the HealthShare pages.
Method GetHealthShareArray(Output pData) As %Status
{
}

/// Provide HTML for details on selected item in finder.
ClientMethod drawDetails(item, finder, index) [ Language = javascript ]
{
}

/// Provide HTML for empty finder.
ClientMethod drawEmptyFinder(item) [ Language = javascript ]
{
}

/// Provide HTML to select a namespace.
ClientMethod getNamespaceHTML(cat) [ Language = javascript ]
{
}

/// Item selected within the Finder.
ClientMethod itemSelected(item) [ Language = javascript ]
{
}

/// Item double-clicked within the Finder.
ClientMethod itemDoubleClick(item) [ Language = javascript ]
{
}

/// Item selected within the Selector.
ClientMethod selectCategory(cat) [ Language = javascript ]
{
}

/// Adjust sizes of components on the page.
ClientMethod onlayoutHandler(load) [ Language = javascript ]
{
}

ClientMethod thisnew() [ Language = javascript ]
{
}

/// Set size of selector to big (true) or small (false).
ClientMethod makeSelectorBig(flag) [ Language = javascript ]
{
}

/// Navigate to a new page in the portal.
ClientMethod navigate(url) [ Language = javascript ]
{
}

/// Do the actual work of updating the view to match the current sort mode.
ClientMethod setSortModeHandler(mode) [ Language = javascript ]
{
}

/// Given a security resource, this method returns 1 if user has privilege, and 0 if the user does not security privilege for using a particular function.
ClassMethod CheckSecurity(pResource As %String) As %Boolean
{
}

/// Draw content of the splash pane.
Method DrawSplashContent(pSeed As %String) As %Status
{
}

/// Draw the did you know box.
Method %DrawDidYouKnow() As %Status
{
}

/// Draw the favorites box.
Method %DrawFavorites() As %Status
{
}

/// Draw the recent items list.
Method %DrawRecent() As %Status
{
}

/// Draw the Links list.
Method %DrawLinks() As %Status
{
}

/// Draw contents of one options box (favorites or recent).
Method %DrawOptionsBox(pTitle As %String, pSubtitle As %String, ByRef pOptions As %List, pWhich As %String = "") As %Status
{
}

ClientMethod addFavorite(name, url, link) [ Language = javascript ]
{
}

/// Add item to favorites list.
ClassMethod AddToFavorites(pName As %String, pURL As %String, pLink As %String) As %Boolean [ ZenMethod ]
{
}

/// Remove the given item from its list.
ClientMethod removeItem(which, name) [ Language = javascript ]
{
}

/// Remove a recent item from the list.
ClassMethod RemoveRecent(pName As %String) As %Boolean [ ZenMethod ]
{
}

/// Remove a favorite item from the list.
ClassMethod RemoveFavorite(pName As %String) As %Boolean [ ZenMethod ]
{
}

/// Return localized "did you know" message.
ClassMethod %GetDidYouKnowText() As %String
{
}

/// Toggle resource edit mode.
ClientMethod toggleResourceMode(iscb) [ Language = javascript ]
{
}

/// Launch the assign resource dialog.
ClientMethod assignResource(name, link) [ Language = javascript ]
{
}

/// This client event is fired when the a popup page launched from this page fires an action.
ClientMethod onPopupAction(popupName, action, value) [ Language = javascript ]
{
}

/// Save current state into cookie so when page is refreshed it goes back to the last selection.<br/>
/// This method is called from navigate()and onPopupAction() for case switchNamespace
ClientMethod saveState() [ Language = javascript ]
{
}

/// This method clears the 'state' cookie which indicates the last selection for the finderPane position on the SMP portal home.
ClientMethod clearState() [ Language = javascript ]
{
}

/// Go to the home page.
ClientMethod goHome() [ Language = javascript ]
{
}

/// Change in search box value. Can be overridden by subclasses.
ClientMethod searchBoxHandler(searchKey) [ Language = javascript ]
{
}

/// Hide/show search results.
ClientMethod showSearchResults(flag) [ Language = javascript ]
{
}

/// Draw contents of the search results panel.
Method DrawSearchResults(pSeed As %String) As %Status
{
}

/// Return an array of search results:
/// pResults(n) = $LB(name,url,title)
Method %GetSearchResults(pSearchKey As %String, Output pResults As %List)
{
}

/// Walk down array; find elements containing search key.
Method %ApplySearchToArray(pSearchKey As %String, ByRef pArray, Output pResults As %List)
{
}

/// Do the actual work of updating the view to match the current view mode.
ClientMethod setViewModeHandler(mode, oldmode) [ Language = javascript ]
{
}

/// Display the search results drop down.
ClientMethod showSearchDropdown() [ Language = javascript ]
{
}

/// Display the search results drop down.
ClientMethod hideSearchDropdown() [ Language = javascript ]
{
}

/// Start the search timer.
ClientMethod startSearchTimer() [ Language = javascript ]
{
}

/// Stop the search timer.
ClientMethod clearSearchTimer() [ Language = javascript ]
{
}

/// Action for search timer.
ClientMethod searchTimerHandler() [ Language = javascript ]
{
}

/// Key down in search box (override).
ClientMethod searchKeyDown(evt) [ Language = javascript ]
{
}

/// Key press in search box (override).
ClientMethod searchKeyPress(evt) [ Language = javascript ]
{
}

/// Focus event in search box.
ClientMethod searchFocus(evt) [ Language = javascript ]
{
}

/// Blur event in search box.
ClientMethod searchBlur(evt) [ Language = javascript ]
{
}

ClientMethod setClickElementClass(e) [ Language = javascript ]
{
}

ClientMethod dropDownClick(evt) [ Language = javascript ]
{
}

/// Go to prev item in search box dropdown.
ClientMethod searchBoxUp() [ Language = javascript ]
{
}

/// Go to next item in search box dropdown.
ClientMethod searchBoxDown() [ Language = javascript ]
{
}

/// Draw contents of the search results dropdown.
Method DrawSearchDropDown(pSeed As %String) As %Status
{
}

ClientMethod updateMessagePanel(timer) [ Language = javascript ]
{
}

/// Draw contents of the message panel.
Method DrawMessagePanel(pSeed As %String) As %Status
{
}

/// Generic method to get a cookie value. cookieName is the name, e.g. "state", cookieString is document.cookie.
ClientMethod getCookieValue(cookieName, cookieString) As %String [ Language = javascript ]
{
}

/// Generic method to set a cookie name and value pair.<br>
/// The expiration date is set to 2020 which is the same as in generic SMP pages, which should be changed before end of 2020.
ClientMethod setCookieValue(cookieName, cookieValue) As %String [ Language = javascript ]
{
}

/// Change to a new namespace.
ClientMethod changeNamespace(ns) [ Language = javascript ]
{
}

/// Populate the client-size zenPage._nsList array
/// with a list of available namespace and flags to indicate whether
/// each is production- and Analytics-enabled.
ClassMethod GetNamespaceList() As %String [ ZenMethod ]
{
}

ClientMethod enableMirroring() [ Language = javascript ]
{
}

ClientMethod enableSharding() [ Language = javascript ]
{
}

/// Zen page notification of an HTTP request. This method can be overwritten
/// by subclasses.<br/>
/// This is called <em>before</em> the standard Zen pre-HTTP processing occurs.
ClassMethod %OnPreHTTP() As %Boolean [ ServerOnly = 1 ]
{
}

/// Hash current login username
ClassMethod HashUsername() As %String
{
}

}
