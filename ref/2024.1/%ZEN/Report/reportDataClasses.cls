Class %ZEN.Report.reportDataClasses Extends %RegisteredObject [ Deprecated, System = 4 ]
{

/// package.classname for ZEN Report
Property ZenReport As %String;

/// package where data classes generated by generateDataClasses will be stored
Property DataPackage As %String;

/// package where generated Web Service will be generated
Property WebServicePackage As %String;

/// SOAP Namespace for the WebService
Property Namespace As %String [ InitialExpression = "http://tempuri.org" ];

/// Namespaces of referenced classes will be used in the WSDL.
Property UseClassNamespaces As %Boolean [ InitialExpression = 1 ];

/// internal properties
Property ZenReportName As %String [ Internal ];

Method generateWebService() As %Status
{
}

Method generateWebServiceShell(pReportName As %String)
{
}

/// generate data classes that correspond to the ZEN Report's exported string
Method generateDataClasses() As %Status
{
}

ClassMethod CreateParameter(className As %String, Name As %String, Default As %String) As %Status [ Internal ]
{
}

Method writeDataClasses(pCompiledClass As %Dictionary.CompiledClass, pReport As %ZEN.Report.report) As %Status [ Internal ]
{
}

Method writeGroupDataClasses(parentName As %String, pGroup As %ZEN.Report.group) As %Status [ Internal ]
{
}

ClassMethod CreateChildProperty(classdef As %Dictionary.ClassDefinition, parentName As %String, childName As %String, pkg As %String, sequenceNumber As %Integer) [ Internal ]
{
}

ClassMethod CreateProperty(classdef As %Dictionary.ClassDefinition, propName As %String, xmlProjection As %String, sequenceNumber As %Integer) [ Internal ]
{
}

ClassMethod CreateParentProperty(classdef As %Dictionary.ClassDefinition, parentName As %String, childName As %String, pkg As %String, sequenceNumber As %Integer) [ Internal ]
{
}

Method CreateAdapterClass(className As %String, ByRef classdef As %Dictionary.ClassDefinition) As %Status
{
}

ClassMethod SaveClass(classdef As %Dictionary.ClassDefinition) As %Status [ Internal ]
{
}

ClassMethod CompileClass(classdef As %Dictionary.ClassDefinition) As %Status [ Internal ]
{
}

ClassMethod SaveAndCompileClass(classdef As %Dictionary.ClassDefinition) As %Status [ Internal ]
{
}

ClassMethod IsSQLWord(name As %String) As %Boolean [ Internal ]
{
}

}
