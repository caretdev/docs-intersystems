/// %Api.Atelier.v1 provides version 1 APIs for Atelier
Class %Api.Atelier.v1 Extends %Atelier.REST
{

XData UrlMap [ XMLNamespace = "http://www.intersystems.com/urlmap" ]
{
}

/// This method returns the text for the named document and namespace.
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 304 if the document has not been modified (see https://en.wikipedia.org/wiki/HTTP_ETag)
/// <br/>HTTP 400 if the named resource is not a valid document name
/// <br/>HTTP 404 if the document does not exist
/// <br/>HTTP 500 if an unxpected error occurs (details will be in status error array)
/// <br/>
/// <br/>Return content will contain a document object.
/// <br/>Errors pertaining to the document will be in the status property of the document object.
/// If source control hooks are enabled for the namespace any console output generated by the hook
/// will be captured and returned as an array of lines in the 'console' array.
/// <br/>
/// <br/>The result contains the name of the requested file, the database where it is stored, its
/// timestamp and category (CLS - class, RTN -routine, CSP - csp file, OTH - other), as well as
/// the document contents which are returned in an array.
/// <br/>
/// <br/>For text files this will be an array of strings and the 'enc' json field will be set to false.
/// <br/>For binary files this will be an array of base64 encoded chunks and the 'enc' field will be set to true.
/// <br/>
/// <br/>The URL parameter ?binary=1 can be passed to force the document to be encoded as binary.
/// <br/>
/// <br/>The URL parameter ?storageOnly=1 can be passed to return only the storage portion of a class.
/// <br/>
/// <br/>If a 'soft' error occurs such as a 'document does not exist', additional information can be found in
/// the 'status' field of the result. Examples of other soft errors are 'file is locked' etc.
/// <br/>
/// <br/>Here is an example of the result of asking for %Activate.Enum.cls
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [],
///   "result": {
///     "name": "%Activate.Enum.cls",
///     "db": "IRISLIB",
///     "ts": "2016-01-04 14:00:04.000",
///     "cat": "CLS",
///     "status": "",
///     "enc": false,
///     "content": [
///       "/// This class is the superclass for all enumerated types generated from",
///       "/// a type library",
///       "Class %Activate.Enum Extends %Integer [ Not ProcedureBlock, System = 3 ]",
///       "{",
///       "",
///       "}",
///       ""
///     ]
///   }
/// }
/// </pre>
/// <br/>
/// <br/>and here is the result with ?binary=1
/// <br/>
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [],
///   "result": {
///     "name": "%Activate.Enum.cls",
///     "db": "IRISLIB",
///     "ts": "2016-01-04 14:00:04.000",
///     "cat": "CLS",
///     "status": "",
///     "enc": true,
///     "content": [
///       "Ly8vIFRoaXMgY2xhc3MgaXMgdGhlIHN1cGVyY2xhc3MgZm9yIGFsbCBlbnVtZXJhdGVkIHR5cGVzIGdlbmVyYXRlZCBmcm9tCi8vLyBhIHR5cGUgbGlicmFyeQpDbGFzcyAlQWN0aXZhdGUuRW51bSBFeHRlbmRzICVJbnRlZ2VyIFsgTm90IFByb2NlZHVyZUJsb2NrLCBTeXN0ZW0gPSAzIF0KewoKfQo="
///     ]
///   }
/// }
/// </pre>
///
ClassMethod GetDoc(pNamespace As %String, pDocName As %String) As %Status
{
}

/// This method returns the text for the all the specified documents in the namespace.
/// <br/>A list of documents to be fetched is passed in the body of the http request.
/// <br/>The request body is simply a JSON array of names of documents you want to fetch [ "%Activate.Enum.cls", ... ]
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 415 if the we are not passed application/json as the content type
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Return content will be an array of document objects. Errors pertaining to a document
/// <br/>will be in the status property of each document object.
/// <br/>
/// <br/>See the 'GetDoc' description above for a detailed explanation of the individual fields returned.
/// <br/>This method does NOT support the storageOnly flag. Neither does it do ETAG checking (and therefore
/// <br/>will NOT return an HTTP 304 under any circumstances).
///
ClassMethod GetDocs(pNamespace As %String) As %Status
{
}

/// This method returns the indices for the all the specified documents in the namespace.
/// <br/>A list of documents to be indexed is passed in the body of the http request.
/// <br/>The request body is simply a JSON array of names of documents you want to index [ "%Activate.Enum.cls", ... ]
/// <br/>
/// <br/>NOTE: Currently we only support the indexing of classes
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 415 if the we are not passed application/json as the content type
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Return content will be an array of index document objects. Errors pertaining to a document
/// <br/>will be in the status property of each document object. The index contains information relating
/// <br/>to the structure and documentation of documents on the server and will vary by the category to
/// <br/>which the document belongs. Below is an example for a class.
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [],
///   "result": {
///     "content": [
///       {
///         "name": "%Activate.GenericObject.cls",
///         "db": "IRISLIB",
///         "ts": "2016-01-04 14:00:04.000",
///         "gen": false,
///         "others": [
///           "%Activate.GenericObject.1.INT"
///         ],
///         "cat": "CLS",
///         "content": {
///           "desc": "This class provides functionality to create an ActiveX object, invoke its methods\nand Get/Set its properties by name.",
///           "depl": false,
///           "depr": false,
///           "final": false,
///           "hidden": false,
///           "super": [
///             "%Activate.IDispatch"
///           ],
///           "methods": [
///             {
///               "name": "CreateObject",
///               "desc": "This method is used to create a generic object given only its progid. If the object\ncannot be found an exception is thrown. The return value should be tested against\n$$$NULLOREF  in the usual manner to ensure that the object has been successfully\ncreated",
///               "depr": false,
///               "final": true,
///               "internal": false,
///               "private": false,
///               "scope": "class",
///               "returntype": "%Library.RegisteredObject",
///               "args": [
///                 {
///                   "name": "Progid",
///                   "type": "%Library.String"
///                 }
///               ]
///             },
///             {
///               "name": "GetObject",
///               "desc": "This method is used to create a generic object from a moniker. If the object\ncannot be found an exception is thrown. The return value should be tested against\n$$$NULLOREF  in the usual manner to ensure that the object has been successfully\ncreated.",
///               "depr": false,
///               "final": true,
///               "internal": false,
///               "private": false,
///               "scope": "class",
///               "returntype": "%Library.RegisteredObject",
///               "args": [
///                 {
///                   "name": "Moniker",
///                   "type": "%Library.String"
///                 }
///               ]
///             }
///           ],
///           "parameters": [],
///           "properties": []
///         },
///         "status": ""
///       }
///     ]
///   }
/// }
/// </pre>
ClassMethod Index(pNamespace As %String) As %Status
{
}

/// This method returns the results of running the specified query in the specified namespace.
/// <br/>The request body is simply a JSON object which specifies the query
/// <br/>{
/// <br/>    "query":"call %studio.debugger_processlist()",
/// <br/>    "parameters" : []
/// <br/>}
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 415 if the we are not passed application/json as the content type
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Return content will be an array of  objects. Errors will be in the status property of each document object.
/// <br/>The objects contain information relating to each row returned by the query.
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [],
///   "result": {
///     "content": [
///     ]
///   }
/// }
/// </pre>
ClassMethod Query(pNamespace As %String) As %Status
{
}

/// Helper method for Query
/// Appends result set (%SQL.StatementResult) to an array.
/// Largely copied from %DataModel.Document.Server.SQL.Query
ClassMethod AppendResultSet(pArray As %DynamicArray, pResult As %SQL.StatementResult) As %Status [ Internal, Private ]
{
}

/// This method returns the HttpHeader for the named document and namespace.
/// <br/>This information primarily contains the timestamp and can be used to detect
/// <br/>discrepancies between server and client version
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 400 if the resource name is an invalid document name
/// <br/>HTTP 404 if the resource is not found
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
///
ClassMethod HeadDoc(pNamespace As %String, pDocName As %String) As %Status
{
}

/// This method saves the supplied document
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 201 if created
/// <br/>HTTP 400 if the resource name is an invalid document name
/// <br/>HTTP 404 if the resource is not found
/// <br/>HTTP 409 if a conflict between server and client versions is detected
/// <br/>HTTP 415 if not passed text/plain as content type
/// <br/>HTTP 425 if the document is locked and cannot be written to
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Return content will be a document object.
/// <br/>Errors pertaining to the document will be in the status property of the document object.
/// <br/>
/// <br/>The URL parameter ?ignoreConflict=1 can be passed to bypass ETAG checking (see reference
/// <br/>above in 'GetDoc') and force the document to be written on the server.
/// <br/>
/// <br/>Note that if the text on the server is changed during the save process (for example
/// <br/>by a source control hook) the new text will be returned in the content array
/// <br/>of the returned document.
/// <br/>
/// <br/>Here is an example of a PUT for the document xyz.mac
/// <br/>
/// <pre>
/// {
///  "enc": false,
///  "content": [
///    "ROUTINE xyz",
///    "xyz ;",
///    "   w \"hello\""
///    ]
/// }
/// </pre>
/// <br/>
/// <br/>and the corresponding response :-
/// <br/>
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [
///   ],
///   "result": {
///     "name": "xyz.mac",
///     "db": "IRISSYS",
///     "ts": "2016-01-12 17:18:29.332",
///     "cat": "RTN",
///     "status": "",
///     "enc": false,
///     "content": []
///   }
/// }
/// </pre>
ClassMethod PutDoc(pNamespace As %String, pDocName As %String) As %Status
{
}

ClassMethod CheckSourceControlEdit(pName As %String) As %Status [ Internal ]
{
}

/// This method deletes the named document in the specified namespace
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 400 if the resource name is an invalid document name
/// <br/>HTTP 404 if the resource is not found
/// <br/>HTTP 423 if the resource is locked
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Return content will be a document object.
/// <br/>errors pertaining to the document will be in the status property of the document object
/// <br/>
/// <br/>Example Output :-
/// <br/>
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [
///   ],
///   "result": {
///     "name": "xyz.mac",
///     "db": "IRISSYS",
///     "ts": "",
///     "cat": "RTN",
///     "status": "",
///     "enc": false,
///     "content": []
///   }
/// }
/// </pre>
ClassMethod DeleteDoc(pNamespace As %String, pDocName As %String) As %Status
{
}

/// This method deletes the list of named documents which is passed in the body of the http request.
/// <br/>as a JSON array [ "%Activate.Enum.cls", ... ]
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 400 if the posted data does not contain a JSON array
/// <br/>HTTP 415 if the we are not passed application/json as the content type
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Return content will be an array of document objects. Errors pertaining to a each document
/// <br/>will be in the status property of each document object. If the status is an empty string then
/// <br/>the document was deleted successfully. Otherwise the document was NOT deleted. For deleted docs
/// <br/>the db entry will indicate from which database the doc was deleted.
/// <br/>
/// <br/>POSTED: ["xyz.mac","notexist.cls"]
/// <br/>
/// <br/>Result :-
/// <br/>
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [
///   ],
///   "result": [
///     {
///       "name": "xyz.mac",
///       "db": "",
///       "status": ""
///     },
///     {
///       "name": "notexist.cls",
///       "db": "",
///       "status": "ERROR #5001: Document Does Not Exist: User.notexist.cls [zExistsDoc+3^%Atelier.v1.Utils.General.1:%SYS]"
///     }
///   ]
/// }
/// </pre>
ClassMethod DeleteDocs(pNamespace As %String) As %Status
{
}

/// This method permits the compilation of more than one document at a time.
/// <br/>The method expects a content body to be encoded in JSON and contain an
/// <br/>array of items (document names) to be compiled.
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 400 if the resource name is an invalid document name
/// <br/>HTTP 404 if the resource is not found
/// <br/>HTTP 423 if the document is locked
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Return content will be an array of document objects.
/// <br/>Errors pertaining to the document will be in the status property of the document object.
/// <br/>
/// <br/>The URL parameter 'flags' can be passed (default 'cuk') which will be passed to the compiler.
/// <br/>The URL parameter 'source' can be passed with a value of 0 if you don't want the source of the
/// <br/>compiled document to be returned.
/// <br/>
/// <br/>POSTED: ["Atelier.NewClass1.cls"]
/// <br/>
/// <br/>Example Output :-
/// <br/>
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [
///     "Compilation started on 01/12/2016 17:44:00 with qualifiers 'cuk'",
///     "Compiling class Atelier.NewClass1",
///     "Compiling table Atelier.NewClass1",
///     "Compiling routine Atelier.NewClass1.1",
///     "Compilation finished successfully in 0.067s.",
///     ""
///   ],
///   "result": {
///     "content": [
///       {
///         "name": "Atelier.NewClass1.cls",
///         "status": "",
///         "content": [
///           "Storage Default",
///           "{",
///           "<Data name=\"NewClass1DefaultData\">",
///           "<Value name=\"1\">",
///           "<Value>%%CLASSNAME</Value>",
///           "</Value>",
///           "</Data>",
///           "<DataLocation>^Atelier.NewClass1D</DataLocation>",
///           "<DefaultData>NewClass1DefaultData</DefaultData>",
///           "<IdLocation>^Atelier.NewClass1D</IdLocation>",
///           "<IndexLocation>^Atelier.NewClass1I</IndexLocation>",
///           "<StreamLocation>^Atelier.NewClass1S</StreamLocation>",
///           "<Type>%Storage.Persistent</Type>",
///           "}",
///           ""
///         ],
///         "db": "IRISSYS",
///         "ts": "2016-01-12 17:44:00.053",
///         "enc": false
///       }
///     ]
///   }
/// }
/// </pre>
ClassMethod Compile(pNamespace As %String) As %Status
{
}

/// This method returns a list of document names. Cat and Type constrain the types of documents,
/// <br/>whilst the URL parameter 'generated' determines whether generated documents should be included
/// <br/>and the 'filter' parameter provides a SQL filter that can be used to match the names.
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Return content will be an array of document descriptors :-
/// <br/>
/// <pre>
/// {
///     "status": {
///         "errors": [],
///         "summary": ""
///     },
///     "console": [],
///     "result": {
///         "content": [{
///             "name": "%Activate.Enum.cls",
///             "cat": "CLS",
///             "ts": "2016-01-04 14:00:04.000",
///             "db": "IRISLIB",
///             "gen": false
///         }]
///     }
/// }
/// </pre>
ClassMethod GetDocNames(pNamespace As %String, pCat, pType)
{
}

/// This method converts a client Doc to the corresponding XML.
/// <br/>Note: This is NOT a public API and will be retired in a future version
/// <br/>Customers SHOULD NOT call this API from their own code
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 400 if the posted content is empty
/// <br/>HTTP 415 if content type is not application/json
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Returned content is XML.
///
ClassMethod CvtClientDocToXml(pNamespace As %String) As %Status
{
}

/// This method converts a XML to the corresponding client document format.
/// <br/>Note: This is NOT a public API and will be retired in a later version
/// <br/>Customers SHOULD NOT call this API from their own code
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 400 if the posted content is empty
/// <br/>HTTP 415 if content type is not application/xml
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Returned content is plain text.
///
ClassMethod CvtXmlToClientDoc(pNamespace As %String) As %Status
{
}

/// This method is passed a list of database keys and hashes as a json array.
/// <br/>The hash values are used to determine if anything has changed in the database defined by the key.
/// <br/>The first call to this api necessarily POSTS an empty array. Subsequent posts can post the dbname
/// <br/>and dbhash to discover which documents have been modified on the server since the last call
/// <br/>
/// <br/>Input format :-
/// <br/>
/// <br/>[ { "dbname" : "USER", "dbhash" : "KWAGbOdnRblPzANaiv1Oiu0BZLI" }, ... ]
/// <br/>
/// <br/>Output format :-
/// <br/>
/// <br/>[ { "dbname" : "USER", "dbhash" : "Qx1zuNaulq3b_1yR9ahZAfjkc-", "crhash" : "47763751EC",
/// <br/>    "docs" : [{ "name": "User.NewClass1.cls", "ts": "2015-05-29 17:24:30.156", "gen": false, "depl": false }, ... ]
/// <br/>  }, ... ]
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 400 if the posted content is empty or type is anything other than CLS
/// <br/>HTTP 415 if content type is not application/json
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
///
ClassMethod GetModifiedDocNames(pNamespace As %String, pType As %String) As %Status
{
}

/// Determine the source control class and get an instance of it. The instance is stored in
/// <br/>the public variable %SourceControl and is used by various system utilities.
///
ClassMethod CreateSourceControlClass() As %Status [ Internal ]
{
}

/// This method returns a list of namespaces for this server.
/// <br/>
/// <br/>GET http://localhost:57772/api/atelier/v1/%25SYS/namespaces
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Returned content is an array of namespaces.
/// <br/>
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [],
///   "result": {
///     "content": [
///       "%SYS",
///       "DOCBOOK",
///       "SAMPLES",
///       "USER"
///     ]
///   }
/// }
/// </pre>
ClassMethod GetNamespaces() As %Status [ Internal ]
{
}

/// This method returns information about a specific namespace
/// <br/>
/// <br/>GET http://localhost:57772/api/atelier/v1/:namespace
/// <br/>
/// <br/>GET http://localhost:57772/api/atelier/v1/DOCBOOK
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Returned content is information about a namespace
/// <br/>
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [],
///   "result": {
///     "content": {
///       "name": "DOCBOOK",
///       "db": [
///         { "name": "DOCBOOK", "crhash": "5046B9BF0DE", "default": true },
///         { "name": "IRISSYS", "crhash": "47763751EC", "default": false },
///         { "name": "IRISLOCALDATA", "crhash": "4776EDD1C3", "default": false },
///         { "name": "IRISLIB", "crhash": "5023332D0A7", "default": false }
///       ],
///       "features": [
///         {
///           "name": "ENSEMBLE",
///           "enabled": false
///         }
///       ],
///     }
///   }
/// }
/// </pre>
ClassMethod GetNamespace(pNamespace) As %Status
{
}

/// This method returns a list csp apps defined on the server (or namespace)
/// <br/>
/// <br/>GET http://localhost:57772/api/atelier/v1/%25SYS/cspapps
/// <br/>GET http://localhost:57772/api/atelier/v1/%25SYS/cspapps/DOCBOOK
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Returned content is an array of csp application descriptors.
/// <br/>
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [],
///   "result": {
///     "content": [
///       "/csp/broker",
///       "/csp/docbook",
///       "/csp/documatic",
///       "/csp/samples",
///       "/csp/samples/docserver",
///       "/csp/sys",
///       "/csp/sys/bi",
///       "/csp/sys/exp",
///       "/csp/sys/mgr",
///       "/csp/sys/op",
///       "/csp/sys/sec",
///       "/csp/user",
///       "/isc/pki",
///       "/isc/studio/rules",
///       "/isc/studio/templates",
///       "/isc/studio/usertemplates"
///     ]
///   }
/// }
/// </pre>
/// <br/>
/// <br/>passing the URL parameter ?detail=1 will return an array containing objects which describe
/// <br/>the application in more detail :-
/// <br/>
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [],
///   "result": {
///     "content": [
///       {
///         "default": false,
///         "name": "/csp/broker"
///       },
///       {
///         "default": true,
///         "name": "/csp/sys"
///       },
///       {
///         "default": false,
///         "name": "/csp/sys/bi"
///       },
///       {
///         "default": false,
///         "name": "/csp/sys/exp"
///       },
///       {
///         "default": false,
///         "name": "/csp/sys/mgr"
///       },
///       {
///         "default": false,
///         "name": "/csp/sys/op"
///       },
///       {
///         "default": false,
///         "name": "/csp/sys/sec"
///       },
///       {
///         "default": false,
///         "name": "/isc/pki"
///       },
///       {
///         "default": false,
///         "name": "/isc/studio/rules"
///       },
///       {
///         "default": false,
///         "name": "/isc/studio/templates"
///       },
///       {
///         "default": false,
///         "name": "/isc/studio/usertemplates"
///       }
///     ]
///   }
/// }
/// </pre>
ClassMethod GetCSPApps(pNamespace As %String = "") As %Status
{
}

/// The delimiter string used by ##class(%Studio.Debugger).GetInfo
Parameter DELIMITER [ Internal ] = {$C(19) _ "^" _ $C(1)};

/// This method returns a list of running jobs in the InterSystems IRIS instance.
/// <br/>
/// <br/>GET http://localhost:57772/api/atelier/v1/%25SYS/jobs?system=1
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Returned content is an array of job descriptors.
/// <br/>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [],
///   "result": {
///     "content": [
///       {
///         "pid": 1394,
///         "namespace": "%SYS",
///         "routine": "%Studio.Debugger.1",
///         "state": "RUN",
///         "device": "|TCP|1972|1394"
///       },
///       {
///         "pid": 1345,
///         "namespace": "%SYS",
///         "routine": "RECEIVE",
///         "state": "HANG",
///         "device": "/dev/null"
///       },
///       {
///         "pid": 1364,
///         "namespace": "%SYS",
///         "routine": "%SYS.TaskSuper.1",
///         "state": "SELECTW",
///         "device": "/dev/null"
///       },
///       {
///         "pid": 1396,
///         "namespace": "%SYS",
///         "routine": "%SYS.cspServer3",
///         "state": "READ",
///         "device": "|TCP|1972|1396"
///       },
///       {
///         "pid": 1346,
///         "namespace": "%SYS",
///         "routine": "ECPWork",
///         "state": "RUNW",
///         "device": "/dev/null"
///       },
///       {
///         "pid": 1417,
///         "namespace": "%SYS",
///         "routine": "%SYS.BINDSRV",
///         "state": "READ",
///         "device": "|TCP|1972|1417"
///       }
///     ]
///   }
/// }
///
ClassMethod GetJobs() As %Status
{
}

ClassMethod RunDebugger() As %Status
{
}

/// This method returns a list of Ensemble class names.
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Returned content is an array of selected Ensemble class names.
/// <br/>
/// <br/>These are the query types:
/// <br/>Adapters           1
/// <br/>InboundAdapters    2
/// <br/>OutboundAdapters   3
/// <br/>Messages           4
/// <br/>Requests           5
/// <br/>Responses          6
/// <br/>BusinessServices   7
/// <br/>BusinessProcesses  8
/// <br/>BusinessOperations 9
/// <br/>DataTransformation 10
/// <br/>Production         11
/// <br/>BusinessHost       12
/// <br/>Dashboard          13
/// <br/>Rule               14
/// <br/>
/// <br/>Example response:
/// <br/>
/// <pre>
/// {
///   status: {
///     errors: []
///     summary: ""
///   }
///   console: []
///   result: {
///     content: [
///         "Ens.Enterprise.MsgBank.BankTCPAdapter"
///         "Ens.Enterprise.MsgBank.ClientTCPAdapter"
///         "Ens.InboundAdapter"
///         "Ens.OutboundAdapter"
///     ]
///   }
/// }
/// </pre>
ClassMethod GetEnsClassType(pNamespace As %String = "", pClassType As %Integer = 0) As %Status
{
}

/// Data("Type") values returned for the %RoutineMgr:StudioOpenDialog result set are:<br>
/// 0:"MAC",1:"INT",2:"INC",3:"BAS",4:"CLS",5:"CSP",6:"CSR",7:"GBL",8:"PRJ",11:"MVB",12:"MVI",13:"OBJ",100:"DFI"
///
ClassMethod getDlgCat(pType As %Integer) As %String [ CodeMode = expression, Internal ]
{
}

/// Change external type values to our category
ClassMethod getTypeCat(pType As %String) As %String [ CodeMode = expression, Internal ]
{
}

/// This method returns the input and output type for the adapter.
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 404 if the adapter does not exist
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Example response:
/// <br/>
/// <pre>
/// {
///   status: {
///     errors: []
///     summary: ""
///   }
///   console: []
///   result: {
///     content: {
///       input: "%Stream.Object"
///       output: "%String"
///     }
///   }
/// }
/// </pre>
ClassMethod GetAdpInputOutputClass(pNamespace As %String = "", pAdpName As %String = "") As %Status
{
}

/// This method returns the binary contents of the METADATA.zip file for the named database
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 404 if the document does not exist
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
///
ClassMethod GetMetaData(pDataBaseName As %String) As %Status
{
}

/// <br/> This call queues an item for work. On success it returns 202 and sets the 'Location' header
/// <br/> to indicate where the results can be retrieved from with an HTTP GET.
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 202 if Accepted
/// <br/>HTTP 404 if the request type does not exist
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
///
ClassMethod QueueAsync(pNameSpace As %String) As %Status [ Internal ]
{
}

/// <br/> This call polls a queued item for console output and results. On success it returns 200.
/// <br/> Console output and results are found in the standard locations for Atelier REST APIs.
/// <br/> If there is more output expected the server will set the 'Retry-After' header. The client
/// <br/> should read this header to determine if another call should be made.
/// <br/> When the result of processing is available (or the work is finished) a GET to this API
/// <br/> will return any results in the 'content' field and (crucially) will NOT set the 'Retry-After'
/// <br/> header. This is an indication that processing is finished.
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if Accepted
/// <br/>HTTP 404 if the document does not exist
/// <br/>HTTP 410 if the results have been purged (client never retrieved after lengthy delay)
/// <br/>HTTP 423 if the queue is locked
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
///
ClassMethod PollAsync(pNameSpace As %String, pID As %Integer) As %Status [ Internal ]
{
}

/// <br/> This call cancels a work request that has been previously queued.
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if Cancelled
/// <br/>HTTP 202 if Accepted and Cancel issued
/// <br/>HTTP 404 if the request does not exist
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
///
ClassMethod CancelAsync(pNameSpace As %String, pID As %Integer) As %Status [ Internal ]
{
}

/// This is a background job that monitors the queue for work to do
ClassMethod Monitor() [ Internal ]
{
}

ClassMethod MonitorBeginCapture(pID As %String, Output pCookie As %String) As %Status [ Internal, ProcedureBlock = 0 ]
{
}

ClassMethod MonitorEndCapture(pCookie As %String) As %Status [ Internal ]
{
}

}
