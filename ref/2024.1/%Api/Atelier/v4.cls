/// %Api.Atelier.v4 provides version 4 APIs for Atelier
Class %Api.Atelier.v4 Extends %Api.Atelier.v3
{

XData UrlMap [ XMLNamespace = "http://www.intersystems.com/urlmap" ]
{
}

/// This method returns the text for the named document and namespace.
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 304 if the document has not been modified (see https://en.wikipedia.org/wiki/HTTP_ETag)
/// <br/>HTTP 400 if the named resource is not a valid document name
/// <br/>HTTP 404 if the document does not exist
/// <br/>HTTP 500 if an unxpected error occurs (details will be in status error array)
/// <br/>
/// <br/>Return content will contain a document object.
/// <br/>Errors pertaining to the document will be in the status property of the document object.
/// If source control hooks are enabled for the namespace any console output generated by the hook
/// will be captured and returned as an array of lines in the 'console' array.
/// <br/>
/// <br/>The result contains the name of the requested document, the database where it is stored, its
/// timestamp and category (CLS - class, RTN - routine, CSP - csp, OTH - other), as well as
/// the document contents which are returned in an array.
/// <br/>
/// <br/>For text documents this will be an array of strings and the 'enc' json field will be set to false.
/// <br/>For binary documents this will be an array of base64 encoded chunks and the 'enc' field will be set to true.
/// <br/>
/// <br/>The URL parameter ?binary=1 can be passed to force the document to be encoded as binary.
/// <br/>
/// <br/>The URL parameter ?storageOnly=1 can be passed to return only the storage portion of a class.
/// <br/>
/// <br/>The URL parameter ?format= can be passed to specify the source format. The choices are
/// "udl" (the default), "udl-multiline" or "xml". Specifying "udl-multiline" will format method
/// arguments on multiple lines.
/// <br/>
/// <br/>If a 'soft' error occurs such as a 'document does not exist', additional information can be found in
/// the 'status' field of the result. Examples of other soft errors are 'file is locked' etc.
/// <br/>
/// <br/>Here is an example of the result of asking for %Activate.Enum.cls
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [],
///   "result": {
///     "name": "%Activate.Enum.cls",
///     "db": "IRISLIB",
///     "ts": "2016-01-04 14:00:04.000",
///     "cat": "CLS",
///     "status": "",
///     "enc": false,
///     "content": [
///       "/// This class is the superclass for all enumerated types generated from",
///       "/// a type library",
///       "Class %Activate.Enum Extends %Integer [ Not ProcedureBlock, System = 3 ]",
///       "{",
///       "",
///       "}",
///       ""
///     ]
///   }
/// }
/// </pre>
/// <br/>and here is the result with ?binary=1
/// <br/>
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [],
///   "result": {
///     "name": "%Activate.Enum.cls",
///     "db": "IRISLIB",
///     "ts": "2016-01-04 14:00:04.000",
///     "cat": "CLS",
///     "status": "",
///     "enc": true,
///     "content": [
///       "Ly8vIFRoaXMgY2xhc3MgaXMgdGhlIHN1cGVyY2xhc3MgZm9yIGFsbCBlbnVtZXJhdGVkIHR5cGVzIGdlbmVyYXRlZCBmcm9tCi8vLyBhIHR5cGUgbGlicmFyeQpDbGFzcyAlQWN0aXZhdGUuRW51bSBFeHRlbmRzICVJbnRlZ2VyIFsgTm90IFByb2NlZHVyZUJsb2NrLCBTeXN0ZW0gPSAzIF0KewoKfQo="
///     ]
///   }
/// }
/// </pre>
///
ClassMethod GetDoc(pNamespace As %String, pDocName As %String) As %Status
{
}

/// This method returns the indices for the all the specified documents in the namespace.
/// <br/>A list of documents to be indexed is passed in the body of the http request.
/// <br/>The request body is simply a JSON array of names of documents you want to index [ "%Activate.Enum.cls", ... ]
/// <br/>
/// <br/>An optional label+offset location can be included at the end of a document name, delimited by a colon: [ "%Activate.Enum.cls:method+5", ... ]
/// <br/>If a location is provided for a document, the values in the "others" array in the response object will contain the
/// <br/>document name followed by a ':' and then the offset corresponding to the location in the requested document.
/// <br/>
/// <br/>NOTE: Currently we only support the indexing of classes
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 415 if the we are not passed application/json as the content type
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Return content will be an array of index document objects. Errors pertaining to a document
/// <br/>will be in the status property of each document object. The index contains information relating
/// <br/>to the structure and documentation of documents on the server and will vary by the category to
/// <br/>which the document belongs. Below is an example for a class.
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [],
///   "result": {
///     "content": [
///       {
///         "name": "%Activate.GenericObject.cls",
///         "db": "IRISLIB",
///         "ts": "2016-01-04 14:00:04.000",
///         "gen": false,
///         "others": [
///           "%Activate.GenericObject.1.INT"
///         ],
///         "cat": "CLS",
///         "content": {
///           "desc": "This class provides functionality to create an ActiveX object, invoke its methods\nand Get/Set its properties by name.",
///           "depl": false,
///           "depr": false,
///           "final": false,
///           "hidden": false,
///           "super": [
///             "%Activate.IDispatch"
///           ],
///           "methods": [
///             {
///               "name": "CreateObject",
///               "desc": "This method is used to create a generic object given only its progid. If the object\ncannot be found an exception is thrown. The return value should be tested against\n$$$NULLOREF  in the usual manner to ensure that the object has been successfully\ncreated",
///               "depr": false,
///               "final": true,
///               "internal": false,
///               "private": false,
///               "scope": "class",
///               "returntype": "%Library.RegisteredObject",
///               "args": [
///                 {
///                   "name": "Progid",
///                   "type": "%Library.String"
///                 }
///               ]
///             },
///             {
///               "name": "GetObject",
///               "desc": "This method is used to create a generic object from a moniker. If the object\ncannot be found an exception is thrown. The return value should be tested against\n$$$NULLOREF  in the usual manner to ensure that the object has been successfully\ncreated.",
///               "depr": false,
///               "final": true,
///               "internal": false,
///               "private": false,
///               "scope": "class",
///               "returntype": "%Library.RegisteredObject",
///               "args": [
///                 {
///                   "name": "Moniker",
///                   "type": "%Library.String"
///                 }
///               ]
///             }
///           ],
///           "parameters": [],
///           "properties": []
///         },
///         "status": ""
///       }
///     ]
///   }
/// }
/// </pre>
ClassMethod Index(pNamespace As %String) As %Status
{
}

/// Helper method for Query
/// Appends result set (%SQL.StatementResult) to an array.
/// Largely copied from %DataModel.Document.Server.SQL.Query
ClassMethod AppendResultSet(pArray As %DynamicArray, pResult As %SQL.StatementResult) As %Status [ Internal, Private ]
{
}

}
