/// %Api.Atelier.v2 provides version 2 APIs for Atelier
Class %Api.Atelier.v2 Extends %Api.Atelier.v1
{

XData UrlMap [ XMLNamespace = "http://www.intersystems.com/urlmap" ]
{
}

/// This method returns an id for use with CSP debugging
/// <br/>
/// <br/>GET http://localhost:57772/api/atelier/v2/%25SYS/cspdebugid
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Returned content is an integer debug identifier
/// <br/>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [],
///   "result": {
///     "content": { id: NNNNNN }
///   }
/// }
///
ClassMethod GetCSPDebugId() As %Status
{
}

ClassMethod RunDebugger() As %Status
{
}

/// This method returns the text for the named document and namespace.
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 200 if OK
/// <br/>HTTP 304 if the document has not been modified (see https://en.wikipedia.org/wiki/HTTP_ETag)
/// <br/>HTTP 400 if the named resource is not a valid document name
/// <br/>HTTP 404 if the document does not exist
/// <br/>HTTP 500 if an unxpected error occurs (details will be in status error array)
/// <br/>
/// <br/>Return content will contain a document object.
/// <br/>Errors pertaining to the document will be in the status property of the document object.
/// If source control hooks are enabled for the namespace any console output generated by the hook
/// will be captured and returned as an array of lines in the 'console' array.
/// <br/>
/// <br/>The result contains the name of the requested document, the database where it is stored, its
/// timestamp and category (CLS - class, RTN - routine, CSP - csp, OTH - other), as well as
/// the document contents which are returned in an array.
/// <br/>
/// <br/>For text documents this will be an array of strings and the 'enc' json field will be set to false.
/// <br/>For binary documents this will be an array of base64 encoded chunks and the 'enc' field will be set to true.
/// <br/>
/// <br/>The URL parameter ?binary=1 can be passed to force the document to be encoded as binary.
/// <br/>
/// <br/>The URL parameter ?storageOnly=1 can be passed to return only the storage portion of a class.
/// <br/>
/// <br/>The URL parameter ?format= can be passed to specify the source format. The choices are
/// "udl" (the default) or "xml".
/// <br/>
/// <br/>If a 'soft' error occurs such as a 'document does not exist', additional information can be found in
/// the 'status' field of the result. Examples of other soft errors are 'file is locked' etc.
/// <br/>
/// <br/>Here is an example of the result of asking for %Activate.Enum.cls
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [],
///   "result": {
///     "name": "%Activate.Enum.cls",
///     "db": "IRISLIB",
///     "ts": "2016-01-04 14:00:04.000",
///     "cat": "CLS",
///     "status": "",
///     "enc": false,
///     "content": [
///       "/// This class is the superclass for all enumerated types generated from",
///       "/// a type library",
///       "Class %Activate.Enum Extends %Integer [ Not ProcedureBlock, System = 3 ]",
///       "{",
///       "",
///       "}",
///       ""
///     ]
///   }
/// }
/// </pre>
/// <br/>and here is the result with ?binary=1
/// <br/>
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [],
///   "result": {
///     "name": "%Activate.Enum.cls",
///     "db": "IRISLIB",
///     "ts": "2016-01-04 14:00:04.000",
///     "cat": "CLS",
///     "status": "",
///     "enc": true,
///     "content": [
///       "Ly8vIFRoaXMgY2xhc3MgaXMgdGhlIHN1cGVyY2xhc3MgZm9yIGFsbCBlbnVtZXJhdGVkIHR5cGVzIGdlbmVyYXRlZCBmcm9tCi8vLyBhIHR5cGUgbGlicmFyeQpDbGFzcyAlQWN0aXZhdGUuRW51bSBFeHRlbmRzICVJbnRlZ2VyIFsgTm90IFByb2NlZHVyZUJsb2NrLCBTeXN0ZW0gPSAzIF0KewoKfQo="
///     ]
///   }
/// }
/// </pre>
///
ClassMethod GetDoc(pNamespace As %String, pDocName As %String) As %Status
{
}

/// This method saves the supplied document
/// <br/>
/// <br/>HTTP Codes returned:-
/// <br/>
/// <br/>HTTP 201 if created
/// <br/>HTTP 400 if the resource name is an invalid document name
/// <br/>HTTP 404 if the resource is not found
/// <br/>HTTP 409 if a conflict between server and client versions is detected
/// <br/>HTTP 415 if not passed text/plain as content type
/// <br/>HTTP 425 if the document is locked and cannot be written to
/// <br/>HTTP 500 if an error occurs (details will be in status error array)
/// <br/>
/// <br/>Return content will be a document object.
/// <br/>Errors pertaining to the document will be in the status property of the document object.
/// <br/>
/// <br/>The URL parameter ?ignoreConflict=1 can be passed to bypass ETAG checking (see reference
/// <br/>above in 'GetDoc') and force the document to be written on the server.
/// <br/>
/// <br/>Note that if the text on the server is changed during the save process (for example
/// <br/>by a source control hook) the new text will be returned in the content array
/// <br/>of the returned document.
/// <br/>
/// <br/>Here is an example of a PUT for the document xyz.mac
/// <br/>
/// <pre>
/// {
///  "enc": false,
///  "content": [
///    "ROUTINE xyz",
///    "xyz ;",
///    "   w \"hello\""
///    ]
/// }
/// </pre>
/// <br/>
/// <br/>and the corresponding response :-
/// <br/>
/// <pre>
/// {
///   "status": {
///     "errors": [],
///     "summary": ""
///   },
///   "console": [
///   ],
///   "result": {
///     "name": "xyz.mac",
///     "db": "IRISSYS",
///     "ts": "2016-01-12 17:18:29.332",
///     "cat": "RTN",
///     "status": "",
///     "enc": false,
///     "content": []
///   }
/// }
/// </pre>
ClassMethod PutDoc(pNamespace As %String, pDocName As %String) As %Status
{
}

ClassMethod CheckSourceControlEdit(pName As %String) As %Status [ Internal ]
{
}

/// Input request:
/// <pre>
/// {
///   "docname": "MyClass.cls",
///   "hash": "XXXX",
///   "cursor": "XXX",
///   "superclasses": ["class1",...],
///   "includes": ["include1",...],
///   "includegenerators": ["generator1",...],
///   "imports": ["package1",...],
///   "mode": "generator" or ""
/// }
/// </pre>
///   "hash" is a null string or the value returned from a previous call for this document.
///   If the server contents have not changed, the result will be this same hash value
///   and nothing else.<br/>
///   "cursor" is a null string or the value returned from the previous call.<br/>
/// <br/>Returned content:
/// <pre>
/// {
///   "status": { "errors": [],  "summary": "" },
///   "console": [],
///   "result": {
///     "content": {
///       "hash": "XXXX",
///       "cursor": "XXXX",
///       "macros": ["macro1",...]
///     }
///   }
/// }
/// </pre>
///   "hash" is a value indicating the current contents of the server. If this value
///   is passed in the next request for this document and the server contents have
///   not changed, nothing needs to be returned.<br/>
///   "cursor" will be the null string if the macro list is complete. If it is not
///   null, another call should be made, passing this cursor value, to get the next part
///   of the macro list.
///
ClassMethod GetMacroList(pNamespace As %String) As %Status
{
}

/// Input request:
/// <pre>
/// {
///   "docname": "MyClass.cls",
///   "macroname": "mymac",
///   "superclasses": ["class1",...],
///   "includes": ["include1",...],
///   "includegenerators": ["generator1",...],
///   "imports": ["package1",...],
///   "mode": "generator" or ""
/// }
/// </pre>
/// Returned content:
/// <pre>
/// {
///   "status": { "errors": [],  "summary": "" },
///   "console": [],
///   "result": {
///     "content": {
///       "signature": "(arg1,arg2)"
///     }
///   }
/// }
/// </pre>
///
ClassMethod GetMacroSignature(pNamespace As %String) As %Status
{
}

/// Input request:
/// <pre>
/// {
///   "docname": "MyClass.cls",
///   "macroname": "mymac",
///   "superclasses": ["class1",...],
///   "includes": ["include1",...],
///   "includegenerators": ["generator1",...],
///   "imports": ["package1",...],
///   "mode": "generator" or ""
/// }
/// </pre>
/// Returned content:
/// <pre>
/// {
///   "status": { "errors": [],  "summary": "" },
///   "console": [],
///   "result": {
///     "content": {
///       "document": "name.inc",
///       "line": lineno
///     }
///   }
/// }
/// </pre>
///
ClassMethod GetMacroLocation(pNamespace As %String) As %Status
{
}

/// Input request:
/// <pre>
/// {
///   "docname": "MyClass.cls",
///   "macroname": "mymac",
///   "superclasses": ["class1",...],
///   "includes": ["include1",...],
///   "includegenerators": ["generator1",...],
///   "imports": ["package1",...],
///   "mode": "generator" or ""
/// }
/// </pre>
/// Returned content:
/// <pre>
/// {
///   "status": { "errors": [],  "summary": "" },
///   "console": [],
///   "result": {
///     "content": {
///       "definition": ["line1","line2",...]
///     }
///   }
/// }
/// </pre>
///
ClassMethod GetMacroDefinition(pNamespace As %String) As %Status
{
}

/// Input request:
/// <pre>
/// {
///   "docname": "MyClass.cls",
///   "macroname": "mymac",
///   "arguments": "(arg1,arg2,...)",
///   "superclasses": ["class1",...],
///   "includes": ["include1",...],
///   "includegenerators": ["generator1",...],
///   "imports": ["package1",...],
///   "mode": "generator" or ""
/// }
/// </pre>
/// Returned content:
/// <pre>
/// {
///   "status": { "errors": [],  "summary": "" },
///   "console": [],
///   "result": {
///     "content": {
///       "expansion": ["line1","line2",...]
///     }
///   }
/// }
/// </pre>
///
ClassMethod GetMacroExpansion(pNamespace As %String) As %Status
{
}

/// This method searches a set of documents using a Regular Expression or a text string.<br>
/// <br>HTTP Codes returned:-
/// <br>
/// <br>HTTP 200 if request is OK
/// <br>HTTP 400 if there are missing arguments
/// <br><br>
/// Input request:
/// <pre>
/// GET localhost:57772/api/atelier/v2/:namespace/action/search?query=expr&documents=list&sys=1&gen=1&amp;regex=1&max=200
/// </pre>
/// Required arguments are:<br>
/// query = the search expression, a regular expression or a plain text string<br>
/// documents = a comma-separated list of documents or masks with the * wild card<br>
/// <br>
/// Optional arguments are:<br>
/// regex = 0 or 1 (default 1) whether the query string is a regular expression or not<br>
/// sys = 0 or 1 (default 0) include sytem documents in the search<br>
/// gen = 0 or 1 (default 0) include generated documents in the search<br>
/// max = nnn (default 200) maxinum number of results to return<br>
/// <br>
/// The result is returned as the console output of the search and as a JSON array.<br>
/// <br>
/// Example input to search for the word Email in all classes and MAC routines:
/// <pre>
/// GET localhost:57772/api/atelier/v2/SAMPLES/action/search?query=.*\bEmail\b.*&documents=*.cls,*.mac
/// </pre>
/// Returned content (some is omitted here):
/// <pre>
/// {
///   "status": { "errors": [],  "summary": "" },
///   "console": [
///     "",
///     "Searching for '.*\\bEmail\\b.*' in '*.cls,*.mac'",
///     "Cinema.Utils.cls(SendEmail+28): Quit \"Email confirmation has been sent to \" _ Addr",
///     "Wasabi.Data.Employee.cls(Email)[Type]: Wasabi.Common.DT.Email",
///     "Wasabi.Data.Employee.cls(CopyFrom+26): set ..Email = employee.Email",
///     "ZAUTHENTICATE.mac(175): Properties(\"EmailAddress\") - Email address",
///     "Found 11 occurrence/s in 7 file/s."
///   ],
///   "result": [
///     {
///       "doc": "Cinema.Utils.cls",
///       "matches": [
///         {
///          "member": "SendEmail",
///          "line": 28,
///          "text": "Quit \"Email confirmation has been sent to \" _ Addr"
///         }
///       ]
///     },
///     {
///       "doc": "Wasabi.Data.Employee.cls",
///       "matches": [
///         {
///          "member": "Email",
///          "attr": "Type",
///          "text": "Wasabi.Common.DT.Email"
///         },
///         {
///          "member": "CopyFrom",
///          "line": 26,
///          "text": "set ..Email = employee.Email"
///         }
///       ]
///     },
///     {
///       "doc": "ZAUTHENTICATE.mac",
///       "matches": [
///         {
///          "line": "175",
///          "text": "Properties(\"EmailAddress\") - Email address"
///         }
///       ]
///     }
///   ]
/// }
ClassMethod Search(pNamespace As %String) As %Status
{
}

/// This method returns the textual definition of a Studio Assist Schema.
/// Pass the url of the schema namespace to retrieve the definition.<br>
/// If the definition does not exist an HTTP 404 Not Found will be returned.<br>
/// If the definition does exist but needs to be recalculated, HTTP 202 Acepted will be returned and the location
/// header will point to the url which should be called in the future to retrieve the value.<br>
/// If the definition checksum matches the value passed in the IF_NONE_MATCH header, an
/// HTTP 304 Not Modified will be returned.<br>
/// If the definition is up to date it will be returned as an array of lines in the result and
/// the ETAG header will be set with the current checksum.
/// <br><br>
/// Input request:
/// <pre>
/// GET localhost:57772/api/atelier/v2/%SYS/saschema/http://www.intersystems.com/urlmap
/// </pre>
///
/// Returned content:
/// <pre>
/// {
///   "status": { "errors": [],  "summary": "" },
///   "console": [],
///   "result": [...]
/// }
/// </pre>
///
ClassMethod GetSASchemaDefinition(pNamespace As %String, pUrl As %String) As %Status [ Internal ]
{
}

}
