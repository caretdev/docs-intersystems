Class %SQL.Manager.QButtons.Base Extends (%Persistent, %XML.Adaptor) [ System = 4 ]
{

Parameter DOMAIN = "%Utility";

/// Stores the actual query statement, if you really need more than 32k, enable long strings and change the MAXLEN
Property QueryStatement As %String(MAXLEN = 32000) [ Required ];

/// Stream containing the query's plan as built by the optimizer
Property QueryPlan As %Stream.GlobalCharacter(CLASSNAME = 2);

/// Property to tell if QueryPlan was built and is valid, otherwise contains the query's compilation error
Property QueryCompileStatus As %Status [ InitialExpression = 0, Required ];

/// Stream containing compiled int code as exported XML
Property QueryIntCode As %Stream.GlobalCharacter(CLASSNAME = 2);

/// Array of %plan for query plan
Property QueryPlanArray As list Of %String(MAXLEN = 32000);

Parameter XMLNAME = "QButton";

/// List of all classes referenced by the query statement
Property ClassList As list Of %String(MAXLEN = 500);

/// Stream containing XML export of all class definitions referenced by the query statement
Property ClassDefXml As %Stream.GlobalCharacter(CLASSNAME = 2);

/// simply contains $zv
Property VersionString As %String(MAXLEN = 500) [ Required ];

Parameter ROWLEVELSECURITY = 1;

/// Stream containing the results of the query as %XML.Dataset output
Property QueryResultData As %Stream.GlobalCharacter(CLASSNAME = 2);

/// WRC Number provided by the user
Property WRCNumber As %Integer [ Required ];

Property TimeInserted As %String [ SqlComputeCode = { s {TimeInserted}=$zdt($zts,3,3)}, SqlComputed ];

Property UserInserted As %String [ SqlComputeCode = { s {UserInserted}=$username}, SqlComputed ];

Property QueryCompileDecomposedStatus As %String [ SqlComputeCode = { s {QueryCompileDecomposedStatus}=##class(%Status).LogicalToOdbc({QueryCompileStatus})}, SqlComputed ];

/// This property has no effect, but remains available for compatibility.
/// Use %SQL.Statement to generate query results
Property IncludeResults As %Boolean;

Property AllowDelimitedIdentifiers As %Boolean;

Property DefaultSchema As %String;

Property BackgroundJobNumber As %Integer;

ClassMethod %SecurityPolicy(UserInserted As %String) As %String [ SqlProc ]
{
}

/// This method builds the query plan and stores it in a stream that will be part of the report.
Method FetchPlan() As %Status [ Internal ]
{
}

/// This method exports the class definitions for each of the classes referenced in the query statement into a stream that is stored inside the report
Method FetchClassDef() As %Status [ Internal ]
{
}

/// This method uses the mtc array created by the query compilation process to find all the classes referenced by the query statement
Method BuildClassList() As %Status [ ProcedureBlock = 0 ]
{
}

Method GetVersion() [ Internal ]
{
}

/// Adds a query to the report, writes out report if a file name is provided
/// This is the main method customer will use to generate reports to be sent to InterSystems Support
ClassMethod InsertQuery(query As %String = "", wrcnum As %String = "NoWRCProvided", includeresults As %Boolean = 0, debug As %Boolean = 0) As %Status
{
}

ClassMethod ListCharStrip(ByRef stream As %Stream.TmpCharacter)
{
}

/// Delete any previous queries that have been added to the report
ClassMethod ClearData(wrcnum As %String = "") As %Status
{
}

ClassMethod ClearRow(filter As %String) As %Status
{
}

ClassMethod WRCRowExists(wrc As %String) As %Boolean
{
}

ClassMethod FindQueryById(id As %String) As %String
{
}

/// Writes XML report of all queries added so far
ClassMethod WriteAllToFile(wrcnum As %String, ByRef filename As %String) As %Status
{
}

/// consume report.  This is intended to be used by Intersystems Support to consume the report generated by the customer
/// It is best to run this in an empty namespace as it will import and compile class definitions and routines
ClassMethod ConsumeReport(filename As %String, qspec As %String = "ck", loadcode As %Boolean = 1, NameSpace As %String) As %Status
{
}

/// Import and compile the class definitions in the report
Method LoadClassDefs(qspec As %String = "ck", ByRef loadedlist) As %Status
{
}

/// Import and compile the query routine int code in the report
Method LoadIntCode(qspec As %String = "ck", ByRef loadedlist) As %Status
{
}

}
